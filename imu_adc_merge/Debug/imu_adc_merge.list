
imu_adc_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009930  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009ab8  08009ab8  00019ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b60  08009b60  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08009b60  08009b60  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b60  08009b60  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b64  08009b64  00019b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08009b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          000003dc  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000480  20000480  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a77d  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9e  00000000  00000000  0003a851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0003d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001608  00000000  00000000  0003ef60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000407e  00000000  00000000  00040568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b068  00000000  00000000  000445e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2b35  00000000  00000000  0005f64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00122183  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006814  00000000  00000000  001221d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a4 	.word	0x200000a4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009aa0 	.word	0x08009aa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a8 	.word	0x200000a8
 80001c4:	08009aa0 	.word	0x08009aa0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <calculate_gestures>:
float finger_angles[4] = {0, 0, 0, 0};

//====================================================================================================
// Functions

void calculate_gestures() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	e00d      	b.n	8000ba8 <calculate_gestures+0x28>
        finger_angles[i] = calculate_finger_angle(i);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f93b 	bl	8000e08 <calculate_finger_angle>
 8000b92:	eef0 7a40 	vmov.f32	s15, s0
 8000b96:	4a7e      	ldr	r2, [pc, #504]	; (8000d90 <calculate_gestures+0x210>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	ddee      	ble.n	8000b8c <calculate_gestures+0xc>
    }

    int gesture_key = detect_gestures(finger_angles);
 8000bae:	4878      	ldr	r0, [pc, #480]	; (8000d90 <calculate_gestures+0x210>)
 8000bb0:	f000 f8fa 	bl	8000da8 <detect_gestures>
 8000bb4:	6038      	str	r0, [r7, #0]
    switch (gesture_key) {
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d04d      	beq.n	8000c58 <calculate_gestures+0xd8>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	f300 80b2 	bgt.w	8000d28 <calculate_gestures+0x1a8>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d004      	beq.n	8000bd4 <calculate_gestures+0x54>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	f000 8087 	beq.w	8000ce0 <calculate_gestures+0x160>
 8000bd2:	e0a9      	b.n	8000d28 <calculate_gestures+0x1a8>
        case 0b0001: // yaw right
            gimbal_yaw = 0.5 + lerp(0, 0.5, finger_angles[FINGER_INDEX_IDX] / 90);
 8000bd4:	4b6e      	ldr	r3, [pc, #440]	; (8000d90 <calculate_gestures+0x210>)
 8000bd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bda:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8000d94 <calculate_gestures+0x214>
 8000bde:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000be2:	eeb0 1a47 	vmov.f32	s2, s14
 8000be6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000bea:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8000d98 <calculate_gestures+0x218>
 8000bee:	f003 ff9b 	bl	8004b28 <lerp>
 8000bf2:	ee10 3a10 	vmov	r3, s0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fc4a 	bl	8000490 <__aeabi_f2d>
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	4b66      	ldr	r3, [pc, #408]	; (8000d9c <calculate_gestures+0x21c>)
 8000c02:	f7ff fae7 	bl	80001d4 <__adddf3>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff ff67 	bl	8000ae0 <__aeabi_d2f>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a62      	ldr	r2, [pc, #392]	; (8000da0 <calculate_gestures+0x220>)
 8000c16:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000c18:	4b5d      	ldr	r3, [pc, #372]	; (8000d90 <calculate_gestures+0x210>)
 8000c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c1e:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <calculate_gestures+0x210>)
 8000c20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c24:	eef0 0a47 	vmov.f32	s1, s14
 8000c28:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2c:	f003 ff60 	bl	8004af0 <max>
 8000c30:	eeb0 7a40 	vmov.f32	s14, s0
 8000c34:	eddf 6a57 	vldr	s13, [pc, #348]	; 8000d94 <calculate_gestures+0x214>
 8000c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3c:	eeb0 1a67 	vmov.f32	s2, s15
 8000c40:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c44:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000d98 <calculate_gestures+0x218>
 8000c48:	f003 ff6e 	bl	8004b28 <lerp>
 8000c4c:	eef0 7a40 	vmov.f32	s15, s0
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <calculate_gestures+0x224>)
 8000c52:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000c56:	e070      	b.n	8000d3a <calculate_gestures+0x1ba>
        case 0b1000: // yaw left
            gimbal_yaw = 0.5 - lerp(0, 0.5, finger_angles[FINGER_PINKY_IDX] / 90);
 8000c58:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <calculate_gestures+0x210>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000d94 <calculate_gestures+0x214>
 8000c62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c66:	eeb0 1a47 	vmov.f32	s2, s14
 8000c6a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000c6e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000d98 <calculate_gestures+0x218>
 8000c72:	f003 ff59 	bl	8004b28 <lerp>
 8000c76:	ee10 3a10 	vmov	r3, s0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fc08 	bl	8000490 <__aeabi_f2d>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4944      	ldr	r1, [pc, #272]	; (8000d9c <calculate_gestures+0x21c>)
 8000c8a:	f7ff faa1 	bl	80001d0 <__aeabi_dsub>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff ff23 	bl	8000ae0 <__aeabi_d2f>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <calculate_gestures+0x220>)
 8000c9e:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <calculate_gestures+0x210>)
 8000ca2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <calculate_gestures+0x210>)
 8000ca8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cac:	eef0 0a47 	vmov.f32	s1, s14
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f003 ff1c 	bl	8004af0 <max>
 8000cb8:	eeb0 7a40 	vmov.f32	s14, s0
 8000cbc:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000d94 <calculate_gestures+0x214>
 8000cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc4:	eeb0 1a67 	vmov.f32	s2, s15
 8000cc8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ccc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8000d98 <calculate_gestures+0x218>
 8000cd0:	f003 ff2a 	bl	8004b28 <lerp>
 8000cd4:	eef0 7a40 	vmov.f32	s15, s0
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <calculate_gestures+0x224>)
 8000cda:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000cde:	e02c      	b.n	8000d3a <calculate_gestures+0x1ba>
        case 0b0110: // throttle
            gimbal_yaw = 0;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <calculate_gestures+0x220>)
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <calculate_gestures+0x210>)
 8000cea:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <calculate_gestures+0x210>)
 8000cf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cf4:	eef0 0a47 	vmov.f32	s1, s14
 8000cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfc:	f003 fef8 	bl	8004af0 <max>
 8000d00:	eeb0 7a40 	vmov.f32	s14, s0
 8000d04:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000d94 <calculate_gestures+0x214>
 8000d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000d10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d14:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000d98 <calculate_gestures+0x218>
 8000d18:	f003 ff06 	bl	8004b28 <lerp>
 8000d1c:	eef0 7a40 	vmov.f32	s15, s0
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <calculate_gestures+0x224>)
 8000d22:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000d26:	e008      	b.n	8000d3a <calculate_gestures+0x1ba>
        default: // no-op
        	gimbal_yaw = 0.5;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <calculate_gestures+0x220>)
 8000d2a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000d2e:	601a      	str	r2, [r3, #0]
        	gimbal_throttle = 0;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <calculate_gestures+0x224>)
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
            break;
 8000d38:	bf00      	nop
    }
    if (gesture_key >> 2 && gesture_key >> 1) {
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	109b      	asrs	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d022      	beq.n	8000d88 <calculate_gestures+0x208>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	105b      	asrs	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d01e      	beq.n	8000d88 <calculate_gestures+0x208>
    	gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <calculate_gestures+0x210>)
 8000d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <calculate_gestures+0x210>)
 8000d52:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d56:	eef0 0a47 	vmov.f32	s1, s14
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	f003 fec7 	bl	8004af0 <max>
 8000d62:	eeb0 7a40 	vmov.f32	s14, s0
 8000d66:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000d94 <calculate_gestures+0x214>
 8000d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6e:	eeb0 1a67 	vmov.f32	s2, s15
 8000d72:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d76:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000d98 <calculate_gestures+0x218>
 8000d7a:	f003 fed5 	bl	8004b28 <lerp>
 8000d7e:	eef0 7a40 	vmov.f32	s15, s0
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <calculate_gestures+0x224>)
 8000d84:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000c0 	.word	0x200000c0
 8000d94:	42b40000 	.word	0x42b40000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	3fe00000 	.word	0x3fe00000
 8000da0:	200003fc 	.word	0x200003fc
 8000da4:	20000400 	.word	0x20000400

08000da8 <detect_gestures>:

int detect_gestures(float* finger_angles) {
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    short gesture_key = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	e019      	b.n	8000dee <detect_gestures+0x46>
        if (finger_angles[i] > ANGLE_THRESH) {
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	dd09      	ble.n	8000de8 <detect_gestures+0x40>
            gesture_key |= 1 << (3 - i);
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	f1c3 0303 	rsb	r3, r3, #3
 8000dda:	2201      	movs	r2, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	89fb      	ldrh	r3, [r7, #14]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	dde2      	ble.n	8000dba <detect_gestures+0x12>
        }
    }
    return gesture_key;
 8000df4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <calculate_finger_angle>:

/*
 * Calculate finger angles
 * ADC_flex read by "analogRead(flexPin)" // analogRead later defined in flex sensor interface"
 */
float calculate_finger_angle(int finger_num) {
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    float voltage_flex = ADC_vals[finger_num] * VCC / (pow(2, ADC_NUM_BITS) - 1);
 8000e10:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <calculate_finger_angle+0xd8>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb27 	bl	800046c <__aeabi_i2d>
 8000e1e:	a32c      	add	r3, pc, #176	; (adr r3, 8000ed0 <calculate_finger_angle+0xc8>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fb8c 	bl	8000540 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	a329      	add	r3, pc, #164	; (adr r3, 8000ed8 <calculate_finger_angle+0xd0>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fcad 	bl	8000794 <__aeabi_ddiv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fe4d 	bl	8000ae0 <__aeabi_d2f>
 8000e46:	4603      	mov	r3, r0
 8000e48:	617b      	str	r3, [r7, #20]
    float resistance_flex = (RESISTANCE_PULLDOWN * voltage_flex) / (VCC - voltage_flex);
 8000e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000ee4 <calculate_finger_angle+0xdc>
 8000e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e56:	ee17 0a90 	vmov	r0, s15
 8000e5a:	f7ff fb19 	bl	8000490 <__aeabi_f2d>
 8000e5e:	4604      	mov	r4, r0
 8000e60:	460d      	mov	r5, r1
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff fb14 	bl	8000490 <__aeabi_f2d>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	a118      	add	r1, pc, #96	; (adr r1, 8000ed0 <calculate_finger_angle+0xc8>)
 8000e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e72:	f7ff f9ad 	bl	80001d0 <__aeabi_dsub>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	f7ff fc89 	bl	8000794 <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fe29 	bl	8000ae0 <__aeabi_d2f>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	613b      	str	r3, [r7, #16]
    float angle = 90 - map(resistance_flex, RESISTANCE_UNFLEXED, RESISTANCE_FLEXED, 0, 90);
 8000e92:	ed9f 2a15 	vldr	s4, [pc, #84]	; 8000ee8 <calculate_finger_angle+0xe0>
 8000e96:	eddf 1a15 	vldr	s3, [pc, #84]	; 8000eec <calculate_finger_angle+0xe4>
 8000e9a:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8000ef0 <calculate_finger_angle+0xe8>
 8000e9e:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000ef4 <calculate_finger_angle+0xec>
 8000ea2:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ea6:	f003 fe5d 	bl	8004b64 <map>
 8000eaa:	eef0 7a40 	vmov.f32	s15, s0
 8000eae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000ee8 <calculate_finger_angle+0xe0>
 8000eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb6:	edc7 7a03 	vstr	s15, [r7, #12]
    return angle;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	ee07 3a90 	vmov	s15, r3
}
 8000ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	66666666 	.word	0x66666666
 8000ed4:	400a6666 	.word	0x400a6666
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	40affe00 	.word	0x40affe00
 8000ee0:	20000428 	.word	0x20000428
 8000ee4:	469c4000 	.word	0x469c4000
 8000ee8:	42b40000 	.word	0x42b40000
 8000eec:	00000000 	.word	0x00000000
 8000ef0:	46ea6000 	.word	0x46ea6000
 8000ef4:	461c4000 	.word	0x461c4000

08000ef8 <calculate_orientation>:

/*
 * Estimate orientation based on previous quaternion values. 
 * Runs Madgwick, Madgwick output quaternion to relative Euler angles, and remaps angles to gimbal potentiometer percentages.
 */
void calculate_orientation(float delta_time) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	ed87 0a01 	vstr	s0, [r7, #4]
	float sample_freq;
	#ifdef sampleFreq
	sample_freq = sampleFreq;
	#else
	sample_freq = convert_period_to_freq(delta_time);
 8000f02:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f06:	f003 fe73 	bl	8004bf0 <convert_period_to_freq>
 8000f0a:	ed87 0a03 	vstr	s0, [r7, #12]
	#endif /* sampleFreq */

	MadgwickAHRSupdate(gyro.gyro.x, gyro.gyro.y, gyro.gyro.z, accel.acceleration.x, accel.acceleration.y, accel.acceleration.z, mag.magnetic.x, mag.magnetic.y, mag.magnetic.z, sample_freq); // gyro, accel, mag are sensors_type_t
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <calculate_orientation+0x7c>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <calculate_orientation+0x7c>)
 8000f16:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <calculate_orientation+0x7c>)
 8000f1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <calculate_orientation+0x80>)
 8000f22:	ed93 6a00 	vldr	s12, [r3]
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <calculate_orientation+0x80>)
 8000f28:	edd3 5a01 	vldr	s11, [r3, #4]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <calculate_orientation+0x80>)
 8000f2e:	ed93 5a02 	vldr	s10, [r3, #8]
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <calculate_orientation+0x84>)
 8000f34:	ed93 3a00 	vldr	s6, [r3]
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <calculate_orientation+0x84>)
 8000f3a:	edd3 3a01 	vldr	s7, [r3, #4]
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <calculate_orientation+0x84>)
 8000f40:	ed93 4a02 	vldr	s8, [r3, #8]
 8000f44:	edd7 4a03 	vldr	s9, [r7, #12]
 8000f48:	eef0 2a45 	vmov.f32	s5, s10
 8000f4c:	eeb0 2a65 	vmov.f32	s4, s11
 8000f50:	eef0 1a46 	vmov.f32	s3, s12
 8000f54:	eeb0 1a66 	vmov.f32	s2, s13
 8000f58:	eef0 0a47 	vmov.f32	s1, s14
 8000f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f60:	f000 f970 	bl	8001244 <MadgwickAHRSupdate>
	convert_quaternion_to_euler();
 8000f64:	f000 f8a2 	bl	80010ac <convert_quaternion_to_euler>
	remap_angles_to_gimbals();
 8000f68:	f000 f80a 	bl	8000f80 <remap_angles_to_gimbals>
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000404 	.word	0x20000404
 8000f78:	20000410 	.word	0x20000410
 8000f7c:	2000041c 	.word	0x2000041c

08000f80 <remap_angles_to_gimbals>:

/*
 * Remapping only consists of pitch and roll
 */
void remap_angles_to_gimbals() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	remapped_angle_x = (angle_x + atan2_offset) / (2 * M_PI);
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <remap_angles_to_gimbals+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fa81 	bl	8000490 <__aeabi_f2d>
 8000f8e:	a32a      	add	r3, pc, #168	; (adr r3, 8001038 <remap_angles_to_gimbals+0xb8>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff f91e 	bl	80001d4 <__adddf3>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	a327      	add	r3, pc, #156	; (adr r3, 8001040 <remap_angles_to_gimbals+0xc0>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fbf5 	bl	8000794 <__aeabi_ddiv>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fd95 	bl	8000ae0 <__aeabi_d2f>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <remap_angles_to_gimbals+0xd4>)
 8000fba:	6013      	str	r3, [r2, #0]
	remapped_angle_y = (angle_y + asin_offset) / (M_PI);
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <remap_angles_to_gimbals+0xd8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa65 	bl	8000490 <__aeabi_f2d>
 8000fc6:	a320      	add	r3, pc, #128	; (adr r3, 8001048 <remap_angles_to_gimbals+0xc8>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff f902 	bl	80001d4 <__adddf3>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	a317      	add	r3, pc, #92	; (adr r3, 8001038 <remap_angles_to_gimbals+0xb8>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fbd9 	bl	8000794 <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd79 	bl	8000ae0 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a1a      	ldr	r2, [pc, #104]	; (800105c <remap_angles_to_gimbals+0xdc>)
 8000ff2:	6013      	str	r3, [r2, #0]
	gimbal_roll = lerp(0, 1, remapped_angle_x);
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <remap_angles_to_gimbals+0xd4>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eeb0 1a67 	vmov.f32	s2, s15
 8000ffe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001002:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001060 <remap_angles_to_gimbals+0xe0>
 8001006:	f003 fd8f 	bl	8004b28 <lerp>
 800100a:	eef0 7a40 	vmov.f32	s15, s0
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <remap_angles_to_gimbals+0xe4>)
 8001010:	edc3 7a00 	vstr	s15, [r3]
	gimbal_pitch = lerp(0, 1, remapped_angle_y);
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <remap_angles_to_gimbals+0xdc>)
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	eeb0 1a67 	vmov.f32	s2, s15
 800101e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001022:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001060 <remap_angles_to_gimbals+0xe0>
 8001026:	f003 fd7f 	bl	8004b28 <lerp>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <remap_angles_to_gimbals+0xe8>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	54442d18 	.word	0x54442d18
 800103c:	400921fb 	.word	0x400921fb
 8001040:	54442d18 	.word	0x54442d18
 8001044:	401921fb 	.word	0x401921fb
 8001048:	54442d18 	.word	0x54442d18
 800104c:	3ff921fb 	.word	0x3ff921fb
 8001050:	200003ec 	.word	0x200003ec
 8001054:	200000d0 	.word	0x200000d0
 8001058:	200003f0 	.word	0x200003f0
 800105c:	200000d4 	.word	0x200000d4
 8001060:	00000000 	.word	0x00000000
 8001064:	200003f4 	.word	0x200003f4
 8001068:	200003f8 	.word	0x200003f8

0800106c <reset_aux_frame>:

/*
 * Reset aux frame (identity)
 */
void reset_aux_frame() {
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	q0 = 1.0f;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <reset_aux_frame+0x30>)
 8001072:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001076:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <reset_aux_frame+0x34>)
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <reset_aux_frame+0x38>)
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <reset_aux_frame+0x3c>)
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000024 	.word	0x20000024
 80010a0:	200003e0 	.word	0x200003e0
 80010a4:	200003e4 	.word	0x200003e4
 80010a8:	200003e8 	.word	0x200003e8

080010ac <convert_quaternion_to_euler>:

/*
 * Convert quaternion to euler angles
 */
void convert_quaternion_to_euler() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
	// angle_x is roll; angle_y is pitch; angle_z is yaw
	double q2sqr = q2 * q2;
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <convert_quaternion_to_euler+0x178>)
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <convert_quaternion_to_euler+0x178>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff f9e3 	bl	8000490 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// double t0 = -2.0 * (q2sqr + q3 * q3) + 1.0;
	// double t1 = +2.0 * (q1 * q2 + q0 * q3);
	double t2 = -2.0 * (q1 * q3 - q0 * q2);
 80010d2:	4b55      	ldr	r3, [pc, #340]	; (8001228 <convert_quaternion_to_euler+0x17c>)
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	4b54      	ldr	r3, [pc, #336]	; (800122c <convert_quaternion_to_euler+0x180>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <convert_quaternion_to_euler+0x184>)
 80010e4:	edd3 6a00 	vldr	s13, [r3]
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <convert_quaternion_to_euler+0x178>)
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff f9c9 	bl	8000490 <__aeabi_f2d>
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001106:	f7ff fa1b 	bl	8000540 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double t3 = +2.0 * (q2 * q3 + q0 * q1);
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <convert_quaternion_to_euler+0x178>)
 8001114:	ed93 7a00 	vldr	s14, [r3]
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <convert_quaternion_to_euler+0x180>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <convert_quaternion_to_euler+0x184>)
 8001124:	edd3 6a00 	vldr	s13, [r3]
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <convert_quaternion_to_euler+0x17c>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001136:	ee17 0a90 	vmov	r0, s15
 800113a:	f7ff f9a9 	bl	8000490 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	f7ff f847 	bl	80001d4 <__adddf3>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double t4 = -2.0 * (q1 * q1 + q2sqr) + 1.0;
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <convert_quaternion_to_euler+0x17c>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <convert_quaternion_to_euler+0x17c>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	ee17 0a90 	vmov	r0, s15
 8001162:	f7ff f995 	bl	8000490 <__aeabi_f2d>
 8001166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800116a:	f7ff f833 	bl	80001d4 <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800117e:	f7ff f9df 	bl	8000540 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <convert_quaternion_to_euler+0x188>)
 8001190:	f7ff f820 	bl	80001d4 <__adddf3>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9c7 2300 	strd	r2, r3, [r7]

	t2 = t2 > 1.0 ? 1.0 : t2;
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <convert_quaternion_to_euler+0x188>)
 80011a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a6:	f7ff fc5b 	bl	8000a60 <__aeabi_dcmpgt>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <convert_quaternion_to_euler+0x10c>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <convert_quaternion_to_euler+0x188>)
 80011b6:	e001      	b.n	80011bc <convert_quaternion_to_euler+0x110>
 80011b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t2 = t2 < -1.0 ? -1.0 : t2;
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <convert_quaternion_to_euler+0x18c>)
 80011c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ca:	f7ff fc2b 	bl	8000a24 <__aeabi_dcmplt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <convert_quaternion_to_euler+0x130>
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <convert_quaternion_to_euler+0x18c>)
 80011da:	e001      	b.n	80011e0 <convert_quaternion_to_euler+0x134>
 80011dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011e0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	angle_y = asin(t2);
 80011e4:	ed97 0b04 	vldr	d0, [r7, #16]
 80011e8:	f007 feb4 	bl	8008f54 <asin>
 80011ec:	ec53 2b10 	vmov	r2, r3, d0
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc74 	bl	8000ae0 <__aeabi_d2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <convert_quaternion_to_euler+0x190>)
 80011fc:	6013      	str	r3, [r2, #0]
	angle_x = atan2(t3, t4);
 80011fe:	ed97 1b00 	vldr	d1, [r7]
 8001202:	ed97 0b02 	vldr	d0, [r7, #8]
 8001206:	f007 fed9 	bl	8008fbc <atan2>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fc65 	bl	8000ae0 <__aeabi_d2f>
 8001216:	4603      	mov	r3, r0
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <convert_quaternion_to_euler+0x194>)
 800121a:	6013      	str	r3, [r2, #0]
	// angle_z = atan2(t1, t0);
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200003e4 	.word	0x200003e4
 8001228:	200003e0 	.word	0x200003e0
 800122c:	200003e8 	.word	0x200003e8
 8001230:	20000024 	.word	0x20000024
 8001234:	3ff00000 	.word	0x3ff00000
 8001238:	bff00000 	.word	0xbff00000
 800123c:	200003f0 	.word	0x200003f0
 8001240:	200003ec 	.word	0x200003ec

08001244 <MadgwickAHRSupdate>:


//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float sample_freq) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ae      	sub	sp, #184	; 0xb8
 8001248:	af00      	add	r7, sp, #0
 800124a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800124e:	edc7 0a08 	vstr	s1, [r7, #32]
 8001252:	ed87 1a07 	vstr	s2, [r7, #28]
 8001256:	edc7 1a06 	vstr	s3, [r7, #24]
 800125a:	ed87 2a05 	vstr	s4, [r7, #20]
 800125e:	edc7 2a04 	vstr	s5, [r7, #16]
 8001262:	ed87 3a03 	vstr	s6, [r7, #12]
 8001266:	edc7 3a02 	vstr	s7, [r7, #8]
 800126a:	ed87 4a01 	vstr	s8, [r7, #4]
 800126e:	edc7 4a00 	vstr	s9, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001272:	edd7 7a03 	vldr	s15, [r7, #12]
 8001276:	eef5 7a40 	vcmp.f32	s15, #0.0
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	d11f      	bne.n	80012c0 <MadgwickAHRSupdate+0x7c>
 8001280:	edd7 7a02 	vldr	s15, [r7, #8]
 8001284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d118      	bne.n	80012c0 <MadgwickAHRSupdate+0x7c>
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d111      	bne.n	80012c0 <MadgwickAHRSupdate+0x7c>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az, sample_freq);
 800129c:	ed97 3a00 	vldr	s6, [r7]
 80012a0:	edd7 2a04 	vldr	s5, [r7, #16]
 80012a4:	ed97 2a05 	vldr	s4, [r7, #20]
 80012a8:	edd7 1a06 	vldr	s3, [r7, #24]
 80012ac:	ed97 1a07 	vldr	s2, [r7, #28]
 80012b0:	edd7 0a08 	vldr	s1, [r7, #32]
 80012b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80012b8:	f000 feec 	bl	8002094 <MadgwickAHRSupdateIMU>
		return;
 80012bc:	f000 bedc 	b.w	8002078 <MadgwickAHRSupdate+0xe34>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80012c0:	4be4      	ldr	r3, [pc, #912]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eeb1 7a67 	vneg.f32	s14, s15
 80012ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d2:	4be1      	ldr	r3, [pc, #900]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80012d4:	edd3 6a00 	vldr	s13, [r3]
 80012d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80012dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012e4:	4bdd      	ldr	r3, [pc, #884]	; (800165c <MadgwickAHRSupdate+0x418>)
 80012e6:	edd3 6a00 	vldr	s13, [r3]
 80012ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fe:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001302:	4bd7      	ldr	r3, [pc, #860]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800130c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001310:	4bd1      	ldr	r3, [pc, #836]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001312:	edd3 6a00 	vldr	s13, [r3]
 8001316:	edd7 7a07 	vldr	s15, [r7, #28]
 800131a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001322:	4bce      	ldr	r3, [pc, #824]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001324:	edd3 6a00 	vldr	s13, [r3]
 8001328:	edd7 7a08 	vldr	s15, [r7, #32]
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001334:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001340:	4bc7      	ldr	r3, [pc, #796]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001342:	ed93 7a00 	vldr	s14, [r3]
 8001346:	edd7 7a08 	vldr	s15, [r7, #32]
 800134a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134e:	4bc1      	ldr	r3, [pc, #772]	; (8001654 <MadgwickAHRSupdate+0x410>)
 8001350:	edd3 6a00 	vldr	s13, [r3]
 8001354:	edd7 7a07 	vldr	s15, [r7, #28]
 8001358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001360:	4bbe      	ldr	r3, [pc, #760]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001362:	edd3 6a00 	vldr	s13, [r3]
 8001366:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800136a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800137e:	4bb8      	ldr	r3, [pc, #736]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001380:	ed93 7a00 	vldr	s14, [r3]
 8001384:	edd7 7a07 	vldr	s15, [r7, #28]
 8001388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138c:	4bb1      	ldr	r3, [pc, #708]	; (8001654 <MadgwickAHRSupdate+0x410>)
 800138e:	edd3 6a00 	vldr	s13, [r3]
 8001392:	edd7 7a08 	vldr	s15, [r7, #32]
 8001396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800139e:	4bae      	ldr	r3, [pc, #696]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80013a0:	edd3 6a00 	vldr	s13, [r3]
 80013a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80013bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d10e      	bne.n	80013e8 <MadgwickAHRSupdate+0x1a4>
 80013ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	d107      	bne.n	80013e8 <MadgwickAHRSupdate+0x1a4>
 80013d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	f000 85ac 	beq.w	8001f40 <MadgwickAHRSupdate+0xcfc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80013e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001400:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001408:	eeb0 0a67 	vmov.f32	s0, s15
 800140c:	f001 f976 	bl	80026fc <invSqrt>
 8001410:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001424:	ed97 7a05 	vldr	s14, [r7, #20]
 8001428:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001434:	ed97 7a04 	vldr	s14, [r7, #16]
 8001438:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800144c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001450:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001458:	edd7 7a01 	vldr	s15, [r7, #4]
 800145c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	f001 f948 	bl	80026fc <invSqrt>
 800146c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001470:	ed97 7a03 	vldr	s14, [r7, #12]
 8001474:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001480:	ed97 7a02 	vldr	s14, [r7, #8]
 8001484:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001490:	ed97 7a01 	vldr	s14, [r7, #4]
 8001494:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80014a0:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80014b6:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80014cc:	4b64      	ldr	r3, [pc, #400]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80014f8:	4b59      	ldr	r3, [pc, #356]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001502:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <MadgwickAHRSupdate+0x410>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001510:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800151e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8001522:	4b4e      	ldr	r3, [pc, #312]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800152c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <MadgwickAHRSupdate+0x414>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <MadgwickAHRSupdate+0x414>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001552:	4b42      	ldr	r3, [pc, #264]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001560:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001570:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001574:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001576:	ed93 7a00 	vldr	s14, [r3]
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <MadgwickAHRSupdate+0x410>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <MadgwickAHRSupdate+0x418>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MadgwickAHRSupdate+0x418>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MadgwickAHRSupdate+0x418>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001628:	ed97 7a03 	vldr	s14, [r7, #12]
 800162c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001636:	edd3 6a00 	vldr	s13, [r3]
 800163a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800163e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001648:	edd3 6a00 	vldr	s13, [r3]
 800164c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001650:	e008      	b.n	8001664 <MadgwickAHRSupdate+0x420>
 8001652:	bf00      	nop
 8001654:	200003e0 	.word	0x200003e0
 8001658:	200003e4 	.word	0x200003e4
 800165c:	200003e8 	.word	0x200003e8
 8001660:	20000024 	.word	0x20000024
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001670:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800167c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001680:	edd7 7a02 	vldr	s15, [r7, #8]
 8001684:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001688:	4bf5      	ldr	r3, [pc, #980]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001696:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800169a:	edd7 7a01 	vldr	s15, [r7, #4]
 800169e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016a2:	4bf0      	ldr	r3, [pc, #960]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80016b4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c0:	edd7 6a03 	vldr	s13, [r7, #12]
 80016c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80016d4:	4be3      	ldr	r3, [pc, #908]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80016de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80016e6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f2:	4bdd      	ldr	r3, [pc, #884]	; (8001a68 <MadgwickAHRSupdate+0x824>)
 80016f4:	edd3 6a00 	vldr	s13, [r3]
 80016f8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001704:	4bd6      	ldr	r3, [pc, #856]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 8001706:	edd3 6a00 	vldr	s13, [r3]
 800170a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800170e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001716:	edd7 6a02 	vldr	s13, [r7, #8]
 800171a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001726:	edd7 6a02 	vldr	s13, [r7, #8]
 800172a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001736:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800173a:	edd7 7a01 	vldr	s15, [r7, #4]
 800173e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001742:	4bc8      	ldr	r3, [pc, #800]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001750:	edd7 6a02 	vldr	s13, [r7, #8]
 8001754:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001764:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001768:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800176c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001770:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	ee17 0a90 	vmov	r0, s15
 800177c:	f7fe fe88 	bl	8000490 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ec43 2b10 	vmov	d0, r2, r3
 8001788:	f007 fc1a 	bl	8008fc0 <sqrt>
 800178c:	ec53 2b10 	vmov	r2, r3, d0
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f9a4 	bl	8000ae0 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800179c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80017a0:	eeb1 7a67 	vneg.f32	s14, s15
 80017a4:	4bae      	ldr	r3, [pc, #696]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	4bae      	ldr	r3, [pc, #696]	; (8001a68 <MadgwickAHRSupdate+0x824>)
 80017b0:	edd3 6a00 	vldr	s13, [r3]
 80017b4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d0:	4ba4      	ldr	r3, [pc, #656]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 80017d2:	edd3 6a00 	vldr	s13, [r3]
 80017d6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80017e6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017fe:	4b99      	ldr	r3, [pc, #612]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001810:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800181c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001820:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001830:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001834:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001838:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 800183c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001840:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001844:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001848:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800184c:	eeb1 7a67 	vneg.f32	s14, s15
 8001850:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001854:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001858:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800185c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001860:	edd7 7a06 	vldr	s15, [r7, #24]
 8001864:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800186c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001870:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001874:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001878:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800187c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001880:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001884:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001890:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 8001892:	edd3 6a00 	vldr	s13, [r3]
 8001896:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800189a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800189e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018a6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018b2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ba:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018be:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018c2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ca:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018ce:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e6:	eef1 6a67 	vneg.f32	s13, s15
 80018ea:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018f4:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <MadgwickAHRSupdate+0x824>)
 80018f6:	ed93 6a00 	vldr	s12, [r3]
 80018fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001902:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001906:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800190a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800190e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001912:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001916:	ee26 6a27 	vmul.f32	s12, s12, s15
 800191a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800191e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001922:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001926:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800192a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800192e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001932:	edd7 7a02 	vldr	s15, [r7, #8]
 8001936:	ee76 7a67 	vsub.f32	s15, s12, s15
 800193a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 8001944:	edd3 6a00 	vldr	s13, [r3]
 8001948:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800194c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001950:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001954:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001958:	ee36 6a27 	vadd.f32	s12, s12, s15
 800195c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001960:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001964:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001968:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800196c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001970:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001974:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001978:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800197c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001980:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001984:	edd7 7a01 	vldr	s15, [r7, #4]
 8001988:	ee76 7a67 	vsub.f32	s15, s12, s15
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001998:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800199c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019a0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019c0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80019d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <MadgwickAHRSupdate+0x824>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019ea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019f6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a02:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 8001a18:	edd3 6a00 	vldr	s13, [r3]
 8001a1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a28:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a30:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a34:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a38:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a3c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a40:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a44:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a48:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a50:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5c:	e006      	b.n	8001a6c <MadgwickAHRSupdate+0x828>
 8001a5e:	bf00      	nop
 8001a60:	200003e4 	.word	0x200003e4
 8001a64:	200003e8 	.word	0x200003e8
 8001a68:	200003e0 	.word	0x200003e0
 8001a6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a78:	4bf6      	ldr	r3, [pc, #984]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001a7a:	edd3 6a00 	vldr	s13, [r3]
 8001a7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a86:	4bf4      	ldr	r3, [pc, #976]	; (8001e58 <MadgwickAHRSupdate+0xc14>)
 8001a88:	ed93 6a00 	vldr	s12, [r3]
 8001a8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a98:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a9c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001aa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aa4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aa8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aac:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ab0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ab4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ab8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001abc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad4:	4be1      	ldr	r3, [pc, #900]	; (8001e5c <MadgwickAHRSupdate+0xc18>)
 8001ad6:	edd3 6a00 	vldr	s13, [r3]
 8001ada:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ade:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ae2:	4bdf      	ldr	r3, [pc, #892]	; (8001e60 <MadgwickAHRSupdate+0xc1c>)
 8001ae4:	ed93 6a00 	vldr	s12, [r3]
 8001ae8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001aec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001af0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001af4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001af8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001afc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b08:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b0c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b10:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b14:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b18:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b24:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b3c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b40:	eeb1 7a67 	vneg.f32	s14, s15
 8001b44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b4c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b54:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b60:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b68:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b78:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b84:	4bb3      	ldr	r3, [pc, #716]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b8e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b92:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001b9e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ba2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ba6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001baa:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bb2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bbe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bc2:	eef1 6a67 	vneg.f32	s13, s15
 8001bc6:	4ba3      	ldr	r3, [pc, #652]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd0:	4ba1      	ldr	r3, [pc, #644]	; (8001e58 <MadgwickAHRSupdate+0xc14>)
 8001bd2:	ed93 6a00 	vldr	s12, [r3]
 8001bd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001be2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001be6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bea:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bf2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bf6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bfe:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c02:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c06:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c12:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c26:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <MadgwickAHRSupdate+0xc1c>)
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c34:	4b89      	ldr	r3, [pc, #548]	; (8001e5c <MadgwickAHRSupdate+0xc18>)
 8001c36:	ed93 6a00 	vldr	s12, [r3]
 8001c3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c46:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c4a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c5a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c62:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c66:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c6a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c6e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c82:	4b75      	ldr	r3, [pc, #468]	; (8001e58 <MadgwickAHRSupdate+0xc14>)
 8001c84:	edd3 6a00 	vldr	s13, [r3]
 8001c88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c90:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001c92:	ed93 6a00 	vldr	s12, [r3]
 8001c96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c9e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ca2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001ca6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001caa:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cb2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cb6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cba:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cbe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cc2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cc6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cce:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cd2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cda:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001cea:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001cf2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d02:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d0e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d12:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d22:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d2e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d32:	eef1 6a67 	vneg.f32	s13, s15
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <MadgwickAHRSupdate+0xc18>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <MadgwickAHRSupdate+0xc1c>)
 8001d42:	ed93 6a00 	vldr	s12, [r3]
 8001d46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d52:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d56:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d5a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d5e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d62:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d6a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d6e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001d72:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d76:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d9a:	eef1 6a67 	vneg.f32	s13, s15
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <MadgwickAHRSupdate+0xc14>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001daa:	ed93 6a00 	vldr	s12, [r3]
 8001dae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001db2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001db6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dba:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001dbe:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dc2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dc6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dca:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dce:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001dd2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001dd6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001dda:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dde:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001de2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MadgwickAHRSupdate+0xc1c>)
 8001df8:	edd3 6a00 	vldr	s13, [r3]
 8001dfc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e04:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e08:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e18:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e1c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e20:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e24:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e28:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e30:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e34:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001e4c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e50:	e008      	b.n	8001e64 <MadgwickAHRSupdate+0xc20>
 8001e52:	bf00      	nop
 8001e54:	200003e4 	.word	0x200003e4
 8001e58:	20000024 	.word	0x20000024
 8001e5c:	200003e8 	.word	0x200003e8
 8001e60:	200003e0 	.word	0x200003e0
 8001e64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e90:	f000 fc34 	bl	80026fc <invSqrt>
 8001e94:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001e98:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e9c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001ea8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001eac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001eb8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001ebc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001ec8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ecc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001ed8:	4b69      	ldr	r3, [pc, #420]	; (8002080 <MadgwickAHRSupdate+0xe3c>)
 8001eda:	ed93 7a00 	vldr	s14, [r3]
 8001ede:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eee:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001ef2:	4b63      	ldr	r3, [pc, #396]	; (8002080 <MadgwickAHRSupdate+0xe3c>)
 8001ef4:	ed93 7a00 	vldr	s14, [r3]
 8001ef8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f00:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f08:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f0c:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <MadgwickAHRSupdate+0xe3c>)
 8001f0e:	ed93 7a00 	vldr	s14, [r3]
 8001f12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f22:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <MadgwickAHRSupdate+0xe3c>)
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f34:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 8001f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f44:	edd7 7a00 	vldr	s15, [r7]
 8001f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f4c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f54:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 8001f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f68:	edd7 7a00 	vldr	s15, [r7]
 8001f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f70:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	4b43      	ldr	r3, [pc, #268]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8001f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f8c:	edd7 7a00 	vldr	s15, [r7]
 8001f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f94:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8001fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fb0:	edd7 7a00 	vldr	s15, [r7]
 8001fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	4b33      	ldr	r3, [pc, #204]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8001fcc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8001fd2:	ed93 7a00 	vldr	s14, [r3]
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 8001fe2:	edd3 6a00 	vldr	s13, [r3]
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8001ff6:	edd3 6a00 	vldr	s13, [r3]
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002004:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 800200a:	edd3 6a00 	vldr	s13, [r3]
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	f000 fb6c 	bl	80026fc <invSqrt>
 8002024:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8002038:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 800204c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8002060:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800206e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8002074:	edc3 7a00 	vstr	s15, [r3]
}
 8002078:	37b8      	adds	r7, #184	; 0xb8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000
 8002084:	20000024 	.word	0x20000024
 8002088:	200003e0 	.word	0x200003e0
 800208c:	200003e4 	.word	0x200003e4
 8002090:	200003e8 	.word	0x200003e8

08002094 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sample_freq) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b09e      	sub	sp, #120	; 0x78
 8002098:	af00      	add	r7, sp, #0
 800209a:	ed87 0a07 	vstr	s0, [r7, #28]
 800209e:	edc7 0a06 	vstr	s1, [r7, #24]
 80020a2:	ed87 1a05 	vstr	s2, [r7, #20]
 80020a6:	edc7 1a04 	vstr	s3, [r7, #16]
 80020aa:	ed87 2a03 	vstr	s4, [r7, #12]
 80020ae:	edc7 2a02 	vstr	s5, [r7, #8]
 80020b2:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80020b6:	4bec      	ldr	r3, [pc, #944]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb1 7a67 	vneg.f32	s14, s15
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	4be8      	ldr	r3, [pc, #928]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80020ca:	edd3 6a00 	vldr	s13, [r3]
 80020ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020da:	4be5      	ldr	r3, [pc, #916]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80020f8:	4bde      	ldr	r3, [pc, #888]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80020fa:	ed93 7a00 	vldr	s14, [r3]
 80020fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002106:	4bd9      	ldr	r3, [pc, #868]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002108:	edd3 6a00 	vldr	s13, [r3]
 800210c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002118:	4bd5      	ldr	r3, [pc, #852]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800212e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002132:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002136:	4bcf      	ldr	r3, [pc, #828]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002144:	4bc8      	ldr	r3, [pc, #800]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	edd7 7a05 	vldr	s15, [r7, #20]
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002156:	4bc6      	ldr	r3, [pc, #792]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002158:	edd3 6a00 	vldr	s13, [r3]
 800215c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800216c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002170:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002174:	4bbf      	ldr	r3, [pc, #764]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	edd7 7a05 	vldr	s15, [r7, #20]
 800217e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002182:	4bb9      	ldr	r3, [pc, #740]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	edd7 7a06 	vldr	s15, [r7, #24]
 800218c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002194:	4bb5      	ldr	r3, [pc, #724]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002196:	edd3 6a00 	vldr	s13, [r3]
 800219a:	edd7 7a07 	vldr	s15, [r7, #28]
 800219e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80021b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d10e      	bne.n	80021de <MadgwickAHRSupdateIMU+0x14a>
 80021c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	d107      	bne.n	80021de <MadgwickAHRSupdateIMU+0x14a>
 80021ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	f000 81e5 	beq.w	80025a8 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80021de:	edd7 7a04 	vldr	s15, [r7, #16]
 80021e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	f000 fa7b 	bl	80026fc <invSqrt>
 8002206:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 800220a:	ed97 7a04 	vldr	s14, [r7, #16]
 800220e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 800221a:	ed97 7a03 	vldr	s14, [r7, #12]
 800221e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002226:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;   
 800222a:	ed97 7a02 	vldr	s14, [r7, #8]
 800222e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800223a:	4b8e      	ldr	r3, [pc, #568]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002244:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8002248:	4b87      	ldr	r3, [pc, #540]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002252:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 8002256:	4b85      	ldr	r3, [pc, #532]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002260:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8002264:	4b82      	ldr	r3, [pc, #520]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800226e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8002272:	4b80      	ldr	r3, [pc, #512]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800227c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002280:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8002296:	4b75      	ldr	r3, [pc, #468]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 80022a8:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 80022ba:	4b6c      	ldr	r3, [pc, #432]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 80022cc:	4b69      	ldr	r3, [pc, #420]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	4b68      	ldr	r3, [pc, #416]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022dc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 80022e0:	4b61      	ldr	r3, [pc, #388]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	4b60      	ldr	r3, [pc, #384]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 80022f4:	4b5d      	ldr	r3, [pc, #372]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022f6:	ed93 7a00 	vldr	s14, [r3]
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002304:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	4b58      	ldr	r3, [pc, #352]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800231c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002320:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002328:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800232c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002338:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800233c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002348:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800235c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002360:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002368:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800236c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002378:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800237c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002380:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002392:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002396:	edd7 7a03 	vldr	s15, [r7, #12]
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80023a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023aa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80023ae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ba:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80023be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80023ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80023de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80023e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80023f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002408:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002414:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002418:	edd7 7a03 	vldr	s15, [r7, #12]
 800241c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002424:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002430:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002440:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002450:	edd7 7a02 	vldr	s15, [r7, #8]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002460:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002464:	e008      	b.n	8002478 <MadgwickAHRSupdateIMU+0x3e4>
 8002466:	bf00      	nop
 8002468:	200003e0 	.word	0x200003e0
 800246c:	200003e4 	.word	0x200003e4
 8002470:	200003e8 	.word	0x200003e8
 8002474:	20000024 	.word	0x20000024
 8002478:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800247c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002480:	4b99      	ldr	r3, [pc, #612]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800248e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002496:	ee37 7a67 	vsub.f32	s14, s14, s15
 800249a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800249e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024a6:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80024b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80024c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f000 f900 	bl	80026fc <invSqrt>
 80024fc:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 8002500:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002504:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 8002510:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002514:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 8002520:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002524:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 8002530:	ed97 7a08 	vldr	s14, [r7, #32]
 8002534:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800254a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002556:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 800255a:	4b64      	ldr	r3, [pc, #400]	; (80026ec <MadgwickAHRSupdateIMU+0x658>)
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002570:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 8002574:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002590:	ed93 7a00 	vldr	s14, [r3]
 8002594:	edd7 7a08 	vldr	s15, [r7, #32]
 8002598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80025a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 80025a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80025c8:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 80025cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80025ec:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 80025f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002604:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002610:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8002614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002618:	edd7 7a01 	vldr	s15, [r7, #4]
 800261c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002620:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002634:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 800264a:	edd3 6a00 	vldr	s13, [r3]
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265c:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 800265e:	edd3 6a00 	vldr	s13, [r3]
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002672:	edd3 6a00 	vldr	s13, [r3]
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	eeb0 0a67 	vmov.f32	s0, s15
 8002688:	f000 f838 	bl	80026fc <invSqrt>
 800268c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 8002690:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 80026ba:	ed93 7a00 	vldr	s14, [r3]
 80026be:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 80026c8:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80026ce:	ed93 7a00 	vldr	s14, [r3]
 80026d2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80026dc:	edc3 7a00 	vstr	s15, [r3]
}
 80026e0:	bf00      	nop
 80026e2:	3778      	adds	r7, #120	; 0x78
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200003e8 	.word	0x200003e8
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000024 	.word	0x20000024
 80026f4:	200003e0 	.word	0x200003e0
 80026f8:	200003e4 	.word	0x200003e4

080026fc <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002706:	edd7 7a01 	vldr	s15, [r7, #4]
 800270a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800270e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002712:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	105a      	asrs	r2, r3, #1
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <invSqrt+0x74>)
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002734:	ed97 7a04 	vldr	s14, [r7, #16]
 8002738:	edd7 7a05 	vldr	s15, [r7, #20]
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	edd7 7a04 	vldr	s15, [r7, #16]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800274c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002750:	edd7 7a04 	vldr	s15, [r7, #16]
 8002754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002758:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	ee07 3a90 	vmov	s15, r3
}
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	5f3759df 	.word	0x5f3759df

08002774 <MCP4728_Write_GeneralCall>:
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, data, sizeof(data), HAL_MAX_DELAY);
	return ret;
}

void MCP4728_Write_GeneralCall(I2C_HandleTypeDef *I2CHandler, uint8_t command) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	uint16_t zeoo = 0x00;
 8002780:	2300      	movs	r3, #0
 8002782:	81fb      	strh	r3, [r7, #14]
	uint16_t sizey = 0x1;
 8002784:	2301      	movs	r3, #1
 8002786:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(I2CHandler, zeoo, &command, sizey, HAL_MAX_DELAY);
 8002788:	89bb      	ldrh	r3, [r7, #12]
 800278a:	1cfa      	adds	r2, r7, #3
 800278c:	89f9      	ldrh	r1, [r7, #14]
 800278e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002792:	9000      	str	r0, [sp, #0]
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f003 fdbb 	bl	8006310 <HAL_I2C_Master_Transmit>

}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <MCP4728_Write_AllChannels_Diff>:
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Write_AllChannels_Diff(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08a      	sub	sp, #40	; 0x28
 80027a6:	af02      	add	r7, sp, #8
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	4638      	mov	r0, r7
 80027ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf[8];
	for(uint8_t i = 0; i < 4; i++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e024      	b.n	8002800 <MCP4728_Write_AllChannels_Diff+0x5e>
		uint8_t lowByte = output.channel_Val[i] & 0xff;
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	3320      	adds	r3, #32
 80027bc:	443b      	add	r3, r7
 80027be:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80027c2:	77bb      	strb	r3, [r7, #30]
		uint8_t highByte = (output.channel_Val[i] >> 8);
 80027c4:	7ffb      	ldrb	r3, [r7, #31]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	3320      	adds	r3, #32
 80027ca:	443b      	add	r3, r7
 80027cc:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	777b      	strb	r3, [r7, #29]
		buf[i*2] =  0x0f&highByte;
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	7f7a      	ldrb	r2, [r7, #29]
 80027dc:	f002 020f 	and.w	r2, r2, #15
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	3320      	adds	r3, #32
 80027e4:	443b      	add	r3, r7
 80027e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)+1] = lowByte;
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	3301      	adds	r3, #1
 80027f0:	3320      	adds	r3, #32
 80027f2:	443b      	add	r3, r7
 80027f4:	7fba      	ldrb	r2, [r7, #30]
 80027f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
 80027fc:	3301      	adds	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	7ffb      	ldrb	r3, [r7, #31]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d9d7      	bls.n	80027b6 <MCP4728_Write_AllChannels_Diff+0x14>
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8002806:	f107 0214 	add.w	r2, r7, #20
 800280a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2308      	movs	r3, #8
 8002812:	21c8      	movs	r1, #200	; 0xc8
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f003 fd7b 	bl	8006310 <HAL_I2C_Master_Transmit>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 800281a:	2108      	movs	r1, #8
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff ffa9 	bl	8002774 <MCP4728_Write_GeneralCall>
}
 8002822:	bf00      	nop
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <MCP4728_Init>:
	buf[2] = lowByte;
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Init(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 800282a:	b580      	push	{r7, lr}
 800282c:	b08a      	sub	sp, #40	; 0x28
 800282e:	af02      	add	r7, sp, #8
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	4638      	mov	r0, r7
 8002834:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_RESET);
 8002838:	2106      	movs	r1, #6
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff ff9a 	bl	8002774 <MCP4728_Write_GeneralCall>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_WAKEUP);
 8002840:	2109      	movs	r1, #9
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7ff ff96 	bl	8002774 <MCP4728_Write_GeneralCall>
	//MCP4728_Write_GeneralCall(I2CHandler, 0x0C);

	uint8_t buf[9];
	buf[0] = MCP4728_CMD_DACWRITE_SEQ;
 8002848:	2350      	movs	r3, #80	; 0x50
 800284a:	753b      	strb	r3, [r7, #20]
	for(uint8_t i = 1; i <= 4; i++){
 800284c:	2301      	movs	r3, #1
 800284e:	77fb      	strb	r3, [r7, #31]
 8002850:	e015      	b.n	800287e <MCP4728_Init+0x54>
		buf[(i*2)+1] = 0x00;
 8002852:	7ffb      	ldrb	r3, [r7, #31]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	3301      	adds	r3, #1
 8002858:	3320      	adds	r3, #32
 800285a:	443b      	add	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)] = (0 << 7) | ((i-1)<<4) | 0x0;
 8002862:	7ffb      	ldrb	r3, [r7, #31]
 8002864:	3b01      	subs	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	7ffb      	ldrb	r3, [r7, #31]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	3320      	adds	r3, #32
 8002872:	443b      	add	r3, r7
 8002874:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 1; i <= 4; i++){
 8002878:	7ffb      	ldrb	r3, [r7, #31]
 800287a:	3301      	adds	r3, #1
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d9e6      	bls.n	8002852 <MCP4728_Init+0x28>
	}

	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8002884:	f107 0214 	add.w	r2, r7, #20
 8002888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2309      	movs	r3, #9
 8002890:	21c8      	movs	r1, #200	; 0xc8
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f003 fd3c 	bl	8006310 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(I2CHandler, 0xC8, buf, sizeof(buf), HAL_MAX_DELAY);
	//C0, C2, C4, C6, C8, CA, CC, CE
	//60, 61, 62, 63, 64, 65, 66, 67
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 8002898:	2108      	movs	r1, #8
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7ff ff6a 	bl	8002774 <MCP4728_Write_GeneralCall>
}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <SPI1_Setup>:
 * PA5: SPI1 sck
 * PA7: SPI1 mosi
 * PA4: NSS, CS
 */
void SPI1_Setup()
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  GPIOA->MODER &= ~0xcc00;
 80028ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028b6:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 80028ba:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= 0x8800; // AFR for pa5 and pa7
 80028bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028c6:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 80028ca:	6013      	str	r3, [r2, #0]

  GPIOB->MODER &= ~0xC00000;
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <SPI1_Setup+0xec>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a30      	ldr	r2, [pc, #192]	; (8002994 <SPI1_Setup+0xec>)
 80028d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028d6:	6013      	str	r3, [r2, #0]
  GPIOA->MODER &= ~0x300;
 80028d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e6:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= 0x400000;
 80028e8:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <SPI1_Setup+0xec>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a29      	ldr	r2, [pc, #164]	; (8002994 <SPI1_Setup+0xec>)
 80028ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028f2:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= 0x100;
 80028f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80028fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002902:	6013      	str	r3, [r2, #0]

  GPIOA->MODER &= ~0xc0;
 8002904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800290e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002912:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= 0x40;
 8002914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800291e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002922:	6013      	str	r3, [r2, #0]
  GPIOB->ODR |= 0x800;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <SPI1_Setup+0xec>)
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	4a1a      	ldr	r2, [pc, #104]	; (8002994 <SPI1_Setup+0xec>)
 800292a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800292e:	6153      	str	r3, [r2, #20]
  GPIOA->ODR |= 0x18;
 8002930:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800293a:	f043 0318 	orr.w	r3, r3, #24
 800293e:	6153      	str	r3, [r2, #20]

  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002940:	4b15      	ldr	r3, [pc, #84]	; (8002998 <SPI1_Setup+0xf0>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <SPI1_Setup+0xf0>)
 8002946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800294a:	6193      	str	r3, [r2, #24]
  SPI1->CR2 &= ~SPI_CR2_DS;
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <SPI1_Setup+0xf4>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a12      	ldr	r2, [pc, #72]	; (800299c <SPI1_Setup+0xf4>)
 8002952:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002956:	6053      	str	r3, [r2, #4]
  SPI1->CR1 &= ~(SPI_CR1_BR);
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <SPI1_Setup+0xf4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0f      	ldr	r2, [pc, #60]	; (800299c <SPI1_Setup+0xf4>)
 800295e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002962:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_MSTR;
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <SPI1_Setup+0xf4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0c      	ldr	r2, [pc, #48]	; (800299c <SPI1_Setup+0xf4>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <SPI1_Setup+0xf4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a09      	ldr	r2, [pc, #36]	; (800299c <SPI1_Setup+0xf4>)
 8002976:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800297a:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_SPE;
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <SPI1_Setup+0xf4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <SPI1_Setup+0xf4>)
 8002982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002986:	6013      	str	r3, [r2, #0]
  return;
 8002988:	bf00      	nop
}
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	48000400 	.word	0x48000400
 8002998:	40021000 	.word	0x40021000
 800299c:	40013000 	.word	0x40013000

080029a0 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	461a      	mov	r2, r3
 80029ac:	460b      	mov	r3, r1
 80029ae:	72fb      	strb	r3, [r7, #11]
 80029b0:	4613      	mov	r3, r2
 80029b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685c      	ldr	r4, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68d8      	ldr	r0, [r3, #12]
 80029bc:	893b      	ldrh	r3, [r7, #8]
 80029be:	7af9      	ldrb	r1, [r7, #11]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	47a0      	blx	r4
 80029c4:	6178      	str	r0, [r7, #20]

  return ret;
 80029c6:	697b      	ldr	r3, [r7, #20]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}

080029d0 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b087      	sub	sp, #28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	461a      	mov	r2, r3
 80029dc:	460b      	mov	r3, r1
 80029de:	72fb      	strb	r3, [r7, #11]
 80029e0:	4613      	mov	r3, r2
 80029e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681c      	ldr	r4, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	68d8      	ldr	r0, [r3, #12]
 80029ec:	893b      	ldrh	r3, [r7, #8]
 80029ee:	7af9      	ldrb	r1, [r7, #11]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	47a0      	blx	r4
 80029f4:	6178      	str	r0, [r7, #20]

  return ret;
 80029f6:	697b      	ldr	r3, [r7, #20]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 8002a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a16:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002a2c <lsm9ds1_from_fs4g_to_mg+0x2c>
 8002a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	3df9db23 	.word	0x3df9db23

08002a30 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a46:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002a5c <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 8002a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	428c0000 	.word	0x428c0000

08002a60 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	4603      	mov	r3, r0
 8002a68:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 8002a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a76:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002a8c <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8002a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	3f147ae1 	.word	0x3f147ae1

08002a90 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002a9c:	f107 0208 	add.w	r2, r7, #8
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	2110      	movs	r1, #16
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff ff7b 	bl	80029a0 <lsm9ds1_read_reg>
 8002aaa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	f003 0303 	and.w	r3, r3, #3
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	7a3b      	ldrb	r3, [r7, #8]
 8002abc:	f362 03c4 	bfi	r3, r2, #3, #2
 8002ac0:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002ac2:	f107 0208 	add.w	r2, r7, #8
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	2110      	movs	r1, #16
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ff80 	bl	80029d0 <lsm9ds1_write_reg>
 8002ad0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002ae8:	f107 0210 	add.w	r2, r7, #16
 8002aec:	2301      	movs	r3, #1
 8002aee:	2110      	movs	r1, #16
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff55 	bl	80029a0 <lsm9ds1_read_reg>
 8002af6:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10f      	bne.n	8002b1e <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	7c3b      	ldrb	r3, [r7, #16]
 8002b08:	f362 1347 	bfi	r3, r2, #5, #3
 8002b0c:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002b0e:	f107 0210 	add.w	r2, r7, #16
 8002b12:	2301      	movs	r3, #1
 8002b14:	2110      	movs	r1, #16
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ff5a 	bl	80029d0 <lsm9ds1_write_reg>
 8002b1c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002b24:	f107 020c 	add.w	r2, r7, #12
 8002b28:	2301      	movs	r3, #1
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff37 	bl	80029a0 <lsm9ds1_read_reg>
 8002b32:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d110      	bne.n	8002b5c <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	7b3b      	ldrb	r3, [r7, #12]
 8002b46:	f362 1347 	bfi	r3, r2, #5, #3
 8002b4a:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002b4c:	f107 020c 	add.w	r2, r7, #12
 8002b50:	2301      	movs	r3, #1
 8002b52:	2120      	movs	r1, #32
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff3b 	bl	80029d0 <lsm9ds1_write_reg>
 8002b5a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d107      	bne.n	8002b72 <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002b62:	f107 0208 	add.w	r2, r7, #8
 8002b66:	2301      	movs	r3, #1
 8002b68:	2112      	movs	r1, #18
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ff18 	bl	80029a0 <lsm9ds1_read_reg>
 8002b70:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d111      	bne.n	8002b9c <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	09db      	lsrs	r3, r3, #7
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	7a3b      	ldrb	r3, [r7, #8]
 8002b86:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b8a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002b8c:	f107 0208 	add.w	r2, r7, #8
 8002b90:	2301      	movs	r3, #1
 8002b92:	2112      	movs	r1, #18
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ff1b 	bl	80029d0 <lsm9ds1_write_reg>
 8002b9a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8002b9c:	697b      	ldr	r3, [r7, #20]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002bb2:	f107 0208 	add.w	r2, r7, #8
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	2120      	movs	r1, #32
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff fef0 	bl	80029a0 <lsm9ds1_read_reg>
 8002bc0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10f      	bne.n	8002be8 <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	7a3b      	ldrb	r3, [r7, #8]
 8002bd2:	f362 03c4 	bfi	r3, r2, #3, #2
 8002bd6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002bd8:	f107 0208 	add.w	r2, r7, #8
 8002bdc:	2301      	movs	r3, #1
 8002bde:	2120      	movs	r1, #32
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fef5 	bl	80029d0 <lsm9ds1_write_reg>
 8002be6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8002be8:	68fb      	ldr	r3, [r7, #12]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b088      	sub	sp, #32
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002c00:	f107 0218 	add.w	r2, r7, #24
 8002c04:	2301      	movs	r3, #1
 8002c06:	2122      	movs	r1, #34	; 0x22
 8002c08:	68b8      	ldr	r0, [r7, #8]
 8002c0a:	f7ff fec9 	bl	80029a0 <lsm9ds1_read_reg>
 8002c0e:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	7e3b      	ldrb	r3, [r7, #24]
 8002c20:	f362 1386 	bfi	r3, r2, #6, #1
 8002c24:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002c26:	f107 0218 	add.w	r2, r7, #24
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	2122      	movs	r1, #34	; 0x22
 8002c2e:	68b8      	ldr	r0, [r7, #8]
 8002c30:	f7ff fece 	bl	80029d0 <lsm9ds1_write_reg>
 8002c34:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8002c3c:	f107 0214 	add.w	r2, r7, #20
 8002c40:	2301      	movs	r3, #1
 8002c42:	2124      	movs	r1, #36	; 0x24
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f7ff feab 	bl	80029a0 <lsm9ds1_read_reg>
 8002c4a:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d119      	bne.n	8002c86 <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	7d3b      	ldrb	r3, [r7, #20]
 8002c60:	f362 13c7 	bfi	r3, r2, #7, #1
 8002c64:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	7d3b      	ldrb	r3, [r7, #20]
 8002c70:	f362 1386 	bfi	r3, r2, #6, #1
 8002c74:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8002c76:	f107 0214 	add.w	r2, r7, #20
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	2124      	movs	r1, #36	; 0x24
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff fea6 	bl	80029d0 <lsm9ds1_write_reg>
 8002c84:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 8002c86:	69fb      	ldr	r3, [r7, #28]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002c9c:	f107 0210 	add.w	r2, r7, #16
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	2120      	movs	r1, #32
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fe7b 	bl	80029a0 <lsm9ds1_read_reg>
 8002caa:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d125      	bne.n	8002cfe <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	08db      	lsrs	r3, r3, #3
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	7c3b      	ldrb	r3, [r7, #16]
 8002cbe:	f362 0341 	bfi	r3, r2, #1, #1
 8002cc2:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	7c3b      	ldrb	r3, [r7, #16]
 8002cce:	f362 0384 	bfi	r3, r2, #2, #3
 8002cd2:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	7c3b      	ldrb	r3, [r7, #16]
 8002ce0:	f362 1346 	bfi	r3, r2, #5, #2
 8002ce4:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 8002ce6:	7c3b      	ldrb	r3, [r7, #16]
 8002ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cec:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002cee:	f107 0210 	add.w	r2, r7, #16
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	2120      	movs	r1, #32
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff fe6a 	bl	80029d0 <lsm9ds1_write_reg>
 8002cfc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8002d04:	f107 020c 	add.w	r2, r7, #12
 8002d08:	2301      	movs	r3, #1
 8002d0a:	2122      	movs	r1, #34	; 0x22
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fe47 	bl	80029a0 <lsm9ds1_read_reg>
 8002d12:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d111      	bne.n	8002d3e <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	7b3b      	ldrb	r3, [r7, #12]
 8002d28:	f362 0301 	bfi	r3, r2, #0, #2
 8002d2c:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8002d2e:	f107 020c 	add.w	r2, r7, #12
 8002d32:	2301      	movs	r3, #1
 8002d34:	2122      	movs	r1, #34	; 0x22
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fe4a 	bl	80029d0 <lsm9ds1_write_reg>
 8002d3c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8002d44:	f107 0208 	add.w	r2, r7, #8
 8002d48:	2301      	movs	r3, #1
 8002d4a:	2123      	movs	r1, #35	; 0x23
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff fe27 	bl	80029a0 <lsm9ds1_read_reg>
 8002d52:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d110      	bne.n	8002d7c <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	7a3b      	ldrb	r3, [r7, #8]
 8002d66:	f362 0383 	bfi	r3, r2, #2, #2
 8002d6a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8002d6c:	f107 0208 	add.w	r2, r7, #8
 8002d70:	2301      	movs	r3, #1
 8002d72:	2123      	movs	r1, #35	; 0x23
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff fe2b 	bl	80029d0 <lsm9ds1_write_reg>
 8002d7a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 8002d7c:	697b      	ldr	r3, [r7, #20]
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8002d92:	f107 0208 	add.w	r2, r7, #8
 8002d96:	2301      	movs	r3, #1
 8002d98:	2121      	movs	r1, #33	; 0x21
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fe00 	bl	80029a0 <lsm9ds1_read_reg>
 8002da0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	7a3b      	ldrb	r3, [r7, #8]
 8002db2:	f362 1346 	bfi	r3, r2, #5, #2
 8002db6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8002db8:	f107 0208 	add.w	r2, r7, #8
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	2121      	movs	r1, #33	; 0x21
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff fe05 	bl	80029d0 <lsm9ds1_write_reg>
 8002dc6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8002ddc:	f107 020c 	add.w	r2, r7, #12
 8002de0:	2306      	movs	r3, #6
 8002de2:	2118      	movs	r1, #24
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff fddb 	bl	80029a0 <lsm9ds1_read_reg>
 8002dea:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002dec:	7b7b      	ldrb	r3, [r7, #13]
 8002dee:	b21a      	sxth	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	7b3b      	ldrb	r3, [r7, #12]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	3302      	adds	r3, #2
 8002e14:	b212      	sxth	r2, r2
 8002e16:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	3302      	adds	r3, #2
 8002e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	7bbb      	ldrb	r3, [r7, #14]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	3302      	adds	r3, #2
 8002e32:	b212      	sxth	r2, r2
 8002e34:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002e36:	7c7a      	ldrb	r2, [r7, #17]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	b212      	sxth	r2, r2
 8002e3e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	3304      	adds	r3, #4
 8002e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	7c3b      	ldrb	r3, [r7, #16]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	b212      	sxth	r2, r2
 8002e5c:	801a      	strh	r2, [r3, #0]

  return ret;
 8002e5e:	697b      	ldr	r3, [r7, #20]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 8002e72:	f107 020c 	add.w	r2, r7, #12
 8002e76:	2306      	movs	r3, #6
 8002e78:	2128      	movs	r1, #40	; 0x28
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff fd90 	bl	80029a0 <lsm9ds1_read_reg>
 8002e80:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002e82:	7b7b      	ldrb	r3, [r7, #13]
 8002e84:	b21a      	sxth	r2, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	021b      	lsls	r3, r3, #8
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	7b3b      	ldrb	r3, [r7, #12]
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	b21a      	sxth	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	b212      	sxth	r2, r2
 8002eac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	7bbb      	ldrb	r3, [r7, #14]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	b212      	sxth	r2, r2
 8002eca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002ecc:	7c7a      	ldrb	r2, [r7, #17]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	b212      	sxth	r2, r2
 8002ed4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	7c3b      	ldrb	r3, [r7, #16]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	b212      	sxth	r2, r2
 8002ef2:	801a      	strh	r2, [r3, #0]

  return ret;
 8002ef4:	697b      	ldr	r3, [r7, #20]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 8002f08:	f107 020c 	add.w	r2, r7, #12
 8002f0c:	2306      	movs	r3, #6
 8002f0e:	2128      	movs	r1, #40	; 0x28
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff fd45 	bl	80029a0 <lsm9ds1_read_reg>
 8002f16:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002f18:	7b7b      	ldrb	r3, [r7, #13]
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	7b3b      	ldrb	r3, [r7, #12]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4413      	add	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	b21a      	sxth	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	3302      	adds	r3, #2
 8002f40:	b212      	sxth	r2, r2
 8002f42:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	3302      	adds	r3, #2
 8002f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	7bbb      	ldrb	r3, [r7, #14]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	b212      	sxth	r2, r2
 8002f60:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002f62:	7c7a      	ldrb	r2, [r7, #17]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	3304      	adds	r3, #4
 8002f68:	b212      	sxth	r2, r2
 8002f6a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	021b      	lsls	r3, r3, #8
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	7c3b      	ldrb	r3, [r7, #16]
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	4413      	add	r3, r2
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	3304      	adds	r3, #4
 8002f86:	b212      	sxth	r2, r2
 8002f88:	801a      	strh	r2, [r3, #0]

  return ret;
 8002f8a:	697b      	ldr	r3, [r7, #20]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	68b8      	ldr	r0, [r7, #8]
 8002fa8:	f7ff fcfa 	bl	80029a0 <lsm9ds1_read_reg>
 8002fac:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	2301      	movs	r3, #1
 8002fba:	210f      	movs	r1, #15
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fcef 	bl	80029a0 <lsm9ds1_read_reg>
 8002fc2:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8002fc4:	697b      	ldr	r3, [r7, #20]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8002fde:	2301      	movs	r3, #1
 8002fe0:	2117      	movs	r1, #23
 8002fe2:	68b8      	ldr	r0, [r7, #8]
 8002fe4:	f7ff fcdc 	bl	80029a0 <lsm9ds1_read_reg>
 8002fe8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8002ff0:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	2127      	movs	r1, #39	; 0x27
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff fcd2 	bl	80029a0 <lsm9ds1_read_reg>
 8002ffc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002ffe:	697b      	ldr	r3, [r7, #20]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8003016:	f107 0214 	add.w	r2, r7, #20
 800301a:	2301      	movs	r3, #1
 800301c:	2122      	movs	r1, #34	; 0x22
 800301e:	68b8      	ldr	r0, [r7, #8]
 8003020:	f7ff fcbe 	bl	80029a0 <lsm9ds1_read_reg>
 8003024:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10f      	bne.n	800304c <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	b2da      	uxtb	r2, r3
 8003034:	7d3b      	ldrb	r3, [r7, #20]
 8003036:	f362 0300 	bfi	r3, r2, #0, #1
 800303a:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 800303c:	f107 0214 	add.w	r2, r7, #20
 8003040:	2301      	movs	r3, #1
 8003042:	2122      	movs	r1, #34	; 0x22
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f7ff fcc3 	bl	80029d0 <lsm9ds1_write_reg>
 800304a:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8003052:	f107 0218 	add.w	r2, r7, #24
 8003056:	2301      	movs	r3, #1
 8003058:	2121      	movs	r1, #33	; 0x21
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f7ff fca0 	bl	80029a0 <lsm9ds1_read_reg>
 8003060:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10f      	bne.n	8003088 <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	7e3b      	ldrb	r3, [r7, #24]
 8003072:	f362 0382 	bfi	r3, r2, #2, #1
 8003076:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8003078:	f107 0218 	add.w	r2, r7, #24
 800307c:	2301      	movs	r3, #1
 800307e:	2121      	movs	r1, #33	; 0x21
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fca5 	bl	80029d0 <lsm9ds1_write_reg>
 8003086:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8003088:	69fb      	ldr	r3, [r7, #28]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3720      	adds	r7, #32
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b088      	sub	sp, #32
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 800309e:	f107 0214 	add.w	r2, r7, #20
 80030a2:	2301      	movs	r3, #1
 80030a4:	2122      	movs	r1, #34	; 0x22
 80030a6:	68b8      	ldr	r0, [r7, #8]
 80030a8:	f7ff fc7a 	bl	80029a0 <lsm9ds1_read_reg>
 80030ac:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d114      	bne.n	80030de <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 80030b4:	f107 0218 	add.w	r2, r7, #24
 80030b8:	2301      	movs	r3, #1
 80030ba:	2121      	movs	r1, #33	; 0x21
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff fc6f 	bl	80029a0 <lsm9ds1_read_reg>
 80030c2:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 80030c4:	7e3b      	ldrb	r3, [r7, #24]
 80030c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	7d3b      	ldrb	r3, [r7, #20]
 80030ce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	4313      	orrs	r3, r2
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80030de:	69fb      	ldr	r3, [r7, #28]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	460b      	mov	r3, r1
 80030f2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80030f4:	f107 0208 	add.w	r2, r7, #8
 80030f8:	2301      	movs	r3, #1
 80030fa:	2110      	movs	r1, #16
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fc4f 	bl	80029a0 <lsm9ds1_read_reg>
 8003102:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	b2da      	uxtb	r2, r3
 8003112:	7a3b      	ldrb	r3, [r7, #8]
 8003114:	f362 0301 	bfi	r3, r2, #0, #2
 8003118:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800311a:	f107 0208 	add.w	r2, r7, #8
 800311e:	2301      	movs	r3, #1
 8003120:	2110      	movs	r1, #16
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff fc54 	bl	80029d0 <lsm9ds1_write_reg>
 8003128:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 800312a:	68fb      	ldr	r3, [r7, #12]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8003140:	f107 0210 	add.w	r2, r7, #16
 8003144:	2301      	movs	r3, #1
 8003146:	2111      	movs	r1, #17
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fc29 	bl	80029a0 <lsm9ds1_read_reg>
 800314e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	b2da      	uxtb	r2, r3
 800315e:	7c3b      	ldrb	r3, [r7, #16]
 8003160:	f362 0301 	bfi	r3, r2, #0, #2
 8003164:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8003166:	f107 0210 	add.w	r2, r7, #16
 800316a:	2301      	movs	r3, #1
 800316c:	2111      	movs	r1, #17
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fc2e 	bl	80029d0 <lsm9ds1_write_reg>
 8003174:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800317c:	f107 020c 	add.w	r2, r7, #12
 8003180:	2301      	movs	r3, #1
 8003182:	2112      	movs	r1, #18
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fc0b 	bl	80029a0 <lsm9ds1_read_reg>
 800318a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d110      	bne.n	80031b4 <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	b2da      	uxtb	r2, r3
 800319c:	7b3b      	ldrb	r3, [r7, #12]
 800319e:	f362 1386 	bfi	r3, r2, #6, #1
 80031a2:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80031a4:	f107 020c 	add.w	r2, r7, #12
 80031a8:	2301      	movs	r3, #1
 80031aa:	2112      	movs	r1, #18
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fc0f 	bl	80029d0 <lsm9ds1_write_reg>
 80031b2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 80031b4:	697b      	ldr	r3, [r7, #20]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80031ca:	f107 0208 	add.w	r2, r7, #8
 80031ce:	2301      	movs	r3, #1
 80031d0:	2112      	movs	r1, #18
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff fbe4 	bl	80029a0 <lsm9ds1_read_reg>
 80031d8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10f      	bne.n	8003200 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	7a3b      	ldrb	r3, [r7, #8]
 80031ea:	f362 0303 	bfi	r3, r2, #0, #4
 80031ee:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80031f0:	f107 0208 	add.w	r2, r7, #8
 80031f4:	2301      	movs	r3, #1
 80031f6:	2112      	movs	r1, #18
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7ff fbe9 	bl	80029d0 <lsm9ds1_write_reg>
 80031fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8003200:	68fb      	ldr	r3, [r7, #12]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8003216:	f107 0208 	add.w	r2, r7, #8
 800321a:	2301      	movs	r3, #1
 800321c:	2120      	movs	r1, #32
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff fbbe 	bl	80029a0 <lsm9ds1_read_reg>
 8003224:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d118      	bne.n	800325e <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	b2da      	uxtb	r2, r3
 8003234:	7a3b      	ldrb	r3, [r7, #8]
 8003236:	f362 0301 	bfi	r3, r2, #0, #2
 800323a:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	b2da      	uxtb	r2, r3
 8003246:	7a3b      	ldrb	r3, [r7, #8]
 8003248:	f362 0382 	bfi	r3, r2, #2, #1
 800324c:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800324e:	f107 0208 	add.w	r2, r7, #8
 8003252:	2301      	movs	r3, #1
 8003254:	2120      	movs	r1, #32
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fbba 	bl	80029d0 <lsm9ds1_write_reg>
 800325c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8003274:	f107 0208 	add.w	r2, r7, #8
 8003278:	2301      	movs	r3, #1
 800327a:	2121      	movs	r1, #33	; 0x21
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fb8f 	bl	80029a0 <lsm9ds1_read_reg>
 8003282:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	b2da      	uxtb	r2, r3
 8003292:	7a3b      	ldrb	r3, [r7, #8]
 8003294:	f362 0382 	bfi	r3, r2, #2, #1
 8003298:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 800329a:	f107 0208 	add.w	r2, r7, #8
 800329e:	2301      	movs	r3, #1
 80032a0:	2121      	movs	r1, #33	; 0x21
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fb94 	bl	80029d0 <lsm9ds1_write_reg>
 80032a8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 80032aa:	68fb      	ldr	r3, [r7, #12]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80032c0:	f107 0208 	add.w	r2, r7, #8
 80032c4:	2301      	movs	r3, #1
 80032c6:	2121      	movs	r1, #33	; 0x21
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fb69 	bl	80029a0 <lsm9ds1_read_reg>
 80032ce:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	7a3b      	ldrb	r3, [r7, #8]
 80032e2:	f362 13c7 	bfi	r3, r2, #7, #1
 80032e6:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	7a3b      	ldrb	r3, [r7, #8]
 80032f2:	f362 1346 	bfi	r3, r2, #5, #2
 80032f6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80032f8:	f107 0208 	add.w	r2, r7, #8
 80032fc:	2301      	movs	r3, #1
 80032fe:	2121      	movs	r1, #33	; 0x21
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fb65 	bl	80029d0 <lsm9ds1_write_reg>
 8003306:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8003308:	68fb      	ldr	r3, [r7, #12]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <ADC_Read>:
static void ADC_ADVREGEN(ADC_TypeDef* adc) {
	adc->CR &= ~ADC_CR_ADVREGEN;
	adc->CR |= 0x1UL << ADC_CR_ADVREGEN_Pos;
}

static void ADC_Read(void) {
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
//	ADC1_val = ADC_GetVal(ADC1);
//	ADC2_val = ADC_GetVal(ADC2);
//	ADC3_val = ADC_GetVal(ADC3);
//	ADC4_val = ADC_GetVal(ADC4);
	ADC_vals[0] = ADC_GetVal(ADC1);
 8003318:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800331c:	f000 f858 	bl	80033d0 <ADC_GetVal>
 8003320:	4603      	mov	r3, r0
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <ADC_Read+0x3c>)
 8003324:	6013      	str	r3, [r2, #0]
	ADC_vals[1] = ADC_GetVal(ADC2);
 8003326:	480b      	ldr	r0, [pc, #44]	; (8003354 <ADC_Read+0x40>)
 8003328:	f000 f852 	bl	80033d0 <ADC_GetVal>
 800332c:	4603      	mov	r3, r0
 800332e:	4a08      	ldr	r2, [pc, #32]	; (8003350 <ADC_Read+0x3c>)
 8003330:	6053      	str	r3, [r2, #4]
	ADC_vals[2] = ADC_GetVal(ADC3);
 8003332:	4809      	ldr	r0, [pc, #36]	; (8003358 <ADC_Read+0x44>)
 8003334:	f000 f84c 	bl	80033d0 <ADC_GetVal>
 8003338:	4603      	mov	r3, r0
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <ADC_Read+0x3c>)
 800333c:	6093      	str	r3, [r2, #8]
	ADC_vals[3] = ADC_GetVal(ADC4);
 800333e:	4807      	ldr	r0, [pc, #28]	; (800335c <ADC_Read+0x48>)
 8003340:	f000 f846 	bl	80033d0 <ADC_GetVal>
 8003344:	4603      	mov	r3, r0
 8003346:	4a02      	ldr	r2, [pc, #8]	; (8003350 <ADC_Read+0x3c>)
 8003348:	60d3      	str	r3, [r2, #12]
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000428 	.word	0x20000428
 8003354:	50000100 	.word	0x50000100
 8003358:	50000400 	.word	0x50000400
 800335c:	50000500 	.word	0x50000500

08003360 <ADC_Calibrate>:

static void ADC_Calibrate(ADC_TypeDef* adc) {
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800336e:	d00b      	beq.n	8003388 <ADC_Calibrate+0x28>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <ADC_Calibrate+0x64>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d007      	beq.n	8003388 <ADC_Calibrate+0x28>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <ADC_Calibrate+0x68>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <ADC_Calibrate+0x28>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <ADC_Calibrate+0x6c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d117      	bne.n	80033b8 <ADC_Calibrate+0x58>
	  return;
  }

  adc->CR &= ~ADC_CR_ADEN; // Disable ADC
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 0201 	bic.w	r2, r3, #1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCALDIF; // Calibration for Single-ended input mode
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCAL; // Start ADC calibration
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	609a      	str	r2, [r3, #8]
  while (adc->CR & ADC_CR_ADCAL);
 80033ac:	bf00      	nop
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dbfb      	blt.n	80033ae <ADC_Calibrate+0x4e>
 80033b6:	e000      	b.n	80033ba <ADC_Calibrate+0x5a>
	  return;
 80033b8:	bf00      	nop
}
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	50000100 	.word	0x50000100
 80033c8:	50000400 	.word	0x50000400
 80033cc:	50000500 	.word	0x50000500

080033d0 <ADC_GetVal>:

static int ADC_GetVal(ADC_TypeDef* adc) {
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033de:	d00d      	beq.n	80033fc <ADC_GetVal+0x2c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <ADC_GetVal+0x3c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <ADC_GetVal+0x2c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <ADC_GetVal+0x40>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d005      	beq.n	80033fc <ADC_GetVal+0x2c>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a08      	ldr	r2, [pc, #32]	; (8003414 <ADC_GetVal+0x44>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d001      	beq.n	80033fc <ADC_GetVal+0x2c>
		return 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e001      	b.n	8003400 <ADC_GetVal+0x30>
	}
	return adc->DR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	50000100 	.word	0x50000100
 8003410:	50000400 	.word	0x50000400
 8003414:	50000500 	.word	0x50000500

08003418 <IMU_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void IMU_Read(void) {
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 800341c:	4aa4      	ldr	r2, [pc, #656]	; (80036b0 <IMU_Read+0x298>)
 800341e:	49a5      	ldr	r1, [pc, #660]	; (80036b4 <IMU_Read+0x29c>)
 8003420:	48a5      	ldr	r0, [pc, #660]	; (80036b8 <IMU_Read+0x2a0>)
 8003422:	f7ff fdd4 	bl	8002fce <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 8003426:	4ba2      	ldr	r3, [pc, #648]	; (80036b0 <IMU_Read+0x298>)
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ef 	beq.w	8003614 <IMU_Read+0x1fc>
 8003436:	4b9e      	ldr	r3, [pc, #632]	; (80036b0 <IMU_Read+0x298>)
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80e7 	beq.w	8003614 <IMU_Read+0x1fc>
		/* Read accelerometer and gyroscope data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003446:	2206      	movs	r2, #6
 8003448:	2100      	movs	r1, #0
 800344a:	489c      	ldr	r0, [pc, #624]	; (80036bc <IMU_Read+0x2a4>)
 800344c:	f005 fd7a 	bl	8008f44 <memset>
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8003450:	2206      	movs	r2, #6
 8003452:	2100      	movs	r1, #0
 8003454:	489a      	ldr	r0, [pc, #616]	; (80036c0 <IMU_Read+0x2a8>)
 8003456:	f005 fd75 	bl	8008f44 <memset>
		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration);
 800345a:	4998      	ldr	r1, [pc, #608]	; (80036bc <IMU_Read+0x2a4>)
 800345c:	4895      	ldr	r0, [pc, #596]	; (80036b4 <IMU_Read+0x29c>)
 800345e:	f7ff fd03 	bl	8002e68 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate);
 8003462:	4997      	ldr	r1, [pc, #604]	; (80036c0 <IMU_Read+0x2a8>)
 8003464:	4893      	ldr	r0, [pc, #588]	; (80036b4 <IMU_Read+0x29c>)
 8003466:	f7ff fcb4 	bl	8002dd2 <lsm9ds1_angular_rate_raw_get>
		 accel.acceleration.x = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[0]) * 9.807) / 1000;
 800346a:	4b94      	ldr	r3, [pc, #592]	; (80036bc <IMU_Read+0x2a4>)
 800346c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fac5 	bl	8002a00 <lsm9ds1_from_fs4g_to_mg>
 8003476:	ee10 3a10 	vmov	r3, s0
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f808 	bl	8000490 <__aeabi_f2d>
 8003480:	a385      	add	r3, pc, #532	; (adr r3, 8003698 <IMU_Read+0x280>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fd f85b 	bl	8000540 <__aeabi_dmul>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <IMU_Read+0x2ac>)
 8003498:	f7fd f97c 	bl	8000794 <__aeabi_ddiv>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f7fd fb1c 	bl	8000ae0 <__aeabi_d2f>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4a87      	ldr	r2, [pc, #540]	; (80036c8 <IMU_Read+0x2b0>)
 80034ac:	6013      	str	r3, [r2, #0]
		 accel.acceleration.y = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]) * 9.807) / 1000;
 80034ae:	4b83      	ldr	r3, [pc, #524]	; (80036bc <IMU_Read+0x2a4>)
 80034b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7ff faa3 	bl	8002a00 <lsm9ds1_from_fs4g_to_mg>
 80034ba:	ee10 3a10 	vmov	r3, s0
 80034be:	4618      	mov	r0, r3
 80034c0:	f7fc ffe6 	bl	8000490 <__aeabi_f2d>
 80034c4:	a374      	add	r3, pc, #464	; (adr r3, 8003698 <IMU_Read+0x280>)
 80034c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ca:	f7fd f839 	bl	8000540 <__aeabi_dmul>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	4b7a      	ldr	r3, [pc, #488]	; (80036c4 <IMU_Read+0x2ac>)
 80034dc:	f7fd f95a 	bl	8000794 <__aeabi_ddiv>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f7fd fafa 	bl	8000ae0 <__aeabi_d2f>
 80034ec:	4603      	mov	r3, r0
 80034ee:	4a76      	ldr	r2, [pc, #472]	; (80036c8 <IMU_Read+0x2b0>)
 80034f0:	6053      	str	r3, [r2, #4]
		 accel.acceleration.z = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]) * 9.807) / 1000;
 80034f2:	4b72      	ldr	r3, [pc, #456]	; (80036bc <IMU_Read+0x2a4>)
 80034f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fa81 	bl	8002a00 <lsm9ds1_from_fs4g_to_mg>
 80034fe:	ee10 3a10 	vmov	r3, s0
 8003502:	4618      	mov	r0, r3
 8003504:	f7fc ffc4 	bl	8000490 <__aeabi_f2d>
 8003508:	a363      	add	r3, pc, #396	; (adr r3, 8003698 <IMU_Read+0x280>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f7fd f817 	bl	8000540 <__aeabi_dmul>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4610      	mov	r0, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	4b69      	ldr	r3, [pc, #420]	; (80036c4 <IMU_Read+0x2ac>)
 8003520:	f7fd f938 	bl	8000794 <__aeabi_ddiv>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	f7fd fad8 	bl	8000ae0 <__aeabi_d2f>
 8003530:	4603      	mov	r3, r0
 8003532:	4a65      	ldr	r2, [pc, #404]	; (80036c8 <IMU_Read+0x2b0>)
 8003534:	6093      	str	r3, [r2, #8]
		 gyro.gyro.x = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) * 2 * M_PI)/360000;
 8003536:	4b62      	ldr	r3, [pc, #392]	; (80036c0 <IMU_Read+0x2a8>)
 8003538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fa77 	bl	8002a30 <lsm9ds1_from_fs2000dps_to_mdps>
 8003542:	eef0 7a40 	vmov.f32	s15, s0
 8003546:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800354a:	ee17 0a90 	vmov	r0, s15
 800354e:	f7fc ff9f 	bl	8000490 <__aeabi_f2d>
 8003552:	a353      	add	r3, pc, #332	; (adr r3, 80036a0 <IMU_Read+0x288>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f7fc fff2 	bl	8000540 <__aeabi_dmul>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	a350      	add	r3, pc, #320	; (adr r3, 80036a8 <IMU_Read+0x290>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fd f913 	bl	8000794 <__aeabi_ddiv>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4610      	mov	r0, r2
 8003574:	4619      	mov	r1, r3
 8003576:	f7fd fab3 	bl	8000ae0 <__aeabi_d2f>
 800357a:	4603      	mov	r3, r0
 800357c:	4a53      	ldr	r2, [pc, #332]	; (80036cc <IMU_Read+0x2b4>)
 800357e:	6013      	str	r3, [r2, #0]
		 gyro.gyro.y = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) * 2 * M_PI)/360000;
 8003580:	4b4f      	ldr	r3, [pc, #316]	; (80036c0 <IMU_Read+0x2a8>)
 8003582:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff fa52 	bl	8002a30 <lsm9ds1_from_fs2000dps_to_mdps>
 800358c:	eef0 7a40 	vmov.f32	s15, s0
 8003590:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003594:	ee17 0a90 	vmov	r0, s15
 8003598:	f7fc ff7a 	bl	8000490 <__aeabi_f2d>
 800359c:	a340      	add	r3, pc, #256	; (adr r3, 80036a0 <IMU_Read+0x288>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fc ffcd 	bl	8000540 <__aeabi_dmul>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	4610      	mov	r0, r2
 80035ac:	4619      	mov	r1, r3
 80035ae:	a33e      	add	r3, pc, #248	; (adr r3, 80036a8 <IMU_Read+0x290>)
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f7fd f8ee 	bl	8000794 <__aeabi_ddiv>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4610      	mov	r0, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	f7fd fa8e 	bl	8000ae0 <__aeabi_d2f>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4a41      	ldr	r2, [pc, #260]	; (80036cc <IMU_Read+0x2b4>)
 80035c8:	6053      	str	r3, [r2, #4]
		 gyro.gyro.z = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) * 2 * M_PI)/360000;
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <IMU_Read+0x2a8>)
 80035cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fa2d 	bl	8002a30 <lsm9ds1_from_fs2000dps_to_mdps>
 80035d6:	eef0 7a40 	vmov.f32	s15, s0
 80035da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035de:	ee17 0a90 	vmov	r0, s15
 80035e2:	f7fc ff55 	bl	8000490 <__aeabi_f2d>
 80035e6:	a32e      	add	r3, pc, #184	; (adr r3, 80036a0 <IMU_Read+0x288>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f7fc ffa8 	bl	8000540 <__aeabi_dmul>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4610      	mov	r0, r2
 80035f6:	4619      	mov	r1, r3
 80035f8:	a32b      	add	r3, pc, #172	; (adr r3, 80036a8 <IMU_Read+0x290>)
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f7fd f8c9 	bl	8000794 <__aeabi_ddiv>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4610      	mov	r0, r2
 8003608:	4619      	mov	r1, r3
 800360a:	f7fd fa69 	bl	8000ae0 <__aeabi_d2f>
 800360e:	4603      	mov	r3, r0
 8003610:	4a2e      	ldr	r2, [pc, #184]	; (80036cc <IMU_Read+0x2b4>)
 8003612:	6093      	str	r3, [r2, #8]
//		gyro.gyro.x = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
//		gyro.gyro.y = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
//		gyro.gyro.z = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}

	if (reg.status_mag.zyxda) {
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <IMU_Read+0x298>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d035      	beq.n	800368e <IMU_Read+0x276>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 8003622:	2206      	movs	r2, #6
 8003624:	2100      	movs	r1, #0
 8003626:	482a      	ldr	r0, [pc, #168]	; (80036d0 <IMU_Read+0x2b8>)
 8003628:	f005 fc8c 	bl	8008f44 <memset>
		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 800362c:	4928      	ldr	r1, [pc, #160]	; (80036d0 <IMU_Read+0x2b8>)
 800362e:	4822      	ldr	r0, [pc, #136]	; (80036b8 <IMU_Read+0x2a0>)
 8003630:	f7ff fc65 	bl	8002efe <lsm9ds1_magnetic_raw_get>
		mag.magnetic.x = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[0]) / 10;
 8003634:	4b26      	ldr	r3, [pc, #152]	; (80036d0 <IMU_Read+0x2b8>)
 8003636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fa10 	bl	8002a60 <lsm9ds1_from_fs16gauss_to_mG>
 8003640:	eeb0 7a40 	vmov.f32	s14, s0
 8003644:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <IMU_Read+0x2bc>)
 800364e:	edc3 7a00 	vstr	s15, [r3]
		mag.magnetic.y = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[1]) / 10;
 8003652:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <IMU_Read+0x2b8>)
 8003654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fa01 	bl	8002a60 <lsm9ds1_from_fs16gauss_to_mG>
 800365e:	eeb0 7a40 	vmov.f32	s14, s0
 8003662:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800366a:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <IMU_Read+0x2bc>)
 800366c:	edc3 7a01 	vstr	s15, [r3, #4]
		mag.magnetic.z = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[2]) / 10;
 8003670:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <IMU_Read+0x2b8>)
 8003672:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f9f2 	bl	8002a60 <lsm9ds1_from_fs16gauss_to_mG>
 800367c:	eeb0 7a40 	vmov.f32	s14, s0
 8003680:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <IMU_Read+0x2bc>)
 800368a:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	f3af 8000 	nop.w
 8003698:	1a9fbe77 	.word	0x1a9fbe77
 800369c:	40239d2f 	.word	0x40239d2f
 80036a0:	54442d18 	.word	0x54442d18
 80036a4:	400921fb 	.word	0x400921fb
 80036a8:	00000000 	.word	0x00000000
 80036ac:	4115f900 	.word	0x4115f900
 80036b0:	20000100 	.word	0x20000100
 80036b4:	20000438 	.word	0x20000438
 80036b8:	20000448 	.word	0x20000448
 80036bc:	200000e4 	.word	0x200000e4
 80036c0:	200000ec 	.word	0x200000ec
 80036c4:	408f4000 	.word	0x408f4000
 80036c8:	20000410 	.word	0x20000410
 80036cc:	20000404 	.word	0x20000404
 80036d0:	200000f4 	.word	0x200000f4
 80036d4:	2000041c 	.word	0x2000041c

080036d8 <IMU_Setup>:

static int IMU_Setup(void) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 80036dc:	4b31      	ldr	r3, [pc, #196]	; (80037a4 <IMU_Setup+0xcc>)
 80036de:	4a32      	ldr	r2, [pc, #200]	; (80037a8 <IMU_Setup+0xd0>)
 80036e0:	601a      	str	r2, [r3, #0]
  dev_ctx_imu.read_reg = platform_read_imu;
 80036e2:	4b30      	ldr	r3, [pc, #192]	; (80037a4 <IMU_Setup+0xcc>)
 80036e4:	4a31      	ldr	r2, [pc, #196]	; (80037ac <IMU_Setup+0xd4>)
 80036e6:	605a      	str	r2, [r3, #4]
  dev_ctx_imu.handle = (void *)&imu_bus;
 80036e8:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <IMU_Setup+0xcc>)
 80036ea:	4a31      	ldr	r2, [pc, #196]	; (80037b0 <IMU_Setup+0xd8>)
 80036ec:	60da      	str	r2, [r3, #12]
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 80036ee:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <IMU_Setup+0xdc>)
 80036f0:	4a31      	ldr	r2, [pc, #196]	; (80037b8 <IMU_Setup+0xe0>)
 80036f2:	601a      	str	r2, [r3, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 80036f4:	4b2f      	ldr	r3, [pc, #188]	; (80037b4 <IMU_Setup+0xdc>)
 80036f6:	4a31      	ldr	r2, [pc, #196]	; (80037bc <IMU_Setup+0xe4>)
 80036f8:	605a      	str	r2, [r3, #4]
  dev_ctx_mag.handle = (void *)&mag_bus;
 80036fa:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <IMU_Setup+0xdc>)
 80036fc:	4a30      	ldr	r2, [pc, #192]	; (80037c0 <IMU_Setup+0xe8>)
 80036fe:	60da      	str	r2, [r3, #12]

  platform_delay(BOOT_TIME);
 8003700:	2014      	movs	r0, #20
 8003702:	f000 f8f3 	bl	80038ec <platform_delay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 8003706:	4a2f      	ldr	r2, [pc, #188]	; (80037c4 <IMU_Setup+0xec>)
 8003708:	4926      	ldr	r1, [pc, #152]	; (80037a4 <IMU_Setup+0xcc>)
 800370a:	482a      	ldr	r0, [pc, #168]	; (80037b4 <IMU_Setup+0xdc>)
 800370c:	f7ff fc42 	bl	8002f94 <lsm9ds1_dev_id_get>

//  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
  if (whoamI.imu != LSM9DS1_IMU_ID) {
 8003710:	4b2c      	ldr	r3, [pc, #176]	; (80037c4 <IMU_Setup+0xec>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b68      	cmp	r3, #104	; 0x68
 8003716:	d002      	beq.n	800371e <IMU_Setup+0x46>
	  while (1) {
		  /* Device not found management */
		  return SETUP_FAIL;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800371c:	e03f      	b.n	800379e <IMU_Setup+0xc6>
	  }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 800371e:	2201      	movs	r2, #1
 8003720:	4920      	ldr	r1, [pc, #128]	; (80037a4 <IMU_Setup+0xcc>)
 8003722:	4824      	ldr	r0, [pc, #144]	; (80037b4 <IMU_Setup+0xdc>)
 8003724:	f7ff fc70 	bl	8003008 <lsm9ds1_dev_reset_set>

  do {
	  lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8003728:	4a27      	ldr	r2, [pc, #156]	; (80037c8 <IMU_Setup+0xf0>)
 800372a:	491e      	ldr	r1, [pc, #120]	; (80037a4 <IMU_Setup+0xcc>)
 800372c:	4821      	ldr	r0, [pc, #132]	; (80037b4 <IMU_Setup+0xdc>)
 800372e:	f7ff fcb0 	bl	8003092 <lsm9ds1_dev_reset_get>
  } while (rst);
 8003732:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <IMU_Setup+0xf0>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f6      	bne.n	8003728 <IMU_Setup+0x50>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 800373a:	2201      	movs	r2, #1
 800373c:	4919      	ldr	r1, [pc, #100]	; (80037a4 <IMU_Setup+0xcc>)
 800373e:	481d      	ldr	r0, [pc, #116]	; (80037b4 <IMU_Setup+0xdc>)
 8003740:	f7ff fa57 	bl	8002bf2 <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 8003744:	2102      	movs	r1, #2
 8003746:	4817      	ldr	r0, [pc, #92]	; (80037a4 <IMU_Setup+0xcc>)
 8003748:	f7ff fa2d 	bl	8002ba6 <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 800374c:	2103      	movs	r1, #3
 800374e:	4815      	ldr	r0, [pc, #84]	; (80037a4 <IMU_Setup+0xcc>)
 8003750:	f7ff f99e 	bl	8002a90 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 8003754:	2103      	movs	r1, #3
 8003756:	4817      	ldr	r0, [pc, #92]	; (80037b4 <IMU_Setup+0xdc>)
 8003758:	f7ff fb15 	bl	8002d86 <lsm9ds1_mag_full_scale_set>
  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 800375c:	2100      	movs	r1, #0
 800375e:	4811      	ldr	r0, [pc, #68]	; (80037a4 <IMU_Setup+0xcc>)
 8003760:	f7ff fd53 	bl	800320a <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 8003764:	2110      	movs	r1, #16
 8003766:	480f      	ldr	r0, [pc, #60]	; (80037a4 <IMU_Setup+0xcc>)
 8003768:	f7ff fda4 	bl	80032b4 <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 800376c:	2100      	movs	r1, #0
 800376e:	480d      	ldr	r0, [pc, #52]	; (80037a4 <IMU_Setup+0xcc>)
 8003770:	f7ff fd7a 	bl	8003268 <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 8003774:	2103      	movs	r1, #3
 8003776:	480b      	ldr	r0, [pc, #44]	; (80037a4 <IMU_Setup+0xcc>)
 8003778:	f7ff fcb6 	bl	80030e8 <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 800377c:	2105      	movs	r1, #5
 800377e:	4809      	ldr	r0, [pc, #36]	; (80037a4 <IMU_Setup+0xcc>)
 8003780:	f7ff fd1d 	bl	80031be <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 8003784:	2112      	movs	r1, #18
 8003786:	4807      	ldr	r0, [pc, #28]	; (80037a4 <IMU_Setup+0xcc>)
 8003788:	f7ff fcd4 	bl	8003134 <lsm9ds1_gy_filter_out_path_set>
  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 800378c:	2122      	movs	r1, #34	; 0x22
 800378e:	4805      	ldr	r0, [pc, #20]	; (80037a4 <IMU_Setup+0xcc>)
 8003790:	f7ff f9a4 	bl	8002adc <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 8003794:	2134      	movs	r1, #52	; 0x34
 8003796:	4807      	ldr	r0, [pc, #28]	; (80037b4 <IMU_Setup+0xdc>)
 8003798:	f7ff fa7a 	bl	8002c90 <lsm9ds1_mag_data_rate_set>

  return SETUP_SUCCESS;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000438 	.word	0x20000438
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	0800385d 	.word	0x0800385d
 80037b0:	20000014 	.word	0x20000014
 80037b4:	20000448 	.word	0x20000448
 80037b8:	08003811 	.word	0x08003811
 80037bc:	080038a1 	.word	0x080038a1
 80037c0:	20000004 	.word	0x20000004
 80037c4:	200000fc 	.word	0x200000fc
 80037c8:	20000102 	.word	0x20000102

080037cc <platform_write_imu>:

static int32_t platform_write_imu(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af04      	add	r7, sp, #16
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	461a      	mov	r2, r3
 80037d8:	460b      	mov	r3, r1
 80037da:	72fb      	strb	r3, [r7, #11]
 80037dc:	4613      	mov	r3, r2
 80037de:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	791b      	ldrb	r3, [r3, #4]
 80037ec:	b299      	uxth	r1, r3
 80037ee:	7afb      	ldrb	r3, [r7, #11]
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f6:	9302      	str	r3, [sp, #8]
 80037f8:	893b      	ldrh	r3, [r7, #8]
 80037fa:	9301      	str	r3, [sp, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2301      	movs	r3, #1
 8003802:	f002 fe79 	bl	80064f8 <HAL_I2C_Mem_Write>
  return 0;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <platform_write_mag>:

static int32_t platform_write_mag(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af04      	add	r7, sp, #16
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	461a      	mov	r2, r3
 800381c:	460b      	mov	r3, r1
 800381e:	72fb      	strb	r3, [r7, #11]
 8003820:	4613      	mov	r3, r2
 8003822:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	617b      	str	r3, [r7, #20]
	reg |= 0x80;
 8003828:	7afb      	ldrb	r3, [r7, #11]
 800382a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800382e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	791b      	ldrb	r3, [r3, #4]
 8003838:	b299      	uxth	r1, r3
 800383a:	7afb      	ldrb	r3, [r7, #11]
 800383c:	b29a      	uxth	r2, r3
 800383e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003842:	9302      	str	r3, [sp, #8]
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2301      	movs	r3, #1
 800384e:	f002 fe53 	bl	80064f8 <HAL_I2C_Mem_Write>
	  return 0;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <platform_read_imu>:

static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af04      	add	r7, sp, #16
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	72fb      	strb	r3, [r7, #11]
 800386c:	4613      	mov	r3, r2
 800386e:	813b      	strh	r3, [r7, #8]
	  sensbus_t *sensbus = (sensbus_t *)handle;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	617b      	str	r3, [r7, #20]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	791b      	ldrb	r3, [r3, #4]
 800387c:	b299      	uxth	r1, r3
 800387e:	7afb      	ldrb	r3, [r7, #11]
 8003880:	b29a      	uxth	r2, r3
 8003882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003886:	9302      	str	r3, [sp, #8]
 8003888:	893b      	ldrh	r3, [r7, #8]
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	2301      	movs	r3, #1
 8003892:	f002 ff45 	bl	8006720 <HAL_I2C_Mem_Read>
	  return 0;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <platform_read_mag>:

static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af04      	add	r7, sp, #16
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	461a      	mov	r2, r3
 80038ac:	460b      	mov	r3, r1
 80038ae:	72fb      	strb	r3, [r7, #11]
 80038b0:	4613      	mov	r3, r2
 80038b2:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	617b      	str	r3, [r7, #20]
	  reg |= 0x80;
 80038b8:	7afb      	ldrb	r3, [r7, #11]
 80038ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038be:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	791b      	ldrb	r3, [r3, #4]
 80038c8:	b299      	uxth	r1, r3
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038d2:	9302      	str	r3, [sp, #8]
 80038d4:	893b      	ldrh	r3, [r7, #8]
 80038d6:	9301      	str	r3, [sp, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	2301      	movs	r3, #1
 80038de:	f002 ff1f 	bl	8006720 <HAL_I2C_Mem_Read>
	  return 0;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <platform_delay>:

static void platform_delay(uint32_t ms)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f001 fa1f 	bl	8004d38 <HAL_Delay>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <HAL_GPIO_EXTI_Callback+0x1c>
//		if (HAL_GPIO_ReadPin(GPIOC, 0) == GPIO_PIN_SET) {
			mode = MODE_ADVANCED;
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_GPIO_EXTI_Callback+0x68>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]
			Start_AdvancedMode();
 800391a:	f000 f8e3 	bl	8003ae4 <Start_AdvancedMode>
 800391e:	e005      	b.n	800392c <HAL_GPIO_EXTI_Callback+0x28>
//		}
    } else if (GPIO_Pin == GPIO_PIN_1) {
 8003920:	88fb      	ldrh	r3, [r7, #6]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d102      	bne.n	800392c <HAL_GPIO_EXTI_Callback+0x28>
//    	if (HAL_GPIO_ReadPin(GPIOC, 1) == GPIO_PIN_SET) {
    		mode = MODE_STANDARD;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_GPIO_EXTI_Callback+0x68>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
//    	}
    }
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800392c:	2006      	movs	r0, #6
 800392e:	f002 f974 	bl	8005c1a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8003932:	2007      	movs	r0, #7
 8003934:	f002 f971 	bl	8005c1a <HAL_NVIC_DisableIRQ>
    exti_test1 = HAL_GPIO_ReadPin(GPIOC, 0);
 8003938:	2100      	movs	r1, #0
 800393a:	480d      	ldr	r0, [pc, #52]	; (8003970 <HAL_GPIO_EXTI_Callback+0x6c>)
 800393c:	f002 fc28 	bl	8006190 <HAL_GPIO_ReadPin>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_GPIO_EXTI_Callback+0x70>)
 8003946:	601a      	str	r2, [r3, #0]
    exti_test2 = HAL_GPIO_ReadPin(GPIOC, 1);
 8003948:	2101      	movs	r1, #1
 800394a:	4809      	ldr	r0, [pc, #36]	; (8003970 <HAL_GPIO_EXTI_Callback+0x6c>)
 800394c:	f002 fc20 	bl	8006190 <HAL_GPIO_ReadPin>
 8003950:	4603      	mov	r3, r0
 8003952:	461a      	mov	r2, r3
 8003954:	4b08      	ldr	r3, [pc, #32]	; (8003978 <HAL_GPIO_EXTI_Callback+0x74>)
 8003956:	601a      	str	r2, [r3, #0]
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003958:	2006      	movs	r0, #6
 800395a:	f002 f950 	bl	8005bfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800395e:	2007      	movs	r0, #7
 8003960:	f002 f94d 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000030 	.word	0x20000030
 8003970:	48000800 	.word	0x48000800
 8003974:	2000046c 	.word	0x2000046c
 8003978:	20000470 	.word	0x20000470

0800397c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a2c      	ldr	r2, [pc, #176]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d150      	bne.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0xb2>
	if (state == INIT) {
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10f      	bne.n	80039b4 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (cnt_sec <= 0) {
 8003994:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	dc06      	bgt.n	80039aa <HAL_TIM_PeriodElapsedCallback+0x2e>
			state = CAL_UNFLEXED;
 800399c:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
			cnt_sec = CAL_TIME_SEC;
 80039a2:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e004      	b.n	80039b4 <HAL_TIM_PeriodElapsedCallback+0x38>
		} else {
			cnt_sec -= 1;
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80039b2:	6013      	str	r3, [r2, #0]
		}
	}
    if (state == CAL_UNFLEXED) {
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d110      	bne.n	80039de <HAL_TIM_PeriodElapsedCallback+0x62>
      if (cnt_sec <= 0) {
 80039bc:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	dc06      	bgt.n	80039d2 <HAL_TIM_PeriodElapsedCallback+0x56>
        state = CAL_FLEXED;
 80039c4:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80039c6:	2202      	movs	r2, #2
 80039c8:	701a      	strb	r2, [r3, #0]
        cnt_sec = CAL_TIME_SEC;
 80039ca:	4b1d      	ldr	r3, [pc, #116]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
        cnt_sec -= 1;
      }
    }
    // @henry: update display here
  }
}
 80039d0:	e02d      	b.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0xb2>
        cnt_sec -= 1;
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	4a19      	ldr	r2, [pc, #100]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	e027      	b.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0xb2>
    } else if (state == CAL_FLEXED) {
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d123      	bne.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0xb2>
      if (cnt_sec <= 0) {
 80039e6:	4b16      	ldr	r3, [pc, #88]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	dc1a      	bgt.n	8003a24 <HAL_TIM_PeriodElapsedCallback+0xa8>
        state = IDLE;
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80039f0:	2203      	movs	r2, #3
 80039f2:	701a      	strb	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(&htim16);
 80039f4:	4810      	ldr	r0, [pc, #64]	; (8003a38 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80039f6:	f005 f857 	bl	8008aa8 <HAL_TIM_Base_Stop_IT>
        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80039fa:	2006      	movs	r0, #6
 80039fc:	f002 f8ff 	bl	8005bfe <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003a00:	2007      	movs	r0, #7
 8003a02:	f002 f8fc 	bl	8005bfe <HAL_NVIC_EnableIRQ>
        if (HAL_GPIO_ReadPin(GPIOC, 0) == GPIO_PIN_SET) { // @henry: check PC0 IDR for starting mode
 8003a06:	2100      	movs	r1, #0
 8003a08:	480e      	ldr	r0, [pc, #56]	; (8003a44 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003a0a:	f002 fbc1 	bl	8006190 <HAL_GPIO_ReadPin>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d103      	bne.n	8003a1c <HAL_TIM_PeriodElapsedCallback+0xa0>
        	mode = MODE_ADVANCED;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
}
 8003a1a:	e008      	b.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0xb2>
        	mode = MODE_STANDARD;
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
}
 8003a22:	e004      	b.n	8003a2e <HAL_TIM_PeriodElapsedCallback+0xb2>
        cnt_sec -= 1;
 8003a24:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003a2c:	6013      	str	r3, [r2, #0]
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000394 	.word	0x20000394
 8003a3c:	20000464 	.word	0x20000464
 8003a40:	20000468 	.word	0x20000468
 8003a44:	48000800 	.word	0x48000800
 8003a48:	20000030 	.word	0x20000030

08003a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a50:	f001 f90c 	bl	8004c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a54:	f000 f944 	bl	8003ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a58:	f000 fd06 	bl	8004468 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a5c:	f000 fce6 	bl	800442c <MX_DMA_Init>
  MX_ADC1_Init();
 8003a60:	f000 f99c 	bl	8003d9c <MX_ADC1_Init>
  MX_ADC2_Init();
 8003a64:	f000 fa46 	bl	8003ef4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003a68:	f000 fad0 	bl	800400c <MX_ADC3_Init>
  MX_ADC4_Init();
 8003a6c:	f000 fb6c 	bl	8004148 <MX_ADC4_Init>
  MX_I2C1_Init();
 8003a70:	f000 fbf6 	bl	8004260 <MX_I2C1_Init>
  MX_I2C2_Init();
 8003a74:	f000 fc34 	bl	80042e0 <MX_I2C2_Init>
  MX_TIM16_Init();
 8003a78:	f000 fcb0 	bl	80043dc <MX_TIM16_Init>
  MX_SPI1_Init();
 8003a7c:	f000 fc70 	bl	8004360 <MX_SPI1_Init>
  SPI1_Setup();
 8003a80:	f7fe ff12 	bl	80028a8 <SPI1_Setup>

  /* USER CODE BEGIN 2 */
  if (IMU_Setup() != SETUP_SUCCESS) {
 8003a84:	f7ff fe28 	bl	80036d8 <IMU_Setup>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <main+0x46>
	  return 1;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e01c      	b.n	8003acc <main+0x80>
  }
  MCP4728_Init(&hi2c2, output);
 8003a92:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <main+0x84>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4611      	mov	r1, r2
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	891a      	ldrh	r2, [r3, #8]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f362 030f 	bfi	r3, r2, #0, #16
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <main+0x88>)
 8003aa8:	f7fe febf 	bl	800282a <MCP4728_Init>
  output.channelVref = 0x00;
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <main+0x84>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
  output.channel_Gain = 0x00;
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <main+0x84>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	705a      	strb	r2, [r3, #1]

  state = INIT;
 8003ab8:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <main+0x8c>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	701a      	strb	r2, [r3, #0]
  cnt_sec = CAL_TIME_SEC;
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <main+0x90>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
//  LCD_Update();
  HAL_TIM_Base_Start_IT(&htim16); // @henry: starting timer
 8003ac4:	4806      	ldr	r0, [pc, #24]	; (8003ae0 <main+0x94>)
 8003ac6:	f004 ff85 	bl	80089d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
//  Start_AdvancedMode();

  while (1) {
 8003aca:	e7fe      	b.n	8003aca <main+0x7e>
//	   exti_test1 = HAL_GPIO_ReadPin(GPIOC, 0);
//	   exti_test2 = HAL_GPIO_ReadPin(GPIOC, 1);
  }
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	200000d8 	.word	0x200000d8
 8003ad4:	20000298 	.word	0x20000298
 8003ad8:	20000464 	.word	0x20000464
 8003adc:	20000468 	.word	0x20000468
 8003ae0:	20000394 	.word	0x20000394

08003ae4 <Start_AdvancedMode>:

void Start_AdvancedMode(void) {
 8003ae4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ae8:	af00      	add	r7, sp, #0
  reset_aux_frame();
 8003aea:	f7fd fabf 	bl	800106c <reset_aux_frame>
  t1 = HAL_GetTick();
 8003aee:	f001 f917 	bl	8004d20 <HAL_GetTick>
 8003af2:	4603      	mov	r3, r0
 8003af4:	461a      	mov	r2, r3
 8003af6:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <Start_AdvancedMode+0x1c4>)
 8003af8:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (mode == MODE_ADVANCED) {
 8003afa:	e0cc      	b.n	8003c96 <Start_AdvancedMode+0x1b2>
	  /* SENSOR READ BEGIN */
	  ADC_Read();
 8003afc:	f7ff fc0a 	bl	8003314 <ADC_Read>
	  IMU_Read();
 8003b00:	f7ff fc8a 	bl	8003418 <IMU_Read>

	  /* SENSOR READ END */

	  /* CALCULATIONS BEGIN */
	  t2 = HAL_GetTick();
 8003b04:	f001 f90c 	bl	8004d20 <HAL_GetTick>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b67      	ldr	r3, [pc, #412]	; (8003cac <Start_AdvancedMode+0x1c8>)
 8003b0e:	601a      	str	r2, [r3, #0]
//	  calculate_orientation((t2 - t1) / 1000.0f); // @henry: adaptive frequency was way too fast
	  calculate_orientation(0.01);
 8003b10:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8003cb0 <Start_AdvancedMode+0x1cc>
 8003b14:	f7fd f9f0 	bl	8000ef8 <calculate_orientation>
	  t1 = t2;
 8003b18:	4b64      	ldr	r3, [pc, #400]	; (8003cac <Start_AdvancedMode+0x1c8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a62      	ldr	r2, [pc, #392]	; (8003ca8 <Start_AdvancedMode+0x1c4>)
 8003b1e:	6013      	str	r3, [r2, #0]
	  calculate_gestures();
 8003b20:	f7fd f82e 	bl	8000b80 <calculate_gestures>

	  /* CALCULATIONS END*/

	  /* OUTPUT BEGIN */
	  output.channel_Val[0] = resting_voltage + (gimbal_pitch - 0.5) * factor; // pitch
 8003b24:	4b63      	ldr	r3, [pc, #396]	; (8003cb4 <Start_AdvancedMode+0x1d0>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fc fc9f 	bl	800046c <__aeabi_i2d>
 8003b2e:	4604      	mov	r4, r0
 8003b30:	460d      	mov	r5, r1
 8003b32:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <Start_AdvancedMode+0x1d4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fc fcaa 	bl	8000490 <__aeabi_f2d>
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	4b5e      	ldr	r3, [pc, #376]	; (8003cbc <Start_AdvancedMode+0x1d8>)
 8003b42:	f7fc fb45 	bl	80001d0 <__aeabi_dsub>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4690      	mov	r8, r2
 8003b4c:	4699      	mov	r9, r3
 8003b4e:	4b5c      	ldr	r3, [pc, #368]	; (8003cc0 <Start_AdvancedMode+0x1dc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fc8a 	bl	800046c <__aeabi_i2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	4649      	mov	r1, r9
 8003b60:	f7fc fcee 	bl	8000540 <__aeabi_dmul>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4620      	mov	r0, r4
 8003b6a:	4629      	mov	r1, r5
 8003b6c:	f7fc fb32 	bl	80001d4 <__adddf3>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	f7fc ff92 	bl	8000aa0 <__aeabi_d2uiz>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	4b50      	ldr	r3, [pc, #320]	; (8003cc4 <Start_AdvancedMode+0x1e0>)
 8003b82:	805a      	strh	r2, [r3, #2]
	  output.channel_Val[1] = resting_voltage + (gimbal_roll - 0.5) * factor; // roll
 8003b84:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <Start_AdvancedMode+0x1d0>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fc6f 	bl	800046c <__aeabi_i2d>
 8003b8e:	4604      	mov	r4, r0
 8003b90:	460d      	mov	r5, r1
 8003b92:	4b4d      	ldr	r3, [pc, #308]	; (8003cc8 <Start_AdvancedMode+0x1e4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fc fc7a 	bl	8000490 <__aeabi_f2d>
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <Start_AdvancedMode+0x1d8>)
 8003ba2:	f7fc fb15 	bl	80001d0 <__aeabi_dsub>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	460b      	mov	r3, r1
 8003baa:	4690      	mov	r8, r2
 8003bac:	4699      	mov	r9, r3
 8003bae:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <Start_AdvancedMode+0x1dc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fc fc5a 	bl	800046c <__aeabi_i2d>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	f7fc fcbe 	bl	8000540 <__aeabi_dmul>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4620      	mov	r0, r4
 8003bca:	4629      	mov	r1, r5
 8003bcc:	f7fc fb02 	bl	80001d4 <__adddf3>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f7fc ff62 	bl	8000aa0 <__aeabi_d2uiz>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <Start_AdvancedMode+0x1e0>)
 8003be2:	809a      	strh	r2, [r3, #4]
	  output.channel_Val[2] = throttle_voltage + (gimbal_throttle * 2) * factor; // throttle
 8003be4:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <Start_AdvancedMode+0x1e8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	ee07 3a90 	vmov	s15, r3
 8003bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bf0:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <Start_AdvancedMode+0x1ec>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003bfa:	4b31      	ldr	r3, [pc, #196]	; (8003cc0 <Start_AdvancedMode+0x1dc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c12:	ee17 3a90 	vmov	r3, s15
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	4b2a      	ldr	r3, [pc, #168]	; (8003cc4 <Start_AdvancedMode+0x1e0>)
 8003c1a:	80da      	strh	r2, [r3, #6]
	  output.channel_Val[3] = resting_voltage + (gimbal_yaw - 0.5) * factor; // yaw
 8003c1c:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <Start_AdvancedMode+0x1d0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc fc23 	bl	800046c <__aeabi_i2d>
 8003c26:	4604      	mov	r4, r0
 8003c28:	460d      	mov	r5, r1
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <Start_AdvancedMode+0x1f0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fc fc2e 	bl	8000490 <__aeabi_f2d>
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <Start_AdvancedMode+0x1d8>)
 8003c3a:	f7fc fac9 	bl	80001d0 <__aeabi_dsub>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4690      	mov	r8, r2
 8003c44:	4699      	mov	r9, r3
 8003c46:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <Start_AdvancedMode+0x1dc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fc0e 	bl	800046c <__aeabi_i2d>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4640      	mov	r0, r8
 8003c56:	4649      	mov	r1, r9
 8003c58:	f7fc fc72 	bl	8000540 <__aeabi_dmul>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4620      	mov	r0, r4
 8003c62:	4629      	mov	r1, r5
 8003c64:	f7fc fab6 	bl	80001d4 <__adddf3>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ff16 	bl	8000aa0 <__aeabi_d2uiz>
 8003c74:	4603      	mov	r3, r0
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <Start_AdvancedMode+0x1e0>)
 8003c7a:	811a      	strh	r2, [r3, #8]
	  MCP4728_Write_AllChannels_Diff(&hi2c2, output);
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <Start_AdvancedMode+0x1e0>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4611      	mov	r1, r2
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	4610      	mov	r0, r2
 8003c86:	891a      	ldrh	r2, [r3, #8]
 8003c88:	2300      	movs	r3, #0
 8003c8a:	f362 030f 	bfi	r3, r2, #0, #16
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4811      	ldr	r0, [pc, #68]	; (8003cd8 <Start_AdvancedMode+0x1f4>)
 8003c92:	f7fe fd86 	bl	80027a2 <MCP4728_Write_AllChannels_Diff>
  while (mode == MODE_ADVANCED) {
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <Start_AdvancedMode+0x1f8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	f43f af2e 	beq.w	8003afc <Start_AdvancedMode+0x18>

	  /* OUTPUT END */
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ca8:	20000458 	.word	0x20000458
 8003cac:	2000045c 	.word	0x2000045c
 8003cb0:	3c23d70a 	.word	0x3c23d70a
 8003cb4:	20000028 	.word	0x20000028
 8003cb8:	200003f8 	.word	0x200003f8
 8003cbc:	3fe00000 	.word	0x3fe00000
 8003cc0:	2000002c 	.word	0x2000002c
 8003cc4:	200000d8 	.word	0x200000d8
 8003cc8:	200003f4 	.word	0x200003f4
 8003ccc:	20000460 	.word	0x20000460
 8003cd0:	20000400 	.word	0x20000400
 8003cd4:	200003fc 	.word	0x200003fc
 8003cd8:	20000298 	.word	0x20000298
 8003cdc:	20000030 	.word	0x20000030

08003ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b09e      	sub	sp, #120	; 0x78
 8003ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ce6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cea:	2228      	movs	r2, #40	; 0x28
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f005 f928 	bl	8008f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d04:	463b      	mov	r3, r7
 8003d06:	223c      	movs	r2, #60	; 0x3c
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f005 f91a 	bl	8008f44 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d10:	2302      	movs	r3, #2
 8003d12:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d14:	2301      	movs	r3, #1
 8003d16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d18:	2310      	movs	r3, #16
 8003d1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d20:	2300      	movs	r3, #0
 8003d22:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003d24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003d28:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d2a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f003 f97a 	bl	8007028 <HAL_RCC_OscConfig>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003d3a:	f000 fbfb 	bl	8004534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d3e:	230f      	movs	r3, #15
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003d42:	2300      	movs	r3, #0
 8003d44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d46:	2300      	movs	r3, #0
 8003d48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003d52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f004 f9a3 	bl	80080a4 <HAL_RCC_ClockConfig>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003d64:	f000 fbe6 	bl	8004534 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8003d68:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003d6c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d72:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d82:	463b      	mov	r3, r7
 8003d84:	4618      	mov	r0, r3
 8003d86:	f004 fb73 	bl	8008470 <HAL_RCCEx_PeriphCLKConfig>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003d90:	f000 fbd0 	bl	8004534 <Error_Handler>
  }
}
 8003d94:	bf00      	nop
 8003d96:	3778      	adds	r7, #120	; 0x78
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	2200      	movs	r2, #0
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	605a      	str	r2, [r3, #4]
 8003dac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	609a      	str	r2, [r3, #8]
 8003db8:	60da      	str	r2, [r3, #12]
 8003dba:	611a      	str	r2, [r3, #16]
 8003dbc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003dbe:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003dc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003dc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003dc6:	4b4a      	ldr	r3, [pc, #296]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003dcc:	4b48      	ldr	r3, [pc, #288]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003dd8:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003dde:	4b44      	ldr	r3, [pc, #272]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003de6:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003dec:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003df2:	4b3f      	ldr	r3, [pc, #252]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003df8:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003dfe:	4b3c      	ldr	r3, [pc, #240]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e06:	4b3a      	ldr	r3, [pc, #232]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003e08:	2204      	movs	r2, #4
 8003e0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003e0c:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003e12:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e18:	4835      	ldr	r0, [pc, #212]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003e1a:	f000 ffb1 	bl	8004d80 <HAL_ADC_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003e24:	f000 fb86 	bl	8004534 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	4619      	mov	r1, r3
 8003e32:	482f      	ldr	r0, [pc, #188]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003e34:	f001 fc70 	bl	8005718 <HAL_ADCEx_MultiModeConfigChannel>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003e3e:	f000 fb79 	bl	8004534 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e46:	2301      	movs	r3, #1
 8003e48:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e5a:	1d3b      	adds	r3, r7, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4824      	ldr	r0, [pc, #144]	; (8003ef0 <MX_ADC1_Init+0x154>)
 8003e60:	f001 f96e 	bl	8005140 <HAL_ADC_ConfigChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8003e6a:	f000 fb63 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_Calibrate(ADC1);
 8003e6e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e72:	f7ff fa75 	bl	8003360 <ADC_Calibrate>
//  ADC_ADVREGEN(ADC1); // @henry
//  ADC12_COMMON->CCR|= ADC_CCR_VREFEN; // @henry

  ADC1->CR |= ADC_CR_ADEN; // Enable ADC
 8003e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6093      	str	r3, [r2, #8]
//  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC1->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003e86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003e90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e94:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR &= ~0xC; // 12-bit Resolution
 8003e96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ea0:	f023 030c 	bic.w	r3, r3, #12
 8003ea4:	60d3      	str	r3, [r2, #12]

  ADC1->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003ea6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003eb0:	f023 030f 	bic.w	r3, r3, #15
 8003eb4:	6313      	str	r3, [r2, #48]	; 0x30
  ADC1->SQR1 |= 0x1 << 6; // Channel 1 of ADC1
 8003eb6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec4:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003ec6:	bf00      	nop
 8003ec8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f8      	beq.n	8003ec8 <MX_ADC1_Init+0x12c>
  ADC1->CR |= ADC_CR_ADSTART; // Start the ADC
 8003ed6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 8003ee6:	bf00      	nop
 8003ee8:	3728      	adds	r7, #40	; 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000104 	.word	0x20000104

08003ef4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003efa:	463b      	mov	r3, r7
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
 8003f08:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003f0a:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f0c:	4a3e      	ldr	r2, [pc, #248]	; (8004008 <MX_ADC2_Init+0x114>)
 8003f0e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f10:	4b3c      	ldr	r3, [pc, #240]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003f22:	4b38      	ldr	r3, [pc, #224]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003f28:	4b36      	ldr	r3, [pc, #216]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f30:	4b34      	ldr	r3, [pc, #208]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f38:	2201      	movs	r2, #1
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003f42:	4b30      	ldr	r3, [pc, #192]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003f48:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f50:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f52:	2204      	movs	r2, #4
 8003f54:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003f5c:	4b29      	ldr	r3, [pc, #164]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f62:	4828      	ldr	r0, [pc, #160]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f64:	f000 ff0c 	bl	8004d80 <HAL_ADC_Init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8003f6e:	f000 fae1 	bl	8004534 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003f72:	2303      	movs	r3, #3
 8003f74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f76:	2301      	movs	r3, #1
 8003f78:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f8a:	463b      	mov	r3, r7
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	481d      	ldr	r0, [pc, #116]	; (8004004 <MX_ADC2_Init+0x110>)
 8003f90:	f001 f8d6 	bl	8005140 <HAL_ADC_ConfigChannel>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8003f9a:	f000 facb 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC_Calibrate(ADC2);
 8003f9e:	481a      	ldr	r0, [pc, #104]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fa0:	f7ff f9de 	bl	8003360 <ADC_Calibrate>

  ADC2->CR |= ADC_CR_ADEN; // Enable ADC
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a17      	ldr	r2, [pc, #92]	; (8004008 <MX_ADC2_Init+0x114>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6093      	str	r3, [r2, #8]
//  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC2->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003fb0:	4b15      	ldr	r3, [pc, #84]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a14      	ldr	r2, [pc, #80]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fba:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~0xC; // 12-bit Resolution
 8003fbc:	4b12      	ldr	r3, [pc, #72]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fc2:	f023 030c 	bic.w	r3, r3, #12
 8003fc6:	60d3      	str	r3, [r2, #12]

  ADC2->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fce:	f023 030f 	bic.w	r3, r3, #15
 8003fd2:	6313      	str	r3, [r2, #48]	; 0x30
  ADC2->SQR1 |= 0x3 << 6; // Channel 3 of ADC2
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd8:	4a0b      	ldr	r2, [pc, #44]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fde:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003fe0:	bf00      	nop
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <MX_ADC2_Init+0x114>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f9      	beq.n	8003fe2 <MX_ADC2_Init+0xee>
  ADC2->CR |= ADC_CR_ADSTART; // Start the ADC
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <MX_ADC2_Init+0x114>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4a05      	ldr	r2, [pc, #20]	; (8004008 <MX_ADC2_Init+0x114>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC2_Init 2 */

}
 8003ffa:	bf00      	nop
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000154 	.word	0x20000154
 8004008:	50000100 	.word	0x50000100

0800400c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	; 0x28
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004012:	f107 031c 	add.w	r3, r7, #28
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
 800402c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800402e:	4b44      	ldr	r3, [pc, #272]	; (8004140 <MX_ADC3_Init+0x134>)
 8004030:	4a44      	ldr	r2, [pc, #272]	; (8004144 <MX_ADC3_Init+0x138>)
 8004032:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004034:	4b42      	ldr	r3, [pc, #264]	; (8004140 <MX_ADC3_Init+0x134>)
 8004036:	2200      	movs	r2, #0
 8004038:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <MX_ADC3_Init+0x134>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004040:	4b3f      	ldr	r3, [pc, #252]	; (8004140 <MX_ADC3_Init+0x134>)
 8004042:	2200      	movs	r2, #0
 8004044:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8004046:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <MX_ADC3_Init+0x134>)
 8004048:	2200      	movs	r2, #0
 800404a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800404c:	4b3c      	ldr	r3, [pc, #240]	; (8004140 <MX_ADC3_Init+0x134>)
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004054:	4b3a      	ldr	r3, [pc, #232]	; (8004140 <MX_ADC3_Init+0x134>)
 8004056:	2200      	movs	r2, #0
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800405a:	4b39      	ldr	r3, [pc, #228]	; (8004140 <MX_ADC3_Init+0x134>)
 800405c:	2201      	movs	r2, #1
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004060:	4b37      	ldr	r3, [pc, #220]	; (8004140 <MX_ADC3_Init+0x134>)
 8004062:	2200      	movs	r2, #0
 8004064:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <MX_ADC3_Init+0x134>)
 8004068:	2201      	movs	r2, #1
 800406a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800406c:	4b34      	ldr	r3, [pc, #208]	; (8004140 <MX_ADC3_Init+0x134>)
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004074:	4b32      	ldr	r3, [pc, #200]	; (8004140 <MX_ADC3_Init+0x134>)
 8004076:	2204      	movs	r2, #4
 8004078:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <MX_ADC3_Init+0x134>)
 800407c:	2200      	movs	r2, #0
 800407e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004080:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <MX_ADC3_Init+0x134>)
 8004082:	2200      	movs	r2, #0
 8004084:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004086:	482e      	ldr	r0, [pc, #184]	; (8004140 <MX_ADC3_Init+0x134>)
 8004088:	f000 fe7a 	bl	8004d80 <HAL_ADC_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8004092:	f000 fa4f 	bl	8004534 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800409a:	f107 031c 	add.w	r3, r7, #28
 800409e:	4619      	mov	r1, r3
 80040a0:	4827      	ldr	r0, [pc, #156]	; (8004140 <MX_ADC3_Init+0x134>)
 80040a2:	f001 fb39 	bl	8005718 <HAL_ADCEx_MultiModeConfigChannel>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80040ac:	f000 fa42 	bl	8004534 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80040b0:	2301      	movs	r3, #1
 80040b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040b4:	2301      	movs	r3, #1
 80040b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80040b8:	2300      	movs	r3, #0
 80040ba:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80040c8:	1d3b      	adds	r3, r7, #4
 80040ca:	4619      	mov	r1, r3
 80040cc:	481c      	ldr	r0, [pc, #112]	; (8004140 <MX_ADC3_Init+0x134>)
 80040ce:	f001 f837 	bl	8005140 <HAL_ADC_ConfigChannel>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80040d8:	f000 fa2c 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  ADC_Calibrate(ADC3);
 80040dc:	4819      	ldr	r0, [pc, #100]	; (8004144 <MX_ADC3_Init+0x138>)
 80040de:	f7ff f93f 	bl	8003360 <ADC_Calibrate>

  ADC3->CR |= ADC_CR_ADEN; // Enable ADC
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <MX_ADC3_Init+0x138>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <MX_ADC3_Init+0x138>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6093      	str	r3, [r2, #8]
//  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC3->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <MX_ADC3_Init+0x138>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4a14      	ldr	r2, [pc, #80]	; (8004144 <MX_ADC3_Init+0x138>)
 80040f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040f8:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~0xC; // 12-bit Resolution
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <MX_ADC3_Init+0x138>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4a11      	ldr	r2, [pc, #68]	; (8004144 <MX_ADC3_Init+0x138>)
 8004100:	f023 030c 	bic.w	r3, r3, #12
 8004104:	60d3      	str	r3, [r2, #12]

  ADC3->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <MX_ADC3_Init+0x138>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <MX_ADC3_Init+0x138>)
 800410c:	f023 030f 	bic.w	r3, r3, #15
 8004110:	6313      	str	r3, [r2, #48]	; 0x30
  ADC3->SQR1 |= 0x1 << 6; // Channel 1 of ADC3
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <MX_ADC3_Init+0x138>)
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	4a0b      	ldr	r2, [pc, #44]	; (8004144 <MX_ADC3_Init+0x138>)
 8004118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411c:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 800411e:	bf00      	nop
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <MX_ADC3_Init+0x138>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f9      	beq.n	8004120 <MX_ADC3_Init+0x114>
  ADC3->CR |= ADC_CR_ADSTART; // Start the ADC
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <MX_ADC3_Init+0x138>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <MX_ADC3_Init+0x138>)
 8004132:	f043 0304 	orr.w	r3, r3, #4
 8004136:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC3_Init 2 */

}
 8004138:	bf00      	nop
 800413a:	3728      	adds	r7, #40	; 0x28
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	200001a4 	.word	0x200001a4
 8004144:	50000400 	.word	0x50000400

08004148 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800414e:	463b      	mov	r3, r7
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	611a      	str	r2, [r3, #16]
 800415c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800415e:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <MX_ADC4_Init+0x110>)
 8004160:	4a3e      	ldr	r2, [pc, #248]	; (800425c <MX_ADC4_Init+0x114>)
 8004162:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004164:	4b3c      	ldr	r3, [pc, #240]	; (8004258 <MX_ADC4_Init+0x110>)
 8004166:	2200      	movs	r2, #0
 8004168:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800416a:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <MX_ADC4_Init+0x110>)
 800416c:	2200      	movs	r2, #0
 800416e:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004170:	4b39      	ldr	r3, [pc, #228]	; (8004258 <MX_ADC4_Init+0x110>)
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8004176:	4b38      	ldr	r3, [pc, #224]	; (8004258 <MX_ADC4_Init+0x110>)
 8004178:	2200      	movs	r2, #0
 800417a:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800417c:	4b36      	ldr	r3, [pc, #216]	; (8004258 <MX_ADC4_Init+0x110>)
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004184:	4b34      	ldr	r3, [pc, #208]	; (8004258 <MX_ADC4_Init+0x110>)
 8004186:	2200      	movs	r2, #0
 8004188:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800418a:	4b33      	ldr	r3, [pc, #204]	; (8004258 <MX_ADC4_Init+0x110>)
 800418c:	2201      	movs	r2, #1
 800418e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004190:	4b31      	ldr	r3, [pc, #196]	; (8004258 <MX_ADC4_Init+0x110>)
 8004192:	2200      	movs	r2, #0
 8004194:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8004196:	4b30      	ldr	r3, [pc, #192]	; (8004258 <MX_ADC4_Init+0x110>)
 8004198:	2201      	movs	r2, #1
 800419a:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <MX_ADC4_Init+0x110>)
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041a4:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <MX_ADC4_Init+0x110>)
 80041a6:	2204      	movs	r2, #4
 80041a8:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80041aa:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <MX_ADC4_Init+0x110>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80041b0:	4b29      	ldr	r3, [pc, #164]	; (8004258 <MX_ADC4_Init+0x110>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80041b6:	4828      	ldr	r0, [pc, #160]	; (8004258 <MX_ADC4_Init+0x110>)
 80041b8:	f000 fde2 	bl	8004d80 <HAL_ADC_Init>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80041c2:	f000 f9b7 	bl	8004534 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80041de:	463b      	mov	r3, r7
 80041e0:	4619      	mov	r1, r3
 80041e2:	481d      	ldr	r0, [pc, #116]	; (8004258 <MX_ADC4_Init+0x110>)
 80041e4:	f000 ffac 	bl	8005140 <HAL_ADC_ConfigChannel>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 80041ee:	f000 f9a1 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  ADC_Calibrate(ADC4);
 80041f2:	481a      	ldr	r0, [pc, #104]	; (800425c <MX_ADC4_Init+0x114>)
 80041f4:	f7ff f8b4 	bl	8003360 <ADC_Calibrate>

  ADC4->CR |= ADC_CR_ADEN; // Enable ADC
 80041f8:	4b18      	ldr	r3, [pc, #96]	; (800425c <MX_ADC4_Init+0x114>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a17      	ldr	r2, [pc, #92]	; (800425c <MX_ADC4_Init+0x114>)
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	6093      	str	r3, [r2, #8]
//  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC4->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <MX_ADC4_Init+0x114>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <MX_ADC4_Init+0x114>)
 800420a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800420e:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~0xC; // 12-bit Resolution
 8004210:	4b12      	ldr	r3, [pc, #72]	; (800425c <MX_ADC4_Init+0x114>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <MX_ADC4_Init+0x114>)
 8004216:	f023 030c 	bic.w	r3, r3, #12
 800421a:	60d3      	str	r3, [r2, #12]

  ADC4->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 800421c:	4b0f      	ldr	r3, [pc, #60]	; (800425c <MX_ADC4_Init+0x114>)
 800421e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004220:	4a0e      	ldr	r2, [pc, #56]	; (800425c <MX_ADC4_Init+0x114>)
 8004222:	f023 030f 	bic.w	r3, r3, #15
 8004226:	6313      	str	r3, [r2, #48]	; 0x30
  ADC4->SQR1 |= 0x1 << 6; // Channel 1 of ADC4
 8004228:	4b0c      	ldr	r3, [pc, #48]	; (800425c <MX_ADC4_Init+0x114>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	4a0b      	ldr	r2, [pc, #44]	; (800425c <MX_ADC4_Init+0x114>)
 800422e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004232:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8004234:	bf00      	nop
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <MX_ADC4_Init+0x114>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f9      	beq.n	8004236 <MX_ADC4_Init+0xee>
  ADC4->CR |= ADC_CR_ADSTART; // Start the ADC
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <MX_ADC4_Init+0x114>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a05      	ldr	r2, [pc, #20]	; (800425c <MX_ADC4_Init+0x114>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC4_Init 2 */

}
 800424e:	bf00      	nop
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	200001f4 	.word	0x200001f4
 800425c:	50000500 	.word	0x50000500

08004260 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <MX_I2C1_Init+0x74>)
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <MX_I2C1_Init+0x78>)
 8004268:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800426a:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <MX_I2C1_Init+0x74>)
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <MX_I2C1_Init+0x7c>)
 800426e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004270:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <MX_I2C1_Init+0x74>)
 8004272:	2200      	movs	r2, #0
 8004274:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004276:	4b17      	ldr	r3, [pc, #92]	; (80042d4 <MX_I2C1_Init+0x74>)
 8004278:	2201      	movs	r2, #1
 800427a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <MX_I2C1_Init+0x74>)
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004282:	4b14      	ldr	r3, [pc, #80]	; (80042d4 <MX_I2C1_Init+0x74>)
 8004284:	2200      	movs	r2, #0
 8004286:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004288:	4b12      	ldr	r3, [pc, #72]	; (80042d4 <MX_I2C1_Init+0x74>)
 800428a:	2200      	movs	r2, #0
 800428c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <MX_I2C1_Init+0x74>)
 8004290:	2200      	movs	r2, #0
 8004292:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004294:	4b0f      	ldr	r3, [pc, #60]	; (80042d4 <MX_I2C1_Init+0x74>)
 8004296:	2200      	movs	r2, #0
 8004298:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800429a:	480e      	ldr	r0, [pc, #56]	; (80042d4 <MX_I2C1_Init+0x74>)
 800429c:	f001 ffa8 	bl	80061f0 <HAL_I2C_Init>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80042a6:	f000 f945 	bl	8004534 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80042aa:	2100      	movs	r1, #0
 80042ac:	4809      	ldr	r0, [pc, #36]	; (80042d4 <MX_I2C1_Init+0x74>)
 80042ae:	f002 fe23 	bl	8006ef8 <HAL_I2CEx_ConfigAnalogFilter>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80042b8:	f000 f93c 	bl	8004534 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80042bc:	2100      	movs	r1, #0
 80042be:	4805      	ldr	r0, [pc, #20]	; (80042d4 <MX_I2C1_Init+0x74>)
 80042c0:	f002 fe65 	bl	8006f8e <HAL_I2CEx_ConfigDigitalFilter>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80042ca:	f000 f933 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000244 	.word	0x20000244
 80042d8:	40005400 	.word	0x40005400
 80042dc:	2000090e 	.word	0x2000090e

080042e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80042e4:	4b1b      	ldr	r3, [pc, #108]	; (8004354 <MX_I2C2_Init+0x74>)
 80042e6:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <MX_I2C2_Init+0x78>)
 80042e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80042ea:	4b1a      	ldr	r3, [pc, #104]	; (8004354 <MX_I2C2_Init+0x74>)
 80042ec:	4a1b      	ldr	r2, [pc, #108]	; (800435c <MX_I2C2_Init+0x7c>)
 80042ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <MX_I2C2_Init+0x74>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042f6:	4b17      	ldr	r3, [pc, #92]	; (8004354 <MX_I2C2_Init+0x74>)
 80042f8:	2201      	movs	r2, #1
 80042fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042fc:	4b15      	ldr	r3, [pc, #84]	; (8004354 <MX_I2C2_Init+0x74>)
 80042fe:	2200      	movs	r2, #0
 8004300:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004302:	4b14      	ldr	r3, [pc, #80]	; (8004354 <MX_I2C2_Init+0x74>)
 8004304:	2200      	movs	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004308:	4b12      	ldr	r3, [pc, #72]	; (8004354 <MX_I2C2_Init+0x74>)
 800430a:	2200      	movs	r2, #0
 800430c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800430e:	4b11      	ldr	r3, [pc, #68]	; (8004354 <MX_I2C2_Init+0x74>)
 8004310:	2200      	movs	r2, #0
 8004312:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <MX_I2C2_Init+0x74>)
 8004316:	2200      	movs	r2, #0
 8004318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800431a:	480e      	ldr	r0, [pc, #56]	; (8004354 <MX_I2C2_Init+0x74>)
 800431c:	f001 ff68 	bl	80061f0 <HAL_I2C_Init>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004326:	f000 f905 	bl	8004534 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800432a:	2100      	movs	r1, #0
 800432c:	4809      	ldr	r0, [pc, #36]	; (8004354 <MX_I2C2_Init+0x74>)
 800432e:	f002 fde3 	bl	8006ef8 <HAL_I2CEx_ConfigAnalogFilter>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004338:	f000 f8fc 	bl	8004534 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800433c:	2100      	movs	r1, #0
 800433e:	4805      	ldr	r0, [pc, #20]	; (8004354 <MX_I2C2_Init+0x74>)
 8004340:	f002 fe25 	bl	8006f8e <HAL_I2CEx_ConfigDigitalFilter>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800434a:	f000 f8f3 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000298 	.word	0x20000298
 8004358:	40005800 	.word	0x40005800
 800435c:	2000090e 	.word	0x2000090e

08004360 <MX_SPI1_Init>:
* @brief SPI1 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI1_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_Init 0 */
	/* USER CODE END SPI1_Init 0 */
	/* USER CODE BEGIN SPI1_Init 1 */
	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <MX_SPI1_Init+0x74>)
 8004366:	4a1c      	ldr	r2, [pc, #112]	; (80043d8 <MX_SPI1_Init+0x78>)
 8004368:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800436a:	4b1a      	ldr	r3, [pc, #104]	; (80043d4 <MX_SPI1_Init+0x74>)
 800436c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004370:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004372:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <MX_SPI1_Init+0x74>)
 8004374:	2200      	movs	r2, #0
 8004376:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004378:	4b16      	ldr	r3, [pc, #88]	; (80043d4 <MX_SPI1_Init+0x74>)
 800437a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800437e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004380:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <MX_SPI1_Init+0x74>)
 8004382:	2200      	movs	r2, #0
 8004384:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004386:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <MX_SPI1_Init+0x74>)
 8004388:	2200      	movs	r2, #0
 800438a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800438c:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <MX_SPI1_Init+0x74>)
 800438e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004392:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004394:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <MX_SPI1_Init+0x74>)
 8004396:	2200      	movs	r2, #0
 8004398:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800439a:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <MX_SPI1_Init+0x74>)
 800439c:	2200      	movs	r2, #0
 800439e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043a0:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <MX_SPI1_Init+0x74>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <MX_SPI1_Init+0x74>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <MX_SPI1_Init+0x74>)
 80043ae:	2207      	movs	r2, #7
 80043b0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <MX_SPI1_Init+0x74>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <MX_SPI1_Init+0x74>)
 80043ba:	2208      	movs	r2, #8
 80043bc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043be:	4805      	ldr	r0, [pc, #20]	; (80043d4 <MX_SPI1_Init+0x74>)
 80043c0:	f004 fa06 	bl	80087d0 <HAL_SPI_Init>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_SPI1_Init+0x6e>
	{
	Error_Handler();
 80043ca:	f000 f8b3 	bl	8004534 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
	/* USER CODE END SPI1_Init 2 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200002ec 	.word	0x200002ec
 80043d8:	40013000 	.word	0x40013000

080043dc <MX_TIM16_Init>:
* @brief TIM16 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM16_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM16_Init 0 */
	/* USER CODE END TIM16_Init 0 */
	/* USER CODE BEGIN TIM16_Init 1 */
	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <MX_TIM16_Init+0x48>)
 80043e2:	4a11      	ldr	r2, [pc, #68]	; (8004428 <MX_TIM16_Init+0x4c>)
 80043e4:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 8000 - 1;
 80043e6:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <MX_TIM16_Init+0x48>)
 80043e8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80043ec:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <MX_TIM16_Init+0x48>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1000 - 1;
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <MX_TIM16_Init+0x48>)
 80043f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043fa:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <MX_TIM16_Init+0x48>)
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <MX_TIM16_Init+0x48>)
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <MX_TIM16_Init+0x48>)
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800440e:	4805      	ldr	r0, [pc, #20]	; (8004424 <MX_TIM16_Init+0x48>)
 8004410:	f004 fa89 	bl	8008926 <HAL_TIM_Base_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_TIM16_Init+0x42>
	{
	Error_Handler();
 800441a:	f000 f88b 	bl	8004534 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	/* USER CODE END TIM16_Init 2 */
}
 800441e:	bf00      	nop
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000394 	.word	0x20000394
 8004428:	40014400 	.word	0x40014400

0800442c <MX_DMA_Init>:

/**
* Enable DMA controller clock
*/
static void MX_DMA_Init(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004432:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <MX_DMA_Init+0x38>)
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	4a0b      	ldr	r2, [pc, #44]	; (8004464 <MX_DMA_Init+0x38>)
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	6153      	str	r3, [r2, #20]
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <MX_DMA_Init+0x38>)
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800444a:	2200      	movs	r2, #0
 800444c:	2100      	movs	r1, #0
 800444e:	200d      	movs	r0, #13
 8004450:	f001 fbb9 	bl	8005bc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004454:	200d      	movs	r0, #13
 8004456:	f001 fbd2 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 800445a:	bf00      	nop
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000

08004468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446e:	f107 0314 	add.w	r3, r7, #20
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800447e:	4b2b      	ldr	r3, [pc, #172]	; (800452c <MX_GPIO_Init+0xc4>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4a2a      	ldr	r2, [pc, #168]	; (800452c <MX_GPIO_Init+0xc4>)
 8004484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004488:	6153      	str	r3, [r2, #20]
 800448a:	4b28      	ldr	r3, [pc, #160]	; (800452c <MX_GPIO_Init+0xc4>)
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004496:	4b25      	ldr	r3, [pc, #148]	; (800452c <MX_GPIO_Init+0xc4>)
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	4a24      	ldr	r2, [pc, #144]	; (800452c <MX_GPIO_Init+0xc4>)
 800449c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a0:	6153      	str	r3, [r2, #20]
 80044a2:	4b22      	ldr	r3, [pc, #136]	; (800452c <MX_GPIO_Init+0xc4>)
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ae:	4b1f      	ldr	r3, [pc, #124]	; (800452c <MX_GPIO_Init+0xc4>)
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <MX_GPIO_Init+0xc4>)
 80044b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044b8:	6153      	str	r3, [r2, #20]
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <MX_GPIO_Init+0xc4>)
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <MX_GPIO_Init+0xc4>)
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	4a18      	ldr	r2, [pc, #96]	; (800452c <MX_GPIO_Init+0xc4>)
 80044cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044d0:	6153      	str	r3, [r2, #20]
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <MX_GPIO_Init+0xc4>)
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044de:	4b13      	ldr	r3, [pc, #76]	; (800452c <MX_GPIO_Init+0xc4>)
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4a12      	ldr	r2, [pc, #72]	; (800452c <MX_GPIO_Init+0xc4>)
 80044e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044e8:	6153      	str	r3, [r2, #20]
 80044ea:	4b10      	ldr	r3, [pc, #64]	; (800452c <MX_GPIO_Init+0xc4>)
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044f6:	2303      	movs	r3, #3
 80044f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80044fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004500:	2302      	movs	r3, #2
 8004502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	4619      	mov	r1, r3
 800450a:	4809      	ldr	r0, [pc, #36]	; (8004530 <MX_GPIO_Init+0xc8>)
 800450c:	f001 fcc6 	bl	8005e9c <HAL_GPIO_Init>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8004510:	2200      	movs	r2, #0
 8004512:	2101      	movs	r1, #1
 8004514:	2006      	movs	r0, #6
 8004516:	f001 fb56 	bl	8005bc6 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800451a:	2200      	movs	r2, #0
 800451c:	2100      	movs	r1, #0
 800451e:	2007      	movs	r0, #7
 8004520:	f001 fb51 	bl	8005bc6 <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004524:	bf00      	nop
 8004526:	3728      	adds	r7, #40	; 0x28
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000
 8004530:	48000800 	.word	0x48000800

08004534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004538:	b672      	cpsid	i
}
 800453a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800453c:	e7fe      	b.n	800453c <Error_Handler+0x8>
	...

08004540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004546:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <HAL_MspInit+0x44>)
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	4a0e      	ldr	r2, [pc, #56]	; (8004584 <HAL_MspInit+0x44>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6193      	str	r3, [r2, #24]
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <HAL_MspInit+0x44>)
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	607b      	str	r3, [r7, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	4b09      	ldr	r3, [pc, #36]	; (8004584 <HAL_MspInit+0x44>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	4a08      	ldr	r2, [pc, #32]	; (8004584 <HAL_MspInit+0x44>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004568:	61d3      	str	r3, [r2, #28]
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_MspInit+0x44>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40021000 	.word	0x40021000

08004588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b090      	sub	sp, #64	; 0x40
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	605a      	str	r2, [r3, #4]
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045a8:	d12e      	bne.n	8004608 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80045aa:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_ADC_MspInit+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	4a64      	ldr	r2, [pc, #400]	; (8004744 <HAL_ADC_MspInit+0x1bc>)
 80045b2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80045b4:	4b63      	ldr	r3, [pc, #396]	; (8004744 <HAL_ADC_MspInit+0x1bc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10b      	bne.n	80045d4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80045bc:	4b62      	ldr	r3, [pc, #392]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	4a61      	ldr	r2, [pc, #388]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6153      	str	r3, [r2, #20]
 80045c8:	4b5f      	ldr	r3, [pc, #380]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045d4:	4b5c      	ldr	r3, [pc, #368]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	4a5b      	ldr	r2, [pc, #364]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80045da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045de:	6153      	str	r3, [r2, #20]
 80045e0:	4b59      	ldr	r3, [pc, #356]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045ec:	2301      	movs	r3, #1
 80045ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045f0:	2303      	movs	r3, #3
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f4:	2300      	movs	r3, #0
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045fc:	4619      	mov	r1, r3
 80045fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004602:	f001 fc4b 	bl	8005e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8004606:	e099      	b.n	800473c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a4f      	ldr	r2, [pc, #316]	; (800474c <HAL_ADC_MspInit+0x1c4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d12e      	bne.n	8004670 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004612:	4b4c      	ldr	r3, [pc, #304]	; (8004744 <HAL_ADC_MspInit+0x1bc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3301      	adds	r3, #1
 8004618:	4a4a      	ldr	r2, [pc, #296]	; (8004744 <HAL_ADC_MspInit+0x1bc>)
 800461a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800461c:	4b49      	ldr	r3, [pc, #292]	; (8004744 <HAL_ADC_MspInit+0x1bc>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d10b      	bne.n	800463c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004624:	4b48      	ldr	r3, [pc, #288]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	4a47      	ldr	r2, [pc, #284]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 800462a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462e:	6153      	str	r3, [r2, #20]
 8004630:	4b45      	ldr	r3, [pc, #276]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004638:	623b      	str	r3, [r7, #32]
 800463a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800463c:	4b42      	ldr	r3, [pc, #264]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	4a41      	ldr	r2, [pc, #260]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 8004642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004646:	6153      	str	r3, [r2, #20]
 8004648:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004650:	61fb      	str	r3, [r7, #28]
 8004652:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004654:	2340      	movs	r3, #64	; 0x40
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004658:	2303      	movs	r3, #3
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004660:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004664:	4619      	mov	r1, r3
 8004666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800466a:	f001 fc17 	bl	8005e9c <HAL_GPIO_Init>
}
 800466e:	e065      	b.n	800473c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a36      	ldr	r2, [pc, #216]	; (8004750 <HAL_ADC_MspInit+0x1c8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d12d      	bne.n	80046d6 <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800467a:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_ADC_MspInit+0x1cc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	4a34      	ldr	r2, [pc, #208]	; (8004754 <HAL_ADC_MspInit+0x1cc>)
 8004682:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8004684:	4b33      	ldr	r3, [pc, #204]	; (8004754 <HAL_ADC_MspInit+0x1cc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d10b      	bne.n	80046a4 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800468c:	4b2e      	ldr	r3, [pc, #184]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 8004692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004696:	6153      	str	r3, [r2, #20]
 8004698:	4b2b      	ldr	r3, [pc, #172]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046a4:	4b28      	ldr	r3, [pc, #160]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	4a27      	ldr	r2, [pc, #156]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80046aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ae:	6153      	str	r3, [r2, #20]
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046b8:	617b      	str	r3, [r7, #20]
 80046ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046bc:	2302      	movs	r3, #2
 80046be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046c0:	2303      	movs	r3, #3
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c4:	2300      	movs	r3, #0
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046cc:	4619      	mov	r1, r3
 80046ce:	4822      	ldr	r0, [pc, #136]	; (8004758 <HAL_ADC_MspInit+0x1d0>)
 80046d0:	f001 fbe4 	bl	8005e9c <HAL_GPIO_Init>
}
 80046d4:	e032      	b.n	800473c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC4)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a20      	ldr	r2, [pc, #128]	; (800475c <HAL_ADC_MspInit+0x1d4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d12d      	bne.n	800473c <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80046e0:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <HAL_ADC_MspInit+0x1cc>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3301      	adds	r3, #1
 80046e6:	4a1b      	ldr	r2, [pc, #108]	; (8004754 <HAL_ADC_MspInit+0x1cc>)
 80046e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80046ea:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_ADC_MspInit+0x1cc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10b      	bne.n	800470a <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	4a14      	ldr	r2, [pc, #80]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 80046f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046fc:	6153      	str	r3, [r2, #20]
 80046fe:	4b12      	ldr	r3, [pc, #72]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800470a:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	4a0e      	ldr	r2, [pc, #56]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 8004710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004714:	6153      	str	r3, [r2, #20]
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <HAL_ADC_MspInit+0x1c0>)
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004722:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004728:	2303      	movs	r3, #3
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	2300      	movs	r3, #0
 800472e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004734:	4619      	mov	r1, r3
 8004736:	480a      	ldr	r0, [pc, #40]	; (8004760 <HAL_ADC_MspInit+0x1d8>)
 8004738:	f001 fbb0 	bl	8005e9c <HAL_GPIO_Init>
}
 800473c:	bf00      	nop
 800473e:	3740      	adds	r7, #64	; 0x40
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000474 	.word	0x20000474
 8004748:	40021000 	.word	0x40021000
 800474c:	50000100 	.word	0x50000100
 8004750:	50000400 	.word	0x50000400
 8004754:	20000478 	.word	0x20000478
 8004758:	48000400 	.word	0x48000400
 800475c:	50000500 	.word	0x50000500
 8004760:	48001000 	.word	0x48001000

08004764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08e      	sub	sp, #56	; 0x38
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800476c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	605a      	str	r2, [r3, #4]
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	60da      	str	r2, [r3, #12]
 800477a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a54      	ldr	r2, [pc, #336]	; (80048d4 <HAL_I2C_MspInit+0x170>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d14e      	bne.n	8004824 <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004786:	4b54      	ldr	r3, [pc, #336]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	4a53      	ldr	r2, [pc, #332]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 800478c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004790:	6153      	str	r3, [r2, #20]
 8004792:	4b51      	ldr	r3, [pc, #324]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	623b      	str	r3, [r7, #32]
 800479c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800479e:	4b4e      	ldr	r3, [pc, #312]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	4a4d      	ldr	r2, [pc, #308]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 80047a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a8:	6153      	str	r3, [r2, #20]
 80047aa:	4b4b      	ldr	r3, [pc, #300]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047bc:	2312      	movs	r3, #18
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047c4:	2303      	movs	r3, #3
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047c8:	2304      	movs	r3, #4
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047d0:	4619      	mov	r1, r3
 80047d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80047d6:	f001 fb61 	bl	8005e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047de:	2312      	movs	r3, #18
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047e6:	2303      	movs	r3, #3
 80047e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80047ea:	2304      	movs	r3, #4
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047f2:	4619      	mov	r1, r3
 80047f4:	4839      	ldr	r0, [pc, #228]	; (80048dc <HAL_I2C_MspInit+0x178>)
 80047f6:	f001 fb51 	bl	8005e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80047fa:	4b37      	ldr	r3, [pc, #220]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4a36      	ldr	r2, [pc, #216]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 8004800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004804:	61d3      	str	r3, [r2, #28]
 8004806:	4b34      	ldr	r3, [pc, #208]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480e:	61bb      	str	r3, [r7, #24]
 8004810:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004812:	2200      	movs	r2, #0
 8004814:	2100      	movs	r1, #0
 8004816:	201f      	movs	r0, #31
 8004818:	f001 f9d5 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800481c:	201f      	movs	r0, #31
 800481e:	f001 f9ee 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004822:	e052      	b.n	80048ca <HAL_I2C_MspInit+0x166>
  else if(hi2c->Instance==I2C2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a2d      	ldr	r2, [pc, #180]	; (80048e0 <HAL_I2C_MspInit+0x17c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d14d      	bne.n	80048ca <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482e:	4b2a      	ldr	r3, [pc, #168]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4a29      	ldr	r2, [pc, #164]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 8004834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004838:	6153      	str	r3, [r2, #20]
 800483a:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 800484c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004850:	6153      	str	r3, [r2, #20]
 8004852:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800485e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004862:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004864:	2312      	movs	r3, #18
 8004866:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800486c:	2303      	movs	r3, #3
 800486e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004870:	2304      	movs	r3, #4
 8004872:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004878:	4619      	mov	r1, r3
 800487a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800487e:	f001 fb0d 	bl	8005e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004882:	2340      	movs	r3, #64	; 0x40
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004886:	2312      	movs	r3, #18
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488a:	2300      	movs	r3, #0
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800488e:	2303      	movs	r3, #3
 8004890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004892:	2304      	movs	r3, #4
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800489a:	4619      	mov	r1, r3
 800489c:	4811      	ldr	r0, [pc, #68]	; (80048e4 <HAL_I2C_MspInit+0x180>)
 800489e:	f001 fafd 	bl	8005e9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 80048a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048ac:	61d3      	str	r3, [r2, #28]
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_I2C_MspInit+0x174>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2100      	movs	r1, #0
 80048be:	2021      	movs	r0, #33	; 0x21
 80048c0:	f001 f981 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80048c4:	2021      	movs	r0, #33	; 0x21
 80048c6:	f001 f99a 	bl	8005bfe <HAL_NVIC_EnableIRQ>
}
 80048ca:	bf00      	nop
 80048cc:	3738      	adds	r7, #56	; 0x38
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40005400 	.word	0x40005400
 80048d8:	40021000 	.word	0x40021000
 80048dc:	48000400 	.word	0x48000400
 80048e0:	40005800 	.word	0x40005800
 80048e4:	48001400 	.word	0x48001400

080048e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2a      	ldr	r2, [pc, #168]	; (80049b0 <HAL_SPI_MspInit+0xc8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d14e      	bne.n	80049a8 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800490a:	4b2a      	ldr	r3, [pc, #168]	; (80049b4 <HAL_SPI_MspInit+0xcc>)
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	4a29      	ldr	r2, [pc, #164]	; (80049b4 <HAL_SPI_MspInit+0xcc>)
 8004910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004914:	6193      	str	r3, [r2, #24]
 8004916:	4b27      	ldr	r3, [pc, #156]	; (80049b4 <HAL_SPI_MspInit+0xcc>)
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491e:	613b      	str	r3, [r7, #16]
 8004920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004922:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_SPI_MspInit+0xcc>)
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	4a23      	ldr	r2, [pc, #140]	; (80049b4 <HAL_SPI_MspInit+0xcc>)
 8004928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492c:	6153      	str	r3, [r2, #20]
 800492e:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <HAL_SPI_MspInit+0xcc>)
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	60fb      	str	r3, [r7, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800493a:	23b0      	movs	r3, #176	; 0xb0
 800493c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493e:	2302      	movs	r3, #2
 8004940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004946:	2303      	movs	r3, #3
 8004948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800494a:	2305      	movs	r3, #5
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494e:	f107 0314 	add.w	r3, r7, #20
 8004952:	4619      	mov	r1, r3
 8004954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004958:	f001 faa0 	bl	8005e9c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800495c:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 800495e:	4a17      	ldr	r2, [pc, #92]	; (80049bc <HAL_SPI_MspInit+0xd4>)
 8004960:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004962:	4b15      	ldr	r3, [pc, #84]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 8004964:	2210      	movs	r2, #16
 8004966:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004968:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 800496a:	2200      	movs	r2, #0
 800496c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800497a:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 800497c:	2200      	movs	r2, #0
 800497e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 8004982:	2200      	movs	r2, #0
 8004984:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004986:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 8004988:	2200      	movs	r2, #0
 800498a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800498c:	480a      	ldr	r0, [pc, #40]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 800498e:	f001 f95e 	bl	8005c4e <HAL_DMA_Init>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8004998:	f7ff fdcc 	bl	8004534 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a06      	ldr	r2, [pc, #24]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 80049a0:	655a      	str	r2, [r3, #84]	; 0x54
 80049a2:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <HAL_SPI_MspInit+0xd0>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80049a8:	bf00      	nop
 80049aa:	3728      	adds	r7, #40	; 0x28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40013000 	.word	0x40013000
 80049b4:	40021000 	.word	0x40021000
 80049b8:	20000350 	.word	0x20000350
 80049bc:	40020030 	.word	0x40020030

080049c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0d      	ldr	r2, [pc, #52]	; (8004a04 <HAL_TIM_Base_MspInit+0x44>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d113      	bne.n	80049fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_TIM_Base_MspInit+0x48>)
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <HAL_TIM_Base_MspInit+0x48>)
 80049d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049dc:	6193      	str	r3, [r2, #24]
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_TIM_Base_MspInit+0x48>)
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80049ea:	2200      	movs	r2, #0
 80049ec:	2100      	movs	r1, #0
 80049ee:	2019      	movs	r0, #25
 80049f0:	f001 f8e9 	bl	8005bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80049f4:	2019      	movs	r0, #25
 80049f6:	f001 f902 	bl	8005bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40021000 	.word	0x40021000

08004a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a10:	e7fe      	b.n	8004a10 <NMI_Handler+0x4>

08004a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a16:	e7fe      	b.n	8004a16 <HardFault_Handler+0x4>

08004a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a1c:	e7fe      	b.n	8004a1c <MemManage_Handler+0x4>

08004a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a22:	e7fe      	b.n	8004a22 <BusFault_Handler+0x4>

08004a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a28:	e7fe      	b.n	8004a28 <UsageFault_Handler+0x4>

08004a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a3c:	bf00      	nop
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a46:	b480      	push	{r7}
 8004a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a58:	f000 f94e 	bl	8004cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a5c:	bf00      	nop
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004a64:	2001      	movs	r0, #1
 8004a66:	f001 fbab 	bl	80061c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004a72:	2002      	movs	r0, #2
 8004a74:	f001 fba4 	bl	80061c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004a78:	bf00      	nop
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <DMA1_Channel3_IRQHandler+0x10>)
 8004a82:	f001 f92b 	bl	8005cdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000350 	.word	0x20000350

08004a90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004a96:	f004 f836 	bl	8008b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000394 	.word	0x20000394

08004aa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004aa8:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <I2C1_EV_IRQHandler+0x10>)
 8004aaa:	f001 ff53 	bl	8006954 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000244 	.word	0x20000244

08004ab8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004abc:	4802      	ldr	r0, [pc, #8]	; (8004ac8 <I2C2_EV_IRQHandler+0x10>)
 8004abe:	f001 ff49 	bl	8006954 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000298 	.word	0x20000298

08004acc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ad0:	4b06      	ldr	r3, [pc, #24]	; (8004aec <SystemInit+0x20>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	4a05      	ldr	r2, [pc, #20]	; (8004aec <SystemInit+0x20>)
 8004ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000ed00 	.word	0xe000ed00

08004af0 <max>:
#include "utils.h"

float max(float a, float b) {
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	ed87 0a01 	vstr	s0, [r7, #4]
 8004afa:	edc7 0a00 	vstr	s1, [r7]
    if (a >= b) {
 8004afe:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b02:	edd7 7a00 	vldr	s15, [r7]
 8004b06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0e:	db01      	blt.n	8004b14 <max+0x24>
        return a;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	e000      	b.n	8004b16 <max+0x26>
    }
    return b;
 8004b14:	683b      	ldr	r3, [r7, #0]
}
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <lerp>:
    }
    return val;
}

float lerp(float a, float b, float t)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b32:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b36:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + (b - a) * t;
 8004b3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b46:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b52:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004b56:	eeb0 0a67 	vmov.f32	s0, s15
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <map>:

float map(float value, float in_min, float in_max, float out_min, float out_max) {
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	ed87 0a05 	vstr	s0, [r7, #20]
 8004b6e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004b72:	ed87 1a03 	vstr	s2, [r7, #12]
 8004b76:	edc7 1a02 	vstr	s3, [r7, #8]
 8004b7a:	ed87 2a01 	vstr	s4, [r7, #4]
    if (value >= in_max) {
 8004b7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b82:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8e:	db02      	blt.n	8004b96 <map+0x32>
        return out_max;
 8004b90:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b94:	e025      	b.n	8004be2 <map+0x7e>
    }
    if (value <= in_min) {
 8004b96:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d802      	bhi.n	8004bae <map+0x4a>
        return out_min;
 8004ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bac:	e019      	b.n	8004be2 <map+0x7e>
    }
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004bae:	ed97 7a05 	vldr	s14, [r7, #20]
 8004bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bba:	edd7 6a01 	vldr	s13, [r7, #4]
 8004bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004bc6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004bca:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bce:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bde:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004be2:	eeb0 0a67 	vmov.f32	s0, s15
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <convert_period_to_freq>:

float convert_period_to_freq(float period) {
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 / period;
 8004bfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c06:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c50 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004c1c:	f7ff ff56 	bl	8004acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c20:	480c      	ldr	r0, [pc, #48]	; (8004c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c22:	490d      	ldr	r1, [pc, #52]	; (8004c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <LoopForever+0xe>)
  movs r3, #0
 8004c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c28:	e002      	b.n	8004c30 <LoopCopyDataInit>

08004c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c2e:	3304      	adds	r3, #4

08004c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c34:	d3f9      	bcc.n	8004c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c36:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c38:	4c0a      	ldr	r4, [pc, #40]	; (8004c64 <LoopForever+0x16>)
  movs r3, #0
 8004c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c3c:	e001      	b.n	8004c42 <LoopFillZerobss>

08004c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c40:	3204      	adds	r2, #4

08004c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c44:	d3fb      	bcc.n	8004c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c46:	f004 f959 	bl	8008efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c4a:	f7fe feff 	bl	8003a4c <main>

08004c4e <LoopForever>:

LoopForever:
    b LoopForever
 8004c4e:	e7fe      	b.n	8004c4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c50:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c58:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8004c5c:	08009b68 	.word	0x08009b68
  ldr r2, =_sbss
 8004c60:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8004c64:	20000480 	.word	0x20000480

08004c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c68:	e7fe      	b.n	8004c68 <ADC1_2_IRQHandler>
	...

08004c6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c70:	4b08      	ldr	r3, [pc, #32]	; (8004c94 <HAL_Init+0x28>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <HAL_Init+0x28>)
 8004c76:	f043 0310 	orr.w	r3, r3, #16
 8004c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c7c:	2003      	movs	r0, #3
 8004c7e:	f000 ff97 	bl	8005bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c82:	200f      	movs	r0, #15
 8004c84:	f000 f808 	bl	8004c98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c88:	f7ff fc5a 	bl	8004540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40022000 	.word	0x40022000

08004c98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ca0:	4b12      	ldr	r3, [pc, #72]	; (8004cec <HAL_InitTick+0x54>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_InitTick+0x58>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 ffbd 	bl	8005c36 <HAL_SYSTICK_Config>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00e      	b.n	8004ce4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b0f      	cmp	r3, #15
 8004cca:	d80a      	bhi.n	8004ce2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ccc:	2200      	movs	r2, #0
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cd4:	f000 ff77 	bl	8005bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004cd8:	4a06      	ldr	r2, [pc, #24]	; (8004cf4 <HAL_InitTick+0x5c>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e000      	b.n	8004ce4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000034 	.word	0x20000034
 8004cf0:	2000003c 	.word	0x2000003c
 8004cf4:	20000038 	.word	0x20000038

08004cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_IncTick+0x20>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <HAL_IncTick+0x24>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4413      	add	r3, r2
 8004d08:	4a04      	ldr	r2, [pc, #16]	; (8004d1c <HAL_IncTick+0x24>)
 8004d0a:	6013      	str	r3, [r2, #0]
}
 8004d0c:	bf00      	nop
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	2000003c 	.word	0x2000003c
 8004d1c:	2000047c 	.word	0x2000047c

08004d20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return uwTick;  
 8004d24:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <HAL_GetTick+0x14>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	2000047c 	.word	0x2000047c

08004d38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d40:	f7ff ffee 	bl	8004d20 <HAL_GetTick>
 8004d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d50:	d005      	beq.n	8004d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d52:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <HAL_Delay+0x44>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004d5e:	bf00      	nop
 8004d60:	f7ff ffde 	bl	8004d20 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d8f7      	bhi.n	8004d60 <HAL_Delay+0x28>
  {
  }
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	2000003c 	.word	0x2000003c

08004d80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b09a      	sub	sp, #104	; 0x68
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e1c9      	b.n	8005134 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d176      	bne.n	8004ea0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d152      	bne.n	8004e60 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7ff fbd7 	bl	8004588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d13b      	bne.n	8004e60 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fd87 	bl	80058fc <ADC_Disable>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d12f      	bne.n	8004e60 <HAL_ADC_Init+0xe0>
 8004e00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d12b      	bne.n	8004e60 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004e10:	f023 0302 	bic.w	r3, r3, #2
 8004e14:	f043 0202 	orr.w	r2, r3, #2
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e2a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004e3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004e3c:	4b86      	ldr	r3, [pc, #536]	; (8005058 <HAL_ADC_Init+0x2d8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a86      	ldr	r2, [pc, #536]	; (800505c <HAL_ADC_Init+0x2dc>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	0c9a      	lsrs	r2, r3, #18
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e52:	e002      	b.n	8004e5a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f9      	bne.n	8004e54 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7c:	d110      	bne.n	8004ea0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f023 0312 	bic.w	r3, r3, #18
 8004e86:	f043 0210 	orr.w	r2, r3, #16
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 8136 	bne.w	800511a <HAL_ADC_Init+0x39a>
 8004eae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f040 8131 	bne.w	800511a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f040 8129 	bne.w	800511a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ed0:	f043 0202 	orr.w	r2, r3, #2
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ee0:	d004      	beq.n	8004eec <HAL_ADC_Init+0x16c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a5e      	ldr	r2, [pc, #376]	; (8005060 <HAL_ADC_Init+0x2e0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <HAL_ADC_Init+0x170>
 8004eec:	4b5d      	ldr	r3, [pc, #372]	; (8005064 <HAL_ADC_Init+0x2e4>)
 8004eee:	e000      	b.n	8004ef2 <HAL_ADC_Init+0x172>
 8004ef0:	4b5d      	ldr	r3, [pc, #372]	; (8005068 <HAL_ADC_Init+0x2e8>)
 8004ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004efc:	d102      	bne.n	8004f04 <HAL_ADC_Init+0x184>
 8004efe:	4b58      	ldr	r3, [pc, #352]	; (8005060 <HAL_ADC_Init+0x2e0>)
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e01a      	b.n	8004f3a <HAL_ADC_Init+0x1ba>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a55      	ldr	r2, [pc, #340]	; (8005060 <HAL_ADC_Init+0x2e0>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d103      	bne.n	8004f16 <HAL_ADC_Init+0x196>
 8004f0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e011      	b.n	8004f3a <HAL_ADC_Init+0x1ba>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a54      	ldr	r2, [pc, #336]	; (800506c <HAL_ADC_Init+0x2ec>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d102      	bne.n	8004f26 <HAL_ADC_Init+0x1a6>
 8004f20:	4b53      	ldr	r3, [pc, #332]	; (8005070 <HAL_ADC_Init+0x2f0>)
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e009      	b.n	8004f3a <HAL_ADC_Init+0x1ba>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a51      	ldr	r2, [pc, #324]	; (8005070 <HAL_ADC_Init+0x2f0>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d102      	bne.n	8004f36 <HAL_ADC_Init+0x1b6>
 8004f30:	4b4e      	ldr	r3, [pc, #312]	; (800506c <HAL_ADC_Init+0x2ec>)
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	e001      	b.n	8004f3a <HAL_ADC_Init+0x1ba>
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d108      	bne.n	8004f5a <HAL_ADC_Init+0x1da>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_ADC_Init+0x1da>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_ADC_Init+0x1dc>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d11c      	bne.n	8004f9a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004f60:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_ADC_Init+0x202>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_ADC_Init+0x202>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <HAL_ADC_Init+0x204>
 8004f82:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	431a      	orrs	r2, r3
 8004f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f98:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	7e5b      	ldrb	r3, [r3, #25]
 8004f9e:	035b      	lsls	r3, r3, #13
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fa4:	2a01      	cmp	r2, #1
 8004fa6:	d002      	beq.n	8004fae <HAL_ADC_Init+0x22e>
 8004fa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fac:	e000      	b.n	8004fb0 <HAL_ADC_Init+0x230>
 8004fae:	2200      	movs	r2, #0
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d11b      	bne.n	8005006 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7e5b      	ldrb	r3, [r3, #25]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	045a      	lsls	r2, r3, #17
 8004fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fe8:	e00d      	b.n	8005006 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ff2:	f043 0220 	orr.w	r2, r3, #32
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	2b01      	cmp	r3, #1
 800500c:	d03a      	beq.n	8005084 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a16      	ldr	r2, [pc, #88]	; (800506c <HAL_ADC_Init+0x2ec>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d004      	beq.n	8005022 <HAL_ADC_Init+0x2a2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <HAL_ADC_Init+0x2f0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d128      	bne.n	8005074 <HAL_ADC_Init+0x2f4>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800502a:	d012      	beq.n	8005052 <HAL_ADC_Init+0x2d2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005034:	d00a      	beq.n	800504c <HAL_ADC_Init+0x2cc>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800503e:	d002      	beq.n	8005046 <HAL_ADC_Init+0x2c6>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	e018      	b.n	8005078 <HAL_ADC_Init+0x2f8>
 8005046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800504a:	e015      	b.n	8005078 <HAL_ADC_Init+0x2f8>
 800504c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005050:	e012      	b.n	8005078 <HAL_ADC_Init+0x2f8>
 8005052:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005056:	e00f      	b.n	8005078 <HAL_ADC_Init+0x2f8>
 8005058:	20000034 	.word	0x20000034
 800505c:	431bde83 	.word	0x431bde83
 8005060:	50000100 	.word	0x50000100
 8005064:	50000300 	.word	0x50000300
 8005068:	50000700 	.word	0x50000700
 800506c:	50000400 	.word	0x50000400
 8005070:	50000500 	.word	0x50000500
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800507c:	4313      	orrs	r3, r2
 800507e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005080:	4313      	orrs	r3, r2
 8005082:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b00      	cmp	r3, #0
 8005090:	d114      	bne.n	80050bc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a0:	f023 0302 	bic.w	r3, r3, #2
 80050a4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	7e1b      	ldrb	r3, [r3, #24]
 80050aa:	039a      	lsls	r2, r3, #14
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	4313      	orrs	r3, r2
 80050b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050b8:	4313      	orrs	r3, r2
 80050ba:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <HAL_ADC_Init+0x3bc>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6812      	ldr	r2, [r2, #0]
 80050ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80050cc:	430b      	orrs	r3, r1
 80050ce:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d10c      	bne.n	80050f2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	f023 010f 	bic.w	r1, r3, #15
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	1e5a      	subs	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
 80050f0:	e007      	b.n	8005102 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 020f 	bic.w	r2, r2, #15
 8005100:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	f023 0303 	bic.w	r3, r3, #3
 8005110:	f043 0201 	orr.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	641a      	str	r2, [r3, #64]	; 0x40
 8005118:	e00a      	b.n	8005130 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f023 0312 	bic.w	r3, r3, #18
 8005122:	f043 0210 	orr.w	r2, r3, #16
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800512a:	2301      	movs	r3, #1
 800512c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005130:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005134:	4618      	mov	r0, r3
 8005136:	3768      	adds	r7, #104	; 0x68
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	fff0c007 	.word	0xfff0c007

08005140 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005140:	b480      	push	{r7}
 8005142:	b09b      	sub	sp, #108	; 0x6c
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d101      	bne.n	8005162 <HAL_ADC_ConfigChannel+0x22>
 800515e:	2302      	movs	r3, #2
 8005160:	e2ca      	b.n	80056f8 <HAL_ADC_ConfigChannel+0x5b8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	f040 82ae 	bne.w	80056d6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b04      	cmp	r3, #4
 8005180:	d81c      	bhi.n	80051bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	461a      	mov	r2, r3
 8005196:	231f      	movs	r3, #31
 8005198:	4093      	lsls	r3, r2
 800519a:	43db      	mvns	r3, r3
 800519c:	4019      	ands	r1, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4613      	mov	r3, r2
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4413      	add	r3, r2
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa00 f203 	lsl.w	r2, r0, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
 80051ba:	e063      	b.n	8005284 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	2b09      	cmp	r3, #9
 80051c2:	d81e      	bhi.n	8005202 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	4413      	add	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	3b1e      	subs	r3, #30
 80051d8:	221f      	movs	r2, #31
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	4019      	ands	r1, r3
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	3b1e      	subs	r3, #30
 80051f4:	fa00 f203 	lsl.w	r2, r0, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	635a      	str	r2, [r3, #52]	; 0x34
 8005200:	e040      	b.n	8005284 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b0e      	cmp	r3, #14
 8005208:	d81e      	bhi.n	8005248 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	3b3c      	subs	r3, #60	; 0x3c
 800521e:	221f      	movs	r2, #31
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	43db      	mvns	r3, r3
 8005226:	4019      	ands	r1, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	4613      	mov	r3, r2
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	4413      	add	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	3b3c      	subs	r3, #60	; 0x3c
 800523a:	fa00 f203 	lsl.w	r2, r0, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	639a      	str	r2, [r3, #56]	; 0x38
 8005246:	e01d      	b.n	8005284 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	3b5a      	subs	r3, #90	; 0x5a
 800525c:	221f      	movs	r2, #31
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	4019      	ands	r1, r3
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	4613      	mov	r3, r2
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4413      	add	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	3b5a      	subs	r3, #90	; 0x5a
 8005278:	fa00 f203 	lsl.w	r2, r0, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 80e5 	bne.w	800545e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b09      	cmp	r3, #9
 800529a:	d91c      	bls.n	80052d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6999      	ldr	r1, [r3, #24]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4613      	mov	r3, r2
 80052a8:	005b      	lsls	r3, r3, #1
 80052aa:	4413      	add	r3, r2
 80052ac:	3b1e      	subs	r3, #30
 80052ae:	2207      	movs	r2, #7
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	4019      	ands	r1, r3
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6898      	ldr	r0, [r3, #8]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	4413      	add	r3, r2
 80052c6:	3b1e      	subs	r3, #30
 80052c8:	fa00 f203 	lsl.w	r2, r0, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	619a      	str	r2, [r3, #24]
 80052d4:	e019      	b.n	800530a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6959      	ldr	r1, [r3, #20]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	2207      	movs	r2, #7
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	4019      	ands	r1, r3
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	6898      	ldr	r0, [r3, #8]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	4413      	add	r3, r2
 80052fe:	fa00 f203 	lsl.w	r2, r0, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	3b01      	subs	r3, #1
 8005328:	2b03      	cmp	r3, #3
 800532a:	d84f      	bhi.n	80053cc <HAL_ADC_ConfigChannel+0x28c>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <HAL_ADC_ConfigChannel+0x1f4>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005345 	.word	0x08005345
 8005338:	08005367 	.word	0x08005367
 800533c:	08005389 	.word	0x08005389
 8005340:	080053ab 	.word	0x080053ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800534a:	4b9a      	ldr	r3, [pc, #616]	; (80055b4 <HAL_ADC_ConfigChannel+0x474>)
 800534c:	4013      	ands	r3, r2
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	6812      	ldr	r2, [r2, #0]
 8005352:	0691      	lsls	r1, r2, #26
 8005354:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005356:	430a      	orrs	r2, r1
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005362:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005364:	e07e      	b.n	8005464 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800536c:	4b91      	ldr	r3, [pc, #580]	; (80055b4 <HAL_ADC_ConfigChannel+0x474>)
 800536e:	4013      	ands	r3, r2
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	0691      	lsls	r1, r2, #26
 8005376:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005378:	430a      	orrs	r2, r1
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005384:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005386:	e06d      	b.n	8005464 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800538e:	4b89      	ldr	r3, [pc, #548]	; (80055b4 <HAL_ADC_ConfigChannel+0x474>)
 8005390:	4013      	ands	r3, r2
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	0691      	lsls	r1, r2, #26
 8005398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800539a:	430a      	orrs	r2, r1
 800539c:	431a      	orrs	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80053a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80053a8:	e05c      	b.n	8005464 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80053b0:	4b80      	ldr	r3, [pc, #512]	; (80055b4 <HAL_ADC_ConfigChannel+0x474>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	0691      	lsls	r1, r2, #26
 80053ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053bc:	430a      	orrs	r2, r1
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80053c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80053ca:	e04b      	b.n	8005464 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	069b      	lsls	r3, r3, #26
 80053dc:	429a      	cmp	r2, r3
 80053de:	d107      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	069b      	lsls	r3, r3, #26
 8005400:	429a      	cmp	r2, r3
 8005402:	d107      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005412:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	069b      	lsls	r3, r3, #26
 8005424:	429a      	cmp	r2, r3
 8005426:	d107      	bne.n	8005438 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005436:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800543e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	069b      	lsls	r3, r3, #26
 8005448:	429a      	cmp	r2, r3
 800544a:	d10a      	bne.n	8005462 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800545a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800545c:	e001      	b.n	8005462 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <HAL_ADC_ConfigChannel+0x324>
      break;
 8005462:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b01      	cmp	r3, #1
 8005470:	d108      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x344>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x344>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_ADC_ConfigChannel+0x346>
 8005484:	2300      	movs	r3, #0
 8005486:	2b00      	cmp	r3, #0
 8005488:	f040 8130 	bne.w	80056ec <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d00f      	beq.n	80054b4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2201      	movs	r2, #1
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	43da      	mvns	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	400a      	ands	r2, r1
 80054ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80054b2:	e049      	b.n	8005548 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2201      	movs	r2, #1
 80054c2:	409a      	lsls	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b09      	cmp	r3, #9
 80054d4:	d91c      	bls.n	8005510 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6999      	ldr	r1, [r3, #24]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	3b1b      	subs	r3, #27
 80054e8:	2207      	movs	r2, #7
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	4019      	ands	r1, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6898      	ldr	r0, [r3, #8]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	3b1b      	subs	r3, #27
 8005502:	fa00 f203 	lsl.w	r2, r0, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	619a      	str	r2, [r3, #24]
 800550e:	e01b      	b.n	8005548 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6959      	ldr	r1, [r3, #20]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	4613      	mov	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	2207      	movs	r2, #7
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	4019      	ands	r1, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6898      	ldr	r0, [r3, #8]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	4613      	mov	r3, r2
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4413      	add	r3, r2
 800553c:	fa00 f203 	lsl.w	r2, r0, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005550:	d004      	beq.n	800555c <HAL_ADC_ConfigChannel+0x41c>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_ADC_ConfigChannel+0x478>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d101      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x420>
 800555c:	4b17      	ldr	r3, [pc, #92]	; (80055bc <HAL_ADC_ConfigChannel+0x47c>)
 800555e:	e000      	b.n	8005562 <HAL_ADC_ConfigChannel+0x422>
 8005560:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <HAL_ADC_ConfigChannel+0x480>)
 8005562:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b10      	cmp	r3, #16
 800556a:	d105      	bne.n	8005578 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800556c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005574:	2b00      	cmp	r3, #0
 8005576:	d015      	beq.n	80055a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800557c:	2b11      	cmp	r3, #17
 800557e:	d105      	bne.n	800558c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005590:	2b12      	cmp	r3, #18
 8005592:	f040 80ab 	bne.w	80056ec <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f040 80a4 	bne.w	80056ec <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ac:	d10a      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x484>
 80055ae:	4b02      	ldr	r3, [pc, #8]	; (80055b8 <HAL_ADC_ConfigChannel+0x478>)
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e022      	b.n	80055fa <HAL_ADC_ConfigChannel+0x4ba>
 80055b4:	83fff000 	.word	0x83fff000
 80055b8:	50000100 	.word	0x50000100
 80055bc:	50000300 	.word	0x50000300
 80055c0:	50000700 	.word	0x50000700
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a4e      	ldr	r2, [pc, #312]	; (8005704 <HAL_ADC_ConfigChannel+0x5c4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d103      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x496>
 80055ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80055d2:	60fb      	str	r3, [r7, #12]
 80055d4:	e011      	b.n	80055fa <HAL_ADC_ConfigChannel+0x4ba>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a4b      	ldr	r2, [pc, #300]	; (8005708 <HAL_ADC_ConfigChannel+0x5c8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d102      	bne.n	80055e6 <HAL_ADC_ConfigChannel+0x4a6>
 80055e0:	4b4a      	ldr	r3, [pc, #296]	; (800570c <HAL_ADC_ConfigChannel+0x5cc>)
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	e009      	b.n	80055fa <HAL_ADC_ConfigChannel+0x4ba>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a48      	ldr	r2, [pc, #288]	; (800570c <HAL_ADC_ConfigChannel+0x5cc>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d102      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x4b6>
 80055f0:	4b45      	ldr	r3, [pc, #276]	; (8005708 <HAL_ADC_ConfigChannel+0x5c8>)
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e001      	b.n	80055fa <HAL_ADC_ConfigChannel+0x4ba>
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d108      	bne.n	800561a <HAL_ADC_ConfigChannel+0x4da>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x4da>
 8005616:	2301      	movs	r3, #1
 8005618:	e000      	b.n	800561c <HAL_ADC_ConfigChannel+0x4dc>
 800561a:	2300      	movs	r3, #0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d150      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005620:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b01      	cmp	r3, #1
 8005630:	d107      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x502>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_ADC_ConfigChannel+0x502>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <HAL_ADC_ConfigChannel+0x504>
 8005642:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005644:	2b00      	cmp	r3, #0
 8005646:	d13c      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b10      	cmp	r3, #16
 800564e:	d11d      	bne.n	800568c <HAL_ADC_ConfigChannel+0x54c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005658:	d118      	bne.n	800568c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800565a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005664:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005666:	4b2a      	ldr	r3, [pc, #168]	; (8005710 <HAL_ADC_ConfigChannel+0x5d0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a2a      	ldr	r2, [pc, #168]	; (8005714 <HAL_ADC_ConfigChannel+0x5d4>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	0c9a      	lsrs	r2, r3, #18
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800567c:	e002      	b.n	8005684 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3b01      	subs	r3, #1
 8005682:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f9      	bne.n	800567e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800568a:	e02e      	b.n	80056ea <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b11      	cmp	r3, #17
 8005692:	d10b      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x56c>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800569c:	d106      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800569e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80056a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80056aa:	e01e      	b.n	80056ea <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b12      	cmp	r3, #18
 80056b2:	d11a      	bne.n	80056ea <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80056b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80056bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056be:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80056c0:	e013      	b.n	80056ea <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f043 0220 	orr.w	r2, r3, #32
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80056d4:	e00a      	b.n	80056ec <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80056e8:	e000      	b.n	80056ec <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80056ea:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80056f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	376c      	adds	r7, #108	; 0x6c
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	50000100 	.word	0x50000100
 8005708:	50000400 	.word	0x50000400
 800570c:	50000500 	.word	0x50000500
 8005710:	20000034 	.word	0x20000034
 8005714:	431bde83 	.word	0x431bde83

08005718 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005718:	b480      	push	{r7}
 800571a:	b099      	sub	sp, #100	; 0x64
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005730:	d102      	bne.n	8005738 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8005732:	4b6d      	ldr	r3, [pc, #436]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	e01a      	b.n	800576e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a6a      	ldr	r2, [pc, #424]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d103      	bne.n	800574a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8005742:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	e011      	b.n	800576e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a67      	ldr	r2, [pc, #412]	; (80058ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d102      	bne.n	800575a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005754:	4b66      	ldr	r3, [pc, #408]	; (80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	e009      	b.n	800576e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a64      	ldr	r2, [pc, #400]	; (80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d102      	bne.n	800576a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005764:	4b61      	ldr	r3, [pc, #388]	; (80058ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005766:	60bb      	str	r3, [r7, #8]
 8005768:	e001      	b.n	800576e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0b0      	b.n	80058da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005782:	2302      	movs	r3, #2
 8005784:	e0a9      	b.n	80058da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	f040 808d 	bne.w	80058b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 8086 	bne.w	80058b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057b4:	d004      	beq.n	80057c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a4b      	ldr	r2, [pc, #300]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80057c0:	4b4c      	ldr	r3, [pc, #304]	; (80058f4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80057c2:	e000      	b.n	80057c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80057c4:	4b4c      	ldr	r3, [pc, #304]	; (80058f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80057c6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d040      	beq.n	8005852 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80057d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	6859      	ldr	r1, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057e2:	035b      	lsls	r3, r3, #13
 80057e4:	430b      	orrs	r3, r1
 80057e6:	431a      	orrs	r2, r3
 80057e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d108      	bne.n	800580c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005808:	2301      	movs	r3, #1
 800580a:	e000      	b.n	800580e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800580c:	2300      	movs	r3, #0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d15c      	bne.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b01      	cmp	r3, #1
 800581c:	d107      	bne.n	800582e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800582e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005830:	2b00      	cmp	r3, #0
 8005832:	d14b      	bne.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800583c:	f023 030f 	bic.w	r3, r3, #15
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	6811      	ldr	r1, [r2, #0]
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	6892      	ldr	r2, [r2, #8]
 8005848:	430a      	orrs	r2, r1
 800584a:	431a      	orrs	r2, r3
 800584c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800584e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005850:	e03c      	b.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800585a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800585c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	2b01      	cmp	r3, #1
 800586a:	d108      	bne.n	800587e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d123      	bne.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 0303 	and.w	r3, r3, #3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d107      	bne.n	80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80058a0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d112      	bne.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80058a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80058ae:	f023 030f 	bic.w	r3, r3, #15
 80058b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058b4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80058b6:	e009      	b.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	f043 0220 	orr.w	r2, r3, #32
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80058ca:	e000      	b.n	80058ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80058cc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80058d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80058da:	4618      	mov	r0, r3
 80058dc:	3764      	adds	r7, #100	; 0x64
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	50000100 	.word	0x50000100
 80058ec:	50000400 	.word	0x50000400
 80058f0:	50000500 	.word	0x50000500
 80058f4:	50000300 	.word	0x50000300
 80058f8:	50000700 	.word	0x50000700

080058fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b01      	cmp	r3, #1
 8005914:	d108      	bne.n	8005928 <ADC_Disable+0x2c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <ADC_Disable+0x2c>
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <ADC_Disable+0x2e>
 8005928:	2300      	movs	r3, #0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d047      	beq.n	80059be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 030d 	and.w	r3, r3, #13
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10f      	bne.n	800595c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0202 	orr.w	r2, r2, #2
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2203      	movs	r2, #3
 8005952:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005954:	f7ff f9e4 	bl	8004d20 <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800595a:	e029      	b.n	80059b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005960:	f043 0210 	orr.w	r2, r3, #16
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	f043 0201 	orr.w	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e023      	b.n	80059c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005978:	f7ff f9d2 	bl	8004d20 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d914      	bls.n	80059b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10d      	bne.n	80059b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	f043 0210 	orr.w	r2, r3, #16
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a4:	f043 0201 	orr.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e007      	b.n	80059c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d0dc      	beq.n	8005978 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <__NVIC_SetPriorityGrouping+0x44>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059e4:	4013      	ands	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059fa:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <__NVIC_SetPriorityGrouping+0x44>)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	60d3      	str	r3, [r2, #12]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a14:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <__NVIC_GetPriorityGrouping+0x18>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	f003 0307 	and.w	r3, r3, #7
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	db0b      	blt.n	8005a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	f003 021f 	and.w	r2, r3, #31
 8005a44:	4907      	ldr	r1, [pc, #28]	; (8005a64 <__NVIC_EnableIRQ+0x38>)
 8005a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	e000e100 	.word	0xe000e100

08005a68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	db12      	blt.n	8005aa0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a7a:	79fb      	ldrb	r3, [r7, #7]
 8005a7c:	f003 021f 	and.w	r2, r3, #31
 8005a80:	490a      	ldr	r1, [pc, #40]	; (8005aac <__NVIC_DisableIRQ+0x44>)
 8005a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	2001      	movs	r0, #1
 8005a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a8e:	3320      	adds	r3, #32
 8005a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a94:	f3bf 8f4f 	dsb	sy
}
 8005a98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a9a:	f3bf 8f6f 	isb	sy
}
 8005a9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	e000e100 	.word	0xe000e100

08005ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	6039      	str	r1, [r7, #0]
 8005aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db0a      	blt.n	8005ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	490c      	ldr	r1, [pc, #48]	; (8005afc <__NVIC_SetPriority+0x4c>)
 8005aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad8:	e00a      	b.n	8005af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4908      	ldr	r1, [pc, #32]	; (8005b00 <__NVIC_SetPriority+0x50>)
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	f003 030f 	and.w	r3, r3, #15
 8005ae6:	3b04      	subs	r3, #4
 8005ae8:	0112      	lsls	r2, r2, #4
 8005aea:	b2d2      	uxtb	r2, r2
 8005aec:	440b      	add	r3, r1
 8005aee:	761a      	strb	r2, [r3, #24]
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	e000e100 	.word	0xe000e100
 8005b00:	e000ed00 	.word	0xe000ed00

08005b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b089      	sub	sp, #36	; 0x24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f1c3 0307 	rsb	r3, r3, #7
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	bf28      	it	cs
 8005b22:	2304      	movcs	r3, #4
 8005b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	d902      	bls.n	8005b34 <NVIC_EncodePriority+0x30>
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3b03      	subs	r3, #3
 8005b32:	e000      	b.n	8005b36 <NVIC_EncodePriority+0x32>
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	401a      	ands	r2, r3
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	fa01 f303 	lsl.w	r3, r1, r3
 8005b56:	43d9      	mvns	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	4313      	orrs	r3, r2
         );
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3724      	adds	r7, #36	; 0x24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
	...

08005b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b7c:	d301      	bcc.n	8005b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e00f      	b.n	8005ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b82:	4a0a      	ldr	r2, [pc, #40]	; (8005bac <SysTick_Config+0x40>)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b8a:	210f      	movs	r1, #15
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b90:	f7ff ff8e 	bl	8005ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <SysTick_Config+0x40>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b9a:	4b04      	ldr	r3, [pc, #16]	; (8005bac <SysTick_Config+0x40>)
 8005b9c:	2207      	movs	r2, #7
 8005b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	e000e010 	.word	0xe000e010

08005bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7ff ff05 	bl	80059c8 <__NVIC_SetPriorityGrouping>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	4603      	mov	r3, r0
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd8:	f7ff ff1a 	bl	8005a10 <__NVIC_GetPriorityGrouping>
 8005bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	6978      	ldr	r0, [r7, #20]
 8005be4:	f7ff ff8e 	bl	8005b04 <NVIC_EncodePriority>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff5d 	bl	8005ab0 <__NVIC_SetPriority>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b082      	sub	sp, #8
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	4603      	mov	r3, r0
 8005c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ff0d 	bl	8005a2c <__NVIC_EnableIRQ>
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	4603      	mov	r3, r0
 8005c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ff1d 	bl	8005a68 <__NVIC_DisableIRQ>
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ff94 	bl	8005b6c <SysTick_Config>
 8005c44:	4603      	mov	r3, r0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e037      	b.n	8005cd4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005c7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f8b4 	bl	8005e24 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}  
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d024      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x72>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01f      	beq.n	8005d4e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d107      	bne.n	8005d2c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0204 	bic.w	r2, r2, #4
 8005d2a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d34:	2104      	movs	r1, #4
 8005d36:	fa01 f202 	lsl.w	r2, r1, r2
 8005d3a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d06a      	beq.n	8005e1a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005d4c:	e065      	b.n	8005e1a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	2202      	movs	r2, #2
 8005d54:	409a      	lsls	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02c      	beq.n	8005db8 <HAL_DMA_IRQHandler+0xdc>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d027      	beq.n	8005db8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10b      	bne.n	8005d8e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 020a 	bic.w	r2, r2, #10
 8005d84:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	2102      	movs	r1, #2
 8005d98:	fa01 f202 	lsl.w	r2, r1, r2
 8005d9c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d035      	beq.n	8005e1a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005db6:	e030      	b.n	8005e1a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	409a      	lsls	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d028      	beq.n	8005e1a <HAL_DMA_IRQHandler+0x13e>
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d023      	beq.n	8005e1a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 020e 	bic.w	r2, r2, #14
 8005de0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dea:	2101      	movs	r1, #1
 8005dec:	fa01 f202 	lsl.w	r2, r1, r2
 8005df0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d004      	beq.n	8005e1a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
    }
  }
}  
 8005e18:	e7ff      	b.n	8005e1a <HAL_DMA_IRQHandler+0x13e>
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
	...

08005e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	461a      	mov	r2, r3
 8005e32:	4b14      	ldr	r3, [pc, #80]	; (8005e84 <DMA_CalcBaseAndBitshift+0x60>)
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d80f      	bhi.n	8005e58 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <DMA_CalcBaseAndBitshift+0x64>)
 8005e40:	4413      	add	r3, r2
 8005e42:	4a12      	ldr	r2, [pc, #72]	; (8005e8c <DMA_CalcBaseAndBitshift+0x68>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	009a      	lsls	r2, r3, #2
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a0f      	ldr	r2, [pc, #60]	; (8005e90 <DMA_CalcBaseAndBitshift+0x6c>)
 8005e54:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005e56:	e00e      	b.n	8005e76 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <DMA_CalcBaseAndBitshift+0x70>)
 8005e60:	4413      	add	r3, r2
 8005e62:	4a0a      	ldr	r2, [pc, #40]	; (8005e8c <DMA_CalcBaseAndBitshift+0x68>)
 8005e64:	fba2 2303 	umull	r2, r3, r2, r3
 8005e68:	091b      	lsrs	r3, r3, #4
 8005e6a:	009a      	lsls	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <DMA_CalcBaseAndBitshift+0x74>)
 8005e74:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40020407 	.word	0x40020407
 8005e88:	bffdfff8 	.word	0xbffdfff8
 8005e8c:	cccccccd 	.word	0xcccccccd
 8005e90:	40020000 	.word	0x40020000
 8005e94:	bffdfbf8 	.word	0xbffdfbf8
 8005e98:	40020400 	.word	0x40020400

08005e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eaa:	e154      	b.n	8006156 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb8:	4013      	ands	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8146 	beq.w	8006150 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d005      	beq.n	8005edc <HAL_GPIO_Init+0x40>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d130      	bne.n	8005f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43db      	mvns	r3, r3
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f12:	2201      	movs	r2, #1
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	091b      	lsrs	r3, r3, #4
 8005f28:	f003 0201 	and.w	r2, r3, #1
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d017      	beq.n	8005f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	2203      	movs	r2, #3
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43db      	mvns	r3, r3
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	4013      	ands	r3, r2
 8005f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	689a      	ldr	r2, [r3, #8]
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f003 0303 	and.w	r3, r3, #3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d123      	bne.n	8005fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	08da      	lsrs	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3208      	adds	r2, #8
 8005f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	220f      	movs	r2, #15
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	08da      	lsrs	r2, r3, #3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3208      	adds	r2, #8
 8005fc8:	6939      	ldr	r1, [r7, #16]
 8005fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	2203      	movs	r2, #3
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 0203 	and.w	r2, r3, #3
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	005b      	lsls	r3, r3, #1
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 80a0 	beq.w	8006150 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006010:	4b58      	ldr	r3, [pc, #352]	; (8006174 <HAL_GPIO_Init+0x2d8>)
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	4a57      	ldr	r2, [pc, #348]	; (8006174 <HAL_GPIO_Init+0x2d8>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	6193      	str	r3, [r2, #24]
 800601c:	4b55      	ldr	r3, [pc, #340]	; (8006174 <HAL_GPIO_Init+0x2d8>)
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	60bb      	str	r3, [r7, #8]
 8006026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006028:	4a53      	ldr	r2, [pc, #332]	; (8006178 <HAL_GPIO_Init+0x2dc>)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	089b      	lsrs	r3, r3, #2
 800602e:	3302      	adds	r3, #2
 8006030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	220f      	movs	r2, #15
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4013      	ands	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006052:	d019      	beq.n	8006088 <HAL_GPIO_Init+0x1ec>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a49      	ldr	r2, [pc, #292]	; (800617c <HAL_GPIO_Init+0x2e0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d013      	beq.n	8006084 <HAL_GPIO_Init+0x1e8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a48      	ldr	r2, [pc, #288]	; (8006180 <HAL_GPIO_Init+0x2e4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00d      	beq.n	8006080 <HAL_GPIO_Init+0x1e4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a47      	ldr	r2, [pc, #284]	; (8006184 <HAL_GPIO_Init+0x2e8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <HAL_GPIO_Init+0x1e0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a46      	ldr	r2, [pc, #280]	; (8006188 <HAL_GPIO_Init+0x2ec>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d101      	bne.n	8006078 <HAL_GPIO_Init+0x1dc>
 8006074:	2304      	movs	r3, #4
 8006076:	e008      	b.n	800608a <HAL_GPIO_Init+0x1ee>
 8006078:	2305      	movs	r3, #5
 800607a:	e006      	b.n	800608a <HAL_GPIO_Init+0x1ee>
 800607c:	2303      	movs	r3, #3
 800607e:	e004      	b.n	800608a <HAL_GPIO_Init+0x1ee>
 8006080:	2302      	movs	r3, #2
 8006082:	e002      	b.n	800608a <HAL_GPIO_Init+0x1ee>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <HAL_GPIO_Init+0x1ee>
 8006088:	2300      	movs	r3, #0
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	f002 0203 	and.w	r2, r2, #3
 8006090:	0092      	lsls	r2, r2, #2
 8006092:	4093      	lsls	r3, r2
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800609a:	4937      	ldr	r1, [pc, #220]	; (8006178 <HAL_GPIO_Init+0x2dc>)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	089b      	lsrs	r3, r3, #2
 80060a0:	3302      	adds	r3, #2
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060a8:	4b38      	ldr	r3, [pc, #224]	; (800618c <HAL_GPIO_Init+0x2f0>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4013      	ands	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80060cc:	4a2f      	ldr	r2, [pc, #188]	; (800618c <HAL_GPIO_Init+0x2f0>)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <HAL_GPIO_Init+0x2f0>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	43db      	mvns	r3, r3
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4013      	ands	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80060f6:	4a25      	ldr	r2, [pc, #148]	; (800618c <HAL_GPIO_Init+0x2f0>)
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060fc:	4b23      	ldr	r3, [pc, #140]	; (800618c <HAL_GPIO_Init+0x2f0>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	43db      	mvns	r3, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006120:	4a1a      	ldr	r2, [pc, #104]	; (800618c <HAL_GPIO_Init+0x2f0>)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006126:	4b19      	ldr	r3, [pc, #100]	; (800618c <HAL_GPIO_Init+0x2f0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	43db      	mvns	r3, r3
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4013      	ands	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <HAL_GPIO_Init+0x2f0>)
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	3301      	adds	r3, #1
 8006154:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	fa22 f303 	lsr.w	r3, r2, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f aea3 	bne.w	8005eac <HAL_GPIO_Init+0x10>
  }
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	40021000 	.word	0x40021000
 8006178:	40010000 	.word	0x40010000
 800617c:	48000400 	.word	0x48000400
 8006180:	48000800 	.word	0x48000800
 8006184:	48000c00 	.word	0x48000c00
 8006188:	48001000 	.word	0x48001000
 800618c:	40010400 	.word	0x40010400

08006190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	887b      	ldrh	r3, [r7, #2]
 80061a2:	4013      	ands	r3, r2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
 80061ac:	e001      	b.n	80061b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80061ca:	4b08      	ldr	r3, [pc, #32]	; (80061ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061cc:	695a      	ldr	r2, [r3, #20]
 80061ce:	88fb      	ldrh	r3, [r7, #6]
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d006      	beq.n	80061e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061d6:	4a05      	ldr	r2, [pc, #20]	; (80061ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7fd fb90 	bl	8003904 <HAL_GPIO_EXTI_Callback>
  }
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40010400 	.word	0x40010400

080061f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e081      	b.n	8006306 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fe faa4 	bl	8004764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2224      	movs	r2, #36	; 0x24
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0201 	bic.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006240:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006250:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d107      	bne.n	800626a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006266:	609a      	str	r2, [r3, #8]
 8006268:	e006      	b.n	8006278 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006276:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d104      	bne.n	800628a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006288:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1a      	ldr	r2, [r3, #32]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
	...

08006310 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	461a      	mov	r2, r3
 800631c:	460b      	mov	r3, r1
 800631e:	817b      	strh	r3, [r7, #10]
 8006320:	4613      	mov	r3, r2
 8006322:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b20      	cmp	r3, #32
 800632e:	f040 80da 	bne.w	80064e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_I2C_Master_Transmit+0x30>
 800633c:	2302      	movs	r3, #2
 800633e:	e0d3      	b.n	80064e8 <HAL_I2C_Master_Transmit+0x1d8>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006348:	f7fe fcea 	bl	8004d20 <HAL_GetTick>
 800634c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	2319      	movs	r3, #25
 8006354:	2201      	movs	r2, #1
 8006356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fbe0 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e0be      	b.n	80064e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2221      	movs	r2, #33	; 0x21
 800636e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2210      	movs	r2, #16
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	893a      	ldrh	r2, [r7, #8]
 800638a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	2bff      	cmp	r3, #255	; 0xff
 800639a:	d90e      	bls.n	80063ba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	22ff      	movs	r2, #255	; 0xff
 80063a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	8979      	ldrh	r1, [r7, #10]
 80063aa:	4b51      	ldr	r3, [pc, #324]	; (80064f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fd6e 	bl	8006e94 <I2C_TransferConfig>
 80063b8:	e06c      	b.n	8006494 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	8979      	ldrh	r1, [r7, #10]
 80063cc:	4b48      	ldr	r3, [pc, #288]	; (80064f0 <HAL_I2C_Master_Transmit+0x1e0>)
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fd5d 	bl	8006e94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80063da:	e05b      	b.n	8006494 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063dc:	697a      	ldr	r2, [r7, #20]
 80063de:	6a39      	ldr	r1, [r7, #32]
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fbec 	bl	8006bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e07b      	b.n	80064e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	781a      	ldrb	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d034      	beq.n	8006494 <HAL_I2C_Master_Transmit+0x184>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642e:	2b00      	cmp	r3, #0
 8006430:	d130      	bne.n	8006494 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	2200      	movs	r2, #0
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fb6f 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e04d      	b.n	80064e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	d90e      	bls.n	8006474 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	22ff      	movs	r2, #255	; 0xff
 800645a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006460:	b2da      	uxtb	r2, r3
 8006462:	8979      	ldrh	r1, [r7, #10]
 8006464:	2300      	movs	r3, #0
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fd11 	bl	8006e94 <I2C_TransferConfig>
 8006472:	e00f      	b.n	8006494 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006482:	b2da      	uxtb	r2, r3
 8006484:	8979      	ldrh	r1, [r7, #10]
 8006486:	2300      	movs	r3, #0
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fd00 	bl	8006e94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d19e      	bne.n	80063dc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	6a39      	ldr	r1, [r7, #32]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fbd2 	bl	8006c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e01a      	b.n	80064e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2220      	movs	r2, #32
 80064b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6859      	ldr	r1, [r3, #4]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80064c6:	400b      	ands	r3, r1
 80064c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	80002000 	.word	0x80002000
 80064f4:	fe00e800 	.word	0xfe00e800

080064f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b088      	sub	sp, #32
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	4608      	mov	r0, r1
 8006502:	4611      	mov	r1, r2
 8006504:	461a      	mov	r2, r3
 8006506:	4603      	mov	r3, r0
 8006508:	817b      	strh	r3, [r7, #10]
 800650a:	460b      	mov	r3, r1
 800650c:	813b      	strh	r3, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b20      	cmp	r3, #32
 800651c:	f040 80f9 	bne.w	8006712 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_I2C_Mem_Write+0x34>
 8006526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006528:	2b00      	cmp	r3, #0
 800652a:	d105      	bne.n	8006538 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006532:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0ed      	b.n	8006714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800653e:	2b01      	cmp	r3, #1
 8006540:	d101      	bne.n	8006546 <HAL_I2C_Mem_Write+0x4e>
 8006542:	2302      	movs	r3, #2
 8006544:	e0e6      	b.n	8006714 <HAL_I2C_Mem_Write+0x21c>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800654e:	f7fe fbe7 	bl	8004d20 <HAL_GetTick>
 8006552:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	2319      	movs	r3, #25
 800655a:	2201      	movs	r2, #1
 800655c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 fadd 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0d1      	b.n	8006714 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2221      	movs	r2, #33	; 0x21
 8006574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2240      	movs	r2, #64	; 0x40
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a3a      	ldr	r2, [r7, #32]
 800658a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006598:	88f8      	ldrh	r0, [r7, #6]
 800659a:	893a      	ldrh	r2, [r7, #8]
 800659c:	8979      	ldrh	r1, [r7, #10]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	4603      	mov	r3, r0
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f9ed 	bl	8006988 <I2C_RequestMemoryWrite>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e0a9      	b.n	8006714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2bff      	cmp	r3, #255	; 0xff
 80065c8:	d90e      	bls.n	80065e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	22ff      	movs	r2, #255	; 0xff
 80065ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	8979      	ldrh	r1, [r7, #10]
 80065d8:	2300      	movs	r3, #0
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fc57 	bl	8006e94 <I2C_TransferConfig>
 80065e6:	e00f      	b.n	8006608 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	8979      	ldrh	r1, [r7, #10]
 80065fa:	2300      	movs	r3, #0
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 fc46 	bl	8006e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fad6 	bl	8006bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e07b      	b.n	8006714 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	781a      	ldrb	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006636:	b29b      	uxth	r3, r3
 8006638:	3b01      	subs	r3, #1
 800663a:	b29a      	uxth	r2, r3
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006650:	b29b      	uxth	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d034      	beq.n	80066c0 <HAL_I2C_Mem_Write+0x1c8>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d130      	bne.n	80066c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	2200      	movs	r2, #0
 8006666:	2180      	movs	r1, #128	; 0x80
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fa59 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e04d      	b.n	8006714 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667c:	b29b      	uxth	r3, r3
 800667e:	2bff      	cmp	r3, #255	; 0xff
 8006680:	d90e      	bls.n	80066a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	22ff      	movs	r2, #255	; 0xff
 8006686:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668c:	b2da      	uxtb	r2, r3
 800668e:	8979      	ldrh	r1, [r7, #10]
 8006690:	2300      	movs	r3, #0
 8006692:	9300      	str	r3, [sp, #0]
 8006694:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 fbfb 	bl	8006e94 <I2C_TransferConfig>
 800669e:	e00f      	b.n	80066c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	8979      	ldrh	r1, [r7, #10]
 80066b2:	2300      	movs	r3, #0
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f000 fbea 	bl	8006e94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d19e      	bne.n	8006608 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f000 fabc 	bl	8006c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e01a      	b.n	8006714 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2220      	movs	r2, #32
 80066e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6859      	ldr	r1, [r3, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	4b0a      	ldr	r3, [pc, #40]	; (800671c <HAL_I2C_Mem_Write+0x224>)
 80066f2:	400b      	ands	r3, r1
 80066f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	e000      	b.n	8006714 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006712:	2302      	movs	r3, #2
  }
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	fe00e800 	.word	0xfe00e800

08006720 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af02      	add	r7, sp, #8
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	4608      	mov	r0, r1
 800672a:	4611      	mov	r1, r2
 800672c:	461a      	mov	r2, r3
 800672e:	4603      	mov	r3, r0
 8006730:	817b      	strh	r3, [r7, #10]
 8006732:	460b      	mov	r3, r1
 8006734:	813b      	strh	r3, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b20      	cmp	r3, #32
 8006744:	f040 80fd 	bne.w	8006942 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_I2C_Mem_Read+0x34>
 800674e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0f1      	b.n	8006944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_I2C_Mem_Read+0x4e>
 800676a:	2302      	movs	r3, #2
 800676c:	e0ea      	b.n	8006944 <HAL_I2C_Mem_Read+0x224>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006776:	f7fe fad3 	bl	8004d20 <HAL_GetTick>
 800677a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2319      	movs	r3, #25
 8006782:	2201      	movs	r2, #1
 8006784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 f9c9 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0d5      	b.n	8006944 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2222      	movs	r2, #34	; 0x22
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2240      	movs	r2, #64	; 0x40
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067c0:	88f8      	ldrh	r0, [r7, #6]
 80067c2:	893a      	ldrh	r2, [r7, #8]
 80067c4:	8979      	ldrh	r1, [r7, #10]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	9301      	str	r3, [sp, #4]
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	4603      	mov	r3, r0
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f92d 	bl	8006a30 <I2C_RequestMemoryRead>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0ad      	b.n	8006944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2bff      	cmp	r3, #255	; 0xff
 80067f0:	d90e      	bls.n	8006810 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	22ff      	movs	r2, #255	; 0xff
 80067f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	8979      	ldrh	r1, [r7, #10]
 8006800:	4b52      	ldr	r3, [pc, #328]	; (800694c <HAL_I2C_Mem_Read+0x22c>)
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 fb43 	bl	8006e94 <I2C_TransferConfig>
 800680e:	e00f      	b.n	8006830 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	b2da      	uxtb	r2, r3
 8006820:	8979      	ldrh	r1, [r7, #10]
 8006822:	4b4a      	ldr	r3, [pc, #296]	; (800694c <HAL_I2C_Mem_Read+0x22c>)
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fb32 	bl	8006e94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	2200      	movs	r2, #0
 8006838:	2104      	movs	r1, #4
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f970 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e07c      	b.n	8006944 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d034      	beq.n	80068f0 <HAL_I2C_Mem_Read+0x1d0>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	d130      	bne.n	80068f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	2200      	movs	r2, #0
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f941 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e04d      	b.n	8006944 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	d90e      	bls.n	80068d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	22ff      	movs	r2, #255	; 0xff
 80068b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	8979      	ldrh	r1, [r7, #10]
 80068c0:	2300      	movs	r3, #0
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068c8:	68f8      	ldr	r0, [r7, #12]
 80068ca:	f000 fae3 	bl	8006e94 <I2C_TransferConfig>
 80068ce:	e00f      	b.n	80068f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	8979      	ldrh	r1, [r7, #10]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fad2 	bl	8006e94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d19a      	bne.n	8006830 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f9a4 	bl	8006c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e01a      	b.n	8006944 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2220      	movs	r2, #32
 8006914:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6859      	ldr	r1, [r3, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_I2C_Mem_Read+0x230>)
 8006922:	400b      	ands	r3, r1
 8006924:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800693e:	2300      	movs	r3, #0
 8006940:	e000      	b.n	8006944 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006942:	2302      	movs	r3, #2
  }
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	80002400 	.word	0x80002400
 8006950:	fe00e800 	.word	0xfe00e800

08006954 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	68f9      	ldr	r1, [r7, #12]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	4798      	blx	r3
  }
}
 8006980:	bf00      	nop
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	461a      	mov	r2, r3
 8006996:	4603      	mov	r3, r0
 8006998:	817b      	strh	r3, [r7, #10]
 800699a:	460b      	mov	r3, r1
 800699c:	813b      	strh	r3, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	8979      	ldrh	r1, [r7, #10]
 80069a8:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <I2C_RequestMemoryWrite+0xa4>)
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fa6f 	bl	8006e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f8ff 	bl	8006bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e02c      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d105      	bne.n	80069dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069d0:	893b      	ldrh	r3, [r7, #8]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	629a      	str	r2, [r3, #40]	; 0x28
 80069da:	e015      	b.n	8006a08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069dc:	893b      	ldrh	r3, [r7, #8]
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f8e5 	bl	8006bbe <I2C_WaitOnTXISFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e012      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069fe:	893b      	ldrh	r3, [r7, #8]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f884 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	80002000 	.word	0x80002000

08006a30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	817b      	strh	r3, [r7, #10]
 8006a42:	460b      	mov	r3, r1
 8006a44:	813b      	strh	r3, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	8979      	ldrh	r1, [r7, #10]
 8006a50:	4b20      	ldr	r3, [pc, #128]	; (8006ad4 <I2C_RequestMemoryRead+0xa4>)
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa1c 	bl	8006e94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	69b9      	ldr	r1, [r7, #24]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f8ac 	bl	8006bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e02c      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d105      	bne.n	8006a82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a76:	893b      	ldrh	r3, [r7, #8]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a80:	e015      	b.n	8006aae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a82:	893b      	ldrh	r3, [r7, #8]
 8006a84:	0a1b      	lsrs	r3, r3, #8
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	69b9      	ldr	r1, [r7, #24]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f892 	bl	8006bbe <I2C_WaitOnTXISFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e012      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2140      	movs	r1, #64	; 0x40
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f831 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	80002000 	.word	0x80002000

08006ad8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d103      	bne.n	8006af6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d007      	beq.n	8006b14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	619a      	str	r2, [r3, #24]
  }
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b30:	e031      	b.n	8006b96 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b38:	d02d      	beq.n	8006b96 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3a:	f7fe f8f1 	bl	8004d20 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d302      	bcc.n	8006b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d122      	bne.n	8006b96 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	4013      	ands	r3, r2
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	bf0c      	ite	eq
 8006b60:	2301      	moveq	r3, #1
 8006b62:	2300      	movne	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	79fb      	ldrb	r3, [r7, #7]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d113      	bne.n	8006b96 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	f043 0220 	orr.w	r2, r3, #32
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e00f      	b.n	8006bb6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	bf0c      	ite	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	2300      	movne	r3, #0
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	461a      	mov	r2, r3
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d0be      	beq.n	8006b32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bca:	e033      	b.n	8006c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f87f 	bl	8006cd4 <I2C_IsErrorOccurred>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e031      	b.n	8006c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006be6:	d025      	beq.n	8006c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be8:	f7fe f89a 	bl	8004d20 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d302      	bcc.n	8006bfe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d11a      	bne.n	8006c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d013      	beq.n	8006c34 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c10:	f043 0220 	orr.w	r2, r3, #32
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e007      	b.n	8006c44 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d1c4      	bne.n	8006bcc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c58:	e02f      	b.n	8006cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f838 	bl	8006cd4 <I2C_IsErrorOccurred>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e02d      	b.n	8006cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6e:	f7fe f857 	bl	8004d20 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d11a      	bne.n	8006cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d013      	beq.n	8006cba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	f043 0220 	orr.w	r2, r3, #32
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e007      	b.n	8006cca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d1c8      	bne.n	8006c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08a      	sub	sp, #40	; 0x28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d068      	beq.n	8006dd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2210      	movs	r2, #16
 8006d06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d08:	e049      	b.n	8006d9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d10:	d045      	beq.n	8006d9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d12:	f7fe f805 	bl	8004d20 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d302      	bcc.n	8006d28 <I2C_IsErrorOccurred+0x54>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d13a      	bne.n	8006d9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d4a:	d121      	bne.n	8006d90 <I2C_IsErrorOccurred+0xbc>
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d52:	d01d      	beq.n	8006d90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d54:	7cfb      	ldrb	r3, [r7, #19]
 8006d56:	2b20      	cmp	r3, #32
 8006d58:	d01a      	beq.n	8006d90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d6a:	f7fd ffd9 	bl	8004d20 <HAL_GetTick>
 8006d6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d70:	e00e      	b.n	8006d90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d72:	f7fd ffd5 	bl	8004d20 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	2b19      	cmp	r3, #25
 8006d7e:	d907      	bls.n	8006d90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	f043 0320 	orr.w	r3, r3, #32
 8006d86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006d8e:	e006      	b.n	8006d9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d1e9      	bne.n	8006d72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d003      	beq.n	8006db4 <I2C_IsErrorOccurred+0xe0>
 8006dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0aa      	beq.n	8006d0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d103      	bne.n	8006dc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	f043 0304 	orr.w	r3, r3, #4
 8006dca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	f043 0301 	orr.w	r3, r3, #1
 8006dea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	f043 0308 	orr.w	r3, r3, #8
 8006e0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	f043 0302 	orr.w	r3, r3, #2
 8006e2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01c      	beq.n	8006e82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7ff fe45 	bl	8006ad8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6859      	ldr	r1, [r3, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <I2C_IsErrorOccurred+0x1bc>)
 8006e5a:	400b      	ands	r3, r1
 8006e5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3728      	adds	r7, #40	; 0x28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	fe00e800 	.word	0xfe00e800

08006e94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	607b      	str	r3, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	817b      	strh	r3, [r7, #10]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ea6:	897b      	ldrh	r3, [r7, #10]
 8006ea8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eac:	7a7b      	ldrb	r3, [r7, #9]
 8006eae:	041b      	lsls	r3, r3, #16
 8006eb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ec2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	0d5b      	lsrs	r3, r3, #21
 8006ece:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ed2:	4b08      	ldr	r3, [pc, #32]	; (8006ef4 <I2C_TransferConfig+0x60>)
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	43db      	mvns	r3, r3
 8006ed8:	ea02 0103 	and.w	r1, r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	03ff63ff 	.word	0x03ff63ff

08006ef8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d138      	bne.n	8006f80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d101      	bne.n	8006f1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f18:	2302      	movs	r3, #2
 8006f1a:	e032      	b.n	8006f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2224      	movs	r2, #36	; 0x24
 8006f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0201 	bic.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b085      	sub	sp, #20
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d139      	bne.n	8007018 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d101      	bne.n	8006fb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fae:	2302      	movs	r3, #2
 8006fb0:	e033      	b.n	800701a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2224      	movs	r2, #36	; 0x24
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f022 0201 	bic.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006fe0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800702e:	af00      	add	r7, sp, #0
 8007030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007038:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800703a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800703e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	f001 b823 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800704e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 817d 	beq.w	800735e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007064:	4bbc      	ldr	r3, [pc, #752]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f003 030c 	and.w	r3, r3, #12
 800706c:	2b04      	cmp	r3, #4
 800706e:	d00c      	beq.n	800708a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007070:	4bb9      	ldr	r3, [pc, #740]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f003 030c 	and.w	r3, r3, #12
 8007078:	2b08      	cmp	r3, #8
 800707a:	d15c      	bne.n	8007136 <HAL_RCC_OscConfig+0x10e>
 800707c:	4bb6      	ldr	r3, [pc, #728]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007088:	d155      	bne.n	8007136 <HAL_RCC_OscConfig+0x10e>
 800708a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800708e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007092:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007096:	fa93 f3a3 	rbit	r3, r3
 800709a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800709e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070a2:	fab3 f383 	clz	r3, r3
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	f043 0301 	orr.w	r3, r3, #1
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d102      	bne.n	80070bc <HAL_RCC_OscConfig+0x94>
 80070b6:	4ba8      	ldr	r3, [pc, #672]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	e015      	b.n	80070e8 <HAL_RCC_OscConfig+0xc0>
 80070bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80070c8:	fa93 f3a3 	rbit	r3, r3
 80070cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80070d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80070d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80070dc:	fa93 f3a3 	rbit	r3, r3
 80070e0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80070e4:	4b9c      	ldr	r3, [pc, #624]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80070ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80070f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80070f4:	fa92 f2a2 	rbit	r2, r2
 80070f8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80070fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007100:	fab2 f282 	clz	r2, r2
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	f042 0220 	orr.w	r2, r2, #32
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	f002 021f 	and.w	r2, r2, #31
 8007110:	2101      	movs	r1, #1
 8007112:	fa01 f202 	lsl.w	r2, r1, r2
 8007116:	4013      	ands	r3, r2
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 811f 	beq.w	800735c <HAL_RCC_OscConfig+0x334>
 800711e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007122:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	f040 8116 	bne.w	800735c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f000 bfaf 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800713a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007146:	d106      	bne.n	8007156 <HAL_RCC_OscConfig+0x12e>
 8007148:	4b83      	ldr	r3, [pc, #524]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a82      	ldr	r2, [pc, #520]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 800714e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	e036      	b.n	80071c4 <HAL_RCC_OscConfig+0x19c>
 8007156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800715a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10c      	bne.n	8007180 <HAL_RCC_OscConfig+0x158>
 8007166:	4b7c      	ldr	r3, [pc, #496]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a7b      	ldr	r2, [pc, #492]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 800716c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	4b79      	ldr	r3, [pc, #484]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a78      	ldr	r2, [pc, #480]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 8007178:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	e021      	b.n	80071c4 <HAL_RCC_OscConfig+0x19c>
 8007180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007184:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007190:	d10c      	bne.n	80071ac <HAL_RCC_OscConfig+0x184>
 8007192:	4b71      	ldr	r3, [pc, #452]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a70      	ldr	r2, [pc, #448]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 8007198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	4b6e      	ldr	r3, [pc, #440]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a6d      	ldr	r2, [pc, #436]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80071a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	e00b      	b.n	80071c4 <HAL_RCC_OscConfig+0x19c>
 80071ac:	4b6a      	ldr	r3, [pc, #424]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a69      	ldr	r2, [pc, #420]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80071b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	4b67      	ldr	r3, [pc, #412]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a66      	ldr	r2, [pc, #408]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80071be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071c4:	4b64      	ldr	r3, [pc, #400]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	f023 020f 	bic.w	r2, r3, #15
 80071cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	495f      	ldr	r1, [pc, #380]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d059      	beq.n	80072a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ee:	f7fd fd97 	bl	8004d20 <HAL_GetTick>
 80071f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071f6:	e00a      	b.n	800720e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f8:	f7fd fd92 	bl	8004d20 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b64      	cmp	r3, #100	; 0x64
 8007206:	d902      	bls.n	800720e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	f000 bf43 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>
 800720e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007212:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007216:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800721a:	fa93 f3a3 	rbit	r3, r3
 800721e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007222:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007226:	fab3 f383 	clz	r3, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	095b      	lsrs	r3, r3, #5
 800722e:	b2db      	uxtb	r3, r3
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b01      	cmp	r3, #1
 8007238:	d102      	bne.n	8007240 <HAL_RCC_OscConfig+0x218>
 800723a:	4b47      	ldr	r3, [pc, #284]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	e015      	b.n	800726c <HAL_RCC_OscConfig+0x244>
 8007240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007244:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007248:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800724c:	fa93 f3a3 	rbit	r3, r3
 8007250:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007254:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007258:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800725c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007260:	fa93 f3a3 	rbit	r3, r3
 8007264:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007268:	4b3b      	ldr	r3, [pc, #236]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007270:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007274:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007278:	fa92 f2a2 	rbit	r2, r2
 800727c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007280:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007284:	fab2 f282 	clz	r2, r2
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	f042 0220 	orr.w	r2, r2, #32
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	f002 021f 	and.w	r2, r2, #31
 8007294:	2101      	movs	r1, #1
 8007296:	fa01 f202 	lsl.w	r2, r1, r2
 800729a:	4013      	ands	r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0ab      	beq.n	80071f8 <HAL_RCC_OscConfig+0x1d0>
 80072a0:	e05d      	b.n	800735e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a2:	f7fd fd3d 	bl	8004d20 <HAL_GetTick>
 80072a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072aa:	e00a      	b.n	80072c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072ac:	f7fd fd38 	bl	8004d20 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b64      	cmp	r3, #100	; 0x64
 80072ba:	d902      	bls.n	80072c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	f000 bee9 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>
 80072c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80072ce:	fa93 f3a3 	rbit	r3, r3
 80072d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80072d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d102      	bne.n	80072f4 <HAL_RCC_OscConfig+0x2cc>
 80072ee:	4b1a      	ldr	r3, [pc, #104]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	e015      	b.n	8007320 <HAL_RCC_OscConfig+0x2f8>
 80072f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072f8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007300:	fa93 f3a3 	rbit	r3, r3
 8007304:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800730c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007310:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007314:	fa93 f3a3 	rbit	r3, r3
 8007318:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800731c:	4b0e      	ldr	r3, [pc, #56]	; (8007358 <HAL_RCC_OscConfig+0x330>)
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007324:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007328:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800732c:	fa92 f2a2 	rbit	r2, r2
 8007330:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007334:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007338:	fab2 f282 	clz	r2, r2
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	f042 0220 	orr.w	r2, r2, #32
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	f002 021f 	and.w	r2, r2, #31
 8007348:	2101      	movs	r1, #1
 800734a:	fa01 f202 	lsl.w	r2, r1, r2
 800734e:	4013      	ands	r3, r2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1ab      	bne.n	80072ac <HAL_RCC_OscConfig+0x284>
 8007354:	e003      	b.n	800735e <HAL_RCC_OscConfig+0x336>
 8007356:	bf00      	nop
 8007358:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800735c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800735e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 817d 	beq.w	800766e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007374:	4ba6      	ldr	r3, [pc, #664]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f003 030c 	and.w	r3, r3, #12
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007380:	4ba3      	ldr	r3, [pc, #652]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f003 030c 	and.w	r3, r3, #12
 8007388:	2b08      	cmp	r3, #8
 800738a:	d172      	bne.n	8007472 <HAL_RCC_OscConfig+0x44a>
 800738c:	4ba0      	ldr	r3, [pc, #640]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d16c      	bne.n	8007472 <HAL_RCC_OscConfig+0x44a>
 8007398:	2302      	movs	r3, #2
 800739a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80073a2:	fa93 f3a3 	rbit	r3, r3
 80073a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80073aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ae:	fab3 f383 	clz	r3, r3
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f043 0301 	orr.w	r3, r3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d102      	bne.n	80073c8 <HAL_RCC_OscConfig+0x3a0>
 80073c2:	4b93      	ldr	r3, [pc, #588]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	e013      	b.n	80073f0 <HAL_RCC_OscConfig+0x3c8>
 80073c8:	2302      	movs	r3, #2
 80073ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80073d2:	fa93 f3a3 	rbit	r3, r3
 80073d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80073da:	2302      	movs	r3, #2
 80073dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80073e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80073e4:	fa93 f3a3 	rbit	r3, r3
 80073e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80073ec:	4b88      	ldr	r3, [pc, #544]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2202      	movs	r2, #2
 80073f2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80073f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80073fa:	fa92 f2a2 	rbit	r2, r2
 80073fe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007402:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007406:	fab2 f282 	clz	r2, r2
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	f042 0220 	orr.w	r2, r2, #32
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	f002 021f 	and.w	r2, r2, #31
 8007416:	2101      	movs	r1, #1
 8007418:	fa01 f202 	lsl.w	r2, r1, r2
 800741c:	4013      	ands	r3, r2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <HAL_RCC_OscConfig+0x410>
 8007422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007426:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d002      	beq.n	8007438 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f000 be2e 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007438:	4b75      	ldr	r3, [pc, #468]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007444:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	21f8      	movs	r1, #248	; 0xf8
 800744e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007452:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007456:	fa91 f1a1 	rbit	r1, r1
 800745a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800745e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007462:	fab1 f181 	clz	r1, r1
 8007466:	b2c9      	uxtb	r1, r1
 8007468:	408b      	lsls	r3, r1
 800746a:	4969      	ldr	r1, [pc, #420]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 800746c:	4313      	orrs	r3, r2
 800746e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007470:	e0fd      	b.n	800766e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8088 	beq.w	8007594 <HAL_RCC_OscConfig+0x56c>
 8007484:	2301      	movs	r3, #1
 8007486:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800748e:	fa93 f3a3 	rbit	r3, r3
 8007492:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007496:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800749a:	fab3 f383 	clz	r3, r3
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	461a      	mov	r2, r3
 80074ac:	2301      	movs	r3, #1
 80074ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b0:	f7fd fc36 	bl	8004d20 <HAL_GetTick>
 80074b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074b8:	e00a      	b.n	80074d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074ba:	f7fd fc31 	bl	8004d20 <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d902      	bls.n	80074d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	f000 bde2 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>
 80074d0:	2302      	movs	r3, #2
 80074d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80074da:	fa93 f3a3 	rbit	r3, r3
 80074de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80074e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e6:	fab3 f383 	clz	r3, r3
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	f043 0301 	orr.w	r3, r3, #1
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d102      	bne.n	8007500 <HAL_RCC_OscConfig+0x4d8>
 80074fa:	4b45      	ldr	r3, [pc, #276]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	e013      	b.n	8007528 <HAL_RCC_OscConfig+0x500>
 8007500:	2302      	movs	r3, #2
 8007502:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007506:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800750a:	fa93 f3a3 	rbit	r3, r3
 800750e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007512:	2302      	movs	r3, #2
 8007514:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007518:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800751c:	fa93 f3a3 	rbit	r3, r3
 8007520:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007524:	4b3a      	ldr	r3, [pc, #232]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	2202      	movs	r2, #2
 800752a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800752e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007532:	fa92 f2a2 	rbit	r2, r2
 8007536:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800753a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800753e:	fab2 f282 	clz	r2, r2
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	f042 0220 	orr.w	r2, r2, #32
 8007548:	b2d2      	uxtb	r2, r2
 800754a:	f002 021f 	and.w	r2, r2, #31
 800754e:	2101      	movs	r1, #1
 8007550:	fa01 f202 	lsl.w	r2, r1, r2
 8007554:	4013      	ands	r3, r2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0af      	beq.n	80074ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800755a:	4b2d      	ldr	r3, [pc, #180]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007566:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	21f8      	movs	r1, #248	; 0xf8
 8007570:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007574:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007578:	fa91 f1a1 	rbit	r1, r1
 800757c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007580:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007584:	fab1 f181 	clz	r1, r1
 8007588:	b2c9      	uxtb	r1, r1
 800758a:	408b      	lsls	r3, r1
 800758c:	4920      	ldr	r1, [pc, #128]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 800758e:	4313      	orrs	r3, r2
 8007590:	600b      	str	r3, [r1, #0]
 8007592:	e06c      	b.n	800766e <HAL_RCC_OscConfig+0x646>
 8007594:	2301      	movs	r3, #1
 8007596:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800759a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800759e:	fa93 f3a3 	rbit	r3, r3
 80075a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80075a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075aa:	fab3 f383 	clz	r3, r3
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80075b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	461a      	mov	r2, r3
 80075bc:	2300      	movs	r3, #0
 80075be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c0:	f7fd fbae 	bl	8004d20 <HAL_GetTick>
 80075c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075c8:	e00a      	b.n	80075e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075ca:	f7fd fba9 	bl	8004d20 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d902      	bls.n	80075e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	f000 bd5a 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>
 80075e0:	2302      	movs	r3, #2
 80075e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075ea:	fa93 f3a3 	rbit	r3, r3
 80075ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80075f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075f6:	fab3 f383 	clz	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	f043 0301 	orr.w	r3, r3, #1
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b01      	cmp	r3, #1
 8007608:	d104      	bne.n	8007614 <HAL_RCC_OscConfig+0x5ec>
 800760a:	4b01      	ldr	r3, [pc, #4]	; (8007610 <HAL_RCC_OscConfig+0x5e8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	e015      	b.n	800763c <HAL_RCC_OscConfig+0x614>
 8007610:	40021000 	.word	0x40021000
 8007614:	2302      	movs	r3, #2
 8007616:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800761a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800761e:	fa93 f3a3 	rbit	r3, r3
 8007622:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007626:	2302      	movs	r3, #2
 8007628:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800762c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007630:	fa93 f3a3 	rbit	r3, r3
 8007634:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007638:	4bc8      	ldr	r3, [pc, #800]	; (800795c <HAL_RCC_OscConfig+0x934>)
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	2202      	movs	r2, #2
 800763e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007642:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007646:	fa92 f2a2 	rbit	r2, r2
 800764a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800764e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007652:	fab2 f282 	clz	r2, r2
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	f042 0220 	orr.w	r2, r2, #32
 800765c:	b2d2      	uxtb	r2, r2
 800765e:	f002 021f 	and.w	r2, r2, #31
 8007662:	2101      	movs	r1, #1
 8007664:	fa01 f202 	lsl.w	r2, r1, r2
 8007668:	4013      	ands	r3, r2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1ad      	bne.n	80075ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800766e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007672:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0308 	and.w	r3, r3, #8
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 8110 	beq.w	80078a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d079      	beq.n	8007788 <HAL_RCC_OscConfig+0x760>
 8007694:	2301      	movs	r3, #1
 8007696:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800769e:	fa93 f3a3 	rbit	r3, r3
 80076a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80076a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076aa:	fab3 f383 	clz	r3, r3
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	4bab      	ldr	r3, [pc, #684]	; (8007960 <HAL_RCC_OscConfig+0x938>)
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	461a      	mov	r2, r3
 80076ba:	2301      	movs	r3, #1
 80076bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076be:	f7fd fb2f 	bl	8004d20 <HAL_GetTick>
 80076c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076c6:	e00a      	b.n	80076de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076c8:	f7fd fb2a 	bl	8004d20 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d902      	bls.n	80076de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	f000 bcdb 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>
 80076de:	2302      	movs	r3, #2
 80076e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076e8:	fa93 f3a3 	rbit	r3, r3
 80076ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80076f8:	2202      	movs	r2, #2
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007700:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	fa93 f2a3 	rbit	r2, r3
 800770a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800770e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	2202      	movs	r2, #2
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	fa93 f2a3 	rbit	r2, r3
 800772e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007732:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007736:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007738:	4b88      	ldr	r3, [pc, #544]	; (800795c <HAL_RCC_OscConfig+0x934>)
 800773a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800773c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007740:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007744:	2102      	movs	r1, #2
 8007746:	6019      	str	r1, [r3, #0]
 8007748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800774c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	fa93 f1a3 	rbit	r1, r3
 8007756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800775a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800775e:	6019      	str	r1, [r3, #0]
  return result;
 8007760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007764:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	fab3 f383 	clz	r3, r3
 800776e:	b2db      	uxtb	r3, r3
 8007770:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 031f 	and.w	r3, r3, #31
 800777a:	2101      	movs	r1, #1
 800777c:	fa01 f303 	lsl.w	r3, r1, r3
 8007780:	4013      	ands	r3, r2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0a0      	beq.n	80076c8 <HAL_RCC_OscConfig+0x6a0>
 8007786:	e08d      	b.n	80078a4 <HAL_RCC_OscConfig+0x87c>
 8007788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800778c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007790:	2201      	movs	r2, #1
 8007792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007798:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	fa93 f2a3 	rbit	r2, r3
 80077a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077aa:	601a      	str	r2, [r3, #0]
  return result;
 80077ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077b6:	fab3 f383 	clz	r3, r3
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	4b68      	ldr	r3, [pc, #416]	; (8007960 <HAL_RCC_OscConfig+0x938>)
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	461a      	mov	r2, r3
 80077c6:	2300      	movs	r3, #0
 80077c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077ca:	f7fd faa9 	bl	8004d20 <HAL_GetTick>
 80077ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077d2:	e00a      	b.n	80077ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077d4:	f7fd faa4 	bl	8004d20 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d902      	bls.n	80077ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	f000 bc55 	b.w	8008094 <HAL_RCC_OscConfig+0x106c>
 80077ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80077f2:	2202      	movs	r2, #2
 80077f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	fa93 f2a3 	rbit	r2, r3
 8007804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007808:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800780c:	601a      	str	r2, [r3, #0]
 800780e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007812:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007816:	2202      	movs	r2, #2
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800781e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	fa93 f2a3 	rbit	r2, r3
 8007828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800782c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800783a:	2202      	movs	r2, #2
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	fa93 f2a3 	rbit	r2, r3
 800784c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007850:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007854:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007856:	4b41      	ldr	r3, [pc, #260]	; (800795c <HAL_RCC_OscConfig+0x934>)
 8007858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800785a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800785e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007862:	2102      	movs	r1, #2
 8007864:	6019      	str	r1, [r3, #0]
 8007866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800786a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	fa93 f1a3 	rbit	r1, r3
 8007874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007878:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800787c:	6019      	str	r1, [r3, #0]
  return result;
 800787e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007882:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	fab3 f383 	clz	r3, r3
 800788c:	b2db      	uxtb	r3, r3
 800788e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 031f 	and.w	r3, r3, #31
 8007898:	2101      	movs	r1, #1
 800789a:	fa01 f303 	lsl.w	r3, r1, r3
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d197      	bne.n	80077d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 81a1 	beq.w	8007bfc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078c0:	4b26      	ldr	r3, [pc, #152]	; (800795c <HAL_RCC_OscConfig+0x934>)
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d116      	bne.n	80078fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078cc:	4b23      	ldr	r3, [pc, #140]	; (800795c <HAL_RCC_OscConfig+0x934>)
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	4a22      	ldr	r2, [pc, #136]	; (800795c <HAL_RCC_OscConfig+0x934>)
 80078d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d6:	61d3      	str	r3, [r2, #28]
 80078d8:	4b20      	ldr	r3, [pc, #128]	; (800795c <HAL_RCC_OscConfig+0x934>)
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80078e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078e4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80078f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078fa:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <HAL_RCC_OscConfig+0x93c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	2b00      	cmp	r3, #0
 8007904:	d11a      	bne.n	800793c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007906:	4b17      	ldr	r3, [pc, #92]	; (8007964 <HAL_RCC_OscConfig+0x93c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a16      	ldr	r2, [pc, #88]	; (8007964 <HAL_RCC_OscConfig+0x93c>)
 800790c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007910:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007912:	f7fd fa05 	bl	8004d20 <HAL_GetTick>
 8007916:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800791a:	e009      	b.n	8007930 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800791c:	f7fd fa00 	bl	8004d20 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b64      	cmp	r3, #100	; 0x64
 800792a:	d901      	bls.n	8007930 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e3b1      	b.n	8008094 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007930:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <HAL_RCC_OscConfig+0x93c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007938:	2b00      	cmp	r3, #0
 800793a:	d0ef      	beq.n	800791c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800793c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d10d      	bne.n	8007968 <HAL_RCC_OscConfig+0x940>
 800794c:	4b03      	ldr	r3, [pc, #12]	; (800795c <HAL_RCC_OscConfig+0x934>)
 800794e:	6a1b      	ldr	r3, [r3, #32]
 8007950:	4a02      	ldr	r2, [pc, #8]	; (800795c <HAL_RCC_OscConfig+0x934>)
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	6213      	str	r3, [r2, #32]
 8007958:	e03c      	b.n	80079d4 <HAL_RCC_OscConfig+0x9ac>
 800795a:	bf00      	nop
 800795c:	40021000 	.word	0x40021000
 8007960:	10908120 	.word	0x10908120
 8007964:	40007000 	.word	0x40007000
 8007968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800796c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10c      	bne.n	8007992 <HAL_RCC_OscConfig+0x96a>
 8007978:	4bc1      	ldr	r3, [pc, #772]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	4ac0      	ldr	r2, [pc, #768]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 800797e:	f023 0301 	bic.w	r3, r3, #1
 8007982:	6213      	str	r3, [r2, #32]
 8007984:	4bbe      	ldr	r3, [pc, #760]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 8007986:	6a1b      	ldr	r3, [r3, #32]
 8007988:	4abd      	ldr	r2, [pc, #756]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 800798a:	f023 0304 	bic.w	r3, r3, #4
 800798e:	6213      	str	r3, [r2, #32]
 8007990:	e020      	b.n	80079d4 <HAL_RCC_OscConfig+0x9ac>
 8007992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d10c      	bne.n	80079bc <HAL_RCC_OscConfig+0x994>
 80079a2:	4bb7      	ldr	r3, [pc, #732]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	4ab6      	ldr	r2, [pc, #728]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 80079a8:	f043 0304 	orr.w	r3, r3, #4
 80079ac:	6213      	str	r3, [r2, #32]
 80079ae:	4bb4      	ldr	r3, [pc, #720]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	4ab3      	ldr	r2, [pc, #716]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	6213      	str	r3, [r2, #32]
 80079ba:	e00b      	b.n	80079d4 <HAL_RCC_OscConfig+0x9ac>
 80079bc:	4bb0      	ldr	r3, [pc, #704]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	4aaf      	ldr	r2, [pc, #700]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 80079c2:	f023 0301 	bic.w	r3, r3, #1
 80079c6:	6213      	str	r3, [r2, #32]
 80079c8:	4bad      	ldr	r3, [pc, #692]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	4aac      	ldr	r2, [pc, #688]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 80079ce:	f023 0304 	bic.w	r3, r3, #4
 80079d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 8081 	beq.w	8007ae8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079e6:	f7fd f99b 	bl	8004d20 <HAL_GetTick>
 80079ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ee:	e00b      	b.n	8007a08 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f0:	f7fd f996 	bl	8004d20 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079fa:	1ad3      	subs	r3, r2, r3
 80079fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d901      	bls.n	8007a08 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e345      	b.n	8008094 <HAL_RCC_OscConfig+0x106c>
 8007a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007a10:	2202      	movs	r2, #2
 8007a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a18:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	fa93 f2a3 	rbit	r2, r3
 8007a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a34:	2202      	movs	r2, #2
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	fa93 f2a3 	rbit	r2, r3
 8007a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a4a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a4e:	601a      	str	r2, [r3, #0]
  return result;
 8007a50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a54:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a5a:	fab3 f383 	clz	r3, r3
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f043 0302 	orr.w	r3, r3, #2
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d102      	bne.n	8007a74 <HAL_RCC_OscConfig+0xa4c>
 8007a6e:	4b84      	ldr	r3, [pc, #528]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	e013      	b.n	8007a9c <HAL_RCC_OscConfig+0xa74>
 8007a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a84:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	fa93 f2a3 	rbit	r2, r3
 8007a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	4b79      	ldr	r3, [pc, #484]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007aa0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007aa4:	2102      	movs	r1, #2
 8007aa6:	6011      	str	r1, [r2, #0]
 8007aa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007aac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	fa92 f1a2 	rbit	r1, r2
 8007ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007aba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007abe:	6011      	str	r1, [r2, #0]
  return result;
 8007ac0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ac4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	fab2 f282 	clz	r2, r2
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ad4:	b2d2      	uxtb	r2, r2
 8007ad6:	f002 021f 	and.w	r2, r2, #31
 8007ada:	2101      	movs	r1, #1
 8007adc:	fa01 f202 	lsl.w	r2, r1, r2
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d084      	beq.n	80079f0 <HAL_RCC_OscConfig+0x9c8>
 8007ae6:	e07f      	b.n	8007be8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae8:	f7fd f91a 	bl	8004d20 <HAL_GetTick>
 8007aec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007af0:	e00b      	b.n	8007b0a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007af2:	f7fd f915 	bl	8004d20 <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e2c4      	b.n	8008094 <HAL_RCC_OscConfig+0x106c>
 8007b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b0e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007b12:	2202      	movs	r2, #2
 8007b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	fa93 f2a3 	rbit	r2, r3
 8007b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b28:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b32:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007b36:	2202      	movs	r2, #2
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	fa93 f2a3 	rbit	r2, r3
 8007b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b4c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007b50:	601a      	str	r2, [r3, #0]
  return result;
 8007b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b56:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007b5a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b5c:	fab3 f383 	clz	r3, r3
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	f043 0302 	orr.w	r3, r3, #2
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d102      	bne.n	8007b76 <HAL_RCC_OscConfig+0xb4e>
 8007b70:	4b43      	ldr	r3, [pc, #268]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	e013      	b.n	8007b9e <HAL_RCC_OscConfig+0xb76>
 8007b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007b7e:	2202      	movs	r2, #2
 8007b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b86:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	fa93 f2a3 	rbit	r2, r3
 8007b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b94:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007b98:	601a      	str	r2, [r3, #0]
 8007b9a:	4b39      	ldr	r3, [pc, #228]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ba2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007ba6:	2102      	movs	r1, #2
 8007ba8:	6011      	str	r1, [r2, #0]
 8007baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007bb2:	6812      	ldr	r2, [r2, #0]
 8007bb4:	fa92 f1a2 	rbit	r1, r2
 8007bb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bbc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007bc0:	6011      	str	r1, [r2, #0]
  return result;
 8007bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bc6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007bca:	6812      	ldr	r2, [r2, #0]
 8007bcc:	fab2 f282 	clz	r2, r2
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd6:	b2d2      	uxtb	r2, r2
 8007bd8:	f002 021f 	and.w	r2, r2, #31
 8007bdc:	2101      	movs	r1, #1
 8007bde:	fa01 f202 	lsl.w	r2, r1, r2
 8007be2:	4013      	ands	r3, r2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d184      	bne.n	8007af2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007be8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d105      	bne.n	8007bfc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bf0:	4b23      	ldr	r3, [pc, #140]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 8007bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bfa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 8242 	beq.w	8008092 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c0e:	4b1c      	ldr	r3, [pc, #112]	; (8007c80 <HAL_RCC_OscConfig+0xc58>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f003 030c 	and.w	r3, r3, #12
 8007c16:	2b08      	cmp	r3, #8
 8007c18:	f000 8213 	beq.w	8008042 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	f040 8162 	bne.w	8007ef2 <HAL_RCC_OscConfig+0xeca>
 8007c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c32:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007c36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c40:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	fa93 f2a3 	rbit	r2, r3
 8007c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c4e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007c52:	601a      	str	r2, [r3, #0]
  return result;
 8007c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c58:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007c5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c5e:	fab3 f383 	clz	r3, r3
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	461a      	mov	r2, r3
 8007c70:	2300      	movs	r3, #0
 8007c72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c74:	f7fd f854 	bl	8004d20 <HAL_GetTick>
 8007c78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c7c:	e00c      	b.n	8007c98 <HAL_RCC_OscConfig+0xc70>
 8007c7e:	bf00      	nop
 8007c80:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c84:	f7fd f84c 	bl	8004d20 <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d901      	bls.n	8007c98 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e1fd      	b.n	8008094 <HAL_RCC_OscConfig+0x106c>
 8007c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c9c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007ca0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007caa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	fa93 f2a3 	rbit	r2, r3
 8007cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cb8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007cbc:	601a      	str	r2, [r3, #0]
  return result;
 8007cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007cc6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cc8:	fab3 f383 	clz	r3, r3
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	095b      	lsrs	r3, r3, #5
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f043 0301 	orr.w	r3, r3, #1
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d102      	bne.n	8007ce2 <HAL_RCC_OscConfig+0xcba>
 8007cdc:	4bb0      	ldr	r3, [pc, #704]	; (8007fa0 <HAL_RCC_OscConfig+0xf78>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	e027      	b.n	8007d32 <HAL_RCC_OscConfig+0xd0a>
 8007ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ce6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	fa93 f2a3 	rbit	r2, r3
 8007cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d02:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d0c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	fa93 f2a3 	rbit	r2, r3
 8007d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	4b9c      	ldr	r3, [pc, #624]	; (8007fa0 <HAL_RCC_OscConfig+0xf78>)
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d36:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007d3a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007d3e:	6011      	str	r1, [r2, #0]
 8007d40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d44:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007d48:	6812      	ldr	r2, [r2, #0]
 8007d4a:	fa92 f1a2 	rbit	r1, r2
 8007d4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d52:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007d56:	6011      	str	r1, [r2, #0]
  return result;
 8007d58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d5c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007d60:	6812      	ldr	r2, [r2, #0]
 8007d62:	fab2 f282 	clz	r2, r2
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	f042 0220 	orr.w	r2, r2, #32
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	f002 021f 	and.w	r2, r2, #31
 8007d72:	2101      	movs	r1, #1
 8007d74:	fa01 f202 	lsl.w	r2, r1, r2
 8007d78:	4013      	ands	r3, r2
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d182      	bne.n	8007c84 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d7e:	4b88      	ldr	r3, [pc, #544]	; (8007fa0 <HAL_RCC_OscConfig+0xf78>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	497f      	ldr	r1, [pc, #508]	; (8007fa0 <HAL_RCC_OscConfig+0xf78>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	604b      	str	r3, [r1, #4]
 8007da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007daa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007dae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007db2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	fa93 f2a3 	rbit	r2, r3
 8007dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007dca:	601a      	str	r2, [r3, #0]
  return result;
 8007dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007dd4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dd6:	fab3 f383 	clz	r3, r3
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007de0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	461a      	mov	r2, r3
 8007de8:	2301      	movs	r3, #1
 8007dea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dec:	f7fc ff98 	bl	8004d20 <HAL_GetTick>
 8007df0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007df4:	e009      	b.n	8007e0a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007df6:	f7fc ff93 	bl	8004d20 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e144      	b.n	8008094 <HAL_RCC_OscConfig+0x106c>
 8007e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e1c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	fa93 f2a3 	rbit	r2, r3
 8007e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e2a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007e2e:	601a      	str	r2, [r3, #0]
  return result;
 8007e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e34:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007e38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e3a:	fab3 f383 	clz	r3, r3
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f043 0301 	orr.w	r3, r3, #1
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d102      	bne.n	8007e54 <HAL_RCC_OscConfig+0xe2c>
 8007e4e:	4b54      	ldr	r3, [pc, #336]	; (8007fa0 <HAL_RCC_OscConfig+0xf78>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	e027      	b.n	8007ea4 <HAL_RCC_OscConfig+0xe7c>
 8007e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e58:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e66:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	fa93 f2a3 	rbit	r2, r3
 8007e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e7e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	fa93 f2a3 	rbit	r2, r3
 8007e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	4b3f      	ldr	r3, [pc, #252]	; (8007fa0 <HAL_RCC_OscConfig+0xf78>)
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ea8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007eac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007eb0:	6011      	str	r1, [r2, #0]
 8007eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007eb6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	fa92 f1a2 	rbit	r1, r2
 8007ec0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ec4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007ec8:	6011      	str	r1, [r2, #0]
  return result;
 8007eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ece:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	fab2 f282 	clz	r2, r2
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	f042 0220 	orr.w	r2, r2, #32
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	f002 021f 	and.w	r2, r2, #31
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eea:	4013      	ands	r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d082      	beq.n	8007df6 <HAL_RCC_OscConfig+0xdce>
 8007ef0:	e0cf      	b.n	8008092 <HAL_RCC_OscConfig+0x106a>
 8007ef2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ef6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007efa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f04:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	fa93 f2a3 	rbit	r2, r3
 8007f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f12:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007f16:	601a      	str	r2, [r3, #0]
  return result;
 8007f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f1c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007f20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f22:	fab3 f383 	clz	r3, r3
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	461a      	mov	r2, r3
 8007f34:	2300      	movs	r3, #0
 8007f36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f38:	f7fc fef2 	bl	8004d20 <HAL_GetTick>
 8007f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f40:	e009      	b.n	8007f56 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f42:	f7fc feed 	bl	8004d20 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	d901      	bls.n	8007f56 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e09e      	b.n	8008094 <HAL_RCC_OscConfig+0x106c>
 8007f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f5a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	fa93 f2a3 	rbit	r2, r3
 8007f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f76:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007f7a:	601a      	str	r2, [r3, #0]
  return result;
 8007f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f80:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007f84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f86:	fab3 f383 	clz	r3, r3
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	095b      	lsrs	r3, r3, #5
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	f043 0301 	orr.w	r3, r3, #1
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d104      	bne.n	8007fa4 <HAL_RCC_OscConfig+0xf7c>
 8007f9a:	4b01      	ldr	r3, [pc, #4]	; (8007fa0 <HAL_RCC_OscConfig+0xf78>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	e029      	b.n	8007ff4 <HAL_RCC_OscConfig+0xfcc>
 8007fa0:	40021000 	.word	0x40021000
 8007fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fa8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	fa93 f2a3 	rbit	r2, r3
 8007fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fc4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fdc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	fa93 f2a3 	rbit	r2, r3
 8007fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	; (80080a0 <HAL_RCC_OscConfig+0x1078>)
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ff8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007ffc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008000:	6011      	str	r1, [r2, #0]
 8008002:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008006:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	fa92 f1a2 	rbit	r1, r2
 8008010:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008014:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008018:	6011      	str	r1, [r2, #0]
  return result;
 800801a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800801e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	fab2 f282 	clz	r2, r2
 8008028:	b2d2      	uxtb	r2, r2
 800802a:	f042 0220 	orr.w	r2, r2, #32
 800802e:	b2d2      	uxtb	r2, r2
 8008030:	f002 021f 	and.w	r2, r2, #31
 8008034:	2101      	movs	r1, #1
 8008036:	fa01 f202 	lsl.w	r2, r1, r2
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d180      	bne.n	8007f42 <HAL_RCC_OscConfig+0xf1a>
 8008040:	e027      	b.n	8008092 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	69db      	ldr	r3, [r3, #28]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d101      	bne.n	8008056 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e01e      	b.n	8008094 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008056:	4b12      	ldr	r3, [pc, #72]	; (80080a0 <HAL_RCC_OscConfig+0x1078>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800805e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008062:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800806a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	429a      	cmp	r2, r3
 8008074:	d10b      	bne.n	800808e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008076:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800807a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800807e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800808a:	429a      	cmp	r2, r3
 800808c:	d001      	beq.n	8008092 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e000      	b.n	8008094 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40021000 	.word	0x40021000

080080a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b09e      	sub	sp, #120	; 0x78
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80080ae:	2300      	movs	r3, #0
 80080b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e162      	b.n	8008382 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080bc:	4b90      	ldr	r3, [pc, #576]	; (8008300 <HAL_RCC_ClockConfig+0x25c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d910      	bls.n	80080ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ca:	4b8d      	ldr	r3, [pc, #564]	; (8008300 <HAL_RCC_ClockConfig+0x25c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f023 0207 	bic.w	r2, r3, #7
 80080d2:	498b      	ldr	r1, [pc, #556]	; (8008300 <HAL_RCC_ClockConfig+0x25c>)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080da:	4b89      	ldr	r3, [pc, #548]	; (8008300 <HAL_RCC_ClockConfig+0x25c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d001      	beq.n	80080ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e14a      	b.n	8008382 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d008      	beq.n	800810a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080f8:	4b82      	ldr	r3, [pc, #520]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	497f      	ldr	r1, [pc, #508]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 8008106:	4313      	orrs	r3, r2
 8008108:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 80dc 	beq.w	80082d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d13c      	bne.n	800819a <HAL_RCC_ClockConfig+0xf6>
 8008120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008124:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008128:	fa93 f3a3 	rbit	r3, r3
 800812c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800812e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008130:	fab3 f383 	clz	r3, r3
 8008134:	b2db      	uxtb	r3, r3
 8008136:	095b      	lsrs	r3, r3, #5
 8008138:	b2db      	uxtb	r3, r3
 800813a:	f043 0301 	orr.w	r3, r3, #1
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	d102      	bne.n	800814a <HAL_RCC_ClockConfig+0xa6>
 8008144:	4b6f      	ldr	r3, [pc, #444]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	e00f      	b.n	800816a <HAL_RCC_ClockConfig+0xc6>
 800814a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800814e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008152:	fa93 f3a3 	rbit	r3, r3
 8008156:	667b      	str	r3, [r7, #100]	; 0x64
 8008158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800815c:	663b      	str	r3, [r7, #96]	; 0x60
 800815e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008160:	fa93 f3a3 	rbit	r3, r3
 8008164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008166:	4b67      	ldr	r3, [pc, #412]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800816e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008172:	fa92 f2a2 	rbit	r2, r2
 8008176:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800817a:	fab2 f282 	clz	r2, r2
 800817e:	b2d2      	uxtb	r2, r2
 8008180:	f042 0220 	orr.w	r2, r2, #32
 8008184:	b2d2      	uxtb	r2, r2
 8008186:	f002 021f 	and.w	r2, r2, #31
 800818a:	2101      	movs	r1, #1
 800818c:	fa01 f202 	lsl.w	r2, r1, r2
 8008190:	4013      	ands	r3, r2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d17b      	bne.n	800828e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e0f3      	b.n	8008382 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d13c      	bne.n	800821c <HAL_RCC_ClockConfig+0x178>
 80081a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081aa:	fa93 f3a3 	rbit	r3, r3
 80081ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80081b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081b2:	fab3 f383 	clz	r3, r3
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	095b      	lsrs	r3, r3, #5
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	f043 0301 	orr.w	r3, r3, #1
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d102      	bne.n	80081cc <HAL_RCC_ClockConfig+0x128>
 80081c6:	4b4f      	ldr	r3, [pc, #316]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	e00f      	b.n	80081ec <HAL_RCC_ClockConfig+0x148>
 80081cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d4:	fa93 f3a3 	rbit	r3, r3
 80081d8:	647b      	str	r3, [r7, #68]	; 0x44
 80081da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081de:	643b      	str	r3, [r7, #64]	; 0x40
 80081e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e2:	fa93 f3a3 	rbit	r3, r3
 80081e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081e8:	4b46      	ldr	r3, [pc, #280]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80081f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081f4:	fa92 f2a2 	rbit	r2, r2
 80081f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80081fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fc:	fab2 f282 	clz	r2, r2
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	f042 0220 	orr.w	r2, r2, #32
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	f002 021f 	and.w	r2, r2, #31
 800820c:	2101      	movs	r1, #1
 800820e:	fa01 f202 	lsl.w	r2, r1, r2
 8008212:	4013      	ands	r3, r2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d13a      	bne.n	800828e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e0b2      	b.n	8008382 <HAL_RCC_ClockConfig+0x2de>
 800821c:	2302      	movs	r3, #2
 800821e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008222:	fa93 f3a3 	rbit	r3, r3
 8008226:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800822a:	fab3 f383 	clz	r3, r3
 800822e:	b2db      	uxtb	r3, r3
 8008230:	095b      	lsrs	r3, r3, #5
 8008232:	b2db      	uxtb	r3, r3
 8008234:	f043 0301 	orr.w	r3, r3, #1
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b01      	cmp	r3, #1
 800823c:	d102      	bne.n	8008244 <HAL_RCC_ClockConfig+0x1a0>
 800823e:	4b31      	ldr	r3, [pc, #196]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	e00d      	b.n	8008260 <HAL_RCC_ClockConfig+0x1bc>
 8008244:	2302      	movs	r3, #2
 8008246:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824a:	fa93 f3a3 	rbit	r3, r3
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
 8008250:	2302      	movs	r3, #2
 8008252:	623b      	str	r3, [r7, #32]
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	fa93 f3a3 	rbit	r3, r3
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	4b29      	ldr	r3, [pc, #164]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2202      	movs	r2, #2
 8008262:	61ba      	str	r2, [r7, #24]
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	fa92 f2a2 	rbit	r2, r2
 800826a:	617a      	str	r2, [r7, #20]
  return result;
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	fab2 f282 	clz	r2, r2
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	f042 0220 	orr.w	r2, r2, #32
 8008278:	b2d2      	uxtb	r2, r2
 800827a:	f002 021f 	and.w	r2, r2, #31
 800827e:	2101      	movs	r1, #1
 8008280:	fa01 f202 	lsl.w	r2, r1, r2
 8008284:	4013      	ands	r3, r2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e079      	b.n	8008382 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800828e:	4b1d      	ldr	r3, [pc, #116]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f023 0203 	bic.w	r2, r3, #3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	491a      	ldr	r1, [pc, #104]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 800829c:	4313      	orrs	r3, r2
 800829e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082a0:	f7fc fd3e 	bl	8004d20 <HAL_GetTick>
 80082a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a6:	e00a      	b.n	80082be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082a8:	f7fc fd3a 	bl	8004d20 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e061      	b.n	8008382 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082be:	4b11      	ldr	r3, [pc, #68]	; (8008304 <HAL_RCC_ClockConfig+0x260>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f003 020c 	and.w	r2, r3, #12
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d1eb      	bne.n	80082a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082d0:	4b0b      	ldr	r3, [pc, #44]	; (8008300 <HAL_RCC_ClockConfig+0x25c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0307 	and.w	r3, r3, #7
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d214      	bcs.n	8008308 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082de:	4b08      	ldr	r3, [pc, #32]	; (8008300 <HAL_RCC_ClockConfig+0x25c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f023 0207 	bic.w	r2, r3, #7
 80082e6:	4906      	ldr	r1, [pc, #24]	; (8008300 <HAL_RCC_ClockConfig+0x25c>)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ee:	4b04      	ldr	r3, [pc, #16]	; (8008300 <HAL_RCC_ClockConfig+0x25c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d005      	beq.n	8008308 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e040      	b.n	8008382 <HAL_RCC_ClockConfig+0x2de>
 8008300:	40022000 	.word	0x40022000
 8008304:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d008      	beq.n	8008326 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <HAL_RCC_ClockConfig+0x2e8>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	491a      	ldr	r1, [pc, #104]	; (800838c <HAL_RCC_ClockConfig+0x2e8>)
 8008322:	4313      	orrs	r3, r2
 8008324:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d009      	beq.n	8008346 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008332:	4b16      	ldr	r3, [pc, #88]	; (800838c <HAL_RCC_ClockConfig+0x2e8>)
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4912      	ldr	r1, [pc, #72]	; (800838c <HAL_RCC_ClockConfig+0x2e8>)
 8008342:	4313      	orrs	r3, r2
 8008344:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008346:	f000 f829 	bl	800839c <HAL_RCC_GetSysClockFreq>
 800834a:	4601      	mov	r1, r0
 800834c:	4b0f      	ldr	r3, [pc, #60]	; (800838c <HAL_RCC_ClockConfig+0x2e8>)
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008354:	22f0      	movs	r2, #240	; 0xf0
 8008356:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	fa92 f2a2 	rbit	r2, r2
 800835e:	60fa      	str	r2, [r7, #12]
  return result;
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	fab2 f282 	clz	r2, r2
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	40d3      	lsrs	r3, r2
 800836a:	4a09      	ldr	r2, [pc, #36]	; (8008390 <HAL_RCC_ClockConfig+0x2ec>)
 800836c:	5cd3      	ldrb	r3, [r2, r3]
 800836e:	fa21 f303 	lsr.w	r3, r1, r3
 8008372:	4a08      	ldr	r2, [pc, #32]	; (8008394 <HAL_RCC_ClockConfig+0x2f0>)
 8008374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008376:	4b08      	ldr	r3, [pc, #32]	; (8008398 <HAL_RCC_ClockConfig+0x2f4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f7fc fc8c 	bl	8004c98 <HAL_InitTick>
  
  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3778      	adds	r7, #120	; 0x78
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	40021000 	.word	0x40021000
 8008390:	08009ab8 	.word	0x08009ab8
 8008394:	20000034 	.word	0x20000034
 8008398:	20000038 	.word	0x20000038

0800839c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800839c:	b480      	push	{r7}
 800839e:	b08b      	sub	sp, #44	; 0x2c
 80083a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]
 80083a6:	2300      	movs	r3, #0
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	2300      	movs	r3, #0
 80083ac:	627b      	str	r3, [r7, #36]	; 0x24
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80083b6:	4b29      	ldr	r3, [pc, #164]	; (800845c <HAL_RCC_GetSysClockFreq+0xc0>)
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f003 030c 	and.w	r3, r3, #12
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d002      	beq.n	80083cc <HAL_RCC_GetSysClockFreq+0x30>
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d003      	beq.n	80083d2 <HAL_RCC_GetSysClockFreq+0x36>
 80083ca:	e03c      	b.n	8008446 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083cc:	4b24      	ldr	r3, [pc, #144]	; (8008460 <HAL_RCC_GetSysClockFreq+0xc4>)
 80083ce:	623b      	str	r3, [r7, #32]
      break;
 80083d0:	e03c      	b.n	800844c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80083d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80083dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	fa92 f2a2 	rbit	r2, r2
 80083e4:	607a      	str	r2, [r7, #4]
  return result;
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	fab2 f282 	clz	r2, r2
 80083ec:	b2d2      	uxtb	r2, r2
 80083ee:	40d3      	lsrs	r3, r2
 80083f0:	4a1c      	ldr	r2, [pc, #112]	; (8008464 <HAL_RCC_GetSysClockFreq+0xc8>)
 80083f2:	5cd3      	ldrb	r3, [r2, r3]
 80083f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80083f6:	4b19      	ldr	r3, [pc, #100]	; (800845c <HAL_RCC_GetSysClockFreq+0xc0>)
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	220f      	movs	r2, #15
 8008400:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	fa92 f2a2 	rbit	r2, r2
 8008408:	60fa      	str	r2, [r7, #12]
  return result;
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	fab2 f282 	clz	r2, r2
 8008410:	b2d2      	uxtb	r2, r2
 8008412:	40d3      	lsrs	r3, r2
 8008414:	4a14      	ldr	r2, [pc, #80]	; (8008468 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008416:	5cd3      	ldrb	r3, [r2, r3]
 8008418:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008424:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	fbb2 f2f3 	udiv	r2, r2, r3
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	fb02 f303 	mul.w	r3, r2, r3
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
 8008434:	e004      	b.n	8008440 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	4a0c      	ldr	r2, [pc, #48]	; (800846c <HAL_RCC_GetSysClockFreq+0xd0>)
 800843a:	fb02 f303 	mul.w	r3, r2, r3
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	623b      	str	r3, [r7, #32]
      break;
 8008444:	e002      	b.n	800844c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008446:	4b06      	ldr	r3, [pc, #24]	; (8008460 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008448:	623b      	str	r3, [r7, #32]
      break;
 800844a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800844c:	6a3b      	ldr	r3, [r7, #32]
}
 800844e:	4618      	mov	r0, r3
 8008450:	372c      	adds	r7, #44	; 0x2c
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40021000 	.word	0x40021000
 8008460:	007a1200 	.word	0x007a1200
 8008464:	08009ac8 	.word	0x08009ac8
 8008468:	08009ad8 	.word	0x08009ad8
 800846c:	003d0900 	.word	0x003d0900

08008470 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b092      	sub	sp, #72	; 0x48
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008478:	2300      	movs	r3, #0
 800847a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800847c:	2300      	movs	r3, #0
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008480:	2300      	movs	r3, #0
 8008482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80d4 	beq.w	800863c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008494:	4b4e      	ldr	r3, [pc, #312]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d10e      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084a0:	4b4b      	ldr	r3, [pc, #300]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	4a4a      	ldr	r2, [pc, #296]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084aa:	61d3      	str	r3, [r2, #28]
 80084ac:	4b48      	ldr	r3, [pc, #288]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b4:	60bb      	str	r3, [r7, #8]
 80084b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084b8:	2301      	movs	r3, #1
 80084ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084be:	4b45      	ldr	r3, [pc, #276]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d118      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084ca:	4b42      	ldr	r3, [pc, #264]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a41      	ldr	r2, [pc, #260]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084d4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084d6:	f7fc fc23 	bl	8004d20 <HAL_GetTick>
 80084da:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084dc:	e008      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084de:	f7fc fc1f 	bl	8004d20 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	2b64      	cmp	r3, #100	; 0x64
 80084ea:	d901      	bls.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e169      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084f0:	4b38      	ldr	r3, [pc, #224]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d0f0      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084fc:	4b34      	ldr	r3, [pc, #208]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8084 	beq.w	8008616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008516:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008518:	429a      	cmp	r2, r3
 800851a:	d07c      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800851c:	4b2c      	ldr	r3, [pc, #176]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800852a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	fa93 f3a3 	rbit	r3, r3
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008536:	fab3 f383 	clz	r3, r3
 800853a:	b2db      	uxtb	r3, r3
 800853c:	461a      	mov	r2, r3
 800853e:	4b26      	ldr	r3, [pc, #152]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	461a      	mov	r2, r3
 8008546:	2301      	movs	r3, #1
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800854e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	fa93 f3a3 	rbit	r3, r3
 8008556:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800855a:	fab3 f383 	clz	r3, r3
 800855e:	b2db      	uxtb	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008564:	4413      	add	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	461a      	mov	r2, r3
 800856a:	2300      	movs	r3, #0
 800856c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800856e:	4a18      	ldr	r2, [pc, #96]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008572:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d04b      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800857e:	f7fc fbcf 	bl	8004d20 <HAL_GetTick>
 8008582:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008584:	e00a      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008586:	f7fc fbcb 	bl	8004d20 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	f241 3288 	movw	r2, #5000	; 0x1388
 8008594:	4293      	cmp	r3, r2
 8008596:	d901      	bls.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e113      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800859c:	2302      	movs	r3, #2
 800859e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	fa93 f3a3 	rbit	r3, r3
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
 80085a8:	2302      	movs	r3, #2
 80085aa:	623b      	str	r3, [r7, #32]
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	fa93 f3a3 	rbit	r3, r3
 80085b2:	61fb      	str	r3, [r7, #28]
  return result;
 80085b4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b6:	fab3 f383 	clz	r3, r3
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f043 0302 	orr.w	r3, r3, #2
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d108      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80085ca:	4b01      	ldr	r3, [pc, #4]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	e00d      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80085d0:	40021000 	.word	0x40021000
 80085d4:	40007000 	.word	0x40007000
 80085d8:	10908100 	.word	0x10908100
 80085dc:	2302      	movs	r3, #2
 80085de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	fa93 f3a3 	rbit	r3, r3
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	4b78      	ldr	r3, [pc, #480]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2202      	movs	r2, #2
 80085ee:	613a      	str	r2, [r7, #16]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	fa92 f2a2 	rbit	r2, r2
 80085f6:	60fa      	str	r2, [r7, #12]
  return result;
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	fab2 f282 	clz	r2, r2
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008604:	b2d2      	uxtb	r2, r2
 8008606:	f002 021f 	and.w	r2, r2, #31
 800860a:	2101      	movs	r1, #1
 800860c:	fa01 f202 	lsl.w	r2, r1, r2
 8008610:	4013      	ands	r3, r2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0b7      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008616:	4b6d      	ldr	r3, [pc, #436]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	496a      	ldr	r1, [pc, #424]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008624:	4313      	orrs	r3, r2
 8008626:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008628:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800862c:	2b01      	cmp	r3, #1
 800862e:	d105      	bne.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008630:	4b66      	ldr	r3, [pc, #408]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	4a65      	ldr	r2, [pc, #404]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800863a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d008      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008648:	4b60      	ldr	r3, [pc, #384]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	f023 0203 	bic.w	r2, r3, #3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	495d      	ldr	r1, [pc, #372]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008656:	4313      	orrs	r3, r2
 8008658:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0302 	and.w	r3, r3, #2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008666:	4b59      	ldr	r3, [pc, #356]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	4956      	ldr	r1, [pc, #344]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008674:	4313      	orrs	r3, r2
 8008676:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d008      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008684:	4b51      	ldr	r3, [pc, #324]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	494e      	ldr	r1, [pc, #312]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008692:	4313      	orrs	r3, r2
 8008694:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0320 	and.w	r3, r3, #32
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d008      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086a2:	4b4a      	ldr	r3, [pc, #296]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a6:	f023 0210 	bic.w	r2, r3, #16
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	4947      	ldr	r1, [pc, #284]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d008      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80086c0:	4b42      	ldr	r3, [pc, #264]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	493f      	ldr	r1, [pc, #252]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d008      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086de:	4b3b      	ldr	r3, [pc, #236]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	f023 0220 	bic.w	r2, r3, #32
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	4938      	ldr	r1, [pc, #224]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0308 	and.w	r3, r3, #8
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d008      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086fc:	4b33      	ldr	r3, [pc, #204]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	4930      	ldr	r1, [pc, #192]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800870a:	4313      	orrs	r3, r2
 800870c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0310 	and.w	r3, r3, #16
 8008716:	2b00      	cmp	r3, #0
 8008718:	d008      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800871a:	4b2c      	ldr	r3, [pc, #176]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	4929      	ldr	r1, [pc, #164]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008728:	4313      	orrs	r3, r2
 800872a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008738:	4b24      	ldr	r3, [pc, #144]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	4921      	ldr	r1, [pc, #132]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008746:	4313      	orrs	r3, r2
 8008748:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008752:	2b00      	cmp	r3, #0
 8008754:	d008      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008756:	4b1d      	ldr	r3, [pc, #116]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008762:	491a      	ldr	r1, [pc, #104]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008764:	4313      	orrs	r3, r2
 8008766:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008770:	2b00      	cmp	r3, #0
 8008772:	d008      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008774:	4b15      	ldr	r3, [pc, #84]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008778:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	4912      	ldr	r1, [pc, #72]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008782:	4313      	orrs	r3, r2
 8008784:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d008      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008792:	4b0e      	ldr	r3, [pc, #56]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	490b      	ldr	r1, [pc, #44]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80087b0:	4b06      	ldr	r3, [pc, #24]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087bc:	4903      	ldr	r1, [pc, #12]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3748      	adds	r7, #72	; 0x48
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	40021000 	.word	0x40021000

080087d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e09d      	b.n	800891e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d108      	bne.n	80087fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087f2:	d009      	beq.n	8008808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	61da      	str	r2, [r3, #28]
 80087fa:	e005      	b.n	8008808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fc f860 	bl	80048e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800883e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008848:	d902      	bls.n	8008850 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	e002      	b.n	8008856 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008854:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800885e:	d007      	beq.n	8008870 <HAL_SPI_Init+0xa0>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008868:	d002      	beq.n	8008870 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	ea42 0103 	orr.w	r1, r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	0c1b      	lsrs	r3, r3, #16
 80088cc:	f003 0204 	and.w	r2, r3, #4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f003 0308 	and.w	r3, r3, #8
 80088e2:	431a      	orrs	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80088ec:	ea42 0103 	orr.w	r1, r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	69da      	ldr	r2, [r3, #28]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800890c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b082      	sub	sp, #8
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e049      	b.n	80089cc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d106      	bne.n	8008952 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fc f837 	bl	80049c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2202      	movs	r2, #2
 8008956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	3304      	adds	r3, #4
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f000 fa15 	bl	8008d94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2201      	movs	r2, #1
 80089be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d001      	beq.n	80089ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e04a      	b.n	8008a82 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68da      	ldr	r2, [r3, #12]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f042 0201 	orr.w	r2, r2, #1
 8008a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a21      	ldr	r2, [pc, #132]	; (8008a90 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d018      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x6c>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a16:	d013      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x6c>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1d      	ldr	r2, [pc, #116]	; (8008a94 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d00e      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x6c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1c      	ldr	r2, [pc, #112]	; (8008a98 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d009      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x6c>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a1a      	ldr	r2, [pc, #104]	; (8008a9c <HAL_TIM_Base_Start_IT+0xc8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <HAL_TIM_Base_Start_IT+0x6c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a19      	ldr	r2, [pc, #100]	; (8008aa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d115      	bne.n	8008a6c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689a      	ldr	r2, [r3, #8]
 8008a46:	4b17      	ldr	r3, [pc, #92]	; (8008aa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b06      	cmp	r3, #6
 8008a50:	d015      	beq.n	8008a7e <HAL_TIM_Base_Start_IT+0xaa>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a58:	d011      	beq.n	8008a7e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 0201 	orr.w	r2, r2, #1
 8008a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a6a:	e008      	b.n	8008a7e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0201 	orr.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]
 8008a7c:	e000      	b.n	8008a80 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	40012c00 	.word	0x40012c00
 8008a94:	40000400 	.word	0x40000400
 8008a98:	40000800 	.word	0x40000800
 8008a9c:	40013400 	.word	0x40013400
 8008aa0:	40014000 	.word	0x40014000
 8008aa4:	00010007 	.word	0x00010007

08008aa8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6a1a      	ldr	r2, [r3, #32]
 8008ac6:	f241 1311 	movw	r3, #4369	; 0x1111
 8008aca:	4013      	ands	r3, r2
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10f      	bne.n	8008af0 <HAL_TIM_Base_Stop_IT+0x48>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6a1a      	ldr	r2, [r3, #32]
 8008ad6:	f240 4344 	movw	r3, #1092	; 0x444
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d107      	bne.n	8008af0 <HAL_TIM_Base_Stop_IT+0x48>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f022 0201 	bic.w	r2, r2, #1
 8008aee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	691b      	ldr	r3, [r3, #16]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d122      	bne.n	8008b62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d11b      	bne.n	8008b62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f06f 0202 	mvn.w	r2, #2
 8008b32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	f003 0303 	and.w	r3, r3, #3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f905 	bl	8008d58 <HAL_TIM_IC_CaptureCallback>
 8008b4e:	e005      	b.n	8008b5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f8f7 	bl	8008d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f908 	bl	8008d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	f003 0304 	and.w	r3, r3, #4
 8008b6c:	2b04      	cmp	r3, #4
 8008b6e:	d122      	bne.n	8008bb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d11b      	bne.n	8008bb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f06f 0204 	mvn.w	r2, #4
 8008b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f8db 	bl	8008d58 <HAL_TIM_IC_CaptureCallback>
 8008ba2:	e005      	b.n	8008bb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f8cd 	bl	8008d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f8de 	bl	8008d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	f003 0308 	and.w	r3, r3, #8
 8008bc0:	2b08      	cmp	r3, #8
 8008bc2:	d122      	bne.n	8008c0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d11b      	bne.n	8008c0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f06f 0208 	mvn.w	r2, #8
 8008bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2204      	movs	r2, #4
 8008be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	f003 0303 	and.w	r3, r3, #3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f8b1 	bl	8008d58 <HAL_TIM_IC_CaptureCallback>
 8008bf6:	e005      	b.n	8008c04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f8a3 	bl	8008d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f8b4 	bl	8008d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b10      	cmp	r3, #16
 8008c16:	d122      	bne.n	8008c5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d11b      	bne.n	8008c5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f06f 0210 	mvn.w	r2, #16
 8008c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2208      	movs	r2, #8
 8008c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f887 	bl	8008d58 <HAL_TIM_IC_CaptureCallback>
 8008c4a:	e005      	b.n	8008c58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f879 	bl	8008d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f88a 	bl	8008d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d10e      	bne.n	8008c8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d107      	bne.n	8008c8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f06f 0201 	mvn.w	r2, #1
 8008c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7fa fe79 	bl	800397c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c94:	2b80      	cmp	r3, #128	; 0x80
 8008c96:	d10e      	bne.n	8008cb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b80      	cmp	r3, #128	; 0x80
 8008ca4:	d107      	bne.n	8008cb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f909 	bl	8008ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cc4:	d10e      	bne.n	8008ce4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd0:	2b80      	cmp	r3, #128	; 0x80
 8008cd2:	d107      	bne.n	8008ce4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f8fc 	bl	8008edc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cee:	2b40      	cmp	r3, #64	; 0x40
 8008cf0:	d10e      	bne.n	8008d10 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cfc:	2b40      	cmp	r3, #64	; 0x40
 8008cfe:	d107      	bne.n	8008d10 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 f838 	bl	8008d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f003 0320 	and.w	r3, r3, #32
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d10e      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 0320 	and.w	r3, r3, #32
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d107      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f06f 0220 	mvn.w	r2, #32
 8008d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f8bc 	bl	8008eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a3c      	ldr	r2, [pc, #240]	; (8008e98 <TIM_Base_SetConfig+0x104>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d00f      	beq.n	8008dcc <TIM_Base_SetConfig+0x38>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db2:	d00b      	beq.n	8008dcc <TIM_Base_SetConfig+0x38>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a39      	ldr	r2, [pc, #228]	; (8008e9c <TIM_Base_SetConfig+0x108>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d007      	beq.n	8008dcc <TIM_Base_SetConfig+0x38>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a38      	ldr	r2, [pc, #224]	; (8008ea0 <TIM_Base_SetConfig+0x10c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d003      	beq.n	8008dcc <TIM_Base_SetConfig+0x38>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a37      	ldr	r2, [pc, #220]	; (8008ea4 <TIM_Base_SetConfig+0x110>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d108      	bne.n	8008dde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2d      	ldr	r2, [pc, #180]	; (8008e98 <TIM_Base_SetConfig+0x104>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d01b      	beq.n	8008e1e <TIM_Base_SetConfig+0x8a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dec:	d017      	beq.n	8008e1e <TIM_Base_SetConfig+0x8a>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a2a      	ldr	r2, [pc, #168]	; (8008e9c <TIM_Base_SetConfig+0x108>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d013      	beq.n	8008e1e <TIM_Base_SetConfig+0x8a>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a29      	ldr	r2, [pc, #164]	; (8008ea0 <TIM_Base_SetConfig+0x10c>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d00f      	beq.n	8008e1e <TIM_Base_SetConfig+0x8a>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a28      	ldr	r2, [pc, #160]	; (8008ea4 <TIM_Base_SetConfig+0x110>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d00b      	beq.n	8008e1e <TIM_Base_SetConfig+0x8a>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a27      	ldr	r2, [pc, #156]	; (8008ea8 <TIM_Base_SetConfig+0x114>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d007      	beq.n	8008e1e <TIM_Base_SetConfig+0x8a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a26      	ldr	r2, [pc, #152]	; (8008eac <TIM_Base_SetConfig+0x118>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d003      	beq.n	8008e1e <TIM_Base_SetConfig+0x8a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a25      	ldr	r2, [pc, #148]	; (8008eb0 <TIM_Base_SetConfig+0x11c>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d108      	bne.n	8008e30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a10      	ldr	r2, [pc, #64]	; (8008e98 <TIM_Base_SetConfig+0x104>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d00f      	beq.n	8008e7c <TIM_Base_SetConfig+0xe8>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a11      	ldr	r2, [pc, #68]	; (8008ea4 <TIM_Base_SetConfig+0x110>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d00b      	beq.n	8008e7c <TIM_Base_SetConfig+0xe8>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a10      	ldr	r2, [pc, #64]	; (8008ea8 <TIM_Base_SetConfig+0x114>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d007      	beq.n	8008e7c <TIM_Base_SetConfig+0xe8>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a0f      	ldr	r2, [pc, #60]	; (8008eac <TIM_Base_SetConfig+0x118>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d003      	beq.n	8008e7c <TIM_Base_SetConfig+0xe8>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a0e      	ldr	r2, [pc, #56]	; (8008eb0 <TIM_Base_SetConfig+0x11c>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d103      	bne.n	8008e84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	691a      	ldr	r2, [r3, #16]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	615a      	str	r2, [r3, #20]
}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	40012c00 	.word	0x40012c00
 8008e9c:	40000400 	.word	0x40000400
 8008ea0:	40000800 	.word	0x40000800
 8008ea4:	40013400 	.word	0x40013400
 8008ea8:	40014000 	.word	0x40014000
 8008eac:	40014400 	.word	0x40014400
 8008eb0:	40014800 	.word	0x40014800

08008eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <__errno>:
 8008ef0:	4b01      	ldr	r3, [pc, #4]	; (8008ef8 <__errno+0x8>)
 8008ef2:	6818      	ldr	r0, [r3, #0]
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	20000040 	.word	0x20000040

08008efc <__libc_init_array>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	4d0d      	ldr	r5, [pc, #52]	; (8008f34 <__libc_init_array+0x38>)
 8008f00:	4c0d      	ldr	r4, [pc, #52]	; (8008f38 <__libc_init_array+0x3c>)
 8008f02:	1b64      	subs	r4, r4, r5
 8008f04:	10a4      	asrs	r4, r4, #2
 8008f06:	2600      	movs	r6, #0
 8008f08:	42a6      	cmp	r6, r4
 8008f0a:	d109      	bne.n	8008f20 <__libc_init_array+0x24>
 8008f0c:	4d0b      	ldr	r5, [pc, #44]	; (8008f3c <__libc_init_array+0x40>)
 8008f0e:	4c0c      	ldr	r4, [pc, #48]	; (8008f40 <__libc_init_array+0x44>)
 8008f10:	f000 fdc6 	bl	8009aa0 <_init>
 8008f14:	1b64      	subs	r4, r4, r5
 8008f16:	10a4      	asrs	r4, r4, #2
 8008f18:	2600      	movs	r6, #0
 8008f1a:	42a6      	cmp	r6, r4
 8008f1c:	d105      	bne.n	8008f2a <__libc_init_array+0x2e>
 8008f1e:	bd70      	pop	{r4, r5, r6, pc}
 8008f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f24:	4798      	blx	r3
 8008f26:	3601      	adds	r6, #1
 8008f28:	e7ee      	b.n	8008f08 <__libc_init_array+0xc>
 8008f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f2e:	4798      	blx	r3
 8008f30:	3601      	adds	r6, #1
 8008f32:	e7f2      	b.n	8008f1a <__libc_init_array+0x1e>
 8008f34:	08009b60 	.word	0x08009b60
 8008f38:	08009b60 	.word	0x08009b60
 8008f3c:	08009b60 	.word	0x08009b60
 8008f40:	08009b64 	.word	0x08009b64

08008f44 <memset>:
 8008f44:	4402      	add	r2, r0
 8008f46:	4603      	mov	r3, r0
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d100      	bne.n	8008f4e <memset+0xa>
 8008f4c:	4770      	bx	lr
 8008f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f52:	e7f9      	b.n	8008f48 <memset+0x4>

08008f54 <asin>:
 8008f54:	b538      	push	{r3, r4, r5, lr}
 8008f56:	ed2d 8b02 	vpush	{d8}
 8008f5a:	ec55 4b10 	vmov	r4, r5, d0
 8008f5e:	f000 f85b 	bl	8009018 <__ieee754_asin>
 8008f62:	4622      	mov	r2, r4
 8008f64:	462b      	mov	r3, r5
 8008f66:	4620      	mov	r0, r4
 8008f68:	4629      	mov	r1, r5
 8008f6a:	eeb0 8a40 	vmov.f32	s16, s0
 8008f6e:	eef0 8a60 	vmov.f32	s17, s1
 8008f72:	f7f7 fd7f 	bl	8000a74 <__aeabi_dcmpun>
 8008f76:	b9a8      	cbnz	r0, 8008fa4 <asin+0x50>
 8008f78:	ec45 4b10 	vmov	d0, r4, r5
 8008f7c:	f000 fd7c 	bl	8009a78 <fabs>
 8008f80:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <asin+0x60>)
 8008f82:	ec51 0b10 	vmov	r0, r1, d0
 8008f86:	2200      	movs	r2, #0
 8008f88:	f7f7 fd6a 	bl	8000a60 <__aeabi_dcmpgt>
 8008f8c:	b150      	cbz	r0, 8008fa4 <asin+0x50>
 8008f8e:	f7ff ffaf 	bl	8008ef0 <__errno>
 8008f92:	ecbd 8b02 	vpop	{d8}
 8008f96:	2321      	movs	r3, #33	; 0x21
 8008f98:	6003      	str	r3, [r0, #0]
 8008f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f9e:	4806      	ldr	r0, [pc, #24]	; (8008fb8 <asin+0x64>)
 8008fa0:	f000 bd76 	b.w	8009a90 <nan>
 8008fa4:	eeb0 0a48 	vmov.f32	s0, s16
 8008fa8:	eef0 0a68 	vmov.f32	s1, s17
 8008fac:	ecbd 8b02 	vpop	{d8}
 8008fb0:	bd38      	pop	{r3, r4, r5, pc}
 8008fb2:	bf00      	nop
 8008fb4:	3ff00000 	.word	0x3ff00000
 8008fb8:	08009ae8 	.word	0x08009ae8

08008fbc <atan2>:
 8008fbc:	f000 ba40 	b.w	8009440 <__ieee754_atan2>

08008fc0 <sqrt>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	ed2d 8b02 	vpush	{d8}
 8008fc6:	ec55 4b10 	vmov	r4, r5, d0
 8008fca:	f000 fb03 	bl	80095d4 <__ieee754_sqrt>
 8008fce:	4622      	mov	r2, r4
 8008fd0:	462b      	mov	r3, r5
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	eeb0 8a40 	vmov.f32	s16, s0
 8008fda:	eef0 8a60 	vmov.f32	s17, s1
 8008fde:	f7f7 fd49 	bl	8000a74 <__aeabi_dcmpun>
 8008fe2:	b990      	cbnz	r0, 800900a <sqrt+0x4a>
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	4620      	mov	r0, r4
 8008fea:	4629      	mov	r1, r5
 8008fec:	f7f7 fd1a 	bl	8000a24 <__aeabi_dcmplt>
 8008ff0:	b158      	cbz	r0, 800900a <sqrt+0x4a>
 8008ff2:	f7ff ff7d 	bl	8008ef0 <__errno>
 8008ff6:	2321      	movs	r3, #33	; 0x21
 8008ff8:	6003      	str	r3, [r0, #0]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	4610      	mov	r0, r2
 8009000:	4619      	mov	r1, r3
 8009002:	f7f7 fbc7 	bl	8000794 <__aeabi_ddiv>
 8009006:	ec41 0b18 	vmov	d8, r0, r1
 800900a:	eeb0 0a48 	vmov.f32	s0, s16
 800900e:	eef0 0a68 	vmov.f32	s1, s17
 8009012:	ecbd 8b02 	vpop	{d8}
 8009016:	bd38      	pop	{r3, r4, r5, pc}

08009018 <__ieee754_asin>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	ed2d 8b04 	vpush	{d8-d9}
 8009020:	ec55 4b10 	vmov	r4, r5, d0
 8009024:	4bcc      	ldr	r3, [pc, #816]	; (8009358 <__ieee754_asin+0x340>)
 8009026:	b083      	sub	sp, #12
 8009028:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800902c:	4598      	cmp	r8, r3
 800902e:	9501      	str	r5, [sp, #4]
 8009030:	dd35      	ble.n	800909e <__ieee754_asin+0x86>
 8009032:	ee10 3a10 	vmov	r3, s0
 8009036:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800903a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800903e:	ea58 0303 	orrs.w	r3, r8, r3
 8009042:	d117      	bne.n	8009074 <__ieee754_asin+0x5c>
 8009044:	a3aa      	add	r3, pc, #680	; (adr r3, 80092f0 <__ieee754_asin+0x2d8>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	ee10 0a10 	vmov	r0, s0
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 fa76 	bl	8000540 <__aeabi_dmul>
 8009054:	a3a8      	add	r3, pc, #672	; (adr r3, 80092f8 <__ieee754_asin+0x2e0>)
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	4606      	mov	r6, r0
 800905c:	460f      	mov	r7, r1
 800905e:	4620      	mov	r0, r4
 8009060:	4629      	mov	r1, r5
 8009062:	f7f7 fa6d 	bl	8000540 <__aeabi_dmul>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4630      	mov	r0, r6
 800906c:	4639      	mov	r1, r7
 800906e:	f7f7 f8b1 	bl	80001d4 <__adddf3>
 8009072:	e00b      	b.n	800908c <__ieee754_asin+0x74>
 8009074:	ee10 2a10 	vmov	r2, s0
 8009078:	462b      	mov	r3, r5
 800907a:	ee10 0a10 	vmov	r0, s0
 800907e:	4629      	mov	r1, r5
 8009080:	f7f7 f8a6 	bl	80001d0 <__aeabi_dsub>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	f7f7 fb84 	bl	8000794 <__aeabi_ddiv>
 800908c:	4604      	mov	r4, r0
 800908e:	460d      	mov	r5, r1
 8009090:	ec45 4b10 	vmov	d0, r4, r5
 8009094:	b003      	add	sp, #12
 8009096:	ecbd 8b04 	vpop	{d8-d9}
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	4baf      	ldr	r3, [pc, #700]	; (800935c <__ieee754_asin+0x344>)
 80090a0:	4598      	cmp	r8, r3
 80090a2:	dc11      	bgt.n	80090c8 <__ieee754_asin+0xb0>
 80090a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80090a8:	f280 80ae 	bge.w	8009208 <__ieee754_asin+0x1f0>
 80090ac:	a394      	add	r3, pc, #592	; (adr r3, 8009300 <__ieee754_asin+0x2e8>)
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	ee10 0a10 	vmov	r0, s0
 80090b6:	4629      	mov	r1, r5
 80090b8:	f7f7 f88c 	bl	80001d4 <__adddf3>
 80090bc:	4ba8      	ldr	r3, [pc, #672]	; (8009360 <__ieee754_asin+0x348>)
 80090be:	2200      	movs	r2, #0
 80090c0:	f7f7 fcce 	bl	8000a60 <__aeabi_dcmpgt>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d1e3      	bne.n	8009090 <__ieee754_asin+0x78>
 80090c8:	ec45 4b10 	vmov	d0, r4, r5
 80090cc:	f000 fcd4 	bl	8009a78 <fabs>
 80090d0:	49a3      	ldr	r1, [pc, #652]	; (8009360 <__ieee754_asin+0x348>)
 80090d2:	ec53 2b10 	vmov	r2, r3, d0
 80090d6:	2000      	movs	r0, #0
 80090d8:	f7f7 f87a 	bl	80001d0 <__aeabi_dsub>
 80090dc:	4ba1      	ldr	r3, [pc, #644]	; (8009364 <__ieee754_asin+0x34c>)
 80090de:	2200      	movs	r2, #0
 80090e0:	f7f7 fa2e 	bl	8000540 <__aeabi_dmul>
 80090e4:	a388      	add	r3, pc, #544	; (adr r3, 8009308 <__ieee754_asin+0x2f0>)
 80090e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ea:	4604      	mov	r4, r0
 80090ec:	460d      	mov	r5, r1
 80090ee:	f7f7 fa27 	bl	8000540 <__aeabi_dmul>
 80090f2:	a387      	add	r3, pc, #540	; (adr r3, 8009310 <__ieee754_asin+0x2f8>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 f86c 	bl	80001d4 <__adddf3>
 80090fc:	4622      	mov	r2, r4
 80090fe:	462b      	mov	r3, r5
 8009100:	f7f7 fa1e 	bl	8000540 <__aeabi_dmul>
 8009104:	a384      	add	r3, pc, #528	; (adr r3, 8009318 <__ieee754_asin+0x300>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f861 	bl	80001d0 <__aeabi_dsub>
 800910e:	4622      	mov	r2, r4
 8009110:	462b      	mov	r3, r5
 8009112:	f7f7 fa15 	bl	8000540 <__aeabi_dmul>
 8009116:	a382      	add	r3, pc, #520	; (adr r3, 8009320 <__ieee754_asin+0x308>)
 8009118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911c:	f7f7 f85a 	bl	80001d4 <__adddf3>
 8009120:	4622      	mov	r2, r4
 8009122:	462b      	mov	r3, r5
 8009124:	f7f7 fa0c 	bl	8000540 <__aeabi_dmul>
 8009128:	a37f      	add	r3, pc, #508	; (adr r3, 8009328 <__ieee754_asin+0x310>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f7f7 f84f 	bl	80001d0 <__aeabi_dsub>
 8009132:	4622      	mov	r2, r4
 8009134:	462b      	mov	r3, r5
 8009136:	f7f7 fa03 	bl	8000540 <__aeabi_dmul>
 800913a:	a37d      	add	r3, pc, #500	; (adr r3, 8009330 <__ieee754_asin+0x318>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 f848 	bl	80001d4 <__adddf3>
 8009144:	4622      	mov	r2, r4
 8009146:	462b      	mov	r3, r5
 8009148:	f7f7 f9fa 	bl	8000540 <__aeabi_dmul>
 800914c:	a37a      	add	r3, pc, #488	; (adr r3, 8009338 <__ieee754_asin+0x320>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	ec41 0b18 	vmov	d8, r0, r1
 8009156:	4620      	mov	r0, r4
 8009158:	4629      	mov	r1, r5
 800915a:	f7f7 f9f1 	bl	8000540 <__aeabi_dmul>
 800915e:	a378      	add	r3, pc, #480	; (adr r3, 8009340 <__ieee754_asin+0x328>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f7f7 f834 	bl	80001d0 <__aeabi_dsub>
 8009168:	4622      	mov	r2, r4
 800916a:	462b      	mov	r3, r5
 800916c:	f7f7 f9e8 	bl	8000540 <__aeabi_dmul>
 8009170:	a375      	add	r3, pc, #468	; (adr r3, 8009348 <__ieee754_asin+0x330>)
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	f7f7 f82d 	bl	80001d4 <__adddf3>
 800917a:	4622      	mov	r2, r4
 800917c:	462b      	mov	r3, r5
 800917e:	f7f7 f9df 	bl	8000540 <__aeabi_dmul>
 8009182:	a373      	add	r3, pc, #460	; (adr r3, 8009350 <__ieee754_asin+0x338>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	f7f7 f822 	bl	80001d0 <__aeabi_dsub>
 800918c:	4622      	mov	r2, r4
 800918e:	462b      	mov	r3, r5
 8009190:	f7f7 f9d6 	bl	8000540 <__aeabi_dmul>
 8009194:	4b72      	ldr	r3, [pc, #456]	; (8009360 <__ieee754_asin+0x348>)
 8009196:	2200      	movs	r2, #0
 8009198:	f7f7 f81c 	bl	80001d4 <__adddf3>
 800919c:	ec45 4b10 	vmov	d0, r4, r5
 80091a0:	4606      	mov	r6, r0
 80091a2:	460f      	mov	r7, r1
 80091a4:	f000 fa16 	bl	80095d4 <__ieee754_sqrt>
 80091a8:	4b6f      	ldr	r3, [pc, #444]	; (8009368 <__ieee754_asin+0x350>)
 80091aa:	4598      	cmp	r8, r3
 80091ac:	ec5b ab10 	vmov	sl, fp, d0
 80091b0:	f340 80dc 	ble.w	800936c <__ieee754_asin+0x354>
 80091b4:	4632      	mov	r2, r6
 80091b6:	463b      	mov	r3, r7
 80091b8:	ec51 0b18 	vmov	r0, r1, d8
 80091bc:	f7f7 faea 	bl	8000794 <__aeabi_ddiv>
 80091c0:	4652      	mov	r2, sl
 80091c2:	465b      	mov	r3, fp
 80091c4:	f7f7 f9bc 	bl	8000540 <__aeabi_dmul>
 80091c8:	4652      	mov	r2, sl
 80091ca:	465b      	mov	r3, fp
 80091cc:	f7f7 f802 	bl	80001d4 <__adddf3>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	f7f6 fffe 	bl	80001d4 <__adddf3>
 80091d8:	a347      	add	r3, pc, #284	; (adr r3, 80092f8 <__ieee754_asin+0x2e0>)
 80091da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091de:	f7f6 fff7 	bl	80001d0 <__aeabi_dsub>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	a142      	add	r1, pc, #264	; (adr r1, 80092f0 <__ieee754_asin+0x2d8>)
 80091e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ec:	f7f6 fff0 	bl	80001d0 <__aeabi_dsub>
 80091f0:	9b01      	ldr	r3, [sp, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	bfdc      	itt	le
 80091f6:	4602      	movle	r2, r0
 80091f8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	bfdc      	itt	le
 8009202:	4614      	movle	r4, r2
 8009204:	461d      	movle	r5, r3
 8009206:	e743      	b.n	8009090 <__ieee754_asin+0x78>
 8009208:	ee10 2a10 	vmov	r2, s0
 800920c:	ee10 0a10 	vmov	r0, s0
 8009210:	462b      	mov	r3, r5
 8009212:	4629      	mov	r1, r5
 8009214:	f7f7 f994 	bl	8000540 <__aeabi_dmul>
 8009218:	a33b      	add	r3, pc, #236	; (adr r3, 8009308 <__ieee754_asin+0x2f0>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	f7f7 f98d 	bl	8000540 <__aeabi_dmul>
 8009226:	a33a      	add	r3, pc, #232	; (adr r3, 8009310 <__ieee754_asin+0x2f8>)
 8009228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922c:	f7f6 ffd2 	bl	80001d4 <__adddf3>
 8009230:	4632      	mov	r2, r6
 8009232:	463b      	mov	r3, r7
 8009234:	f7f7 f984 	bl	8000540 <__aeabi_dmul>
 8009238:	a337      	add	r3, pc, #220	; (adr r3, 8009318 <__ieee754_asin+0x300>)
 800923a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923e:	f7f6 ffc7 	bl	80001d0 <__aeabi_dsub>
 8009242:	4632      	mov	r2, r6
 8009244:	463b      	mov	r3, r7
 8009246:	f7f7 f97b 	bl	8000540 <__aeabi_dmul>
 800924a:	a335      	add	r3, pc, #212	; (adr r3, 8009320 <__ieee754_asin+0x308>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f6 ffc0 	bl	80001d4 <__adddf3>
 8009254:	4632      	mov	r2, r6
 8009256:	463b      	mov	r3, r7
 8009258:	f7f7 f972 	bl	8000540 <__aeabi_dmul>
 800925c:	a332      	add	r3, pc, #200	; (adr r3, 8009328 <__ieee754_asin+0x310>)
 800925e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009262:	f7f6 ffb5 	bl	80001d0 <__aeabi_dsub>
 8009266:	4632      	mov	r2, r6
 8009268:	463b      	mov	r3, r7
 800926a:	f7f7 f969 	bl	8000540 <__aeabi_dmul>
 800926e:	a330      	add	r3, pc, #192	; (adr r3, 8009330 <__ieee754_asin+0x318>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f6 ffae 	bl	80001d4 <__adddf3>
 8009278:	4632      	mov	r2, r6
 800927a:	463b      	mov	r3, r7
 800927c:	f7f7 f960 	bl	8000540 <__aeabi_dmul>
 8009280:	a32d      	add	r3, pc, #180	; (adr r3, 8009338 <__ieee754_asin+0x320>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	4680      	mov	r8, r0
 8009288:	4689      	mov	r9, r1
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	f7f7 f957 	bl	8000540 <__aeabi_dmul>
 8009292:	a32b      	add	r3, pc, #172	; (adr r3, 8009340 <__ieee754_asin+0x328>)
 8009294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009298:	f7f6 ff9a 	bl	80001d0 <__aeabi_dsub>
 800929c:	4632      	mov	r2, r6
 800929e:	463b      	mov	r3, r7
 80092a0:	f7f7 f94e 	bl	8000540 <__aeabi_dmul>
 80092a4:	a328      	add	r3, pc, #160	; (adr r3, 8009348 <__ieee754_asin+0x330>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	f7f6 ff93 	bl	80001d4 <__adddf3>
 80092ae:	4632      	mov	r2, r6
 80092b0:	463b      	mov	r3, r7
 80092b2:	f7f7 f945 	bl	8000540 <__aeabi_dmul>
 80092b6:	a326      	add	r3, pc, #152	; (adr r3, 8009350 <__ieee754_asin+0x338>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f7f6 ff88 	bl	80001d0 <__aeabi_dsub>
 80092c0:	4632      	mov	r2, r6
 80092c2:	463b      	mov	r3, r7
 80092c4:	f7f7 f93c 	bl	8000540 <__aeabi_dmul>
 80092c8:	4b25      	ldr	r3, [pc, #148]	; (8009360 <__ieee754_asin+0x348>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	f7f6 ff82 	bl	80001d4 <__adddf3>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4640      	mov	r0, r8
 80092d6:	4649      	mov	r1, r9
 80092d8:	f7f7 fa5c 	bl	8000794 <__aeabi_ddiv>
 80092dc:	4622      	mov	r2, r4
 80092de:	462b      	mov	r3, r5
 80092e0:	f7f7 f92e 	bl	8000540 <__aeabi_dmul>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4620      	mov	r0, r4
 80092ea:	4629      	mov	r1, r5
 80092ec:	e6bf      	b.n	800906e <__ieee754_asin+0x56>
 80092ee:	bf00      	nop
 80092f0:	54442d18 	.word	0x54442d18
 80092f4:	3ff921fb 	.word	0x3ff921fb
 80092f8:	33145c07 	.word	0x33145c07
 80092fc:	3c91a626 	.word	0x3c91a626
 8009300:	8800759c 	.word	0x8800759c
 8009304:	7e37e43c 	.word	0x7e37e43c
 8009308:	0dfdf709 	.word	0x0dfdf709
 800930c:	3f023de1 	.word	0x3f023de1
 8009310:	7501b288 	.word	0x7501b288
 8009314:	3f49efe0 	.word	0x3f49efe0
 8009318:	b5688f3b 	.word	0xb5688f3b
 800931c:	3fa48228 	.word	0x3fa48228
 8009320:	0e884455 	.word	0x0e884455
 8009324:	3fc9c155 	.word	0x3fc9c155
 8009328:	03eb6f7d 	.word	0x03eb6f7d
 800932c:	3fd4d612 	.word	0x3fd4d612
 8009330:	55555555 	.word	0x55555555
 8009334:	3fc55555 	.word	0x3fc55555
 8009338:	b12e9282 	.word	0xb12e9282
 800933c:	3fb3b8c5 	.word	0x3fb3b8c5
 8009340:	1b8d0159 	.word	0x1b8d0159
 8009344:	3fe6066c 	.word	0x3fe6066c
 8009348:	9c598ac8 	.word	0x9c598ac8
 800934c:	40002ae5 	.word	0x40002ae5
 8009350:	1c8a2d4b 	.word	0x1c8a2d4b
 8009354:	40033a27 	.word	0x40033a27
 8009358:	3fefffff 	.word	0x3fefffff
 800935c:	3fdfffff 	.word	0x3fdfffff
 8009360:	3ff00000 	.word	0x3ff00000
 8009364:	3fe00000 	.word	0x3fe00000
 8009368:	3fef3332 	.word	0x3fef3332
 800936c:	ee10 2a10 	vmov	r2, s0
 8009370:	ee10 0a10 	vmov	r0, s0
 8009374:	465b      	mov	r3, fp
 8009376:	4659      	mov	r1, fp
 8009378:	f7f6 ff2c 	bl	80001d4 <__adddf3>
 800937c:	4632      	mov	r2, r6
 800937e:	463b      	mov	r3, r7
 8009380:	ec41 0b19 	vmov	d9, r0, r1
 8009384:	ec51 0b18 	vmov	r0, r1, d8
 8009388:	f7f7 fa04 	bl	8000794 <__aeabi_ddiv>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	ec51 0b19 	vmov	r0, r1, d9
 8009394:	f7f7 f8d4 	bl	8000540 <__aeabi_dmul>
 8009398:	f04f 0800 	mov.w	r8, #0
 800939c:	4606      	mov	r6, r0
 800939e:	460f      	mov	r7, r1
 80093a0:	4642      	mov	r2, r8
 80093a2:	465b      	mov	r3, fp
 80093a4:	4640      	mov	r0, r8
 80093a6:	4659      	mov	r1, fp
 80093a8:	f7f7 f8ca 	bl	8000540 <__aeabi_dmul>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4620      	mov	r0, r4
 80093b2:	4629      	mov	r1, r5
 80093b4:	f7f6 ff0c 	bl	80001d0 <__aeabi_dsub>
 80093b8:	4642      	mov	r2, r8
 80093ba:	4604      	mov	r4, r0
 80093bc:	460d      	mov	r5, r1
 80093be:	465b      	mov	r3, fp
 80093c0:	4650      	mov	r0, sl
 80093c2:	4659      	mov	r1, fp
 80093c4:	f7f6 ff06 	bl	80001d4 <__adddf3>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4620      	mov	r0, r4
 80093ce:	4629      	mov	r1, r5
 80093d0:	f7f7 f9e0 	bl	8000794 <__aeabi_ddiv>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	f7f6 fefc 	bl	80001d4 <__adddf3>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	a113      	add	r1, pc, #76	; (adr r1, 8009430 <__ieee754_asin+0x418>)
 80093e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e6:	f7f6 fef3 	bl	80001d0 <__aeabi_dsub>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4630      	mov	r0, r6
 80093f0:	4639      	mov	r1, r7
 80093f2:	f7f6 feed 	bl	80001d0 <__aeabi_dsub>
 80093f6:	4642      	mov	r2, r8
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	465b      	mov	r3, fp
 80093fe:	4640      	mov	r0, r8
 8009400:	4659      	mov	r1, fp
 8009402:	f7f6 fee7 	bl	80001d4 <__adddf3>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	a10b      	add	r1, pc, #44	; (adr r1, 8009438 <__ieee754_asin+0x420>)
 800940c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009410:	f7f6 fede 	bl	80001d0 <__aeabi_dsub>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4620      	mov	r0, r4
 800941a:	4629      	mov	r1, r5
 800941c:	f7f6 fed8 	bl	80001d0 <__aeabi_dsub>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	a104      	add	r1, pc, #16	; (adr r1, 8009438 <__ieee754_asin+0x420>)
 8009426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800942a:	e6df      	b.n	80091ec <__ieee754_asin+0x1d4>
 800942c:	f3af 8000 	nop.w
 8009430:	33145c07 	.word	0x33145c07
 8009434:	3c91a626 	.word	0x3c91a626
 8009438:	54442d18 	.word	0x54442d18
 800943c:	3fe921fb 	.word	0x3fe921fb

08009440 <__ieee754_atan2>:
 8009440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009444:	ec57 6b11 	vmov	r6, r7, d1
 8009448:	4273      	negs	r3, r6
 800944a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80095d0 <__ieee754_atan2+0x190>
 800944e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8009452:	4333      	orrs	r3, r6
 8009454:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009458:	4573      	cmp	r3, lr
 800945a:	ec51 0b10 	vmov	r0, r1, d0
 800945e:	ee11 8a10 	vmov	r8, s2
 8009462:	d80a      	bhi.n	800947a <__ieee754_atan2+0x3a>
 8009464:	4244      	negs	r4, r0
 8009466:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800946a:	4304      	orrs	r4, r0
 800946c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009470:	4574      	cmp	r4, lr
 8009472:	ee10 9a10 	vmov	r9, s0
 8009476:	468c      	mov	ip, r1
 8009478:	d907      	bls.n	800948a <__ieee754_atan2+0x4a>
 800947a:	4632      	mov	r2, r6
 800947c:	463b      	mov	r3, r7
 800947e:	f7f6 fea9 	bl	80001d4 <__adddf3>
 8009482:	ec41 0b10 	vmov	d0, r0, r1
 8009486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800948a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800948e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009492:	4334      	orrs	r4, r6
 8009494:	d103      	bne.n	800949e <__ieee754_atan2+0x5e>
 8009496:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800949a:	f000 b94d 	b.w	8009738 <atan>
 800949e:	17bc      	asrs	r4, r7, #30
 80094a0:	f004 0402 	and.w	r4, r4, #2
 80094a4:	ea53 0909 	orrs.w	r9, r3, r9
 80094a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80094ac:	d107      	bne.n	80094be <__ieee754_atan2+0x7e>
 80094ae:	2c02      	cmp	r4, #2
 80094b0:	d060      	beq.n	8009574 <__ieee754_atan2+0x134>
 80094b2:	2c03      	cmp	r4, #3
 80094b4:	d1e5      	bne.n	8009482 <__ieee754_atan2+0x42>
 80094b6:	a142      	add	r1, pc, #264	; (adr r1, 80095c0 <__ieee754_atan2+0x180>)
 80094b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094bc:	e7e1      	b.n	8009482 <__ieee754_atan2+0x42>
 80094be:	ea52 0808 	orrs.w	r8, r2, r8
 80094c2:	d106      	bne.n	80094d2 <__ieee754_atan2+0x92>
 80094c4:	f1bc 0f00 	cmp.w	ip, #0
 80094c8:	da5f      	bge.n	800958a <__ieee754_atan2+0x14a>
 80094ca:	a13f      	add	r1, pc, #252	; (adr r1, 80095c8 <__ieee754_atan2+0x188>)
 80094cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094d0:	e7d7      	b.n	8009482 <__ieee754_atan2+0x42>
 80094d2:	4572      	cmp	r2, lr
 80094d4:	d10f      	bne.n	80094f6 <__ieee754_atan2+0xb6>
 80094d6:	4293      	cmp	r3, r2
 80094d8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80094dc:	d107      	bne.n	80094ee <__ieee754_atan2+0xae>
 80094de:	2c02      	cmp	r4, #2
 80094e0:	d84c      	bhi.n	800957c <__ieee754_atan2+0x13c>
 80094e2:	4b35      	ldr	r3, [pc, #212]	; (80095b8 <__ieee754_atan2+0x178>)
 80094e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80094e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80094ec:	e7c9      	b.n	8009482 <__ieee754_atan2+0x42>
 80094ee:	2c02      	cmp	r4, #2
 80094f0:	d848      	bhi.n	8009584 <__ieee754_atan2+0x144>
 80094f2:	4b32      	ldr	r3, [pc, #200]	; (80095bc <__ieee754_atan2+0x17c>)
 80094f4:	e7f6      	b.n	80094e4 <__ieee754_atan2+0xa4>
 80094f6:	4573      	cmp	r3, lr
 80094f8:	d0e4      	beq.n	80094c4 <__ieee754_atan2+0x84>
 80094fa:	1a9b      	subs	r3, r3, r2
 80094fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009500:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009504:	da1e      	bge.n	8009544 <__ieee754_atan2+0x104>
 8009506:	2f00      	cmp	r7, #0
 8009508:	da01      	bge.n	800950e <__ieee754_atan2+0xce>
 800950a:	323c      	adds	r2, #60	; 0x3c
 800950c:	db1e      	blt.n	800954c <__ieee754_atan2+0x10c>
 800950e:	4632      	mov	r2, r6
 8009510:	463b      	mov	r3, r7
 8009512:	f7f7 f93f 	bl	8000794 <__aeabi_ddiv>
 8009516:	ec41 0b10 	vmov	d0, r0, r1
 800951a:	f000 faad 	bl	8009a78 <fabs>
 800951e:	f000 f90b 	bl	8009738 <atan>
 8009522:	ec51 0b10 	vmov	r0, r1, d0
 8009526:	2c01      	cmp	r4, #1
 8009528:	d013      	beq.n	8009552 <__ieee754_atan2+0x112>
 800952a:	2c02      	cmp	r4, #2
 800952c:	d015      	beq.n	800955a <__ieee754_atan2+0x11a>
 800952e:	2c00      	cmp	r4, #0
 8009530:	d0a7      	beq.n	8009482 <__ieee754_atan2+0x42>
 8009532:	a319      	add	r3, pc, #100	; (adr r3, 8009598 <__ieee754_atan2+0x158>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f6 fe4a 	bl	80001d0 <__aeabi_dsub>
 800953c:	a318      	add	r3, pc, #96	; (adr r3, 80095a0 <__ieee754_atan2+0x160>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	e014      	b.n	800956e <__ieee754_atan2+0x12e>
 8009544:	a118      	add	r1, pc, #96	; (adr r1, 80095a8 <__ieee754_atan2+0x168>)
 8009546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800954a:	e7ec      	b.n	8009526 <__ieee754_atan2+0xe6>
 800954c:	2000      	movs	r0, #0
 800954e:	2100      	movs	r1, #0
 8009550:	e7e9      	b.n	8009526 <__ieee754_atan2+0xe6>
 8009552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009556:	4619      	mov	r1, r3
 8009558:	e793      	b.n	8009482 <__ieee754_atan2+0x42>
 800955a:	a30f      	add	r3, pc, #60	; (adr r3, 8009598 <__ieee754_atan2+0x158>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f6 fe36 	bl	80001d0 <__aeabi_dsub>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	a10d      	add	r1, pc, #52	; (adr r1, 80095a0 <__ieee754_atan2+0x160>)
 800956a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800956e:	f7f6 fe2f 	bl	80001d0 <__aeabi_dsub>
 8009572:	e786      	b.n	8009482 <__ieee754_atan2+0x42>
 8009574:	a10a      	add	r1, pc, #40	; (adr r1, 80095a0 <__ieee754_atan2+0x160>)
 8009576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800957a:	e782      	b.n	8009482 <__ieee754_atan2+0x42>
 800957c:	a10c      	add	r1, pc, #48	; (adr r1, 80095b0 <__ieee754_atan2+0x170>)
 800957e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009582:	e77e      	b.n	8009482 <__ieee754_atan2+0x42>
 8009584:	2000      	movs	r0, #0
 8009586:	2100      	movs	r1, #0
 8009588:	e77b      	b.n	8009482 <__ieee754_atan2+0x42>
 800958a:	a107      	add	r1, pc, #28	; (adr r1, 80095a8 <__ieee754_atan2+0x168>)
 800958c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009590:	e777      	b.n	8009482 <__ieee754_atan2+0x42>
 8009592:	bf00      	nop
 8009594:	f3af 8000 	nop.w
 8009598:	33145c07 	.word	0x33145c07
 800959c:	3ca1a626 	.word	0x3ca1a626
 80095a0:	54442d18 	.word	0x54442d18
 80095a4:	400921fb 	.word	0x400921fb
 80095a8:	54442d18 	.word	0x54442d18
 80095ac:	3ff921fb 	.word	0x3ff921fb
 80095b0:	54442d18 	.word	0x54442d18
 80095b4:	3fe921fb 	.word	0x3fe921fb
 80095b8:	08009af0 	.word	0x08009af0
 80095bc:	08009b08 	.word	0x08009b08
 80095c0:	54442d18 	.word	0x54442d18
 80095c4:	c00921fb 	.word	0xc00921fb
 80095c8:	54442d18 	.word	0x54442d18
 80095cc:	bff921fb 	.word	0xbff921fb
 80095d0:	7ff00000 	.word	0x7ff00000

080095d4 <__ieee754_sqrt>:
 80095d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d8:	ec55 4b10 	vmov	r4, r5, d0
 80095dc:	4e55      	ldr	r6, [pc, #340]	; (8009734 <__ieee754_sqrt+0x160>)
 80095de:	43ae      	bics	r6, r5
 80095e0:	ee10 0a10 	vmov	r0, s0
 80095e4:	ee10 3a10 	vmov	r3, s0
 80095e8:	462a      	mov	r2, r5
 80095ea:	4629      	mov	r1, r5
 80095ec:	d110      	bne.n	8009610 <__ieee754_sqrt+0x3c>
 80095ee:	ee10 2a10 	vmov	r2, s0
 80095f2:	462b      	mov	r3, r5
 80095f4:	f7f6 ffa4 	bl	8000540 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fde8 	bl	80001d4 <__adddf3>
 8009604:	4604      	mov	r4, r0
 8009606:	460d      	mov	r5, r1
 8009608:	ec45 4b10 	vmov	d0, r4, r5
 800960c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009610:	2d00      	cmp	r5, #0
 8009612:	dc10      	bgt.n	8009636 <__ieee754_sqrt+0x62>
 8009614:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009618:	4330      	orrs	r0, r6
 800961a:	d0f5      	beq.n	8009608 <__ieee754_sqrt+0x34>
 800961c:	b15d      	cbz	r5, 8009636 <__ieee754_sqrt+0x62>
 800961e:	ee10 2a10 	vmov	r2, s0
 8009622:	462b      	mov	r3, r5
 8009624:	ee10 0a10 	vmov	r0, s0
 8009628:	f7f6 fdd2 	bl	80001d0 <__aeabi_dsub>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	f7f7 f8b0 	bl	8000794 <__aeabi_ddiv>
 8009634:	e7e6      	b.n	8009604 <__ieee754_sqrt+0x30>
 8009636:	1512      	asrs	r2, r2, #20
 8009638:	d074      	beq.n	8009724 <__ieee754_sqrt+0x150>
 800963a:	07d4      	lsls	r4, r2, #31
 800963c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009640:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009644:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009648:	bf5e      	ittt	pl
 800964a:	0fda      	lsrpl	r2, r3, #31
 800964c:	005b      	lslpl	r3, r3, #1
 800964e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009652:	2400      	movs	r4, #0
 8009654:	0fda      	lsrs	r2, r3, #31
 8009656:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800965a:	107f      	asrs	r7, r7, #1
 800965c:	005b      	lsls	r3, r3, #1
 800965e:	2516      	movs	r5, #22
 8009660:	4620      	mov	r0, r4
 8009662:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009666:	1886      	adds	r6, r0, r2
 8009668:	428e      	cmp	r6, r1
 800966a:	bfde      	ittt	le
 800966c:	1b89      	suble	r1, r1, r6
 800966e:	18b0      	addle	r0, r6, r2
 8009670:	18a4      	addle	r4, r4, r2
 8009672:	0049      	lsls	r1, r1, #1
 8009674:	3d01      	subs	r5, #1
 8009676:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800967a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800967e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009682:	d1f0      	bne.n	8009666 <__ieee754_sqrt+0x92>
 8009684:	462a      	mov	r2, r5
 8009686:	f04f 0e20 	mov.w	lr, #32
 800968a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800968e:	4281      	cmp	r1, r0
 8009690:	eb06 0c05 	add.w	ip, r6, r5
 8009694:	dc02      	bgt.n	800969c <__ieee754_sqrt+0xc8>
 8009696:	d113      	bne.n	80096c0 <__ieee754_sqrt+0xec>
 8009698:	459c      	cmp	ip, r3
 800969a:	d811      	bhi.n	80096c0 <__ieee754_sqrt+0xec>
 800969c:	f1bc 0f00 	cmp.w	ip, #0
 80096a0:	eb0c 0506 	add.w	r5, ip, r6
 80096a4:	da43      	bge.n	800972e <__ieee754_sqrt+0x15a>
 80096a6:	2d00      	cmp	r5, #0
 80096a8:	db41      	blt.n	800972e <__ieee754_sqrt+0x15a>
 80096aa:	f100 0801 	add.w	r8, r0, #1
 80096ae:	1a09      	subs	r1, r1, r0
 80096b0:	459c      	cmp	ip, r3
 80096b2:	bf88      	it	hi
 80096b4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80096b8:	eba3 030c 	sub.w	r3, r3, ip
 80096bc:	4432      	add	r2, r6
 80096be:	4640      	mov	r0, r8
 80096c0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80096c4:	f1be 0e01 	subs.w	lr, lr, #1
 80096c8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80096cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80096d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80096d4:	d1db      	bne.n	800968e <__ieee754_sqrt+0xba>
 80096d6:	430b      	orrs	r3, r1
 80096d8:	d006      	beq.n	80096e8 <__ieee754_sqrt+0x114>
 80096da:	1c50      	adds	r0, r2, #1
 80096dc:	bf13      	iteet	ne
 80096de:	3201      	addne	r2, #1
 80096e0:	3401      	addeq	r4, #1
 80096e2:	4672      	moveq	r2, lr
 80096e4:	f022 0201 	bicne.w	r2, r2, #1
 80096e8:	1063      	asrs	r3, r4, #1
 80096ea:	0852      	lsrs	r2, r2, #1
 80096ec:	07e1      	lsls	r1, r4, #31
 80096ee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80096f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80096f6:	bf48      	it	mi
 80096f8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80096fc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009700:	4614      	mov	r4, r2
 8009702:	e781      	b.n	8009608 <__ieee754_sqrt+0x34>
 8009704:	0ad9      	lsrs	r1, r3, #11
 8009706:	3815      	subs	r0, #21
 8009708:	055b      	lsls	r3, r3, #21
 800970a:	2900      	cmp	r1, #0
 800970c:	d0fa      	beq.n	8009704 <__ieee754_sqrt+0x130>
 800970e:	02cd      	lsls	r5, r1, #11
 8009710:	d50a      	bpl.n	8009728 <__ieee754_sqrt+0x154>
 8009712:	f1c2 0420 	rsb	r4, r2, #32
 8009716:	fa23 f404 	lsr.w	r4, r3, r4
 800971a:	1e55      	subs	r5, r2, #1
 800971c:	4093      	lsls	r3, r2
 800971e:	4321      	orrs	r1, r4
 8009720:	1b42      	subs	r2, r0, r5
 8009722:	e78a      	b.n	800963a <__ieee754_sqrt+0x66>
 8009724:	4610      	mov	r0, r2
 8009726:	e7f0      	b.n	800970a <__ieee754_sqrt+0x136>
 8009728:	0049      	lsls	r1, r1, #1
 800972a:	3201      	adds	r2, #1
 800972c:	e7ef      	b.n	800970e <__ieee754_sqrt+0x13a>
 800972e:	4680      	mov	r8, r0
 8009730:	e7bd      	b.n	80096ae <__ieee754_sqrt+0xda>
 8009732:	bf00      	nop
 8009734:	7ff00000 	.word	0x7ff00000

08009738 <atan>:
 8009738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	ec55 4b10 	vmov	r4, r5, d0
 8009740:	4bc3      	ldr	r3, [pc, #780]	; (8009a50 <atan+0x318>)
 8009742:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009746:	429e      	cmp	r6, r3
 8009748:	46ab      	mov	fp, r5
 800974a:	dd18      	ble.n	800977e <atan+0x46>
 800974c:	4bc1      	ldr	r3, [pc, #772]	; (8009a54 <atan+0x31c>)
 800974e:	429e      	cmp	r6, r3
 8009750:	dc01      	bgt.n	8009756 <atan+0x1e>
 8009752:	d109      	bne.n	8009768 <atan+0x30>
 8009754:	b144      	cbz	r4, 8009768 <atan+0x30>
 8009756:	4622      	mov	r2, r4
 8009758:	462b      	mov	r3, r5
 800975a:	4620      	mov	r0, r4
 800975c:	4629      	mov	r1, r5
 800975e:	f7f6 fd39 	bl	80001d4 <__adddf3>
 8009762:	4604      	mov	r4, r0
 8009764:	460d      	mov	r5, r1
 8009766:	e006      	b.n	8009776 <atan+0x3e>
 8009768:	f1bb 0f00 	cmp.w	fp, #0
 800976c:	f300 8131 	bgt.w	80099d2 <atan+0x29a>
 8009770:	a59b      	add	r5, pc, #620	; (adr r5, 80099e0 <atan+0x2a8>)
 8009772:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009776:	ec45 4b10 	vmov	d0, r4, r5
 800977a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977e:	4bb6      	ldr	r3, [pc, #728]	; (8009a58 <atan+0x320>)
 8009780:	429e      	cmp	r6, r3
 8009782:	dc14      	bgt.n	80097ae <atan+0x76>
 8009784:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009788:	429e      	cmp	r6, r3
 800978a:	dc0d      	bgt.n	80097a8 <atan+0x70>
 800978c:	a396      	add	r3, pc, #600	; (adr r3, 80099e8 <atan+0x2b0>)
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	ee10 0a10 	vmov	r0, s0
 8009796:	4629      	mov	r1, r5
 8009798:	f7f6 fd1c 	bl	80001d4 <__adddf3>
 800979c:	4baf      	ldr	r3, [pc, #700]	; (8009a5c <atan+0x324>)
 800979e:	2200      	movs	r2, #0
 80097a0:	f7f7 f95e 	bl	8000a60 <__aeabi_dcmpgt>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d1e6      	bne.n	8009776 <atan+0x3e>
 80097a8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80097ac:	e02b      	b.n	8009806 <atan+0xce>
 80097ae:	f000 f963 	bl	8009a78 <fabs>
 80097b2:	4bab      	ldr	r3, [pc, #684]	; (8009a60 <atan+0x328>)
 80097b4:	429e      	cmp	r6, r3
 80097b6:	ec55 4b10 	vmov	r4, r5, d0
 80097ba:	f300 80bf 	bgt.w	800993c <atan+0x204>
 80097be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80097c2:	429e      	cmp	r6, r3
 80097c4:	f300 80a0 	bgt.w	8009908 <atan+0x1d0>
 80097c8:	ee10 2a10 	vmov	r2, s0
 80097cc:	ee10 0a10 	vmov	r0, s0
 80097d0:	462b      	mov	r3, r5
 80097d2:	4629      	mov	r1, r5
 80097d4:	f7f6 fcfe 	bl	80001d4 <__adddf3>
 80097d8:	4ba0      	ldr	r3, [pc, #640]	; (8009a5c <atan+0x324>)
 80097da:	2200      	movs	r2, #0
 80097dc:	f7f6 fcf8 	bl	80001d0 <__aeabi_dsub>
 80097e0:	2200      	movs	r2, #0
 80097e2:	4606      	mov	r6, r0
 80097e4:	460f      	mov	r7, r1
 80097e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097ea:	4620      	mov	r0, r4
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7f6 fcf1 	bl	80001d4 <__adddf3>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4630      	mov	r0, r6
 80097f8:	4639      	mov	r1, r7
 80097fa:	f7f6 ffcb 	bl	8000794 <__aeabi_ddiv>
 80097fe:	f04f 0a00 	mov.w	sl, #0
 8009802:	4604      	mov	r4, r0
 8009804:	460d      	mov	r5, r1
 8009806:	4622      	mov	r2, r4
 8009808:	462b      	mov	r3, r5
 800980a:	4620      	mov	r0, r4
 800980c:	4629      	mov	r1, r5
 800980e:	f7f6 fe97 	bl	8000540 <__aeabi_dmul>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4680      	mov	r8, r0
 8009818:	4689      	mov	r9, r1
 800981a:	f7f6 fe91 	bl	8000540 <__aeabi_dmul>
 800981e:	a374      	add	r3, pc, #464	; (adr r3, 80099f0 <atan+0x2b8>)
 8009820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	f7f6 fe8a 	bl	8000540 <__aeabi_dmul>
 800982c:	a372      	add	r3, pc, #456	; (adr r3, 80099f8 <atan+0x2c0>)
 800982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009832:	f7f6 fccf 	bl	80001d4 <__adddf3>
 8009836:	4632      	mov	r2, r6
 8009838:	463b      	mov	r3, r7
 800983a:	f7f6 fe81 	bl	8000540 <__aeabi_dmul>
 800983e:	a370      	add	r3, pc, #448	; (adr r3, 8009a00 <atan+0x2c8>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f7f6 fcc6 	bl	80001d4 <__adddf3>
 8009848:	4632      	mov	r2, r6
 800984a:	463b      	mov	r3, r7
 800984c:	f7f6 fe78 	bl	8000540 <__aeabi_dmul>
 8009850:	a36d      	add	r3, pc, #436	; (adr r3, 8009a08 <atan+0x2d0>)
 8009852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009856:	f7f6 fcbd 	bl	80001d4 <__adddf3>
 800985a:	4632      	mov	r2, r6
 800985c:	463b      	mov	r3, r7
 800985e:	f7f6 fe6f 	bl	8000540 <__aeabi_dmul>
 8009862:	a36b      	add	r3, pc, #428	; (adr r3, 8009a10 <atan+0x2d8>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f7f6 fcb4 	bl	80001d4 <__adddf3>
 800986c:	4632      	mov	r2, r6
 800986e:	463b      	mov	r3, r7
 8009870:	f7f6 fe66 	bl	8000540 <__aeabi_dmul>
 8009874:	a368      	add	r3, pc, #416	; (adr r3, 8009a18 <atan+0x2e0>)
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	f7f6 fcab 	bl	80001d4 <__adddf3>
 800987e:	4642      	mov	r2, r8
 8009880:	464b      	mov	r3, r9
 8009882:	f7f6 fe5d 	bl	8000540 <__aeabi_dmul>
 8009886:	a366      	add	r3, pc, #408	; (adr r3, 8009a20 <atan+0x2e8>)
 8009888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988c:	4680      	mov	r8, r0
 800988e:	4689      	mov	r9, r1
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f6 fe54 	bl	8000540 <__aeabi_dmul>
 8009898:	a363      	add	r3, pc, #396	; (adr r3, 8009a28 <atan+0x2f0>)
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f7f6 fc97 	bl	80001d0 <__aeabi_dsub>
 80098a2:	4632      	mov	r2, r6
 80098a4:	463b      	mov	r3, r7
 80098a6:	f7f6 fe4b 	bl	8000540 <__aeabi_dmul>
 80098aa:	a361      	add	r3, pc, #388	; (adr r3, 8009a30 <atan+0x2f8>)
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	f7f6 fc8e 	bl	80001d0 <__aeabi_dsub>
 80098b4:	4632      	mov	r2, r6
 80098b6:	463b      	mov	r3, r7
 80098b8:	f7f6 fe42 	bl	8000540 <__aeabi_dmul>
 80098bc:	a35e      	add	r3, pc, #376	; (adr r3, 8009a38 <atan+0x300>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fc85 	bl	80001d0 <__aeabi_dsub>
 80098c6:	4632      	mov	r2, r6
 80098c8:	463b      	mov	r3, r7
 80098ca:	f7f6 fe39 	bl	8000540 <__aeabi_dmul>
 80098ce:	a35c      	add	r3, pc, #368	; (adr r3, 8009a40 <atan+0x308>)
 80098d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d4:	f7f6 fc7c 	bl	80001d0 <__aeabi_dsub>
 80098d8:	4632      	mov	r2, r6
 80098da:	463b      	mov	r3, r7
 80098dc:	f7f6 fe30 	bl	8000540 <__aeabi_dmul>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4640      	mov	r0, r8
 80098e6:	4649      	mov	r1, r9
 80098e8:	f7f6 fc74 	bl	80001d4 <__adddf3>
 80098ec:	4622      	mov	r2, r4
 80098ee:	462b      	mov	r3, r5
 80098f0:	f7f6 fe26 	bl	8000540 <__aeabi_dmul>
 80098f4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	d14b      	bne.n	8009996 <atan+0x25e>
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f7f6 fc65 	bl	80001d0 <__aeabi_dsub>
 8009906:	e72c      	b.n	8009762 <atan+0x2a>
 8009908:	ee10 0a10 	vmov	r0, s0
 800990c:	4b53      	ldr	r3, [pc, #332]	; (8009a5c <atan+0x324>)
 800990e:	2200      	movs	r2, #0
 8009910:	4629      	mov	r1, r5
 8009912:	f7f6 fc5d 	bl	80001d0 <__aeabi_dsub>
 8009916:	4b51      	ldr	r3, [pc, #324]	; (8009a5c <atan+0x324>)
 8009918:	4606      	mov	r6, r0
 800991a:	460f      	mov	r7, r1
 800991c:	2200      	movs	r2, #0
 800991e:	4620      	mov	r0, r4
 8009920:	4629      	mov	r1, r5
 8009922:	f7f6 fc57 	bl	80001d4 <__adddf3>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4630      	mov	r0, r6
 800992c:	4639      	mov	r1, r7
 800992e:	f7f6 ff31 	bl	8000794 <__aeabi_ddiv>
 8009932:	f04f 0a01 	mov.w	sl, #1
 8009936:	4604      	mov	r4, r0
 8009938:	460d      	mov	r5, r1
 800993a:	e764      	b.n	8009806 <atan+0xce>
 800993c:	4b49      	ldr	r3, [pc, #292]	; (8009a64 <atan+0x32c>)
 800993e:	429e      	cmp	r6, r3
 8009940:	da1d      	bge.n	800997e <atan+0x246>
 8009942:	ee10 0a10 	vmov	r0, s0
 8009946:	4b48      	ldr	r3, [pc, #288]	; (8009a68 <atan+0x330>)
 8009948:	2200      	movs	r2, #0
 800994a:	4629      	mov	r1, r5
 800994c:	f7f6 fc40 	bl	80001d0 <__aeabi_dsub>
 8009950:	4b45      	ldr	r3, [pc, #276]	; (8009a68 <atan+0x330>)
 8009952:	4606      	mov	r6, r0
 8009954:	460f      	mov	r7, r1
 8009956:	2200      	movs	r2, #0
 8009958:	4620      	mov	r0, r4
 800995a:	4629      	mov	r1, r5
 800995c:	f7f6 fdf0 	bl	8000540 <__aeabi_dmul>
 8009960:	4b3e      	ldr	r3, [pc, #248]	; (8009a5c <atan+0x324>)
 8009962:	2200      	movs	r2, #0
 8009964:	f7f6 fc36 	bl	80001d4 <__adddf3>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4630      	mov	r0, r6
 800996e:	4639      	mov	r1, r7
 8009970:	f7f6 ff10 	bl	8000794 <__aeabi_ddiv>
 8009974:	f04f 0a02 	mov.w	sl, #2
 8009978:	4604      	mov	r4, r0
 800997a:	460d      	mov	r5, r1
 800997c:	e743      	b.n	8009806 <atan+0xce>
 800997e:	462b      	mov	r3, r5
 8009980:	ee10 2a10 	vmov	r2, s0
 8009984:	4939      	ldr	r1, [pc, #228]	; (8009a6c <atan+0x334>)
 8009986:	2000      	movs	r0, #0
 8009988:	f7f6 ff04 	bl	8000794 <__aeabi_ddiv>
 800998c:	f04f 0a03 	mov.w	sl, #3
 8009990:	4604      	mov	r4, r0
 8009992:	460d      	mov	r5, r1
 8009994:	e737      	b.n	8009806 <atan+0xce>
 8009996:	4b36      	ldr	r3, [pc, #216]	; (8009a70 <atan+0x338>)
 8009998:	4e36      	ldr	r6, [pc, #216]	; (8009a74 <atan+0x33c>)
 800999a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800999e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80099a2:	e9da 2300 	ldrd	r2, r3, [sl]
 80099a6:	f7f6 fc13 	bl	80001d0 <__aeabi_dsub>
 80099aa:	4622      	mov	r2, r4
 80099ac:	462b      	mov	r3, r5
 80099ae:	f7f6 fc0f 	bl	80001d0 <__aeabi_dsub>
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80099ba:	f7f6 fc09 	bl	80001d0 <__aeabi_dsub>
 80099be:	f1bb 0f00 	cmp.w	fp, #0
 80099c2:	4604      	mov	r4, r0
 80099c4:	460d      	mov	r5, r1
 80099c6:	f6bf aed6 	bge.w	8009776 <atan+0x3e>
 80099ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099ce:	461d      	mov	r5, r3
 80099d0:	e6d1      	b.n	8009776 <atan+0x3e>
 80099d2:	a51d      	add	r5, pc, #116	; (adr r5, 8009a48 <atan+0x310>)
 80099d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099d8:	e6cd      	b.n	8009776 <atan+0x3e>
 80099da:	bf00      	nop
 80099dc:	f3af 8000 	nop.w
 80099e0:	54442d18 	.word	0x54442d18
 80099e4:	bff921fb 	.word	0xbff921fb
 80099e8:	8800759c 	.word	0x8800759c
 80099ec:	7e37e43c 	.word	0x7e37e43c
 80099f0:	e322da11 	.word	0xe322da11
 80099f4:	3f90ad3a 	.word	0x3f90ad3a
 80099f8:	24760deb 	.word	0x24760deb
 80099fc:	3fa97b4b 	.word	0x3fa97b4b
 8009a00:	a0d03d51 	.word	0xa0d03d51
 8009a04:	3fb10d66 	.word	0x3fb10d66
 8009a08:	c54c206e 	.word	0xc54c206e
 8009a0c:	3fb745cd 	.word	0x3fb745cd
 8009a10:	920083ff 	.word	0x920083ff
 8009a14:	3fc24924 	.word	0x3fc24924
 8009a18:	5555550d 	.word	0x5555550d
 8009a1c:	3fd55555 	.word	0x3fd55555
 8009a20:	2c6a6c2f 	.word	0x2c6a6c2f
 8009a24:	bfa2b444 	.word	0xbfa2b444
 8009a28:	52defd9a 	.word	0x52defd9a
 8009a2c:	3fadde2d 	.word	0x3fadde2d
 8009a30:	af749a6d 	.word	0xaf749a6d
 8009a34:	3fb3b0f2 	.word	0x3fb3b0f2
 8009a38:	fe231671 	.word	0xfe231671
 8009a3c:	3fbc71c6 	.word	0x3fbc71c6
 8009a40:	9998ebc4 	.word	0x9998ebc4
 8009a44:	3fc99999 	.word	0x3fc99999
 8009a48:	54442d18 	.word	0x54442d18
 8009a4c:	3ff921fb 	.word	0x3ff921fb
 8009a50:	440fffff 	.word	0x440fffff
 8009a54:	7ff00000 	.word	0x7ff00000
 8009a58:	3fdbffff 	.word	0x3fdbffff
 8009a5c:	3ff00000 	.word	0x3ff00000
 8009a60:	3ff2ffff 	.word	0x3ff2ffff
 8009a64:	40038000 	.word	0x40038000
 8009a68:	3ff80000 	.word	0x3ff80000
 8009a6c:	bff00000 	.word	0xbff00000
 8009a70:	08009b40 	.word	0x08009b40
 8009a74:	08009b20 	.word	0x08009b20

08009a78 <fabs>:
 8009a78:	ec51 0b10 	vmov	r0, r1, d0
 8009a7c:	ee10 2a10 	vmov	r2, s0
 8009a80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a84:	ec43 2b10 	vmov	d0, r2, r3
 8009a88:	4770      	bx	lr
 8009a8a:	0000      	movs	r0, r0
 8009a8c:	0000      	movs	r0, r0
	...

08009a90 <nan>:
 8009a90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009a98 <nan+0x8>
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	00000000 	.word	0x00000000
 8009a9c:	7ff80000 	.word	0x7ff80000

08009aa0 <_init>:
 8009aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa2:	bf00      	nop
 8009aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa6:	bc08      	pop	{r3}
 8009aa8:	469e      	mov	lr, r3
 8009aaa:	4770      	bx	lr

08009aac <_fini>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	bf00      	nop
 8009ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab2:	bc08      	pop	{r3}
 8009ab4:	469e      	mov	lr, r3
 8009ab6:	4770      	bx	lr
