
imu_adc_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008b40  08008b40  00018b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be8  08008be8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08008be8  08008be8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008be8  08008be8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000002cc  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124b9  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239b  00000000  00000000  00032581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00034920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  00035818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000330d  00000000  00000000  000365f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a2c  00000000  00000000  00039905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b63c0  00000000  00000000  0004b331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001016f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004204  00000000  00000000  00101744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b28 	.word	0x08008b28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008b28 	.word	0x08008b28

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <calculate_gestures>:
//    int max = (VCC * RESISTANCE_FLEXED/(RESISTANCE_FLEXED + RESISTANCE_PULLDOWN)) * (pow(2, ADC_NUM_BITS) - 1)/VCC;
//    int res = rand() % (max - min) + min;
//    return res;
//}

void calculate_gestures() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	e00d      	b.n	8000ba8 <calculate_gestures+0x28>
        finger_angles[i] = calculate_finger_angle(i);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f93b 	bl	8000e08 <calculate_finger_angle>
 8000b92:	eef0 7a40 	vmov.f32	s15, s0
 8000b96:	4a7e      	ldr	r2, [pc, #504]	; (8000d90 <calculate_gestures+0x210>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	ddee      	ble.n	8000b8c <calculate_gestures+0xc>
    }

    int gesture_key = detect_gestures(finger_angles);
 8000bae:	4878      	ldr	r0, [pc, #480]	; (8000d90 <calculate_gestures+0x210>)
 8000bb0:	f000 f8fa 	bl	8000da8 <detect_gestures>
 8000bb4:	6038      	str	r0, [r7, #0]
    switch (gesture_key) {
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d04d      	beq.n	8000c58 <calculate_gestures+0xd8>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	f300 80b2 	bgt.w	8000d28 <calculate_gestures+0x1a8>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d004      	beq.n	8000bd4 <calculate_gestures+0x54>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	f000 8087 	beq.w	8000ce0 <calculate_gestures+0x160>
 8000bd2:	e0a9      	b.n	8000d28 <calculate_gestures+0x1a8>
        case 0b0001: // yaw right
            gimbal_yaw = 0.5 + lerp(0, 0.5, finger_angles[FINGER_INDEX_IDX] / 90);
 8000bd4:	4b6e      	ldr	r3, [pc, #440]	; (8000d90 <calculate_gestures+0x210>)
 8000bd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bda:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8000d94 <calculate_gestures+0x214>
 8000bde:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000be2:	eeb0 1a47 	vmov.f32	s2, s14
 8000be6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000bea:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8000d98 <calculate_gestures+0x218>
 8000bee:	f003 fcf5 	bl	80045dc <lerp>
 8000bf2:	ee10 3a10 	vmov	r3, s0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fc4a 	bl	8000490 <__aeabi_f2d>
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	4b66      	ldr	r3, [pc, #408]	; (8000d9c <calculate_gestures+0x21c>)
 8000c02:	f7ff fae7 	bl	80001d4 <__adddf3>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff ff67 	bl	8000ae0 <__aeabi_d2f>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a62      	ldr	r2, [pc, #392]	; (8000da0 <calculate_gestures+0x220>)
 8000c16:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000c18:	4b5d      	ldr	r3, [pc, #372]	; (8000d90 <calculate_gestures+0x210>)
 8000c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c1e:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <calculate_gestures+0x210>)
 8000c20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c24:	eef0 0a47 	vmov.f32	s1, s14
 8000c28:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2c:	f003 fcba 	bl	80045a4 <max>
 8000c30:	eeb0 7a40 	vmov.f32	s14, s0
 8000c34:	eddf 6a57 	vldr	s13, [pc, #348]	; 8000d94 <calculate_gestures+0x214>
 8000c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3c:	eeb0 1a67 	vmov.f32	s2, s15
 8000c40:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c44:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000d98 <calculate_gestures+0x218>
 8000c48:	f003 fcc8 	bl	80045dc <lerp>
 8000c4c:	eef0 7a40 	vmov.f32	s15, s0
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <calculate_gestures+0x224>)
 8000c52:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000c56:	e070      	b.n	8000d3a <calculate_gestures+0x1ba>
        case 0b1000: // yaw left
            gimbal_yaw = 0.5 - lerp(0, 0.5, finger_angles[FINGER_PINKY_IDX] / 90);
 8000c58:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <calculate_gestures+0x210>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000d94 <calculate_gestures+0x214>
 8000c62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c66:	eeb0 1a47 	vmov.f32	s2, s14
 8000c6a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000c6e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000d98 <calculate_gestures+0x218>
 8000c72:	f003 fcb3 	bl	80045dc <lerp>
 8000c76:	ee10 3a10 	vmov	r3, s0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fc08 	bl	8000490 <__aeabi_f2d>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4944      	ldr	r1, [pc, #272]	; (8000d9c <calculate_gestures+0x21c>)
 8000c8a:	f7ff faa1 	bl	80001d0 <__aeabi_dsub>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff ff23 	bl	8000ae0 <__aeabi_d2f>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <calculate_gestures+0x220>)
 8000c9e:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <calculate_gestures+0x210>)
 8000ca2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <calculate_gestures+0x210>)
 8000ca8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cac:	eef0 0a47 	vmov.f32	s1, s14
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f003 fc76 	bl	80045a4 <max>
 8000cb8:	eeb0 7a40 	vmov.f32	s14, s0
 8000cbc:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000d94 <calculate_gestures+0x214>
 8000cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc4:	eeb0 1a67 	vmov.f32	s2, s15
 8000cc8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ccc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8000d98 <calculate_gestures+0x218>
 8000cd0:	f003 fc84 	bl	80045dc <lerp>
 8000cd4:	eef0 7a40 	vmov.f32	s15, s0
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <calculate_gestures+0x224>)
 8000cda:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000cde:	e02c      	b.n	8000d3a <calculate_gestures+0x1ba>
        case 0b0110: // throttle
            gimbal_yaw = 0;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <calculate_gestures+0x220>)
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <calculate_gestures+0x210>)
 8000cea:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <calculate_gestures+0x210>)
 8000cf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cf4:	eef0 0a47 	vmov.f32	s1, s14
 8000cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfc:	f003 fc52 	bl	80045a4 <max>
 8000d00:	eeb0 7a40 	vmov.f32	s14, s0
 8000d04:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000d94 <calculate_gestures+0x214>
 8000d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000d10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d14:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000d98 <calculate_gestures+0x218>
 8000d18:	f003 fc60 	bl	80045dc <lerp>
 8000d1c:	eef0 7a40 	vmov.f32	s15, s0
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <calculate_gestures+0x224>)
 8000d22:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000d26:	e008      	b.n	8000d3a <calculate_gestures+0x1ba>
        default: // no-op
        	gimbal_yaw = 0.5;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <calculate_gestures+0x220>)
 8000d2a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000d2e:	601a      	str	r2, [r3, #0]
        	gimbal_throttle = 0;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <calculate_gestures+0x224>)
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
            break;
 8000d38:	bf00      	nop
    }
    if (gesture_key >> 2 && gesture_key >> 1) {
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	109b      	asrs	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d022      	beq.n	8000d88 <calculate_gestures+0x208>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	105b      	asrs	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d01e      	beq.n	8000d88 <calculate_gestures+0x208>
    	gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <calculate_gestures+0x210>)
 8000d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <calculate_gestures+0x210>)
 8000d52:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d56:	eef0 0a47 	vmov.f32	s1, s14
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	f003 fc21 	bl	80045a4 <max>
 8000d62:	eeb0 7a40 	vmov.f32	s14, s0
 8000d66:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000d94 <calculate_gestures+0x214>
 8000d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6e:	eeb0 1a67 	vmov.f32	s2, s15
 8000d72:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d76:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000d98 <calculate_gestures+0x218>
 8000d7a:	f003 fc2f 	bl	80045dc <lerp>
 8000d7e:	eef0 7a40 	vmov.f32	s15, s0
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <calculate_gestures+0x224>)
 8000d84:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000b4 	.word	0x200000b4
 8000d94:	42b40000 	.word	0x42b40000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	3fe00000 	.word	0x3fe00000
 8000da0:	200002fc 	.word	0x200002fc
 8000da4:	20000300 	.word	0x20000300

08000da8 <detect_gestures>:

int detect_gestures(float* finger_angles) {
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    short gesture_key = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	e019      	b.n	8000dee <detect_gestures+0x46>
        if (finger_angles[i] > ANGLE_THRESH) {
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	dd09      	ble.n	8000de8 <detect_gestures+0x40>
            gesture_key |= 1 << (3 - i);
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	f1c3 0303 	rsb	r3, r3, #3
 8000dda:	2201      	movs	r2, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	89fb      	ldrh	r3, [r7, #14]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	dde2      	ble.n	8000dba <detect_gestures+0x12>
        }
    }
    return gesture_key;
 8000df4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <calculate_finger_angle>:

/*
 * Calculate finger angles
 * ADC_flex read by "analogRead(flexPin)" // analogRead later defined in flex sensor interface"
 */
float calculate_finger_angle(int finger_num) {
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    float voltage_flex = ADC_vals[finger_num] * VCC / (pow(2, ADC_NUM_BITS) - 1);
 8000e10:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <calculate_finger_angle+0xd0>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb27 	bl	800046c <__aeabi_i2d>
 8000e1e:	a32a      	add	r3, pc, #168	; (adr r3, 8000ec8 <calculate_finger_angle+0xc0>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fb8c 	bl	8000540 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	a327      	add	r3, pc, #156	; (adr r3, 8000ed0 <calculate_finger_angle+0xc8>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fcad 	bl	8000794 <__aeabi_ddiv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fe4d 	bl	8000ae0 <__aeabi_d2f>
 8000e46:	4603      	mov	r3, r0
 8000e48:	617b      	str	r3, [r7, #20]
    // float resistance_flex = RESISTANCE_PULLDOWN * (VCC / voltage_flex - 1);
    float resistance_flex = (RESISTANCE_PULLDOWN * voltage_flex) / (VCC - voltage_flex);
 8000e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000edc <calculate_finger_angle+0xd4>
 8000e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e56:	ee17 0a90 	vmov	r0, s15
 8000e5a:	f7ff fb19 	bl	8000490 <__aeabi_f2d>
 8000e5e:	4604      	mov	r4, r0
 8000e60:	460d      	mov	r5, r1
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff fb14 	bl	8000490 <__aeabi_f2d>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	a116      	add	r1, pc, #88	; (adr r1, 8000ec8 <calculate_finger_angle+0xc0>)
 8000e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e72:	f7ff f9ad 	bl	80001d0 <__aeabi_dsub>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	f7ff fc89 	bl	8000794 <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fe29 	bl	8000ae0 <__aeabi_d2f>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	613b      	str	r3, [r7, #16]
    float angle = map(resistance_flex, RESISTANCE_UNFLEXED, RESISTANCE_FLEXED, 0, 90);
 8000e92:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8000ee0 <calculate_finger_angle+0xd8>
 8000e96:	eddf 1a13 	vldr	s3, [pc, #76]	; 8000ee4 <calculate_finger_angle+0xdc>
 8000e9a:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8000ee8 <calculate_finger_angle+0xe0>
 8000e9e:	eddf 0a13 	vldr	s1, [pc, #76]	; 8000eec <calculate_finger_angle+0xe4>
 8000ea2:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ea6:	f003 fbb7 	bl	8004618 <map>
 8000eaa:	ed87 0a03 	vstr	s0, [r7, #12]
    return 90 - angle;
 8000eae:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000ee0 <calculate_finger_angle+0xd8>
 8000eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8000eba:	eeb0 0a67 	vmov.f32	s0, s15
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec4:	f3af 8000 	nop.w
 8000ec8:	66666666 	.word	0x66666666
 8000ecc:	400a6666 	.word	0x400a6666
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	40affe00 	.word	0x40affe00
 8000ed8:	20000328 	.word	0x20000328
 8000edc:	469c4000 	.word	0x469c4000
 8000ee0:	42b40000 	.word	0x42b40000
 8000ee4:	00000000 	.word	0x00000000
 8000ee8:	46ea6000 	.word	0x46ea6000
 8000eec:	461c4000 	.word	0x461c4000

08000ef0 <calculate_orientation>:

/*
 * Estimate orientation based on previous quaternion values. 
 * Runs Madgwick, Madgwick output quaternion to relative Euler angles, and remaps angles to gimbal potentiometer percentages.
 */
void calculate_orientation(float delta_time) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	ed87 0a01 	vstr	s0, [r7, #4]
	float sample_freq;
	#ifdef sampleFreq
	sample_freq = sampleFreq;
	#else
	sample_freq = convert_period_to_freq(delta_time);
 8000efa:	ed97 0a01 	vldr	s0, [r7, #4]
 8000efe:	f003 fbd1 	bl	80046a4 <convert_period_to_freq>
 8000f02:	ed87 0a03 	vstr	s0, [r7, #12]
	#endif /* sampleFreq */

	MadgwickAHRSupdate(gyro.gyro.x, gyro.gyro.y, gyro.gyro.z, accel.acceleration.x, accel.acceleration.y, accel.acceleration.z, mag.magnetic.x, mag.magnetic.y, mag.magnetic.z, sample_freq); // gyro, accel, mag are sensors_type_t
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <calculate_orientation+0x7c>)
 8000f08:	edd3 7a00 	vldr	s15, [r3]
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <calculate_orientation+0x7c>)
 8000f0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <calculate_orientation+0x7c>)
 8000f14:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <calculate_orientation+0x80>)
 8000f1a:	ed93 6a00 	vldr	s12, [r3]
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <calculate_orientation+0x80>)
 8000f20:	edd3 5a01 	vldr	s11, [r3, #4]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <calculate_orientation+0x80>)
 8000f26:	ed93 5a02 	vldr	s10, [r3, #8]
 8000f2a:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <calculate_orientation+0x84>)
 8000f2c:	ed93 3a00 	vldr	s6, [r3]
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <calculate_orientation+0x84>)
 8000f32:	edd3 3a01 	vldr	s7, [r3, #4]
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <calculate_orientation+0x84>)
 8000f38:	ed93 4a02 	vldr	s8, [r3, #8]
 8000f3c:	edd7 4a03 	vldr	s9, [r7, #12]
 8000f40:	eef0 2a45 	vmov.f32	s5, s10
 8000f44:	eeb0 2a65 	vmov.f32	s4, s11
 8000f48:	eef0 1a46 	vmov.f32	s3, s12
 8000f4c:	eeb0 1a66 	vmov.f32	s2, s13
 8000f50:	eef0 0a47 	vmov.f32	s1, s14
 8000f54:	eeb0 0a67 	vmov.f32	s0, s15
 8000f58:	f000 f970 	bl	800123c <MadgwickAHRSupdate>
	convert_quaternion_to_euler();
 8000f5c:	f000 f8a2 	bl	80010a4 <convert_quaternion_to_euler>
	remap_angles_to_gimbals();
 8000f60:	f000 f80a 	bl	8000f78 <remap_angles_to_gimbals>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000304 	.word	0x20000304
 8000f70:	20000310 	.word	0x20000310
 8000f74:	2000031c 	.word	0x2000031c

08000f78 <remap_angles_to_gimbals>:

/*
 * Remapping only consists of pitch and roll
 */
void remap_angles_to_gimbals() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	remapped_angle_x = (angle_x + atan2_offset) / (2 * M_PI);
 8000f7c:	4b32      	ldr	r3, [pc, #200]	; (8001048 <remap_angles_to_gimbals+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa85 	bl	8000490 <__aeabi_f2d>
 8000f86:	a32a      	add	r3, pc, #168	; (adr r3, 8001030 <remap_angles_to_gimbals+0xb8>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff f922 	bl	80001d4 <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	a327      	add	r3, pc, #156	; (adr r3, 8001038 <remap_angles_to_gimbals+0xc0>)
 8000f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9e:	f7ff fbf9 	bl	8000794 <__aeabi_ddiv>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fd99 	bl	8000ae0 <__aeabi_d2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a26      	ldr	r2, [pc, #152]	; (800104c <remap_angles_to_gimbals+0xd4>)
 8000fb2:	6013      	str	r3, [r2, #0]
	remapped_angle_y = (angle_y + asin_offset) / (M_PI);
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <remap_angles_to_gimbals+0xd8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fa69 	bl	8000490 <__aeabi_f2d>
 8000fbe:	a320      	add	r3, pc, #128	; (adr r3, 8001040 <remap_angles_to_gimbals+0xc8>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff f906 	bl	80001d4 <__adddf3>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	a317      	add	r3, pc, #92	; (adr r3, 8001030 <remap_angles_to_gimbals+0xb8>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fbdd 	bl	8000794 <__aeabi_ddiv>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4610      	mov	r0, r2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f7ff fd7d 	bl	8000ae0 <__aeabi_d2f>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a1a      	ldr	r2, [pc, #104]	; (8001054 <remap_angles_to_gimbals+0xdc>)
 8000fea:	6013      	str	r3, [r2, #0]
	gimbal_roll = lerp(0, 1, remapped_angle_x);
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <remap_angles_to_gimbals+0xd4>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	eeb0 1a67 	vmov.f32	s2, s15
 8000ff6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ffa:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001058 <remap_angles_to_gimbals+0xe0>
 8000ffe:	f003 faed 	bl	80045dc <lerp>
 8001002:	eef0 7a40 	vmov.f32	s15, s0
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <remap_angles_to_gimbals+0xe4>)
 8001008:	edc3 7a00 	vstr	s15, [r3]
	gimbal_pitch = lerp(0, 1, remapped_angle_y);
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <remap_angles_to_gimbals+0xdc>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eeb0 1a67 	vmov.f32	s2, s15
 8001016:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800101a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001058 <remap_angles_to_gimbals+0xe0>
 800101e:	f003 fadd 	bl	80045dc <lerp>
 8001022:	eef0 7a40 	vmov.f32	s15, s0
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <remap_angles_to_gimbals+0xe8>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	54442d18 	.word	0x54442d18
 8001034:	400921fb 	.word	0x400921fb
 8001038:	54442d18 	.word	0x54442d18
 800103c:	401921fb 	.word	0x401921fb
 8001040:	54442d18 	.word	0x54442d18
 8001044:	3ff921fb 	.word	0x3ff921fb
 8001048:	200002ec 	.word	0x200002ec
 800104c:	200000c4 	.word	0x200000c4
 8001050:	200002f0 	.word	0x200002f0
 8001054:	200000c8 	.word	0x200000c8
 8001058:	00000000 	.word	0x00000000
 800105c:	200002f4 	.word	0x200002f4
 8001060:	200002f8 	.word	0x200002f8

08001064 <reset_aux_frame>:

/*
 * Reset aux frame (identity)
 */
void reset_aux_frame() {
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	q0 = 1.0f;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <reset_aux_frame+0x30>)
 800106a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800106e:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <reset_aux_frame+0x34>)
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <reset_aux_frame+0x38>)
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <reset_aux_frame+0x3c>)
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000024 	.word	0x20000024
 8001098:	200002e0 	.word	0x200002e0
 800109c:	200002e4 	.word	0x200002e4
 80010a0:	200002e8 	.word	0x200002e8

080010a4 <convert_quaternion_to_euler>:

/*
 * Convert quaternion to euler angles
 */
void convert_quaternion_to_euler() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
	// angle_x is roll; angle_y is pitch; angle_z is yaw
	double q2sqr = q2 * q2;
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <convert_quaternion_to_euler+0x178>)
 80010ac:	ed93 7a00 	vldr	s14, [r3]
 80010b0:	4b5a      	ldr	r3, [pc, #360]	; (800121c <convert_quaternion_to_euler+0x178>)
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff f9e7 	bl	8000490 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// double t0 = -2.0 * (q2sqr + q3 * q3) + 1.0;
	// double t1 = +2.0 * (q1 * q2 + q0 * q3);
	double t2 = -2.0 * (q1 * q3 - q0 * q2);
 80010ca:	4b55      	ldr	r3, [pc, #340]	; (8001220 <convert_quaternion_to_euler+0x17c>)
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	4b54      	ldr	r3, [pc, #336]	; (8001224 <convert_quaternion_to_euler+0x180>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <convert_quaternion_to_euler+0x184>)
 80010dc:	edd3 6a00 	vldr	s13, [r3]
 80010e0:	4b4e      	ldr	r3, [pc, #312]	; (800121c <convert_quaternion_to_euler+0x178>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff f9cd 	bl	8000490 <__aeabi_f2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010fe:	f7ff fa1f 	bl	8000540 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double t3 = +2.0 * (q2 * q3 + q0 * q1);
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <convert_quaternion_to_euler+0x178>)
 800110c:	ed93 7a00 	vldr	s14, [r3]
 8001110:	4b44      	ldr	r3, [pc, #272]	; (8001224 <convert_quaternion_to_euler+0x180>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <convert_quaternion_to_euler+0x184>)
 800111c:	edd3 6a00 	vldr	s13, [r3]
 8001120:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <convert_quaternion_to_euler+0x17c>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	ee17 0a90 	vmov	r0, s15
 8001132:	f7ff f9ad 	bl	8000490 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	f7ff f84b 	bl	80001d4 <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double t4 = -2.0 * (q1 * q1 + q2sqr) + 1.0;
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <convert_quaternion_to_euler+0x17c>)
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	4b34      	ldr	r3, [pc, #208]	; (8001220 <convert_quaternion_to_euler+0x17c>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001156:	ee17 0a90 	vmov	r0, s15
 800115a:	f7ff f999 	bl	8000490 <__aeabi_f2d>
 800115e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001162:	f7ff f837 	bl	80001d4 <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001176:	f7ff f9e3 	bl	8000540 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <convert_quaternion_to_euler+0x188>)
 8001188:	f7ff f824 	bl	80001d4 <__adddf3>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	e9c7 2300 	strd	r2, r3, [r7]

	t2 = t2 > 1.0 ? 1.0 : t2;
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <convert_quaternion_to_euler+0x188>)
 800119a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800119e:	f7ff fc5f 	bl	8000a60 <__aeabi_dcmpgt>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <convert_quaternion_to_euler+0x10c>
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <convert_quaternion_to_euler+0x188>)
 80011ae:	e001      	b.n	80011b4 <convert_quaternion_to_euler+0x110>
 80011b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t2 = t2 < -1.0 ? -1.0 : t2;
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <convert_quaternion_to_euler+0x18c>)
 80011be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011c2:	f7ff fc2f 	bl	8000a24 <__aeabi_dcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <convert_quaternion_to_euler+0x130>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <convert_quaternion_to_euler+0x18c>)
 80011d2:	e001      	b.n	80011d8 <convert_quaternion_to_euler+0x134>
 80011d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011d8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	angle_y = asin(t2);
 80011dc:	ed97 0b04 	vldr	d0, [r7, #16]
 80011e0:	f006 fefa 	bl	8007fd8 <asin>
 80011e4:	ec53 2b10 	vmov	r2, r3, d0
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff fc78 	bl	8000ae0 <__aeabi_d2f>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <convert_quaternion_to_euler+0x190>)
 80011f4:	6013      	str	r3, [r2, #0]
	angle_x = atan2(t3, t4);
 80011f6:	ed97 1b00 	vldr	d1, [r7]
 80011fa:	ed97 0b02 	vldr	d0, [r7, #8]
 80011fe:	f006 ff1f 	bl	8008040 <atan2>
 8001202:	ec53 2b10 	vmov	r2, r3, d0
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fc69 	bl	8000ae0 <__aeabi_d2f>
 800120e:	4603      	mov	r3, r0
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <convert_quaternion_to_euler+0x194>)
 8001212:	6013      	str	r3, [r2, #0]
	// angle_z = atan2(t1, t0);
}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200002e4 	.word	0x200002e4
 8001220:	200002e0 	.word	0x200002e0
 8001224:	200002e8 	.word	0x200002e8
 8001228:	20000024 	.word	0x20000024
 800122c:	3ff00000 	.word	0x3ff00000
 8001230:	bff00000 	.word	0xbff00000
 8001234:	200002f0 	.word	0x200002f0
 8001238:	200002ec 	.word	0x200002ec

0800123c <MadgwickAHRSupdate>:


//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float sample_freq) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b0ae      	sub	sp, #184	; 0xb8
 8001240:	af00      	add	r7, sp, #0
 8001242:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001246:	edc7 0a08 	vstr	s1, [r7, #32]
 800124a:	ed87 1a07 	vstr	s2, [r7, #28]
 800124e:	edc7 1a06 	vstr	s3, [r7, #24]
 8001252:	ed87 2a05 	vstr	s4, [r7, #20]
 8001256:	edc7 2a04 	vstr	s5, [r7, #16]
 800125a:	ed87 3a03 	vstr	s6, [r7, #12]
 800125e:	edc7 3a02 	vstr	s7, [r7, #8]
 8001262:	ed87 4a01 	vstr	s8, [r7, #4]
 8001266:	edc7 4a00 	vstr	s9, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800126a:	edd7 7a03 	vldr	s15, [r7, #12]
 800126e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	d11f      	bne.n	80012b8 <MadgwickAHRSupdate+0x7c>
 8001278:	edd7 7a02 	vldr	s15, [r7, #8]
 800127c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d118      	bne.n	80012b8 <MadgwickAHRSupdate+0x7c>
 8001286:	edd7 7a01 	vldr	s15, [r7, #4]
 800128a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d111      	bne.n	80012b8 <MadgwickAHRSupdate+0x7c>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az, sample_freq);
 8001294:	ed97 3a00 	vldr	s6, [r7]
 8001298:	edd7 2a04 	vldr	s5, [r7, #16]
 800129c:	ed97 2a05 	vldr	s4, [r7, #20]
 80012a0:	edd7 1a06 	vldr	s3, [r7, #24]
 80012a4:	ed97 1a07 	vldr	s2, [r7, #28]
 80012a8:	edd7 0a08 	vldr	s1, [r7, #32]
 80012ac:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80012b0:	f000 feec 	bl	800208c <MadgwickAHRSupdateIMU>
		return;
 80012b4:	f000 bedc 	b.w	8002070 <MadgwickAHRSupdate+0xe34>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80012b8:	4be4      	ldr	r3, [pc, #912]	; (800164c <MadgwickAHRSupdate+0x410>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	eeb1 7a67 	vneg.f32	s14, s15
 80012c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ca:	4be1      	ldr	r3, [pc, #900]	; (8001650 <MadgwickAHRSupdate+0x414>)
 80012cc:	edd3 6a00 	vldr	s13, [r3]
 80012d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012dc:	4bdd      	ldr	r3, [pc, #884]	; (8001654 <MadgwickAHRSupdate+0x418>)
 80012de:	edd3 6a00 	vldr	s13, [r3]
 80012e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80012fa:	4bd7      	ldr	r3, [pc, #860]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 80012fc:	ed93 7a00 	vldr	s14, [r3]
 8001300:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001308:	4bd1      	ldr	r3, [pc, #836]	; (8001650 <MadgwickAHRSupdate+0x414>)
 800130a:	edd3 6a00 	vldr	s13, [r3]
 800130e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800131a:	4bce      	ldr	r3, [pc, #824]	; (8001654 <MadgwickAHRSupdate+0x418>)
 800131c:	edd3 6a00 	vldr	s13, [r3]
 8001320:	edd7 7a08 	vldr	s15, [r7, #32]
 8001324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001338:	4bc7      	ldr	r3, [pc, #796]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 800133a:	ed93 7a00 	vldr	s14, [r3]
 800133e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001346:	4bc1      	ldr	r3, [pc, #772]	; (800164c <MadgwickAHRSupdate+0x410>)
 8001348:	edd3 6a00 	vldr	s13, [r3]
 800134c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001354:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001358:	4bbe      	ldr	r3, [pc, #760]	; (8001654 <MadgwickAHRSupdate+0x418>)
 800135a:	edd3 6a00 	vldr	s13, [r3]
 800135e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800136e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001372:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001376:	4bb8      	ldr	r3, [pc, #736]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 8001378:	ed93 7a00 	vldr	s14, [r3]
 800137c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001384:	4bb1      	ldr	r3, [pc, #708]	; (800164c <MadgwickAHRSupdate+0x410>)
 8001386:	edd3 6a00 	vldr	s13, [r3]
 800138a:	edd7 7a08 	vldr	s15, [r7, #32]
 800138e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001396:	4bae      	ldr	r3, [pc, #696]	; (8001650 <MadgwickAHRSupdate+0x414>)
 8001398:	edd3 6a00 	vldr	s13, [r3]
 800139c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80013b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	d10e      	bne.n	80013e0 <MadgwickAHRSupdate+0x1a4>
 80013c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ce:	d107      	bne.n	80013e0 <MadgwickAHRSupdate+0x1a4>
 80013d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013dc:	f000 85ac 	beq.w	8001f38 <MadgwickAHRSupdate+0xcfc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80013e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001400:	eeb0 0a67 	vmov.f32	s0, s15
 8001404:	f001 f976 	bl	80026f4 <invSqrt>
 8001408:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 800140c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001410:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001418:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 800141c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001420:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001428:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 800142c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001430:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001438:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800143c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001440:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001444:	edd7 7a02 	vldr	s15, [r7, #8]
 8001448:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800144c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001450:	edd7 7a01 	vldr	s15, [r7, #4]
 8001454:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	eeb0 0a67 	vmov.f32	s0, s15
 8001460:	f001 f948 	bl	80026f4 <invSqrt>
 8001464:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001468:	ed97 7a03 	vldr	s14, [r7, #12]
 800146c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001474:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001478:	ed97 7a02 	vldr	s14, [r7, #8]
 800147c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001484:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001488:	ed97 7a01 	vldr	s14, [r7, #4]
 800148c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001494:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001498:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80014a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014aa:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80014c4:	4b64      	ldr	r3, [pc, #400]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80014d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <MadgwickAHRSupdate+0x410>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ec:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80014f0:	4b59      	ldr	r3, [pc, #356]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014fa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80014fe:	4b53      	ldr	r3, [pc, #332]	; (800164c <MadgwickAHRSupdate+0x410>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001508:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 800150c:	4b50      	ldr	r3, [pc, #320]	; (8001650 <MadgwickAHRSupdate+0x414>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001516:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 800151a:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <MadgwickAHRSupdate+0x418>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001524:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001528:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 800152a:	edd3 7a00 	vldr	s15, [r3]
 800152e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001532:	4b47      	ldr	r3, [pc, #284]	; (8001650 <MadgwickAHRSupdate+0x414>)
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001540:	4b43      	ldr	r3, [pc, #268]	; (8001650 <MadgwickAHRSupdate+0x414>)
 8001542:	edd3 7a00 	vldr	s15, [r3]
 8001546:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800154a:	4b42      	ldr	r3, [pc, #264]	; (8001654 <MadgwickAHRSupdate+0x418>)
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001554:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001558:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001568:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 800156e:	ed93 7a00 	vldr	s14, [r3]
 8001572:	4b36      	ldr	r3, [pc, #216]	; (800164c <MadgwickAHRSupdate+0x410>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 8001582:	ed93 7a00 	vldr	s14, [r3]
 8001586:	4b32      	ldr	r3, [pc, #200]	; (8001650 <MadgwickAHRSupdate+0x414>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001590:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001594:	4b30      	ldr	r3, [pc, #192]	; (8001658 <MadgwickAHRSupdate+0x41c>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <MadgwickAHRSupdate+0x418>)
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <MadgwickAHRSupdate+0x410>)
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	4b27      	ldr	r3, [pc, #156]	; (800164c <MadgwickAHRSupdate+0x410>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <MadgwickAHRSupdate+0x410>)
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <MadgwickAHRSupdate+0x414>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015cc:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <MadgwickAHRSupdate+0x410>)
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MadgwickAHRSupdate+0x418>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MadgwickAHRSupdate+0x414>)
 80015e6:	ed93 7a00 	vldr	s14, [r3]
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MadgwickAHRSupdate+0x414>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MadgwickAHRSupdate+0x414>)
 80015fa:	ed93 7a00 	vldr	s14, [r3]
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MadgwickAHRSupdate+0x418>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001608:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MadgwickAHRSupdate+0x418>)
 800160e:	ed93 7a00 	vldr	s14, [r3]
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MadgwickAHRSupdate+0x418>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001620:	ed97 7a03 	vldr	s14, [r7, #12]
 8001624:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001628:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MadgwickAHRSupdate+0x418>)
 800162e:	edd3 6a00 	vldr	s13, [r3]
 8001632:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <MadgwickAHRSupdate+0x414>)
 8001640:	edd3 6a00 	vldr	s13, [r3]
 8001644:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001648:	e008      	b.n	800165c <MadgwickAHRSupdate+0x420>
 800164a:	bf00      	nop
 800164c:	200002e0 	.word	0x200002e0
 8001650:	200002e4 	.word	0x200002e4
 8001654:	200002e8 	.word	0x200002e8
 8001658:	20000024 	.word	0x20000024
 800165c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001664:	edd7 6a03 	vldr	s13, [r7, #12]
 8001668:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800166c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001674:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001678:	edd7 7a02 	vldr	s15, [r7, #8]
 800167c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001680:	4bf5      	ldr	r3, [pc, #980]	; (8001a58 <MadgwickAHRSupdate+0x81c>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800168a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800168e:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001692:	edd7 7a01 	vldr	s15, [r7, #4]
 8001696:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800169a:	4bf0      	ldr	r3, [pc, #960]	; (8001a5c <MadgwickAHRSupdate+0x820>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80016ac:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b8:	edd7 6a03 	vldr	s13, [r7, #12]
 80016bc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80016cc:	4be3      	ldr	r3, [pc, #908]	; (8001a5c <MadgwickAHRSupdate+0x820>)
 80016ce:	ed93 7a00 	vldr	s14, [r3]
 80016d2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80016d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016da:	edd7 6a02 	vldr	s13, [r7, #8]
 80016de:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ea:	4bdd      	ldr	r3, [pc, #884]	; (8001a60 <MadgwickAHRSupdate+0x824>)
 80016ec:	edd3 6a00 	vldr	s13, [r3]
 80016f0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80016f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016fc:	4bd6      	ldr	r3, [pc, #856]	; (8001a58 <MadgwickAHRSupdate+0x81c>)
 80016fe:	edd3 6a00 	vldr	s13, [r3]
 8001702:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800170e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001712:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001722:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800172a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172e:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001732:	edd7 7a01 	vldr	s15, [r7, #4]
 8001736:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800173a:	4bc8      	ldr	r3, [pc, #800]	; (8001a5c <MadgwickAHRSupdate+0x820>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001748:	edd7 6a02 	vldr	s13, [r7, #8]
 800174c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001758:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 800175c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001760:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001764:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001768:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800176c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001770:	ee17 0a90 	vmov	r0, s15
 8001774:	f7fe fe8c 	bl	8000490 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	ec43 2b10 	vmov	d0, r2, r3
 8001780:	f006 fc60 	bl	8008044 <sqrt>
 8001784:	ec53 2b10 	vmov	r2, r3, d0
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f9a8 	bl	8000ae0 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001794:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001798:	eeb1 7a67 	vneg.f32	s14, s15
 800179c:	4bae      	ldr	r3, [pc, #696]	; (8001a58 <MadgwickAHRSupdate+0x81c>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a6:	4bae      	ldr	r3, [pc, #696]	; (8001a60 <MadgwickAHRSupdate+0x824>)
 80017a8:	edd3 6a00 	vldr	s13, [r3]
 80017ac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017b8:	edd7 6a01 	vldr	s13, [r7, #4]
 80017bc:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c8:	4ba4      	ldr	r3, [pc, #656]	; (8001a5c <MadgwickAHRSupdate+0x820>)
 80017ca:	edd3 6a00 	vldr	s13, [r3]
 80017ce:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017da:	edd7 6a01 	vldr	s13, [r7, #4]
 80017de:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ea:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f6:	4b99      	ldr	r3, [pc, #612]	; (8001a5c <MadgwickAHRSupdate+0x820>)
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001804:	edd7 6a01 	vldr	s13, [r7, #4]
 8001808:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800180c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001810:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001814:	edd7 6a01 	vldr	s13, [r7, #4]
 8001818:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800181c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001824:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001828:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800182c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001830:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001834:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001838:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800183c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001840:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001844:	eeb1 7a67 	vneg.f32	s14, s15
 8001848:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800184c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001850:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001854:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001858:	edd7 7a06 	vldr	s15, [r7, #24]
 800185c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001864:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001868:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800186c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001870:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001874:	edd7 7a05 	vldr	s15, [r7, #20]
 8001878:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800187c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001888:	4b73      	ldr	r3, [pc, #460]	; (8001a58 <MadgwickAHRSupdate+0x81c>)
 800188a:	edd3 6a00 	vldr	s13, [r3]
 800188e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001892:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001896:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800189a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800189e:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018a2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018a6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018aa:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018b2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018b6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018ba:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018c2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018c6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ce:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018da:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018de:	eef1 6a67 	vneg.f32	s13, s15
 80018e2:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <MadgwickAHRSupdate+0x820>)
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ec:	4b5c      	ldr	r3, [pc, #368]	; (8001a60 <MadgwickAHRSupdate+0x824>)
 80018ee:	ed93 6a00 	vldr	s12, [r3]
 80018f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018fe:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001902:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001906:	ee36 6a67 	vsub.f32	s12, s12, s15
 800190a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800190e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001912:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001916:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800191a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800191e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001922:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001926:	ee36 6a27 	vadd.f32	s12, s12, s15
 800192a:	edd7 7a02 	vldr	s15, [r7, #8]
 800192e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001936:	ee37 7a27 	vadd.f32	s14, s14, s15
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <MadgwickAHRSupdate+0x81c>)
 800193c:	edd3 6a00 	vldr	s13, [r3]
 8001940:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001944:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001948:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800194c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001950:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001954:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001958:	ee26 6a27 	vmul.f32	s12, s12, s15
 800195c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001960:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001964:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001968:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800196c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001970:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001974:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001978:	ee36 6a27 	vadd.f32	s12, s12, s15
 800197c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001980:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001990:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001994:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001998:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800199c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019b8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019c8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80019cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <MadgwickAHRSupdate+0x824>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019e2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019ee:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <MadgwickAHRSupdate+0x820>)
 8001a10:	edd3 6a00 	vldr	s13, [r3]
 8001a14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a1c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a20:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a24:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a28:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a38:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a3c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a40:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a44:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a48:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a50:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a54:	e006      	b.n	8001a64 <MadgwickAHRSupdate+0x828>
 8001a56:	bf00      	nop
 8001a58:	200002e4 	.word	0x200002e4
 8001a5c:	200002e8 	.word	0x200002e8
 8001a60:	200002e0 	.word	0x200002e0
 8001a64:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a70:	4bf6      	ldr	r3, [pc, #984]	; (8001e4c <MadgwickAHRSupdate+0xc10>)
 8001a72:	edd3 6a00 	vldr	s13, [r3]
 8001a76:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a7e:	4bf4      	ldr	r3, [pc, #976]	; (8001e50 <MadgwickAHRSupdate+0xc14>)
 8001a80:	ed93 6a00 	vldr	s12, [r3]
 8001a84:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a88:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a90:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a94:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001a98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aa0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aa4:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001aa8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001aac:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ab4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ab8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001acc:	4be1      	ldr	r3, [pc, #900]	; (8001e54 <MadgwickAHRSupdate+0xc18>)
 8001ace:	edd3 6a00 	vldr	s13, [r3]
 8001ad2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ada:	4bdf      	ldr	r3, [pc, #892]	; (8001e58 <MadgwickAHRSupdate+0xc1c>)
 8001adc:	ed93 6a00 	vldr	s12, [r3]
 8001ae0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ae4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ae8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001aec:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001af0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001af4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001af8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001afc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b00:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b04:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b08:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b0c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b10:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b18:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b20:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b24:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b30:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b34:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b38:	eeb1 7a67 	vneg.f32	s14, s15
 8001b3c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b40:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b44:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b58:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b5c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b60:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b64:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b6c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b70:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b7c:	4bb3      	ldr	r3, [pc, #716]	; (8001e4c <MadgwickAHRSupdate+0xc10>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b86:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b8a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b8e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001b96:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b9a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ba2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ba6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001baa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bba:	eef1 6a67 	vneg.f32	s13, s15
 8001bbe:	4ba3      	ldr	r3, [pc, #652]	; (8001e4c <MadgwickAHRSupdate+0xc10>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc8:	4ba1      	ldr	r3, [pc, #644]	; (8001e50 <MadgwickAHRSupdate+0xc14>)
 8001bca:	ed93 6a00 	vldr	s12, [r3]
 8001bce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bd6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bda:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001bde:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001be2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001be6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bea:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bf2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bf6:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001bfa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001bfe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c02:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c06:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c0a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c12:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1e:	4b8e      	ldr	r3, [pc, #568]	; (8001e58 <MadgwickAHRSupdate+0xc1c>)
 8001c20:	edd3 6a00 	vldr	s13, [r3]
 8001c24:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c2c:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <MadgwickAHRSupdate+0xc18>)
 8001c2e:	ed93 6a00 	vldr	s12, [r3]
 8001c32:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c3e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c42:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c46:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c4a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c4e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c52:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c56:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c5a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c62:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c66:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c7a:	4b75      	ldr	r3, [pc, #468]	; (8001e50 <MadgwickAHRSupdate+0xc14>)
 8001c7c:	edd3 6a00 	vldr	s13, [r3]
 8001c80:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c88:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <MadgwickAHRSupdate+0xc10>)
 8001c8a:	ed93 6a00 	vldr	s12, [r3]
 8001c8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c96:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c9a:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001c9e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ca2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001caa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cae:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cb2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cb6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cbe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cc2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cc6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cca:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cde:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ce2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ce6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001cea:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cf2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cfa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d02:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d06:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d0a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d0e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d1a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d26:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d2a:	eef1 6a67 	vneg.f32	s13, s15
 8001d2e:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <MadgwickAHRSupdate+0xc18>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <MadgwickAHRSupdate+0xc1c>)
 8001d3a:	ed93 6a00 	vldr	s12, [r3]
 8001d3e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d42:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d46:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d4a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d4e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d52:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d56:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d5a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d5e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d62:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d66:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001d6a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d6e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d72:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d76:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d7a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d82:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d8e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d92:	eef1 6a67 	vneg.f32	s13, s15
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <MadgwickAHRSupdate+0xc14>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001da0:	4b2a      	ldr	r3, [pc, #168]	; (8001e4c <MadgwickAHRSupdate+0xc10>)
 8001da2:	ed93 6a00 	vldr	s12, [r3]
 8001da6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001daa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001db2:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001db6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dba:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dbe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dc2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dc6:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001dca:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001dce:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001dd2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dd6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dda:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001dde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <MadgwickAHRSupdate+0xc1c>)
 8001df0:	edd3 6a00 	vldr	s13, [r3]
 8001df4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001df8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dfc:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e00:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e04:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e08:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e10:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e14:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e18:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e1c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e20:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e24:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e28:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e2c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e34:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001e44:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e48:	e008      	b.n	8001e5c <MadgwickAHRSupdate+0xc20>
 8001e4a:	bf00      	nop
 8001e4c:	200002e4 	.word	0x200002e4
 8001e50:	20000024 	.word	0x20000024
 8001e54:	200002e8 	.word	0x200002e8
 8001e58:	200002e0 	.word	0x200002e0
 8001e5c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e70:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e84:	eeb0 0a67 	vmov.f32	s0, s15
 8001e88:	f000 fc34 	bl	80026f4 <invSqrt>
 8001e8c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001e90:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e94:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001ea0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ea4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001eb0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001eb4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001ec0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ec4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ecc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001ed0:	4b69      	ldr	r3, [pc, #420]	; (8002078 <MadgwickAHRSupdate+0xe3c>)
 8001ed2:	ed93 7a00 	vldr	s14, [r3]
 8001ed6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ede:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001ee2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <MadgwickAHRSupdate+0xe3c>)
 8001eec:	ed93 7a00 	vldr	s14, [r3]
 8001ef0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f00:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f04:	4b5c      	ldr	r3, [pc, #368]	; (8002078 <MadgwickAHRSupdate+0xe3c>)
 8001f06:	ed93 7a00 	vldr	s14, [r3]
 8001f0a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f1a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001f1e:	4b56      	ldr	r3, [pc, #344]	; (8002078 <MadgwickAHRSupdate+0xe3c>)
 8001f20:	ed93 7a00 	vldr	s14, [r3]
 8001f24:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2c:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f34:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 8001f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f3c:	edd7 7a00 	vldr	s15, [r7]
 8001f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f44:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <MadgwickAHRSupdate+0xe40>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	4b49      	ldr	r3, [pc, #292]	; (800207c <MadgwickAHRSupdate+0xe40>)
 8001f58:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 8001f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f60:	edd7 7a00 	vldr	s15, [r7]
 8001f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f68:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f70:	4b43      	ldr	r3, [pc, #268]	; (8002080 <MadgwickAHRSupdate+0xe44>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <MadgwickAHRSupdate+0xe44>)
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8001f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f84:	edd7 7a00 	vldr	s15, [r7]
 8001f88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001f90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f94:	4b3b      	ldr	r3, [pc, #236]	; (8002084 <MadgwickAHRSupdate+0xe48>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9e:	4b39      	ldr	r3, [pc, #228]	; (8002084 <MadgwickAHRSupdate+0xe48>)
 8001fa0:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8001fa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fa8:	edd7 7a00 	vldr	s15, [r7]
 8001fac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb8:	4b33      	ldr	r3, [pc, #204]	; (8002088 <MadgwickAHRSupdate+0xe4c>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	4b31      	ldr	r3, [pc, #196]	; (8002088 <MadgwickAHRSupdate+0xe4c>)
 8001fc4:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	; (800207c <MadgwickAHRSupdate+0xe40>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <MadgwickAHRSupdate+0xe40>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <MadgwickAHRSupdate+0xe44>)
 8001fda:	edd3 6a00 	vldr	s13, [r3]
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <MadgwickAHRSupdate+0xe44>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MadgwickAHRSupdate+0xe48>)
 8001fee:	edd3 6a00 	vldr	s13, [r3]
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <MadgwickAHRSupdate+0xe48>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002000:	4b21      	ldr	r3, [pc, #132]	; (8002088 <MadgwickAHRSupdate+0xe4c>)
 8002002:	edd3 6a00 	vldr	s13, [r3]
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <MadgwickAHRSupdate+0xe4c>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002014:	eeb0 0a67 	vmov.f32	s0, s15
 8002018:	f000 fb6c 	bl	80026f4 <invSqrt>
 800201c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <MadgwickAHRSupdate+0xe40>)
 8002022:	ed93 7a00 	vldr	s14, [r3]
 8002026:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <MadgwickAHRSupdate+0xe40>)
 8002030:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <MadgwickAHRSupdate+0xe44>)
 8002036:	ed93 7a00 	vldr	s14, [r3]
 800203a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MadgwickAHRSupdate+0xe44>)
 8002044:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002048:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MadgwickAHRSupdate+0xe48>)
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <MadgwickAHRSupdate+0xe48>)
 8002058:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <MadgwickAHRSupdate+0xe4c>)
 800205e:	ed93 7a00 	vldr	s14, [r3]
 8002062:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <MadgwickAHRSupdate+0xe4c>)
 800206c:	edc3 7a00 	vstr	s15, [r3]
}
 8002070:	37b8      	adds	r7, #184	; 0xb8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000000 	.word	0x20000000
 800207c:	20000024 	.word	0x20000024
 8002080:	200002e0 	.word	0x200002e0
 8002084:	200002e4 	.word	0x200002e4
 8002088:	200002e8 	.word	0x200002e8

0800208c <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sample_freq) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b09e      	sub	sp, #120	; 0x78
 8002090:	af00      	add	r7, sp, #0
 8002092:	ed87 0a07 	vstr	s0, [r7, #28]
 8002096:	edc7 0a06 	vstr	s1, [r7, #24]
 800209a:	ed87 1a05 	vstr	s2, [r7, #20]
 800209e:	edc7 1a04 	vstr	s3, [r7, #16]
 80020a2:	ed87 2a03 	vstr	s4, [r7, #12]
 80020a6:	edc7 2a02 	vstr	s5, [r7, #8]
 80020aa:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80020ae:	4bec      	ldr	r3, [pc, #944]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	eeb1 7a67 	vneg.f32	s14, s15
 80020b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c0:	4be8      	ldr	r3, [pc, #928]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 80020c2:	edd3 6a00 	vldr	s13, [r3]
 80020c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020d2:	4be5      	ldr	r3, [pc, #916]	; (8002468 <MadgwickAHRSupdateIMU+0x3dc>)
 80020d4:	edd3 6a00 	vldr	s13, [r3]
 80020d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ec:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80020f0:	4bde      	ldr	r3, [pc, #888]	; (800246c <MadgwickAHRSupdateIMU+0x3e0>)
 80020f2:	ed93 7a00 	vldr	s14, [r3]
 80020f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80020fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fe:	4bd9      	ldr	r3, [pc, #868]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 8002100:	edd3 6a00 	vldr	s13, [r3]
 8002104:	edd7 7a05 	vldr	s15, [r7, #20]
 8002108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002110:	4bd5      	ldr	r3, [pc, #852]	; (8002468 <MadgwickAHRSupdateIMU+0x3dc>)
 8002112:	edd3 6a00 	vldr	s13, [r3]
 8002116:	edd7 7a06 	vldr	s15, [r7, #24]
 800211a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002122:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800212e:	4bcf      	ldr	r3, [pc, #828]	; (800246c <MadgwickAHRSupdateIMU+0x3e0>)
 8002130:	ed93 7a00 	vldr	s14, [r3]
 8002134:	edd7 7a06 	vldr	s15, [r7, #24]
 8002138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213c:	4bc8      	ldr	r3, [pc, #800]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 800213e:	edd3 6a00 	vldr	s13, [r3]
 8002142:	edd7 7a05 	vldr	s15, [r7, #20]
 8002146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800214e:	4bc6      	ldr	r3, [pc, #792]	; (8002468 <MadgwickAHRSupdateIMU+0x3dc>)
 8002150:	edd3 6a00 	vldr	s13, [r3]
 8002154:	edd7 7a07 	vldr	s15, [r7, #28]
 8002158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002160:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002168:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800216c:	4bbf      	ldr	r3, [pc, #764]	; (800246c <MadgwickAHRSupdateIMU+0x3e0>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	edd7 7a05 	vldr	s15, [r7, #20]
 8002176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800217a:	4bb9      	ldr	r3, [pc, #740]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 800217c:	edd3 6a00 	vldr	s13, [r3]
 8002180:	edd7 7a06 	vldr	s15, [r7, #24]
 8002184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218c:	4bb5      	ldr	r3, [pc, #724]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 800218e:	edd3 6a00 	vldr	s13, [r3]
 8002192:	edd7 7a07 	vldr	s15, [r7, #28]
 8002196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80021aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80021ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b6:	d10e      	bne.n	80021d6 <MadgwickAHRSupdateIMU+0x14a>
 80021b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80021bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	d107      	bne.n	80021d6 <MadgwickAHRSupdateIMU+0x14a>
 80021c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	f000 81e5 	beq.w	80025a0 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80021d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80021da:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021de:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f6:	eeb0 0a67 	vmov.f32	s0, s15
 80021fa:	f000 fa7b 	bl	80026f4 <invSqrt>
 80021fe:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 8002202:	ed97 7a04 	vldr	s14, [r7, #16]
 8002206:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800220a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220e:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 8002212:	ed97 7a03 	vldr	s14, [r7, #12]
 8002216:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;   
 8002222:	ed97 7a02 	vldr	s14, [r7, #8]
 8002226:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222e:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8002232:	4b8e      	ldr	r3, [pc, #568]	; (800246c <MadgwickAHRSupdateIMU+0x3e0>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800223c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8002240:	4b87      	ldr	r3, [pc, #540]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800224a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 800224e:	4b85      	ldr	r3, [pc, #532]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002258:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 800225c:	4b82      	ldr	r3, [pc, #520]	; (8002468 <MadgwickAHRSupdateIMU+0x3dc>)
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002266:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 800226a:	4b80      	ldr	r3, [pc, #512]	; (800246c <MadgwickAHRSupdateIMU+0x3e0>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002278:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 800227c:	4b78      	ldr	r3, [pc, #480]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 800228e:	4b75      	ldr	r3, [pc, #468]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800229c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 80022a0:	4b6f      	ldr	r3, [pc, #444]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 80022b2:	4b6c      	ldr	r3, [pc, #432]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 80022c4:	4b69      	ldr	r3, [pc, #420]	; (800246c <MadgwickAHRSupdateIMU+0x3e0>)
 80022c6:	ed93 7a00 	vldr	s14, [r3]
 80022ca:	4b68      	ldr	r3, [pc, #416]	; (800246c <MadgwickAHRSupdateIMU+0x3e0>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 80022d8:	4b61      	ldr	r3, [pc, #388]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	4b60      	ldr	r3, [pc, #384]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 80022ec:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	4b5c      	ldr	r3, [pc, #368]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 80022f4:	edd3 7a00 	vldr	s15, [r3]
 80022f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8002300:	4b59      	ldr	r3, [pc, #356]	; (8002468 <MadgwickAHRSupdateIMU+0x3dc>)
 8002302:	ed93 7a00 	vldr	s14, [r3]
 8002306:	4b58      	ldr	r3, [pc, #352]	; (8002468 <MadgwickAHRSupdateIMU+0x3dc>)
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002310:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002314:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002318:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800231c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002320:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002324:	edd7 7a04 	vldr	s15, [r7, #16]
 8002328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002330:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002334:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002340:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002344:	edd7 7a03 	vldr	s15, [r7, #12]
 8002348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002350:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002354:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002358:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800235c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002360:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002364:	edd7 7a04 	vldr	s15, [r7, #16]
 8002368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002370:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002374:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002378:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800237c:	4b38      	ldr	r3, [pc, #224]	; (8002460 <MadgwickAHRSupdateIMU+0x3d4>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800238e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002396:	ee37 7a67 	vsub.f32	s14, s14, s15
 800239a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80023a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80023b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c2:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80023c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80023d6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023da:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80023de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <MadgwickAHRSupdateIMU+0x3d8>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ec:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80023f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002400:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002410:	edd7 7a03 	vldr	s15, [r7, #12]
 8002414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002418:	ee37 7a67 	vsub.f32	s14, s14, s15
 800241c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002424:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002428:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800242c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002434:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002438:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800243c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002444:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002448:	edd7 7a02 	vldr	s15, [r7, #8]
 800244c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002454:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002458:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800245c:	e008      	b.n	8002470 <MadgwickAHRSupdateIMU+0x3e4>
 800245e:	bf00      	nop
 8002460:	200002e0 	.word	0x200002e0
 8002464:	200002e4 	.word	0x200002e4
 8002468:	200002e8 	.word	0x200002e8
 800246c:	20000024 	.word	0x20000024
 8002470:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002474:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002478:	4b99      	ldr	r3, [pc, #612]	; (80026e0 <MadgwickAHRSupdateIMU+0x654>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002482:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002486:	edd7 7a04 	vldr	s15, [r7, #16]
 800248a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800248e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002492:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002496:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800249a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800249e:	4b90      	ldr	r3, [pc, #576]	; (80026e0 <MadgwickAHRSupdateIMU+0x654>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ac:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80024b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024bc:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80024c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024c4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80024e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ec:	eeb0 0a67 	vmov.f32	s0, s15
 80024f0:	f000 f900 	bl	80026f4 <invSqrt>
 80024f4:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 80024f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80024fc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 8002508:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800250c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002514:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 8002518:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800251c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002524:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 8002528:	ed97 7a08 	vldr	s14, [r7, #32]
 800252c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002534:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002538:	4b6a      	ldr	r3, [pc, #424]	; (80026e4 <MadgwickAHRSupdateIMU+0x658>)
 800253a:	ed93 7a00 	vldr	s14, [r3]
 800253e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 8002552:	4b64      	ldr	r3, [pc, #400]	; (80026e4 <MadgwickAHRSupdateIMU+0x658>)
 8002554:	ed93 7a00 	vldr	s14, [r3]
 8002558:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800255c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002560:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002568:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 800256c:	4b5d      	ldr	r3, [pc, #372]	; (80026e4 <MadgwickAHRSupdateIMU+0x658>)
 800256e:	ed93 7a00 	vldr	s14, [r3]
 8002572:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800257e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002582:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 8002586:	4b57      	ldr	r3, [pc, #348]	; (80026e4 <MadgwickAHRSupdateIMU+0x658>)
 8002588:	ed93 7a00 	vldr	s14, [r3]
 800258c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002594:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 80025a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ac:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025b4:	4b4c      	ldr	r3, [pc, #304]	; (80026e8 <MadgwickAHRSupdateIMU+0x65c>)
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <MadgwickAHRSupdateIMU+0x65c>)
 80025c0:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 80025c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80025cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d0:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d8:	4b44      	ldr	r3, [pc, #272]	; (80026ec <MadgwickAHRSupdateIMU+0x660>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e2:	4b42      	ldr	r3, [pc, #264]	; (80026ec <MadgwickAHRSupdateIMU+0x660>)
 80025e4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 80025e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025f4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80025f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fc:	4b3c      	ldr	r3, [pc, #240]	; (80026f0 <MadgwickAHRSupdateIMU+0x664>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	4b3a      	ldr	r3, [pc, #232]	; (80026f0 <MadgwickAHRSupdateIMU+0x664>)
 8002608:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 800260c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002610:	edd7 7a01 	vldr	s15, [r7, #4]
 8002614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002618:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800261c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002620:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <MadgwickAHRSupdateIMU+0x654>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800262a:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <MadgwickAHRSupdateIMU+0x654>)
 800262c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <MadgwickAHRSupdateIMU+0x65c>)
 8002632:	ed93 7a00 	vldr	s14, [r3]
 8002636:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <MadgwickAHRSupdateIMU+0x65c>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <MadgwickAHRSupdateIMU+0x660>)
 8002642:	edd3 6a00 	vldr	s13, [r3]
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <MadgwickAHRSupdateIMU+0x660>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002650:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002654:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <MadgwickAHRSupdateIMU+0x664>)
 8002656:	edd3 6a00 	vldr	s13, [r3]
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <MadgwickAHRSupdateIMU+0x664>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <MadgwickAHRSupdateIMU+0x654>)
 800266a:	edd3 6a00 	vldr	s13, [r3]
 800266e:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <MadgwickAHRSupdateIMU+0x654>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	eeb0 0a67 	vmov.f32	s0, s15
 8002680:	f000 f838 	bl	80026f4 <invSqrt>
 8002684:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <MadgwickAHRSupdateIMU+0x65c>)
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MadgwickAHRSupdateIMU+0x65c>)
 8002698:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <MadgwickAHRSupdateIMU+0x660>)
 800269e:	ed93 7a00 	vldr	s14, [r3]
 80026a2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <MadgwickAHRSupdateIMU+0x660>)
 80026ac:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	; (80026f0 <MadgwickAHRSupdateIMU+0x664>)
 80026b2:	ed93 7a00 	vldr	s14, [r3]
 80026b6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <MadgwickAHRSupdateIMU+0x664>)
 80026c0:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <MadgwickAHRSupdateIMU+0x654>)
 80026c6:	ed93 7a00 	vldr	s14, [r3]
 80026ca:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <MadgwickAHRSupdateIMU+0x654>)
 80026d4:	edc3 7a00 	vstr	s15, [r3]
}
 80026d8:	bf00      	nop
 80026da:	3778      	adds	r7, #120	; 0x78
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200002e8 	.word	0x200002e8
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000024 	.word	0x20000024
 80026ec:	200002e0 	.word	0x200002e0
 80026f0:	200002e4 	.word	0x200002e4

080026f4 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80026fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002702:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	105a      	asrs	r2, r3, #1
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <invSqrt+0x74>)
 8002720:	1a9b      	subs	r3, r3, r2
 8002722:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800272c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002730:	edd7 7a05 	vldr	s15, [r7, #20]
 8002734:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002738:	edd7 7a04 	vldr	s15, [r7, #16]
 800273c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002740:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002748:	edd7 7a04 	vldr	s15, [r7, #16]
 800274c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002750:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	ee07 3a90 	vmov	s15, r3
}
 800275a:	eeb0 0a67 	vmov.f32	s0, s15
 800275e:	371c      	adds	r7, #28
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	5f3759df 	.word	0x5f3759df

0800276c <MCP4728_Write_GeneralCall>:
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, data, sizeof(data), HAL_MAX_DELAY);
	return ret;
}

void MCP4728_Write_GeneralCall(I2C_HandleTypeDef *I2CHandler, uint8_t command) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af02      	add	r7, sp, #8
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	70fb      	strb	r3, [r7, #3]
	uint16_t zeoo = 0x00;
 8002778:	2300      	movs	r3, #0
 800277a:	81fb      	strh	r3, [r7, #14]
	uint16_t sizey = 0x1;
 800277c:	2301      	movs	r3, #1
 800277e:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(I2CHandler, zeoo, &command, sizey, HAL_MAX_DELAY);
 8002780:	89bb      	ldrh	r3, [r7, #12]
 8002782:	1cfa      	adds	r2, r7, #3
 8002784:	89f9      	ldrh	r1, [r7, #14]
 8002786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800278a:	9000      	str	r0, [sp, #0]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f003 f991 	bl	8005ab4 <HAL_I2C_Master_Transmit>

}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <MCP4728_Write_AllChannels_Diff>:
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Write_AllChannels_Diff(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 800279a:	b580      	push	{r7, lr}
 800279c:	b08a      	sub	sp, #40	; 0x28
 800279e:	af02      	add	r7, sp, #8
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	4638      	mov	r0, r7
 80027a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf[8];
	for(uint8_t i = 0; i < 4; i++){
 80027a8:	2300      	movs	r3, #0
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e024      	b.n	80027f8 <MCP4728_Write_AllChannels_Diff+0x5e>
		uint8_t lowByte = output.channel_Val[i] & 0xff;
 80027ae:	7ffb      	ldrb	r3, [r7, #31]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	3320      	adds	r3, #32
 80027b4:	443b      	add	r3, r7
 80027b6:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80027ba:	77bb      	strb	r3, [r7, #30]
		uint8_t highByte = (output.channel_Val[i] >> 8);
 80027bc:	7ffb      	ldrb	r3, [r7, #31]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	3320      	adds	r3, #32
 80027c2:	443b      	add	r3, r7
 80027c4:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	777b      	strb	r3, [r7, #29]
		buf[i*2] =  0x0f&highByte;
 80027ce:	7ffb      	ldrb	r3, [r7, #31]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	7f7a      	ldrb	r2, [r7, #29]
 80027d4:	f002 020f 	and.w	r2, r2, #15
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	3320      	adds	r3, #32
 80027dc:	443b      	add	r3, r7
 80027de:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)+1] = lowByte;
 80027e2:	7ffb      	ldrb	r3, [r7, #31]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	3301      	adds	r3, #1
 80027e8:	3320      	adds	r3, #32
 80027ea:	443b      	add	r3, r7
 80027ec:	7fba      	ldrb	r2, [r7, #30]
 80027ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 80027f2:	7ffb      	ldrb	r3, [r7, #31]
 80027f4:	3301      	adds	r3, #1
 80027f6:	77fb      	strb	r3, [r7, #31]
 80027f8:	7ffb      	ldrb	r3, [r7, #31]
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d9d7      	bls.n	80027ae <MCP4728_Write_AllChannels_Diff+0x14>
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 80027fe:	f107 0214 	add.w	r2, r7, #20
 8002802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2308      	movs	r3, #8
 800280a:	21c8      	movs	r1, #200	; 0xc8
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f003 f951 	bl	8005ab4 <HAL_I2C_Master_Transmit>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 8002812:	2108      	movs	r1, #8
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f7ff ffa9 	bl	800276c <MCP4728_Write_GeneralCall>
}
 800281a:	bf00      	nop
 800281c:	3720      	adds	r7, #32
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <MCP4728_Init>:
	buf[2] = lowByte;
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Init(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 8002822:	b580      	push	{r7, lr}
 8002824:	b08a      	sub	sp, #40	; 0x28
 8002826:	af02      	add	r7, sp, #8
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	4638      	mov	r0, r7
 800282c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_RESET);
 8002830:	2106      	movs	r1, #6
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff ff9a 	bl	800276c <MCP4728_Write_GeneralCall>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_WAKEUP);
 8002838:	2109      	movs	r1, #9
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff ff96 	bl	800276c <MCP4728_Write_GeneralCall>
	//MCP4728_Write_GeneralCall(I2CHandler, 0x0C);

	uint8_t buf[9];
	buf[0] = MCP4728_CMD_DACWRITE_SEQ;
 8002840:	2350      	movs	r3, #80	; 0x50
 8002842:	753b      	strb	r3, [r7, #20]
	for(uint8_t i = 1; i <= 4; i++){
 8002844:	2301      	movs	r3, #1
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e015      	b.n	8002876 <MCP4728_Init+0x54>
		buf[(i*2)+1] = 0x00;
 800284a:	7ffb      	ldrb	r3, [r7, #31]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	3301      	adds	r3, #1
 8002850:	3320      	adds	r3, #32
 8002852:	443b      	add	r3, r7
 8002854:	2200      	movs	r2, #0
 8002856:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)] = (0 << 7) | ((i-1)<<4) | 0x0;
 800285a:	7ffb      	ldrb	r3, [r7, #31]
 800285c:	3b01      	subs	r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	7ffb      	ldrb	r3, [r7, #31]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	3320      	adds	r3, #32
 800286a:	443b      	add	r3, r7
 800286c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 1; i <= 4; i++){
 8002870:	7ffb      	ldrb	r3, [r7, #31]
 8002872:	3301      	adds	r3, #1
 8002874:	77fb      	strb	r3, [r7, #31]
 8002876:	7ffb      	ldrb	r3, [r7, #31]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d9e6      	bls.n	800284a <MCP4728_Init+0x28>
	}

	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 800287c:	f107 0214 	add.w	r2, r7, #20
 8002880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2309      	movs	r3, #9
 8002888:	21c8      	movs	r1, #200	; 0xc8
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f003 f912 	bl	8005ab4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(I2CHandler, 0xC8, buf, sizeof(buf), HAL_MAX_DELAY);
	//C0, C2, C4, C6, C8, CA, CC, CE
	//60, 61, 62, 63, 64, 65, 66, 67
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 8002890:	2108      	movs	r1, #8
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7ff ff6a 	bl	800276c <MCP4728_Write_GeneralCall>
}
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	461a      	mov	r2, r3
 80028ac:	460b      	mov	r3, r1
 80028ae:	72fb      	strb	r3, [r7, #11]
 80028b0:	4613      	mov	r3, r2
 80028b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685c      	ldr	r4, [r3, #4]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68d8      	ldr	r0, [r3, #12]
 80028bc:	893b      	ldrh	r3, [r7, #8]
 80028be:	7af9      	ldrb	r1, [r7, #11]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	47a0      	blx	r4
 80028c4:	6178      	str	r0, [r7, #20]

  return ret;
 80028c6:	697b      	ldr	r3, [r7, #20]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd90      	pop	{r4, r7, pc}

080028d0 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	461a      	mov	r2, r3
 80028dc:	460b      	mov	r3, r1
 80028de:	72fb      	strb	r3, [r7, #11]
 80028e0:	4613      	mov	r3, r2
 80028e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681c      	ldr	r4, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68d8      	ldr	r0, [r3, #12]
 80028ec:	893b      	ldrh	r3, [r7, #8]
 80028ee:	7af9      	ldrb	r1, [r7, #11]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	47a0      	blx	r4
 80028f4:	6178      	str	r0, [r7, #20]

  return ret;
 80028f6:	697b      	ldr	r3, [r7, #20]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}

08002900 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 800290a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800290e:	ee07 3a90 	vmov	s15, r3
 8002912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002916:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800292c <lsm9ds1_from_fs4g_to_mg+0x2c>
 800291a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800291e:	eeb0 0a67 	vmov.f32	s0, s15
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	3df9db23 	.word	0x3df9db23

08002930 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 800293a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002946:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800295c <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 800294a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800294e:	eeb0 0a67 	vmov.f32	s0, s15
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	428c0000 	.word	0x428c0000

08002960 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 800296a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002976:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800298c <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 800297a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800297e:	eeb0 0a67 	vmov.f32	s0, s15
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	3f147ae1 	.word	0x3f147ae1

08002990 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800299c:	f107 0208 	add.w	r2, r7, #8
 80029a0:	2301      	movs	r3, #1
 80029a2:	2110      	movs	r1, #16
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff7b 	bl	80028a0 <lsm9ds1_read_reg>
 80029aa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10f      	bne.n	80029d2 <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	7a3b      	ldrb	r3, [r7, #8]
 80029bc:	f362 03c4 	bfi	r3, r2, #3, #2
 80029c0:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80029c2:	f107 0208 	add.w	r2, r7, #8
 80029c6:	2301      	movs	r3, #1
 80029c8:	2110      	movs	r1, #16
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ff80 	bl	80028d0 <lsm9ds1_write_reg>
 80029d0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80029e8:	f107 0210 	add.w	r2, r7, #16
 80029ec:	2301      	movs	r3, #1
 80029ee:	2110      	movs	r1, #16
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7ff ff55 	bl	80028a0 <lsm9ds1_read_reg>
 80029f6:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	7c3b      	ldrb	r3, [r7, #16]
 8002a08:	f362 1347 	bfi	r3, r2, #5, #3
 8002a0c:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002a0e:	f107 0210 	add.w	r2, r7, #16
 8002a12:	2301      	movs	r3, #1
 8002a14:	2110      	movs	r1, #16
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7ff ff5a 	bl	80028d0 <lsm9ds1_write_reg>
 8002a1c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d107      	bne.n	8002a34 <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002a24:	f107 020c 	add.w	r2, r7, #12
 8002a28:	2301      	movs	r3, #1
 8002a2a:	2120      	movs	r1, #32
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff37 	bl	80028a0 <lsm9ds1_read_reg>
 8002a32:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d110      	bne.n	8002a5c <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	7b3b      	ldrb	r3, [r7, #12]
 8002a46:	f362 1347 	bfi	r3, r2, #5, #3
 8002a4a:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	2301      	movs	r3, #1
 8002a52:	2120      	movs	r1, #32
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff3b 	bl	80028d0 <lsm9ds1_write_reg>
 8002a5a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002a62:	f107 0208 	add.w	r2, r7, #8
 8002a66:	2301      	movs	r3, #1
 8002a68:	2112      	movs	r1, #18
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ff18 	bl	80028a0 <lsm9ds1_read_reg>
 8002a70:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d111      	bne.n	8002a9c <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	09db      	lsrs	r3, r3, #7
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	7a3b      	ldrb	r3, [r7, #8]
 8002a86:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a8a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002a8c:	f107 0208 	add.w	r2, r7, #8
 8002a90:	2301      	movs	r3, #1
 8002a92:	2112      	movs	r1, #18
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff1b 	bl	80028d0 <lsm9ds1_write_reg>
 8002a9a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8002a9c:	697b      	ldr	r3, [r7, #20]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002ab2:	f107 0208 	add.w	r2, r7, #8
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	2120      	movs	r1, #32
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fef0 	bl	80028a0 <lsm9ds1_read_reg>
 8002ac0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10f      	bne.n	8002ae8 <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	7a3b      	ldrb	r3, [r7, #8]
 8002ad2:	f362 03c4 	bfi	r3, r2, #3, #2
 8002ad6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002ad8:	f107 0208 	add.w	r2, r7, #8
 8002adc:	2301      	movs	r3, #1
 8002ade:	2120      	movs	r1, #32
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff fef5 	bl	80028d0 <lsm9ds1_write_reg>
 8002ae6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b088      	sub	sp, #32
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002b00:	f107 0218 	add.w	r2, r7, #24
 8002b04:	2301      	movs	r3, #1
 8002b06:	2122      	movs	r1, #34	; 0x22
 8002b08:	68b8      	ldr	r0, [r7, #8]
 8002b0a:	f7ff fec9 	bl	80028a0 <lsm9ds1_read_reg>
 8002b0e:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	7e3b      	ldrb	r3, [r7, #24]
 8002b20:	f362 1386 	bfi	r3, r2, #6, #1
 8002b24:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002b26:	f107 0218 	add.w	r2, r7, #24
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	2122      	movs	r1, #34	; 0x22
 8002b2e:	68b8      	ldr	r0, [r7, #8]
 8002b30:	f7ff fece 	bl	80028d0 <lsm9ds1_write_reg>
 8002b34:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8002b3c:	f107 0214 	add.w	r2, r7, #20
 8002b40:	2301      	movs	r3, #1
 8002b42:	2124      	movs	r1, #36	; 0x24
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff feab 	bl	80028a0 <lsm9ds1_read_reg>
 8002b4a:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d119      	bne.n	8002b86 <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	7d3b      	ldrb	r3, [r7, #20]
 8002b60:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b64:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	7d3b      	ldrb	r3, [r7, #20]
 8002b70:	f362 1386 	bfi	r3, r2, #6, #1
 8002b74:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8002b76:	f107 0214 	add.w	r2, r7, #20
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	2124      	movs	r1, #36	; 0x24
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f7ff fea6 	bl	80028d0 <lsm9ds1_write_reg>
 8002b84:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 8002b86:	69fb      	ldr	r3, [r7, #28]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002b9c:	f107 0210 	add.w	r2, r7, #16
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	2120      	movs	r1, #32
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fe7b 	bl	80028a0 <lsm9ds1_read_reg>
 8002baa:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d125      	bne.n	8002bfe <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	08db      	lsrs	r3, r3, #3
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	7c3b      	ldrb	r3, [r7, #16]
 8002bbe:	f362 0341 	bfi	r3, r2, #1, #1
 8002bc2:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	7c3b      	ldrb	r3, [r7, #16]
 8002bce:	f362 0384 	bfi	r3, r2, #2, #3
 8002bd2:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	091b      	lsrs	r3, r3, #4
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	7c3b      	ldrb	r3, [r7, #16]
 8002be0:	f362 1346 	bfi	r3, r2, #5, #2
 8002be4:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 8002be6:	7c3b      	ldrb	r3, [r7, #16]
 8002be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bec:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002bee:	f107 0210 	add.w	r2, r7, #16
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	2120      	movs	r1, #32
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fe6a 	bl	80028d0 <lsm9ds1_write_reg>
 8002bfc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8002c04:	f107 020c 	add.w	r2, r7, #12
 8002c08:	2301      	movs	r3, #1
 8002c0a:	2122      	movs	r1, #34	; 0x22
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff fe47 	bl	80028a0 <lsm9ds1_read_reg>
 8002c12:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d111      	bne.n	8002c3e <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	099b      	lsrs	r3, r3, #6
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	7b3b      	ldrb	r3, [r7, #12]
 8002c28:	f362 0301 	bfi	r3, r2, #0, #2
 8002c2c:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8002c2e:	f107 020c 	add.w	r2, r7, #12
 8002c32:	2301      	movs	r3, #1
 8002c34:	2122      	movs	r1, #34	; 0x22
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fe4a 	bl	80028d0 <lsm9ds1_write_reg>
 8002c3c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8002c44:	f107 0208 	add.w	r2, r7, #8
 8002c48:	2301      	movs	r3, #1
 8002c4a:	2123      	movs	r1, #35	; 0x23
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff fe27 	bl	80028a0 <lsm9ds1_read_reg>
 8002c52:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d110      	bne.n	8002c7c <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	7a3b      	ldrb	r3, [r7, #8]
 8002c66:	f362 0383 	bfi	r3, r2, #2, #2
 8002c6a:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8002c6c:	f107 0208 	add.w	r2, r7, #8
 8002c70:	2301      	movs	r3, #1
 8002c72:	2123      	movs	r1, #35	; 0x23
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fe2b 	bl	80028d0 <lsm9ds1_write_reg>
 8002c7a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 8002c7c:	697b      	ldr	r3, [r7, #20]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8002c92:	f107 0208 	add.w	r2, r7, #8
 8002c96:	2301      	movs	r3, #1
 8002c98:	2121      	movs	r1, #33	; 0x21
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fe00 	bl	80028a0 <lsm9ds1_read_reg>
 8002ca0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10f      	bne.n	8002cc8 <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	7a3b      	ldrb	r3, [r7, #8]
 8002cb2:	f362 1346 	bfi	r3, r2, #5, #2
 8002cb6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8002cb8:	f107 0208 	add.w	r2, r7, #8
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	2121      	movs	r1, #33	; 0x21
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff fe05 	bl	80028d0 <lsm9ds1_write_reg>
 8002cc6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b086      	sub	sp, #24
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8002cdc:	f107 020c 	add.w	r2, r7, #12
 8002ce0:	2306      	movs	r3, #6
 8002ce2:	2118      	movs	r1, #24
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff fddb 	bl	80028a0 <lsm9ds1_read_reg>
 8002cea:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002cec:	7b7b      	ldrb	r3, [r7, #13]
 8002cee:	b21a      	sxth	r2, r3
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	021b      	lsls	r3, r3, #8
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	7b3b      	ldrb	r3, [r7, #12]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	b21a      	sxth	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	3302      	adds	r3, #2
 8002d14:	b212      	sxth	r2, r2
 8002d16:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	3302      	adds	r3, #2
 8002d32:	b212      	sxth	r2, r2
 8002d34:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002d36:	7c7a      	ldrb	r2, [r7, #17]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	b212      	sxth	r2, r2
 8002d3e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	3304      	adds	r3, #4
 8002d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	7c3b      	ldrb	r3, [r7, #16]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	b212      	sxth	r2, r2
 8002d5c:	801a      	strh	r2, [r3, #0]

  return ret;
 8002d5e:	697b      	ldr	r3, [r7, #20]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 8002d72:	f107 020c 	add.w	r2, r7, #12
 8002d76:	2306      	movs	r3, #6
 8002d78:	2128      	movs	r1, #40	; 0x28
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff fd90 	bl	80028a0 <lsm9ds1_read_reg>
 8002d80:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002d82:	7b7b      	ldrb	r3, [r7, #13]
 8002d84:	b21a      	sxth	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	7b3b      	ldrb	r3, [r7, #12]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	b21a      	sxth	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	3302      	adds	r3, #2
 8002daa:	b212      	sxth	r2, r2
 8002dac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	3302      	adds	r3, #2
 8002db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	7bbb      	ldrb	r3, [r7, #14]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	3302      	adds	r3, #2
 8002dc8:	b212      	sxth	r2, r2
 8002dca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002dcc:	7c7a      	ldrb	r2, [r7, #17]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	b212      	sxth	r2, r2
 8002dd4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	7c3b      	ldrb	r3, [r7, #16]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	3304      	adds	r3, #4
 8002df0:	b212      	sxth	r2, r2
 8002df2:	801a      	strh	r2, [r3, #0]

  return ret;
 8002df4:	697b      	ldr	r3, [r7, #20]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b086      	sub	sp, #24
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 8002e08:	f107 020c 	add.w	r2, r7, #12
 8002e0c:	2306      	movs	r3, #6
 8002e0e:	2128      	movs	r1, #40	; 0x28
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fd45 	bl	80028a0 <lsm9ds1_read_reg>
 8002e16:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002e18:	7b7b      	ldrb	r3, [r7, #13]
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	7b3b      	ldrb	r3, [r7, #12]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	b21a      	sxth	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	3302      	adds	r3, #2
 8002e40:	b212      	sxth	r2, r2
 8002e42:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	3302      	adds	r3, #2
 8002e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	7bbb      	ldrb	r3, [r7, #14]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	b212      	sxth	r2, r2
 8002e60:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002e62:	7c7a      	ldrb	r2, [r7, #17]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	3304      	adds	r3, #4
 8002e68:	b212      	sxth	r2, r2
 8002e6a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	7c3b      	ldrb	r3, [r7, #16]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4413      	add	r3, r2
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	3304      	adds	r3, #4
 8002e86:	b212      	sxth	r2, r2
 8002e88:	801a      	strh	r2, [r3, #0]

  return ret;
 8002e8a:	697b      	ldr	r3, [r7, #20]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	210f      	movs	r1, #15
 8002ea6:	68b8      	ldr	r0, [r7, #8]
 8002ea8:	f7ff fcfa 	bl	80028a0 <lsm9ds1_read_reg>
 8002eac:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	2301      	movs	r3, #1
 8002eba:	210f      	movs	r1, #15
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fcef 	bl	80028a0 <lsm9ds1_read_reg>
 8002ec2:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8002ec4:	697b      	ldr	r3, [r7, #20]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8002ede:	2301      	movs	r3, #1
 8002ee0:	2117      	movs	r1, #23
 8002ee2:	68b8      	ldr	r0, [r7, #8]
 8002ee4:	f7ff fcdc 	bl	80028a0 <lsm9ds1_read_reg>
 8002ee8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d106      	bne.n	8002efe <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8002ef0:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	2127      	movs	r1, #39	; 0x27
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff fcd2 	bl	80028a0 <lsm9ds1_read_reg>
 8002efc:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002efe:	697b      	ldr	r3, [r7, #20]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002f16:	f107 0214 	add.w	r2, r7, #20
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	2122      	movs	r1, #34	; 0x22
 8002f1e:	68b8      	ldr	r0, [r7, #8]
 8002f20:	f7ff fcbe 	bl	80028a0 <lsm9ds1_read_reg>
 8002f24:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	7d3b      	ldrb	r3, [r7, #20]
 8002f36:	f362 0300 	bfi	r3, r2, #0, #1
 8002f3a:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002f3c:	f107 0214 	add.w	r2, r7, #20
 8002f40:	2301      	movs	r3, #1
 8002f42:	2122      	movs	r1, #34	; 0x22
 8002f44:	68b8      	ldr	r0, [r7, #8]
 8002f46:	f7ff fcc3 	bl	80028d0 <lsm9ds1_write_reg>
 8002f4a:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d107      	bne.n	8002f62 <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002f52:	f107 0218 	add.w	r2, r7, #24
 8002f56:	2301      	movs	r3, #1
 8002f58:	2121      	movs	r1, #33	; 0x21
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fca0 	bl	80028a0 <lsm9ds1_read_reg>
 8002f60:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	7e3b      	ldrb	r3, [r7, #24]
 8002f72:	f362 0382 	bfi	r3, r2, #2, #1
 8002f76:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002f78:	f107 0218 	add.w	r2, r7, #24
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	2121      	movs	r1, #33	; 0x21
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f7ff fca5 	bl	80028d0 <lsm9ds1_write_reg>
 8002f86:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002f88:	69fb      	ldr	r3, [r7, #28]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3720      	adds	r7, #32
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b088      	sub	sp, #32
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002f9e:	f107 0214 	add.w	r2, r7, #20
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	2122      	movs	r1, #34	; 0x22
 8002fa6:	68b8      	ldr	r0, [r7, #8]
 8002fa8:	f7ff fc7a 	bl	80028a0 <lsm9ds1_read_reg>
 8002fac:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d114      	bne.n	8002fde <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002fb4:	f107 0218 	add.w	r2, r7, #24
 8002fb8:	2301      	movs	r3, #1
 8002fba:	2121      	movs	r1, #33	; 0x21
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fc6f 	bl	80028a0 <lsm9ds1_read_reg>
 8002fc2:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8002fc4:	7e3b      	ldrb	r3, [r7, #24]
 8002fc6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	7d3b      	ldrb	r3, [r7, #20]
 8002fce:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002fde:	69fb      	ldr	r3, [r7, #28]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002ff4:	f107 0208 	add.w	r2, r7, #8
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	2110      	movs	r1, #16
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fc4f 	bl	80028a0 <lsm9ds1_read_reg>
 8003002:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	b2da      	uxtb	r2, r3
 8003012:	7a3b      	ldrb	r3, [r7, #8]
 8003014:	f362 0301 	bfi	r3, r2, #0, #2
 8003018:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800301a:	f107 0208 	add.w	r2, r7, #8
 800301e:	2301      	movs	r3, #1
 8003020:	2110      	movs	r1, #16
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fc54 	bl	80028d0 <lsm9ds1_write_reg>
 8003028:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8003040:	f107 0210 	add.w	r2, r7, #16
 8003044:	2301      	movs	r3, #1
 8003046:	2111      	movs	r1, #17
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fc29 	bl	80028a0 <lsm9ds1_read_reg>
 800304e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	f003 0303 	and.w	r3, r3, #3
 800305c:	b2da      	uxtb	r2, r3
 800305e:	7c3b      	ldrb	r3, [r7, #16]
 8003060:	f362 0301 	bfi	r3, r2, #0, #2
 8003064:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8003066:	f107 0210 	add.w	r2, r7, #16
 800306a:	2301      	movs	r3, #1
 800306c:	2111      	movs	r1, #17
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7ff fc2e 	bl	80028d0 <lsm9ds1_write_reg>
 8003074:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d107      	bne.n	800308c <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800307c:	f107 020c 	add.w	r2, r7, #12
 8003080:	2301      	movs	r3, #1
 8003082:	2112      	movs	r1, #18
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fc0b 	bl	80028a0 <lsm9ds1_read_reg>
 800308a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d110      	bne.n	80030b4 <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	7b3b      	ldrb	r3, [r7, #12]
 800309e:	f362 1386 	bfi	r3, r2, #6, #1
 80030a2:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80030a4:	f107 020c 	add.w	r2, r7, #12
 80030a8:	2301      	movs	r3, #1
 80030aa:	2112      	movs	r1, #18
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fc0f 	bl	80028d0 <lsm9ds1_write_reg>
 80030b2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 80030b4:	697b      	ldr	r3, [r7, #20]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b084      	sub	sp, #16
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	460b      	mov	r3, r1
 80030c8:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80030ca:	f107 0208 	add.w	r2, r7, #8
 80030ce:	2301      	movs	r3, #1
 80030d0:	2112      	movs	r1, #18
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fbe4 	bl	80028a0 <lsm9ds1_read_reg>
 80030d8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10f      	bne.n	8003100 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	7a3b      	ldrb	r3, [r7, #8]
 80030ea:	f362 0303 	bfi	r3, r2, #0, #4
 80030ee:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80030f0:	f107 0208 	add.w	r2, r7, #8
 80030f4:	2301      	movs	r3, #1
 80030f6:	2112      	movs	r1, #18
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff fbe9 	bl	80028d0 <lsm9ds1_write_reg>
 80030fe:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b084      	sub	sp, #16
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8003116:	f107 0208 	add.w	r2, r7, #8
 800311a:	2301      	movs	r3, #1
 800311c:	2120      	movs	r1, #32
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fbbe 	bl	80028a0 <lsm9ds1_read_reg>
 8003124:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d118      	bne.n	800315e <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	b2da      	uxtb	r2, r3
 8003134:	7a3b      	ldrb	r3, [r7, #8]
 8003136:	f362 0301 	bfi	r3, r2, #0, #2
 800313a:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	b2da      	uxtb	r2, r3
 8003146:	7a3b      	ldrb	r3, [r7, #8]
 8003148:	f362 0382 	bfi	r3, r2, #2, #1
 800314c:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800314e:	f107 0208 	add.w	r2, r7, #8
 8003152:	2301      	movs	r3, #1
 8003154:	2120      	movs	r1, #32
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7ff fbba 	bl	80028d0 <lsm9ds1_write_reg>
 800315c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 800315e:	68fb      	ldr	r3, [r7, #12]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8003174:	f107 0208 	add.w	r2, r7, #8
 8003178:	2301      	movs	r3, #1
 800317a:	2121      	movs	r1, #33	; 0x21
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fb8f 	bl	80028a0 <lsm9ds1_read_reg>
 8003182:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	b2da      	uxtb	r2, r3
 8003192:	7a3b      	ldrb	r3, [r7, #8]
 8003194:	f362 0382 	bfi	r3, r2, #2, #1
 8003198:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 800319a:	f107 0208 	add.w	r2, r7, #8
 800319e:	2301      	movs	r3, #1
 80031a0:	2121      	movs	r1, #33	; 0x21
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff fb94 	bl	80028d0 <lsm9ds1_write_reg>
 80031a8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 80031aa:	68fb      	ldr	r3, [r7, #12]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80031c0:	f107 0208 	add.w	r2, r7, #8
 80031c4:	2301      	movs	r3, #1
 80031c6:	2121      	movs	r1, #33	; 0x21
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fb69 	bl	80028a0 <lsm9ds1_read_reg>
 80031ce:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d118      	bne.n	8003208 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	7a3b      	ldrb	r3, [r7, #8]
 80031e2:	f362 13c7 	bfi	r3, r2, #7, #1
 80031e6:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	7a3b      	ldrb	r3, [r7, #8]
 80031f2:	f362 1346 	bfi	r3, r2, #5, #2
 80031f6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80031f8:	f107 0208 	add.w	r2, r7, #8
 80031fc:	2301      	movs	r3, #1
 80031fe:	2121      	movs	r1, #33	; 0x21
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff fb65 	bl	80028d0 <lsm9ds1_write_reg>
 8003206:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8003208:	68fb      	ldr	r3, [r7, #12]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <ADC_ADVREGEN>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void ADC_ADVREGEN(ADC_TypeDef* adc) {
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
	adc->CR &= ~ADC_CR_ADVREGEN;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	609a      	str	r2, [r3, #8]
	adc->CR |= 0x1UL << ADC_CR_ADVREGEN_Pos;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	609a      	str	r2, [r3, #8]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <ADC_Read>:

static void ADC_Read(void) {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
//	ADC1_val = ADC_GetVal(ADC1);
//	ADC2_val = ADC_GetVal(ADC2);
//	ADC3_val = ADC_GetVal(ADC3);
//	ADC4_val = ADC_GetVal(ADC4);
	ADC_vals[0] = ADC_GetVal(ADC1);
 8003244:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003248:	f000 f858 	bl	80032fc <ADC_GetVal>
 800324c:	4603      	mov	r3, r0
 800324e:	4a0b      	ldr	r2, [pc, #44]	; (800327c <ADC_Read+0x3c>)
 8003250:	6013      	str	r3, [r2, #0]
	ADC_vals[1] = ADC_GetVal(ADC2);
 8003252:	480b      	ldr	r0, [pc, #44]	; (8003280 <ADC_Read+0x40>)
 8003254:	f000 f852 	bl	80032fc <ADC_GetVal>
 8003258:	4603      	mov	r3, r0
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <ADC_Read+0x3c>)
 800325c:	6053      	str	r3, [r2, #4]
	ADC_vals[2] = ADC_GetVal(ADC3);
 800325e:	4809      	ldr	r0, [pc, #36]	; (8003284 <ADC_Read+0x44>)
 8003260:	f000 f84c 	bl	80032fc <ADC_GetVal>
 8003264:	4603      	mov	r3, r0
 8003266:	4a05      	ldr	r2, [pc, #20]	; (800327c <ADC_Read+0x3c>)
 8003268:	6093      	str	r3, [r2, #8]
	ADC_vals[3] = ADC_GetVal(ADC4);
 800326a:	4807      	ldr	r0, [pc, #28]	; (8003288 <ADC_Read+0x48>)
 800326c:	f000 f846 	bl	80032fc <ADC_GetVal>
 8003270:	4603      	mov	r3, r0
 8003272:	4a02      	ldr	r2, [pc, #8]	; (800327c <ADC_Read+0x3c>)
 8003274:	60d3      	str	r3, [r2, #12]
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000328 	.word	0x20000328
 8003280:	50000100 	.word	0x50000100
 8003284:	50000400 	.word	0x50000400
 8003288:	50000500 	.word	0x50000500

0800328c <ADC_Calibrate>:

static void ADC_Calibrate(ADC_TypeDef* adc) {
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329a:	d00b      	beq.n	80032b4 <ADC_Calibrate+0x28>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <ADC_Calibrate+0x64>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d007      	beq.n	80032b4 <ADC_Calibrate+0x28>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <ADC_Calibrate+0x68>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d003      	beq.n	80032b4 <ADC_Calibrate+0x28>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <ADC_Calibrate+0x6c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d117      	bne.n	80032e4 <ADC_Calibrate+0x58>
	  return;
  }

  adc->CR &= ~ADC_CR_ADEN; // Disable ADC
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 0201 	bic.w	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCALDIF; // Calibration for Single-ended input mode
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCAL; // Start ADC calibration
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	609a      	str	r2, [r3, #8]
  while (adc->CR & ADC_CR_ADCAL);
 80032d8:	bf00      	nop
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	dbfb      	blt.n	80032da <ADC_Calibrate+0x4e>
 80032e2:	e000      	b.n	80032e6 <ADC_Calibrate+0x5a>
	  return;
 80032e4:	bf00      	nop
}
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	50000100 	.word	0x50000100
 80032f4:	50000400 	.word	0x50000400
 80032f8:	50000500 	.word	0x50000500

080032fc <ADC_GetVal>:

static int ADC_GetVal(ADC_TypeDef* adc) {
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800330a:	d00d      	beq.n	8003328 <ADC_GetVal+0x2c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <ADC_GetVal+0x3c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <ADC_GetVal+0x2c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <ADC_GetVal+0x40>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d005      	beq.n	8003328 <ADC_GetVal+0x2c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a08      	ldr	r2, [pc, #32]	; (8003340 <ADC_GetVal+0x44>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d001      	beq.n	8003328 <ADC_GetVal+0x2c>
		return 0;
 8003324:	2300      	movs	r3, #0
 8003326:	e001      	b.n	800332c <ADC_GetVal+0x30>
	}
	return adc->DR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	50000100 	.word	0x50000100
 800333c:	50000400 	.word	0x50000400
 8003340:	50000500 	.word	0x50000500
 8003344:	00000000 	.word	0x00000000

08003348 <IMU_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void IMU_Read(void) {
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 800334c:	4aa4      	ldr	r2, [pc, #656]	; (80035e0 <IMU_Read+0x298>)
 800334e:	49a5      	ldr	r1, [pc, #660]	; (80035e4 <IMU_Read+0x29c>)
 8003350:	48a5      	ldr	r0, [pc, #660]	; (80035e8 <IMU_Read+0x2a0>)
 8003352:	f7ff fdbc 	bl	8002ece <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 8003356:	4ba2      	ldr	r3, [pc, #648]	; (80035e0 <IMU_Read+0x298>)
 8003358:	785b      	ldrb	r3, [r3, #1]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80ef 	beq.w	8003544 <IMU_Read+0x1fc>
 8003366:	4b9e      	ldr	r3, [pc, #632]	; (80035e0 <IMU_Read+0x298>)
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80e7 	beq.w	8003544 <IMU_Read+0x1fc>
		/* Read accelerometer and gyroscope data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8003376:	2206      	movs	r2, #6
 8003378:	2100      	movs	r1, #0
 800337a:	489c      	ldr	r0, [pc, #624]	; (80035ec <IMU_Read+0x2a4>)
 800337c:	f004 fe24 	bl	8007fc8 <memset>
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8003380:	2206      	movs	r2, #6
 8003382:	2100      	movs	r1, #0
 8003384:	489a      	ldr	r0, [pc, #616]	; (80035f0 <IMU_Read+0x2a8>)
 8003386:	f004 fe1f 	bl	8007fc8 <memset>
		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration);
 800338a:	4998      	ldr	r1, [pc, #608]	; (80035ec <IMU_Read+0x2a4>)
 800338c:	4895      	ldr	r0, [pc, #596]	; (80035e4 <IMU_Read+0x29c>)
 800338e:	f7ff fceb 	bl	8002d68 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate);
 8003392:	4997      	ldr	r1, [pc, #604]	; (80035f0 <IMU_Read+0x2a8>)
 8003394:	4893      	ldr	r0, [pc, #588]	; (80035e4 <IMU_Read+0x29c>)
 8003396:	f7ff fc9c 	bl	8002cd2 <lsm9ds1_angular_rate_raw_get>
		 accel.acceleration.x = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[0]) * 9.807) / 1000;
 800339a:	4b94      	ldr	r3, [pc, #592]	; (80035ec <IMU_Read+0x2a4>)
 800339c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff faad 	bl	8002900 <lsm9ds1_from_fs4g_to_mg>
 80033a6:	ee10 3a10 	vmov	r3, s0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f870 	bl	8000490 <__aeabi_f2d>
 80033b0:	a385      	add	r3, pc, #532	; (adr r3, 80035c8 <IMU_Read+0x280>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f7fd f8c3 	bl	8000540 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	4b8b      	ldr	r3, [pc, #556]	; (80035f4 <IMU_Read+0x2ac>)
 80033c8:	f7fd f9e4 	bl	8000794 <__aeabi_ddiv>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	f7fd fb84 	bl	8000ae0 <__aeabi_d2f>
 80033d8:	4603      	mov	r3, r0
 80033da:	4a87      	ldr	r2, [pc, #540]	; (80035f8 <IMU_Read+0x2b0>)
 80033dc:	6013      	str	r3, [r2, #0]
		 accel.acceleration.y = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]) * 9.807) / 1000;
 80033de:	4b83      	ldr	r3, [pc, #524]	; (80035ec <IMU_Read+0x2a4>)
 80033e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fa8b 	bl	8002900 <lsm9ds1_from_fs4g_to_mg>
 80033ea:	ee10 3a10 	vmov	r3, s0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f84e 	bl	8000490 <__aeabi_f2d>
 80033f4:	a374      	add	r3, pc, #464	; (adr r3, 80035c8 <IMU_Read+0x280>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f7fd f8a1 	bl	8000540 <__aeabi_dmul>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	4b7a      	ldr	r3, [pc, #488]	; (80035f4 <IMU_Read+0x2ac>)
 800340c:	f7fd f9c2 	bl	8000794 <__aeabi_ddiv>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4610      	mov	r0, r2
 8003416:	4619      	mov	r1, r3
 8003418:	f7fd fb62 	bl	8000ae0 <__aeabi_d2f>
 800341c:	4603      	mov	r3, r0
 800341e:	4a76      	ldr	r2, [pc, #472]	; (80035f8 <IMU_Read+0x2b0>)
 8003420:	6053      	str	r3, [r2, #4]
		 accel.acceleration.z = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]) * 9.807) / 1000;
 8003422:	4b72      	ldr	r3, [pc, #456]	; (80035ec <IMU_Read+0x2a4>)
 8003424:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fa69 	bl	8002900 <lsm9ds1_from_fs4g_to_mg>
 800342e:	ee10 3a10 	vmov	r3, s0
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd f82c 	bl	8000490 <__aeabi_f2d>
 8003438:	a363      	add	r3, pc, #396	; (adr r3, 80035c8 <IMU_Read+0x280>)
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f7fd f87f 	bl	8000540 <__aeabi_dmul>
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	4610      	mov	r0, r2
 8003448:	4619      	mov	r1, r3
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	4b69      	ldr	r3, [pc, #420]	; (80035f4 <IMU_Read+0x2ac>)
 8003450:	f7fd f9a0 	bl	8000794 <__aeabi_ddiv>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	f7fd fb40 	bl	8000ae0 <__aeabi_d2f>
 8003460:	4603      	mov	r3, r0
 8003462:	4a65      	ldr	r2, [pc, #404]	; (80035f8 <IMU_Read+0x2b0>)
 8003464:	6093      	str	r3, [r2, #8]
		 gyro.gyro.x = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) * 2 * M_PI)/360000;
 8003466:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <IMU_Read+0x2a8>)
 8003468:	f9b3 3000 	ldrsh.w	r3, [r3]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fa5f 	bl	8002930 <lsm9ds1_from_fs2000dps_to_mdps>
 8003472:	eef0 7a40 	vmov.f32	s15, s0
 8003476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800347a:	ee17 0a90 	vmov	r0, s15
 800347e:	f7fd f807 	bl	8000490 <__aeabi_f2d>
 8003482:	a353      	add	r3, pc, #332	; (adr r3, 80035d0 <IMU_Read+0x288>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f7fd f85a 	bl	8000540 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4610      	mov	r0, r2
 8003492:	4619      	mov	r1, r3
 8003494:	a350      	add	r3, pc, #320	; (adr r3, 80035d8 <IMU_Read+0x290>)
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f7fd f97b 	bl	8000794 <__aeabi_ddiv>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	f7fd fb1b 	bl	8000ae0 <__aeabi_d2f>
 80034aa:	4603      	mov	r3, r0
 80034ac:	4a53      	ldr	r2, [pc, #332]	; (80035fc <IMU_Read+0x2b4>)
 80034ae:	6013      	str	r3, [r2, #0]
		 gyro.gyro.y = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) * 2 * M_PI)/360000;
 80034b0:	4b4f      	ldr	r3, [pc, #316]	; (80035f0 <IMU_Read+0x2a8>)
 80034b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fa3a 	bl	8002930 <lsm9ds1_from_fs2000dps_to_mdps>
 80034bc:	eef0 7a40 	vmov.f32	s15, s0
 80034c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034c4:	ee17 0a90 	vmov	r0, s15
 80034c8:	f7fc ffe2 	bl	8000490 <__aeabi_f2d>
 80034cc:	a340      	add	r3, pc, #256	; (adr r3, 80035d0 <IMU_Read+0x288>)
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f7fd f835 	bl	8000540 <__aeabi_dmul>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	a33e      	add	r3, pc, #248	; (adr r3, 80035d8 <IMU_Read+0x290>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd f956 	bl	8000794 <__aeabi_ddiv>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f7fd faf6 	bl	8000ae0 <__aeabi_d2f>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4a41      	ldr	r2, [pc, #260]	; (80035fc <IMU_Read+0x2b4>)
 80034f8:	6053      	str	r3, [r2, #4]
		 gyro.gyro.z = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) * 2 * M_PI)/360000;
 80034fa:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <IMU_Read+0x2a8>)
 80034fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fa15 	bl	8002930 <lsm9ds1_from_fs2000dps_to_mdps>
 8003506:	eef0 7a40 	vmov.f32	s15, s0
 800350a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800350e:	ee17 0a90 	vmov	r0, s15
 8003512:	f7fc ffbd 	bl	8000490 <__aeabi_f2d>
 8003516:	a32e      	add	r3, pc, #184	; (adr r3, 80035d0 <IMU_Read+0x288>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fd f810 	bl	8000540 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	a32b      	add	r3, pc, #172	; (adr r3, 80035d8 <IMU_Read+0x290>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fd f931 	bl	8000794 <__aeabi_ddiv>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4610      	mov	r0, r2
 8003538:	4619      	mov	r1, r3
 800353a:	f7fd fad1 	bl	8000ae0 <__aeabi_d2f>
 800353e:	4603      	mov	r3, r0
 8003540:	4a2e      	ldr	r2, [pc, #184]	; (80035fc <IMU_Read+0x2b4>)
 8003542:	6093      	str	r3, [r2, #8]
//		gyro.gyro.x = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
//		gyro.gyro.y = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
//		gyro.gyro.z = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}

	if (reg.status_mag.zyxda) {
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <IMU_Read+0x298>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d035      	beq.n	80035be <IMU_Read+0x276>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 8003552:	2206      	movs	r2, #6
 8003554:	2100      	movs	r1, #0
 8003556:	482a      	ldr	r0, [pc, #168]	; (8003600 <IMU_Read+0x2b8>)
 8003558:	f004 fd36 	bl	8007fc8 <memset>
		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 800355c:	4928      	ldr	r1, [pc, #160]	; (8003600 <IMU_Read+0x2b8>)
 800355e:	4822      	ldr	r0, [pc, #136]	; (80035e8 <IMU_Read+0x2a0>)
 8003560:	f7ff fc4d 	bl	8002dfe <lsm9ds1_magnetic_raw_get>
		mag.magnetic.x = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[0]) / 10;
 8003564:	4b26      	ldr	r3, [pc, #152]	; (8003600 <IMU_Read+0x2b8>)
 8003566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff f9f8 	bl	8002960 <lsm9ds1_from_fs16gauss_to_mG>
 8003570:	eeb0 7a40 	vmov.f32	s14, s0
 8003574:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800357c:	4b21      	ldr	r3, [pc, #132]	; (8003604 <IMU_Read+0x2bc>)
 800357e:	edc3 7a00 	vstr	s15, [r3]
		mag.magnetic.y = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[1]) / 10;
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <IMU_Read+0x2b8>)
 8003584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff f9e9 	bl	8002960 <lsm9ds1_from_fs16gauss_to_mG>
 800358e:	eeb0 7a40 	vmov.f32	s14, s0
 8003592:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800359a:	4b1a      	ldr	r3, [pc, #104]	; (8003604 <IMU_Read+0x2bc>)
 800359c:	edc3 7a01 	vstr	s15, [r3, #4]
		mag.magnetic.z = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[2]) / 10;
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <IMU_Read+0x2b8>)
 80035a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff f9da 	bl	8002960 <lsm9ds1_from_fs16gauss_to_mG>
 80035ac:	eeb0 7a40 	vmov.f32	s14, s0
 80035b0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80035b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b8:	4b12      	ldr	r3, [pc, #72]	; (8003604 <IMU_Read+0x2bc>)
 80035ba:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	f3af 8000 	nop.w
 80035c8:	1a9fbe77 	.word	0x1a9fbe77
 80035cc:	40239d2f 	.word	0x40239d2f
 80035d0:	54442d18 	.word	0x54442d18
 80035d4:	400921fb 	.word	0x400921fb
 80035d8:	00000000 	.word	0x00000000
 80035dc:	4115f900 	.word	0x4115f900
 80035e0:	200000f4 	.word	0x200000f4
 80035e4:	20000338 	.word	0x20000338
 80035e8:	20000348 	.word	0x20000348
 80035ec:	200000d8 	.word	0x200000d8
 80035f0:	200000e0 	.word	0x200000e0
 80035f4:	408f4000 	.word	0x408f4000
 80035f8:	20000310 	.word	0x20000310
 80035fc:	20000304 	.word	0x20000304
 8003600:	200000e8 	.word	0x200000e8
 8003604:	2000031c 	.word	0x2000031c

08003608 <IMU_Setup>:

static int IMU_Setup(void) {
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <IMU_Setup+0xcc>)
 800360e:	4a32      	ldr	r2, [pc, #200]	; (80036d8 <IMU_Setup+0xd0>)
 8003610:	601a      	str	r2, [r3, #0]
  dev_ctx_imu.read_reg = platform_read_imu;
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <IMU_Setup+0xcc>)
 8003614:	4a31      	ldr	r2, [pc, #196]	; (80036dc <IMU_Setup+0xd4>)
 8003616:	605a      	str	r2, [r3, #4]
  dev_ctx_imu.handle = (void *)&imu_bus;
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <IMU_Setup+0xcc>)
 800361a:	4a31      	ldr	r2, [pc, #196]	; (80036e0 <IMU_Setup+0xd8>)
 800361c:	60da      	str	r2, [r3, #12]
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <IMU_Setup+0xdc>)
 8003620:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <IMU_Setup+0xe0>)
 8003622:	601a      	str	r2, [r3, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 8003624:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <IMU_Setup+0xdc>)
 8003626:	4a31      	ldr	r2, [pc, #196]	; (80036ec <IMU_Setup+0xe4>)
 8003628:	605a      	str	r2, [r3, #4]
  dev_ctx_mag.handle = (void *)&mag_bus;
 800362a:	4b2e      	ldr	r3, [pc, #184]	; (80036e4 <IMU_Setup+0xdc>)
 800362c:	4a30      	ldr	r2, [pc, #192]	; (80036f0 <IMU_Setup+0xe8>)
 800362e:	60da      	str	r2, [r3, #12]

  platform_delay(BOOT_TIME);
 8003630:	2014      	movs	r0, #20
 8003632:	f000 f8f3 	bl	800381c <platform_delay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 8003636:	4a2f      	ldr	r2, [pc, #188]	; (80036f4 <IMU_Setup+0xec>)
 8003638:	4926      	ldr	r1, [pc, #152]	; (80036d4 <IMU_Setup+0xcc>)
 800363a:	482a      	ldr	r0, [pc, #168]	; (80036e4 <IMU_Setup+0xdc>)
 800363c:	f7ff fc2a 	bl	8002e94 <lsm9ds1_dev_id_get>

//  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
  if (whoamI.imu != LSM9DS1_IMU_ID) {
 8003640:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <IMU_Setup+0xec>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b68      	cmp	r3, #104	; 0x68
 8003646:	d002      	beq.n	800364e <IMU_Setup+0x46>
	  while (1) {
		  /* Device not found management */
		  return SETUP_FAIL;
 8003648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800364c:	e03f      	b.n	80036ce <IMU_Setup+0xc6>
	  }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 800364e:	2201      	movs	r2, #1
 8003650:	4920      	ldr	r1, [pc, #128]	; (80036d4 <IMU_Setup+0xcc>)
 8003652:	4824      	ldr	r0, [pc, #144]	; (80036e4 <IMU_Setup+0xdc>)
 8003654:	f7ff fc58 	bl	8002f08 <lsm9ds1_dev_reset_set>

  do {
	  lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8003658:	4a27      	ldr	r2, [pc, #156]	; (80036f8 <IMU_Setup+0xf0>)
 800365a:	491e      	ldr	r1, [pc, #120]	; (80036d4 <IMU_Setup+0xcc>)
 800365c:	4821      	ldr	r0, [pc, #132]	; (80036e4 <IMU_Setup+0xdc>)
 800365e:	f7ff fc98 	bl	8002f92 <lsm9ds1_dev_reset_get>
  } while (rst);
 8003662:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <IMU_Setup+0xf0>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f6      	bne.n	8003658 <IMU_Setup+0x50>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 800366a:	2201      	movs	r2, #1
 800366c:	4919      	ldr	r1, [pc, #100]	; (80036d4 <IMU_Setup+0xcc>)
 800366e:	481d      	ldr	r0, [pc, #116]	; (80036e4 <IMU_Setup+0xdc>)
 8003670:	f7ff fa3f 	bl	8002af2 <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 8003674:	2102      	movs	r1, #2
 8003676:	4817      	ldr	r0, [pc, #92]	; (80036d4 <IMU_Setup+0xcc>)
 8003678:	f7ff fa15 	bl	8002aa6 <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 800367c:	2103      	movs	r1, #3
 800367e:	4815      	ldr	r0, [pc, #84]	; (80036d4 <IMU_Setup+0xcc>)
 8003680:	f7ff f986 	bl	8002990 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 8003684:	2103      	movs	r1, #3
 8003686:	4817      	ldr	r0, [pc, #92]	; (80036e4 <IMU_Setup+0xdc>)
 8003688:	f7ff fafd 	bl	8002c86 <lsm9ds1_mag_full_scale_set>
  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 800368c:	2100      	movs	r1, #0
 800368e:	4811      	ldr	r0, [pc, #68]	; (80036d4 <IMU_Setup+0xcc>)
 8003690:	f7ff fd3b 	bl	800310a <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 8003694:	2110      	movs	r1, #16
 8003696:	480f      	ldr	r0, [pc, #60]	; (80036d4 <IMU_Setup+0xcc>)
 8003698:	f7ff fd8c 	bl	80031b4 <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 800369c:	2100      	movs	r1, #0
 800369e:	480d      	ldr	r0, [pc, #52]	; (80036d4 <IMU_Setup+0xcc>)
 80036a0:	f7ff fd62 	bl	8003168 <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 80036a4:	2103      	movs	r1, #3
 80036a6:	480b      	ldr	r0, [pc, #44]	; (80036d4 <IMU_Setup+0xcc>)
 80036a8:	f7ff fc9e 	bl	8002fe8 <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 80036ac:	2105      	movs	r1, #5
 80036ae:	4809      	ldr	r0, [pc, #36]	; (80036d4 <IMU_Setup+0xcc>)
 80036b0:	f7ff fd05 	bl	80030be <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 80036b4:	2112      	movs	r1, #18
 80036b6:	4807      	ldr	r0, [pc, #28]	; (80036d4 <IMU_Setup+0xcc>)
 80036b8:	f7ff fcbc 	bl	8003034 <lsm9ds1_gy_filter_out_path_set>
  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 80036bc:	2122      	movs	r1, #34	; 0x22
 80036be:	4805      	ldr	r0, [pc, #20]	; (80036d4 <IMU_Setup+0xcc>)
 80036c0:	f7ff f98c 	bl	80029dc <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 80036c4:	2134      	movs	r1, #52	; 0x34
 80036c6:	4807      	ldr	r0, [pc, #28]	; (80036e4 <IMU_Setup+0xdc>)
 80036c8:	f7ff fa62 	bl	8002b90 <lsm9ds1_mag_data_rate_set>

  return SETUP_SUCCESS;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000338 	.word	0x20000338
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	0800378d 	.word	0x0800378d
 80036e0:	20000014 	.word	0x20000014
 80036e4:	20000348 	.word	0x20000348
 80036e8:	08003741 	.word	0x08003741
 80036ec:	080037d1 	.word	0x080037d1
 80036f0:	20000004 	.word	0x20000004
 80036f4:	200000f0 	.word	0x200000f0
 80036f8:	200000f6 	.word	0x200000f6

080036fc <platform_write_imu>:

static int32_t platform_write_imu(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	; 0x28
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	461a      	mov	r2, r3
 8003708:	460b      	mov	r3, r1
 800370a:	72fb      	strb	r3, [r7, #11]
 800370c:	4613      	mov	r3, r2
 800370e:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	791b      	ldrb	r3, [r3, #4]
 800371c:	b299      	uxth	r1, r3
 800371e:	7afb      	ldrb	r3, [r7, #11]
 8003720:	b29a      	uxth	r2, r3
 8003722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003726:	9302      	str	r3, [sp, #8]
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2301      	movs	r3, #1
 8003732:	f002 fab3 	bl	8005c9c <HAL_I2C_Mem_Write>
  return 0;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <platform_write_mag>:

static int32_t platform_write_mag(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af04      	add	r7, sp, #16
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	461a      	mov	r2, r3
 800374c:	460b      	mov	r3, r1
 800374e:	72fb      	strb	r3, [r7, #11]
 8003750:	4613      	mov	r3, r2
 8003752:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	617b      	str	r3, [r7, #20]
	reg |= 0x80;
 8003758:	7afb      	ldrb	r3, [r7, #11]
 800375a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800375e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	791b      	ldrb	r3, [r3, #4]
 8003768:	b299      	uxth	r1, r3
 800376a:	7afb      	ldrb	r3, [r7, #11]
 800376c:	b29a      	uxth	r2, r3
 800376e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003772:	9302      	str	r3, [sp, #8]
 8003774:	893b      	ldrh	r3, [r7, #8]
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2301      	movs	r3, #1
 800377e:	f002 fa8d 	bl	8005c9c <HAL_I2C_Mem_Write>
	  return 0;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <platform_read_imu>:

static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af04      	add	r7, sp, #16
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	461a      	mov	r2, r3
 8003798:	460b      	mov	r3, r1
 800379a:	72fb      	strb	r3, [r7, #11]
 800379c:	4613      	mov	r3, r2
 800379e:	813b      	strh	r3, [r7, #8]
	  sensbus_t *sensbus = (sensbus_t *)handle;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	617b      	str	r3, [r7, #20]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	791b      	ldrb	r3, [r3, #4]
 80037ac:	b299      	uxth	r1, r3
 80037ae:	7afb      	ldrb	r3, [r7, #11]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b6:	9302      	str	r3, [sp, #8]
 80037b8:	893b      	ldrh	r3, [r7, #8]
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	2301      	movs	r3, #1
 80037c2:	f002 fb7f 	bl	8005ec4 <HAL_I2C_Mem_Read>
	  return 0;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <platform_read_mag>:

static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af04      	add	r7, sp, #16
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	461a      	mov	r2, r3
 80037dc:	460b      	mov	r3, r1
 80037de:	72fb      	strb	r3, [r7, #11]
 80037e0:	4613      	mov	r3, r2
 80037e2:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	617b      	str	r3, [r7, #20]
	  reg |= 0x80;
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037ee:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	791b      	ldrb	r3, [r3, #4]
 80037f8:	b299      	uxth	r1, r3
 80037fa:	7afb      	ldrb	r3, [r7, #11]
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003802:	9302      	str	r3, [sp, #8]
 8003804:	893b      	ldrh	r3, [r7, #8]
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2301      	movs	r3, #1
 800380e:	f002 fb59 	bl	8005ec4 <HAL_I2C_Mem_Read>
	  return 0;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <platform_delay>:

static void platform_delay(uint32_t ms)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 ffe1 	bl	80047ec <HAL_Delay>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003834:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800383c:	f000 ff70 	bl	8004720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003840:	f000 f8fe 	bl	8003a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003844:	f000 fc48 	bl	80040d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003848:	f000 f958 	bl	8003afc <MX_ADC1_Init>
  MX_ADC2_Init();
 800384c:	f000 fa0e 	bl	8003c6c <MX_ADC2_Init>
  MX_ADC3_Init();
 8003850:	f000 fa98 	bl	8003d84 <MX_ADC3_Init>
  MX_ADC4_Init();
 8003854:	f000 fb34 	bl	8003ec0 <MX_ADC4_Init>
  MX_I2C1_Init();
 8003858:	f000 fbbe 	bl	8003fd8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800385c:	f000 fbfc 	bl	8004058 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  if (IMU_Setup() != SETUP_SUCCESS) {
 8003860:	f7ff fed2 	bl	8003608 <IMU_Setup>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <main+0x3a>
    return 1;
 800386a:	2301      	movs	r3, #1
 800386c:	e0d2      	b.n	8003a14 <main+0x1e0>
  }
  MCP4728_Init(&hi2c2, output);
 800386e:	4b6c      	ldr	r3, [pc, #432]	; (8003a20 <main+0x1ec>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	4611      	mov	r1, r2
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	4610      	mov	r0, r2
 8003878:	891a      	ldrh	r2, [r3, #8]
 800387a:	2300      	movs	r3, #0
 800387c:	f362 030f 	bfi	r3, r2, #0, #16
 8003880:	4602      	mov	r2, r0
 8003882:	4868      	ldr	r0, [pc, #416]	; (8003a24 <main+0x1f0>)
 8003884:	f7fe ffcd 	bl	8002822 <MCP4728_Init>
  output.channelVref = 0x00;
 8003888:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <main+0x1ec>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
  output.channel_Gain = 0x00;
 800388e:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <main+0x1ec>)
 8003890:	2200      	movs	r2, #0
 8003892:	705a      	strb	r2, [r3, #1]

  reset_aux_frame();
 8003894:	f7fd fbe6 	bl	8001064 <reset_aux_frame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	/* SENSOR READ BEGIN */
	ADC_Read();
 8003898:	f7ff fcd2 	bl	8003240 <ADC_Read>
	IMU_Read();
 800389c:	f7ff fd54 	bl	8003348 <IMU_Read>

	/* SENSOR READ END */

	/* CALCULATIONS BEGIN */
	calculate_orientation(0.01); // @henry: change freq
 80038a0:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8003a28 <main+0x1f4>
 80038a4:	f7fd fb24 	bl	8000ef0 <calculate_orientation>
	calculate_gestures();
 80038a8:	f7fd f96a 	bl	8000b80 <calculate_gestures>

	/* CALCULATIONS END*/

	/* OUTPUT BEGIN */
	int throttle_voltage = 0;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
	int resting_voltage = 2000;
 80038b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80038b4:	60bb      	str	r3, [r7, #8]
	int factor = 2000;
 80038b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80038ba:	607b      	str	r3, [r7, #4]
	output.channel_Val[0] = resting_voltage + (gimbal_pitch - 0.5) * factor; // pitch
 80038bc:	68b8      	ldr	r0, [r7, #8]
 80038be:	f7fc fdd5 	bl	800046c <__aeabi_i2d>
 80038c2:	4604      	mov	r4, r0
 80038c4:	460d      	mov	r5, r1
 80038c6:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <main+0x1f8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fc fde0 	bl	8000490 <__aeabi_f2d>
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <main+0x1fc>)
 80038d6:	f7fc fc7b 	bl	80001d0 <__aeabi_dsub>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4690      	mov	r8, r2
 80038e0:	4699      	mov	r9, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fc fdc2 	bl	800046c <__aeabi_i2d>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4640      	mov	r0, r8
 80038ee:	4649      	mov	r1, r9
 80038f0:	f7fc fe26 	bl	8000540 <__aeabi_dmul>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	4620      	mov	r0, r4
 80038fa:	4629      	mov	r1, r5
 80038fc:	f7fc fc6a 	bl	80001d4 <__adddf3>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4610      	mov	r0, r2
 8003906:	4619      	mov	r1, r3
 8003908:	f7fd f8ca 	bl	8000aa0 <__aeabi_d2uiz>
 800390c:	4603      	mov	r3, r0
 800390e:	b29a      	uxth	r2, r3
 8003910:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <main+0x1ec>)
 8003912:	805a      	strh	r2, [r3, #2]
	output.channel_Val[1] = resting_voltage + (gimbal_roll - 0.5) * factor; // roll
 8003914:	68b8      	ldr	r0, [r7, #8]
 8003916:	f7fc fda9 	bl	800046c <__aeabi_i2d>
 800391a:	4604      	mov	r4, r0
 800391c:	460d      	mov	r5, r1
 800391e:	4b45      	ldr	r3, [pc, #276]	; (8003a34 <main+0x200>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fc fdb4 	bl	8000490 <__aeabi_f2d>
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	4b40      	ldr	r3, [pc, #256]	; (8003a30 <main+0x1fc>)
 800392e:	f7fc fc4f 	bl	80001d0 <__aeabi_dsub>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4690      	mov	r8, r2
 8003938:	4699      	mov	r9, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fc fd96 	bl	800046c <__aeabi_i2d>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4640      	mov	r0, r8
 8003946:	4649      	mov	r1, r9
 8003948:	f7fc fdfa 	bl	8000540 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4620      	mov	r0, r4
 8003952:	4629      	mov	r1, r5
 8003954:	f7fc fc3e 	bl	80001d4 <__adddf3>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	f7fd f89e 	bl	8000aa0 <__aeabi_d2uiz>
 8003964:	4603      	mov	r3, r0
 8003966:	b29a      	uxth	r2, r3
 8003968:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <main+0x1ec>)
 800396a:	809a      	strh	r2, [r3, #4]
	output.channel_Val[2] = throttle_voltage + (gimbal_throttle * 2) * factor; // throttle
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	ee07 3a90 	vmov	s15, r3
 8003972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003976:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <main+0x204>)
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800398a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800398e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003992:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003996:	ee17 3a90 	vmov	r3, s15
 800399a:	b29a      	uxth	r2, r3
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <main+0x1ec>)
 800399e:	80da      	strh	r2, [r3, #6]
	output.channel_Val[3] = resting_voltage + (gimbal_yaw - 0.5) * factor; // yaw
 80039a0:	68b8      	ldr	r0, [r7, #8]
 80039a2:	f7fc fd63 	bl	800046c <__aeabi_i2d>
 80039a6:	4604      	mov	r4, r0
 80039a8:	460d      	mov	r5, r1
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <main+0x208>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fc fd6e 	bl	8000490 <__aeabi_f2d>
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <main+0x1fc>)
 80039ba:	f7fc fc09 	bl	80001d0 <__aeabi_dsub>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4690      	mov	r8, r2
 80039c4:	4699      	mov	r9, r3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fc fd50 	bl	800046c <__aeabi_i2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4640      	mov	r0, r8
 80039d2:	4649      	mov	r1, r9
 80039d4:	f7fc fdb4 	bl	8000540 <__aeabi_dmul>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4620      	mov	r0, r4
 80039de:	4629      	mov	r1, r5
 80039e0:	f7fc fbf8 	bl	80001d4 <__adddf3>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4610      	mov	r0, r2
 80039ea:	4619      	mov	r1, r3
 80039ec:	f7fd f858 	bl	8000aa0 <__aeabi_d2uiz>
 80039f0:	4603      	mov	r3, r0
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <main+0x1ec>)
 80039f6:	811a      	strh	r2, [r3, #8]
	MCP4728_Write_AllChannels_Diff(&hi2c2, output);
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <main+0x1ec>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4611      	mov	r1, r2
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4610      	mov	r0, r2
 8003a02:	891a      	ldrh	r2, [r3, #8]
 8003a04:	2300      	movs	r3, #0
 8003a06:	f362 030f 	bfi	r3, r2, #0, #16
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4805      	ldr	r0, [pc, #20]	; (8003a24 <main+0x1f0>)
 8003a0e:	f7fe fec4 	bl	800279a <MCP4728_Write_AllChannels_Diff>
  while (1) {
 8003a12:	e741      	b.n	8003898 <main+0x64>

	/* OUTPUT END */
  }
  /* USER CODE END 3 */
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a1e:	bf00      	nop
 8003a20:	200000cc 	.word	0x200000cc
 8003a24:	2000028c 	.word	0x2000028c
 8003a28:	3c23d70a 	.word	0x3c23d70a
 8003a2c:	200002f8 	.word	0x200002f8
 8003a30:	3fe00000 	.word	0x3fe00000
 8003a34:	200002f4 	.word	0x200002f4
 8003a38:	20000300 	.word	0x20000300
 8003a3c:	200002fc 	.word	0x200002fc

08003a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b09e      	sub	sp, #120	; 0x78
 8003a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a4a:	2228      	movs	r2, #40	; 0x28
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f004 faba 	bl	8007fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a64:	463b      	mov	r3, r7
 8003a66:	223c      	movs	r2, #60	; 0x3c
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 faac 	bl	8007fc8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a70:	2302      	movs	r3, #2
 8003a72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a74:	2301      	movs	r3, #1
 8003a76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a78:	2310      	movs	r3, #16
 8003a7a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a80:	2300      	movs	r3, #0
 8003a82:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003a84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003a88:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f002 fe9c 	bl	80067cc <HAL_RCC_OscConfig>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003a9a:	f000 fb59 	bl	8004150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a9e:	230f      	movs	r3, #15
 8003aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003ab2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 fec5 	bl	8007848 <HAL_RCC_ClockConfig>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003ac4:	f000 fb44 	bl	8004150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8003ac8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003acc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ae2:	463b      	mov	r3, r7
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f004 f895 	bl	8007c14 <HAL_RCCEx_PeriphCLKConfig>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003af0:	f000 fb2e 	bl	8004150 <Error_Handler>
  }
}
 8003af4:	bf00      	nop
 8003af6:	3778      	adds	r7, #120	; 0x78
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08a      	sub	sp, #40	; 0x28
 8003b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003b02:	f107 031c 	add.w	r3, r7, #28
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
 8003b1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003b1e:	4b51      	ldr	r3, [pc, #324]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003b24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b26:	4b4f      	ldr	r3, [pc, #316]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b32:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b38:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b3e:	4b49      	ldr	r3, [pc, #292]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b46:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b4c:	4b45      	ldr	r3, [pc, #276]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b52:	4b44      	ldr	r3, [pc, #272]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003b58:	4b42      	ldr	r3, [pc, #264]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b5e:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b66:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b68:	2204      	movs	r2, #4
 8003b6a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003b6c:	4b3d      	ldr	r3, [pc, #244]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b72:	4b3c      	ldr	r3, [pc, #240]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b78:	483a      	ldr	r0, [pc, #232]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b7a:	f000 fe5b 	bl	8004834 <HAL_ADC_Init>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003b84:	f000 fae4 	bl	8004150 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	4619      	mov	r1, r3
 8003b92:	4834      	ldr	r0, [pc, #208]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003b94:	f001 fb1a 	bl	80051cc <HAL_ADCEx_MultiModeConfigChannel>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003b9e:	f000 fad7 	bl	8004150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4829      	ldr	r0, [pc, #164]	; (8003c64 <MX_ADC1_Init+0x168>)
 8003bc0:	f001 f818 	bl	8004bf4 <HAL_ADC_ConfigChannel>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8003bca:	f000 fac1 	bl	8004150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_Calibrate(ADC1);
 8003bce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003bd2:	f7ff fb5b 	bl	800328c <ADC_Calibrate>
  ADC_ADVREGEN(ADC1); // @henry
 8003bd6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003bda:	f7ff fb1a 	bl	8003212 <ADC_ADVREGEN>
  ADC12_COMMON->CCR|= ADC_CCR_VREFEN; // @henry
 8003bde:	4b22      	ldr	r3, [pc, #136]	; (8003c68 <MX_ADC1_Init+0x16c>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4a21      	ldr	r2, [pc, #132]	; (8003c68 <MX_ADC1_Init+0x16c>)
 8003be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003be8:	6093      	str	r3, [r2, #8]

  ADC1->CR |= ADC_CR_ADEN; // Enable ADC
 8003bea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6093      	str	r3, [r2, #8]
//  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC1->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003bfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c08:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR &= ~0xC; // 12-bit Resolution
 8003c0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c14:	f023 030c 	bic.w	r3, r3, #12
 8003c18:	60d3      	str	r3, [r2, #12]

  ADC1->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c24:	f023 030f 	bic.w	r3, r3, #15
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
  ADC1->SQR1 |= 0x1 << 6; // Channel 1 of ADC1
 8003c2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c38:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003c3a:	bf00      	nop
 8003c3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f8      	beq.n	8003c3c <MX_ADC1_Init+0x140>
  ADC1->CR |= ADC_CR_ADSTART; // Start the ADC
 8003c4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 8003c5a:	bf00      	nop
 8003c5c:	3728      	adds	r7, #40	; 0x28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	200000f8 	.word	0x200000f8
 8003c68:	50000300 	.word	0x50000300

08003c6c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c72:	463b      	mov	r3, r7
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
 8003c80:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003c82:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003c84:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003c86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003c88:	4b3c      	ldr	r3, [pc, #240]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003c8e:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003c9a:	4b38      	ldr	r3, [pc, #224]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ca8:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003cae:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003cba:	4b30      	ldr	r3, [pc, #192]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003cc0:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cc8:	4b2c      	ldr	r3, [pc, #176]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003cca:	2204      	movs	r2, #4
 8003ccc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003cce:	4b2b      	ldr	r3, [pc, #172]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003cd4:	4b29      	ldr	r3, [pc, #164]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003cda:	4828      	ldr	r0, [pc, #160]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003cdc:	f000 fdaa 	bl	8004834 <HAL_ADC_Init>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8003ce6:	f000 fa33 	bl	8004150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003cea:	2303      	movs	r3, #3
 8003cec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d02:	463b      	mov	r3, r7
 8003d04:	4619      	mov	r1, r3
 8003d06:	481d      	ldr	r0, [pc, #116]	; (8003d7c <MX_ADC2_Init+0x110>)
 8003d08:	f000 ff74 	bl	8004bf4 <HAL_ADC_ConfigChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8003d12:	f000 fa1d 	bl	8004150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC_Calibrate(ADC2);
 8003d16:	481a      	ldr	r0, [pc, #104]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d18:	f7ff fab8 	bl	800328c <ADC_Calibrate>

  ADC2->CR |= ADC_CR_ADEN; // Enable ADC
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6093      	str	r3, [r2, #8]
//  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC2->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003d28:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d32:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~0xC; // 12-bit Resolution
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d3a:	f023 030c 	bic.w	r3, r3, #12
 8003d3e:	60d3      	str	r3, [r2, #12]

  ADC2->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d46:	f023 030f 	bic.w	r3, r3, #15
 8003d4a:	6313      	str	r3, [r2, #48]	; 0x30
  ADC2->SQR1 |= 0x3 << 6; // Channel 3 of ADC2
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	4a0b      	ldr	r2, [pc, #44]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d56:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003d58:	bf00      	nop
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f9      	beq.n	8003d5a <MX_ADC2_Init+0xee>
  ADC2->CR |= ADC_CR_ADSTART; // Start the ADC
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <MX_ADC2_Init+0x114>)
 8003d6c:	f043 0304 	orr.w	r3, r3, #4
 8003d70:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC2_Init 2 */

}
 8003d72:	bf00      	nop
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000148 	.word	0x20000148
 8003d80:	50000100 	.word	0x50000100

08003d84 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003d8a:	f107 031c 	add.w	r3, r7, #28
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	605a      	str	r2, [r3, #4]
 8003d94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]
 8003da4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8003da6:	4b44      	ldr	r3, [pc, #272]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003da8:	4a44      	ldr	r2, [pc, #272]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003daa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003dac:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003db2:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003db8:	4b3f      	ldr	r3, [pc, #252]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003dc4:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003dcc:	4b3a      	ldr	r3, [pc, #232]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003dd2:	4b39      	ldr	r3, [pc, #228]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003dd8:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003dde:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003de4:	4b34      	ldr	r3, [pc, #208]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dee:	2204      	movs	r2, #4
 8003df0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003df2:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003df8:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003dfe:	482e      	ldr	r0, [pc, #184]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003e00:	f000 fd18 	bl	8004834 <HAL_ADC_Init>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8003e0a:	f000 f9a1 	bl	8004150 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003e12:	f107 031c 	add.w	r3, r7, #28
 8003e16:	4619      	mov	r1, r3
 8003e18:	4827      	ldr	r0, [pc, #156]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003e1a:	f001 f9d7 	bl	80051cc <HAL_ADCEx_MultiModeConfigChannel>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8003e24:	f000 f994 	bl	8004150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003e40:	1d3b      	adds	r3, r7, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	481c      	ldr	r0, [pc, #112]	; (8003eb8 <MX_ADC3_Init+0x134>)
 8003e46:	f000 fed5 	bl	8004bf4 <HAL_ADC_ConfigChannel>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8003e50:	f000 f97e 	bl	8004150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  ADC_Calibrate(ADC3);
 8003e54:	4819      	ldr	r0, [pc, #100]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e56:	f7ff fa19 	bl	800328c <ADC_Calibrate>

  ADC3->CR |= ADC_CR_ADEN; // Enable ADC
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4a17      	ldr	r2, [pc, #92]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6093      	str	r3, [r2, #8]
//  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC3->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003e66:	4b15      	ldr	r3, [pc, #84]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e70:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~0xC; // 12-bit Resolution
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	4a11      	ldr	r2, [pc, #68]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e78:	f023 030c 	bic.w	r3, r3, #12
 8003e7c:	60d3      	str	r3, [r2, #12]

  ADC3->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e84:	f023 030f 	bic.w	r3, r3, #15
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
  ADC3->SQR1 |= 0x1 << 6; // Channel 1 of ADC3
 8003e8a:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	4a0b      	ldr	r2, [pc, #44]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e94:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003e96:	bf00      	nop
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f9      	beq.n	8003e98 <MX_ADC3_Init+0x114>
  ADC3->CR |= ADC_CR_ADSTART; // Start the ADC
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a04      	ldr	r2, [pc, #16]	; (8003ebc <MX_ADC3_Init+0x138>)
 8003eaa:	f043 0304 	orr.w	r3, r3, #4
 8003eae:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC3_Init 2 */

}
 8003eb0:	bf00      	nop
 8003eb2:	3728      	adds	r7, #40	; 0x28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000198 	.word	0x20000198
 8003ebc:	50000400 	.word	0x50000400

08003ec0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
 8003ed4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003ed8:	4a3e      	ldr	r2, [pc, #248]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003eda:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003edc:	4b3c      	ldr	r3, [pc, #240]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8003ee2:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ee8:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8003ef4:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003efc:	4b34      	ldr	r3, [pc, #208]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f02:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f08:	4b31      	ldr	r3, [pc, #196]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8003f0e:	4b30      	ldr	r3, [pc, #192]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8003f14:	4b2e      	ldr	r3, [pc, #184]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f1c:	4b2c      	ldr	r3, [pc, #176]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f1e:	2204      	movs	r2, #4
 8003f20:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8003f22:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003f28:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8003f2e:	4828      	ldr	r0, [pc, #160]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f30:	f000 fc80 	bl	8004834 <HAL_ADC_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8003f3a:	f000 f909 	bl	8004150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8003f56:	463b      	mov	r3, r7
 8003f58:	4619      	mov	r1, r3
 8003f5a:	481d      	ldr	r0, [pc, #116]	; (8003fd0 <MX_ADC4_Init+0x110>)
 8003f5c:	f000 fe4a 	bl	8004bf4 <HAL_ADC_ConfigChannel>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8003f66:	f000 f8f3 	bl	8004150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  ADC_Calibrate(ADC4);
 8003f6a:	481a      	ldr	r0, [pc, #104]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f6c:	f7ff f98e 	bl	800328c <ADC_Calibrate>

  ADC4->CR |= ADC_CR_ADEN; // Enable ADC
 8003f70:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6093      	str	r3, [r2, #8]
//  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC4->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f86:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~0xC; // 12-bit Resolution
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4a11      	ldr	r2, [pc, #68]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f8e:	f023 030c 	bic.w	r3, r3, #12
 8003f92:	60d3      	str	r3, [r2, #12]

  ADC4->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003f9a:	f023 030f 	bic.w	r3, r3, #15
 8003f9e:	6313      	str	r3, [r2, #48]	; 0x30
  ADC4->SQR1 |= 0x1 << 6; // Channel 1 of ADC4
 8003fa0:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	4a0b      	ldr	r2, [pc, #44]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003faa:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003fac:	bf00      	nop
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f9      	beq.n	8003fae <MX_ADC4_Init+0xee>
  ADC4->CR |= ADC_CR_ADSTART; // Start the ADC
 8003fba:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4a05      	ldr	r2, [pc, #20]	; (8003fd4 <MX_ADC4_Init+0x114>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC4_Init 2 */

}
 8003fc6:	bf00      	nop
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200001e8 	.word	0x200001e8
 8003fd4:	50000500 	.word	0x50000500

08003fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <MX_I2C1_Init+0x74>)
 8003fde:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <MX_I2C1_Init+0x78>)
 8003fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <MX_I2C1_Init+0x74>)
 8003fe4:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <MX_I2C1_Init+0x7c>)
 8003fe6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003fe8:	4b18      	ldr	r3, [pc, #96]	; (800404c <MX_I2C1_Init+0x74>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fee:	4b17      	ldr	r3, [pc, #92]	; (800404c <MX_I2C1_Init+0x74>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <MX_I2C1_Init+0x74>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ffa:	4b14      	ldr	r3, [pc, #80]	; (800404c <MX_I2C1_Init+0x74>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <MX_I2C1_Init+0x74>)
 8004002:	2200      	movs	r2, #0
 8004004:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <MX_I2C1_Init+0x74>)
 8004008:	2200      	movs	r2, #0
 800400a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <MX_I2C1_Init+0x74>)
 800400e:	2200      	movs	r2, #0
 8004010:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004012:	480e      	ldr	r0, [pc, #56]	; (800404c <MX_I2C1_Init+0x74>)
 8004014:	f001 fcbe 	bl	8005994 <HAL_I2C_Init>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800401e:	f000 f897 	bl	8004150 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004022:	2100      	movs	r1, #0
 8004024:	4809      	ldr	r0, [pc, #36]	; (800404c <MX_I2C1_Init+0x74>)
 8004026:	f002 fb39 	bl	800669c <HAL_I2CEx_ConfigAnalogFilter>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004030:	f000 f88e 	bl	8004150 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004034:	2100      	movs	r1, #0
 8004036:	4805      	ldr	r0, [pc, #20]	; (800404c <MX_I2C1_Init+0x74>)
 8004038:	f002 fb7b 	bl	8006732 <HAL_I2CEx_ConfigDigitalFilter>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004042:	f000 f885 	bl	8004150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004046:	bf00      	nop
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000238 	.word	0x20000238
 8004050:	40005400 	.word	0x40005400
 8004054:	2000090e 	.word	0x2000090e

08004058 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800405c:	4b1b      	ldr	r3, [pc, #108]	; (80040cc <MX_I2C2_Init+0x74>)
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <MX_I2C2_Init+0x78>)
 8004060:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <MX_I2C2_Init+0x74>)
 8004064:	4a1b      	ldr	r2, [pc, #108]	; (80040d4 <MX_I2C2_Init+0x7c>)
 8004066:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004068:	4b18      	ldr	r3, [pc, #96]	; (80040cc <MX_I2C2_Init+0x74>)
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800406e:	4b17      	ldr	r3, [pc, #92]	; (80040cc <MX_I2C2_Init+0x74>)
 8004070:	2201      	movs	r2, #1
 8004072:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <MX_I2C2_Init+0x74>)
 8004076:	2200      	movs	r2, #0
 8004078:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <MX_I2C2_Init+0x74>)
 800407c:	2200      	movs	r2, #0
 800407e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <MX_I2C2_Init+0x74>)
 8004082:	2200      	movs	r2, #0
 8004084:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <MX_I2C2_Init+0x74>)
 8004088:	2200      	movs	r2, #0
 800408a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <MX_I2C2_Init+0x74>)
 800408e:	2200      	movs	r2, #0
 8004090:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004092:	480e      	ldr	r0, [pc, #56]	; (80040cc <MX_I2C2_Init+0x74>)
 8004094:	f001 fc7e 	bl	8005994 <HAL_I2C_Init>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800409e:	f000 f857 	bl	8004150 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80040a2:	2100      	movs	r1, #0
 80040a4:	4809      	ldr	r0, [pc, #36]	; (80040cc <MX_I2C2_Init+0x74>)
 80040a6:	f002 faf9 	bl	800669c <HAL_I2CEx_ConfigAnalogFilter>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80040b0:	f000 f84e 	bl	8004150 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80040b4:	2100      	movs	r1, #0
 80040b6:	4805      	ldr	r0, [pc, #20]	; (80040cc <MX_I2C2_Init+0x74>)
 80040b8:	f002 fb3b 	bl	8006732 <HAL_I2CEx_ConfigDigitalFilter>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80040c2:	f000 f845 	bl	8004150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2000028c 	.word	0x2000028c
 80040d0:	40005800 	.word	0x40005800
 80040d4:	2000090e 	.word	0x2000090e

080040d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040de:	4b1b      	ldr	r3, [pc, #108]	; (800414c <MX_GPIO_Init+0x74>)
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	; (800414c <MX_GPIO_Init+0x74>)
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e8:	6153      	str	r3, [r2, #20]
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <MX_GPIO_Init+0x74>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <MX_GPIO_Init+0x74>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	4a14      	ldr	r2, [pc, #80]	; (800414c <MX_GPIO_Init+0x74>)
 80040fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004100:	6153      	str	r3, [r2, #20]
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <MX_GPIO_Init+0x74>)
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800410e:	4b0f      	ldr	r3, [pc, #60]	; (800414c <MX_GPIO_Init+0x74>)
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	4a0e      	ldr	r2, [pc, #56]	; (800414c <MX_GPIO_Init+0x74>)
 8004114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004118:	6153      	str	r3, [r2, #20]
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <MX_GPIO_Init+0x74>)
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <MX_GPIO_Init+0x74>)
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <MX_GPIO_Init+0x74>)
 800412c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004130:	6153      	str	r3, [r2, #20]
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <MX_GPIO_Init+0x74>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000

08004150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004154:	b672      	cpsid	i
}
 8004156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004158:	e7fe      	b.n	8004158 <Error_Handler+0x8>
	...

0800415c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_MspInit+0x44>)
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <HAL_MspInit+0x44>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6193      	str	r3, [r2, #24]
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <HAL_MspInit+0x44>)
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <HAL_MspInit+0x44>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4a08      	ldr	r2, [pc, #32]	; (80041a0 <HAL_MspInit+0x44>)
 8004180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004184:	61d3      	str	r3, [r2, #28]
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_MspInit+0x44>)
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	603b      	str	r3, [r7, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40021000 	.word	0x40021000

080041a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b090      	sub	sp, #64	; 0x40
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	605a      	str	r2, [r3, #4]
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c4:	d12e      	bne.n	8004224 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80041c6:	4b66      	ldr	r3, [pc, #408]	; (8004360 <HAL_ADC_MspInit+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3301      	adds	r3, #1
 80041cc:	4a64      	ldr	r2, [pc, #400]	; (8004360 <HAL_ADC_MspInit+0x1bc>)
 80041ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80041d0:	4b63      	ldr	r3, [pc, #396]	; (8004360 <HAL_ADC_MspInit+0x1bc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10b      	bne.n	80041f0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80041d8:	4b62      	ldr	r3, [pc, #392]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	4a61      	ldr	r2, [pc, #388]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80041de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e2:	6153      	str	r3, [r2, #20]
 80041e4:	4b5f      	ldr	r3, [pc, #380]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f0:	4b5c      	ldr	r3, [pc, #368]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	4a5b      	ldr	r2, [pc, #364]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fa:	6153      	str	r3, [r2, #20]
 80041fc:	4b59      	ldr	r3, [pc, #356]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004208:	2301      	movs	r3, #1
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800420c:	2303      	movs	r3, #3
 800420e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004210:	2300      	movs	r3, #0
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004218:	4619      	mov	r1, r3
 800421a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800421e:	f001 fa3f 	bl	80056a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8004222:	e099      	b.n	8004358 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a4f      	ldr	r2, [pc, #316]	; (8004368 <HAL_ADC_MspInit+0x1c4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d12e      	bne.n	800428c <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800422e:	4b4c      	ldr	r3, [pc, #304]	; (8004360 <HAL_ADC_MspInit+0x1bc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	4a4a      	ldr	r2, [pc, #296]	; (8004360 <HAL_ADC_MspInit+0x1bc>)
 8004236:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004238:	4b49      	ldr	r3, [pc, #292]	; (8004360 <HAL_ADC_MspInit+0x1bc>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d10b      	bne.n	8004258 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004240:	4b48      	ldr	r3, [pc, #288]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	4a47      	ldr	r2, [pc, #284]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 8004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800424a:	6153      	str	r3, [r2, #20]
 800424c:	4b45      	ldr	r3, [pc, #276]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004258:	4b42      	ldr	r3, [pc, #264]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	4a41      	ldr	r2, [pc, #260]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	6153      	str	r3, [r2, #20]
 8004264:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004270:	2340      	movs	r3, #64	; 0x40
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004274:	2303      	movs	r3, #3
 8004276:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004278:	2300      	movs	r3, #0
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004280:	4619      	mov	r1, r3
 8004282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004286:	f001 fa0b 	bl	80056a0 <HAL_GPIO_Init>
}
 800428a:	e065      	b.n	8004358 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC3)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a36      	ldr	r2, [pc, #216]	; (800436c <HAL_ADC_MspInit+0x1c8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d12d      	bne.n	80042f2 <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8004296:	4b36      	ldr	r3, [pc, #216]	; (8004370 <HAL_ADC_MspInit+0x1cc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3301      	adds	r3, #1
 800429c:	4a34      	ldr	r2, [pc, #208]	; (8004370 <HAL_ADC_MspInit+0x1cc>)
 800429e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80042a0:	4b33      	ldr	r3, [pc, #204]	; (8004370 <HAL_ADC_MspInit+0x1cc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d10b      	bne.n	80042c0 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80042a8:	4b2e      	ldr	r3, [pc, #184]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4a2d      	ldr	r2, [pc, #180]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80042ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b2:	6153      	str	r3, [r2, #20]
 80042b4:	4b2b      	ldr	r3, [pc, #172]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c0:	4b28      	ldr	r3, [pc, #160]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80042c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ca:	6153      	str	r3, [r2, #20]
 80042cc:	4b25      	ldr	r3, [pc, #148]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80042d8:	2302      	movs	r3, #2
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042dc:	2303      	movs	r3, #3
 80042de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042e8:	4619      	mov	r1, r3
 80042ea:	4822      	ldr	r0, [pc, #136]	; (8004374 <HAL_ADC_MspInit+0x1d0>)
 80042ec:	f001 f9d8 	bl	80056a0 <HAL_GPIO_Init>
}
 80042f0:	e032      	b.n	8004358 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC4)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a20      	ldr	r2, [pc, #128]	; (8004378 <HAL_ADC_MspInit+0x1d4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d12d      	bne.n	8004358 <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80042fc:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <HAL_ADC_MspInit+0x1cc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3301      	adds	r3, #1
 8004302:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <HAL_ADC_MspInit+0x1cc>)
 8004304:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8004306:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <HAL_ADC_MspInit+0x1cc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d10b      	bne.n	8004326 <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800430e:	4b15      	ldr	r3, [pc, #84]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4a14      	ldr	r2, [pc, #80]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 8004314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004318:	6153      	str	r3, [r2, #20]
 800431a:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004326:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4a0e      	ldr	r2, [pc, #56]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 800432c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004330:	6153      	str	r3, [r2, #20]
 8004332:	4b0c      	ldr	r3, [pc, #48]	; (8004364 <HAL_ADC_MspInit+0x1c0>)
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800433e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004344:	2303      	movs	r3, #3
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	2300      	movs	r3, #0
 800434a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800434c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004350:	4619      	mov	r1, r3
 8004352:	480a      	ldr	r0, [pc, #40]	; (800437c <HAL_ADC_MspInit+0x1d8>)
 8004354:	f001 f9a4 	bl	80056a0 <HAL_GPIO_Init>
}
 8004358:	bf00      	nop
 800435a:	3740      	adds	r7, #64	; 0x40
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000358 	.word	0x20000358
 8004364:	40021000 	.word	0x40021000
 8004368:	50000100 	.word	0x50000100
 800436c:	50000400 	.word	0x50000400
 8004370:	2000035c 	.word	0x2000035c
 8004374:	48000400 	.word	0x48000400
 8004378:	50000500 	.word	0x50000500
 800437c:	48001000 	.word	0x48001000

08004380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08e      	sub	sp, #56	; 0x38
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	609a      	str	r2, [r3, #8]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a54      	ldr	r2, [pc, #336]	; (80044f0 <HAL_I2C_MspInit+0x170>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d14e      	bne.n	8004440 <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a2:	4b54      	ldr	r3, [pc, #336]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	4a53      	ldr	r2, [pc, #332]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80043a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ac:	6153      	str	r3, [r2, #20]
 80043ae:	4b51      	ldr	r3, [pc, #324]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	623b      	str	r3, [r7, #32]
 80043b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ba:	4b4e      	ldr	r3, [pc, #312]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4a4d      	ldr	r2, [pc, #308]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80043c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c4:	6153      	str	r3, [r2, #20]
 80043c6:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043d8:	2312      	movs	r3, #18
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043e0:	2303      	movs	r3, #3
 80043e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80043e4:	2304      	movs	r3, #4
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ec:	4619      	mov	r1, r3
 80043ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043f2:	f001 f955 	bl	80056a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80043f6:	2380      	movs	r3, #128	; 0x80
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043fa:	2312      	movs	r3, #18
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004402:	2303      	movs	r3, #3
 8004404:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004406:	2304      	movs	r3, #4
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800440a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800440e:	4619      	mov	r1, r3
 8004410:	4839      	ldr	r0, [pc, #228]	; (80044f8 <HAL_I2C_MspInit+0x178>)
 8004412:	f001 f945 	bl	80056a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004416:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4a36      	ldr	r2, [pc, #216]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 800441c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004420:	61d3      	str	r3, [r2, #28]
 8004422:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442a:	61bb      	str	r3, [r7, #24]
 800442c:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800442e:	2200      	movs	r2, #0
 8004430:	2100      	movs	r1, #0
 8004432:	201f      	movs	r0, #31
 8004434:	f001 f8fd 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004438:	201f      	movs	r0, #31
 800443a:	f001 f916 	bl	800566a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800443e:	e052      	b.n	80044e6 <HAL_I2C_MspInit+0x166>
  else if(hi2c->Instance==I2C2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a2d      	ldr	r2, [pc, #180]	; (80044fc <HAL_I2C_MspInit+0x17c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d14d      	bne.n	80044e6 <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800444a:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	4a29      	ldr	r2, [pc, #164]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 8004450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004454:	6153      	str	r3, [r2, #20]
 8004456:	4b27      	ldr	r3, [pc, #156]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004462:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 8004468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800446c:	6153      	str	r3, [r2, #20]
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800447a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004480:	2312      	movs	r3, #18
 8004482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004488:	2303      	movs	r3, #3
 800448a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800448c:	2304      	movs	r3, #4
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004494:	4619      	mov	r1, r3
 8004496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800449a:	f001 f901 	bl	80056a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800449e:	2340      	movs	r3, #64	; 0x40
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a2:	2312      	movs	r3, #18
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044aa:	2303      	movs	r3, #3
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80044ae:	2304      	movs	r3, #4
 80044b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b6:	4619      	mov	r1, r3
 80044b8:	4811      	ldr	r0, [pc, #68]	; (8004500 <HAL_I2C_MspInit+0x180>)
 80044ba:	f001 f8f1 	bl	80056a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4a0c      	ldr	r2, [pc, #48]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80044c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044c8:	61d3      	str	r3, [r2, #28]
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_I2C_MspInit+0x174>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80044d6:	2200      	movs	r2, #0
 80044d8:	2100      	movs	r1, #0
 80044da:	2021      	movs	r0, #33	; 0x21
 80044dc:	f001 f8a9 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80044e0:	2021      	movs	r0, #33	; 0x21
 80044e2:	f001 f8c2 	bl	800566a <HAL_NVIC_EnableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3738      	adds	r7, #56	; 0x38
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40005400 	.word	0x40005400
 80044f4:	40021000 	.word	0x40021000
 80044f8:	48000400 	.word	0x48000400
 80044fc:	40005800 	.word	0x40005800
 8004500:	48001400 	.word	0x48001400

08004504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004508:	e7fe      	b.n	8004508 <NMI_Handler+0x4>

0800450a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800450e:	e7fe      	b.n	800450e <HardFault_Handler+0x4>

08004510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004514:	e7fe      	b.n	8004514 <MemManage_Handler+0x4>

08004516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800451a:	e7fe      	b.n	800451a <BusFault_Handler+0x4>

0800451c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004520:	e7fe      	b.n	8004520 <UsageFault_Handler+0x4>

08004522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004522:	b480      	push	{r7}
 8004524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004550:	f000 f92c 	bl	80047ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004554:	bf00      	nop
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800455c:	4802      	ldr	r0, [pc, #8]	; (8004568 <I2C1_EV_IRQHandler+0x10>)
 800455e:	f001 fdcb 	bl	80060f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000238 	.word	0x20000238

0800456c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <I2C2_EV_IRQHandler+0x10>)
 8004572:	f001 fdc1 	bl	80060f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	2000028c 	.word	0x2000028c

08004580 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <SystemInit+0x20>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	4a05      	ldr	r2, [pc, #20]	; (80045a0 <SystemInit+0x20>)
 800458c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <max>:
#include "utils.h"

float max(float a, float b) {
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80045ae:	edc7 0a00 	vstr	s1, [r7]
    if (a >= b) {
 80045b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80045b6:	edd7 7a00 	vldr	s15, [r7]
 80045ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c2:	db01      	blt.n	80045c8 <max+0x24>
        return a;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	e000      	b.n	80045ca <max+0x26>
    }
    return b;
 80045c8:	683b      	ldr	r3, [r7, #0]
}
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eeb0 0a67 	vmov.f32	s0, s15
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <lerp>:
    }
    return val;
}

float lerp(float a, float b, float t)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80045e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80045ea:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + (b - a) * t;
 80045ee:	ed97 7a02 	vldr	s14, [r7, #8]
 80045f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80045fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004602:	edd7 7a03 	vldr	s15, [r7, #12]
 8004606:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800460a:	eeb0 0a67 	vmov.f32	s0, s15
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <map>:

float map(float value, float in_min, float in_max, float out_min, float out_max) {
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004622:	edc7 0a04 	vstr	s1, [r7, #16]
 8004626:	ed87 1a03 	vstr	s2, [r7, #12]
 800462a:	edc7 1a02 	vstr	s3, [r7, #8]
 800462e:	ed87 2a01 	vstr	s4, [r7, #4]
    if (value >= in_max) {
 8004632:	ed97 7a05 	vldr	s14, [r7, #20]
 8004636:	edd7 7a03 	vldr	s15, [r7, #12]
 800463a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004642:	db02      	blt.n	800464a <map+0x32>
        return out_max;
 8004644:	edd7 7a01 	vldr	s15, [r7, #4]
 8004648:	e025      	b.n	8004696 <map+0x7e>
    }
    if (value <= in_min) {
 800464a:	ed97 7a05 	vldr	s14, [r7, #20]
 800464e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465a:	d802      	bhi.n	8004662 <map+0x4a>
        return out_min;
 800465c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004660:	e019      	b.n	8004696 <map+0x7e>
    }
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004662:	ed97 7a05 	vldr	s14, [r7, #20]
 8004666:	edd7 7a04 	vldr	s15, [r7, #16]
 800466a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800466e:	edd7 6a01 	vldr	s13, [r7, #4]
 8004672:	edd7 7a02 	vldr	s15, [r7, #8]
 8004676:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800467a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800467e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004682:	edd7 7a04 	vldr	s15, [r7, #16]
 8004686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004692:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004696:	eeb0 0a67 	vmov.f32	s0, s15
 800469a:	371c      	adds	r7, #28
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <convert_period_to_freq>:

float convert_period_to_freq(float period) {
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 / period;
 80046ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80046b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80046be:	eeb0 0a67 	vmov.f32	s0, s15
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004704 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80046d0:	f7ff ff56 	bl	8004580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046d4:	480c      	ldr	r0, [pc, #48]	; (8004708 <LoopForever+0x6>)
  ldr r1, =_edata
 80046d6:	490d      	ldr	r1, [pc, #52]	; (800470c <LoopForever+0xa>)
  ldr r2, =_sidata
 80046d8:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <LoopForever+0xe>)
  movs r3, #0
 80046da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046dc:	e002      	b.n	80046e4 <LoopCopyDataInit>

080046de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046e2:	3304      	adds	r3, #4

080046e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046e8:	d3f9      	bcc.n	80046de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046ea:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046ec:	4c0a      	ldr	r4, [pc, #40]	; (8004718 <LoopForever+0x16>)
  movs r3, #0
 80046ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046f0:	e001      	b.n	80046f6 <LoopFillZerobss>

080046f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046f4:	3204      	adds	r2, #4

080046f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046f8:	d3fb      	bcc.n	80046f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046fa:	f003 fc41 	bl	8007f80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046fe:	f7ff f899 	bl	8003834 <main>

08004702 <LoopForever>:

LoopForever:
    b LoopForever
 8004702:	e7fe      	b.n	8004702 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004704:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800470c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8004710:	08008bf0 	.word	0x08008bf0
  ldr r2, =_sbss
 8004714:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004718:	20000364 	.word	0x20000364

0800471c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800471c:	e7fe      	b.n	800471c <ADC1_2_IRQHandler>
	...

08004720 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <HAL_Init+0x28>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a07      	ldr	r2, [pc, #28]	; (8004748 <HAL_Init+0x28>)
 800472a:	f043 0310 	orr.w	r3, r3, #16
 800472e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004730:	2003      	movs	r0, #3
 8004732:	f000 ff73 	bl	800561c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004736:	200f      	movs	r0, #15
 8004738:	f000 f808 	bl	800474c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800473c:	f7ff fd0e 	bl	800415c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40022000 	.word	0x40022000

0800474c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_InitTick+0x54>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <HAL_InitTick+0x58>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	4619      	mov	r1, r3
 800475e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004762:	fbb3 f3f1 	udiv	r3, r3, r1
 8004766:	fbb2 f3f3 	udiv	r3, r2, r3
 800476a:	4618      	mov	r0, r3
 800476c:	f000 ff8b 	bl	8005686 <HAL_SYSTICK_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e00e      	b.n	8004798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b0f      	cmp	r3, #15
 800477e:	d80a      	bhi.n	8004796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004780:	2200      	movs	r2, #0
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004788:	f000 ff53 	bl	8005632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800478c:	4a06      	ldr	r2, [pc, #24]	; (80047a8 <HAL_InitTick+0x5c>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	e000      	b.n	8004798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
}
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000028 	.word	0x20000028
 80047a4:	20000030 	.word	0x20000030
 80047a8:	2000002c 	.word	0x2000002c

080047ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_IncTick+0x20>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_IncTick+0x24>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4413      	add	r3, r2
 80047bc:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <HAL_IncTick+0x24>)
 80047be:	6013      	str	r3, [r2, #0]
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	20000030 	.word	0x20000030
 80047d0:	20000360 	.word	0x20000360

080047d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_GetTick+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000360 	.word	0x20000360

080047ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047f4:	f7ff ffee 	bl	80047d4 <HAL_GetTick>
 80047f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004804:	d005      	beq.n	8004812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004806:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <HAL_Delay+0x44>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004812:	bf00      	nop
 8004814:	f7ff ffde 	bl	80047d4 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	429a      	cmp	r2, r3
 8004822:	d8f7      	bhi.n	8004814 <HAL_Delay+0x28>
  {
  }
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000030 	.word	0x20000030

08004834 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b09a      	sub	sp, #104	; 0x68
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e1c9      	b.n	8004be8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d176      	bne.n	8004954 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d152      	bne.n	8004914 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff fc8b 	bl	80041a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13b      	bne.n	8004914 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 fd87 	bl	80053b0 <ADC_Disable>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d12f      	bne.n	8004914 <HAL_ADC_Init+0xe0>
 80048b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d12b      	bne.n	8004914 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048c4:	f023 0302 	bic.w	r3, r3, #2
 80048c8:	f043 0202 	orr.w	r2, r3, #2
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048de:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048f0:	4b86      	ldr	r3, [pc, #536]	; (8004b0c <HAL_ADC_Init+0x2d8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a86      	ldr	r2, [pc, #536]	; (8004b10 <HAL_ADC_Init+0x2dc>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	0c9a      	lsrs	r2, r3, #18
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004906:	e002      	b.n	800490e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	3b01      	subs	r3, #1
 800490c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f9      	bne.n	8004908 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800492c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004930:	d110      	bne.n	8004954 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	f023 0312 	bic.w	r3, r3, #18
 800493a:	f043 0210 	orr.w	r2, r3, #16
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	f043 0201 	orr.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 8136 	bne.w	8004bce <HAL_ADC_Init+0x39a>
 8004962:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004966:	2b00      	cmp	r3, #0
 8004968:	f040 8131 	bne.w	8004bce <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 8129 	bne.w	8004bce <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004984:	f043 0202 	orr.w	r2, r3, #2
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004994:	d004      	beq.n	80049a0 <HAL_ADC_Init+0x16c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a5e      	ldr	r2, [pc, #376]	; (8004b14 <HAL_ADC_Init+0x2e0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d101      	bne.n	80049a4 <HAL_ADC_Init+0x170>
 80049a0:	4b5d      	ldr	r3, [pc, #372]	; (8004b18 <HAL_ADC_Init+0x2e4>)
 80049a2:	e000      	b.n	80049a6 <HAL_ADC_Init+0x172>
 80049a4:	4b5d      	ldr	r3, [pc, #372]	; (8004b1c <HAL_ADC_Init+0x2e8>)
 80049a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049b0:	d102      	bne.n	80049b8 <HAL_ADC_Init+0x184>
 80049b2:	4b58      	ldr	r3, [pc, #352]	; (8004b14 <HAL_ADC_Init+0x2e0>)
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	e01a      	b.n	80049ee <HAL_ADC_Init+0x1ba>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a55      	ldr	r2, [pc, #340]	; (8004b14 <HAL_ADC_Init+0x2e0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d103      	bne.n	80049ca <HAL_ADC_Init+0x196>
 80049c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e011      	b.n	80049ee <HAL_ADC_Init+0x1ba>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a54      	ldr	r2, [pc, #336]	; (8004b20 <HAL_ADC_Init+0x2ec>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d102      	bne.n	80049da <HAL_ADC_Init+0x1a6>
 80049d4:	4b53      	ldr	r3, [pc, #332]	; (8004b24 <HAL_ADC_Init+0x2f0>)
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e009      	b.n	80049ee <HAL_ADC_Init+0x1ba>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a51      	ldr	r2, [pc, #324]	; (8004b24 <HAL_ADC_Init+0x2f0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d102      	bne.n	80049ea <HAL_ADC_Init+0x1b6>
 80049e4:	4b4e      	ldr	r3, [pc, #312]	; (8004b20 <HAL_ADC_Init+0x2ec>)
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e001      	b.n	80049ee <HAL_ADC_Init+0x1ba>
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0303 	and.w	r3, r3, #3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d108      	bne.n	8004a0e <HAL_ADC_Init+0x1da>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_Init+0x1da>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e000      	b.n	8004a10 <HAL_ADC_Init+0x1dc>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d11c      	bne.n	8004a4e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d010      	beq.n	8004a3c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_ADC_Init+0x202>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_ADC_Init+0x202>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_ADC_Init+0x204>
 8004a36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d108      	bne.n	8004a4e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004a3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	431a      	orrs	r2, r3
 8004a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7e5b      	ldrb	r3, [r3, #25]
 8004a52:	035b      	lsls	r3, r3, #13
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a58:	2a01      	cmp	r2, #1
 8004a5a:	d002      	beq.n	8004a62 <HAL_ADC_Init+0x22e>
 8004a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a60:	e000      	b.n	8004a64 <HAL_ADC_Init+0x230>
 8004a62:	2200      	movs	r2, #0
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a74:	4313      	orrs	r3, r2
 8004a76:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d11b      	bne.n	8004aba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7e5b      	ldrb	r3, [r3, #25]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	045a      	lsls	r2, r3, #17
 8004a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9c:	e00d      	b.n	8004aba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004aa6:	f043 0220 	orr.w	r2, r3, #32
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d03a      	beq.n	8004b38 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <HAL_ADC_Init+0x2ec>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_ADC_Init+0x2a2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <HAL_ADC_Init+0x2f0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d128      	bne.n	8004b28 <HAL_ADC_Init+0x2f4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004ade:	d012      	beq.n	8004b06 <HAL_ADC_Init+0x2d2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae8:	d00a      	beq.n	8004b00 <HAL_ADC_Init+0x2cc>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004af2:	d002      	beq.n	8004afa <HAL_ADC_Init+0x2c6>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	e018      	b.n	8004b2c <HAL_ADC_Init+0x2f8>
 8004afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004afe:	e015      	b.n	8004b2c <HAL_ADC_Init+0x2f8>
 8004b00:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004b04:	e012      	b.n	8004b2c <HAL_ADC_Init+0x2f8>
 8004b06:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004b0a:	e00f      	b.n	8004b2c <HAL_ADC_Init+0x2f8>
 8004b0c:	20000028 	.word	0x20000028
 8004b10:	431bde83 	.word	0x431bde83
 8004b14:	50000100 	.word	0x50000100
 8004b18:	50000300 	.word	0x50000300
 8004b1c:	50000700 	.word	0x50000700
 8004b20:	50000400 	.word	0x50000400
 8004b24:	50000500 	.word	0x50000500
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b30:	4313      	orrs	r3, r2
 8004b32:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b34:	4313      	orrs	r3, r2
 8004b36:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d114      	bne.n	8004b70 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b54:	f023 0302 	bic.w	r3, r3, #2
 8004b58:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7e1b      	ldrb	r3, [r3, #24]
 8004b5e:	039a      	lsls	r2, r3, #14
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <HAL_ADC_Init+0x3bc>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004b80:	430b      	orrs	r3, r1
 8004b82:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	f023 010f 	bic.w	r1, r3, #15
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	1e5a      	subs	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ba4:	e007      	b.n	8004bb6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 020f 	bic.w	r2, r2, #15
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	f023 0303 	bic.w	r3, r3, #3
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
 8004bcc:	e00a      	b.n	8004be4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f023 0312 	bic.w	r3, r3, #18
 8004bd6:	f043 0210 	orr.w	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004be4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3768      	adds	r7, #104	; 0x68
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	fff0c007 	.word	0xfff0c007

08004bf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b09b      	sub	sp, #108	; 0x6c
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x22>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e2ca      	b.n	80051ac <HAL_ADC_ConfigChannel+0x5b8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 82ae 	bne.w	800518a <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d81c      	bhi.n	8004c70 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	461a      	mov	r2, r3
 8004c4a:	231f      	movs	r3, #31
 8004c4c:	4093      	lsls	r3, r2
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	4019      	ands	r1, r3
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6818      	ldr	r0, [r3, #0]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	fa00 f203 	lsl.w	r2, r0, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c6e:	e063      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b09      	cmp	r3, #9
 8004c76:	d81e      	bhi.n	8004cb6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	4413      	add	r3, r2
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	3b1e      	subs	r3, #30
 8004c8c:	221f      	movs	r2, #31
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	4019      	ands	r1, r3
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	3b1e      	subs	r3, #30
 8004ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8004cb4:	e040      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b0e      	cmp	r3, #14
 8004cbc:	d81e      	bhi.n	8004cfc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	4413      	add	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	3b3c      	subs	r3, #60	; 0x3c
 8004cd2:	221f      	movs	r2, #31
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	4019      	ands	r1, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	3b3c      	subs	r3, #60	; 0x3c
 8004cee:	fa00 f203 	lsl.w	r2, r0, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8004cfa:	e01d      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	3b5a      	subs	r3, #90	; 0x5a
 8004d10:	221f      	movs	r2, #31
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	4019      	ands	r1, r3
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4413      	add	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	3b5a      	subs	r3, #90	; 0x5a
 8004d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f040 80e5 	bne.w	8004f12 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b09      	cmp	r3, #9
 8004d4e:	d91c      	bls.n	8004d8a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6999      	ldr	r1, [r3, #24]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	4413      	add	r3, r2
 8004d60:	3b1e      	subs	r3, #30
 8004d62:	2207      	movs	r2, #7
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	4019      	ands	r1, r3
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6898      	ldr	r0, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	3b1e      	subs	r3, #30
 8004d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	619a      	str	r2, [r3, #24]
 8004d88:	e019      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6959      	ldr	r1, [r3, #20]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	2207      	movs	r2, #7
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	4019      	ands	r1, r3
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	6898      	ldr	r0, [r3, #8]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4613      	mov	r3, r2
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	4413      	add	r3, r2
 8004db2:	fa00 f203 	lsl.w	r2, r0, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	08db      	lsrs	r3, r3, #3
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d84f      	bhi.n	8004e80 <HAL_ADC_ConfigChannel+0x28c>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <HAL_ADC_ConfigChannel+0x1f4>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e1b 	.word	0x08004e1b
 8004df0:	08004e3d 	.word	0x08004e3d
 8004df4:	08004e5f 	.word	0x08004e5f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dfe:	4b9a      	ldr	r3, [pc, #616]	; (8005068 <HAL_ADC_ConfigChannel+0x474>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	0691      	lsls	r1, r2, #26
 8004e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e16:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e18:	e07e      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e20:	4b91      	ldr	r3, [pc, #580]	; (8005068 <HAL_ADC_ConfigChannel+0x474>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	0691      	lsls	r1, r2, #26
 8004e2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e38:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e3a:	e06d      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e42:	4b89      	ldr	r3, [pc, #548]	; (8005068 <HAL_ADC_ConfigChannel+0x474>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	0691      	lsls	r1, r2, #26
 8004e4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e5a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e5c:	e05c      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e64:	4b80      	ldr	r3, [pc, #512]	; (8005068 <HAL_ADC_ConfigChannel+0x474>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	0691      	lsls	r1, r2, #26
 8004e6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e70:	430a      	orrs	r2, r1
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004e7c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004e7e:	e04b      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	069b      	lsls	r3, r3, #26
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d107      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	069b      	lsls	r3, r3, #26
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d107      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ec6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ece:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	069b      	lsls	r3, r3, #26
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d107      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004eea:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	069b      	lsls	r3, r3, #26
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d10a      	bne.n	8004f16 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f0e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004f10:	e001      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004f12:	bf00      	nop
 8004f14:	e000      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004f16:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d108      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x344>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x344>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x346>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f040 8130 	bne.w	80051a0 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d00f      	beq.n	8004f68 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2201      	movs	r2, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	43da      	mvns	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	400a      	ands	r2, r1
 8004f62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004f66:	e049      	b.n	8004ffc <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	d91c      	bls.n	8004fc4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6999      	ldr	r1, [r3, #24]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	3b1b      	subs	r3, #27
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	4019      	ands	r1, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6898      	ldr	r0, [r3, #8]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4413      	add	r3, r2
 8004fb4:	3b1b      	subs	r3, #27
 8004fb6:	fa00 f203 	lsl.w	r2, r0, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	619a      	str	r2, [r3, #24]
 8004fc2:	e01b      	b.n	8004ffc <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6959      	ldr	r1, [r3, #20]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	4413      	add	r3, r2
 8004fd6:	2207      	movs	r2, #7
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	4019      	ands	r1, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6898      	ldr	r0, [r3, #8]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	4613      	mov	r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4413      	add	r3, r2
 8004ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005004:	d004      	beq.n	8005010 <HAL_ADC_ConfigChannel+0x41c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a18      	ldr	r2, [pc, #96]	; (800506c <HAL_ADC_ConfigChannel+0x478>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d101      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x420>
 8005010:	4b17      	ldr	r3, [pc, #92]	; (8005070 <HAL_ADC_ConfigChannel+0x47c>)
 8005012:	e000      	b.n	8005016 <HAL_ADC_ConfigChannel+0x422>
 8005014:	4b17      	ldr	r3, [pc, #92]	; (8005074 <HAL_ADC_ConfigChannel+0x480>)
 8005016:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b10      	cmp	r3, #16
 800501e:	d105      	bne.n	800502c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005020:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005028:	2b00      	cmp	r3, #0
 800502a:	d015      	beq.n	8005058 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005030:	2b11      	cmp	r3, #17
 8005032:	d105      	bne.n	8005040 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005044:	2b12      	cmp	r3, #18
 8005046:	f040 80ab 	bne.w	80051a0 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800504a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005052:	2b00      	cmp	r3, #0
 8005054:	f040 80a4 	bne.w	80051a0 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005060:	d10a      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x484>
 8005062:	4b02      	ldr	r3, [pc, #8]	; (800506c <HAL_ADC_ConfigChannel+0x478>)
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e022      	b.n	80050ae <HAL_ADC_ConfigChannel+0x4ba>
 8005068:	83fff000 	.word	0x83fff000
 800506c:	50000100 	.word	0x50000100
 8005070:	50000300 	.word	0x50000300
 8005074:	50000700 	.word	0x50000700
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a4e      	ldr	r2, [pc, #312]	; (80051b8 <HAL_ADC_ConfigChannel+0x5c4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d103      	bne.n	800508a <HAL_ADC_ConfigChannel+0x496>
 8005082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	e011      	b.n	80050ae <HAL_ADC_ConfigChannel+0x4ba>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <HAL_ADC_ConfigChannel+0x5c8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d102      	bne.n	800509a <HAL_ADC_ConfigChannel+0x4a6>
 8005094:	4b4a      	ldr	r3, [pc, #296]	; (80051c0 <HAL_ADC_ConfigChannel+0x5cc>)
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e009      	b.n	80050ae <HAL_ADC_ConfigChannel+0x4ba>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a48      	ldr	r2, [pc, #288]	; (80051c0 <HAL_ADC_ConfigChannel+0x5cc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d102      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x4b6>
 80050a4:	4b45      	ldr	r3, [pc, #276]	; (80051bc <HAL_ADC_ConfigChannel+0x5c8>)
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e001      	b.n	80050ae <HAL_ADC_ConfigChannel+0x4ba>
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d108      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x4da>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x4da>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x4dc>
 80050ce:	2300      	movs	r3, #0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d150      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80050d4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d010      	beq.n	80050fc <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d107      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x502>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x502>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x504>
 80050f6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d13c      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b10      	cmp	r3, #16
 8005102:	d11d      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x54c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800510c:	d118      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800510e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005118:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800511a:	4b2a      	ldr	r3, [pc, #168]	; (80051c4 <HAL_ADC_ConfigChannel+0x5d0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2a      	ldr	r2, [pc, #168]	; (80051c8 <HAL_ADC_ConfigChannel+0x5d4>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	0c9a      	lsrs	r2, r3, #18
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005130:	e002      	b.n	8005138 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	3b01      	subs	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f9      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800513e:	e02e      	b.n	800519e <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b11      	cmp	r3, #17
 8005146:	d10b      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x56c>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005150:	d106      	bne.n	8005160 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800515a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800515e:	e01e      	b.n	800519e <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b12      	cmp	r3, #18
 8005166:	d11a      	bne.n	800519e <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005172:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005174:	e013      	b.n	800519e <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f043 0220 	orr.w	r2, r3, #32
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005188:	e00a      	b.n	80051a0 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800519c:	e000      	b.n	80051a0 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800519e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80051a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	376c      	adds	r7, #108	; 0x6c
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	50000100 	.word	0x50000100
 80051bc:	50000400 	.word	0x50000400
 80051c0:	50000500 	.word	0x50000500
 80051c4:	20000028 	.word	0x20000028
 80051c8:	431bde83 	.word	0x431bde83

080051cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b099      	sub	sp, #100	; 0x64
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051e4:	d102      	bne.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80051e6:	4b6d      	ldr	r3, [pc, #436]	; (800539c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80051e8:	60bb      	str	r3, [r7, #8]
 80051ea:	e01a      	b.n	8005222 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a6a      	ldr	r2, [pc, #424]	; (800539c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d103      	bne.n	80051fe <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80051f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	e011      	b.n	8005222 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a67      	ldr	r2, [pc, #412]	; (80053a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d102      	bne.n	800520e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005208:	4b66      	ldr	r3, [pc, #408]	; (80053a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	e009      	b.n	8005222 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a64      	ldr	r2, [pc, #400]	; (80053a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d102      	bne.n	800521e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005218:	4b61      	ldr	r3, [pc, #388]	; (80053a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	e001      	b.n	8005222 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e0b0      	b.n	800538e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8005236:	2302      	movs	r3, #2
 8005238:	e0a9      	b.n	800538e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	f040 808d 	bne.w	800536c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 8086 	bne.w	800536c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005268:	d004      	beq.n	8005274 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4b      	ldr	r2, [pc, #300]	; (800539c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005274:	4b4c      	ldr	r3, [pc, #304]	; (80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8005276:	e000      	b.n	800527a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005278:	4b4c      	ldr	r3, [pc, #304]	; (80053ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800527a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d040      	beq.n	8005306 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005296:	035b      	lsls	r3, r3, #13
 8005298:	430b      	orrs	r3, r1
 800529a:	431a      	orrs	r2, r3
 800529c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800529e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d108      	bne.n	80052c0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80052c0:	2300      	movs	r3, #0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d15c      	bne.n	8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d107      	bne.n	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80052e2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d14b      	bne.n	8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80052e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80052f0:	f023 030f 	bic.w	r3, r3, #15
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	6811      	ldr	r1, [r2, #0]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	6892      	ldr	r2, [r2, #8]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	431a      	orrs	r2, r3
 8005300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005302:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005304:	e03c      	b.n	8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800530e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005310:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d108      	bne.n	8005332 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d123      	bne.n	8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 0303 	and.w	r3, r3, #3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d107      	bne.n	8005354 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005354:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005356:	2b00      	cmp	r3, #0
 8005358:	d112      	bne.n	8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800535a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005362:	f023 030f 	bic.w	r3, r3, #15
 8005366:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005368:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800536a:	e009      	b.n	8005380 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f043 0220 	orr.w	r2, r3, #32
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800537e:	e000      	b.n	8005382 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005380:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800538a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800538e:	4618      	mov	r0, r3
 8005390:	3764      	adds	r7, #100	; 0x64
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	50000100 	.word	0x50000100
 80053a0:	50000400 	.word	0x50000400
 80053a4:	50000500 	.word	0x50000500
 80053a8:	50000300 	.word	0x50000300
 80053ac:	50000700 	.word	0x50000700

080053b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d108      	bne.n	80053dc <ADC_Disable+0x2c>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <ADC_Disable+0x2c>
 80053d8:	2301      	movs	r3, #1
 80053da:	e000      	b.n	80053de <ADC_Disable+0x2e>
 80053dc:	2300      	movs	r3, #0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d047      	beq.n	8005472 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 030d 	and.w	r3, r3, #13
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d10f      	bne.n	8005410 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0202 	orr.w	r2, r2, #2
 80053fe:	609a      	str	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2203      	movs	r2, #3
 8005406:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005408:	f7ff f9e4 	bl	80047d4 <HAL_GetTick>
 800540c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800540e:	e029      	b.n	8005464 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	f043 0210 	orr.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	f043 0201 	orr.w	r2, r3, #1
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e023      	b.n	8005474 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800542c:	f7ff f9d2 	bl	80047d4 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d914      	bls.n	8005464 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b01      	cmp	r3, #1
 8005446:	d10d      	bne.n	8005464 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f043 0210 	orr.w	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005458:	f043 0201 	orr.w	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e007      	b.n	8005474 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d0dc      	beq.n	800542c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800548c:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <__NVIC_SetPriorityGrouping+0x44>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ae:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <__NVIC_SetPriorityGrouping+0x44>)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	60d3      	str	r3, [r2, #12]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	e000ed00 	.word	0xe000ed00

080054c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <__NVIC_GetPriorityGrouping+0x18>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	f003 0307 	and.w	r3, r3, #7
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	e000ed00 	.word	0xe000ed00

080054e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	db0b      	blt.n	800550a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	f003 021f 	and.w	r2, r3, #31
 80054f8:	4907      	ldr	r1, [pc, #28]	; (8005518 <__NVIC_EnableIRQ+0x38>)
 80054fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2001      	movs	r0, #1
 8005502:	fa00 f202 	lsl.w	r2, r0, r2
 8005506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000e100 	.word	0xe000e100

0800551c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	6039      	str	r1, [r7, #0]
 8005526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552c:	2b00      	cmp	r3, #0
 800552e:	db0a      	blt.n	8005546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	490c      	ldr	r1, [pc, #48]	; (8005568 <__NVIC_SetPriority+0x4c>)
 8005536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553a:	0112      	lsls	r2, r2, #4
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	440b      	add	r3, r1
 8005540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005544:	e00a      	b.n	800555c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	4908      	ldr	r1, [pc, #32]	; (800556c <__NVIC_SetPriority+0x50>)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	3b04      	subs	r3, #4
 8005554:	0112      	lsls	r2, r2, #4
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	440b      	add	r3, r1
 800555a:	761a      	strb	r2, [r3, #24]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	e000e100 	.word	0xe000e100
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	; 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f1c3 0307 	rsb	r3, r3, #7
 800558a:	2b04      	cmp	r3, #4
 800558c:	bf28      	it	cs
 800558e:	2304      	movcs	r3, #4
 8005590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3304      	adds	r3, #4
 8005596:	2b06      	cmp	r3, #6
 8005598:	d902      	bls.n	80055a0 <NVIC_EncodePriority+0x30>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3b03      	subs	r3, #3
 800559e:	e000      	b.n	80055a2 <NVIC_EncodePriority+0x32>
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	401a      	ands	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	43d9      	mvns	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c8:	4313      	orrs	r3, r2
         );
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3724      	adds	r7, #36	; 0x24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055e8:	d301      	bcc.n	80055ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ea:	2301      	movs	r3, #1
 80055ec:	e00f      	b.n	800560e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ee:	4a0a      	ldr	r2, [pc, #40]	; (8005618 <SysTick_Config+0x40>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055f6:	210f      	movs	r1, #15
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055fc:	f7ff ff8e 	bl	800551c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <SysTick_Config+0x40>)
 8005602:	2200      	movs	r2, #0
 8005604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005606:	4b04      	ldr	r3, [pc, #16]	; (8005618 <SysTick_Config+0x40>)
 8005608:	2207      	movs	r2, #7
 800560a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	e000e010 	.word	0xe000e010

0800561c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ff29 	bl	800547c <__NVIC_SetPriorityGrouping>
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	4603      	mov	r3, r0
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005644:	f7ff ff3e 	bl	80054c4 <__NVIC_GetPriorityGrouping>
 8005648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68b9      	ldr	r1, [r7, #8]
 800564e:	6978      	ldr	r0, [r7, #20]
 8005650:	f7ff ff8e 	bl	8005570 <NVIC_EncodePriority>
 8005654:	4602      	mov	r2, r0
 8005656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800565a:	4611      	mov	r1, r2
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff ff5d 	bl	800551c <__NVIC_SetPriority>
}
 8005662:	bf00      	nop
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	4603      	mov	r3, r0
 8005672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005678:	4618      	mov	r0, r3
 800567a:	f7ff ff31 	bl	80054e0 <__NVIC_EnableIRQ>
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff ffa2 	bl	80055d8 <SysTick_Config>
 8005694:	4603      	mov	r3, r0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056ae:	e154      	b.n	800595a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	2101      	movs	r1, #1
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8146 	beq.w	8005954 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d005      	beq.n	80056e0 <HAL_GPIO_Init+0x40>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d130      	bne.n	8005742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	2203      	movs	r2, #3
 80056ec:	fa02 f303 	lsl.w	r3, r2, r3
 80056f0:	43db      	mvns	r3, r3
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4013      	ands	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005716:	2201      	movs	r2, #1
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	fa02 f303 	lsl.w	r3, r2, r3
 800571e:	43db      	mvns	r3, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4013      	ands	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	091b      	lsrs	r3, r3, #4
 800572c:	f003 0201 	and.w	r2, r3, #1
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	2b03      	cmp	r3, #3
 800574c:	d017      	beq.n	800577e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	2203      	movs	r2, #3
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	43db      	mvns	r3, r3
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	4013      	ands	r3, r2
 8005764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d123      	bne.n	80057d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	08da      	lsrs	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3208      	adds	r2, #8
 8005792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	220f      	movs	r2, #15
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43db      	mvns	r3, r3
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	4013      	ands	r3, r2
 80057ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f003 0307 	and.w	r3, r3, #7
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	08da      	lsrs	r2, r3, #3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3208      	adds	r2, #8
 80057cc:	6939      	ldr	r1, [r7, #16]
 80057ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	2203      	movs	r2, #3
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	4013      	ands	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f003 0203 	and.w	r2, r3, #3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80a0 	beq.w	8005954 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005814:	4b58      	ldr	r3, [pc, #352]	; (8005978 <HAL_GPIO_Init+0x2d8>)
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	4a57      	ldr	r2, [pc, #348]	; (8005978 <HAL_GPIO_Init+0x2d8>)
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	6193      	str	r3, [r2, #24]
 8005820:	4b55      	ldr	r3, [pc, #340]	; (8005978 <HAL_GPIO_Init+0x2d8>)
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800582c:	4a53      	ldr	r2, [pc, #332]	; (800597c <HAL_GPIO_Init+0x2dc>)
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	089b      	lsrs	r3, r3, #2
 8005832:	3302      	adds	r3, #2
 8005834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	220f      	movs	r2, #15
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4013      	ands	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005856:	d019      	beq.n	800588c <HAL_GPIO_Init+0x1ec>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a49      	ldr	r2, [pc, #292]	; (8005980 <HAL_GPIO_Init+0x2e0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <HAL_GPIO_Init+0x1e8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a48      	ldr	r2, [pc, #288]	; (8005984 <HAL_GPIO_Init+0x2e4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00d      	beq.n	8005884 <HAL_GPIO_Init+0x1e4>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a47      	ldr	r2, [pc, #284]	; (8005988 <HAL_GPIO_Init+0x2e8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <HAL_GPIO_Init+0x1e0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a46      	ldr	r2, [pc, #280]	; (800598c <HAL_GPIO_Init+0x2ec>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_GPIO_Init+0x1dc>
 8005878:	2304      	movs	r3, #4
 800587a:	e008      	b.n	800588e <HAL_GPIO_Init+0x1ee>
 800587c:	2305      	movs	r3, #5
 800587e:	e006      	b.n	800588e <HAL_GPIO_Init+0x1ee>
 8005880:	2303      	movs	r3, #3
 8005882:	e004      	b.n	800588e <HAL_GPIO_Init+0x1ee>
 8005884:	2302      	movs	r3, #2
 8005886:	e002      	b.n	800588e <HAL_GPIO_Init+0x1ee>
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <HAL_GPIO_Init+0x1ee>
 800588c:	2300      	movs	r3, #0
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	f002 0203 	and.w	r2, r2, #3
 8005894:	0092      	lsls	r2, r2, #2
 8005896:	4093      	lsls	r3, r2
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800589e:	4937      	ldr	r1, [pc, #220]	; (800597c <HAL_GPIO_Init+0x2dc>)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	3302      	adds	r3, #2
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058ac:	4b38      	ldr	r3, [pc, #224]	; (8005990 <HAL_GPIO_Init+0x2f0>)
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	43db      	mvns	r3, r3
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4013      	ands	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d003      	beq.n	80058d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80058d0:	4a2f      	ldr	r2, [pc, #188]	; (8005990 <HAL_GPIO_Init+0x2f0>)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058d6:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <HAL_GPIO_Init+0x2f0>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	43db      	mvns	r3, r3
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4013      	ands	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80058fa:	4a25      	ldr	r2, [pc, #148]	; (8005990 <HAL_GPIO_Init+0x2f0>)
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005900:	4b23      	ldr	r3, [pc, #140]	; (8005990 <HAL_GPIO_Init+0x2f0>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	43db      	mvns	r3, r3
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005924:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <HAL_GPIO_Init+0x2f0>)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800592a:	4b19      	ldr	r3, [pc, #100]	; (8005990 <HAL_GPIO_Init+0x2f0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	43db      	mvns	r3, r3
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4013      	ands	r3, r2
 8005938:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800594e:	4a10      	ldr	r2, [pc, #64]	; (8005990 <HAL_GPIO_Init+0x2f0>)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	3301      	adds	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	fa22 f303 	lsr.w	r3, r2, r3
 8005964:	2b00      	cmp	r3, #0
 8005966:	f47f aea3 	bne.w	80056b0 <HAL_GPIO_Init+0x10>
  }
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40021000 	.word	0x40021000
 800597c:	40010000 	.word	0x40010000
 8005980:	48000400 	.word	0x48000400
 8005984:	48000800 	.word	0x48000800
 8005988:	48000c00 	.word	0x48000c00
 800598c:	48001000 	.word	0x48001000
 8005990:	40010400 	.word	0x40010400

08005994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e081      	b.n	8005aaa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fe fce0 	bl	8004380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2224      	movs	r2, #36	; 0x24
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80059e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d107      	bne.n	8005a0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a0a:	609a      	str	r2, [r3, #8]
 8005a0c:	e006      	b.n	8005a1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005a1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d104      	bne.n	8005a2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	6812      	ldr	r2, [r2, #0]
 8005a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	69d9      	ldr	r1, [r3, #28]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1a      	ldr	r2, [r3, #32]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	817b      	strh	r3, [r7, #10]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	f040 80da 	bne.w	8005c8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_I2C_Master_Transmit+0x30>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e0d3      	b.n	8005c8c <HAL_I2C_Master_Transmit+0x1d8>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005aec:	f7fe fe72 	bl	80047d4 <HAL_GetTick>
 8005af0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	2319      	movs	r3, #25
 8005af8:	2201      	movs	r2, #1
 8005afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fbe0 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e0be      	b.n	8005c8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2221      	movs	r2, #33	; 0x21
 8005b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2210      	movs	r2, #16
 8005b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	893a      	ldrh	r2, [r7, #8]
 8005b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2bff      	cmp	r3, #255	; 0xff
 8005b3e:	d90e      	bls.n	8005b5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	22ff      	movs	r2, #255	; 0xff
 8005b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	8979      	ldrh	r1, [r7, #10]
 8005b4e:	4b51      	ldr	r3, [pc, #324]	; (8005c94 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fd6e 	bl	8006638 <I2C_TransferConfig>
 8005b5c:	e06c      	b.n	8005c38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	8979      	ldrh	r1, [r7, #10]
 8005b70:	4b48      	ldr	r3, [pc, #288]	; (8005c94 <HAL_I2C_Master_Transmit+0x1e0>)
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 fd5d 	bl	8006638 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b7e:	e05b      	b.n	8005c38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	6a39      	ldr	r1, [r7, #32]
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 fbec 	bl	8006362 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e07b      	b.n	8005c8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d034      	beq.n	8005c38 <HAL_I2C_Master_Transmit+0x184>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d130      	bne.n	8005c38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2180      	movs	r1, #128	; 0x80
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fb6f 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e04d      	b.n	8005c8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2bff      	cmp	r3, #255	; 0xff
 8005bf8:	d90e      	bls.n	8005c18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	22ff      	movs	r2, #255	; 0xff
 8005bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	8979      	ldrh	r1, [r7, #10]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fd11 	bl	8006638 <I2C_TransferConfig>
 8005c16:	e00f      	b.n	8005c38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	8979      	ldrh	r1, [r7, #10]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f000 fd00 	bl	8006638 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d19e      	bne.n	8005b80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	6a39      	ldr	r1, [r7, #32]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fbd2 	bl	80063f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e01a      	b.n	8005c8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6859      	ldr	r1, [r3, #4]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_I2C_Master_Transmit+0x1e4>)
 8005c6a:	400b      	ands	r3, r1
 8005c6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e000      	b.n	8005c8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005c8a:	2302      	movs	r3, #2
  }
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	80002000 	.word	0x80002000
 8005c98:	fe00e800 	.word	0xfe00e800

08005c9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af02      	add	r7, sp, #8
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4603      	mov	r3, r0
 8005cac:	817b      	strh	r3, [r7, #10]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	813b      	strh	r3, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	f040 80f9 	bne.w	8005eb6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_I2C_Mem_Write+0x34>
 8005cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0ed      	b.n	8005eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_I2C_Mem_Write+0x4e>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e0e6      	b.n	8005eb8 <HAL_I2C_Mem_Write+0x21c>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cf2:	f7fe fd6f 	bl	80047d4 <HAL_GetTick>
 8005cf6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	2319      	movs	r3, #25
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fadd 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0d1      	b.n	8005eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2221      	movs	r2, #33	; 0x21
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2240      	movs	r2, #64	; 0x40
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a3a      	ldr	r2, [r7, #32]
 8005d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d3c:	88f8      	ldrh	r0, [r7, #6]
 8005d3e:	893a      	ldrh	r2, [r7, #8]
 8005d40:	8979      	ldrh	r1, [r7, #10]
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f9ed 	bl	800612c <I2C_RequestMemoryWrite>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0a9      	b.n	8005eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2bff      	cmp	r3, #255	; 0xff
 8005d6c:	d90e      	bls.n	8005d8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	22ff      	movs	r2, #255	; 0xff
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	8979      	ldrh	r1, [r7, #10]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fc57 	bl	8006638 <I2C_TransferConfig>
 8005d8a:	e00f      	b.n	8005dac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	8979      	ldrh	r1, [r7, #10]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fc46 	bl	8006638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fad6 	bl	8006362 <I2C_WaitOnTXISFlagUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e07b      	b.n	8005eb8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	781a      	ldrb	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d034      	beq.n	8005e64 <HAL_I2C_Mem_Write+0x1c8>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d130      	bne.n	8005e64 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2180      	movs	r1, #128	; 0x80
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fa59 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e04d      	b.n	8005eb8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2bff      	cmp	r3, #255	; 0xff
 8005e24:	d90e      	bls.n	8005e44 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	22ff      	movs	r2, #255	; 0xff
 8005e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	8979      	ldrh	r1, [r7, #10]
 8005e34:	2300      	movs	r3, #0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 fbfb 	bl	8006638 <I2C_TransferConfig>
 8005e42:	e00f      	b.n	8005e64 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	8979      	ldrh	r1, [r7, #10]
 8005e56:	2300      	movs	r3, #0
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fbea 	bl	8006638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d19e      	bne.n	8005dac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f000 fabc 	bl	80063f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e01a      	b.n	8005eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2220      	movs	r2, #32
 8005e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6859      	ldr	r1, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <HAL_I2C_Mem_Write+0x224>)
 8005e96:	400b      	ands	r3, r1
 8005e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e000      	b.n	8005eb8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
  }
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	fe00e800 	.word	0xfe00e800

08005ec4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	817b      	strh	r3, [r7, #10]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	813b      	strh	r3, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	f040 80fd 	bne.w	80060e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <HAL_I2C_Mem_Read+0x34>
 8005ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d105      	bne.n	8005f04 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e0f1      	b.n	80060e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_I2C_Mem_Read+0x4e>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e0ea      	b.n	80060e8 <HAL_I2C_Mem_Read+0x224>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005f1a:	f7fe fc5b 	bl	80047d4 <HAL_GetTick>
 8005f1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	2319      	movs	r3, #25
 8005f26:	2201      	movs	r2, #1
 8005f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f9c9 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0d5      	b.n	80060e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2222      	movs	r2, #34	; 0x22
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2240      	movs	r2, #64	; 0x40
 8005f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a3a      	ldr	r2, [r7, #32]
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f64:	88f8      	ldrh	r0, [r7, #6]
 8005f66:	893a      	ldrh	r2, [r7, #8]
 8005f68:	8979      	ldrh	r1, [r7, #10]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	9301      	str	r3, [sp, #4]
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	4603      	mov	r3, r0
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f92d 	bl	80061d4 <I2C_RequestMemoryRead>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0ad      	b.n	80060e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2bff      	cmp	r3, #255	; 0xff
 8005f94:	d90e      	bls.n	8005fb4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	22ff      	movs	r2, #255	; 0xff
 8005f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	8979      	ldrh	r1, [r7, #10]
 8005fa4:	4b52      	ldr	r3, [pc, #328]	; (80060f0 <HAL_I2C_Mem_Read+0x22c>)
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 fb43 	bl	8006638 <I2C_TransferConfig>
 8005fb2:	e00f      	b.n	8005fd4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	8979      	ldrh	r1, [r7, #10]
 8005fc6:	4b4a      	ldr	r3, [pc, #296]	; (80060f0 <HAL_I2C_Mem_Read+0x22c>)
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f000 fb32 	bl	8006638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2104      	movs	r1, #4
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f970 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e07c      	b.n	80060e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	3b01      	subs	r3, #1
 800600c:	b29a      	uxth	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006016:	b29b      	uxth	r3, r3
 8006018:	3b01      	subs	r3, #1
 800601a:	b29a      	uxth	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d034      	beq.n	8006094 <HAL_I2C_Mem_Read+0x1d0>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d130      	bne.n	8006094 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	2200      	movs	r2, #0
 800603a:	2180      	movs	r1, #128	; 0x80
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f941 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e04d      	b.n	80060e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2bff      	cmp	r3, #255	; 0xff
 8006054:	d90e      	bls.n	8006074 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	22ff      	movs	r2, #255	; 0xff
 800605a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006060:	b2da      	uxtb	r2, r3
 8006062:	8979      	ldrh	r1, [r7, #10]
 8006064:	2300      	movs	r3, #0
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fae3 	bl	8006638 <I2C_TransferConfig>
 8006072:	e00f      	b.n	8006094 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	b2da      	uxtb	r2, r3
 8006084:	8979      	ldrh	r1, [r7, #10]
 8006086:	2300      	movs	r3, #0
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fad2 	bl	8006638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d19a      	bne.n	8005fd4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f9a4 	bl	80063f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e01a      	b.n	80060e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2220      	movs	r2, #32
 80060b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6859      	ldr	r1, [r3, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	4b0b      	ldr	r3, [pc, #44]	; (80060f4 <HAL_I2C_Mem_Read+0x230>)
 80060c6:	400b      	ands	r3, r1
 80060c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e000      	b.n	80060e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
  }
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	80002400 	.word	0x80002400
 80060f4:	fe00e800 	.word	0xfe00e800

080060f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	4798      	blx	r3
  }
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	4608      	mov	r0, r1
 8006136:	4611      	mov	r1, r2
 8006138:	461a      	mov	r2, r3
 800613a:	4603      	mov	r3, r0
 800613c:	817b      	strh	r3, [r7, #10]
 800613e:	460b      	mov	r3, r1
 8006140:	813b      	strh	r3, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	8979      	ldrh	r1, [r7, #10]
 800614c:	4b20      	ldr	r3, [pc, #128]	; (80061d0 <I2C_RequestMemoryWrite+0xa4>)
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 fa6f 	bl	8006638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	69b9      	ldr	r1, [r7, #24]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f8ff 	bl	8006362 <I2C_WaitOnTXISFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02c      	b.n	80061c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d105      	bne.n	8006180 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006174:	893b      	ldrh	r3, [r7, #8]
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	629a      	str	r2, [r3, #40]	; 0x28
 800617e:	e015      	b.n	80061ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006180:	893b      	ldrh	r3, [r7, #8]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618e:	69fa      	ldr	r2, [r7, #28]
 8006190:	69b9      	ldr	r1, [r7, #24]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f8e5 	bl	8006362 <I2C_WaitOnTXISFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e012      	b.n	80061c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061a2:	893b      	ldrh	r3, [r7, #8]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	2200      	movs	r2, #0
 80061b4:	2180      	movs	r1, #128	; 0x80
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 f884 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e000      	b.n	80061c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	80002000 	.word	0x80002000

080061d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	817b      	strh	r3, [r7, #10]
 80061e6:	460b      	mov	r3, r1
 80061e8:	813b      	strh	r3, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	8979      	ldrh	r1, [r7, #10]
 80061f4:	4b20      	ldr	r3, [pc, #128]	; (8006278 <I2C_RequestMemoryRead+0xa4>)
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fa1c 	bl	8006638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	69b9      	ldr	r1, [r7, #24]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 f8ac 	bl	8006362 <I2C_WaitOnTXISFlagUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e02c      	b.n	800626e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d105      	bne.n	8006226 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800621a:	893b      	ldrh	r3, [r7, #8]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	629a      	str	r2, [r3, #40]	; 0x28
 8006224:	e015      	b.n	8006252 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	b29b      	uxth	r3, r3
 800622c:	b2da      	uxtb	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	69b9      	ldr	r1, [r7, #24]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f892 	bl	8006362 <I2C_WaitOnTXISFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e012      	b.n	800626e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006248:	893b      	ldrh	r3, [r7, #8]
 800624a:	b2da      	uxtb	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2200      	movs	r2, #0
 800625a:	2140      	movs	r1, #64	; 0x40
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 f831 	bl	80062c4 <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e000      	b.n	800626e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	80002000 	.word	0x80002000

0800627c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b02      	cmp	r3, #2
 8006290:	d103      	bne.n	800629a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2200      	movs	r2, #0
 8006298:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	f003 0301 	and.w	r3, r3, #1
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d007      	beq.n	80062b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	619a      	str	r2, [r3, #24]
  }
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	4613      	mov	r3, r2
 80062d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062d4:	e031      	b.n	800633a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062dc:	d02d      	beq.n	800633a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062de:	f7fe fa79 	bl	80047d4 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d302      	bcc.n	80062f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d122      	bne.n	800633a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	699a      	ldr	r2, [r3, #24]
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	4013      	ands	r3, r2
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	bf0c      	ite	eq
 8006304:	2301      	moveq	r3, #1
 8006306:	2300      	movne	r3, #0
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	79fb      	ldrb	r3, [r7, #7]
 800630e:	429a      	cmp	r2, r3
 8006310:	d113      	bne.n	800633a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006316:	f043 0220 	orr.w	r2, r3, #32
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e00f      	b.n	800635a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699a      	ldr	r2, [r3, #24]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	bf0c      	ite	eq
 800634a:	2301      	moveq	r3, #1
 800634c:	2300      	movne	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	429a      	cmp	r2, r3
 8006356:	d0be      	beq.n	80062d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800636e:	e033      	b.n	80063d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68b9      	ldr	r1, [r7, #8]
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f87f 	bl	8006478 <I2C_IsErrorOccurred>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e031      	b.n	80063e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800638a:	d025      	beq.n	80063d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800638c:	f7fe fa22 	bl	80047d4 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	429a      	cmp	r2, r3
 800639a:	d302      	bcc.n	80063a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d11a      	bne.n	80063d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d013      	beq.n	80063d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b4:	f043 0220 	orr.w	r2, r3, #32
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e007      	b.n	80063e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d1c4      	bne.n	8006370 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063fc:	e02f      	b.n	800645e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f838 	bl	8006478 <I2C_IsErrorOccurred>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e02d      	b.n	800646e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006412:	f7fe f9df 	bl	80047d4 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11a      	bne.n	800645e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b20      	cmp	r3, #32
 8006434:	d013      	beq.n	800645e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	f043 0220 	orr.w	r2, r3, #32
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e007      	b.n	800646e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b20      	cmp	r3, #32
 800646a:	d1c8      	bne.n	80063fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08a      	sub	sp, #40	; 0x28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d068      	beq.n	8006576 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2210      	movs	r2, #16
 80064aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064ac:	e049      	b.n	8006542 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064b4:	d045      	beq.n	8006542 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064b6:	f7fe f98d 	bl	80047d4 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d302      	bcc.n	80064cc <I2C_IsErrorOccurred+0x54>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d13a      	bne.n	8006542 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ee:	d121      	bne.n	8006534 <I2C_IsErrorOccurred+0xbc>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f6:	d01d      	beq.n	8006534 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80064f8:	7cfb      	ldrb	r3, [r7, #19]
 80064fa:	2b20      	cmp	r3, #32
 80064fc:	d01a      	beq.n	8006534 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800650c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800650e:	f7fe f961 	bl	80047d4 <HAL_GetTick>
 8006512:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006514:	e00e      	b.n	8006534 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006516:	f7fe f95d 	bl	80047d4 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b19      	cmp	r3, #25
 8006522:	d907      	bls.n	8006534 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006524:	6a3b      	ldr	r3, [r7, #32]
 8006526:	f043 0320 	orr.w	r3, r3, #32
 800652a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006532:	e006      	b.n	8006542 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d1e9      	bne.n	8006516 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b20      	cmp	r3, #32
 800654e:	d003      	beq.n	8006558 <I2C_IsErrorOccurred+0xe0>
 8006550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0aa      	beq.n	80064ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800655c:	2b00      	cmp	r3, #0
 800655e:	d103      	bne.n	8006568 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2220      	movs	r2, #32
 8006566:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	f043 0304 	orr.w	r3, r3, #4
 800656e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00b      	beq.n	80065a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006598:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00b      	beq.n	80065c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	f043 0308 	orr.w	r3, r3, #8
 80065b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	f043 0302 	orr.w	r3, r3, #2
 80065d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01c      	beq.n	8006626 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff fe45 	bl	800627c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6859      	ldr	r1, [r3, #4]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <I2C_IsErrorOccurred+0x1bc>)
 80065fe:	400b      	ands	r3, r1
 8006600:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	431a      	orrs	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800662a:	4618      	mov	r0, r3
 800662c:	3728      	adds	r7, #40	; 0x28
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	fe00e800 	.word	0xfe00e800

08006638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	817b      	strh	r3, [r7, #10]
 8006646:	4613      	mov	r3, r2
 8006648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006650:	7a7b      	ldrb	r3, [r7, #9]
 8006652:	041b      	lsls	r3, r3, #16
 8006654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006658:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	4313      	orrs	r3, r2
 8006662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006666:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	0d5b      	lsrs	r3, r3, #21
 8006672:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <I2C_TransferConfig+0x60>)
 8006678:	430b      	orrs	r3, r1
 800667a:	43db      	mvns	r3, r3
 800667c:	ea02 0103 	and.w	r1, r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	03ff63ff 	.word	0x03ff63ff

0800669c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d138      	bne.n	8006724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066bc:	2302      	movs	r3, #2
 80066be:	e032      	b.n	8006726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2224      	movs	r2, #36	; 0x24
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6819      	ldr	r1, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	e000      	b.n	8006726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b20      	cmp	r3, #32
 8006746:	d139      	bne.n	80067bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006752:	2302      	movs	r3, #2
 8006754:	e033      	b.n	80067be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2224      	movs	r2, #36	; 0x24
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	e000      	b.n	80067be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067bc:	2302      	movs	r3, #2
  }
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
	...

080067cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067dc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d102      	bne.n	80067f2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	f001 b823 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 817d 	beq.w	8006b02 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006808:	4bbc      	ldr	r3, [pc, #752]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	2b04      	cmp	r3, #4
 8006812:	d00c      	beq.n	800682e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006814:	4bb9      	ldr	r3, [pc, #740]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f003 030c 	and.w	r3, r3, #12
 800681c:	2b08      	cmp	r3, #8
 800681e:	d15c      	bne.n	80068da <HAL_RCC_OscConfig+0x10e>
 8006820:	4bb6      	ldr	r3, [pc, #728]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800682c:	d155      	bne.n	80068da <HAL_RCC_OscConfig+0x10e>
 800682e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006832:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800683a:	fa93 f3a3 	rbit	r3, r3
 800683e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006842:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006846:	fab3 f383 	clz	r3, r3
 800684a:	b2db      	uxtb	r3, r3
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b01      	cmp	r3, #1
 8006858:	d102      	bne.n	8006860 <HAL_RCC_OscConfig+0x94>
 800685a:	4ba8      	ldr	r3, [pc, #672]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	e015      	b.n	800688c <HAL_RCC_OscConfig+0xc0>
 8006860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006864:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006868:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800686c:	fa93 f3a3 	rbit	r3, r3
 8006870:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006874:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006878:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800687c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006880:	fa93 f3a3 	rbit	r3, r3
 8006884:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006888:	4b9c      	ldr	r3, [pc, #624]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006890:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006894:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006898:	fa92 f2a2 	rbit	r2, r2
 800689c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80068a0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80068a4:	fab2 f282 	clz	r2, r2
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	f042 0220 	orr.w	r2, r2, #32
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	f002 021f 	and.w	r2, r2, #31
 80068b4:	2101      	movs	r1, #1
 80068b6:	fa01 f202 	lsl.w	r2, r1, r2
 80068ba:	4013      	ands	r3, r2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 811f 	beq.w	8006b00 <HAL_RCC_OscConfig+0x334>
 80068c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f040 8116 	bne.w	8006b00 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f000 bfaf 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ea:	d106      	bne.n	80068fa <HAL_RCC_OscConfig+0x12e>
 80068ec:	4b83      	ldr	r3, [pc, #524]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a82      	ldr	r2, [pc, #520]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 80068f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	e036      	b.n	8006968 <HAL_RCC_OscConfig+0x19c>
 80068fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x158>
 800690a:	4b7c      	ldr	r3, [pc, #496]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a7b      	ldr	r2, [pc, #492]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	4b79      	ldr	r3, [pc, #484]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a78      	ldr	r2, [pc, #480]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800691c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	e021      	b.n	8006968 <HAL_RCC_OscConfig+0x19c>
 8006924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006928:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006934:	d10c      	bne.n	8006950 <HAL_RCC_OscConfig+0x184>
 8006936:	4b71      	ldr	r3, [pc, #452]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a70      	ldr	r2, [pc, #448]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800693c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	4b6e      	ldr	r3, [pc, #440]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a6d      	ldr	r2, [pc, #436]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	e00b      	b.n	8006968 <HAL_RCC_OscConfig+0x19c>
 8006950:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a69      	ldr	r2, [pc, #420]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	4b67      	ldr	r3, [pc, #412]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a66      	ldr	r2, [pc, #408]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006966:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006968:	4b64      	ldr	r3, [pc, #400]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	f023 020f 	bic.w	r2, r3, #15
 8006970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	495f      	ldr	r1, [pc, #380]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 800697e:	4313      	orrs	r3, r2
 8006980:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d059      	beq.n	8006a46 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006992:	f7fd ff1f 	bl	80047d4 <HAL_GetTick>
 8006996:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800699a:	e00a      	b.n	80069b2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800699c:	f7fd ff1a 	bl	80047d4 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	2b64      	cmp	r3, #100	; 0x64
 80069aa:	d902      	bls.n	80069b2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80069ac:	2303      	movs	r3, #3
 80069ae:	f000 bf43 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>
 80069b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069b6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ba:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80069be:	fa93 f3a3 	rbit	r3, r3
 80069c2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80069c6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ca:	fab3 f383 	clz	r3, r3
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d102      	bne.n	80069e4 <HAL_RCC_OscConfig+0x218>
 80069de:	4b47      	ldr	r3, [pc, #284]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	e015      	b.n	8006a10 <HAL_RCC_OscConfig+0x244>
 80069e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069e8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80069f0:	fa93 f3a3 	rbit	r3, r3
 80069f4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80069f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069fc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006a00:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006a04:	fa93 f3a3 	rbit	r3, r3
 8006a08:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006a0c:	4b3b      	ldr	r3, [pc, #236]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a14:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006a18:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006a1c:	fa92 f2a2 	rbit	r2, r2
 8006a20:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006a24:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006a28:	fab2 f282 	clz	r2, r2
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	f042 0220 	orr.w	r2, r2, #32
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	f002 021f 	and.w	r2, r2, #31
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3e:	4013      	ands	r3, r2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0ab      	beq.n	800699c <HAL_RCC_OscConfig+0x1d0>
 8006a44:	e05d      	b.n	8006b02 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a46:	f7fd fec5 	bl	80047d4 <HAL_GetTick>
 8006a4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a4e:	e00a      	b.n	8006a66 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a50:	f7fd fec0 	bl	80047d4 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	2b64      	cmp	r3, #100	; 0x64
 8006a5e:	d902      	bls.n	8006a66 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	f000 bee9 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>
 8006a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a6a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a6e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006a72:	fa93 f3a3 	rbit	r3, r3
 8006a76:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006a7a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7e:	fab3 f383 	clz	r3, r3
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d102      	bne.n	8006a98 <HAL_RCC_OscConfig+0x2cc>
 8006a92:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	e015      	b.n	8006ac4 <HAL_RCC_OscConfig+0x2f8>
 8006a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a9c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006aa4:	fa93 f3a3 	rbit	r3, r3
 8006aa8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006aac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ab0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006ab4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006ab8:	fa93 f3a3 	rbit	r3, r3
 8006abc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006ac0:	4b0e      	ldr	r3, [pc, #56]	; (8006afc <HAL_RCC_OscConfig+0x330>)
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006ac8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006acc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006ad0:	fa92 f2a2 	rbit	r2, r2
 8006ad4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006ad8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006adc:	fab2 f282 	clz	r2, r2
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	f042 0220 	orr.w	r2, r2, #32
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	f002 021f 	and.w	r2, r2, #31
 8006aec:	2101      	movs	r1, #1
 8006aee:	fa01 f202 	lsl.w	r2, r1, r2
 8006af2:	4013      	ands	r3, r2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1ab      	bne.n	8006a50 <HAL_RCC_OscConfig+0x284>
 8006af8:	e003      	b.n	8006b02 <HAL_RCC_OscConfig+0x336>
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 817d 	beq.w	8006e12 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006b18:	4ba6      	ldr	r3, [pc, #664]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f003 030c 	and.w	r3, r3, #12
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006b24:	4ba3      	ldr	r3, [pc, #652]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 030c 	and.w	r3, r3, #12
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d172      	bne.n	8006c16 <HAL_RCC_OscConfig+0x44a>
 8006b30:	4ba0      	ldr	r3, [pc, #640]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d16c      	bne.n	8006c16 <HAL_RCC_OscConfig+0x44a>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b42:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006b46:	fa93 f3a3 	rbit	r3, r3
 8006b4a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006b4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b52:	fab3 f383 	clz	r3, r3
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	f043 0301 	orr.w	r3, r3, #1
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d102      	bne.n	8006b6c <HAL_RCC_OscConfig+0x3a0>
 8006b66:	4b93      	ldr	r3, [pc, #588]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	e013      	b.n	8006b94 <HAL_RCC_OscConfig+0x3c8>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b72:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006b76:	fa93 f3a3 	rbit	r3, r3
 8006b7a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006b7e:	2302      	movs	r3, #2
 8006b80:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006b84:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006b88:	fa93 f3a3 	rbit	r3, r3
 8006b8c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006b90:	4b88      	ldr	r3, [pc, #544]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	2202      	movs	r2, #2
 8006b96:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006b9a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006b9e:	fa92 f2a2 	rbit	r2, r2
 8006ba2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006ba6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006baa:	fab2 f282 	clz	r2, r2
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	f042 0220 	orr.w	r2, r2, #32
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	f002 021f 	and.w	r2, r2, #31
 8006bba:	2101      	movs	r1, #1
 8006bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <HAL_RCC_OscConfig+0x410>
 8006bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d002      	beq.n	8006bdc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f000 be2e 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bdc:	4b75      	ldr	r3, [pc, #468]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006be4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006be8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	21f8      	movs	r1, #248	; 0xf8
 8006bf2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bf6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006bfa:	fa91 f1a1 	rbit	r1, r1
 8006bfe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006c02:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006c06:	fab1 f181 	clz	r1, r1
 8006c0a:	b2c9      	uxtb	r1, r1
 8006c0c:	408b      	lsls	r3, r1
 8006c0e:	4969      	ldr	r1, [pc, #420]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c14:	e0fd      	b.n	8006e12 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8088 	beq.w	8006d38 <HAL_RCC_OscConfig+0x56c>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c2e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006c32:	fa93 f3a3 	rbit	r3, r3
 8006c36:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006c3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c3e:	fab3 f383 	clz	r3, r3
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2301      	movs	r3, #1
 8006c52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c54:	f7fd fdbe 	bl	80047d4 <HAL_GetTick>
 8006c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c5c:	e00a      	b.n	8006c74 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c5e:	f7fd fdb9 	bl	80047d4 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d902      	bls.n	8006c74 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	f000 bde2 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006c7e:	fa93 f3a3 	rbit	r3, r3
 8006c82:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006c86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c8a:	fab3 f383 	clz	r3, r3
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d102      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x4d8>
 8006c9e:	4b45      	ldr	r3, [pc, #276]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	e013      	b.n	8006ccc <HAL_RCC_OscConfig+0x500>
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006caa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006cae:	fa93 f3a3 	rbit	r3, r3
 8006cb2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006cbc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006cc0:	fa93 f3a3 	rbit	r3, r3
 8006cc4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006cc8:	4b3a      	ldr	r3, [pc, #232]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006cd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006cd6:	fa92 f2a2 	rbit	r2, r2
 8006cda:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006cde:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006ce2:	fab2 f282 	clz	r2, r2
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	f042 0220 	orr.w	r2, r2, #32
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	f002 021f 	and.w	r2, r2, #31
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0af      	beq.n	8006c5e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cfe:	4b2d      	ldr	r3, [pc, #180]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	21f8      	movs	r1, #248	; 0xf8
 8006d14:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d18:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006d1c:	fa91 f1a1 	rbit	r1, r1
 8006d20:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006d24:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006d28:	fab1 f181 	clz	r1, r1
 8006d2c:	b2c9      	uxtb	r1, r1
 8006d2e:	408b      	lsls	r3, r1
 8006d30:	4920      	ldr	r1, [pc, #128]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	600b      	str	r3, [r1, #0]
 8006d36:	e06c      	b.n	8006e12 <HAL_RCC_OscConfig+0x646>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006d42:	fa93 f3a3 	rbit	r3, r3
 8006d46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006d4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d4e:	fab3 f383 	clz	r3, r3
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	461a      	mov	r2, r3
 8006d60:	2300      	movs	r3, #0
 8006d62:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d64:	f7fd fd36 	bl	80047d4 <HAL_GetTick>
 8006d68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d6c:	e00a      	b.n	8006d84 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d6e:	f7fd fd31 	bl	80047d4 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d902      	bls.n	8006d84 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	f000 bd5a 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d8e:	fa93 f3a3 	rbit	r3, r3
 8006d92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9a:	fab3 f383 	clz	r3, r3
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	095b      	lsrs	r3, r3, #5
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d104      	bne.n	8006db8 <HAL_RCC_OscConfig+0x5ec>
 8006dae:	4b01      	ldr	r3, [pc, #4]	; (8006db4 <HAL_RCC_OscConfig+0x5e8>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	e015      	b.n	8006de0 <HAL_RCC_OscConfig+0x614>
 8006db4:	40021000 	.word	0x40021000
 8006db8:	2302      	movs	r3, #2
 8006dba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dc2:	fa93 f3a3 	rbit	r3, r3
 8006dc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006dca:	2302      	movs	r3, #2
 8006dcc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006dd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dd4:	fa93 f3a3 	rbit	r3, r3
 8006dd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ddc:	4bc8      	ldr	r3, [pc, #800]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	2202      	movs	r2, #2
 8006de2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006de6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006dea:	fa92 f2a2 	rbit	r2, r2
 8006dee:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006df2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006df6:	fab2 f282 	clz	r2, r2
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	f042 0220 	orr.w	r2, r2, #32
 8006e00:	b2d2      	uxtb	r2, r2
 8006e02:	f002 021f 	and.w	r2, r2, #31
 8006e06:	2101      	movs	r1, #1
 8006e08:	fa01 f202 	lsl.w	r2, r1, r2
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ad      	bne.n	8006d6e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 8110 	beq.w	8007048 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d079      	beq.n	8006f2c <HAL_RCC_OscConfig+0x760>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e3e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006e42:	fa93 f3a3 	rbit	r3, r3
 8006e46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e4e:	fab3 f383 	clz	r3, r3
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	461a      	mov	r2, r3
 8006e56:	4bab      	ldr	r3, [pc, #684]	; (8007104 <HAL_RCC_OscConfig+0x938>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2301      	movs	r3, #1
 8006e60:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e62:	f7fd fcb7 	bl	80047d4 <HAL_GetTick>
 8006e66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e6c:	f7fd fcb2 	bl	80047d4 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d902      	bls.n	8006e82 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	f000 bcdb 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>
 8006e82:	2302      	movs	r3, #2
 8006e84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e88:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8c:	fa93 f3a3 	rbit	r3, r3
 8006e90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ea4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	fa93 f2a3 	rbit	r2, r3
 8006eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	fa93 f2a3 	rbit	r2, r3
 8006ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006eda:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006edc:	4b88      	ldr	r3, [pc, #544]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 8006ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ee4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ee8:	2102      	movs	r1, #2
 8006eea:	6019      	str	r1, [r3, #0]
 8006eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ef0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	fa93 f1a3 	rbit	r1, r3
 8006efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006efe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006f02:	6019      	str	r1, [r3, #0]
  return result;
 8006f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f08:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	fab3 f383 	clz	r3, r3
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2101      	movs	r1, #1
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0a0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x6a0>
 8006f2a:	e08d      	b.n	8007048 <HAL_RCC_OscConfig+0x87c>
 8006f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006f34:	2201      	movs	r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f3c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	fa93 f2a3 	rbit	r2, r3
 8006f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f4a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f4e:	601a      	str	r2, [r3, #0]
  return result;
 8006f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f54:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f58:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f5a:	fab3 f383 	clz	r3, r3
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	4b68      	ldr	r3, [pc, #416]	; (8007104 <HAL_RCC_OscConfig+0x938>)
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6e:	f7fd fc31 	bl	80047d4 <HAL_GetTick>
 8006f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f76:	e00a      	b.n	8006f8e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f78:	f7fd fc2c 	bl	80047d4 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d902      	bls.n	8006f8e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	f000 bc55 	b.w	8007838 <HAL_RCC_OscConfig+0x106c>
 8006f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f96:	2202      	movs	r2, #2
 8006f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	fa93 f2a3 	rbit	r2, r3
 8006fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006fba:	2202      	movs	r2, #2
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	fa93 f2a3 	rbit	r2, r3
 8006fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fde:	2202      	movs	r2, #2
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	fa93 f2a3 	rbit	r2, r3
 8006ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ff4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006ff8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ffa:	4b41      	ldr	r3, [pc, #260]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 8006ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007002:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007006:	2102      	movs	r1, #2
 8007008:	6019      	str	r1, [r3, #0]
 800700a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800700e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	fa93 f1a3 	rbit	r1, r3
 8007018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800701c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007020:	6019      	str	r1, [r3, #0]
  return result;
 8007022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007026:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	fab3 f383 	clz	r3, r3
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 031f 	and.w	r3, r3, #31
 800703c:	2101      	movs	r1, #1
 800703e:	fa01 f303 	lsl.w	r3, r1, r3
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d197      	bne.n	8006f78 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800704c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 81a1 	beq.w	80073a0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800705e:	2300      	movs	r3, #0
 8007060:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007064:	4b26      	ldr	r3, [pc, #152]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d116      	bne.n	800709e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007070:	4b23      	ldr	r3, [pc, #140]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	4a22      	ldr	r2, [pc, #136]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 8007076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800707a:	61d3      	str	r3, [r2, #28]
 800707c:	4b20      	ldr	r3, [pc, #128]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007084:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007088:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800708c:	601a      	str	r2, [r3, #0]
 800708e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007092:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007096:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007098:	2301      	movs	r3, #1
 800709a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709e:	4b1a      	ldr	r3, [pc, #104]	; (8007108 <HAL_RCC_OscConfig+0x93c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d11a      	bne.n	80070e0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070aa:	4b17      	ldr	r3, [pc, #92]	; (8007108 <HAL_RCC_OscConfig+0x93c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a16      	ldr	r2, [pc, #88]	; (8007108 <HAL_RCC_OscConfig+0x93c>)
 80070b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070b6:	f7fd fb8d 	bl	80047d4 <HAL_GetTick>
 80070ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070be:	e009      	b.n	80070d4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c0:	f7fd fb88 	bl	80047d4 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b64      	cmp	r3, #100	; 0x64
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e3b1      	b.n	8007838 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d4:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <HAL_RCC_OscConfig+0x93c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0ef      	beq.n	80070c0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d10d      	bne.n	800710c <HAL_RCC_OscConfig+0x940>
 80070f0:	4b03      	ldr	r3, [pc, #12]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	4a02      	ldr	r2, [pc, #8]	; (8007100 <HAL_RCC_OscConfig+0x934>)
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	6213      	str	r3, [r2, #32]
 80070fc:	e03c      	b.n	8007178 <HAL_RCC_OscConfig+0x9ac>
 80070fe:	bf00      	nop
 8007100:	40021000 	.word	0x40021000
 8007104:	10908120 	.word	0x10908120
 8007108:	40007000 	.word	0x40007000
 800710c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007110:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10c      	bne.n	8007136 <HAL_RCC_OscConfig+0x96a>
 800711c:	4bc1      	ldr	r3, [pc, #772]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	4ac0      	ldr	r2, [pc, #768]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007122:	f023 0301 	bic.w	r3, r3, #1
 8007126:	6213      	str	r3, [r2, #32]
 8007128:	4bbe      	ldr	r3, [pc, #760]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	4abd      	ldr	r2, [pc, #756]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 800712e:	f023 0304 	bic.w	r3, r3, #4
 8007132:	6213      	str	r3, [r2, #32]
 8007134:	e020      	b.n	8007178 <HAL_RCC_OscConfig+0x9ac>
 8007136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800713a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	2b05      	cmp	r3, #5
 8007144:	d10c      	bne.n	8007160 <HAL_RCC_OscConfig+0x994>
 8007146:	4bb7      	ldr	r3, [pc, #732]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	4ab6      	ldr	r2, [pc, #728]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 800714c:	f043 0304 	orr.w	r3, r3, #4
 8007150:	6213      	str	r3, [r2, #32]
 8007152:	4bb4      	ldr	r3, [pc, #720]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	4ab3      	ldr	r2, [pc, #716]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007158:	f043 0301 	orr.w	r3, r3, #1
 800715c:	6213      	str	r3, [r2, #32]
 800715e:	e00b      	b.n	8007178 <HAL_RCC_OscConfig+0x9ac>
 8007160:	4bb0      	ldr	r3, [pc, #704]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	4aaf      	ldr	r2, [pc, #700]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007166:	f023 0301 	bic.w	r3, r3, #1
 800716a:	6213      	str	r3, [r2, #32]
 800716c:	4bad      	ldr	r3, [pc, #692]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	4aac      	ldr	r2, [pc, #688]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007172:	f023 0304 	bic.w	r3, r3, #4
 8007176:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800717c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8081 	beq.w	800728c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800718a:	f7fd fb23 	bl	80047d4 <HAL_GetTick>
 800718e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007192:	e00b      	b.n	80071ac <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007194:	f7fd fb1e 	bl	80047d4 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d901      	bls.n	80071ac <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e345      	b.n	8007838 <HAL_RCC_OscConfig+0x106c>
 80071ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80071b4:	2202      	movs	r2, #2
 80071b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	fa93 f2a3 	rbit	r2, r3
 80071c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071ca:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80071d8:	2202      	movs	r2, #2
 80071da:	601a      	str	r2, [r3, #0]
 80071dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	fa93 f2a3 	rbit	r2, r3
 80071ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071ee:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80071f2:	601a      	str	r2, [r3, #0]
  return result;
 80071f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071f8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80071fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071fe:	fab3 f383 	clz	r3, r3
 8007202:	b2db      	uxtb	r3, r3
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	b2db      	uxtb	r3, r3
 8007208:	f043 0302 	orr.w	r3, r3, #2
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d102      	bne.n	8007218 <HAL_RCC_OscConfig+0xa4c>
 8007212:	4b84      	ldr	r3, [pc, #528]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	e013      	b.n	8007240 <HAL_RCC_OscConfig+0xa74>
 8007218:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800721c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007220:	2202      	movs	r2, #2
 8007222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007228:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	fa93 f2a3 	rbit	r2, r3
 8007232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007236:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	4b79      	ldr	r3, [pc, #484]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007244:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007248:	2102      	movs	r1, #2
 800724a:	6011      	str	r1, [r2, #0]
 800724c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007250:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007254:	6812      	ldr	r2, [r2, #0]
 8007256:	fa92 f1a2 	rbit	r1, r2
 800725a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800725e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007262:	6011      	str	r1, [r2, #0]
  return result;
 8007264:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007268:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800726c:	6812      	ldr	r2, [r2, #0]
 800726e:	fab2 f282 	clz	r2, r2
 8007272:	b2d2      	uxtb	r2, r2
 8007274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	f002 021f 	and.w	r2, r2, #31
 800727e:	2101      	movs	r1, #1
 8007280:	fa01 f202 	lsl.w	r2, r1, r2
 8007284:	4013      	ands	r3, r2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d084      	beq.n	8007194 <HAL_RCC_OscConfig+0x9c8>
 800728a:	e07f      	b.n	800738c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728c:	f7fd faa2 	bl	80047d4 <HAL_GetTick>
 8007290:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007294:	e00b      	b.n	80072ae <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007296:	f7fd fa9d 	bl	80047d4 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e2c4      	b.n	8007838 <HAL_RCC_OscConfig+0x106c>
 80072ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072b2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80072b6:	2202      	movs	r2, #2
 80072b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	fa93 f2a3 	rbit	r2, r3
 80072c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072cc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072d6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80072da:	2202      	movs	r2, #2
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	fa93 f2a3 	rbit	r2, r3
 80072ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80072f4:	601a      	str	r2, [r3, #0]
  return result;
 80072f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072fa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80072fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007300:	fab3 f383 	clz	r3, r3
 8007304:	b2db      	uxtb	r3, r3
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	b2db      	uxtb	r3, r3
 800730a:	f043 0302 	orr.w	r3, r3, #2
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b02      	cmp	r3, #2
 8007312:	d102      	bne.n	800731a <HAL_RCC_OscConfig+0xb4e>
 8007314:	4b43      	ldr	r3, [pc, #268]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	e013      	b.n	8007342 <HAL_RCC_OscConfig+0xb76>
 800731a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800731e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007322:	2202      	movs	r2, #2
 8007324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800732a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	fa93 f2a3 	rbit	r2, r3
 8007334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007338:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	4b39      	ldr	r3, [pc, #228]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007346:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800734a:	2102      	movs	r1, #2
 800734c:	6011      	str	r1, [r2, #0]
 800734e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007352:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007356:	6812      	ldr	r2, [r2, #0]
 8007358:	fa92 f1a2 	rbit	r1, r2
 800735c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007360:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007364:	6011      	str	r1, [r2, #0]
  return result;
 8007366:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800736a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	fab2 f282 	clz	r2, r2
 8007374:	b2d2      	uxtb	r2, r2
 8007376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	f002 021f 	and.w	r2, r2, #31
 8007380:	2101      	movs	r1, #1
 8007382:	fa01 f202 	lsl.w	r2, r1, r2
 8007386:	4013      	ands	r3, r2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d184      	bne.n	8007296 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800738c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007390:	2b01      	cmp	r3, #1
 8007392:	d105      	bne.n	80073a0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007394:	4b23      	ldr	r3, [pc, #140]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	4a22      	ldr	r2, [pc, #136]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 800739a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800739e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8242 	beq.w	8007836 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073b2:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <HAL_RCC_OscConfig+0xc58>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f003 030c 	and.w	r3, r3, #12
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	f000 8213 	beq.w	80077e6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	f040 8162 	bne.w	8007696 <HAL_RCC_OscConfig+0xeca>
 80073d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80073da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073e4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	fa93 f2a3 	rbit	r2, r3
 80073ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073f2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80073f6:	601a      	str	r2, [r3, #0]
  return result;
 80073f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073fc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007400:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007402:	fab3 f383 	clz	r3, r3
 8007406:	b2db      	uxtb	r3, r3
 8007408:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800740c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	461a      	mov	r2, r3
 8007414:	2300      	movs	r3, #0
 8007416:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007418:	f7fd f9dc 	bl	80047d4 <HAL_GetTick>
 800741c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007420:	e00c      	b.n	800743c <HAL_RCC_OscConfig+0xc70>
 8007422:	bf00      	nop
 8007424:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007428:	f7fd f9d4 	bl	80047d4 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d901      	bls.n	800743c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e1fd      	b.n	8007838 <HAL_RCC_OscConfig+0x106c>
 800743c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007440:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800744a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800744e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	fa93 f2a3 	rbit	r2, r3
 8007458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800745c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007460:	601a      	str	r2, [r3, #0]
  return result;
 8007462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007466:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800746a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800746c:	fab3 f383 	clz	r3, r3
 8007470:	b2db      	uxtb	r3, r3
 8007472:	095b      	lsrs	r3, r3, #5
 8007474:	b2db      	uxtb	r3, r3
 8007476:	f043 0301 	orr.w	r3, r3, #1
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	d102      	bne.n	8007486 <HAL_RCC_OscConfig+0xcba>
 8007480:	4bb0      	ldr	r3, [pc, #704]	; (8007744 <HAL_RCC_OscConfig+0xf78>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	e027      	b.n	80074d6 <HAL_RCC_OscConfig+0xd0a>
 8007486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800748a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800748e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007492:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007498:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	fa93 f2a3 	rbit	r2, r3
 80074a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074b0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80074b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	fa93 f2a3 	rbit	r2, r3
 80074c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074cc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	4b9c      	ldr	r3, [pc, #624]	; (8007744 <HAL_RCC_OscConfig+0xf78>)
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80074da:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80074de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80074e2:	6011      	str	r1, [r2, #0]
 80074e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80074e8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	fa92 f1a2 	rbit	r1, r2
 80074f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80074f6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80074fa:	6011      	str	r1, [r2, #0]
  return result;
 80074fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007500:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007504:	6812      	ldr	r2, [r2, #0]
 8007506:	fab2 f282 	clz	r2, r2
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	f042 0220 	orr.w	r2, r2, #32
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	f002 021f 	and.w	r2, r2, #31
 8007516:	2101      	movs	r1, #1
 8007518:	fa01 f202 	lsl.w	r2, r1, r2
 800751c:	4013      	ands	r3, r2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d182      	bne.n	8007428 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007522:	4b88      	ldr	r3, [pc, #544]	; (8007744 <HAL_RCC_OscConfig+0xf78>)
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800752a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800752e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800753a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	430b      	orrs	r3, r1
 8007544:	497f      	ldr	r1, [pc, #508]	; (8007744 <HAL_RCC_OscConfig+0xf78>)
 8007546:	4313      	orrs	r3, r2
 8007548:	604b      	str	r3, [r1, #4]
 800754a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800754e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007552:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	fa93 f2a3 	rbit	r2, r3
 8007566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800756a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800756e:	601a      	str	r2, [r3, #0]
  return result;
 8007570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007574:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007578:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800757a:	fab3 f383 	clz	r3, r3
 800757e:	b2db      	uxtb	r3, r3
 8007580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	461a      	mov	r2, r3
 800758c:	2301      	movs	r3, #1
 800758e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007590:	f7fd f920 	bl	80047d4 <HAL_GetTick>
 8007594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007598:	e009      	b.n	80075ae <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800759a:	f7fd f91b 	bl	80047d4 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d901      	bls.n	80075ae <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e144      	b.n	8007838 <HAL_RCC_OscConfig+0x106c>
 80075ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80075b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	fa93 f2a3 	rbit	r2, r3
 80075ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ce:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80075d2:	601a      	str	r2, [r3, #0]
  return result;
 80075d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075d8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80075dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075de:	fab3 f383 	clz	r3, r3
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d102      	bne.n	80075f8 <HAL_RCC_OscConfig+0xe2c>
 80075f2:	4b54      	ldr	r3, [pc, #336]	; (8007744 <HAL_RCC_OscConfig+0xf78>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	e027      	b.n	8007648 <HAL_RCC_OscConfig+0xe7c>
 80075f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075fc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800760a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	fa93 f2a3 	rbit	r2, r3
 8007614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007618:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007622:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800762a:	601a      	str	r2, [r3, #0]
 800762c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007630:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	fa93 f2a3 	rbit	r2, r3
 800763a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800763e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	4b3f      	ldr	r3, [pc, #252]	; (8007744 <HAL_RCC_OscConfig+0xf78>)
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800764c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007650:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007654:	6011      	str	r1, [r2, #0]
 8007656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800765a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	fa92 f1a2 	rbit	r1, r2
 8007664:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007668:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800766c:	6011      	str	r1, [r2, #0]
  return result;
 800766e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007672:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	fab2 f282 	clz	r2, r2
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	f042 0220 	orr.w	r2, r2, #32
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	f002 021f 	and.w	r2, r2, #31
 8007688:	2101      	movs	r1, #1
 800768a:	fa01 f202 	lsl.w	r2, r1, r2
 800768e:	4013      	ands	r3, r2
 8007690:	2b00      	cmp	r3, #0
 8007692:	d082      	beq.n	800759a <HAL_RCC_OscConfig+0xdce>
 8007694:	e0cf      	b.n	8007836 <HAL_RCC_OscConfig+0x106a>
 8007696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800769a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800769e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80076a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076a8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	fa93 f2a3 	rbit	r2, r3
 80076b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80076ba:	601a      	str	r2, [r3, #0]
  return result;
 80076bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80076c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076c6:	fab3 f383 	clz	r3, r3
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80076d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	461a      	mov	r2, r3
 80076d8:	2300      	movs	r3, #0
 80076da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076dc:	f7fd f87a 	bl	80047d4 <HAL_GetTick>
 80076e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076e4:	e009      	b.n	80076fa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e6:	f7fd f875 	bl	80047d4 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d901      	bls.n	80076fa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e09e      	b.n	8007838 <HAL_RCC_OscConfig+0x106c>
 80076fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076fe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007702:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007706:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800770c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	fa93 f2a3 	rbit	r2, r3
 8007716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800771a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800771e:	601a      	str	r2, [r3, #0]
  return result;
 8007720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007724:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007728:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800772a:	fab3 f383 	clz	r3, r3
 800772e:	b2db      	uxtb	r3, r3
 8007730:	095b      	lsrs	r3, r3, #5
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f043 0301 	orr.w	r3, r3, #1
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b01      	cmp	r3, #1
 800773c:	d104      	bne.n	8007748 <HAL_RCC_OscConfig+0xf7c>
 800773e:	4b01      	ldr	r3, [pc, #4]	; (8007744 <HAL_RCC_OscConfig+0xf78>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	e029      	b.n	8007798 <HAL_RCC_OscConfig+0xfcc>
 8007744:	40021000 	.word	0x40021000
 8007748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800774c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007750:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007754:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800775a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	fa93 f2a3 	rbit	r2, r3
 8007764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007768:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007772:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007780:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	fa93 f2a3 	rbit	r2, r3
 800778a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800778e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	4b2b      	ldr	r3, [pc, #172]	; (8007844 <HAL_RCC_OscConfig+0x1078>)
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800779c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80077a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80077a4:	6011      	str	r1, [r2, #0]
 80077a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077aa:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80077ae:	6812      	ldr	r2, [r2, #0]
 80077b0:	fa92 f1a2 	rbit	r1, r2
 80077b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077b8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80077bc:	6011      	str	r1, [r2, #0]
  return result;
 80077be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80077c2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80077c6:	6812      	ldr	r2, [r2, #0]
 80077c8:	fab2 f282 	clz	r2, r2
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	f042 0220 	orr.w	r2, r2, #32
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	f002 021f 	and.w	r2, r2, #31
 80077d8:	2101      	movs	r1, #1
 80077da:	fa01 f202 	lsl.w	r2, r1, r2
 80077de:	4013      	ands	r3, r2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d180      	bne.n	80076e6 <HAL_RCC_OscConfig+0xf1a>
 80077e4:	e027      	b.n	8007836 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e01e      	b.n	8007838 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80077fa:	4b12      	ldr	r3, [pc, #72]	; (8007844 <HAL_RCC_OscConfig+0x1078>)
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007802:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007806:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800780a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800780e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	429a      	cmp	r2, r3
 8007818:	d10b      	bne.n	8007832 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800781a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800781e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800782e:	429a      	cmp	r2, r3
 8007830:	d001      	beq.n	8007836 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	40021000 	.word	0x40021000

08007848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b09e      	sub	sp, #120	; 0x78
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e162      	b.n	8007b26 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007860:	4b90      	ldr	r3, [pc, #576]	; (8007aa4 <HAL_RCC_ClockConfig+0x25c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	683a      	ldr	r2, [r7, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d910      	bls.n	8007890 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800786e:	4b8d      	ldr	r3, [pc, #564]	; (8007aa4 <HAL_RCC_ClockConfig+0x25c>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f023 0207 	bic.w	r2, r3, #7
 8007876:	498b      	ldr	r1, [pc, #556]	; (8007aa4 <HAL_RCC_ClockConfig+0x25c>)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	4313      	orrs	r3, r2
 800787c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800787e:	4b89      	ldr	r3, [pc, #548]	; (8007aa4 <HAL_RCC_ClockConfig+0x25c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0307 	and.w	r3, r3, #7
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	d001      	beq.n	8007890 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e14a      	b.n	8007b26 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d008      	beq.n	80078ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800789c:	4b82      	ldr	r3, [pc, #520]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	497f      	ldr	r1, [pc, #508]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 80dc 	beq.w	8007a74 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d13c      	bne.n	800793e <HAL_RCC_ClockConfig+0xf6>
 80078c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078c8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078cc:	fa93 f3a3 	rbit	r3, r3
 80078d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80078d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078d4:	fab3 f383 	clz	r3, r3
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	f043 0301 	orr.w	r3, r3, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d102      	bne.n	80078ee <HAL_RCC_ClockConfig+0xa6>
 80078e8:	4b6f      	ldr	r3, [pc, #444]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	e00f      	b.n	800790e <HAL_RCC_ClockConfig+0xc6>
 80078ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078f6:	fa93 f3a3 	rbit	r3, r3
 80078fa:	667b      	str	r3, [r7, #100]	; 0x64
 80078fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007900:	663b      	str	r3, [r7, #96]	; 0x60
 8007902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007904:	fa93 f3a3 	rbit	r3, r3
 8007908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800790a:	4b67      	ldr	r3, [pc, #412]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007912:	65ba      	str	r2, [r7, #88]	; 0x58
 8007914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007916:	fa92 f2a2 	rbit	r2, r2
 800791a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800791c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800791e:	fab2 f282 	clz	r2, r2
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	f042 0220 	orr.w	r2, r2, #32
 8007928:	b2d2      	uxtb	r2, r2
 800792a:	f002 021f 	and.w	r2, r2, #31
 800792e:	2101      	movs	r1, #1
 8007930:	fa01 f202 	lsl.w	r2, r1, r2
 8007934:	4013      	ands	r3, r2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d17b      	bne.n	8007a32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e0f3      	b.n	8007b26 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d13c      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x178>
 8007946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800794a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794e:	fa93 f3a3 	rbit	r3, r3
 8007952:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007956:	fab3 f383 	clz	r3, r3
 800795a:	b2db      	uxtb	r3, r3
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f043 0301 	orr.w	r3, r3, #1
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b01      	cmp	r3, #1
 8007968:	d102      	bne.n	8007970 <HAL_RCC_ClockConfig+0x128>
 800796a:	4b4f      	ldr	r3, [pc, #316]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	e00f      	b.n	8007990 <HAL_RCC_ClockConfig+0x148>
 8007970:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007974:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007978:	fa93 f3a3 	rbit	r3, r3
 800797c:	647b      	str	r3, [r7, #68]	; 0x44
 800797e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007982:	643b      	str	r3, [r7, #64]	; 0x40
 8007984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007986:	fa93 f3a3 	rbit	r3, r3
 800798a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800798c:	4b46      	ldr	r3, [pc, #280]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007994:	63ba      	str	r2, [r7, #56]	; 0x38
 8007996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007998:	fa92 f2a2 	rbit	r2, r2
 800799c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800799e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079a0:	fab2 f282 	clz	r2, r2
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	f042 0220 	orr.w	r2, r2, #32
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	f002 021f 	and.w	r2, r2, #31
 80079b0:	2101      	movs	r1, #1
 80079b2:	fa01 f202 	lsl.w	r2, r1, r2
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d13a      	bne.n	8007a32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0b2      	b.n	8007b26 <HAL_RCC_ClockConfig+0x2de>
 80079c0:	2302      	movs	r3, #2
 80079c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	fa93 f3a3 	rbit	r3, r3
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80079cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079ce:	fab3 f383 	clz	r3, r3
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f043 0301 	orr.w	r3, r3, #1
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d102      	bne.n	80079e8 <HAL_RCC_ClockConfig+0x1a0>
 80079e2:	4b31      	ldr	r3, [pc, #196]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	e00d      	b.n	8007a04 <HAL_RCC_ClockConfig+0x1bc>
 80079e8:	2302      	movs	r3, #2
 80079ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	fa93 f3a3 	rbit	r3, r3
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
 80079f4:	2302      	movs	r3, #2
 80079f6:	623b      	str	r3, [r7, #32]
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	fa93 f3a3 	rbit	r3, r3
 80079fe:	61fb      	str	r3, [r7, #28]
 8007a00:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	2202      	movs	r2, #2
 8007a06:	61ba      	str	r2, [r7, #24]
 8007a08:	69ba      	ldr	r2, [r7, #24]
 8007a0a:	fa92 f2a2 	rbit	r2, r2
 8007a0e:	617a      	str	r2, [r7, #20]
  return result;
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	fab2 f282 	clz	r2, r2
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	f042 0220 	orr.w	r2, r2, #32
 8007a1c:	b2d2      	uxtb	r2, r2
 8007a1e:	f002 021f 	and.w	r2, r2, #31
 8007a22:	2101      	movs	r1, #1
 8007a24:	fa01 f202 	lsl.w	r2, r1, r2
 8007a28:	4013      	ands	r3, r2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e079      	b.n	8007b26 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a32:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f023 0203 	bic.w	r2, r3, #3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	491a      	ldr	r1, [pc, #104]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a44:	f7fc fec6 	bl	80047d4 <HAL_GetTick>
 8007a48:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a4a:	e00a      	b.n	8007a62 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a4c:	f7fc fec2 	bl	80047d4 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e061      	b.n	8007b26 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a62:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <HAL_RCC_ClockConfig+0x260>)
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f003 020c 	and.w	r2, r3, #12
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d1eb      	bne.n	8007a4c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a74:	4b0b      	ldr	r3, [pc, #44]	; (8007aa4 <HAL_RCC_ClockConfig+0x25c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d214      	bcs.n	8007aac <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <HAL_RCC_ClockConfig+0x25c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f023 0207 	bic.w	r2, r3, #7
 8007a8a:	4906      	ldr	r1, [pc, #24]	; (8007aa4 <HAL_RCC_ClockConfig+0x25c>)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a92:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <HAL_RCC_ClockConfig+0x25c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d005      	beq.n	8007aac <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e040      	b.n	8007b26 <HAL_RCC_ClockConfig+0x2de>
 8007aa4:	40022000 	.word	0x40022000
 8007aa8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d008      	beq.n	8007aca <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ab8:	4b1d      	ldr	r3, [pc, #116]	; (8007b30 <HAL_RCC_ClockConfig+0x2e8>)
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	491a      	ldr	r1, [pc, #104]	; (8007b30 <HAL_RCC_ClockConfig+0x2e8>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d009      	beq.n	8007aea <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ad6:	4b16      	ldr	r3, [pc, #88]	; (8007b30 <HAL_RCC_ClockConfig+0x2e8>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	00db      	lsls	r3, r3, #3
 8007ae4:	4912      	ldr	r1, [pc, #72]	; (8007b30 <HAL_RCC_ClockConfig+0x2e8>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007aea:	f000 f829 	bl	8007b40 <HAL_RCC_GetSysClockFreq>
 8007aee:	4601      	mov	r1, r0
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <HAL_RCC_ClockConfig+0x2e8>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007af8:	22f0      	movs	r2, #240	; 0xf0
 8007afa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	fa92 f2a2 	rbit	r2, r2
 8007b02:	60fa      	str	r2, [r7, #12]
  return result;
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	fab2 f282 	clz	r2, r2
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	40d3      	lsrs	r3, r2
 8007b0e:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <HAL_RCC_ClockConfig+0x2ec>)
 8007b10:	5cd3      	ldrb	r3, [r2, r3]
 8007b12:	fa21 f303 	lsr.w	r3, r1, r3
 8007b16:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <HAL_RCC_ClockConfig+0x2f0>)
 8007b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007b1a:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <HAL_RCC_ClockConfig+0x2f4>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fc fe14 	bl	800474c <HAL_InitTick>
  
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3778      	adds	r7, #120	; 0x78
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40021000 	.word	0x40021000
 8007b34:	08008b40 	.word	0x08008b40
 8007b38:	20000028 	.word	0x20000028
 8007b3c:	2000002c 	.word	0x2000002c

08007b40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b08b      	sub	sp, #44	; 0x2c
 8007b44:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007b5a:	4b29      	ldr	r3, [pc, #164]	; (8007c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f003 030c 	and.w	r3, r3, #12
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	d002      	beq.n	8007b70 <HAL_RCC_GetSysClockFreq+0x30>
 8007b6a:	2b08      	cmp	r3, #8
 8007b6c:	d003      	beq.n	8007b76 <HAL_RCC_GetSysClockFreq+0x36>
 8007b6e:	e03c      	b.n	8007bea <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007b70:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b72:	623b      	str	r3, [r7, #32]
      break;
 8007b74:	e03c      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007b7c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007b80:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	fa92 f2a2 	rbit	r2, r2
 8007b88:	607a      	str	r2, [r7, #4]
  return result;
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	fab2 f282 	clz	r2, r2
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	40d3      	lsrs	r3, r2
 8007b94:	4a1c      	ldr	r2, [pc, #112]	; (8007c08 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b96:	5cd3      	ldrb	r3, [r2, r3]
 8007b98:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007b9a:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	220f      	movs	r2, #15
 8007ba4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	fa92 f2a2 	rbit	r2, r2
 8007bac:	60fa      	str	r2, [r7, #12]
  return result;
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	fab2 f282 	clz	r2, r2
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	40d3      	lsrs	r3, r2
 8007bb8:	4a14      	ldr	r2, [pc, #80]	; (8007c0c <HAL_RCC_GetSysClockFreq+0xcc>)
 8007bba:	5cd3      	ldrb	r3, [r2, r3]
 8007bbc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d008      	beq.n	8007bda <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007bc8:	4a0e      	ldr	r2, [pc, #56]	; (8007c04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	fb02 f303 	mul.w	r3, r2, r3
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd8:	e004      	b.n	8007be4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	4a0c      	ldr	r2, [pc, #48]	; (8007c10 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	623b      	str	r3, [r7, #32]
      break;
 8007be8:	e002      	b.n	8007bf0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007bea:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007bec:	623b      	str	r3, [r7, #32]
      break;
 8007bee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	372c      	adds	r7, #44	; 0x2c
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40021000 	.word	0x40021000
 8007c04:	007a1200 	.word	0x007a1200
 8007c08:	08008b50 	.word	0x08008b50
 8007c0c:	08008b60 	.word	0x08008b60
 8007c10:	003d0900 	.word	0x003d0900

08007c14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b092      	sub	sp, #72	; 0x48
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80d4 	beq.w	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c38:	4b4e      	ldr	r3, [pc, #312]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10e      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c44:	4b4b      	ldr	r3, [pc, #300]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c46:	69db      	ldr	r3, [r3, #28]
 8007c48:	4a4a      	ldr	r2, [pc, #296]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c4e:	61d3      	str	r3, [r2, #28]
 8007c50:	4b48      	ldr	r3, [pc, #288]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c62:	4b45      	ldr	r3, [pc, #276]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d118      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c6e:	4b42      	ldr	r3, [pc, #264]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a41      	ldr	r2, [pc, #260]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c7a:	f7fc fdab 	bl	80047d4 <HAL_GetTick>
 8007c7e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c80:	e008      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c82:	f7fc fda7 	bl	80047d4 <HAL_GetTick>
 8007c86:	4602      	mov	r2, r0
 8007c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	2b64      	cmp	r3, #100	; 0x64
 8007c8e:	d901      	bls.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e169      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c94:	4b38      	ldr	r3, [pc, #224]	; (8007d78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0f0      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ca0:	4b34      	ldr	r3, [pc, #208]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 8084 	beq.w	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d07c      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007cc0:	4b2c      	ldr	r3, [pc, #176]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd2:	fa93 f3a3 	rbit	r3, r3
 8007cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007cda:	fab3 f383 	clz	r3, r3
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007ce4:	4413      	add	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	461a      	mov	r2, r3
 8007cea:	2301      	movs	r3, #1
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	fa93 f3a3 	rbit	r3, r3
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007cfe:	fab3 f383 	clz	r3, r3
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	2300      	movs	r3, #0
 8007d10:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d12:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d16:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d04b      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d22:	f7fc fd57 	bl	80047d4 <HAL_GetTick>
 8007d26:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d28:	e00a      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2a:	f7fc fd53 	bl	80047d4 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e113      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007d40:	2302      	movs	r3, #2
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d46:	fa93 f3a3 	rbit	r3, r3
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	623b      	str	r3, [r7, #32]
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	fa93 f3a3 	rbit	r3, r3
 8007d56:	61fb      	str	r3, [r7, #28]
  return result;
 8007d58:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d5a:	fab3 f383 	clz	r3, r3
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	095b      	lsrs	r3, r3, #5
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f043 0302 	orr.w	r3, r3, #2
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d108      	bne.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007d6e:	4b01      	ldr	r3, [pc, #4]	; (8007d74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	e00d      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007d74:	40021000 	.word	0x40021000
 8007d78:	40007000 	.word	0x40007000
 8007d7c:	10908100 	.word	0x10908100
 8007d80:	2302      	movs	r3, #2
 8007d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	fa93 f3a3 	rbit	r3, r3
 8007d8a:	617b      	str	r3, [r7, #20]
 8007d8c:	4b78      	ldr	r3, [pc, #480]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	2202      	movs	r2, #2
 8007d92:	613a      	str	r2, [r7, #16]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	fa92 f2a2 	rbit	r2, r2
 8007d9a:	60fa      	str	r2, [r7, #12]
  return result;
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	fab2 f282 	clz	r2, r2
 8007da2:	b2d2      	uxtb	r2, r2
 8007da4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da8:	b2d2      	uxtb	r2, r2
 8007daa:	f002 021f 	and.w	r2, r2, #31
 8007dae:	2101      	movs	r1, #1
 8007db0:	fa01 f202 	lsl.w	r2, r1, r2
 8007db4:	4013      	ands	r3, r2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0b7      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007dba:	4b6d      	ldr	r3, [pc, #436]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	496a      	ldr	r1, [pc, #424]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d105      	bne.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dd4:	4b66      	ldr	r3, [pc, #408]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	4a65      	ldr	r2, [pc, #404]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d008      	beq.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007dec:	4b60      	ldr	r3, [pc, #384]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	f023 0203 	bic.w	r2, r3, #3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	495d      	ldr	r1, [pc, #372]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e0a:	4b59      	ldr	r3, [pc, #356]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	4956      	ldr	r1, [pc, #344]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0304 	and.w	r3, r3, #4
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e28:	4b51      	ldr	r3, [pc, #324]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	494e      	ldr	r1, [pc, #312]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0320 	and.w	r3, r3, #32
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d008      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e46:	4b4a      	ldr	r3, [pc, #296]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	f023 0210 	bic.w	r2, r3, #16
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	4947      	ldr	r1, [pc, #284]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d008      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007e64:	4b42      	ldr	r3, [pc, #264]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e70:	493f      	ldr	r1, [pc, #252]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d008      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e82:	4b3b      	ldr	r3, [pc, #236]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	f023 0220 	bic.w	r2, r3, #32
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	4938      	ldr	r1, [pc, #224]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d008      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ea0:	4b33      	ldr	r3, [pc, #204]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	4930      	ldr	r1, [pc, #192]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0310 	and.w	r3, r3, #16
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d008      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ebe:	4b2c      	ldr	r3, [pc, #176]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	4929      	ldr	r1, [pc, #164]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007edc:	4b24      	ldr	r3, [pc, #144]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	4921      	ldr	r1, [pc, #132]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007efa:	4b1d      	ldr	r3, [pc, #116]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	491a      	ldr	r1, [pc, #104]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d008      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007f18:	4b15      	ldr	r3, [pc, #84]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f24:	4912      	ldr	r1, [pc, #72]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d008      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007f36:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	490b      	ldr	r1, [pc, #44]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d008      	beq.n	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007f54:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f60:	4903      	ldr	r1, [pc, #12]	; (8007f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3748      	adds	r7, #72	; 0x48
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	40021000 	.word	0x40021000

08007f74 <__errno>:
 8007f74:	4b01      	ldr	r3, [pc, #4]	; (8007f7c <__errno+0x8>)
 8007f76:	6818      	ldr	r0, [r3, #0]
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	20000034 	.word	0x20000034

08007f80 <__libc_init_array>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	4d0d      	ldr	r5, [pc, #52]	; (8007fb8 <__libc_init_array+0x38>)
 8007f84:	4c0d      	ldr	r4, [pc, #52]	; (8007fbc <__libc_init_array+0x3c>)
 8007f86:	1b64      	subs	r4, r4, r5
 8007f88:	10a4      	asrs	r4, r4, #2
 8007f8a:	2600      	movs	r6, #0
 8007f8c:	42a6      	cmp	r6, r4
 8007f8e:	d109      	bne.n	8007fa4 <__libc_init_array+0x24>
 8007f90:	4d0b      	ldr	r5, [pc, #44]	; (8007fc0 <__libc_init_array+0x40>)
 8007f92:	4c0c      	ldr	r4, [pc, #48]	; (8007fc4 <__libc_init_array+0x44>)
 8007f94:	f000 fdc8 	bl	8008b28 <_init>
 8007f98:	1b64      	subs	r4, r4, r5
 8007f9a:	10a4      	asrs	r4, r4, #2
 8007f9c:	2600      	movs	r6, #0
 8007f9e:	42a6      	cmp	r6, r4
 8007fa0:	d105      	bne.n	8007fae <__libc_init_array+0x2e>
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa8:	4798      	blx	r3
 8007faa:	3601      	adds	r6, #1
 8007fac:	e7ee      	b.n	8007f8c <__libc_init_array+0xc>
 8007fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fb2:	4798      	blx	r3
 8007fb4:	3601      	adds	r6, #1
 8007fb6:	e7f2      	b.n	8007f9e <__libc_init_array+0x1e>
 8007fb8:	08008be8 	.word	0x08008be8
 8007fbc:	08008be8 	.word	0x08008be8
 8007fc0:	08008be8 	.word	0x08008be8
 8007fc4:	08008bec 	.word	0x08008bec

08007fc8 <memset>:
 8007fc8:	4402      	add	r2, r0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d100      	bne.n	8007fd2 <memset+0xa>
 8007fd0:	4770      	bx	lr
 8007fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd6:	e7f9      	b.n	8007fcc <memset+0x4>

08007fd8 <asin>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	ed2d 8b02 	vpush	{d8}
 8007fde:	ec55 4b10 	vmov	r4, r5, d0
 8007fe2:	f000 f85d 	bl	80080a0 <__ieee754_asin>
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	462b      	mov	r3, r5
 8007fea:	4620      	mov	r0, r4
 8007fec:	4629      	mov	r1, r5
 8007fee:	eeb0 8a40 	vmov.f32	s16, s0
 8007ff2:	eef0 8a60 	vmov.f32	s17, s1
 8007ff6:	f7f8 fd3d 	bl	8000a74 <__aeabi_dcmpun>
 8007ffa:	b9a8      	cbnz	r0, 8008028 <asin+0x50>
 8007ffc:	ec45 4b10 	vmov	d0, r4, r5
 8008000:	f000 fd7e 	bl	8008b00 <fabs>
 8008004:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <asin+0x60>)
 8008006:	ec51 0b10 	vmov	r0, r1, d0
 800800a:	2200      	movs	r2, #0
 800800c:	f7f8 fd28 	bl	8000a60 <__aeabi_dcmpgt>
 8008010:	b150      	cbz	r0, 8008028 <asin+0x50>
 8008012:	f7ff ffaf 	bl	8007f74 <__errno>
 8008016:	ecbd 8b02 	vpop	{d8}
 800801a:	2321      	movs	r3, #33	; 0x21
 800801c:	6003      	str	r3, [r0, #0]
 800801e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008022:	4806      	ldr	r0, [pc, #24]	; (800803c <asin+0x64>)
 8008024:	f000 bd78 	b.w	8008b18 <nan>
 8008028:	eeb0 0a48 	vmov.f32	s0, s16
 800802c:	eef0 0a68 	vmov.f32	s1, s17
 8008030:	ecbd 8b02 	vpop	{d8}
 8008034:	bd38      	pop	{r3, r4, r5, pc}
 8008036:	bf00      	nop
 8008038:	3ff00000 	.word	0x3ff00000
 800803c:	08008b70 	.word	0x08008b70

08008040 <atan2>:
 8008040:	f000 ba42 	b.w	80084c8 <__ieee754_atan2>

08008044 <sqrt>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	ed2d 8b02 	vpush	{d8}
 800804a:	ec55 4b10 	vmov	r4, r5, d0
 800804e:	f000 fb05 	bl	800865c <__ieee754_sqrt>
 8008052:	4622      	mov	r2, r4
 8008054:	462b      	mov	r3, r5
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	eeb0 8a40 	vmov.f32	s16, s0
 800805e:	eef0 8a60 	vmov.f32	s17, s1
 8008062:	f7f8 fd07 	bl	8000a74 <__aeabi_dcmpun>
 8008066:	b990      	cbnz	r0, 800808e <sqrt+0x4a>
 8008068:	2200      	movs	r2, #0
 800806a:	2300      	movs	r3, #0
 800806c:	4620      	mov	r0, r4
 800806e:	4629      	mov	r1, r5
 8008070:	f7f8 fcd8 	bl	8000a24 <__aeabi_dcmplt>
 8008074:	b158      	cbz	r0, 800808e <sqrt+0x4a>
 8008076:	f7ff ff7d 	bl	8007f74 <__errno>
 800807a:	2321      	movs	r3, #33	; 0x21
 800807c:	6003      	str	r3, [r0, #0]
 800807e:	2200      	movs	r2, #0
 8008080:	2300      	movs	r3, #0
 8008082:	4610      	mov	r0, r2
 8008084:	4619      	mov	r1, r3
 8008086:	f7f8 fb85 	bl	8000794 <__aeabi_ddiv>
 800808a:	ec41 0b18 	vmov	d8, r0, r1
 800808e:	eeb0 0a48 	vmov.f32	s0, s16
 8008092:	eef0 0a68 	vmov.f32	s1, s17
 8008096:	ecbd 8b02 	vpop	{d8}
 800809a:	bd38      	pop	{r3, r4, r5, pc}
 800809c:	0000      	movs	r0, r0
	...

080080a0 <__ieee754_asin>:
 80080a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a4:	ed2d 8b04 	vpush	{d8-d9}
 80080a8:	ec55 4b10 	vmov	r4, r5, d0
 80080ac:	4bcc      	ldr	r3, [pc, #816]	; (80083e0 <__ieee754_asin+0x340>)
 80080ae:	b083      	sub	sp, #12
 80080b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80080b4:	4598      	cmp	r8, r3
 80080b6:	9501      	str	r5, [sp, #4]
 80080b8:	dd35      	ble.n	8008126 <__ieee754_asin+0x86>
 80080ba:	ee10 3a10 	vmov	r3, s0
 80080be:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80080c2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80080c6:	ea58 0303 	orrs.w	r3, r8, r3
 80080ca:	d117      	bne.n	80080fc <__ieee754_asin+0x5c>
 80080cc:	a3aa      	add	r3, pc, #680	; (adr r3, 8008378 <__ieee754_asin+0x2d8>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	ee10 0a10 	vmov	r0, s0
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 fa32 	bl	8000540 <__aeabi_dmul>
 80080dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008380 <__ieee754_asin+0x2e0>)
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	4606      	mov	r6, r0
 80080e4:	460f      	mov	r7, r1
 80080e6:	4620      	mov	r0, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	f7f8 fa29 	bl	8000540 <__aeabi_dmul>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4630      	mov	r0, r6
 80080f4:	4639      	mov	r1, r7
 80080f6:	f7f8 f86d 	bl	80001d4 <__adddf3>
 80080fa:	e00b      	b.n	8008114 <__ieee754_asin+0x74>
 80080fc:	ee10 2a10 	vmov	r2, s0
 8008100:	462b      	mov	r3, r5
 8008102:	ee10 0a10 	vmov	r0, s0
 8008106:	4629      	mov	r1, r5
 8008108:	f7f8 f862 	bl	80001d0 <__aeabi_dsub>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	f7f8 fb40 	bl	8000794 <__aeabi_ddiv>
 8008114:	4604      	mov	r4, r0
 8008116:	460d      	mov	r5, r1
 8008118:	ec45 4b10 	vmov	d0, r4, r5
 800811c:	b003      	add	sp, #12
 800811e:	ecbd 8b04 	vpop	{d8-d9}
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	4baf      	ldr	r3, [pc, #700]	; (80083e4 <__ieee754_asin+0x344>)
 8008128:	4598      	cmp	r8, r3
 800812a:	dc11      	bgt.n	8008150 <__ieee754_asin+0xb0>
 800812c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008130:	f280 80ae 	bge.w	8008290 <__ieee754_asin+0x1f0>
 8008134:	a394      	add	r3, pc, #592	; (adr r3, 8008388 <__ieee754_asin+0x2e8>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	ee10 0a10 	vmov	r0, s0
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 f848 	bl	80001d4 <__adddf3>
 8008144:	4ba8      	ldr	r3, [pc, #672]	; (80083e8 <__ieee754_asin+0x348>)
 8008146:	2200      	movs	r2, #0
 8008148:	f7f8 fc8a 	bl	8000a60 <__aeabi_dcmpgt>
 800814c:	2800      	cmp	r0, #0
 800814e:	d1e3      	bne.n	8008118 <__ieee754_asin+0x78>
 8008150:	ec45 4b10 	vmov	d0, r4, r5
 8008154:	f000 fcd4 	bl	8008b00 <fabs>
 8008158:	49a3      	ldr	r1, [pc, #652]	; (80083e8 <__ieee754_asin+0x348>)
 800815a:	ec53 2b10 	vmov	r2, r3, d0
 800815e:	2000      	movs	r0, #0
 8008160:	f7f8 f836 	bl	80001d0 <__aeabi_dsub>
 8008164:	4ba1      	ldr	r3, [pc, #644]	; (80083ec <__ieee754_asin+0x34c>)
 8008166:	2200      	movs	r2, #0
 8008168:	f7f8 f9ea 	bl	8000540 <__aeabi_dmul>
 800816c:	a388      	add	r3, pc, #544	; (adr r3, 8008390 <__ieee754_asin+0x2f0>)
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	4604      	mov	r4, r0
 8008174:	460d      	mov	r5, r1
 8008176:	f7f8 f9e3 	bl	8000540 <__aeabi_dmul>
 800817a:	a387      	add	r3, pc, #540	; (adr r3, 8008398 <__ieee754_asin+0x2f8>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f7f8 f828 	bl	80001d4 <__adddf3>
 8008184:	4622      	mov	r2, r4
 8008186:	462b      	mov	r3, r5
 8008188:	f7f8 f9da 	bl	8000540 <__aeabi_dmul>
 800818c:	a384      	add	r3, pc, #528	; (adr r3, 80083a0 <__ieee754_asin+0x300>)
 800818e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008192:	f7f8 f81d 	bl	80001d0 <__aeabi_dsub>
 8008196:	4622      	mov	r2, r4
 8008198:	462b      	mov	r3, r5
 800819a:	f7f8 f9d1 	bl	8000540 <__aeabi_dmul>
 800819e:	a382      	add	r3, pc, #520	; (adr r3, 80083a8 <__ieee754_asin+0x308>)
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f7f8 f816 	bl	80001d4 <__adddf3>
 80081a8:	4622      	mov	r2, r4
 80081aa:	462b      	mov	r3, r5
 80081ac:	f7f8 f9c8 	bl	8000540 <__aeabi_dmul>
 80081b0:	a37f      	add	r3, pc, #508	; (adr r3, 80083b0 <__ieee754_asin+0x310>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	f7f8 f80b 	bl	80001d0 <__aeabi_dsub>
 80081ba:	4622      	mov	r2, r4
 80081bc:	462b      	mov	r3, r5
 80081be:	f7f8 f9bf 	bl	8000540 <__aeabi_dmul>
 80081c2:	a37d      	add	r3, pc, #500	; (adr r3, 80083b8 <__ieee754_asin+0x318>)
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	f7f8 f804 	bl	80001d4 <__adddf3>
 80081cc:	4622      	mov	r2, r4
 80081ce:	462b      	mov	r3, r5
 80081d0:	f7f8 f9b6 	bl	8000540 <__aeabi_dmul>
 80081d4:	a37a      	add	r3, pc, #488	; (adr r3, 80083c0 <__ieee754_asin+0x320>)
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	ec41 0b18 	vmov	d8, r0, r1
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7f8 f9ad 	bl	8000540 <__aeabi_dmul>
 80081e6:	a378      	add	r3, pc, #480	; (adr r3, 80083c8 <__ieee754_asin+0x328>)
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f7f7 fff0 	bl	80001d0 <__aeabi_dsub>
 80081f0:	4622      	mov	r2, r4
 80081f2:	462b      	mov	r3, r5
 80081f4:	f7f8 f9a4 	bl	8000540 <__aeabi_dmul>
 80081f8:	a375      	add	r3, pc, #468	; (adr r3, 80083d0 <__ieee754_asin+0x330>)
 80081fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fe:	f7f7 ffe9 	bl	80001d4 <__adddf3>
 8008202:	4622      	mov	r2, r4
 8008204:	462b      	mov	r3, r5
 8008206:	f7f8 f99b 	bl	8000540 <__aeabi_dmul>
 800820a:	a373      	add	r3, pc, #460	; (adr r3, 80083d8 <__ieee754_asin+0x338>)
 800820c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008210:	f7f7 ffde 	bl	80001d0 <__aeabi_dsub>
 8008214:	4622      	mov	r2, r4
 8008216:	462b      	mov	r3, r5
 8008218:	f7f8 f992 	bl	8000540 <__aeabi_dmul>
 800821c:	4b72      	ldr	r3, [pc, #456]	; (80083e8 <__ieee754_asin+0x348>)
 800821e:	2200      	movs	r2, #0
 8008220:	f7f7 ffd8 	bl	80001d4 <__adddf3>
 8008224:	ec45 4b10 	vmov	d0, r4, r5
 8008228:	4606      	mov	r6, r0
 800822a:	460f      	mov	r7, r1
 800822c:	f000 fa16 	bl	800865c <__ieee754_sqrt>
 8008230:	4b6f      	ldr	r3, [pc, #444]	; (80083f0 <__ieee754_asin+0x350>)
 8008232:	4598      	cmp	r8, r3
 8008234:	ec5b ab10 	vmov	sl, fp, d0
 8008238:	f340 80dc 	ble.w	80083f4 <__ieee754_asin+0x354>
 800823c:	4632      	mov	r2, r6
 800823e:	463b      	mov	r3, r7
 8008240:	ec51 0b18 	vmov	r0, r1, d8
 8008244:	f7f8 faa6 	bl	8000794 <__aeabi_ddiv>
 8008248:	4652      	mov	r2, sl
 800824a:	465b      	mov	r3, fp
 800824c:	f7f8 f978 	bl	8000540 <__aeabi_dmul>
 8008250:	4652      	mov	r2, sl
 8008252:	465b      	mov	r3, fp
 8008254:	f7f7 ffbe 	bl	80001d4 <__adddf3>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	f7f7 ffba 	bl	80001d4 <__adddf3>
 8008260:	a347      	add	r3, pc, #284	; (adr r3, 8008380 <__ieee754_asin+0x2e0>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f7 ffb3 	bl	80001d0 <__aeabi_dsub>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	a142      	add	r1, pc, #264	; (adr r1, 8008378 <__ieee754_asin+0x2d8>)
 8008270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008274:	f7f7 ffac 	bl	80001d0 <__aeabi_dsub>
 8008278:	9b01      	ldr	r3, [sp, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	bfdc      	itt	le
 800827e:	4602      	movle	r2, r0
 8008280:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008284:	4604      	mov	r4, r0
 8008286:	460d      	mov	r5, r1
 8008288:	bfdc      	itt	le
 800828a:	4614      	movle	r4, r2
 800828c:	461d      	movle	r5, r3
 800828e:	e743      	b.n	8008118 <__ieee754_asin+0x78>
 8008290:	ee10 2a10 	vmov	r2, s0
 8008294:	ee10 0a10 	vmov	r0, s0
 8008298:	462b      	mov	r3, r5
 800829a:	4629      	mov	r1, r5
 800829c:	f7f8 f950 	bl	8000540 <__aeabi_dmul>
 80082a0:	a33b      	add	r3, pc, #236	; (adr r3, 8008390 <__ieee754_asin+0x2f0>)
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	4606      	mov	r6, r0
 80082a8:	460f      	mov	r7, r1
 80082aa:	f7f8 f949 	bl	8000540 <__aeabi_dmul>
 80082ae:	a33a      	add	r3, pc, #232	; (adr r3, 8008398 <__ieee754_asin+0x2f8>)
 80082b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b4:	f7f7 ff8e 	bl	80001d4 <__adddf3>
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	f7f8 f940 	bl	8000540 <__aeabi_dmul>
 80082c0:	a337      	add	r3, pc, #220	; (adr r3, 80083a0 <__ieee754_asin+0x300>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f7 ff83 	bl	80001d0 <__aeabi_dsub>
 80082ca:	4632      	mov	r2, r6
 80082cc:	463b      	mov	r3, r7
 80082ce:	f7f8 f937 	bl	8000540 <__aeabi_dmul>
 80082d2:	a335      	add	r3, pc, #212	; (adr r3, 80083a8 <__ieee754_asin+0x308>)
 80082d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d8:	f7f7 ff7c 	bl	80001d4 <__adddf3>
 80082dc:	4632      	mov	r2, r6
 80082de:	463b      	mov	r3, r7
 80082e0:	f7f8 f92e 	bl	8000540 <__aeabi_dmul>
 80082e4:	a332      	add	r3, pc, #200	; (adr r3, 80083b0 <__ieee754_asin+0x310>)
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	f7f7 ff71 	bl	80001d0 <__aeabi_dsub>
 80082ee:	4632      	mov	r2, r6
 80082f0:	463b      	mov	r3, r7
 80082f2:	f7f8 f925 	bl	8000540 <__aeabi_dmul>
 80082f6:	a330      	add	r3, pc, #192	; (adr r3, 80083b8 <__ieee754_asin+0x318>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f7f7 ff6a 	bl	80001d4 <__adddf3>
 8008300:	4632      	mov	r2, r6
 8008302:	463b      	mov	r3, r7
 8008304:	f7f8 f91c 	bl	8000540 <__aeabi_dmul>
 8008308:	a32d      	add	r3, pc, #180	; (adr r3, 80083c0 <__ieee754_asin+0x320>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	4680      	mov	r8, r0
 8008310:	4689      	mov	r9, r1
 8008312:	4630      	mov	r0, r6
 8008314:	4639      	mov	r1, r7
 8008316:	f7f8 f913 	bl	8000540 <__aeabi_dmul>
 800831a:	a32b      	add	r3, pc, #172	; (adr r3, 80083c8 <__ieee754_asin+0x328>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f7f7 ff56 	bl	80001d0 <__aeabi_dsub>
 8008324:	4632      	mov	r2, r6
 8008326:	463b      	mov	r3, r7
 8008328:	f7f8 f90a 	bl	8000540 <__aeabi_dmul>
 800832c:	a328      	add	r3, pc, #160	; (adr r3, 80083d0 <__ieee754_asin+0x330>)
 800832e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008332:	f7f7 ff4f 	bl	80001d4 <__adddf3>
 8008336:	4632      	mov	r2, r6
 8008338:	463b      	mov	r3, r7
 800833a:	f7f8 f901 	bl	8000540 <__aeabi_dmul>
 800833e:	a326      	add	r3, pc, #152	; (adr r3, 80083d8 <__ieee754_asin+0x338>)
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	f7f7 ff44 	bl	80001d0 <__aeabi_dsub>
 8008348:	4632      	mov	r2, r6
 800834a:	463b      	mov	r3, r7
 800834c:	f7f8 f8f8 	bl	8000540 <__aeabi_dmul>
 8008350:	4b25      	ldr	r3, [pc, #148]	; (80083e8 <__ieee754_asin+0x348>)
 8008352:	2200      	movs	r2, #0
 8008354:	f7f7 ff3e 	bl	80001d4 <__adddf3>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4640      	mov	r0, r8
 800835e:	4649      	mov	r1, r9
 8008360:	f7f8 fa18 	bl	8000794 <__aeabi_ddiv>
 8008364:	4622      	mov	r2, r4
 8008366:	462b      	mov	r3, r5
 8008368:	f7f8 f8ea 	bl	8000540 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4620      	mov	r0, r4
 8008372:	4629      	mov	r1, r5
 8008374:	e6bf      	b.n	80080f6 <__ieee754_asin+0x56>
 8008376:	bf00      	nop
 8008378:	54442d18 	.word	0x54442d18
 800837c:	3ff921fb 	.word	0x3ff921fb
 8008380:	33145c07 	.word	0x33145c07
 8008384:	3c91a626 	.word	0x3c91a626
 8008388:	8800759c 	.word	0x8800759c
 800838c:	7e37e43c 	.word	0x7e37e43c
 8008390:	0dfdf709 	.word	0x0dfdf709
 8008394:	3f023de1 	.word	0x3f023de1
 8008398:	7501b288 	.word	0x7501b288
 800839c:	3f49efe0 	.word	0x3f49efe0
 80083a0:	b5688f3b 	.word	0xb5688f3b
 80083a4:	3fa48228 	.word	0x3fa48228
 80083a8:	0e884455 	.word	0x0e884455
 80083ac:	3fc9c155 	.word	0x3fc9c155
 80083b0:	03eb6f7d 	.word	0x03eb6f7d
 80083b4:	3fd4d612 	.word	0x3fd4d612
 80083b8:	55555555 	.word	0x55555555
 80083bc:	3fc55555 	.word	0x3fc55555
 80083c0:	b12e9282 	.word	0xb12e9282
 80083c4:	3fb3b8c5 	.word	0x3fb3b8c5
 80083c8:	1b8d0159 	.word	0x1b8d0159
 80083cc:	3fe6066c 	.word	0x3fe6066c
 80083d0:	9c598ac8 	.word	0x9c598ac8
 80083d4:	40002ae5 	.word	0x40002ae5
 80083d8:	1c8a2d4b 	.word	0x1c8a2d4b
 80083dc:	40033a27 	.word	0x40033a27
 80083e0:	3fefffff 	.word	0x3fefffff
 80083e4:	3fdfffff 	.word	0x3fdfffff
 80083e8:	3ff00000 	.word	0x3ff00000
 80083ec:	3fe00000 	.word	0x3fe00000
 80083f0:	3fef3332 	.word	0x3fef3332
 80083f4:	ee10 2a10 	vmov	r2, s0
 80083f8:	ee10 0a10 	vmov	r0, s0
 80083fc:	465b      	mov	r3, fp
 80083fe:	4659      	mov	r1, fp
 8008400:	f7f7 fee8 	bl	80001d4 <__adddf3>
 8008404:	4632      	mov	r2, r6
 8008406:	463b      	mov	r3, r7
 8008408:	ec41 0b19 	vmov	d9, r0, r1
 800840c:	ec51 0b18 	vmov	r0, r1, d8
 8008410:	f7f8 f9c0 	bl	8000794 <__aeabi_ddiv>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	ec51 0b19 	vmov	r0, r1, d9
 800841c:	f7f8 f890 	bl	8000540 <__aeabi_dmul>
 8008420:	f04f 0800 	mov.w	r8, #0
 8008424:	4606      	mov	r6, r0
 8008426:	460f      	mov	r7, r1
 8008428:	4642      	mov	r2, r8
 800842a:	465b      	mov	r3, fp
 800842c:	4640      	mov	r0, r8
 800842e:	4659      	mov	r1, fp
 8008430:	f7f8 f886 	bl	8000540 <__aeabi_dmul>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4620      	mov	r0, r4
 800843a:	4629      	mov	r1, r5
 800843c:	f7f7 fec8 	bl	80001d0 <__aeabi_dsub>
 8008440:	4642      	mov	r2, r8
 8008442:	4604      	mov	r4, r0
 8008444:	460d      	mov	r5, r1
 8008446:	465b      	mov	r3, fp
 8008448:	4650      	mov	r0, sl
 800844a:	4659      	mov	r1, fp
 800844c:	f7f7 fec2 	bl	80001d4 <__adddf3>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4620      	mov	r0, r4
 8008456:	4629      	mov	r1, r5
 8008458:	f7f8 f99c 	bl	8000794 <__aeabi_ddiv>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	f7f7 feb8 	bl	80001d4 <__adddf3>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	a113      	add	r1, pc, #76	; (adr r1, 80084b8 <__ieee754_asin+0x418>)
 800846a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800846e:	f7f7 feaf 	bl	80001d0 <__aeabi_dsub>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4630      	mov	r0, r6
 8008478:	4639      	mov	r1, r7
 800847a:	f7f7 fea9 	bl	80001d0 <__aeabi_dsub>
 800847e:	4642      	mov	r2, r8
 8008480:	4604      	mov	r4, r0
 8008482:	460d      	mov	r5, r1
 8008484:	465b      	mov	r3, fp
 8008486:	4640      	mov	r0, r8
 8008488:	4659      	mov	r1, fp
 800848a:	f7f7 fea3 	bl	80001d4 <__adddf3>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	a10b      	add	r1, pc, #44	; (adr r1, 80084c0 <__ieee754_asin+0x420>)
 8008494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008498:	f7f7 fe9a 	bl	80001d0 <__aeabi_dsub>
 800849c:	4602      	mov	r2, r0
 800849e:	460b      	mov	r3, r1
 80084a0:	4620      	mov	r0, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	f7f7 fe94 	bl	80001d0 <__aeabi_dsub>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	a104      	add	r1, pc, #16	; (adr r1, 80084c0 <__ieee754_asin+0x420>)
 80084ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084b2:	e6df      	b.n	8008274 <__ieee754_asin+0x1d4>
 80084b4:	f3af 8000 	nop.w
 80084b8:	33145c07 	.word	0x33145c07
 80084bc:	3c91a626 	.word	0x3c91a626
 80084c0:	54442d18 	.word	0x54442d18
 80084c4:	3fe921fb 	.word	0x3fe921fb

080084c8 <__ieee754_atan2>:
 80084c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084cc:	ec57 6b11 	vmov	r6, r7, d1
 80084d0:	4273      	negs	r3, r6
 80084d2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008658 <__ieee754_atan2+0x190>
 80084d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80084da:	4333      	orrs	r3, r6
 80084dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80084e0:	4573      	cmp	r3, lr
 80084e2:	ec51 0b10 	vmov	r0, r1, d0
 80084e6:	ee11 8a10 	vmov	r8, s2
 80084ea:	d80a      	bhi.n	8008502 <__ieee754_atan2+0x3a>
 80084ec:	4244      	negs	r4, r0
 80084ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80084f2:	4304      	orrs	r4, r0
 80084f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80084f8:	4574      	cmp	r4, lr
 80084fa:	ee10 9a10 	vmov	r9, s0
 80084fe:	468c      	mov	ip, r1
 8008500:	d907      	bls.n	8008512 <__ieee754_atan2+0x4a>
 8008502:	4632      	mov	r2, r6
 8008504:	463b      	mov	r3, r7
 8008506:	f7f7 fe65 	bl	80001d4 <__adddf3>
 800850a:	ec41 0b10 	vmov	d0, r0, r1
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008512:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008516:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800851a:	4334      	orrs	r4, r6
 800851c:	d103      	bne.n	8008526 <__ieee754_atan2+0x5e>
 800851e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008522:	f000 b94d 	b.w	80087c0 <atan>
 8008526:	17bc      	asrs	r4, r7, #30
 8008528:	f004 0402 	and.w	r4, r4, #2
 800852c:	ea53 0909 	orrs.w	r9, r3, r9
 8008530:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008534:	d107      	bne.n	8008546 <__ieee754_atan2+0x7e>
 8008536:	2c02      	cmp	r4, #2
 8008538:	d060      	beq.n	80085fc <__ieee754_atan2+0x134>
 800853a:	2c03      	cmp	r4, #3
 800853c:	d1e5      	bne.n	800850a <__ieee754_atan2+0x42>
 800853e:	a142      	add	r1, pc, #264	; (adr r1, 8008648 <__ieee754_atan2+0x180>)
 8008540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008544:	e7e1      	b.n	800850a <__ieee754_atan2+0x42>
 8008546:	ea52 0808 	orrs.w	r8, r2, r8
 800854a:	d106      	bne.n	800855a <__ieee754_atan2+0x92>
 800854c:	f1bc 0f00 	cmp.w	ip, #0
 8008550:	da5f      	bge.n	8008612 <__ieee754_atan2+0x14a>
 8008552:	a13f      	add	r1, pc, #252	; (adr r1, 8008650 <__ieee754_atan2+0x188>)
 8008554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008558:	e7d7      	b.n	800850a <__ieee754_atan2+0x42>
 800855a:	4572      	cmp	r2, lr
 800855c:	d10f      	bne.n	800857e <__ieee754_atan2+0xb6>
 800855e:	4293      	cmp	r3, r2
 8008560:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008564:	d107      	bne.n	8008576 <__ieee754_atan2+0xae>
 8008566:	2c02      	cmp	r4, #2
 8008568:	d84c      	bhi.n	8008604 <__ieee754_atan2+0x13c>
 800856a:	4b35      	ldr	r3, [pc, #212]	; (8008640 <__ieee754_atan2+0x178>)
 800856c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008570:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008574:	e7c9      	b.n	800850a <__ieee754_atan2+0x42>
 8008576:	2c02      	cmp	r4, #2
 8008578:	d848      	bhi.n	800860c <__ieee754_atan2+0x144>
 800857a:	4b32      	ldr	r3, [pc, #200]	; (8008644 <__ieee754_atan2+0x17c>)
 800857c:	e7f6      	b.n	800856c <__ieee754_atan2+0xa4>
 800857e:	4573      	cmp	r3, lr
 8008580:	d0e4      	beq.n	800854c <__ieee754_atan2+0x84>
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008588:	ea4f 5223 	mov.w	r2, r3, asr #20
 800858c:	da1e      	bge.n	80085cc <__ieee754_atan2+0x104>
 800858e:	2f00      	cmp	r7, #0
 8008590:	da01      	bge.n	8008596 <__ieee754_atan2+0xce>
 8008592:	323c      	adds	r2, #60	; 0x3c
 8008594:	db1e      	blt.n	80085d4 <__ieee754_atan2+0x10c>
 8008596:	4632      	mov	r2, r6
 8008598:	463b      	mov	r3, r7
 800859a:	f7f8 f8fb 	bl	8000794 <__aeabi_ddiv>
 800859e:	ec41 0b10 	vmov	d0, r0, r1
 80085a2:	f000 faad 	bl	8008b00 <fabs>
 80085a6:	f000 f90b 	bl	80087c0 <atan>
 80085aa:	ec51 0b10 	vmov	r0, r1, d0
 80085ae:	2c01      	cmp	r4, #1
 80085b0:	d013      	beq.n	80085da <__ieee754_atan2+0x112>
 80085b2:	2c02      	cmp	r4, #2
 80085b4:	d015      	beq.n	80085e2 <__ieee754_atan2+0x11a>
 80085b6:	2c00      	cmp	r4, #0
 80085b8:	d0a7      	beq.n	800850a <__ieee754_atan2+0x42>
 80085ba:	a319      	add	r3, pc, #100	; (adr r3, 8008620 <__ieee754_atan2+0x158>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f7 fe06 	bl	80001d0 <__aeabi_dsub>
 80085c4:	a318      	add	r3, pc, #96	; (adr r3, 8008628 <__ieee754_atan2+0x160>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	e014      	b.n	80085f6 <__ieee754_atan2+0x12e>
 80085cc:	a118      	add	r1, pc, #96	; (adr r1, 8008630 <__ieee754_atan2+0x168>)
 80085ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d2:	e7ec      	b.n	80085ae <__ieee754_atan2+0xe6>
 80085d4:	2000      	movs	r0, #0
 80085d6:	2100      	movs	r1, #0
 80085d8:	e7e9      	b.n	80085ae <__ieee754_atan2+0xe6>
 80085da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085de:	4619      	mov	r1, r3
 80085e0:	e793      	b.n	800850a <__ieee754_atan2+0x42>
 80085e2:	a30f      	add	r3, pc, #60	; (adr r3, 8008620 <__ieee754_atan2+0x158>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7f7 fdf2 	bl	80001d0 <__aeabi_dsub>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	a10d      	add	r1, pc, #52	; (adr r1, 8008628 <__ieee754_atan2+0x160>)
 80085f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f6:	f7f7 fdeb 	bl	80001d0 <__aeabi_dsub>
 80085fa:	e786      	b.n	800850a <__ieee754_atan2+0x42>
 80085fc:	a10a      	add	r1, pc, #40	; (adr r1, 8008628 <__ieee754_atan2+0x160>)
 80085fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008602:	e782      	b.n	800850a <__ieee754_atan2+0x42>
 8008604:	a10c      	add	r1, pc, #48	; (adr r1, 8008638 <__ieee754_atan2+0x170>)
 8008606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800860a:	e77e      	b.n	800850a <__ieee754_atan2+0x42>
 800860c:	2000      	movs	r0, #0
 800860e:	2100      	movs	r1, #0
 8008610:	e77b      	b.n	800850a <__ieee754_atan2+0x42>
 8008612:	a107      	add	r1, pc, #28	; (adr r1, 8008630 <__ieee754_atan2+0x168>)
 8008614:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008618:	e777      	b.n	800850a <__ieee754_atan2+0x42>
 800861a:	bf00      	nop
 800861c:	f3af 8000 	nop.w
 8008620:	33145c07 	.word	0x33145c07
 8008624:	3ca1a626 	.word	0x3ca1a626
 8008628:	54442d18 	.word	0x54442d18
 800862c:	400921fb 	.word	0x400921fb
 8008630:	54442d18 	.word	0x54442d18
 8008634:	3ff921fb 	.word	0x3ff921fb
 8008638:	54442d18 	.word	0x54442d18
 800863c:	3fe921fb 	.word	0x3fe921fb
 8008640:	08008b78 	.word	0x08008b78
 8008644:	08008b90 	.word	0x08008b90
 8008648:	54442d18 	.word	0x54442d18
 800864c:	c00921fb 	.word	0xc00921fb
 8008650:	54442d18 	.word	0x54442d18
 8008654:	bff921fb 	.word	0xbff921fb
 8008658:	7ff00000 	.word	0x7ff00000

0800865c <__ieee754_sqrt>:
 800865c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008660:	ec55 4b10 	vmov	r4, r5, d0
 8008664:	4e55      	ldr	r6, [pc, #340]	; (80087bc <__ieee754_sqrt+0x160>)
 8008666:	43ae      	bics	r6, r5
 8008668:	ee10 0a10 	vmov	r0, s0
 800866c:	ee10 3a10 	vmov	r3, s0
 8008670:	462a      	mov	r2, r5
 8008672:	4629      	mov	r1, r5
 8008674:	d110      	bne.n	8008698 <__ieee754_sqrt+0x3c>
 8008676:	ee10 2a10 	vmov	r2, s0
 800867a:	462b      	mov	r3, r5
 800867c:	f7f7 ff60 	bl	8000540 <__aeabi_dmul>
 8008680:	4602      	mov	r2, r0
 8008682:	460b      	mov	r3, r1
 8008684:	4620      	mov	r0, r4
 8008686:	4629      	mov	r1, r5
 8008688:	f7f7 fda4 	bl	80001d4 <__adddf3>
 800868c:	4604      	mov	r4, r0
 800868e:	460d      	mov	r5, r1
 8008690:	ec45 4b10 	vmov	d0, r4, r5
 8008694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008698:	2d00      	cmp	r5, #0
 800869a:	dc10      	bgt.n	80086be <__ieee754_sqrt+0x62>
 800869c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80086a0:	4330      	orrs	r0, r6
 80086a2:	d0f5      	beq.n	8008690 <__ieee754_sqrt+0x34>
 80086a4:	b15d      	cbz	r5, 80086be <__ieee754_sqrt+0x62>
 80086a6:	ee10 2a10 	vmov	r2, s0
 80086aa:	462b      	mov	r3, r5
 80086ac:	ee10 0a10 	vmov	r0, s0
 80086b0:	f7f7 fd8e 	bl	80001d0 <__aeabi_dsub>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	f7f8 f86c 	bl	8000794 <__aeabi_ddiv>
 80086bc:	e7e6      	b.n	800868c <__ieee754_sqrt+0x30>
 80086be:	1512      	asrs	r2, r2, #20
 80086c0:	d074      	beq.n	80087ac <__ieee754_sqrt+0x150>
 80086c2:	07d4      	lsls	r4, r2, #31
 80086c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80086c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80086cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80086d0:	bf5e      	ittt	pl
 80086d2:	0fda      	lsrpl	r2, r3, #31
 80086d4:	005b      	lslpl	r3, r3, #1
 80086d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80086da:	2400      	movs	r4, #0
 80086dc:	0fda      	lsrs	r2, r3, #31
 80086de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80086e2:	107f      	asrs	r7, r7, #1
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	2516      	movs	r5, #22
 80086e8:	4620      	mov	r0, r4
 80086ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80086ee:	1886      	adds	r6, r0, r2
 80086f0:	428e      	cmp	r6, r1
 80086f2:	bfde      	ittt	le
 80086f4:	1b89      	suble	r1, r1, r6
 80086f6:	18b0      	addle	r0, r6, r2
 80086f8:	18a4      	addle	r4, r4, r2
 80086fa:	0049      	lsls	r1, r1, #1
 80086fc:	3d01      	subs	r5, #1
 80086fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008702:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008706:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800870a:	d1f0      	bne.n	80086ee <__ieee754_sqrt+0x92>
 800870c:	462a      	mov	r2, r5
 800870e:	f04f 0e20 	mov.w	lr, #32
 8008712:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008716:	4281      	cmp	r1, r0
 8008718:	eb06 0c05 	add.w	ip, r6, r5
 800871c:	dc02      	bgt.n	8008724 <__ieee754_sqrt+0xc8>
 800871e:	d113      	bne.n	8008748 <__ieee754_sqrt+0xec>
 8008720:	459c      	cmp	ip, r3
 8008722:	d811      	bhi.n	8008748 <__ieee754_sqrt+0xec>
 8008724:	f1bc 0f00 	cmp.w	ip, #0
 8008728:	eb0c 0506 	add.w	r5, ip, r6
 800872c:	da43      	bge.n	80087b6 <__ieee754_sqrt+0x15a>
 800872e:	2d00      	cmp	r5, #0
 8008730:	db41      	blt.n	80087b6 <__ieee754_sqrt+0x15a>
 8008732:	f100 0801 	add.w	r8, r0, #1
 8008736:	1a09      	subs	r1, r1, r0
 8008738:	459c      	cmp	ip, r3
 800873a:	bf88      	it	hi
 800873c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8008740:	eba3 030c 	sub.w	r3, r3, ip
 8008744:	4432      	add	r2, r6
 8008746:	4640      	mov	r0, r8
 8008748:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800874c:	f1be 0e01 	subs.w	lr, lr, #1
 8008750:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008754:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008758:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800875c:	d1db      	bne.n	8008716 <__ieee754_sqrt+0xba>
 800875e:	430b      	orrs	r3, r1
 8008760:	d006      	beq.n	8008770 <__ieee754_sqrt+0x114>
 8008762:	1c50      	adds	r0, r2, #1
 8008764:	bf13      	iteet	ne
 8008766:	3201      	addne	r2, #1
 8008768:	3401      	addeq	r4, #1
 800876a:	4672      	moveq	r2, lr
 800876c:	f022 0201 	bicne.w	r2, r2, #1
 8008770:	1063      	asrs	r3, r4, #1
 8008772:	0852      	lsrs	r2, r2, #1
 8008774:	07e1      	lsls	r1, r4, #31
 8008776:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800877a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800877e:	bf48      	it	mi
 8008780:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008784:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008788:	4614      	mov	r4, r2
 800878a:	e781      	b.n	8008690 <__ieee754_sqrt+0x34>
 800878c:	0ad9      	lsrs	r1, r3, #11
 800878e:	3815      	subs	r0, #21
 8008790:	055b      	lsls	r3, r3, #21
 8008792:	2900      	cmp	r1, #0
 8008794:	d0fa      	beq.n	800878c <__ieee754_sqrt+0x130>
 8008796:	02cd      	lsls	r5, r1, #11
 8008798:	d50a      	bpl.n	80087b0 <__ieee754_sqrt+0x154>
 800879a:	f1c2 0420 	rsb	r4, r2, #32
 800879e:	fa23 f404 	lsr.w	r4, r3, r4
 80087a2:	1e55      	subs	r5, r2, #1
 80087a4:	4093      	lsls	r3, r2
 80087a6:	4321      	orrs	r1, r4
 80087a8:	1b42      	subs	r2, r0, r5
 80087aa:	e78a      	b.n	80086c2 <__ieee754_sqrt+0x66>
 80087ac:	4610      	mov	r0, r2
 80087ae:	e7f0      	b.n	8008792 <__ieee754_sqrt+0x136>
 80087b0:	0049      	lsls	r1, r1, #1
 80087b2:	3201      	adds	r2, #1
 80087b4:	e7ef      	b.n	8008796 <__ieee754_sqrt+0x13a>
 80087b6:	4680      	mov	r8, r0
 80087b8:	e7bd      	b.n	8008736 <__ieee754_sqrt+0xda>
 80087ba:	bf00      	nop
 80087bc:	7ff00000 	.word	0x7ff00000

080087c0 <atan>:
 80087c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	ec55 4b10 	vmov	r4, r5, d0
 80087c8:	4bc3      	ldr	r3, [pc, #780]	; (8008ad8 <atan+0x318>)
 80087ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80087ce:	429e      	cmp	r6, r3
 80087d0:	46ab      	mov	fp, r5
 80087d2:	dd18      	ble.n	8008806 <atan+0x46>
 80087d4:	4bc1      	ldr	r3, [pc, #772]	; (8008adc <atan+0x31c>)
 80087d6:	429e      	cmp	r6, r3
 80087d8:	dc01      	bgt.n	80087de <atan+0x1e>
 80087da:	d109      	bne.n	80087f0 <atan+0x30>
 80087dc:	b144      	cbz	r4, 80087f0 <atan+0x30>
 80087de:	4622      	mov	r2, r4
 80087e0:	462b      	mov	r3, r5
 80087e2:	4620      	mov	r0, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	f7f7 fcf5 	bl	80001d4 <__adddf3>
 80087ea:	4604      	mov	r4, r0
 80087ec:	460d      	mov	r5, r1
 80087ee:	e006      	b.n	80087fe <atan+0x3e>
 80087f0:	f1bb 0f00 	cmp.w	fp, #0
 80087f4:	f300 8131 	bgt.w	8008a5a <atan+0x29a>
 80087f8:	a59b      	add	r5, pc, #620	; (adr r5, 8008a68 <atan+0x2a8>)
 80087fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80087fe:	ec45 4b10 	vmov	d0, r4, r5
 8008802:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008806:	4bb6      	ldr	r3, [pc, #728]	; (8008ae0 <atan+0x320>)
 8008808:	429e      	cmp	r6, r3
 800880a:	dc14      	bgt.n	8008836 <atan+0x76>
 800880c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008810:	429e      	cmp	r6, r3
 8008812:	dc0d      	bgt.n	8008830 <atan+0x70>
 8008814:	a396      	add	r3, pc, #600	; (adr r3, 8008a70 <atan+0x2b0>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881a:	ee10 0a10 	vmov	r0, s0
 800881e:	4629      	mov	r1, r5
 8008820:	f7f7 fcd8 	bl	80001d4 <__adddf3>
 8008824:	4baf      	ldr	r3, [pc, #700]	; (8008ae4 <atan+0x324>)
 8008826:	2200      	movs	r2, #0
 8008828:	f7f8 f91a 	bl	8000a60 <__aeabi_dcmpgt>
 800882c:	2800      	cmp	r0, #0
 800882e:	d1e6      	bne.n	80087fe <atan+0x3e>
 8008830:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008834:	e02b      	b.n	800888e <atan+0xce>
 8008836:	f000 f963 	bl	8008b00 <fabs>
 800883a:	4bab      	ldr	r3, [pc, #684]	; (8008ae8 <atan+0x328>)
 800883c:	429e      	cmp	r6, r3
 800883e:	ec55 4b10 	vmov	r4, r5, d0
 8008842:	f300 80bf 	bgt.w	80089c4 <atan+0x204>
 8008846:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800884a:	429e      	cmp	r6, r3
 800884c:	f300 80a0 	bgt.w	8008990 <atan+0x1d0>
 8008850:	ee10 2a10 	vmov	r2, s0
 8008854:	ee10 0a10 	vmov	r0, s0
 8008858:	462b      	mov	r3, r5
 800885a:	4629      	mov	r1, r5
 800885c:	f7f7 fcba 	bl	80001d4 <__adddf3>
 8008860:	4ba0      	ldr	r3, [pc, #640]	; (8008ae4 <atan+0x324>)
 8008862:	2200      	movs	r2, #0
 8008864:	f7f7 fcb4 	bl	80001d0 <__aeabi_dsub>
 8008868:	2200      	movs	r2, #0
 800886a:	4606      	mov	r6, r0
 800886c:	460f      	mov	r7, r1
 800886e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008872:	4620      	mov	r0, r4
 8008874:	4629      	mov	r1, r5
 8008876:	f7f7 fcad 	bl	80001d4 <__adddf3>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	4630      	mov	r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	f7f7 ff87 	bl	8000794 <__aeabi_ddiv>
 8008886:	f04f 0a00 	mov.w	sl, #0
 800888a:	4604      	mov	r4, r0
 800888c:	460d      	mov	r5, r1
 800888e:	4622      	mov	r2, r4
 8008890:	462b      	mov	r3, r5
 8008892:	4620      	mov	r0, r4
 8008894:	4629      	mov	r1, r5
 8008896:	f7f7 fe53 	bl	8000540 <__aeabi_dmul>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4680      	mov	r8, r0
 80088a0:	4689      	mov	r9, r1
 80088a2:	f7f7 fe4d 	bl	8000540 <__aeabi_dmul>
 80088a6:	a374      	add	r3, pc, #464	; (adr r3, 8008a78 <atan+0x2b8>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	4606      	mov	r6, r0
 80088ae:	460f      	mov	r7, r1
 80088b0:	f7f7 fe46 	bl	8000540 <__aeabi_dmul>
 80088b4:	a372      	add	r3, pc, #456	; (adr r3, 8008a80 <atan+0x2c0>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f7f7 fc8b 	bl	80001d4 <__adddf3>
 80088be:	4632      	mov	r2, r6
 80088c0:	463b      	mov	r3, r7
 80088c2:	f7f7 fe3d 	bl	8000540 <__aeabi_dmul>
 80088c6:	a370      	add	r3, pc, #448	; (adr r3, 8008a88 <atan+0x2c8>)
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	f7f7 fc82 	bl	80001d4 <__adddf3>
 80088d0:	4632      	mov	r2, r6
 80088d2:	463b      	mov	r3, r7
 80088d4:	f7f7 fe34 	bl	8000540 <__aeabi_dmul>
 80088d8:	a36d      	add	r3, pc, #436	; (adr r3, 8008a90 <atan+0x2d0>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fc79 	bl	80001d4 <__adddf3>
 80088e2:	4632      	mov	r2, r6
 80088e4:	463b      	mov	r3, r7
 80088e6:	f7f7 fe2b 	bl	8000540 <__aeabi_dmul>
 80088ea:	a36b      	add	r3, pc, #428	; (adr r3, 8008a98 <atan+0x2d8>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fc70 	bl	80001d4 <__adddf3>
 80088f4:	4632      	mov	r2, r6
 80088f6:	463b      	mov	r3, r7
 80088f8:	f7f7 fe22 	bl	8000540 <__aeabi_dmul>
 80088fc:	a368      	add	r3, pc, #416	; (adr r3, 8008aa0 <atan+0x2e0>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f7 fc67 	bl	80001d4 <__adddf3>
 8008906:	4642      	mov	r2, r8
 8008908:	464b      	mov	r3, r9
 800890a:	f7f7 fe19 	bl	8000540 <__aeabi_dmul>
 800890e:	a366      	add	r3, pc, #408	; (adr r3, 8008aa8 <atan+0x2e8>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	4680      	mov	r8, r0
 8008916:	4689      	mov	r9, r1
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f7 fe10 	bl	8000540 <__aeabi_dmul>
 8008920:	a363      	add	r3, pc, #396	; (adr r3, 8008ab0 <atan+0x2f0>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	f7f7 fc53 	bl	80001d0 <__aeabi_dsub>
 800892a:	4632      	mov	r2, r6
 800892c:	463b      	mov	r3, r7
 800892e:	f7f7 fe07 	bl	8000540 <__aeabi_dmul>
 8008932:	a361      	add	r3, pc, #388	; (adr r3, 8008ab8 <atan+0x2f8>)
 8008934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008938:	f7f7 fc4a 	bl	80001d0 <__aeabi_dsub>
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	f7f7 fdfe 	bl	8000540 <__aeabi_dmul>
 8008944:	a35e      	add	r3, pc, #376	; (adr r3, 8008ac0 <atan+0x300>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fc41 	bl	80001d0 <__aeabi_dsub>
 800894e:	4632      	mov	r2, r6
 8008950:	463b      	mov	r3, r7
 8008952:	f7f7 fdf5 	bl	8000540 <__aeabi_dmul>
 8008956:	a35c      	add	r3, pc, #368	; (adr r3, 8008ac8 <atan+0x308>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f7f7 fc38 	bl	80001d0 <__aeabi_dsub>
 8008960:	4632      	mov	r2, r6
 8008962:	463b      	mov	r3, r7
 8008964:	f7f7 fdec 	bl	8000540 <__aeabi_dmul>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4640      	mov	r0, r8
 800896e:	4649      	mov	r1, r9
 8008970:	f7f7 fc30 	bl	80001d4 <__adddf3>
 8008974:	4622      	mov	r2, r4
 8008976:	462b      	mov	r3, r5
 8008978:	f7f7 fde2 	bl	8000540 <__aeabi_dmul>
 800897c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	d14b      	bne.n	8008a1e <atan+0x25e>
 8008986:	4620      	mov	r0, r4
 8008988:	4629      	mov	r1, r5
 800898a:	f7f7 fc21 	bl	80001d0 <__aeabi_dsub>
 800898e:	e72c      	b.n	80087ea <atan+0x2a>
 8008990:	ee10 0a10 	vmov	r0, s0
 8008994:	4b53      	ldr	r3, [pc, #332]	; (8008ae4 <atan+0x324>)
 8008996:	2200      	movs	r2, #0
 8008998:	4629      	mov	r1, r5
 800899a:	f7f7 fc19 	bl	80001d0 <__aeabi_dsub>
 800899e:	4b51      	ldr	r3, [pc, #324]	; (8008ae4 <atan+0x324>)
 80089a0:	4606      	mov	r6, r0
 80089a2:	460f      	mov	r7, r1
 80089a4:	2200      	movs	r2, #0
 80089a6:	4620      	mov	r0, r4
 80089a8:	4629      	mov	r1, r5
 80089aa:	f7f7 fc13 	bl	80001d4 <__adddf3>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4630      	mov	r0, r6
 80089b4:	4639      	mov	r1, r7
 80089b6:	f7f7 feed 	bl	8000794 <__aeabi_ddiv>
 80089ba:	f04f 0a01 	mov.w	sl, #1
 80089be:	4604      	mov	r4, r0
 80089c0:	460d      	mov	r5, r1
 80089c2:	e764      	b.n	800888e <atan+0xce>
 80089c4:	4b49      	ldr	r3, [pc, #292]	; (8008aec <atan+0x32c>)
 80089c6:	429e      	cmp	r6, r3
 80089c8:	da1d      	bge.n	8008a06 <atan+0x246>
 80089ca:	ee10 0a10 	vmov	r0, s0
 80089ce:	4b48      	ldr	r3, [pc, #288]	; (8008af0 <atan+0x330>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	4629      	mov	r1, r5
 80089d4:	f7f7 fbfc 	bl	80001d0 <__aeabi_dsub>
 80089d8:	4b45      	ldr	r3, [pc, #276]	; (8008af0 <atan+0x330>)
 80089da:	4606      	mov	r6, r0
 80089dc:	460f      	mov	r7, r1
 80089de:	2200      	movs	r2, #0
 80089e0:	4620      	mov	r0, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	f7f7 fdac 	bl	8000540 <__aeabi_dmul>
 80089e8:	4b3e      	ldr	r3, [pc, #248]	; (8008ae4 <atan+0x324>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	f7f7 fbf2 	bl	80001d4 <__adddf3>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4630      	mov	r0, r6
 80089f6:	4639      	mov	r1, r7
 80089f8:	f7f7 fecc 	bl	8000794 <__aeabi_ddiv>
 80089fc:	f04f 0a02 	mov.w	sl, #2
 8008a00:	4604      	mov	r4, r0
 8008a02:	460d      	mov	r5, r1
 8008a04:	e743      	b.n	800888e <atan+0xce>
 8008a06:	462b      	mov	r3, r5
 8008a08:	ee10 2a10 	vmov	r2, s0
 8008a0c:	4939      	ldr	r1, [pc, #228]	; (8008af4 <atan+0x334>)
 8008a0e:	2000      	movs	r0, #0
 8008a10:	f7f7 fec0 	bl	8000794 <__aeabi_ddiv>
 8008a14:	f04f 0a03 	mov.w	sl, #3
 8008a18:	4604      	mov	r4, r0
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	e737      	b.n	800888e <atan+0xce>
 8008a1e:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <atan+0x338>)
 8008a20:	4e36      	ldr	r6, [pc, #216]	; (8008afc <atan+0x33c>)
 8008a22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008a26:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008a2a:	e9da 2300 	ldrd	r2, r3, [sl]
 8008a2e:	f7f7 fbcf 	bl	80001d0 <__aeabi_dsub>
 8008a32:	4622      	mov	r2, r4
 8008a34:	462b      	mov	r3, r5
 8008a36:	f7f7 fbcb 	bl	80001d0 <__aeabi_dsub>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008a42:	f7f7 fbc5 	bl	80001d0 <__aeabi_dsub>
 8008a46:	f1bb 0f00 	cmp.w	fp, #0
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	460d      	mov	r5, r1
 8008a4e:	f6bf aed6 	bge.w	80087fe <atan+0x3e>
 8008a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a56:	461d      	mov	r5, r3
 8008a58:	e6d1      	b.n	80087fe <atan+0x3e>
 8008a5a:	a51d      	add	r5, pc, #116	; (adr r5, 8008ad0 <atan+0x310>)
 8008a5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008a60:	e6cd      	b.n	80087fe <atan+0x3e>
 8008a62:	bf00      	nop
 8008a64:	f3af 8000 	nop.w
 8008a68:	54442d18 	.word	0x54442d18
 8008a6c:	bff921fb 	.word	0xbff921fb
 8008a70:	8800759c 	.word	0x8800759c
 8008a74:	7e37e43c 	.word	0x7e37e43c
 8008a78:	e322da11 	.word	0xe322da11
 8008a7c:	3f90ad3a 	.word	0x3f90ad3a
 8008a80:	24760deb 	.word	0x24760deb
 8008a84:	3fa97b4b 	.word	0x3fa97b4b
 8008a88:	a0d03d51 	.word	0xa0d03d51
 8008a8c:	3fb10d66 	.word	0x3fb10d66
 8008a90:	c54c206e 	.word	0xc54c206e
 8008a94:	3fb745cd 	.word	0x3fb745cd
 8008a98:	920083ff 	.word	0x920083ff
 8008a9c:	3fc24924 	.word	0x3fc24924
 8008aa0:	5555550d 	.word	0x5555550d
 8008aa4:	3fd55555 	.word	0x3fd55555
 8008aa8:	2c6a6c2f 	.word	0x2c6a6c2f
 8008aac:	bfa2b444 	.word	0xbfa2b444
 8008ab0:	52defd9a 	.word	0x52defd9a
 8008ab4:	3fadde2d 	.word	0x3fadde2d
 8008ab8:	af749a6d 	.word	0xaf749a6d
 8008abc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008ac0:	fe231671 	.word	0xfe231671
 8008ac4:	3fbc71c6 	.word	0x3fbc71c6
 8008ac8:	9998ebc4 	.word	0x9998ebc4
 8008acc:	3fc99999 	.word	0x3fc99999
 8008ad0:	54442d18 	.word	0x54442d18
 8008ad4:	3ff921fb 	.word	0x3ff921fb
 8008ad8:	440fffff 	.word	0x440fffff
 8008adc:	7ff00000 	.word	0x7ff00000
 8008ae0:	3fdbffff 	.word	0x3fdbffff
 8008ae4:	3ff00000 	.word	0x3ff00000
 8008ae8:	3ff2ffff 	.word	0x3ff2ffff
 8008aec:	40038000 	.word	0x40038000
 8008af0:	3ff80000 	.word	0x3ff80000
 8008af4:	bff00000 	.word	0xbff00000
 8008af8:	08008bc8 	.word	0x08008bc8
 8008afc:	08008ba8 	.word	0x08008ba8

08008b00 <fabs>:
 8008b00:	ec51 0b10 	vmov	r0, r1, d0
 8008b04:	ee10 2a10 	vmov	r2, s0
 8008b08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b0c:	ec43 2b10 	vmov	d0, r2, r3
 8008b10:	4770      	bx	lr
 8008b12:	0000      	movs	r0, r0
 8008b14:	0000      	movs	r0, r0
	...

08008b18 <nan>:
 8008b18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b20 <nan+0x8>
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	00000000 	.word	0x00000000
 8008b24:	7ff80000 	.word	0x7ff80000

08008b28 <_init>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	bf00      	nop
 8008b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2e:	bc08      	pop	{r3}
 8008b30:	469e      	mov	lr, r3
 8008b32:	4770      	bx	lr

08008b34 <_fini>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	bf00      	nop
 8008b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3a:	bc08      	pop	{r3}
 8008b3c:	469e      	mov	lr, r3
 8008b3e:	4770      	bx	lr
