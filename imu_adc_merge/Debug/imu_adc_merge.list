
imu_adc_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08008c40  08008c40  00018c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce8  08008ce8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08008ce8  08008ce8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ce8  08008ce8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cec  08008cec  00018cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000002d8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012807  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b9  00000000  00000000  000328cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000df0  00000000  00000000  00035b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000330d  00000000  00000000  00036980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a99  00000000  00000000  00039c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b63dc  00000000  00000000  0004b726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101b02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004248  00000000  00000000  00101b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c28 	.word	0x08008c28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008c28 	.word	0x08008c28

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <calculate_gestures>:
float finger_angles[4] = {0, 0, 0, 0};

//====================================================================================================
// Functions

void calculate_gestures() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	e00d      	b.n	8000ba8 <calculate_gestures+0x28>
        finger_angles[i] = calculate_finger_angle(i);
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f000 f93b 	bl	8000e08 <calculate_finger_angle>
 8000b92:	eef0 7a40 	vmov.f32	s15, s0
 8000b96:	4a7e      	ldr	r2, [pc, #504]	; (8000d90 <calculate_gestures+0x210>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	ddee      	ble.n	8000b8c <calculate_gestures+0xc>
    }

    int gesture_key = detect_gestures(finger_angles);
 8000bae:	4878      	ldr	r0, [pc, #480]	; (8000d90 <calculate_gestures+0x210>)
 8000bb0:	f000 f8fa 	bl	8000da8 <detect_gestures>
 8000bb4:	6038      	str	r0, [r7, #0]
    switch (gesture_key) {
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d04d      	beq.n	8000c58 <calculate_gestures+0xd8>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	2b08      	cmp	r3, #8
 8000bc0:	f300 80b2 	bgt.w	8000d28 <calculate_gestures+0x1a8>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d004      	beq.n	8000bd4 <calculate_gestures+0x54>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	f000 8087 	beq.w	8000ce0 <calculate_gestures+0x160>
 8000bd2:	e0a9      	b.n	8000d28 <calculate_gestures+0x1a8>
        case 0b0001: // yaw right
            gimbal_yaw = 0.5 + lerp(0, 0.5, finger_angles[FINGER_INDEX_IDX] / 90);
 8000bd4:	4b6e      	ldr	r3, [pc, #440]	; (8000d90 <calculate_gestures+0x210>)
 8000bd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000bda:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8000d94 <calculate_gestures+0x214>
 8000bde:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000be2:	eeb0 1a47 	vmov.f32	s2, s14
 8000be6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000bea:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8000d98 <calculate_gestures+0x218>
 8000bee:	f003 fd5f 	bl	80046b0 <lerp>
 8000bf2:	ee10 3a10 	vmov	r3, s0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fc4a 	bl	8000490 <__aeabi_f2d>
 8000bfc:	f04f 0200 	mov.w	r2, #0
 8000c00:	4b66      	ldr	r3, [pc, #408]	; (8000d9c <calculate_gestures+0x21c>)
 8000c02:	f7ff fae7 	bl	80001d4 <__adddf3>
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	4610      	mov	r0, r2
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f7ff ff67 	bl	8000ae0 <__aeabi_d2f>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a62      	ldr	r2, [pc, #392]	; (8000da0 <calculate_gestures+0x220>)
 8000c16:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000c18:	4b5d      	ldr	r3, [pc, #372]	; (8000d90 <calculate_gestures+0x210>)
 8000c1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000c1e:	4b5c      	ldr	r3, [pc, #368]	; (8000d90 <calculate_gestures+0x210>)
 8000c20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c24:	eef0 0a47 	vmov.f32	s1, s14
 8000c28:	eeb0 0a67 	vmov.f32	s0, s15
 8000c2c:	f003 fd24 	bl	8004678 <max>
 8000c30:	eeb0 7a40 	vmov.f32	s14, s0
 8000c34:	eddf 6a57 	vldr	s13, [pc, #348]	; 8000d94 <calculate_gestures+0x214>
 8000c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3c:	eeb0 1a67 	vmov.f32	s2, s15
 8000c40:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c44:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000d98 <calculate_gestures+0x218>
 8000c48:	f003 fd32 	bl	80046b0 <lerp>
 8000c4c:	eef0 7a40 	vmov.f32	s15, s0
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <calculate_gestures+0x224>)
 8000c52:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000c56:	e070      	b.n	8000d3a <calculate_gestures+0x1ba>
        case 0b1000: // yaw left
            gimbal_yaw = 0.5 - lerp(0, 0.5, finger_angles[FINGER_PINKY_IDX] / 90);
 8000c58:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <calculate_gestures+0x210>)
 8000c5a:	edd3 7a00 	vldr	s15, [r3]
 8000c5e:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000d94 <calculate_gestures+0x214>
 8000c62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c66:	eeb0 1a47 	vmov.f32	s2, s14
 8000c6a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000c6e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000d98 <calculate_gestures+0x218>
 8000c72:	f003 fd1d 	bl	80046b0 <lerp>
 8000c76:	ee10 3a10 	vmov	r3, s0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fc08 	bl	8000490 <__aeabi_f2d>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4944      	ldr	r1, [pc, #272]	; (8000d9c <calculate_gestures+0x21c>)
 8000c8a:	f7ff faa1 	bl	80001d0 <__aeabi_dsub>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	4610      	mov	r0, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff ff23 	bl	8000ae0 <__aeabi_d2f>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <calculate_gestures+0x220>)
 8000c9e:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000ca0:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <calculate_gestures+0x210>)
 8000ca2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ca6:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <calculate_gestures+0x210>)
 8000ca8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cac:	eef0 0a47 	vmov.f32	s1, s14
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f003 fce0 	bl	8004678 <max>
 8000cb8:	eeb0 7a40 	vmov.f32	s14, s0
 8000cbc:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000d94 <calculate_gestures+0x214>
 8000cc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc4:	eeb0 1a67 	vmov.f32	s2, s15
 8000cc8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000ccc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8000d98 <calculate_gestures+0x218>
 8000cd0:	f003 fcee 	bl	80046b0 <lerp>
 8000cd4:	eef0 7a40 	vmov.f32	s15, s0
 8000cd8:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <calculate_gestures+0x224>)
 8000cda:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000cde:	e02c      	b.n	8000d3a <calculate_gestures+0x1ba>
        case 0b0110: // throttle
            gimbal_yaw = 0;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <calculate_gestures+0x220>)
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000ce8:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <calculate_gestures+0x210>)
 8000cea:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cee:	4b28      	ldr	r3, [pc, #160]	; (8000d90 <calculate_gestures+0x210>)
 8000cf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cf4:	eef0 0a47 	vmov.f32	s1, s14
 8000cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfc:	f003 fcbc 	bl	8004678 <max>
 8000d00:	eeb0 7a40 	vmov.f32	s14, s0
 8000d04:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000d94 <calculate_gestures+0x214>
 8000d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000d10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d14:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000d98 <calculate_gestures+0x218>
 8000d18:	f003 fcca 	bl	80046b0 <lerp>
 8000d1c:	eef0 7a40 	vmov.f32	s15, s0
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <calculate_gestures+0x224>)
 8000d22:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000d26:	e008      	b.n	8000d3a <calculate_gestures+0x1ba>
        default: // no-op
        	gimbal_yaw = 0.5;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <calculate_gestures+0x220>)
 8000d2a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000d2e:	601a      	str	r2, [r3, #0]
        	gimbal_throttle = 0;
 8000d30:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <calculate_gestures+0x224>)
 8000d32:	f04f 0200 	mov.w	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
            break;
 8000d38:	bf00      	nop
    }
    if (gesture_key >> 2 && gesture_key >> 1) {
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	109b      	asrs	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d022      	beq.n	8000d88 <calculate_gestures+0x208>
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	105b      	asrs	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d01e      	beq.n	8000d88 <calculate_gestures+0x208>
    	gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <calculate_gestures+0x210>)
 8000d4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <calculate_gestures+0x210>)
 8000d52:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d56:	eef0 0a47 	vmov.f32	s1, s14
 8000d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d5e:	f003 fc8b 	bl	8004678 <max>
 8000d62:	eeb0 7a40 	vmov.f32	s14, s0
 8000d66:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000d94 <calculate_gestures+0x214>
 8000d6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6e:	eeb0 1a67 	vmov.f32	s2, s15
 8000d72:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d76:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000d98 <calculate_gestures+0x218>
 8000d7a:	f003 fc99 	bl	80046b0 <lerp>
 8000d7e:	eef0 7a40 	vmov.f32	s15, s0
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <calculate_gestures+0x224>)
 8000d84:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200000b4 	.word	0x200000b4
 8000d94:	42b40000 	.word	0x42b40000
 8000d98:	00000000 	.word	0x00000000
 8000d9c:	3fe00000 	.word	0x3fe00000
 8000da0:	200002fc 	.word	0x200002fc
 8000da4:	20000300 	.word	0x20000300

08000da8 <detect_gestures>:

int detect_gestures(float* finger_angles) {
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    short gesture_key = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	e019      	b.n	8000dee <detect_gestures+0x46>
        if (finger_angles[i] > ANGLE_THRESH) {
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	edd3 7a00 	vldr	s15, [r3]
 8000dc6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	dd09      	ble.n	8000de8 <detect_gestures+0x40>
            gesture_key |= 1 << (3 - i);
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	f1c3 0303 	rsb	r3, r3, #3
 8000dda:	2201      	movs	r2, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	89fb      	ldrh	r3, [r7, #14]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	dde2      	ble.n	8000dba <detect_gestures+0x12>
        }
    }
    return gesture_key;
 8000df4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	0000      	movs	r0, r0
	...

08000e08 <calculate_finger_angle>:

/*
 * Calculate finger angles
 * ADC_flex read by "analogRead(flexPin)" // analogRead later defined in flex sensor interface"
 */
float calculate_finger_angle(int finger_num) {
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    float voltage_flex = ADC_vals[finger_num] * VCC / (pow(2, ADC_NUM_BITS) - 1);
 8000e10:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <calculate_finger_angle+0xd8>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fb27 	bl	800046c <__aeabi_i2d>
 8000e1e:	a32c      	add	r3, pc, #176	; (adr r3, 8000ed0 <calculate_finger_angle+0xc8>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fb8c 	bl	8000540 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	a329      	add	r3, pc, #164	; (adr r3, 8000ed8 <calculate_finger_angle+0xd0>)
 8000e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e36:	f7ff fcad 	bl	8000794 <__aeabi_ddiv>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	4610      	mov	r0, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	f7ff fe4d 	bl	8000ae0 <__aeabi_d2f>
 8000e46:	4603      	mov	r3, r0
 8000e48:	617b      	str	r3, [r7, #20]
    float resistance_flex = (RESISTANCE_PULLDOWN * voltage_flex) / (VCC - voltage_flex);
 8000e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000ee4 <calculate_finger_angle+0xdc>
 8000e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e56:	ee17 0a90 	vmov	r0, s15
 8000e5a:	f7ff fb19 	bl	8000490 <__aeabi_f2d>
 8000e5e:	4604      	mov	r4, r0
 8000e60:	460d      	mov	r5, r1
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff fb14 	bl	8000490 <__aeabi_f2d>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	a118      	add	r1, pc, #96	; (adr r1, 8000ed0 <calculate_finger_angle+0xc8>)
 8000e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e72:	f7ff f9ad 	bl	80001d0 <__aeabi_dsub>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	f7ff fc89 	bl	8000794 <__aeabi_ddiv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fe29 	bl	8000ae0 <__aeabi_d2f>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	613b      	str	r3, [r7, #16]
    float angle = 90 - map(resistance_flex, RESISTANCE_UNFLEXED, RESISTANCE_FLEXED, 0, 90);
 8000e92:	ed9f 2a15 	vldr	s4, [pc, #84]	; 8000ee8 <calculate_finger_angle+0xe0>
 8000e96:	eddf 1a15 	vldr	s3, [pc, #84]	; 8000eec <calculate_finger_angle+0xe4>
 8000e9a:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8000ef0 <calculate_finger_angle+0xe8>
 8000e9e:	eddf 0a15 	vldr	s1, [pc, #84]	; 8000ef4 <calculate_finger_angle+0xec>
 8000ea2:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ea6:	f003 fc21 	bl	80046ec <map>
 8000eaa:	eef0 7a40 	vmov.f32	s15, s0
 8000eae:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000ee8 <calculate_finger_angle+0xe0>
 8000eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb6:	edc7 7a03 	vstr	s15, [r7, #12]
    return angle;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	ee07 3a90 	vmov	s15, r3
}
 8000ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	66666666 	.word	0x66666666
 8000ed4:	400a6666 	.word	0x400a6666
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	40affe00 	.word	0x40affe00
 8000ee0:	20000328 	.word	0x20000328
 8000ee4:	469c4000 	.word	0x469c4000
 8000ee8:	42b40000 	.word	0x42b40000
 8000eec:	00000000 	.word	0x00000000
 8000ef0:	46ea6000 	.word	0x46ea6000
 8000ef4:	461c4000 	.word	0x461c4000

08000ef8 <calculate_orientation>:

/*
 * Estimate orientation based on previous quaternion values. 
 * Runs Madgwick, Madgwick output quaternion to relative Euler angles, and remaps angles to gimbal potentiometer percentages.
 */
void calculate_orientation(float delta_time) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	ed87 0a01 	vstr	s0, [r7, #4]
	float sample_freq;
	#ifdef sampleFreq
	sample_freq = sampleFreq;
	#else
	sample_freq = convert_period_to_freq(delta_time);
 8000f02:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f06:	f003 fc37 	bl	8004778 <convert_period_to_freq>
 8000f0a:	ed87 0a03 	vstr	s0, [r7, #12]
	#endif /* sampleFreq */

	MadgwickAHRSupdate(gyro.gyro.x, gyro.gyro.y, gyro.gyro.z, accel.acceleration.x, accel.acceleration.y, accel.acceleration.z, mag.magnetic.x, mag.magnetic.y, mag.magnetic.z, sample_freq); // gyro, accel, mag are sensors_type_t
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <calculate_orientation+0x7c>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <calculate_orientation+0x7c>)
 8000f16:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <calculate_orientation+0x7c>)
 8000f1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <calculate_orientation+0x80>)
 8000f22:	ed93 6a00 	vldr	s12, [r3]
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <calculate_orientation+0x80>)
 8000f28:	edd3 5a01 	vldr	s11, [r3, #4]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <calculate_orientation+0x80>)
 8000f2e:	ed93 5a02 	vldr	s10, [r3, #8]
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <calculate_orientation+0x84>)
 8000f34:	ed93 3a00 	vldr	s6, [r3]
 8000f38:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <calculate_orientation+0x84>)
 8000f3a:	edd3 3a01 	vldr	s7, [r3, #4]
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <calculate_orientation+0x84>)
 8000f40:	ed93 4a02 	vldr	s8, [r3, #8]
 8000f44:	edd7 4a03 	vldr	s9, [r7, #12]
 8000f48:	eef0 2a45 	vmov.f32	s5, s10
 8000f4c:	eeb0 2a65 	vmov.f32	s4, s11
 8000f50:	eef0 1a46 	vmov.f32	s3, s12
 8000f54:	eeb0 1a66 	vmov.f32	s2, s13
 8000f58:	eef0 0a47 	vmov.f32	s1, s14
 8000f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f60:	f000 f970 	bl	8001244 <MadgwickAHRSupdate>
	convert_quaternion_to_euler();
 8000f64:	f000 f8a2 	bl	80010ac <convert_quaternion_to_euler>
	remap_angles_to_gimbals();
 8000f68:	f000 f80a 	bl	8000f80 <remap_angles_to_gimbals>
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000304 	.word	0x20000304
 8000f78:	20000310 	.word	0x20000310
 8000f7c:	2000031c 	.word	0x2000031c

08000f80 <remap_angles_to_gimbals>:

/*
 * Remapping only consists of pitch and roll
 */
void remap_angles_to_gimbals() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	remapped_angle_x = (angle_x + atan2_offset) / (2 * M_PI);
 8000f84:	4b32      	ldr	r3, [pc, #200]	; (8001050 <remap_angles_to_gimbals+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fa81 	bl	8000490 <__aeabi_f2d>
 8000f8e:	a32a      	add	r3, pc, #168	; (adr r3, 8001038 <remap_angles_to_gimbals+0xb8>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff f91e 	bl	80001d4 <__adddf3>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	a327      	add	r3, pc, #156	; (adr r3, 8001040 <remap_angles_to_gimbals+0xc0>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fbf5 	bl	8000794 <__aeabi_ddiv>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fd95 	bl	8000ae0 <__aeabi_d2f>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <remap_angles_to_gimbals+0xd4>)
 8000fba:	6013      	str	r3, [r2, #0]
	remapped_angle_y = (angle_y + asin_offset) / (M_PI);
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <remap_angles_to_gimbals+0xd8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa65 	bl	8000490 <__aeabi_f2d>
 8000fc6:	a320      	add	r3, pc, #128	; (adr r3, 8001048 <remap_angles_to_gimbals+0xc8>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff f902 	bl	80001d4 <__adddf3>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	a317      	add	r3, pc, #92	; (adr r3, 8001038 <remap_angles_to_gimbals+0xb8>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fbd9 	bl	8000794 <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd79 	bl	8000ae0 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a1a      	ldr	r2, [pc, #104]	; (800105c <remap_angles_to_gimbals+0xdc>)
 8000ff2:	6013      	str	r3, [r2, #0]
	gimbal_roll = lerp(0, 1, remapped_angle_x);
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <remap_angles_to_gimbals+0xd4>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eeb0 1a67 	vmov.f32	s2, s15
 8000ffe:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001002:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001060 <remap_angles_to_gimbals+0xe0>
 8001006:	f003 fb53 	bl	80046b0 <lerp>
 800100a:	eef0 7a40 	vmov.f32	s15, s0
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <remap_angles_to_gimbals+0xe4>)
 8001010:	edc3 7a00 	vstr	s15, [r3]
	gimbal_pitch = lerp(0, 1, remapped_angle_y);
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <remap_angles_to_gimbals+0xdc>)
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	eeb0 1a67 	vmov.f32	s2, s15
 800101e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001022:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001060 <remap_angles_to_gimbals+0xe0>
 8001026:	f003 fb43 	bl	80046b0 <lerp>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <remap_angles_to_gimbals+0xe8>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	54442d18 	.word	0x54442d18
 800103c:	400921fb 	.word	0x400921fb
 8001040:	54442d18 	.word	0x54442d18
 8001044:	401921fb 	.word	0x401921fb
 8001048:	54442d18 	.word	0x54442d18
 800104c:	3ff921fb 	.word	0x3ff921fb
 8001050:	200002ec 	.word	0x200002ec
 8001054:	200000c4 	.word	0x200000c4
 8001058:	200002f0 	.word	0x200002f0
 800105c:	200000c8 	.word	0x200000c8
 8001060:	00000000 	.word	0x00000000
 8001064:	200002f4 	.word	0x200002f4
 8001068:	200002f8 	.word	0x200002f8

0800106c <reset_aux_frame>:

/*
 * Reset aux frame (identity)
 */
void reset_aux_frame() {
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	q0 = 1.0f;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <reset_aux_frame+0x30>)
 8001072:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001076:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <reset_aux_frame+0x34>)
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <reset_aux_frame+0x38>)
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <reset_aux_frame+0x3c>)
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000024 	.word	0x20000024
 80010a0:	200002e0 	.word	0x200002e0
 80010a4:	200002e4 	.word	0x200002e4
 80010a8:	200002e8 	.word	0x200002e8

080010ac <convert_quaternion_to_euler>:

/*
 * Convert quaternion to euler angles
 */
void convert_quaternion_to_euler() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
	// angle_x is roll; angle_y is pitch; angle_z is yaw
	double q2sqr = q2 * q2;
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <convert_quaternion_to_euler+0x178>)
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	4b5a      	ldr	r3, [pc, #360]	; (8001224 <convert_quaternion_to_euler+0x178>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	ee17 0a90 	vmov	r0, s15
 80010c6:	f7ff f9e3 	bl	8000490 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// double t0 = -2.0 * (q2sqr + q3 * q3) + 1.0;
	// double t1 = +2.0 * (q1 * q2 + q0 * q3);
	double t2 = -2.0 * (q1 * q3 - q0 * q2);
 80010d2:	4b55      	ldr	r3, [pc, #340]	; (8001228 <convert_quaternion_to_euler+0x17c>)
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	4b54      	ldr	r3, [pc, #336]	; (800122c <convert_quaternion_to_euler+0x180>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e2:	4b53      	ldr	r3, [pc, #332]	; (8001230 <convert_quaternion_to_euler+0x184>)
 80010e4:	edd3 6a00 	vldr	s13, [r3]
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <convert_quaternion_to_euler+0x178>)
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff f9c9 	bl	8000490 <__aeabi_f2d>
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001106:	f7ff fa1b 	bl	8000540 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double t3 = +2.0 * (q2 * q3 + q0 * q1);
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <convert_quaternion_to_euler+0x178>)
 8001114:	ed93 7a00 	vldr	s14, [r3]
 8001118:	4b44      	ldr	r3, [pc, #272]	; (800122c <convert_quaternion_to_euler+0x180>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <convert_quaternion_to_euler+0x184>)
 8001124:	edd3 6a00 	vldr	s13, [r3]
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <convert_quaternion_to_euler+0x17c>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001136:	ee17 0a90 	vmov	r0, s15
 800113a:	f7ff f9a9 	bl	8000490 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	f7ff f847 	bl	80001d4 <__adddf3>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double t4 = -2.0 * (q1 * q1 + q2sqr) + 1.0;
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <convert_quaternion_to_euler+0x17c>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <convert_quaternion_to_euler+0x17c>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	ee17 0a90 	vmov	r0, s15
 8001162:	f7ff f995 	bl	8000490 <__aeabi_f2d>
 8001166:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800116a:	f7ff f833 	bl	80001d4 <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800117e:	f7ff f9df 	bl	8000540 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f04f 0200 	mov.w	r2, #0
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <convert_quaternion_to_euler+0x188>)
 8001190:	f7ff f820 	bl	80001d4 <__adddf3>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	e9c7 2300 	strd	r2, r3, [r7]

	t2 = t2 > 1.0 ? 1.0 : t2;
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <convert_quaternion_to_euler+0x188>)
 80011a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011a6:	f7ff fc5b 	bl	8000a60 <__aeabi_dcmpgt>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <convert_quaternion_to_euler+0x10c>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <convert_quaternion_to_euler+0x188>)
 80011b6:	e001      	b.n	80011bc <convert_quaternion_to_euler+0x110>
 80011b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t2 = t2 < -1.0 ? -1.0 : t2;
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <convert_quaternion_to_euler+0x18c>)
 80011c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ca:	f7ff fc2b 	bl	8000a24 <__aeabi_dcmplt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <convert_quaternion_to_euler+0x130>
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <convert_quaternion_to_euler+0x18c>)
 80011da:	e001      	b.n	80011e0 <convert_quaternion_to_euler+0x134>
 80011dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011e0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	angle_y = asin(t2);
 80011e4:	ed97 0b04 	vldr	d0, [r7, #16]
 80011e8:	f006 ff78 	bl	80080dc <asin>
 80011ec:	ec53 2b10 	vmov	r2, r3, d0
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fc74 	bl	8000ae0 <__aeabi_d2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <convert_quaternion_to_euler+0x190>)
 80011fc:	6013      	str	r3, [r2, #0]
	angle_x = atan2(t3, t4);
 80011fe:	ed97 1b00 	vldr	d1, [r7]
 8001202:	ed97 0b02 	vldr	d0, [r7, #8]
 8001206:	f006 ff9d 	bl	8008144 <atan2>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fc65 	bl	8000ae0 <__aeabi_d2f>
 8001216:	4603      	mov	r3, r0
 8001218:	4a09      	ldr	r2, [pc, #36]	; (8001240 <convert_quaternion_to_euler+0x194>)
 800121a:	6013      	str	r3, [r2, #0]
	// angle_z = atan2(t1, t0);
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200002e4 	.word	0x200002e4
 8001228:	200002e0 	.word	0x200002e0
 800122c:	200002e8 	.word	0x200002e8
 8001230:	20000024 	.word	0x20000024
 8001234:	3ff00000 	.word	0x3ff00000
 8001238:	bff00000 	.word	0xbff00000
 800123c:	200002f0 	.word	0x200002f0
 8001240:	200002ec 	.word	0x200002ec

08001244 <MadgwickAHRSupdate>:


//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float sample_freq) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ae      	sub	sp, #184	; 0xb8
 8001248:	af00      	add	r7, sp, #0
 800124a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800124e:	edc7 0a08 	vstr	s1, [r7, #32]
 8001252:	ed87 1a07 	vstr	s2, [r7, #28]
 8001256:	edc7 1a06 	vstr	s3, [r7, #24]
 800125a:	ed87 2a05 	vstr	s4, [r7, #20]
 800125e:	edc7 2a04 	vstr	s5, [r7, #16]
 8001262:	ed87 3a03 	vstr	s6, [r7, #12]
 8001266:	edc7 3a02 	vstr	s7, [r7, #8]
 800126a:	ed87 4a01 	vstr	s8, [r7, #4]
 800126e:	edc7 4a00 	vstr	s9, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001272:	edd7 7a03 	vldr	s15, [r7, #12]
 8001276:	eef5 7a40 	vcmp.f32	s15, #0.0
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	d11f      	bne.n	80012c0 <MadgwickAHRSupdate+0x7c>
 8001280:	edd7 7a02 	vldr	s15, [r7, #8]
 8001284:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d118      	bne.n	80012c0 <MadgwickAHRSupdate+0x7c>
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d111      	bne.n	80012c0 <MadgwickAHRSupdate+0x7c>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az, sample_freq);
 800129c:	ed97 3a00 	vldr	s6, [r7]
 80012a0:	edd7 2a04 	vldr	s5, [r7, #16]
 80012a4:	ed97 2a05 	vldr	s4, [r7, #20]
 80012a8:	edd7 1a06 	vldr	s3, [r7, #24]
 80012ac:	ed97 1a07 	vldr	s2, [r7, #28]
 80012b0:	edd7 0a08 	vldr	s1, [r7, #32]
 80012b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80012b8:	f000 feec 	bl	8002094 <MadgwickAHRSupdateIMU>
		return;
 80012bc:	f000 bedc 	b.w	8002078 <MadgwickAHRSupdate+0xe34>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80012c0:	4be4      	ldr	r3, [pc, #912]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	eeb1 7a67 	vneg.f32	s14, s15
 80012ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d2:	4be1      	ldr	r3, [pc, #900]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80012d4:	edd3 6a00 	vldr	s13, [r3]
 80012d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80012dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012e4:	4bdd      	ldr	r3, [pc, #884]	; (800165c <MadgwickAHRSupdate+0x418>)
 80012e6:	edd3 6a00 	vldr	s13, [r3]
 80012ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fe:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001302:	4bd7      	ldr	r3, [pc, #860]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800130c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001310:	4bd1      	ldr	r3, [pc, #836]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001312:	edd3 6a00 	vldr	s13, [r3]
 8001316:	edd7 7a07 	vldr	s15, [r7, #28]
 800131a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001322:	4bce      	ldr	r3, [pc, #824]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001324:	edd3 6a00 	vldr	s13, [r3]
 8001328:	edd7 7a08 	vldr	s15, [r7, #32]
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001334:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001340:	4bc7      	ldr	r3, [pc, #796]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001342:	ed93 7a00 	vldr	s14, [r3]
 8001346:	edd7 7a08 	vldr	s15, [r7, #32]
 800134a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800134e:	4bc1      	ldr	r3, [pc, #772]	; (8001654 <MadgwickAHRSupdate+0x410>)
 8001350:	edd3 6a00 	vldr	s13, [r3]
 8001354:	edd7 7a07 	vldr	s15, [r7, #28]
 8001358:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800135c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001360:	4bbe      	ldr	r3, [pc, #760]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001362:	edd3 6a00 	vldr	s13, [r3]
 8001366:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800136a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001376:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800137e:	4bb8      	ldr	r3, [pc, #736]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001380:	ed93 7a00 	vldr	s14, [r3]
 8001384:	edd7 7a07 	vldr	s15, [r7, #28]
 8001388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138c:	4bb1      	ldr	r3, [pc, #708]	; (8001654 <MadgwickAHRSupdate+0x410>)
 800138e:	edd3 6a00 	vldr	s13, [r3]
 8001392:	edd7 7a08 	vldr	s15, [r7, #32]
 8001396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800139e:	4bae      	ldr	r3, [pc, #696]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80013a0:	edd3 6a00 	vldr	s13, [r3]
 80013a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013b8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80013bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d10e      	bne.n	80013e8 <MadgwickAHRSupdate+0x1a4>
 80013ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d6:	d107      	bne.n	80013e8 <MadgwickAHRSupdate+0x1a4>
 80013d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	f000 85ac 	beq.w	8001f40 <MadgwickAHRSupdate+0xcfc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80013e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001400:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001408:	eeb0 0a67 	vmov.f32	s0, s15
 800140c:	f001 f976 	bl	80026fc <invSqrt>
 8001410:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001414:	ed97 7a06 	vldr	s14, [r7, #24]
 8001418:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001424:	ed97 7a05 	vldr	s14, [r7, #20]
 8001428:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001434:	ed97 7a04 	vldr	s14, [r7, #16]
 8001438:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800143c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001440:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800144c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001450:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001458:	edd7 7a01 	vldr	s15, [r7, #4]
 800145c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	f001 f948 	bl	80026fc <invSqrt>
 800146c:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001470:	ed97 7a03 	vldr	s14, [r7, #12]
 8001474:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001480:	ed97 7a02 	vldr	s14, [r7, #8]
 8001484:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001490:	ed97 7a01 	vldr	s14, [r7, #4]
 8001494:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80014a0:	4b6f      	ldr	r3, [pc, #444]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 80014b6:	4b6a      	ldr	r3, [pc, #424]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c8:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80014cc:	4b64      	ldr	r3, [pc, #400]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 80014ce:	edd3 7a00 	vldr	s15, [r3]
 80014d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014de:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80014e2:	4b5c      	ldr	r3, [pc, #368]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80014f8:	4b59      	ldr	r3, [pc, #356]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001502:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001506:	4b53      	ldr	r3, [pc, #332]	; (8001654 <MadgwickAHRSupdate+0x410>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001510:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800151e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8001522:	4b4e      	ldr	r3, [pc, #312]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800152c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800153a:	4b47      	ldr	r3, [pc, #284]	; (8001658 <MadgwickAHRSupdate+0x414>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <MadgwickAHRSupdate+0x414>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001552:	4b42      	ldr	r3, [pc, #264]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001560:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001570:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001574:	4b3a      	ldr	r3, [pc, #232]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 8001576:	ed93 7a00 	vldr	s14, [r3]
 800157a:	4b36      	ldr	r3, [pc, #216]	; (8001654 <MadgwickAHRSupdate+0x410>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001584:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001588:	4b35      	ldr	r3, [pc, #212]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b32      	ldr	r3, [pc, #200]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 800159c:	4b30      	ldr	r3, [pc, #192]	; (8001660 <MadgwickAHRSupdate+0x41c>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <MadgwickAHRSupdate+0x418>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ac:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	4b27      	ldr	r3, [pc, #156]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <MadgwickAHRSupdate+0x410>)
 80015da:	ed93 7a00 	vldr	s14, [r3]
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <MadgwickAHRSupdate+0x418>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80015ee:	ed93 7a00 	vldr	s14, [r3]
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MadgwickAHRSupdate+0x414>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001602:	ed93 7a00 	vldr	s14, [r3]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001610:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001616:	ed93 7a00 	vldr	s14, [r3]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <MadgwickAHRSupdate+0x418>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001628:	ed97 7a03 	vldr	s14, [r7, #12]
 800162c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <MadgwickAHRSupdate+0x418>)
 8001636:	edd3 6a00 	vldr	s13, [r3]
 800163a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800163e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <MadgwickAHRSupdate+0x414>)
 8001648:	edd3 6a00 	vldr	s13, [r3]
 800164c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001650:	e008      	b.n	8001664 <MadgwickAHRSupdate+0x420>
 8001652:	bf00      	nop
 8001654:	200002e0 	.word	0x200002e0
 8001658:	200002e4 	.word	0x200002e4
 800165c:	200002e8 	.word	0x200002e8
 8001660:	20000024 	.word	0x20000024
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001670:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800167c:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001680:	edd7 7a02 	vldr	s15, [r7, #8]
 8001684:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001688:	4bf5      	ldr	r3, [pc, #980]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001692:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001696:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800169a:	edd7 7a01 	vldr	s15, [r7, #4]
 800169e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016a2:	4bf0      	ldr	r3, [pc, #960]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80016b4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016c0:	edd7 6a03 	vldr	s13, [r7, #12]
 80016c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80016c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80016d4:	4be3      	ldr	r3, [pc, #908]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80016de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80016e6:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f2:	4bdd      	ldr	r3, [pc, #884]	; (8001a68 <MadgwickAHRSupdate+0x824>)
 80016f4:	edd3 6a00 	vldr	s13, [r3]
 80016f8:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001704:	4bd6      	ldr	r3, [pc, #856]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 8001706:	edd3 6a00 	vldr	s13, [r3]
 800170a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800170e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001716:	edd7 6a02 	vldr	s13, [r7, #8]
 800171a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001726:	edd7 6a02 	vldr	s13, [r7, #8]
 800172a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800172e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001732:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001736:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800173a:	edd7 7a01 	vldr	s15, [r7, #4]
 800173e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001742:	4bc8      	ldr	r3, [pc, #800]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001750:	edd7 6a02 	vldr	s13, [r7, #8]
 8001754:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001764:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001768:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800176c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001770:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001778:	ee17 0a90 	vmov	r0, s15
 800177c:	f7fe fe88 	bl	8000490 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	ec43 2b10 	vmov	d0, r2, r3
 8001788:	f006 fcde 	bl	8008148 <sqrt>
 800178c:	ec53 2b10 	vmov	r2, r3, d0
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f7ff f9a4 	bl	8000ae0 <__aeabi_d2f>
 8001798:	4603      	mov	r3, r0
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800179c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80017a0:	eeb1 7a67 	vneg.f32	s14, s15
 80017a4:	4bae      	ldr	r3, [pc, #696]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	4bae      	ldr	r3, [pc, #696]	; (8001a68 <MadgwickAHRSupdate+0x824>)
 80017b0:	edd3 6a00 	vldr	s13, [r3]
 80017b4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017c4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d0:	4ba4      	ldr	r3, [pc, #656]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 80017d2:	edd3 6a00 	vldr	s13, [r3]
 80017d6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e2:	edd7 6a01 	vldr	s13, [r7, #4]
 80017e6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017f2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80017f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80017fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017fe:	4b99      	ldr	r3, [pc, #612]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800180c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001810:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800181c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001820:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001830:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001834:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001838:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 800183c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001840:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001844:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001848:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800184c:	eeb1 7a67 	vneg.f32	s14, s15
 8001850:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001854:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001858:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800185c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001860:	edd7 7a06 	vldr	s15, [r7, #24]
 8001864:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800186c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001870:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001874:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001878:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800187c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001880:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001884:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001890:	4b73      	ldr	r3, [pc, #460]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 8001892:	edd3 6a00 	vldr	s13, [r3]
 8001896:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800189a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800189e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018a2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018a6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018ae:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018b2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018b6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ba:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018be:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018c2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ca:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018ce:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018e2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018e6:	eef1 6a67 	vneg.f32	s13, s15
 80018ea:	4b5e      	ldr	r3, [pc, #376]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018f4:	4b5c      	ldr	r3, [pc, #368]	; (8001a68 <MadgwickAHRSupdate+0x824>)
 80018f6:	ed93 6a00 	vldr	s12, [r3]
 80018fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001902:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001906:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800190a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800190e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001912:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001916:	ee26 6a27 	vmul.f32	s12, s12, s15
 800191a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800191e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001922:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001926:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800192a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800192e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001932:	edd7 7a02 	vldr	s15, [r7, #8]
 8001936:	ee76 7a67 	vsub.f32	s15, s12, s15
 800193a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001942:	4b47      	ldr	r3, [pc, #284]	; (8001a60 <MadgwickAHRSupdate+0x81c>)
 8001944:	edd3 6a00 	vldr	s13, [r3]
 8001948:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800194c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001950:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001954:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001958:	ee36 6a27 	vadd.f32	s12, s12, s15
 800195c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001960:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001964:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001968:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800196c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001970:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001974:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001978:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800197c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001980:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001984:	edd7 7a01 	vldr	s15, [r7, #4]
 8001988:	ee76 7a67 	vsub.f32	s15, s12, s15
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001998:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800199c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019a0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80019ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80019b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019b8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019bc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019c0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80019cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019d0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80019d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019dc:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <MadgwickAHRSupdate+0x824>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019e6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019ea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019f6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a02:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <MadgwickAHRSupdate+0x820>)
 8001a18:	edd3 6a00 	vldr	s13, [r3]
 8001a1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a24:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a28:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a2c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a30:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a34:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a38:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a3c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a40:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a44:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a48:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a50:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5c:	e006      	b.n	8001a6c <MadgwickAHRSupdate+0x828>
 8001a5e:	bf00      	nop
 8001a60:	200002e4 	.word	0x200002e4
 8001a64:	200002e8 	.word	0x200002e8
 8001a68:	200002e0 	.word	0x200002e0
 8001a6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a78:	4bf6      	ldr	r3, [pc, #984]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001a7a:	edd3 6a00 	vldr	s13, [r3]
 8001a7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a86:	4bf4      	ldr	r3, [pc, #976]	; (8001e58 <MadgwickAHRSupdate+0xc14>)
 8001a88:	ed93 6a00 	vldr	s12, [r3]
 8001a8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a98:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a9c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001aa0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001aa4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aa8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aac:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ab0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ab4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001ab8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001abc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ac4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad4:	4be1      	ldr	r3, [pc, #900]	; (8001e5c <MadgwickAHRSupdate+0xc18>)
 8001ad6:	edd3 6a00 	vldr	s13, [r3]
 8001ada:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ade:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ae2:	4bdf      	ldr	r3, [pc, #892]	; (8001e60 <MadgwickAHRSupdate+0xc1c>)
 8001ae4:	ed93 6a00 	vldr	s12, [r3]
 8001ae8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001aec:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001af0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001af4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001af8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001afc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b08:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b0c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b10:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b14:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b18:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b24:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b3c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b40:	eeb1 7a67 	vneg.f32	s14, s15
 8001b44:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b4c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b54:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b60:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b68:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b78:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b84:	4bb3      	ldr	r3, [pc, #716]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b8e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b92:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b9a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001b9e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ba2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ba6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001baa:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bb2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bbe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001bc2:	eef1 6a67 	vneg.f32	s13, s15
 8001bc6:	4ba3      	ldr	r3, [pc, #652]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd0:	4ba1      	ldr	r3, [pc, #644]	; (8001e58 <MadgwickAHRSupdate+0xc14>)
 8001bd2:	ed93 6a00 	vldr	s12, [r3]
 8001bd6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001be2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001be6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bea:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bee:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bf2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bf6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bfe:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c02:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c06:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c12:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c26:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <MadgwickAHRSupdate+0xc1c>)
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c34:	4b89      	ldr	r3, [pc, #548]	; (8001e5c <MadgwickAHRSupdate+0xc18>)
 8001c36:	ed93 6a00 	vldr	s12, [r3]
 8001c3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c46:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c4a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c5a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c5e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c62:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c66:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c6a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c6e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c76:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c82:	4b75      	ldr	r3, [pc, #468]	; (8001e58 <MadgwickAHRSupdate+0xc14>)
 8001c84:	edd3 6a00 	vldr	s13, [r3]
 8001c88:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c90:	4b70      	ldr	r3, [pc, #448]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001c92:	ed93 6a00 	vldr	s12, [r3]
 8001c96:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c9a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c9e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ca2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001ca6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001caa:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cb2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cb6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cba:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cbe:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cc2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cc6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cce:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cd2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cda:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001cea:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001cf2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d02:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d0e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d12:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d22:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d2e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d32:	eef1 6a67 	vneg.f32	s13, s15
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <MadgwickAHRSupdate+0xc18>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d40:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <MadgwickAHRSupdate+0xc1c>)
 8001d42:	ed93 6a00 	vldr	s12, [r3]
 8001d46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d52:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d56:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d5a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d5e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d62:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d66:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d6a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d6e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001d72:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d76:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d96:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d9a:	eef1 6a67 	vneg.f32	s13, s15
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <MadgwickAHRSupdate+0xc14>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <MadgwickAHRSupdate+0xc10>)
 8001daa:	ed93 6a00 	vldr	s12, [r3]
 8001dae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001db2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001db6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dba:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001dbe:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dc2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dc6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dca:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dce:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001dd2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001dd6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001dda:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dde:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001de2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001de6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MadgwickAHRSupdate+0xc1c>)
 8001df8:	edd3 6a00 	vldr	s13, [r3]
 8001dfc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e00:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e04:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e08:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e0c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e14:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e18:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e1c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e20:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e24:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e28:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e30:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e34:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e48:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001e4c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e50:	e008      	b.n	8001e64 <MadgwickAHRSupdate+0xc20>
 8001e52:	bf00      	nop
 8001e54:	200002e4 	.word	0x200002e4
 8001e58:	20000024 	.word	0x20000024
 8001e5c:	200002e8 	.word	0x200002e8
 8001e60:	200002e0 	.word	0x200002e0
 8001e64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e68:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e80:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e90:	f000 fc34 	bl	80026fc <invSqrt>
 8001e94:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001e98:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e9c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001ea8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001eac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001eb8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001ebc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001ec8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ecc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001ed8:	4b69      	ldr	r3, [pc, #420]	; (8002080 <MadgwickAHRSupdate+0xe3c>)
 8001eda:	ed93 7a00 	vldr	s14, [r3]
 8001ede:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eee:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001ef2:	4b63      	ldr	r3, [pc, #396]	; (8002080 <MadgwickAHRSupdate+0xe3c>)
 8001ef4:	ed93 7a00 	vldr	s14, [r3]
 8001ef8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f00:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f08:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001f0c:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <MadgwickAHRSupdate+0xe3c>)
 8001f0e:	ed93 7a00 	vldr	s14, [r3]
 8001f12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001f1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f22:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001f26:	4b56      	ldr	r3, [pc, #344]	; (8002080 <MadgwickAHRSupdate+0xe3c>)
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f34:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 8001f40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f44:	edd7 7a00 	vldr	s15, [r7]
 8001f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f4c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f54:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 8001f64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f68:	edd7 7a00 	vldr	s15, [r7]
 8001f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f70:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	4b43      	ldr	r3, [pc, #268]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	4b41      	ldr	r3, [pc, #260]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8001f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f8c:	edd7 7a00 	vldr	s15, [r7]
 8001f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f94:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8001f9e:	edd3 7a00 	vldr	s15, [r3]
 8001fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8001fac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fb0:	edd7 7a00 	vldr	s15, [r7]
 8001fb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc0:	4b33      	ldr	r3, [pc, #204]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8001fcc:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8001fd2:	ed93 7a00 	vldr	s14, [r3]
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 8001fe2:	edd3 6a00 	vldr	s13, [r3]
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8001ff6:	edd3 6a00 	vldr	s13, [r3]
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002004:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 800200a:	edd3 6a00 	vldr	s13, [r3]
 800200e:	4b20      	ldr	r3, [pc, #128]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201c:	eeb0 0a67 	vmov.f32	s0, s15
 8002020:	f000 fb6c 	bl	80026fc <invSqrt>
 8002024:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 800202a:	ed93 7a00 	vldr	s14, [r3]
 800202e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002036:	4b13      	ldr	r3, [pc, #76]	; (8002084 <MadgwickAHRSupdate+0xe40>)
 8002038:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MadgwickAHRSupdate+0xe44>)
 800204c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MadgwickAHRSupdate+0xe48>)
 8002060:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800206e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <MadgwickAHRSupdate+0xe4c>)
 8002074:	edc3 7a00 	vstr	s15, [r3]
}
 8002078:	37b8      	adds	r7, #184	; 0xb8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000000 	.word	0x20000000
 8002084:	20000024 	.word	0x20000024
 8002088:	200002e0 	.word	0x200002e0
 800208c:	200002e4 	.word	0x200002e4
 8002090:	200002e8 	.word	0x200002e8

08002094 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sample_freq) {
 8002094:	b580      	push	{r7, lr}
 8002096:	b09e      	sub	sp, #120	; 0x78
 8002098:	af00      	add	r7, sp, #0
 800209a:	ed87 0a07 	vstr	s0, [r7, #28]
 800209e:	edc7 0a06 	vstr	s1, [r7, #24]
 80020a2:	ed87 1a05 	vstr	s2, [r7, #20]
 80020a6:	edc7 1a04 	vstr	s3, [r7, #16]
 80020aa:	ed87 2a03 	vstr	s4, [r7, #12]
 80020ae:	edc7 2a02 	vstr	s5, [r7, #8]
 80020b2:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80020b6:	4bec      	ldr	r3, [pc, #944]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb1 7a67 	vneg.f32	s14, s15
 80020c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	4be8      	ldr	r3, [pc, #928]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80020ca:	edd3 6a00 	vldr	s13, [r3]
 80020ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020da:	4be5      	ldr	r3, [pc, #916]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80020f8:	4bde      	ldr	r3, [pc, #888]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80020fa:	ed93 7a00 	vldr	s14, [r3]
 80020fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002106:	4bd9      	ldr	r3, [pc, #868]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002108:	edd3 6a00 	vldr	s13, [r3]
 800210c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002118:	4bd5      	ldr	r3, [pc, #852]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800212e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002132:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002136:	4bcf      	ldr	r3, [pc, #828]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002138:	ed93 7a00 	vldr	s14, [r3]
 800213c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002144:	4bc8      	ldr	r3, [pc, #800]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	edd7 7a05 	vldr	s15, [r7, #20]
 800214e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002156:	4bc6      	ldr	r3, [pc, #792]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002158:	edd3 6a00 	vldr	s13, [r3]
 800215c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800216c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002170:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002174:	4bbf      	ldr	r3, [pc, #764]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	edd7 7a05 	vldr	s15, [r7, #20]
 800217e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002182:	4bb9      	ldr	r3, [pc, #740]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002184:	edd3 6a00 	vldr	s13, [r3]
 8002188:	edd7 7a06 	vldr	s15, [r7, #24]
 800218c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002190:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002194:	4bb5      	ldr	r3, [pc, #724]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002196:	edd3 6a00 	vldr	s13, [r3]
 800219a:	edd7 7a07 	vldr	s15, [r7, #28]
 800219e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ae:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80021b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d10e      	bne.n	80021de <MadgwickAHRSupdateIMU+0x14a>
 80021c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	d107      	bne.n	80021de <MadgwickAHRSupdateIMU+0x14a>
 80021ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	f000 81e5 	beq.w	80025a8 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80021de:	edd7 7a04 	vldr	s15, [r7, #16]
 80021e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002202:	f000 fa7b 	bl	80026fc <invSqrt>
 8002206:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 800220a:	ed97 7a04 	vldr	s14, [r7, #16]
 800220e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 800221a:	ed97 7a03 	vldr	s14, [r7, #12]
 800221e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002226:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;   
 800222a:	ed97 7a02 	vldr	s14, [r7, #8]
 800222e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800223a:	4b8e      	ldr	r3, [pc, #568]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002244:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8002248:	4b87      	ldr	r3, [pc, #540]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002252:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 8002256:	4b85      	ldr	r3, [pc, #532]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002260:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8002264:	4b82      	ldr	r3, [pc, #520]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800226e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8002272:	4b80      	ldr	r3, [pc, #512]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800227c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002280:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8002296:	4b75      	ldr	r3, [pc, #468]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 80022a8:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 80022ba:	4b6c      	ldr	r3, [pc, #432]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 80022cc:	4b69      	ldr	r3, [pc, #420]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	4b68      	ldr	r3, [pc, #416]	; (8002474 <MadgwickAHRSupdateIMU+0x3e0>)
 80022d4:	edd3 7a00 	vldr	s15, [r3]
 80022d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022dc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 80022e0:	4b61      	ldr	r3, [pc, #388]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	4b60      	ldr	r3, [pc, #384]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 80022f4:	4b5d      	ldr	r3, [pc, #372]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022f6:	ed93 7a00 	vldr	s14, [r3]
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002304:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	4b58      	ldr	r3, [pc, #352]	; (8002470 <MadgwickAHRSupdateIMU+0x3dc>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800231c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002320:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002324:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002328:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800232c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002338:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800233c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002348:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800234c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800235c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002360:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002368:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800236c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002378:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800237c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002380:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <MadgwickAHRSupdateIMU+0x3d4>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002392:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002396:	edd7 7a03 	vldr	s15, [r7, #12]
 800239a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80023a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023aa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80023ae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80023b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ba:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80023be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ca:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80023ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023da:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80023de:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80023e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <MadgwickAHRSupdateIMU+0x3d8>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f4:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80023f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002404:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002408:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800240c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002410:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002414:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002418:	edd7 7a03 	vldr	s15, [r7, #12]
 800241c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002424:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002430:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002440:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002450:	edd7 7a02 	vldr	s15, [r7, #8]
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002460:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002464:	e008      	b.n	8002478 <MadgwickAHRSupdateIMU+0x3e4>
 8002466:	bf00      	nop
 8002468:	200002e0 	.word	0x200002e0
 800246c:	200002e4 	.word	0x200002e4
 8002470:	200002e8 	.word	0x200002e8
 8002474:	20000024 	.word	0x20000024
 8002478:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800247c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002480:	4b99      	ldr	r3, [pc, #612]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800248a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800248e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002496:	ee37 7a67 	vsub.f32	s14, s14, s15
 800249a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800249e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80024a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80024a6:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b4:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80024b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80024bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80024c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024cc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f000 f900 	bl	80026fc <invSqrt>
 80024fc:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 8002500:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002504:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 8002510:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002514:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 8002520:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002524:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 8002530:	ed97 7a08 	vldr	s14, [r7, #32]
 8002534:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002542:	ed93 7a00 	vldr	s14, [r3]
 8002546:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800254a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002556:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 800255a:	4b64      	ldr	r3, [pc, #400]	; (80026ec <MadgwickAHRSupdateIMU+0x658>)
 800255c:	ed93 7a00 	vldr	s14, [r3]
 8002560:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002570:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 8002574:	4b5d      	ldr	r3, [pc, #372]	; (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <MadgwickAHRSupdateIMU+0x658>)
 8002590:	ed93 7a00 	vldr	s14, [r3]
 8002594:	edd7 7a08 	vldr	s15, [r7, #32]
 8002598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80025a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 80025a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80025b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80025c8:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 80025cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80025dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e0:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80025ec:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 80025f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002600:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002604:	4b3c      	ldr	r3, [pc, #240]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260e:	4b3a      	ldr	r3, [pc, #232]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002610:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8002614:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002618:	edd7 7a01 	vldr	s15, [r7, #4]
 800261c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002620:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002634:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 800264a:	edd3 6a00 	vldr	s13, [r3]
 800264e:	4b29      	ldr	r3, [pc, #164]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265c:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 800265e:	edd3 6a00 	vldr	s13, [r3]
 8002662:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002672:	edd3 6a00 	vldr	s13, [r3]
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	eeb0 0a67 	vmov.f32	s0, s15
 8002688:	f000 f838 	bl	80026fc <invSqrt>
 800268c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 8002690:	4b17      	ldr	r3, [pc, #92]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <MadgwickAHRSupdateIMU+0x65c>)
 80026a0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <MadgwickAHRSupdateIMU+0x660>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 80026ba:	ed93 7a00 	vldr	s14, [r3]
 80026be:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MadgwickAHRSupdateIMU+0x664>)
 80026c8:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80026ce:	ed93 7a00 	vldr	s14, [r3]
 80026d2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026da:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <MadgwickAHRSupdateIMU+0x654>)
 80026dc:	edc3 7a00 	vstr	s15, [r3]
}
 80026e0:	bf00      	nop
 80026e2:	3778      	adds	r7, #120	; 0x78
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200002e8 	.word	0x200002e8
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000024 	.word	0x20000024
 80026f4:	200002e0 	.word	0x200002e0
 80026f8:	200002e4 	.word	0x200002e4

080026fc <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002706:	edd7 7a01 	vldr	s15, [r7, #4]
 800270a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800270e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002712:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	105a      	asrs	r2, r3, #1
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <invSqrt+0x74>)
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002734:	ed97 7a04 	vldr	s14, [r7, #16]
 8002738:	edd7 7a05 	vldr	s15, [r7, #20]
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	edd7 7a04 	vldr	s15, [r7, #16]
 8002744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002748:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800274c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002750:	edd7 7a04 	vldr	s15, [r7, #16]
 8002754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002758:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	ee07 3a90 	vmov	s15, r3
}
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	5f3759df 	.word	0x5f3759df

08002774 <MCP4728_Write_GeneralCall>:
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, data, sizeof(data), HAL_MAX_DELAY);
	return ret;
}

void MCP4728_Write_GeneralCall(I2C_HandleTypeDef *I2CHandler, uint8_t command) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
	uint16_t zeoo = 0x00;
 8002780:	2300      	movs	r3, #0
 8002782:	81fb      	strh	r3, [r7, #14]
	uint16_t sizey = 0x1;
 8002784:	2301      	movs	r3, #1
 8002786:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(I2CHandler, zeoo, &command, sizey, HAL_MAX_DELAY);
 8002788:	89bb      	ldrh	r3, [r7, #12]
 800278a:	1cfa      	adds	r2, r7, #3
 800278c:	89f9      	ldrh	r1, [r7, #14]
 800278e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002792:	9000      	str	r0, [sp, #0]
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f003 fa0f 	bl	8005bb8 <HAL_I2C_Master_Transmit>

}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <MCP4728_Write_AllChannels_Diff>:
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Write_AllChannels_Diff(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08a      	sub	sp, #40	; 0x28
 80027a6:	af02      	add	r7, sp, #8
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	4638      	mov	r0, r7
 80027ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf[8];
	for(uint8_t i = 0; i < 4; i++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e024      	b.n	8002800 <MCP4728_Write_AllChannels_Diff+0x5e>
		uint8_t lowByte = output.channel_Val[i] & 0xff;
 80027b6:	7ffb      	ldrb	r3, [r7, #31]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	3320      	adds	r3, #32
 80027bc:	443b      	add	r3, r7
 80027be:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80027c2:	77bb      	strb	r3, [r7, #30]
		uint8_t highByte = (output.channel_Val[i] >> 8);
 80027c4:	7ffb      	ldrb	r3, [r7, #31]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	3320      	adds	r3, #32
 80027ca:	443b      	add	r3, r7
 80027cc:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	777b      	strb	r3, [r7, #29]
		buf[i*2] =  0x0f&highByte;
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	7f7a      	ldrb	r2, [r7, #29]
 80027dc:	f002 020f 	and.w	r2, r2, #15
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	3320      	adds	r3, #32
 80027e4:	443b      	add	r3, r7
 80027e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)+1] = lowByte;
 80027ea:	7ffb      	ldrb	r3, [r7, #31]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	3301      	adds	r3, #1
 80027f0:	3320      	adds	r3, #32
 80027f2:	443b      	add	r3, r7
 80027f4:	7fba      	ldrb	r2, [r7, #30]
 80027f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
 80027fc:	3301      	adds	r3, #1
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	7ffb      	ldrb	r3, [r7, #31]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d9d7      	bls.n	80027b6 <MCP4728_Write_AllChannels_Diff+0x14>
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8002806:	f107 0214 	add.w	r2, r7, #20
 800280a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2308      	movs	r3, #8
 8002812:	21c8      	movs	r1, #200	; 0xc8
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f003 f9cf 	bl	8005bb8 <HAL_I2C_Master_Transmit>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 800281a:	2108      	movs	r1, #8
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff ffa9 	bl	8002774 <MCP4728_Write_GeneralCall>
}
 8002822:	bf00      	nop
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <MCP4728_Init>:
	buf[2] = lowByte;
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Init(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 800282a:	b580      	push	{r7, lr}
 800282c:	b08a      	sub	sp, #40	; 0x28
 800282e:	af02      	add	r7, sp, #8
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	4638      	mov	r0, r7
 8002834:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_RESET);
 8002838:	2106      	movs	r1, #6
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff ff9a 	bl	8002774 <MCP4728_Write_GeneralCall>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_WAKEUP);
 8002840:	2109      	movs	r1, #9
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f7ff ff96 	bl	8002774 <MCP4728_Write_GeneralCall>
	//MCP4728_Write_GeneralCall(I2CHandler, 0x0C);

	uint8_t buf[9];
	buf[0] = MCP4728_CMD_DACWRITE_SEQ;
 8002848:	2350      	movs	r3, #80	; 0x50
 800284a:	753b      	strb	r3, [r7, #20]
	for(uint8_t i = 1; i <= 4; i++){
 800284c:	2301      	movs	r3, #1
 800284e:	77fb      	strb	r3, [r7, #31]
 8002850:	e015      	b.n	800287e <MCP4728_Init+0x54>
		buf[(i*2)+1] = 0x00;
 8002852:	7ffb      	ldrb	r3, [r7, #31]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	3301      	adds	r3, #1
 8002858:	3320      	adds	r3, #32
 800285a:	443b      	add	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)] = (0 << 7) | ((i-1)<<4) | 0x0;
 8002862:	7ffb      	ldrb	r3, [r7, #31]
 8002864:	3b01      	subs	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	7ffb      	ldrb	r3, [r7, #31]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	3320      	adds	r3, #32
 8002872:	443b      	add	r3, r7
 8002874:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 1; i <= 4; i++){
 8002878:	7ffb      	ldrb	r3, [r7, #31]
 800287a:	3301      	adds	r3, #1
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	7ffb      	ldrb	r3, [r7, #31]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d9e6      	bls.n	8002852 <MCP4728_Init+0x28>
	}

	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8002884:	f107 0214 	add.w	r2, r7, #20
 8002888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2309      	movs	r3, #9
 8002890:	21c8      	movs	r1, #200	; 0xc8
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f003 f990 	bl	8005bb8 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(I2CHandler, 0xC8, buf, sizeof(buf), HAL_MAX_DELAY);
	//C0, C2, C4, C6, C8, CA, CC, CE
	//60, 61, 62, 63, 64, 65, 66, 67
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 8002898:	2108      	movs	r1, #8
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7ff ff6a 	bl	8002774 <MCP4728_Write_GeneralCall>
}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	461a      	mov	r2, r3
 80028b4:	460b      	mov	r3, r1
 80028b6:	72fb      	strb	r3, [r7, #11]
 80028b8:	4613      	mov	r3, r2
 80028ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685c      	ldr	r4, [r3, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	68d8      	ldr	r0, [r3, #12]
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	7af9      	ldrb	r1, [r7, #11]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	47a0      	blx	r4
 80028cc:	6178      	str	r0, [r7, #20]

  return ret;
 80028ce:	697b      	ldr	r3, [r7, #20]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd90      	pop	{r4, r7, pc}

080028d8 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	72fb      	strb	r3, [r7, #11]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681c      	ldr	r4, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68d8      	ldr	r0, [r3, #12]
 80028f4:	893b      	ldrh	r3, [r7, #8]
 80028f6:	7af9      	ldrb	r1, [r7, #11]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	47a0      	blx	r4
 80028fc:	6178      	str	r0, [r7, #20]

  return ret;
 80028fe:	697b      	ldr	r3, [r7, #20]
}
 8002900:	4618      	mov	r0, r3
 8002902:	371c      	adds	r7, #28
 8002904:	46bd      	mov	sp, r7
 8002906:	bd90      	pop	{r4, r7, pc}

08002908 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 8002912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002934 <lsm9ds1_from_fs4g_to_mg+0x2c>
 8002922:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002926:	eeb0 0a67 	vmov.f32	s0, s15
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	3df9db23 	.word	0x3df9db23

08002938 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002946:	ee07 3a90 	vmov	s15, r3
 800294a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800294e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002964 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 8002952:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002956:	eeb0 0a67 	vmov.f32	s0, s15
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	428c0000 	.word	0x428c0000

08002968 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 8002972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002994 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8002982:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002986:	eeb0 0a67 	vmov.f32	s0, s15
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	3f147ae1 	.word	0x3f147ae1

08002998 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80029a4:	f107 0208 	add.w	r2, r7, #8
 80029a8:	2301      	movs	r3, #1
 80029aa:	2110      	movs	r1, #16
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff7b 	bl	80028a8 <lsm9ds1_read_reg>
 80029b2:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	7a3b      	ldrb	r3, [r7, #8]
 80029c4:	f362 03c4 	bfi	r3, r2, #3, #2
 80029c8:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80029ca:	f107 0208 	add.w	r2, r7, #8
 80029ce:	2301      	movs	r3, #1
 80029d0:	2110      	movs	r1, #16
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff80 	bl	80028d8 <lsm9ds1_write_reg>
 80029d8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80029f0:	f107 0210 	add.w	r2, r7, #16
 80029f4:	2301      	movs	r3, #1
 80029f6:	2110      	movs	r1, #16
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff ff55 	bl	80028a8 <lsm9ds1_read_reg>
 80029fe:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	7c3b      	ldrb	r3, [r7, #16]
 8002a10:	f362 1347 	bfi	r3, r2, #5, #3
 8002a14:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002a16:	f107 0210 	add.w	r2, r7, #16
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	2110      	movs	r1, #16
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ff5a 	bl	80028d8 <lsm9ds1_write_reg>
 8002a24:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002a2c:	f107 020c 	add.w	r2, r7, #12
 8002a30:	2301      	movs	r3, #1
 8002a32:	2120      	movs	r1, #32
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff37 	bl	80028a8 <lsm9ds1_read_reg>
 8002a3a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d110      	bne.n	8002a64 <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	7b3b      	ldrb	r3, [r7, #12]
 8002a4e:	f362 1347 	bfi	r3, r2, #5, #3
 8002a52:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002a54:	f107 020c 	add.w	r2, r7, #12
 8002a58:	2301      	movs	r3, #1
 8002a5a:	2120      	movs	r1, #32
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff3b 	bl	80028d8 <lsm9ds1_write_reg>
 8002a62:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002a6a:	f107 0208 	add.w	r2, r7, #8
 8002a6e:	2301      	movs	r3, #1
 8002a70:	2112      	movs	r1, #18
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ff18 	bl	80028a8 <lsm9ds1_read_reg>
 8002a78:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d111      	bne.n	8002aa4 <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 8002a80:	78fb      	ldrb	r3, [r7, #3]
 8002a82:	09db      	lsrs	r3, r3, #7
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	7a3b      	ldrb	r3, [r7, #8]
 8002a8e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002a92:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002a94:	f107 0208 	add.w	r2, r7, #8
 8002a98:	2301      	movs	r3, #1
 8002a9a:	2112      	movs	r1, #18
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff1b 	bl	80028d8 <lsm9ds1_write_reg>
 8002aa2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8002aa4:	697b      	ldr	r3, [r7, #20]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002aba:	f107 0208 	add.w	r2, r7, #8
 8002abe:	2301      	movs	r3, #1
 8002ac0:	2120      	movs	r1, #32
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fef0 	bl	80028a8 <lsm9ds1_read_reg>
 8002ac8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10f      	bne.n	8002af0 <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	7a3b      	ldrb	r3, [r7, #8]
 8002ada:	f362 03c4 	bfi	r3, r2, #3, #2
 8002ade:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002ae0:	f107 0208 	add.w	r2, r7, #8
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fef5 	bl	80028d8 <lsm9ds1_write_reg>
 8002aee:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8002af0:	68fb      	ldr	r3, [r7, #12]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b088      	sub	sp, #32
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002b08:	f107 0218 	add.w	r2, r7, #24
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	2122      	movs	r1, #34	; 0x22
 8002b10:	68b8      	ldr	r0, [r7, #8]
 8002b12:	f7ff fec9 	bl	80028a8 <lsm9ds1_read_reg>
 8002b16:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10f      	bne.n	8002b3e <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	7e3b      	ldrb	r3, [r7, #24]
 8002b28:	f362 1386 	bfi	r3, r2, #6, #1
 8002b2c:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002b2e:	f107 0218 	add.w	r2, r7, #24
 8002b32:	2301      	movs	r3, #1
 8002b34:	2122      	movs	r1, #34	; 0x22
 8002b36:	68b8      	ldr	r0, [r7, #8]
 8002b38:	f7ff fece 	bl	80028d8 <lsm9ds1_write_reg>
 8002b3c:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8002b44:	f107 0214 	add.w	r2, r7, #20
 8002b48:	2301      	movs	r3, #1
 8002b4a:	2124      	movs	r1, #36	; 0x24
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff feab 	bl	80028a8 <lsm9ds1_read_reg>
 8002b52:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d119      	bne.n	8002b8e <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	7d3b      	ldrb	r3, [r7, #20]
 8002b68:	f362 13c7 	bfi	r3, r2, #7, #1
 8002b6c:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	7d3b      	ldrb	r3, [r7, #20]
 8002b78:	f362 1386 	bfi	r3, r2, #6, #1
 8002b7c:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8002b7e:	f107 0214 	add.w	r2, r7, #20
 8002b82:	2301      	movs	r3, #1
 8002b84:	2124      	movs	r1, #36	; 0x24
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff fea6 	bl	80028d8 <lsm9ds1_write_reg>
 8002b8c:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3720      	adds	r7, #32
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002ba4:	f107 0210 	add.w	r2, r7, #16
 8002ba8:	2301      	movs	r3, #1
 8002baa:	2120      	movs	r1, #32
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fe7b 	bl	80028a8 <lsm9ds1_read_reg>
 8002bb2:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d125      	bne.n	8002c06 <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	08db      	lsrs	r3, r3, #3
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	7c3b      	ldrb	r3, [r7, #16]
 8002bc6:	f362 0341 	bfi	r3, r2, #1, #1
 8002bca:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	7c3b      	ldrb	r3, [r7, #16]
 8002bd6:	f362 0384 	bfi	r3, r2, #2, #3
 8002bda:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	7c3b      	ldrb	r3, [r7, #16]
 8002be8:	f362 1346 	bfi	r3, r2, #5, #2
 8002bec:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 8002bee:	7c3b      	ldrb	r3, [r7, #16]
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf4:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002bf6:	f107 0210 	add.w	r2, r7, #16
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff fe6a 	bl	80028d8 <lsm9ds1_write_reg>
 8002c04:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8002c0c:	f107 020c 	add.w	r2, r7, #12
 8002c10:	2301      	movs	r3, #1
 8002c12:	2122      	movs	r1, #34	; 0x22
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fe47 	bl	80028a8 <lsm9ds1_read_reg>
 8002c1a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d111      	bne.n	8002c46 <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	099b      	lsrs	r3, r3, #6
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	7b3b      	ldrb	r3, [r7, #12]
 8002c30:	f362 0301 	bfi	r3, r2, #0, #2
 8002c34:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8002c36:	f107 020c 	add.w	r2, r7, #12
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	2122      	movs	r1, #34	; 0x22
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fe4a 	bl	80028d8 <lsm9ds1_write_reg>
 8002c44:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d107      	bne.n	8002c5c <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8002c4c:	f107 0208 	add.w	r2, r7, #8
 8002c50:	2301      	movs	r3, #1
 8002c52:	2123      	movs	r1, #35	; 0x23
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fe27 	bl	80028a8 <lsm9ds1_read_reg>
 8002c5a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d110      	bne.n	8002c84 <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	091b      	lsrs	r3, r3, #4
 8002c66:	f003 0303 	and.w	r3, r3, #3
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	7a3b      	ldrb	r3, [r7, #8]
 8002c6e:	f362 0383 	bfi	r3, r2, #2, #2
 8002c72:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8002c74:	f107 0208 	add.w	r2, r7, #8
 8002c78:	2301      	movs	r3, #1
 8002c7a:	2123      	movs	r1, #35	; 0x23
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fe2b 	bl	80028d8 <lsm9ds1_write_reg>
 8002c82:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 8002c84:	697b      	ldr	r3, [r7, #20]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b084      	sub	sp, #16
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8002c9a:	f107 0208 	add.w	r2, r7, #8
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	2121      	movs	r1, #33	; 0x21
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fe00 	bl	80028a8 <lsm9ds1_read_reg>
 8002ca8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10f      	bne.n	8002cd0 <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	7a3b      	ldrb	r3, [r7, #8]
 8002cba:	f362 1346 	bfi	r3, r2, #5, #2
 8002cbe:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8002cc0:	f107 0208 	add.w	r2, r7, #8
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	2121      	movs	r1, #33	; 0x21
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fe05 	bl	80028d8 <lsm9ds1_write_reg>
 8002cce:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8002ce4:	f107 020c 	add.w	r2, r7, #12
 8002ce8:	2306      	movs	r3, #6
 8002cea:	2118      	movs	r1, #24
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff fddb 	bl	80028a8 <lsm9ds1_read_reg>
 8002cf2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	b21a      	sxth	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	7b3b      	ldrb	r3, [r7, #12]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	b21a      	sxth	r2, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	b212      	sxth	r2, r2
 8002d1e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	3302      	adds	r3, #2
 8002d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	021b      	lsls	r3, r3, #8
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	7bbb      	ldrb	r3, [r7, #14]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	b212      	sxth	r2, r2
 8002d3c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002d3e:	7c7a      	ldrb	r2, [r7, #17]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	3304      	adds	r3, #4
 8002d44:	b212      	sxth	r2, r2
 8002d46:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	7c3b      	ldrb	r3, [r7, #16]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	3304      	adds	r3, #4
 8002d62:	b212      	sxth	r2, r2
 8002d64:	801a      	strh	r2, [r3, #0]

  return ret;
 8002d66:	697b      	ldr	r3, [r7, #20]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 8002d7a:	f107 020c 	add.w	r2, r7, #12
 8002d7e:	2306      	movs	r3, #6
 8002d80:	2128      	movs	r1, #40	; 0x28
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff fd90 	bl	80028a8 <lsm9ds1_read_reg>
 8002d88:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002d8a:	7b7b      	ldrb	r3, [r7, #13]
 8002d8c:	b21a      	sxth	r2, r3
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	021b      	lsls	r3, r3, #8
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	7b3b      	ldrb	r3, [r7, #12]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	b21a      	sxth	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	3302      	adds	r3, #2
 8002db2:	b212      	sxth	r2, r2
 8002db4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	3302      	adds	r3, #2
 8002dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	3302      	adds	r3, #2
 8002dd0:	b212      	sxth	r2, r2
 8002dd2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002dd4:	7c7a      	ldrb	r2, [r7, #17]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	b212      	sxth	r2, r2
 8002ddc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	3304      	adds	r3, #4
 8002de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	7c3b      	ldrb	r3, [r7, #16]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	3304      	adds	r3, #4
 8002df8:	b212      	sxth	r2, r2
 8002dfa:	801a      	strh	r2, [r3, #0]

  return ret;
 8002dfc:	697b      	ldr	r3, [r7, #20]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 8002e10:	f107 020c 	add.w	r2, r7, #12
 8002e14:	2306      	movs	r3, #6
 8002e16:	2128      	movs	r1, #40	; 0x28
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fd45 	bl	80028a8 <lsm9ds1_read_reg>
 8002e1e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002e20:	7b7b      	ldrb	r3, [r7, #13]
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	7b3b      	ldrb	r3, [r7, #12]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	b21a      	sxth	r2, r3
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	3302      	adds	r3, #2
 8002e48:	b212      	sxth	r2, r2
 8002e4a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	3302      	adds	r3, #2
 8002e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	7bbb      	ldrb	r3, [r7, #14]
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	3302      	adds	r3, #2
 8002e66:	b212      	sxth	r2, r2
 8002e68:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002e6a:	7c7a      	ldrb	r2, [r7, #17]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	b212      	sxth	r2, r2
 8002e72:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	3304      	adds	r3, #4
 8002e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	7c3b      	ldrb	r3, [r7, #16]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	b212      	sxth	r2, r2
 8002e90:	801a      	strh	r2, [r3, #0]

  return ret;
 8002e92:	697b      	ldr	r3, [r7, #20]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	2301      	movs	r3, #1
 8002eac:	210f      	movs	r1, #15
 8002eae:	68b8      	ldr	r0, [r7, #8]
 8002eb0:	f7ff fcfa 	bl	80028a8 <lsm9ds1_read_reg>
 8002eb4:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	210f      	movs	r1, #15
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fcef 	bl	80028a8 <lsm9ds1_read_reg>
 8002eca:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8002ecc:	697b      	ldr	r3, [r7, #20]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	2117      	movs	r1, #23
 8002eea:	68b8      	ldr	r0, [r7, #8]
 8002eec:	f7ff fcdc 	bl	80028a8 <lsm9ds1_read_reg>
 8002ef0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8002ef8:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8002efa:	2301      	movs	r3, #1
 8002efc:	2127      	movs	r1, #39	; 0x27
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff fcd2 	bl	80028a8 <lsm9ds1_read_reg>
 8002f04:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002f06:	697b      	ldr	r3, [r7, #20]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b088      	sub	sp, #32
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002f1e:	f107 0214 	add.w	r2, r7, #20
 8002f22:	2301      	movs	r3, #1
 8002f24:	2122      	movs	r1, #34	; 0x22
 8002f26:	68b8      	ldr	r0, [r7, #8]
 8002f28:	f7ff fcbe 	bl	80028a8 <lsm9ds1_read_reg>
 8002f2c:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10f      	bne.n	8002f54 <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	7d3b      	ldrb	r3, [r7, #20]
 8002f3e:	f362 0300 	bfi	r3, r2, #0, #1
 8002f42:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002f44:	f107 0214 	add.w	r2, r7, #20
 8002f48:	2301      	movs	r3, #1
 8002f4a:	2122      	movs	r1, #34	; 0x22
 8002f4c:	68b8      	ldr	r0, [r7, #8]
 8002f4e:	f7ff fcc3 	bl	80028d8 <lsm9ds1_write_reg>
 8002f52:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d107      	bne.n	8002f6a <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002f5a:	f107 0218 	add.w	r2, r7, #24
 8002f5e:	2301      	movs	r3, #1
 8002f60:	2121      	movs	r1, #33	; 0x21
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fca0 	bl	80028a8 <lsm9ds1_read_reg>
 8002f68:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10f      	bne.n	8002f90 <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	7e3b      	ldrb	r3, [r7, #24]
 8002f7a:	f362 0382 	bfi	r3, r2, #2, #1
 8002f7e:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002f80:	f107 0218 	add.w	r2, r7, #24
 8002f84:	2301      	movs	r3, #1
 8002f86:	2121      	movs	r1, #33	; 0x21
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff fca5 	bl	80028d8 <lsm9ds1_write_reg>
 8002f8e:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002f90:	69fb      	ldr	r3, [r7, #28]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b088      	sub	sp, #32
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002fa6:	f107 0214 	add.w	r2, r7, #20
 8002faa:	2301      	movs	r3, #1
 8002fac:	2122      	movs	r1, #34	; 0x22
 8002fae:	68b8      	ldr	r0, [r7, #8]
 8002fb0:	f7ff fc7a 	bl	80028a8 <lsm9ds1_read_reg>
 8002fb4:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d114      	bne.n	8002fe6 <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002fbc:	f107 0218 	add.w	r2, r7, #24
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	2121      	movs	r1, #33	; 0x21
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fc6f 	bl	80028a8 <lsm9ds1_read_reg>
 8002fca:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8002fcc:	7e3b      	ldrb	r3, [r7, #24]
 8002fce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	7d3b      	ldrb	r3, [r7, #20]
 8002fd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3720      	adds	r7, #32
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002ffc:	f107 0208 	add.w	r2, r7, #8
 8003000:	2301      	movs	r3, #1
 8003002:	2110      	movs	r1, #16
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fc4f 	bl	80028a8 <lsm9ds1_read_reg>
 800300a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10f      	bne.n	8003032 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	b2da      	uxtb	r2, r3
 800301a:	7a3b      	ldrb	r3, [r7, #8]
 800301c:	f362 0301 	bfi	r3, r2, #0, #2
 8003020:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8003022:	f107 0208 	add.w	r2, r7, #8
 8003026:	2301      	movs	r3, #1
 8003028:	2110      	movs	r1, #16
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fc54 	bl	80028d8 <lsm9ds1_write_reg>
 8003030:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8003048:	f107 0210 	add.w	r2, r7, #16
 800304c:	2301      	movs	r3, #1
 800304e:	2111      	movs	r1, #17
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff fc29 	bl	80028a8 <lsm9ds1_read_reg>
 8003056:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10f      	bne.n	800307e <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	b2da      	uxtb	r2, r3
 8003066:	7c3b      	ldrb	r3, [r7, #16]
 8003068:	f362 0301 	bfi	r3, r2, #0, #2
 800306c:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 800306e:	f107 0210 	add.w	r2, r7, #16
 8003072:	2301      	movs	r3, #1
 8003074:	2111      	movs	r1, #17
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fc2e 	bl	80028d8 <lsm9ds1_write_reg>
 800307c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d107      	bne.n	8003094 <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8003084:	f107 020c 	add.w	r2, r7, #12
 8003088:	2301      	movs	r3, #1
 800308a:	2112      	movs	r1, #18
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fc0b 	bl	80028a8 <lsm9ds1_read_reg>
 8003092:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d110      	bne.n	80030bc <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	7b3b      	ldrb	r3, [r7, #12]
 80030a6:	f362 1386 	bfi	r3, r2, #6, #1
 80030aa:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80030ac:	f107 020c 	add.w	r2, r7, #12
 80030b0:	2301      	movs	r3, #1
 80030b2:	2112      	movs	r1, #18
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff fc0f 	bl	80028d8 <lsm9ds1_write_reg>
 80030ba:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 80030bc:	697b      	ldr	r3, [r7, #20]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80030d2:	f107 0208 	add.w	r2, r7, #8
 80030d6:	2301      	movs	r3, #1
 80030d8:	2112      	movs	r1, #18
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fbe4 	bl	80028a8 <lsm9ds1_read_reg>
 80030e0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10f      	bne.n	8003108 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 80030e8:	78fb      	ldrb	r3, [r7, #3]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	7a3b      	ldrb	r3, [r7, #8]
 80030f2:	f362 0303 	bfi	r3, r2, #0, #4
 80030f6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80030f8:	f107 0208 	add.w	r2, r7, #8
 80030fc:	2301      	movs	r3, #1
 80030fe:	2112      	movs	r1, #18
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fbe9 	bl	80028d8 <lsm9ds1_write_reg>
 8003106:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8003108:	68fb      	ldr	r3, [r7, #12]
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800311e:	f107 0208 	add.w	r2, r7, #8
 8003122:	2301      	movs	r3, #1
 8003124:	2120      	movs	r1, #32
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fbbe 	bl	80028a8 <lsm9ds1_read_reg>
 800312c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d118      	bne.n	8003166 <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	b2da      	uxtb	r2, r3
 800313c:	7a3b      	ldrb	r3, [r7, #8]
 800313e:	f362 0301 	bfi	r3, r2, #0, #2
 8003142:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	091b      	lsrs	r3, r3, #4
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	7a3b      	ldrb	r3, [r7, #8]
 8003150:	f362 0382 	bfi	r3, r2, #2, #1
 8003154:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8003156:	f107 0208 	add.w	r2, r7, #8
 800315a:	2301      	movs	r3, #1
 800315c:	2120      	movs	r1, #32
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff fbba 	bl	80028d8 <lsm9ds1_write_reg>
 8003164:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 800317c:	f107 0208 	add.w	r2, r7, #8
 8003180:	2301      	movs	r3, #1
 8003182:	2121      	movs	r1, #33	; 0x21
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fb8f 	bl	80028a8 <lsm9ds1_read_reg>
 800318a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	b2da      	uxtb	r2, r3
 800319a:	7a3b      	ldrb	r3, [r7, #8]
 800319c:	f362 0382 	bfi	r3, r2, #2, #1
 80031a0:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80031a2:	f107 0208 	add.w	r2, r7, #8
 80031a6:	2301      	movs	r3, #1
 80031a8:	2121      	movs	r1, #33	; 0x21
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff fb94 	bl	80028d8 <lsm9ds1_write_reg>
 80031b0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 80031b2:	68fb      	ldr	r3, [r7, #12]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 80031c8:	f107 0208 	add.w	r2, r7, #8
 80031cc:	2301      	movs	r3, #1
 80031ce:	2121      	movs	r1, #33	; 0x21
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff fb69 	bl	80028a8 <lsm9ds1_read_reg>
 80031d6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d118      	bne.n	8003210 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	7a3b      	ldrb	r3, [r7, #8]
 80031ea:	f362 13c7 	bfi	r3, r2, #7, #1
 80031ee:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	7a3b      	ldrb	r3, [r7, #8]
 80031fa:	f362 1346 	bfi	r3, r2, #5, #2
 80031fe:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8003200:	f107 0208 	add.w	r2, r7, #8
 8003204:	2301      	movs	r3, #1
 8003206:	2121      	movs	r1, #33	; 0x21
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff fb65 	bl	80028d8 <lsm9ds1_write_reg>
 800320e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8003210:	68fb      	ldr	r3, [r7, #12]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <ADC_ADVREGEN>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void ADC_ADVREGEN(ADC_TypeDef* adc) {
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
	adc->CR &= ~ADC_CR_ADVREGEN;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]
	adc->CR |= 0x1UL << ADC_CR_ADVREGEN_Pos;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <ADC_Read>:

static void ADC_Read(void) {
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
//	ADC1_val = ADC_GetVal(ADC1);
//	ADC2_val = ADC_GetVal(ADC2);
//	ADC3_val = ADC_GetVal(ADC3);
//	ADC4_val = ADC_GetVal(ADC4);
	ADC_vals[0] = ADC_GetVal(ADC1);
 800324c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003250:	f000 f858 	bl	8003304 <ADC_GetVal>
 8003254:	4603      	mov	r3, r0
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <ADC_Read+0x3c>)
 8003258:	6013      	str	r3, [r2, #0]
	ADC_vals[1] = ADC_GetVal(ADC2);
 800325a:	480b      	ldr	r0, [pc, #44]	; (8003288 <ADC_Read+0x40>)
 800325c:	f000 f852 	bl	8003304 <ADC_GetVal>
 8003260:	4603      	mov	r3, r0
 8003262:	4a08      	ldr	r2, [pc, #32]	; (8003284 <ADC_Read+0x3c>)
 8003264:	6053      	str	r3, [r2, #4]
	ADC_vals[2] = ADC_GetVal(ADC3);
 8003266:	4809      	ldr	r0, [pc, #36]	; (800328c <ADC_Read+0x44>)
 8003268:	f000 f84c 	bl	8003304 <ADC_GetVal>
 800326c:	4603      	mov	r3, r0
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <ADC_Read+0x3c>)
 8003270:	6093      	str	r3, [r2, #8]
	ADC_vals[3] = ADC_GetVal(ADC4);
 8003272:	4807      	ldr	r0, [pc, #28]	; (8003290 <ADC_Read+0x48>)
 8003274:	f000 f846 	bl	8003304 <ADC_GetVal>
 8003278:	4603      	mov	r3, r0
 800327a:	4a02      	ldr	r2, [pc, #8]	; (8003284 <ADC_Read+0x3c>)
 800327c:	60d3      	str	r3, [r2, #12]
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000328 	.word	0x20000328
 8003288:	50000100 	.word	0x50000100
 800328c:	50000400 	.word	0x50000400
 8003290:	50000500 	.word	0x50000500

08003294 <ADC_Calibrate>:

static void ADC_Calibrate(ADC_TypeDef* adc) {
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a2:	d00b      	beq.n	80032bc <ADC_Calibrate+0x28>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <ADC_Calibrate+0x64>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d007      	beq.n	80032bc <ADC_Calibrate+0x28>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a13      	ldr	r2, [pc, #76]	; (80032fc <ADC_Calibrate+0x68>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d003      	beq.n	80032bc <ADC_Calibrate+0x28>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <ADC_Calibrate+0x6c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d117      	bne.n	80032ec <ADC_Calibrate+0x58>
	  return;
  }

  adc->CR &= ~ADC_CR_ADEN; // Disable ADC
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 0201 	bic.w	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCALDIF; // Calibration for Single-ended input mode
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCAL; // Start ADC calibration
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	609a      	str	r2, [r3, #8]
  while (adc->CR & ADC_CR_ADCAL);
 80032e0:	bf00      	nop
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	dbfb      	blt.n	80032e2 <ADC_Calibrate+0x4e>
 80032ea:	e000      	b.n	80032ee <ADC_Calibrate+0x5a>
	  return;
 80032ec:	bf00      	nop
}
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	50000100 	.word	0x50000100
 80032fc:	50000400 	.word	0x50000400
 8003300:	50000500 	.word	0x50000500

08003304 <ADC_GetVal>:

static int ADC_GetVal(ADC_TypeDef* adc) {
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003312:	d00d      	beq.n	8003330 <ADC_GetVal+0x2c>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <ADC_GetVal+0x3c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d009      	beq.n	8003330 <ADC_GetVal+0x2c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a09      	ldr	r2, [pc, #36]	; (8003344 <ADC_GetVal+0x40>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d005      	beq.n	8003330 <ADC_GetVal+0x2c>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a08      	ldr	r2, [pc, #32]	; (8003348 <ADC_GetVal+0x44>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d001      	beq.n	8003330 <ADC_GetVal+0x2c>
		return 0;
 800332c:	2300      	movs	r3, #0
 800332e:	e001      	b.n	8003334 <ADC_GetVal+0x30>
	}
	return adc->DR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	50000100 	.word	0x50000100
 8003344:	50000400 	.word	0x50000400
 8003348:	50000500 	.word	0x50000500
 800334c:	00000000 	.word	0x00000000

08003350 <IMU_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void IMU_Read(void) {
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8003354:	4aa4      	ldr	r2, [pc, #656]	; (80035e8 <IMU_Read+0x298>)
 8003356:	49a5      	ldr	r1, [pc, #660]	; (80035ec <IMU_Read+0x29c>)
 8003358:	48a5      	ldr	r0, [pc, #660]	; (80035f0 <IMU_Read+0x2a0>)
 800335a:	f7ff fdbc 	bl	8002ed6 <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 800335e:	4ba2      	ldr	r3, [pc, #648]	; (80035e8 <IMU_Read+0x298>)
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 80ef 	beq.w	800354c <IMU_Read+0x1fc>
 800336e:	4b9e      	ldr	r3, [pc, #632]	; (80035e8 <IMU_Read+0x298>)
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80e7 	beq.w	800354c <IMU_Read+0x1fc>
		/* Read accelerometer and gyroscope data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800337e:	2206      	movs	r2, #6
 8003380:	2100      	movs	r1, #0
 8003382:	489c      	ldr	r0, [pc, #624]	; (80035f4 <IMU_Read+0x2a4>)
 8003384:	f004 fea2 	bl	80080cc <memset>
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8003388:	2206      	movs	r2, #6
 800338a:	2100      	movs	r1, #0
 800338c:	489a      	ldr	r0, [pc, #616]	; (80035f8 <IMU_Read+0x2a8>)
 800338e:	f004 fe9d 	bl	80080cc <memset>
		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration);
 8003392:	4998      	ldr	r1, [pc, #608]	; (80035f4 <IMU_Read+0x2a4>)
 8003394:	4895      	ldr	r0, [pc, #596]	; (80035ec <IMU_Read+0x29c>)
 8003396:	f7ff fceb 	bl	8002d70 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate);
 800339a:	4997      	ldr	r1, [pc, #604]	; (80035f8 <IMU_Read+0x2a8>)
 800339c:	4893      	ldr	r0, [pc, #588]	; (80035ec <IMU_Read+0x29c>)
 800339e:	f7ff fc9c 	bl	8002cda <lsm9ds1_angular_rate_raw_get>
		 accel.acceleration.x = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[0]) * 9.807) / 1000;
 80033a2:	4b94      	ldr	r3, [pc, #592]	; (80035f4 <IMU_Read+0x2a4>)
 80033a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff faad 	bl	8002908 <lsm9ds1_from_fs4g_to_mg>
 80033ae:	ee10 3a10 	vmov	r3, s0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f86c 	bl	8000490 <__aeabi_f2d>
 80033b8:	a385      	add	r3, pc, #532	; (adr r3, 80035d0 <IMU_Read+0x280>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f7fd f8bf 	bl	8000540 <__aeabi_dmul>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <IMU_Read+0x2ac>)
 80033d0:	f7fd f9e0 	bl	8000794 <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f7fd fb80 	bl	8000ae0 <__aeabi_d2f>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4a87      	ldr	r2, [pc, #540]	; (8003600 <IMU_Read+0x2b0>)
 80033e4:	6013      	str	r3, [r2, #0]
		 accel.acceleration.y = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]) * 9.807) / 1000;
 80033e6:	4b83      	ldr	r3, [pc, #524]	; (80035f4 <IMU_Read+0x2a4>)
 80033e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fa8b 	bl	8002908 <lsm9ds1_from_fs4g_to_mg>
 80033f2:	ee10 3a10 	vmov	r3, s0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd f84a 	bl	8000490 <__aeabi_f2d>
 80033fc:	a374      	add	r3, pc, #464	; (adr r3, 80035d0 <IMU_Read+0x280>)
 80033fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003402:	f7fd f89d 	bl	8000540 <__aeabi_dmul>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	4610      	mov	r0, r2
 800340c:	4619      	mov	r1, r3
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <IMU_Read+0x2ac>)
 8003414:	f7fd f9be 	bl	8000794 <__aeabi_ddiv>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f7fd fb5e 	bl	8000ae0 <__aeabi_d2f>
 8003424:	4603      	mov	r3, r0
 8003426:	4a76      	ldr	r2, [pc, #472]	; (8003600 <IMU_Read+0x2b0>)
 8003428:	6053      	str	r3, [r2, #4]
		 accel.acceleration.z = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]) * 9.807) / 1000;
 800342a:	4b72      	ldr	r3, [pc, #456]	; (80035f4 <IMU_Read+0x2a4>)
 800342c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fa69 	bl	8002908 <lsm9ds1_from_fs4g_to_mg>
 8003436:	ee10 3a10 	vmov	r3, s0
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f828 	bl	8000490 <__aeabi_f2d>
 8003440:	a363      	add	r3, pc, #396	; (adr r3, 80035d0 <IMU_Read+0x280>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd f87b 	bl	8000540 <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	4b69      	ldr	r3, [pc, #420]	; (80035fc <IMU_Read+0x2ac>)
 8003458:	f7fd f99c 	bl	8000794 <__aeabi_ddiv>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	f7fd fb3c 	bl	8000ae0 <__aeabi_d2f>
 8003468:	4603      	mov	r3, r0
 800346a:	4a65      	ldr	r2, [pc, #404]	; (8003600 <IMU_Read+0x2b0>)
 800346c:	6093      	str	r3, [r2, #8]
		 gyro.gyro.x = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) * 2 * M_PI)/360000;
 800346e:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <IMU_Read+0x2a8>)
 8003470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fa5f 	bl	8002938 <lsm9ds1_from_fs2000dps_to_mdps>
 800347a:	eef0 7a40 	vmov.f32	s15, s0
 800347e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003482:	ee17 0a90 	vmov	r0, s15
 8003486:	f7fd f803 	bl	8000490 <__aeabi_f2d>
 800348a:	a353      	add	r3, pc, #332	; (adr r3, 80035d8 <IMU_Read+0x288>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f7fd f856 	bl	8000540 <__aeabi_dmul>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4610      	mov	r0, r2
 800349a:	4619      	mov	r1, r3
 800349c:	a350      	add	r3, pc, #320	; (adr r3, 80035e0 <IMU_Read+0x290>)
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	f7fd f977 	bl	8000794 <__aeabi_ddiv>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	f7fd fb17 	bl	8000ae0 <__aeabi_d2f>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4a53      	ldr	r2, [pc, #332]	; (8003604 <IMU_Read+0x2b4>)
 80034b6:	6013      	str	r3, [r2, #0]
		 gyro.gyro.y = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) * 2 * M_PI)/360000;
 80034b8:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <IMU_Read+0x2a8>)
 80034ba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fa3a 	bl	8002938 <lsm9ds1_from_fs2000dps_to_mdps>
 80034c4:	eef0 7a40 	vmov.f32	s15, s0
 80034c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034cc:	ee17 0a90 	vmov	r0, s15
 80034d0:	f7fc ffde 	bl	8000490 <__aeabi_f2d>
 80034d4:	a340      	add	r3, pc, #256	; (adr r3, 80035d8 <IMU_Read+0x288>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f7fd f831 	bl	8000540 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	a33e      	add	r3, pc, #248	; (adr r3, 80035e0 <IMU_Read+0x290>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f952 	bl	8000794 <__aeabi_ddiv>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd faf2 	bl	8000ae0 <__aeabi_d2f>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4a41      	ldr	r2, [pc, #260]	; (8003604 <IMU_Read+0x2b4>)
 8003500:	6053      	str	r3, [r2, #4]
		 gyro.gyro.z = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) * 2 * M_PI)/360000;
 8003502:	4b3d      	ldr	r3, [pc, #244]	; (80035f8 <IMU_Read+0x2a8>)
 8003504:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fa15 	bl	8002938 <lsm9ds1_from_fs2000dps_to_mdps>
 800350e:	eef0 7a40 	vmov.f32	s15, s0
 8003512:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003516:	ee17 0a90 	vmov	r0, s15
 800351a:	f7fc ffb9 	bl	8000490 <__aeabi_f2d>
 800351e:	a32e      	add	r3, pc, #184	; (adr r3, 80035d8 <IMU_Read+0x288>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f80c 	bl	8000540 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	a32b      	add	r3, pc, #172	; (adr r3, 80035e0 <IMU_Read+0x290>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f92d 	bl	8000794 <__aeabi_ddiv>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd facd 	bl	8000ae0 <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
 8003548:	4a2e      	ldr	r2, [pc, #184]	; (8003604 <IMU_Read+0x2b4>)
 800354a:	6093      	str	r3, [r2, #8]
//		gyro.gyro.x = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
//		gyro.gyro.y = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
//		gyro.gyro.z = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}

	if (reg.status_mag.zyxda) {
 800354c:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <IMU_Read+0x298>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d035      	beq.n	80035c6 <IMU_Read+0x276>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 800355a:	2206      	movs	r2, #6
 800355c:	2100      	movs	r1, #0
 800355e:	482a      	ldr	r0, [pc, #168]	; (8003608 <IMU_Read+0x2b8>)
 8003560:	f004 fdb4 	bl	80080cc <memset>
		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 8003564:	4928      	ldr	r1, [pc, #160]	; (8003608 <IMU_Read+0x2b8>)
 8003566:	4822      	ldr	r0, [pc, #136]	; (80035f0 <IMU_Read+0x2a0>)
 8003568:	f7ff fc4d 	bl	8002e06 <lsm9ds1_magnetic_raw_get>
		mag.magnetic.x = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[0]) / 10;
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <IMU_Read+0x2b8>)
 800356e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f9f8 	bl	8002968 <lsm9ds1_from_fs16gauss_to_mG>
 8003578:	eeb0 7a40 	vmov.f32	s14, s0
 800357c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003580:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <IMU_Read+0x2bc>)
 8003586:	edc3 7a00 	vstr	s15, [r3]
		mag.magnetic.y = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[1]) / 10;
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <IMU_Read+0x2b8>)
 800358c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff f9e9 	bl	8002968 <lsm9ds1_from_fs16gauss_to_mG>
 8003596:	eeb0 7a40 	vmov.f32	s14, s0
 800359a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800359e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a2:	4b1a      	ldr	r3, [pc, #104]	; (800360c <IMU_Read+0x2bc>)
 80035a4:	edc3 7a01 	vstr	s15, [r3, #4]
		mag.magnetic.z = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[2]) / 10;
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <IMU_Read+0x2b8>)
 80035aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff f9da 	bl	8002968 <lsm9ds1_from_fs16gauss_to_mG>
 80035b4:	eeb0 7a40 	vmov.f32	s14, s0
 80035b8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80035bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <IMU_Read+0x2bc>)
 80035c2:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	f3af 8000 	nop.w
 80035d0:	1a9fbe77 	.word	0x1a9fbe77
 80035d4:	40239d2f 	.word	0x40239d2f
 80035d8:	54442d18 	.word	0x54442d18
 80035dc:	400921fb 	.word	0x400921fb
 80035e0:	00000000 	.word	0x00000000
 80035e4:	4115f900 	.word	0x4115f900
 80035e8:	200000f4 	.word	0x200000f4
 80035ec:	20000338 	.word	0x20000338
 80035f0:	20000348 	.word	0x20000348
 80035f4:	200000d8 	.word	0x200000d8
 80035f8:	200000e0 	.word	0x200000e0
 80035fc:	408f4000 	.word	0x408f4000
 8003600:	20000310 	.word	0x20000310
 8003604:	20000304 	.word	0x20000304
 8003608:	200000e8 	.word	0x200000e8
 800360c:	2000031c 	.word	0x2000031c

08003610 <IMU_Setup>:

static int IMU_Setup(void) {
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 8003614:	4b31      	ldr	r3, [pc, #196]	; (80036dc <IMU_Setup+0xcc>)
 8003616:	4a32      	ldr	r2, [pc, #200]	; (80036e0 <IMU_Setup+0xd0>)
 8003618:	601a      	str	r2, [r3, #0]
  dev_ctx_imu.read_reg = platform_read_imu;
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <IMU_Setup+0xcc>)
 800361c:	4a31      	ldr	r2, [pc, #196]	; (80036e4 <IMU_Setup+0xd4>)
 800361e:	605a      	str	r2, [r3, #4]
  dev_ctx_imu.handle = (void *)&imu_bus;
 8003620:	4b2e      	ldr	r3, [pc, #184]	; (80036dc <IMU_Setup+0xcc>)
 8003622:	4a31      	ldr	r2, [pc, #196]	; (80036e8 <IMU_Setup+0xd8>)
 8003624:	60da      	str	r2, [r3, #12]
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <IMU_Setup+0xdc>)
 8003628:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <IMU_Setup+0xe0>)
 800362a:	601a      	str	r2, [r3, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <IMU_Setup+0xdc>)
 800362e:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <IMU_Setup+0xe4>)
 8003630:	605a      	str	r2, [r3, #4]
  dev_ctx_mag.handle = (void *)&mag_bus;
 8003632:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <IMU_Setup+0xdc>)
 8003634:	4a30      	ldr	r2, [pc, #192]	; (80036f8 <IMU_Setup+0xe8>)
 8003636:	60da      	str	r2, [r3, #12]

  platform_delay(BOOT_TIME);
 8003638:	2014      	movs	r0, #20
 800363a:	f000 f8f3 	bl	8003824 <platform_delay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 800363e:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <IMU_Setup+0xec>)
 8003640:	4926      	ldr	r1, [pc, #152]	; (80036dc <IMU_Setup+0xcc>)
 8003642:	482a      	ldr	r0, [pc, #168]	; (80036ec <IMU_Setup+0xdc>)
 8003644:	f7ff fc2a 	bl	8002e9c <lsm9ds1_dev_id_get>

//  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
  if (whoamI.imu != LSM9DS1_IMU_ID) {
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <IMU_Setup+0xec>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b68      	cmp	r3, #104	; 0x68
 800364e:	d002      	beq.n	8003656 <IMU_Setup+0x46>
	  while (1) {
		  /* Device not found management */
		  return SETUP_FAIL;
 8003650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003654:	e03f      	b.n	80036d6 <IMU_Setup+0xc6>
	  }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8003656:	2201      	movs	r2, #1
 8003658:	4920      	ldr	r1, [pc, #128]	; (80036dc <IMU_Setup+0xcc>)
 800365a:	4824      	ldr	r0, [pc, #144]	; (80036ec <IMU_Setup+0xdc>)
 800365c:	f7ff fc58 	bl	8002f10 <lsm9ds1_dev_reset_set>

  do {
	  lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <IMU_Setup+0xf0>)
 8003662:	491e      	ldr	r1, [pc, #120]	; (80036dc <IMU_Setup+0xcc>)
 8003664:	4821      	ldr	r0, [pc, #132]	; (80036ec <IMU_Setup+0xdc>)
 8003666:	f7ff fc98 	bl	8002f9a <lsm9ds1_dev_reset_get>
  } while (rst);
 800366a:	4b25      	ldr	r3, [pc, #148]	; (8003700 <IMU_Setup+0xf0>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f6      	bne.n	8003660 <IMU_Setup+0x50>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8003672:	2201      	movs	r2, #1
 8003674:	4919      	ldr	r1, [pc, #100]	; (80036dc <IMU_Setup+0xcc>)
 8003676:	481d      	ldr	r0, [pc, #116]	; (80036ec <IMU_Setup+0xdc>)
 8003678:	f7ff fa3f 	bl	8002afa <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 800367c:	2102      	movs	r1, #2
 800367e:	4817      	ldr	r0, [pc, #92]	; (80036dc <IMU_Setup+0xcc>)
 8003680:	f7ff fa15 	bl	8002aae <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8003684:	2103      	movs	r1, #3
 8003686:	4815      	ldr	r0, [pc, #84]	; (80036dc <IMU_Setup+0xcc>)
 8003688:	f7ff f986 	bl	8002998 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 800368c:	2103      	movs	r1, #3
 800368e:	4817      	ldr	r0, [pc, #92]	; (80036ec <IMU_Setup+0xdc>)
 8003690:	f7ff fafd 	bl	8002c8e <lsm9ds1_mag_full_scale_set>
  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 8003694:	2100      	movs	r1, #0
 8003696:	4811      	ldr	r0, [pc, #68]	; (80036dc <IMU_Setup+0xcc>)
 8003698:	f7ff fd3b 	bl	8003112 <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 800369c:	2110      	movs	r1, #16
 800369e:	480f      	ldr	r0, [pc, #60]	; (80036dc <IMU_Setup+0xcc>)
 80036a0:	f7ff fd8c 	bl	80031bc <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 80036a4:	2100      	movs	r1, #0
 80036a6:	480d      	ldr	r0, [pc, #52]	; (80036dc <IMU_Setup+0xcc>)
 80036a8:	f7ff fd62 	bl	8003170 <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 80036ac:	2103      	movs	r1, #3
 80036ae:	480b      	ldr	r0, [pc, #44]	; (80036dc <IMU_Setup+0xcc>)
 80036b0:	f7ff fc9e 	bl	8002ff0 <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 80036b4:	2105      	movs	r1, #5
 80036b6:	4809      	ldr	r0, [pc, #36]	; (80036dc <IMU_Setup+0xcc>)
 80036b8:	f7ff fd05 	bl	80030c6 <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 80036bc:	2112      	movs	r1, #18
 80036be:	4807      	ldr	r0, [pc, #28]	; (80036dc <IMU_Setup+0xcc>)
 80036c0:	f7ff fcbc 	bl	800303c <lsm9ds1_gy_filter_out_path_set>
  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 80036c4:	2122      	movs	r1, #34	; 0x22
 80036c6:	4805      	ldr	r0, [pc, #20]	; (80036dc <IMU_Setup+0xcc>)
 80036c8:	f7ff f98c 	bl	80029e4 <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 80036cc:	2134      	movs	r1, #52	; 0x34
 80036ce:	4807      	ldr	r0, [pc, #28]	; (80036ec <IMU_Setup+0xdc>)
 80036d0:	f7ff fa62 	bl	8002b98 <lsm9ds1_mag_data_rate_set>

  return SETUP_SUCCESS;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000338 	.word	0x20000338
 80036e0:	08003705 	.word	0x08003705
 80036e4:	08003795 	.word	0x08003795
 80036e8:	20000014 	.word	0x20000014
 80036ec:	20000348 	.word	0x20000348
 80036f0:	08003749 	.word	0x08003749
 80036f4:	080037d9 	.word	0x080037d9
 80036f8:	20000004 	.word	0x20000004
 80036fc:	200000f0 	.word	0x200000f0
 8003700:	200000f6 	.word	0x200000f6

08003704 <platform_write_imu>:

static int32_t platform_write_imu(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b08a      	sub	sp, #40	; 0x28
 8003708:	af04      	add	r7, sp, #16
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	461a      	mov	r2, r3
 8003710:	460b      	mov	r3, r1
 8003712:	72fb      	strb	r3, [r7, #11]
 8003714:	4613      	mov	r3, r2
 8003716:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	791b      	ldrb	r3, [r3, #4]
 8003724:	b299      	uxth	r1, r3
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	b29a      	uxth	r2, r3
 800372a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800372e:	9302      	str	r3, [sp, #8]
 8003730:	893b      	ldrh	r3, [r7, #8]
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	2301      	movs	r3, #1
 800373a:	f002 fb31 	bl	8005da0 <HAL_I2C_Mem_Write>
  return 0;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <platform_write_mag>:

static int32_t platform_write_mag(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af04      	add	r7, sp, #16
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	461a      	mov	r2, r3
 8003754:	460b      	mov	r3, r1
 8003756:	72fb      	strb	r3, [r7, #11]
 8003758:	4613      	mov	r3, r2
 800375a:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	617b      	str	r3, [r7, #20]
	reg |= 0x80;
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003766:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	791b      	ldrb	r3, [r3, #4]
 8003770:	b299      	uxth	r1, r3
 8003772:	7afb      	ldrb	r3, [r7, #11]
 8003774:	b29a      	uxth	r2, r3
 8003776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	893b      	ldrh	r3, [r7, #8]
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2301      	movs	r3, #1
 8003786:	f002 fb0b 	bl	8005da0 <HAL_I2C_Mem_Write>
	  return 0;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <platform_read_imu>:

static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af04      	add	r7, sp, #16
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	460b      	mov	r3, r1
 80037a2:	72fb      	strb	r3, [r7, #11]
 80037a4:	4613      	mov	r3, r2
 80037a6:	813b      	strh	r3, [r7, #8]
	  sensbus_t *sensbus = (sensbus_t *)handle;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	617b      	str	r3, [r7, #20]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	791b      	ldrb	r3, [r3, #4]
 80037b4:	b299      	uxth	r1, r3
 80037b6:	7afb      	ldrb	r3, [r7, #11]
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	893b      	ldrh	r3, [r7, #8]
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	2301      	movs	r3, #1
 80037ca:	f002 fbfd 	bl	8005fc8 <HAL_I2C_Mem_Read>
	  return 0;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <platform_read_mag>:

static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af04      	add	r7, sp, #16
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	460b      	mov	r3, r1
 80037e6:	72fb      	strb	r3, [r7, #11]
 80037e8:	4613      	mov	r3, r2
 80037ea:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	617b      	str	r3, [r7, #20]
	  reg |= 0x80;
 80037f0:	7afb      	ldrb	r3, [r7, #11]
 80037f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037f6:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	791b      	ldrb	r3, [r3, #4]
 8003800:	b299      	uxth	r1, r3
 8003802:	7afb      	ldrb	r3, [r7, #11]
 8003804:	b29a      	uxth	r2, r3
 8003806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	893b      	ldrh	r3, [r7, #8]
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2301      	movs	r3, #1
 8003816:	f002 fbd7 	bl	8005fc8 <HAL_I2C_Mem_Read>
	  return 0;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f001 f847 	bl	80048c0 <HAL_Delay>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_0) // If The INT Source Is EXTI Line9 (A9 Pin)
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d104      	bne.n	8003856 <HAL_GPIO_EXTI_Callback+0x1a>
    {
//    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8); // Toggle The Output (LED) Pin
    	test_exti0 += 1;
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_GPIO_EXTI_Callback+0x28>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_GPIO_EXTI_Callback+0x28>)
 8003854:	6013      	str	r3, [r2, #0]
    }
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000360 	.word	0x20000360

08003868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003868:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003870:	f000 ffc0 	bl	80047f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003874:	f000 f91e 	bl	8003ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003878:	f000 fc68 	bl	800414c <MX_GPIO_Init>
  MX_ADC1_Init();
 800387c:	f000 f978 	bl	8003b70 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003880:	f000 fa2e 	bl	8003ce0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003884:	f000 fab8 	bl	8003df8 <MX_ADC3_Init>
  MX_ADC4_Init();
 8003888:	f000 fb54 	bl	8003f34 <MX_ADC4_Init>
  MX_I2C1_Init();
 800388c:	f000 fbde 	bl	800404c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003890:	f000 fc1c 	bl	80040cc <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  if (IMU_Setup() != SETUP_SUCCESS) {
 8003894:	f7ff febc 	bl	8003610 <IMU_Setup>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <main+0x3a>
    return 1;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0ef      	b.n	8003a82 <main+0x21a>
  }
  MCP4728_Init(&hi2c2, output);
 80038a2:	4b7a      	ldr	r3, [pc, #488]	; (8003a8c <main+0x224>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4611      	mov	r1, r2
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	4610      	mov	r0, r2
 80038ac:	891a      	ldrh	r2, [r3, #8]
 80038ae:	2300      	movs	r3, #0
 80038b0:	f362 030f 	bfi	r3, r2, #0, #16
 80038b4:	4602      	mov	r2, r0
 80038b6:	4876      	ldr	r0, [pc, #472]	; (8003a90 <main+0x228>)
 80038b8:	f7fe ffb7 	bl	800282a <MCP4728_Init>
  output.channelVref = 0x00;
 80038bc:	4b73      	ldr	r3, [pc, #460]	; (8003a8c <main+0x224>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
  output.channel_Gain = 0x00;
 80038c2:	4b72      	ldr	r3, [pc, #456]	; (8003a8c <main+0x224>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	705a      	strb	r2, [r3, #1]

  reset_aux_frame();
 80038c8:	f7fd fbd0 	bl	800106c <reset_aux_frame>
  t1 = HAL_GetTick();
 80038cc:	f000 ffec 	bl	80048a8 <HAL_GetTick>
 80038d0:	4603      	mov	r3, r0
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b6f      	ldr	r3, [pc, #444]	; (8003a94 <main+0x22c>)
 80038d6:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
  /* SENSOR READ BEGIN */
  ADC_Read();
 80038d8:	f7ff fcb6 	bl	8003248 <ADC_Read>
  IMU_Read();
 80038dc:	f7ff fd38 	bl	8003350 <IMU_Read>

  /* SENSOR READ END */

  /* CALCULATIONS BEGIN */
  t2 = HAL_GetTick();
 80038e0:	f000 ffe2 	bl	80048a8 <HAL_GetTick>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b6b      	ldr	r3, [pc, #428]	; (8003a98 <main+0x230>)
 80038ea:	601a      	str	r2, [r3, #0]
  calculate_orientation((t2 - t1) / 1000.0f); // @henry: change freq
 80038ec:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <main+0x230>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <main+0x22c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	ee07 3a90 	vmov	s15, r3
 80038fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fe:	eddf 6a67 	vldr	s13, [pc, #412]	; 8003a9c <main+0x234>
 8003902:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003906:	eeb0 0a47 	vmov.f32	s0, s14
 800390a:	f7fd faf5 	bl	8000ef8 <calculate_orientation>
  t1 = t2;
 800390e:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <main+0x230>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a60      	ldr	r2, [pc, #384]	; (8003a94 <main+0x22c>)
 8003914:	6013      	str	r3, [r2, #0]
  calculate_gestures();
 8003916:	f7fd f933 	bl	8000b80 <calculate_gestures>

  /* CALCULATIONS END*/

  /* OUTPUT BEGIN */
  int throttle_voltage = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
  int resting_voltage = 2000;
 800391e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003922:	60bb      	str	r3, [r7, #8]
  int factor = 2000;
 8003924:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003928:	607b      	str	r3, [r7, #4]
  output.channel_Val[0] = resting_voltage + (gimbal_pitch - 0.5) * factor; // pitch
 800392a:	68b8      	ldr	r0, [r7, #8]
 800392c:	f7fc fd9e 	bl	800046c <__aeabi_i2d>
 8003930:	4604      	mov	r4, r0
 8003932:	460d      	mov	r5, r1
 8003934:	4b5a      	ldr	r3, [pc, #360]	; (8003aa0 <main+0x238>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fda9 	bl	8000490 <__aeabi_f2d>
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b58      	ldr	r3, [pc, #352]	; (8003aa4 <main+0x23c>)
 8003944:	f7fc fc44 	bl	80001d0 <__aeabi_dsub>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4690      	mov	r8, r2
 800394e:	4699      	mov	r9, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fc fd8b 	bl	800046c <__aeabi_i2d>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4640      	mov	r0, r8
 800395c:	4649      	mov	r1, r9
 800395e:	f7fc fdef 	bl	8000540 <__aeabi_dmul>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4620      	mov	r0, r4
 8003968:	4629      	mov	r1, r5
 800396a:	f7fc fc33 	bl	80001d4 <__adddf3>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f7fd f893 	bl	8000aa0 <__aeabi_d2uiz>
 800397a:	4603      	mov	r3, r0
 800397c:	b29a      	uxth	r2, r3
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <main+0x224>)
 8003980:	805a      	strh	r2, [r3, #2]
  output.channel_Val[1] = resting_voltage + (gimbal_roll - 0.5) * factor; // roll
 8003982:	68b8      	ldr	r0, [r7, #8]
 8003984:	f7fc fd72 	bl	800046c <__aeabi_i2d>
 8003988:	4604      	mov	r4, r0
 800398a:	460d      	mov	r5, r1
 800398c:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <main+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7fc fd7d 	bl	8000490 <__aeabi_f2d>
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	4b42      	ldr	r3, [pc, #264]	; (8003aa4 <main+0x23c>)
 800399c:	f7fc fc18 	bl	80001d0 <__aeabi_dsub>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4690      	mov	r8, r2
 80039a6:	4699      	mov	r9, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fc fd5f 	bl	800046c <__aeabi_i2d>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4640      	mov	r0, r8
 80039b4:	4649      	mov	r1, r9
 80039b6:	f7fc fdc3 	bl	8000540 <__aeabi_dmul>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4620      	mov	r0, r4
 80039c0:	4629      	mov	r1, r5
 80039c2:	f7fc fc07 	bl	80001d4 <__adddf3>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4610      	mov	r0, r2
 80039cc:	4619      	mov	r1, r3
 80039ce:	f7fd f867 	bl	8000aa0 <__aeabi_d2uiz>
 80039d2:	4603      	mov	r3, r0
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <main+0x224>)
 80039d8:	809a      	strh	r2, [r3, #4]
  output.channel_Val[2] = throttle_voltage + (gimbal_throttle * 2) * factor; // throttle
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <main+0x244>)
 80039e6:	edd3 7a00 	vldr	s15, [r3]
 80039ea:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a04:	ee17 3a90 	vmov	r3, s15
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <main+0x224>)
 8003a0c:	80da      	strh	r2, [r3, #6]
  output.channel_Val[3] = resting_voltage + (gimbal_yaw - 0.5) * factor; // yaw
 8003a0e:	68b8      	ldr	r0, [r7, #8]
 8003a10:	f7fc fd2c 	bl	800046c <__aeabi_i2d>
 8003a14:	4604      	mov	r4, r0
 8003a16:	460d      	mov	r5, r1
 8003a18:	4b25      	ldr	r3, [pc, #148]	; (8003ab0 <main+0x248>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fc fd37 	bl	8000490 <__aeabi_f2d>
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <main+0x23c>)
 8003a28:	f7fc fbd2 	bl	80001d0 <__aeabi_dsub>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4690      	mov	r8, r2
 8003a32:	4699      	mov	r9, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fc fd19 	bl	800046c <__aeabi_i2d>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4640      	mov	r0, r8
 8003a40:	4649      	mov	r1, r9
 8003a42:	f7fc fd7d 	bl	8000540 <__aeabi_dmul>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	f7fc fbc1 	bl	80001d4 <__adddf3>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7fd f821 	bl	8000aa0 <__aeabi_d2uiz>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <main+0x224>)
 8003a64:	811a      	strh	r2, [r3, #8]
  MCP4728_Write_AllChannels_Diff(&hi2c2, output);
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <main+0x224>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4610      	mov	r0, r2
 8003a70:	891a      	ldrh	r2, [r3, #8]
 8003a72:	2300      	movs	r3, #0
 8003a74:	f362 030f 	bfi	r3, r2, #0, #16
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4805      	ldr	r0, [pc, #20]	; (8003a90 <main+0x228>)
 8003a7c:	f7fe fe91 	bl	80027a2 <MCP4728_Write_AllChannels_Diff>
  while (1) {
 8003a80:	e72a      	b.n	80038d8 <main+0x70>

  /* OUTPUT END */
  }
  /* USER CODE END 3 */
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a8c:	200000cc 	.word	0x200000cc
 8003a90:	2000028c 	.word	0x2000028c
 8003a94:	20000358 	.word	0x20000358
 8003a98:	2000035c 	.word	0x2000035c
 8003a9c:	447a0000 	.word	0x447a0000
 8003aa0:	200002f8 	.word	0x200002f8
 8003aa4:	3fe00000 	.word	0x3fe00000
 8003aa8:	200002f4 	.word	0x200002f4
 8003aac:	20000300 	.word	0x20000300
 8003ab0:	200002fc 	.word	0x200002fc

08003ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b09e      	sub	sp, #120	; 0x78
 8003ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003abe:	2228      	movs	r2, #40	; 0x28
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f004 fb02 	bl	80080cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ac8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ad8:	463b      	mov	r3, r7
 8003ada:	223c      	movs	r2, #60	; 0x3c
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f004 faf4 	bl	80080cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003aec:	2310      	movs	r3, #16
 8003aee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003af0:	2302      	movs	r3, #2
 8003af2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003af4:	2300      	movs	r3, #0
 8003af6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003af8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003afc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003afe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 fee4 	bl	80068d0 <HAL_RCC_OscConfig>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003b0e:	f000 fb81 	bl	8004214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b12:	230f      	movs	r3, #15
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003b16:	2300      	movs	r3, #0
 8003b18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f003 ff0d 	bl	800794c <HAL_RCC_ClockConfig>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003b38:	f000 fb6c 	bl	8004214 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8003b3c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003b40:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8003b52:	2300      	movs	r3, #0
 8003b54:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b56:	463b      	mov	r3, r7
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 f8dd 	bl	8007d18 <HAL_RCCEx_PeriphCLKConfig>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003b64:	f000 fb56 	bl	8004214 <Error_Handler>
  }
}
 8003b68:	bf00      	nop
 8003b6a:	3778      	adds	r7, #120	; 0x78
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	; 0x28
 8003b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003b76:	f107 031c 	add.w	r3, r7, #28
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b82:	1d3b      	adds	r3, r7, #4
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
 8003b90:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003b92:	4b51      	ldr	r3, [pc, #324]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003b94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003b98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b9a:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ba0:	4b4d      	ldr	r3, [pc, #308]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ba6:	4b4c      	ldr	r3, [pc, #304]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003bac:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003bb2:	4b49      	ldr	r3, [pc, #292]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bba:	4b47      	ldr	r3, [pc, #284]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bc0:	4b45      	ldr	r3, [pc, #276]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003bc6:	4b44      	ldr	r3, [pc, #272]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003bcc:	4b42      	ldr	r3, [pc, #264]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003bd2:	4b41      	ldr	r3, [pc, #260]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bda:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bdc:	2204      	movs	r2, #4
 8003bde:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003be0:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003be6:	4b3c      	ldr	r3, [pc, #240]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bec:	483a      	ldr	r0, [pc, #232]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003bee:	f000 fe8b 	bl	8004908 <HAL_ADC_Init>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003bf8:	f000 fb0c 	bl	8004214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c00:	f107 031c 	add.w	r3, r7, #28
 8003c04:	4619      	mov	r1, r3
 8003c06:	4834      	ldr	r0, [pc, #208]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003c08:	f001 fb4a 	bl	80052a0 <HAL_ADCEx_MultiModeConfigChannel>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003c12:	f000 faff 	bl	8004214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c2e:	1d3b      	adds	r3, r7, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4829      	ldr	r0, [pc, #164]	; (8003cd8 <MX_ADC1_Init+0x168>)
 8003c34:	f001 f848 	bl	8004cc8 <HAL_ADC_ConfigChannel>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8003c3e:	f000 fae9 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_Calibrate(ADC1);
 8003c42:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c46:	f7ff fb25 	bl	8003294 <ADC_Calibrate>
  ADC_ADVREGEN(ADC1); // @henry
 8003c4a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c4e:	f7ff fae4 	bl	800321a <ADC_ADVREGEN>
  ADC12_COMMON->CCR|= ADC_CCR_VREFEN; // @henry
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <MX_ADC1_Init+0x16c>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <MX_ADC1_Init+0x16c>)
 8003c58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c5c:	6093      	str	r3, [r2, #8]

  ADC1->CR |= ADC_CR_ADEN; // Enable ADC
 8003c5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6093      	str	r3, [r2, #8]
//  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC1->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c7c:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR &= ~0xC; // 12-bit Resolution
 8003c7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c88:	f023 030c 	bic.w	r3, r3, #12
 8003c8c:	60d3      	str	r3, [r2, #12]

  ADC1->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003c8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003c98:	f023 030f 	bic.w	r3, r3, #15
 8003c9c:	6313      	str	r3, [r2, #48]	; 0x30
  ADC1->SQR1 |= 0x1 << 6; // Channel 1 of ADC1
 8003c9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003cae:	bf00      	nop
 8003cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0f8      	beq.n	8003cb0 <MX_ADC1_Init+0x140>
  ADC1->CR |= ADC_CR_ADSTART; // Start the ADC
 8003cbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 8003cce:	bf00      	nop
 8003cd0:	3728      	adds	r7, #40	; 0x28
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200000f8 	.word	0x200000f8
 8003cdc:	50000300 	.word	0x50000300

08003ce0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	60da      	str	r2, [r3, #12]
 8003cf2:	611a      	str	r2, [r3, #16]
 8003cf4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003cf6:	4b3e      	ldr	r3, [pc, #248]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003cf8:	4a3e      	ldr	r2, [pc, #248]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003cfa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003cfc:	4b3c      	ldr	r3, [pc, #240]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003d02:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003d08:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003d0e:	4b38      	ldr	r3, [pc, #224]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003d14:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d1c:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d22:	4b33      	ldr	r3, [pc, #204]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d28:	4b31      	ldr	r3, [pc, #196]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003d34:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d3c:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d3e:	2204      	movs	r2, #4
 8003d40:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003d42:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003d48:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003d4e:	4828      	ldr	r0, [pc, #160]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d50:	f000 fdda 	bl	8004908 <HAL_ADC_Init>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8003d5a:	f000 fa5b 	bl	8004214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d76:	463b      	mov	r3, r7
 8003d78:	4619      	mov	r1, r3
 8003d7a:	481d      	ldr	r0, [pc, #116]	; (8003df0 <MX_ADC2_Init+0x110>)
 8003d7c:	f000 ffa4 	bl	8004cc8 <HAL_ADC_ConfigChannel>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8003d86:	f000 fa45 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC_Calibrate(ADC2);
 8003d8a:	481a      	ldr	r0, [pc, #104]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003d8c:	f7ff fa82 	bl	8003294 <ADC_Calibrate>

  ADC2->CR |= ADC_CR_ADEN; // Enable ADC
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6093      	str	r3, [r2, #8]
//  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC2->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003da2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003da6:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~0xC; // 12-bit Resolution
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003dae:	f023 030c 	bic.w	r3, r3, #12
 8003db2:	60d3      	str	r3, [r2, #12]

  ADC2->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4a0e      	ldr	r2, [pc, #56]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003dba:	f023 030f 	bic.w	r3, r3, #15
 8003dbe:	6313      	str	r3, [r2, #48]	; 0x30
  ADC2->SQR1 |= 0x3 << 6; // Channel 3 of ADC2
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	4a0b      	ldr	r2, [pc, #44]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dca:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003dcc:	bf00      	nop
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f9      	beq.n	8003dce <MX_ADC2_Init+0xee>
  ADC2->CR |= ADC_CR_ADSTART; // Start the ADC
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <MX_ADC2_Init+0x114>)
 8003de0:	f043 0304 	orr.w	r3, r3, #4
 8003de4:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC2_Init 2 */

}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20000148 	.word	0x20000148
 8003df4:	50000100 	.word	0x50000100

08003df8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003e0a:	1d3b      	adds	r3, r7, #4
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	611a      	str	r2, [r3, #16]
 8003e18:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8003e1a:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e1c:	4a44      	ldr	r2, [pc, #272]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003e1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003e20:	4b42      	ldr	r3, [pc, #264]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e2c:	4b3f      	ldr	r3, [pc, #252]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003e38:	4b3c      	ldr	r3, [pc, #240]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e40:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e46:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e4c:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003e52:	4b36      	ldr	r3, [pc, #216]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e60:	4b32      	ldr	r3, [pc, #200]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e62:	2204      	movs	r2, #4
 8003e64:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003e66:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003e6c:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003e72:	482e      	ldr	r0, [pc, #184]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e74:	f000 fd48 	bl	8004908 <HAL_ADC_Init>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8003e7e:	f000 f9c9 	bl	8004214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8003e86:	f107 031c 	add.w	r3, r7, #28
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4827      	ldr	r0, [pc, #156]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003e8e:	f001 fa07 	bl	80052a0 <HAL_ADCEx_MultiModeConfigChannel>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8003e98:	f000 f9bc 	bl	8004214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	481c      	ldr	r0, [pc, #112]	; (8003f2c <MX_ADC3_Init+0x134>)
 8003eba:	f000 ff05 	bl	8004cc8 <HAL_ADC_ConfigChannel>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8003ec4:	f000 f9a6 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  ADC_Calibrate(ADC3);
 8003ec8:	4819      	ldr	r0, [pc, #100]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003eca:	f7ff f9e3 	bl	8003294 <ADC_Calibrate>

  ADC3->CR |= ADC_CR_ADEN; // Enable ADC
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6093      	str	r3, [r2, #8]
//  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC3->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003ee0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ee4:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~0xC; // 12-bit Resolution
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4a11      	ldr	r2, [pc, #68]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003eec:	f023 030c 	bic.w	r3, r3, #12
 8003ef0:	60d3      	str	r3, [r2, #12]

  ADC3->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003ef8:	f023 030f 	bic.w	r3, r3, #15
 8003efc:	6313      	str	r3, [r2, #48]	; 0x30
  ADC3->SQR1 |= 0x1 << 6; // Channel 1 of ADC3
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a0b      	ldr	r2, [pc, #44]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003f0a:	bf00      	nop
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f9      	beq.n	8003f0c <MX_ADC3_Init+0x114>
  ADC3->CR |= ADC_CR_ADSTART; // Start the ADC
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <MX_ADC3_Init+0x138>)
 8003f1e:	f043 0304 	orr.w	r3, r3, #4
 8003f22:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC3_Init 2 */

}
 8003f24:	bf00      	nop
 8003f26:	3728      	adds	r7, #40	; 0x28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000198 	.word	0x20000198
 8003f30:	50000400 	.word	0x50000400

08003f34 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
 8003f48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f4c:	4a3e      	ldr	r2, [pc, #248]	; (8004048 <MX_ADC4_Init+0x114>)
 8003f4e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f50:	4b3c      	ldr	r3, [pc, #240]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8003f56:	4b3b      	ldr	r3, [pc, #236]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8003f68:	4b36      	ldr	r3, [pc, #216]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f70:	4b34      	ldr	r3, [pc, #208]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f76:	4b33      	ldr	r3, [pc, #204]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f7c:	4b31      	ldr	r3, [pc, #196]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8003f82:	4b30      	ldr	r3, [pc, #192]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8003f88:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f92:	2204      	movs	r2, #4
 8003f94:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8003f96:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003f9c:	4b29      	ldr	r3, [pc, #164]	; (8004044 <MX_ADC4_Init+0x110>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8003fa2:	4828      	ldr	r0, [pc, #160]	; (8004044 <MX_ADC4_Init+0x110>)
 8003fa4:	f000 fcb0 	bl	8004908 <HAL_ADC_Init>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8003fae:	f000 f931 	bl	8004214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8003fca:	463b      	mov	r3, r7
 8003fcc:	4619      	mov	r1, r3
 8003fce:	481d      	ldr	r0, [pc, #116]	; (8004044 <MX_ADC4_Init+0x110>)
 8003fd0:	f000 fe7a 	bl	8004cc8 <HAL_ADC_ConfigChannel>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8003fda:	f000 f91b 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  ADC_Calibrate(ADC4);
 8003fde:	481a      	ldr	r0, [pc, #104]	; (8004048 <MX_ADC4_Init+0x114>)
 8003fe0:	f7ff f958 	bl	8003294 <ADC_Calibrate>

  ADC4->CR |= ADC_CR_ADEN; // Enable ADC
 8003fe4:	4b18      	ldr	r3, [pc, #96]	; (8004048 <MX_ADC4_Init+0x114>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a17      	ldr	r2, [pc, #92]	; (8004048 <MX_ADC4_Init+0x114>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6093      	str	r3, [r2, #8]
//  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC4->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003ff0:	4b15      	ldr	r3, [pc, #84]	; (8004048 <MX_ADC4_Init+0x114>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4a14      	ldr	r2, [pc, #80]	; (8004048 <MX_ADC4_Init+0x114>)
 8003ff6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ffa:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~0xC; // 12-bit Resolution
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <MX_ADC4_Init+0x114>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	4a11      	ldr	r2, [pc, #68]	; (8004048 <MX_ADC4_Init+0x114>)
 8004002:	f023 030c 	bic.w	r3, r3, #12
 8004006:	60d3      	str	r3, [r2, #12]

  ADC4->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <MX_ADC4_Init+0x114>)
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <MX_ADC4_Init+0x114>)
 800400e:	f023 030f 	bic.w	r3, r3, #15
 8004012:	6313      	str	r3, [r2, #48]	; 0x30
  ADC4->SQR1 |= 0x1 << 6; // Channel 1 of ADC4
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <MX_ADC4_Init+0x114>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	4a0b      	ldr	r2, [pc, #44]	; (8004048 <MX_ADC4_Init+0x114>)
 800401a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800401e:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8004020:	bf00      	nop
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <MX_ADC4_Init+0x114>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f9      	beq.n	8004022 <MX_ADC4_Init+0xee>
  ADC4->CR |= ADC_CR_ADSTART; // Start the ADC
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <MX_ADC4_Init+0x114>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4a05      	ldr	r2, [pc, #20]	; (8004048 <MX_ADC4_Init+0x114>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC4_Init 2 */

}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200001e8 	.word	0x200001e8
 8004048:	50000500 	.word	0x50000500

0800404c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <MX_I2C1_Init+0x74>)
 8004052:	4a1c      	ldr	r2, [pc, #112]	; (80040c4 <MX_I2C1_Init+0x78>)
 8004054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <MX_I2C1_Init+0x74>)
 8004058:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <MX_I2C1_Init+0x7c>)
 800405a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800405c:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <MX_I2C1_Init+0x74>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004062:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <MX_I2C1_Init+0x74>)
 8004064:	2201      	movs	r2, #1
 8004066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <MX_I2C1_Init+0x74>)
 800406a:	2200      	movs	r2, #0
 800406c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <MX_I2C1_Init+0x74>)
 8004070:	2200      	movs	r2, #0
 8004072:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004074:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <MX_I2C1_Init+0x74>)
 8004076:	2200      	movs	r2, #0
 8004078:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <MX_I2C1_Init+0x74>)
 800407c:	2200      	movs	r2, #0
 800407e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <MX_I2C1_Init+0x74>)
 8004082:	2200      	movs	r2, #0
 8004084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004086:	480e      	ldr	r0, [pc, #56]	; (80040c0 <MX_I2C1_Init+0x74>)
 8004088:	f001 fd06 	bl	8005a98 <HAL_I2C_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004092:	f000 f8bf 	bl	8004214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004096:	2100      	movs	r1, #0
 8004098:	4809      	ldr	r0, [pc, #36]	; (80040c0 <MX_I2C1_Init+0x74>)
 800409a:	f002 fb81 	bl	80067a0 <HAL_I2CEx_ConfigAnalogFilter>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80040a4:	f000 f8b6 	bl	8004214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80040a8:	2100      	movs	r1, #0
 80040aa:	4805      	ldr	r0, [pc, #20]	; (80040c0 <MX_I2C1_Init+0x74>)
 80040ac:	f002 fbc3 	bl	8006836 <HAL_I2CEx_ConfigDigitalFilter>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80040b6:	f000 f8ad 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000238 	.word	0x20000238
 80040c4:	40005400 	.word	0x40005400
 80040c8:	2000090e 	.word	0x2000090e

080040cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <MX_I2C2_Init+0x74>)
 80040d2:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <MX_I2C2_Init+0x78>)
 80040d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <MX_I2C2_Init+0x74>)
 80040d8:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <MX_I2C2_Init+0x7c>)
 80040da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80040dc:	4b18      	ldr	r3, [pc, #96]	; (8004140 <MX_I2C2_Init+0x74>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040e2:	4b17      	ldr	r3, [pc, #92]	; (8004140 <MX_I2C2_Init+0x74>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <MX_I2C2_Init+0x74>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80040ee:	4b14      	ldr	r3, [pc, #80]	; (8004140 <MX_I2C2_Init+0x74>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <MX_I2C2_Init+0x74>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040fa:	4b11      	ldr	r3, [pc, #68]	; (8004140 <MX_I2C2_Init+0x74>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004100:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <MX_I2C2_Init+0x74>)
 8004102:	2200      	movs	r2, #0
 8004104:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004106:	480e      	ldr	r0, [pc, #56]	; (8004140 <MX_I2C2_Init+0x74>)
 8004108:	f001 fcc6 	bl	8005a98 <HAL_I2C_Init>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004112:	f000 f87f 	bl	8004214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004116:	2100      	movs	r1, #0
 8004118:	4809      	ldr	r0, [pc, #36]	; (8004140 <MX_I2C2_Init+0x74>)
 800411a:	f002 fb41 	bl	80067a0 <HAL_I2CEx_ConfigAnalogFilter>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004124:	f000 f876 	bl	8004214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004128:	2100      	movs	r1, #0
 800412a:	4805      	ldr	r0, [pc, #20]	; (8004140 <MX_I2C2_Init+0x74>)
 800412c:	f002 fb83 	bl	8006836 <HAL_I2CEx_ConfigDigitalFilter>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004136:	f000 f86d 	bl	8004214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000028c 	.word	0x2000028c
 8004144:	40005800 	.word	0x40005800
 8004148:	2000090e 	.word	0x2000090e

0800414c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	605a      	str	r2, [r3, #4]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	60da      	str	r2, [r3, #12]
 8004160:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004162:	4b2a      	ldr	r3, [pc, #168]	; (800420c <MX_GPIO_Init+0xc0>)
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	4a29      	ldr	r2, [pc, #164]	; (800420c <MX_GPIO_Init+0xc0>)
 8004168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416c:	6153      	str	r3, [r2, #20]
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <MX_GPIO_Init+0xc0>)
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800417a:	4b24      	ldr	r3, [pc, #144]	; (800420c <MX_GPIO_Init+0xc0>)
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	4a23      	ldr	r2, [pc, #140]	; (800420c <MX_GPIO_Init+0xc0>)
 8004180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004184:	6153      	str	r3, [r2, #20]
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <MX_GPIO_Init+0xc0>)
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004192:	4b1e      	ldr	r3, [pc, #120]	; (800420c <MX_GPIO_Init+0xc0>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	4a1d      	ldr	r2, [pc, #116]	; (800420c <MX_GPIO_Init+0xc0>)
 8004198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800419c:	6153      	str	r3, [r2, #20]
 800419e:	4b1b      	ldr	r3, [pc, #108]	; (800420c <MX_GPIO_Init+0xc0>)
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041aa:	4b18      	ldr	r3, [pc, #96]	; (800420c <MX_GPIO_Init+0xc0>)
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4a17      	ldr	r2, [pc, #92]	; (800420c <MX_GPIO_Init+0xc0>)
 80041b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041b4:	6153      	str	r3, [r2, #20]
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <MX_GPIO_Init+0xc0>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041be:	607b      	str	r3, [r7, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <MX_GPIO_Init+0xc0>)
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	4a11      	ldr	r2, [pc, #68]	; (800420c <MX_GPIO_Init+0xc0>)
 80041c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041cc:	6153      	str	r3, [r2, #20]
 80041ce:	4b0f      	ldr	r3, [pc, #60]	; (800420c <MX_GPIO_Init+0xc0>)
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80041e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041e4:	2302      	movs	r3, #2
 80041e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e8:	f107 0314 	add.w	r3, r7, #20
 80041ec:	4619      	mov	r1, r3
 80041ee:	4808      	ldr	r0, [pc, #32]	; (8004210 <MX_GPIO_Init+0xc4>)
 80041f0:	f001 fac0 	bl	8005774 <HAL_GPIO_Init>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80041f4:	2200      	movs	r2, #0
 80041f6:	2100      	movs	r1, #0
 80041f8:	2006      	movs	r0, #6
 80041fa:	f001 fa84 	bl	8005706 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80041fe:	2006      	movs	r0, #6
 8004200:	f001 fa9d 	bl	800573e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004204:	bf00      	nop
 8004206:	3728      	adds	r7, #40	; 0x28
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40021000 	.word	0x40021000
 8004210:	48000800 	.word	0x48000800

08004214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004218:	b672      	cpsid	i
}
 800421a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800421c:	e7fe      	b.n	800421c <Error_Handler+0x8>
	...

08004220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_MspInit+0x44>)
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	4a0e      	ldr	r2, [pc, #56]	; (8004264 <HAL_MspInit+0x44>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	6193      	str	r3, [r2, #24]
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_MspInit+0x44>)
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_MspInit+0x44>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <HAL_MspInit+0x44>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004248:	61d3      	str	r3, [r2, #28]
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_MspInit+0x44>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000

08004268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b090      	sub	sp, #64	; 0x40
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004288:	d12e      	bne.n	80042e8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800428a:	4b66      	ldr	r3, [pc, #408]	; (8004424 <HAL_ADC_MspInit+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3301      	adds	r3, #1
 8004290:	4a64      	ldr	r2, [pc, #400]	; (8004424 <HAL_ADC_MspInit+0x1bc>)
 8004292:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004294:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_ADC_MspInit+0x1bc>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d10b      	bne.n	80042b4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800429c:	4b62      	ldr	r3, [pc, #392]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4a61      	ldr	r2, [pc, #388]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80042a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a6:	6153      	str	r3, [r2, #20]
 80042a8:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b4:	4b5c      	ldr	r3, [pc, #368]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	4a5b      	ldr	r2, [pc, #364]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80042ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042be:	6153      	str	r3, [r2, #20]
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80042cc:	2301      	movs	r3, #1
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042d0:	2303      	movs	r3, #3
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042dc:	4619      	mov	r1, r3
 80042de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042e2:	f001 fa47 	bl	8005774 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80042e6:	e099      	b.n	800441c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a4f      	ldr	r2, [pc, #316]	; (800442c <HAL_ADC_MspInit+0x1c4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d12e      	bne.n	8004350 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80042f2:	4b4c      	ldr	r3, [pc, #304]	; (8004424 <HAL_ADC_MspInit+0x1bc>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3301      	adds	r3, #1
 80042f8:	4a4a      	ldr	r2, [pc, #296]	; (8004424 <HAL_ADC_MspInit+0x1bc>)
 80042fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80042fc:	4b49      	ldr	r3, [pc, #292]	; (8004424 <HAL_ADC_MspInit+0x1bc>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d10b      	bne.n	800431c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004304:	4b48      	ldr	r3, [pc, #288]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	4a47      	ldr	r2, [pc, #284]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 800430a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800430e:	6153      	str	r3, [r2, #20]
 8004310:	4b45      	ldr	r3, [pc, #276]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	4a41      	ldr	r2, [pc, #260]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 8004322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004326:	6153      	str	r3, [r2, #20]
 8004328:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004334:	2340      	movs	r3, #64	; 0x40
 8004336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004338:	2303      	movs	r3, #3
 800433a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004344:	4619      	mov	r1, r3
 8004346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800434a:	f001 fa13 	bl	8005774 <HAL_GPIO_Init>
}
 800434e:	e065      	b.n	800441c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC3)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a36      	ldr	r2, [pc, #216]	; (8004430 <HAL_ADC_MspInit+0x1c8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d12d      	bne.n	80043b6 <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 800435a:	4b36      	ldr	r3, [pc, #216]	; (8004434 <HAL_ADC_MspInit+0x1cc>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	4a34      	ldr	r2, [pc, #208]	; (8004434 <HAL_ADC_MspInit+0x1cc>)
 8004362:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8004364:	4b33      	ldr	r3, [pc, #204]	; (8004434 <HAL_ADC_MspInit+0x1cc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10b      	bne.n	8004384 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800436c:	4b2e      	ldr	r3, [pc, #184]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 8004372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004376:	6153      	str	r3, [r2, #20]
 8004378:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004384:	4b28      	ldr	r3, [pc, #160]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	4a27      	ldr	r2, [pc, #156]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 800438a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438e:	6153      	str	r3, [r2, #20]
 8004390:	4b25      	ldr	r3, [pc, #148]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800439c:	2302      	movs	r3, #2
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043a0:	2303      	movs	r3, #3
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043ac:	4619      	mov	r1, r3
 80043ae:	4822      	ldr	r0, [pc, #136]	; (8004438 <HAL_ADC_MspInit+0x1d0>)
 80043b0:	f001 f9e0 	bl	8005774 <HAL_GPIO_Init>
}
 80043b4:	e032      	b.n	800441c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC4)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a20      	ldr	r2, [pc, #128]	; (800443c <HAL_ADC_MspInit+0x1d4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d12d      	bne.n	800441c <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80043c0:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <HAL_ADC_MspInit+0x1cc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3301      	adds	r3, #1
 80043c6:	4a1b      	ldr	r2, [pc, #108]	; (8004434 <HAL_ADC_MspInit+0x1cc>)
 80043c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <HAL_ADC_MspInit+0x1cc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d10b      	bne.n	80043ea <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	4a14      	ldr	r2, [pc, #80]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80043d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043dc:	6153      	str	r3, [r2, #20]
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043ea:	4b0f      	ldr	r3, [pc, #60]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4a0e      	ldr	r2, [pc, #56]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80043f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043f4:	6153      	str	r3, [r2, #20]
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <HAL_ADC_MspInit+0x1c0>)
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004402:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004408:	2303      	movs	r3, #3
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	2300      	movs	r3, #0
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004414:	4619      	mov	r1, r3
 8004416:	480a      	ldr	r0, [pc, #40]	; (8004440 <HAL_ADC_MspInit+0x1d8>)
 8004418:	f001 f9ac 	bl	8005774 <HAL_GPIO_Init>
}
 800441c:	bf00      	nop
 800441e:	3740      	adds	r7, #64	; 0x40
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000364 	.word	0x20000364
 8004428:	40021000 	.word	0x40021000
 800442c:	50000100 	.word	0x50000100
 8004430:	50000400 	.word	0x50000400
 8004434:	20000368 	.word	0x20000368
 8004438:	48000400 	.word	0x48000400
 800443c:	50000500 	.word	0x50000500
 8004440:	48001000 	.word	0x48001000

08004444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08e      	sub	sp, #56	; 0x38
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800444c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a54      	ldr	r2, [pc, #336]	; (80045b4 <HAL_I2C_MspInit+0x170>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d14e      	bne.n	8004504 <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004466:	4b54      	ldr	r3, [pc, #336]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	4a53      	ldr	r2, [pc, #332]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	6153      	str	r3, [r2, #20]
 8004472:	4b51      	ldr	r3, [pc, #324]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	623b      	str	r3, [r7, #32]
 800447c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800447e:	4b4e      	ldr	r3, [pc, #312]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4a4d      	ldr	r2, [pc, #308]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004488:	6153      	str	r3, [r2, #20]
 800448a:	4b4b      	ldr	r3, [pc, #300]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800449c:	2312      	movs	r3, #18
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044a4:	2303      	movs	r3, #3
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044a8:	2304      	movs	r3, #4
 80044aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044b0:	4619      	mov	r1, r3
 80044b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044b6:	f001 f95d 	bl	8005774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044be:	2312      	movs	r3, #18
 80044c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044c6:	2303      	movs	r3, #3
 80044c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044ca:	2304      	movs	r3, #4
 80044cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d2:	4619      	mov	r1, r3
 80044d4:	4839      	ldr	r0, [pc, #228]	; (80045bc <HAL_I2C_MspInit+0x178>)
 80044d6:	f001 f94d 	bl	8005774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	4a36      	ldr	r2, [pc, #216]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 80044e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044e4:	61d3      	str	r3, [r2, #28]
 80044e6:	4b34      	ldr	r3, [pc, #208]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80044f2:	2200      	movs	r2, #0
 80044f4:	2100      	movs	r1, #0
 80044f6:	201f      	movs	r0, #31
 80044f8:	f001 f905 	bl	8005706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80044fc:	201f      	movs	r0, #31
 80044fe:	f001 f91e 	bl	800573e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004502:	e052      	b.n	80045aa <HAL_I2C_MspInit+0x166>
  else if(hi2c->Instance==I2C2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <HAL_I2C_MspInit+0x17c>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d14d      	bne.n	80045aa <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800450e:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	4a29      	ldr	r2, [pc, #164]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004518:	6153      	str	r3, [r2, #20]
 800451a:	4b27      	ldr	r3, [pc, #156]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004526:	4b24      	ldr	r3, [pc, #144]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	4a23      	ldr	r2, [pc, #140]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 800452c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004530:	6153      	str	r3, [r2, #20]
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800453e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004544:	2312      	movs	r3, #18
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004550:	2304      	movs	r3, #4
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004558:	4619      	mov	r1, r3
 800455a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800455e:	f001 f909 	bl	8005774 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004562:	2340      	movs	r3, #64	; 0x40
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004566:	2312      	movs	r3, #18
 8004568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456a:	2300      	movs	r3, #0
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800456e:	2303      	movs	r3, #3
 8004570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004572:	2304      	movs	r3, #4
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800457a:	4619      	mov	r1, r3
 800457c:	4811      	ldr	r0, [pc, #68]	; (80045c4 <HAL_I2C_MspInit+0x180>)
 800457e:	f001 f8f9 	bl	8005774 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800458c:	61d3      	str	r3, [r2, #28]
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <HAL_I2C_MspInit+0x174>)
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800459a:	2200      	movs	r2, #0
 800459c:	2100      	movs	r1, #0
 800459e:	2021      	movs	r0, #33	; 0x21
 80045a0:	f001 f8b1 	bl	8005706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80045a4:	2021      	movs	r0, #33	; 0x21
 80045a6:	f001 f8ca 	bl	800573e <HAL_NVIC_EnableIRQ>
}
 80045aa:	bf00      	nop
 80045ac:	3738      	adds	r7, #56	; 0x38
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40005400 	.word	0x40005400
 80045b8:	40021000 	.word	0x40021000
 80045bc:	48000400 	.word	0x48000400
 80045c0:	40005800 	.word	0x40005800
 80045c4:	48001400 	.word	0x48001400

080045c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045cc:	e7fe      	b.n	80045cc <NMI_Handler+0x4>

080045ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045d2:	e7fe      	b.n	80045d2 <HardFault_Handler+0x4>

080045d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045d8:	e7fe      	b.n	80045d8 <MemManage_Handler+0x4>

080045da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045da:	b480      	push	{r7}
 80045dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045de:	e7fe      	b.n	80045de <BusFault_Handler+0x4>

080045e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045e4:	e7fe      	b.n	80045e4 <UsageFault_Handler+0x4>

080045e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045e6:	b480      	push	{r7}
 80045e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004614:	f000 f934 	bl	8004880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004618:	bf00      	nop
 800461a:	bd80      	pop	{r7, pc}

0800461c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004620:	2001      	movs	r0, #1
 8004622:	f001 fa21 	bl	8005a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004630:	4802      	ldr	r0, [pc, #8]	; (800463c <I2C1_EV_IRQHandler+0x10>)
 8004632:	f001 fde3 	bl	80061fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000238 	.word	0x20000238

08004640 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004644:	4802      	ldr	r0, [pc, #8]	; (8004650 <I2C2_EV_IRQHandler+0x10>)
 8004646:	f001 fdd9 	bl	80061fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	2000028c 	.word	0x2000028c

08004654 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004658:	4b06      	ldr	r3, [pc, #24]	; (8004674 <SystemInit+0x20>)
 800465a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465e:	4a05      	ldr	r2, [pc, #20]	; (8004674 <SystemInit+0x20>)
 8004660:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004664:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <max>:
#include "utils.h"

float max(float a, float b) {
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004682:	edc7 0a00 	vstr	s1, [r7]
    if (a >= b) {
 8004686:	ed97 7a01 	vldr	s14, [r7, #4]
 800468a:	edd7 7a00 	vldr	s15, [r7]
 800468e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	db01      	blt.n	800469c <max+0x24>
        return a;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	e000      	b.n	800469e <max+0x26>
    }
    return b;
 800469c:	683b      	ldr	r3, [r7, #0]
}
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eeb0 0a67 	vmov.f32	s0, s15
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <lerp>:
    }
    return val;
}

float lerp(float a, float b, float t)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	ed87 0a03 	vstr	s0, [r7, #12]
 80046ba:	edc7 0a02 	vstr	s1, [r7, #8]
 80046be:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + (b - a) * t;
 80046c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80046c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80046ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80046d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80046da:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80046de:	eeb0 0a67 	vmov.f32	s0, s15
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <map>:

float map(float value, float in_min, float in_max, float out_min, float out_max) {
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80046f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80046fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80046fe:	edc7 1a02 	vstr	s3, [r7, #8]
 8004702:	ed87 2a01 	vstr	s4, [r7, #4]
    if (value >= in_max) {
 8004706:	ed97 7a05 	vldr	s14, [r7, #20]
 800470a:	edd7 7a03 	vldr	s15, [r7, #12]
 800470e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004716:	db02      	blt.n	800471e <map+0x32>
        return out_max;
 8004718:	edd7 7a01 	vldr	s15, [r7, #4]
 800471c:	e025      	b.n	800476a <map+0x7e>
    }
    if (value <= in_min) {
 800471e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004722:	edd7 7a04 	vldr	s15, [r7, #16]
 8004726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800472a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472e:	d802      	bhi.n	8004736 <map+0x4a>
        return out_min;
 8004730:	edd7 7a02 	vldr	s15, [r7, #8]
 8004734:	e019      	b.n	800476a <map+0x7e>
    }
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8004736:	ed97 7a05 	vldr	s14, [r7, #20]
 800473a:	edd7 7a04 	vldr	s15, [r7, #16]
 800473e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004742:	edd7 6a01 	vldr	s13, [r7, #4]
 8004746:	edd7 7a02 	vldr	s15, [r7, #8]
 800474a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800474e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004752:	ed97 7a03 	vldr	s14, [r7, #12]
 8004756:	edd7 7a04 	vldr	s15, [r7, #16]
 800475a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	edd7 7a02 	vldr	s15, [r7, #8]
 8004766:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800476a:	eeb0 0a67 	vmov.f32	s0, s15
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <convert_period_to_freq>:

float convert_period_to_freq(float period) {
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 / period;
 8004782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004786:	edd7 7a01 	vldr	s15, [r7, #4]
 800478a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800478e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004792:	eeb0 0a67 	vmov.f32	s0, s15
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80047a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80047a4:	f7ff ff56 	bl	8004654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80047a8:	480c      	ldr	r0, [pc, #48]	; (80047dc <LoopForever+0x6>)
  ldr r1, =_edata
 80047aa:	490d      	ldr	r1, [pc, #52]	; (80047e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80047ac:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <LoopForever+0xe>)
  movs r3, #0
 80047ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047b0:	e002      	b.n	80047b8 <LoopCopyDataInit>

080047b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047b6:	3304      	adds	r3, #4

080047b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047bc:	d3f9      	bcc.n	80047b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80047c0:	4c0a      	ldr	r4, [pc, #40]	; (80047ec <LoopForever+0x16>)
  movs r3, #0
 80047c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047c4:	e001      	b.n	80047ca <LoopFillZerobss>

080047c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047c8:	3204      	adds	r2, #4

080047ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047cc:	d3fb      	bcc.n	80047c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047ce:	f003 fc59 	bl	8008084 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80047d2:	f7ff f849 	bl	8003868 <main>

080047d6 <LoopForever>:

LoopForever:
    b LoopForever
 80047d6:	e7fe      	b.n	80047d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80047d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80047dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047e0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80047e4:	08008cf0 	.word	0x08008cf0
  ldr r2, =_sbss
 80047e8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80047ec:	20000370 	.word	0x20000370

080047f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80047f0:	e7fe      	b.n	80047f0 <ADC1_2_IRQHandler>
	...

080047f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_Init+0x28>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a07      	ldr	r2, [pc, #28]	; (800481c <HAL_Init+0x28>)
 80047fe:	f043 0310 	orr.w	r3, r3, #16
 8004802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004804:	2003      	movs	r0, #3
 8004806:	f000 ff73 	bl	80056f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800480a:	200f      	movs	r0, #15
 800480c:	f000 f808 	bl	8004820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004810:	f7ff fd06 	bl	8004220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40022000 	.word	0x40022000

08004820 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004828:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_InitTick+0x54>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_InitTick+0x58>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	4619      	mov	r1, r3
 8004832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004836:	fbb3 f3f1 	udiv	r3, r3, r1
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	4618      	mov	r0, r3
 8004840:	f000 ff8b 	bl	800575a <HAL_SYSTICK_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e00e      	b.n	800486c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b0f      	cmp	r3, #15
 8004852:	d80a      	bhi.n	800486a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004854:	2200      	movs	r2, #0
 8004856:	6879      	ldr	r1, [r7, #4]
 8004858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800485c:	f000 ff53 	bl	8005706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004860:	4a06      	ldr	r2, [pc, #24]	; (800487c <HAL_InitTick+0x5c>)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000028 	.word	0x20000028
 8004878:	20000030 	.word	0x20000030
 800487c:	2000002c 	.word	0x2000002c

08004880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004884:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_IncTick+0x20>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_IncTick+0x24>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4413      	add	r3, r2
 8004890:	4a04      	ldr	r2, [pc, #16]	; (80048a4 <HAL_IncTick+0x24>)
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000030 	.word	0x20000030
 80048a4:	2000036c 	.word	0x2000036c

080048a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_GetTick+0x14>)
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	2000036c 	.word	0x2000036c

080048c0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048c8:	f7ff ffee 	bl	80048a8 <HAL_GetTick>
 80048cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d8:	d005      	beq.n	80048e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <HAL_Delay+0x44>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80048e6:	bf00      	nop
 80048e8:	f7ff ffde 	bl	80048a8 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d8f7      	bhi.n	80048e8 <HAL_Delay+0x28>
  {
  }
}
 80048f8:	bf00      	nop
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000030 	.word	0x20000030

08004908 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b09a      	sub	sp, #104	; 0x68
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e1c9      	b.n	8004cbc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	d176      	bne.n	8004a28 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d152      	bne.n	80049e8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff fc83 	bl	8004268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d13b      	bne.n	80049e8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fd87 	bl	8005484 <ADC_Disable>
 8004976:	4603      	mov	r3, r0
 8004978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	d12f      	bne.n	80049e8 <HAL_ADC_Init+0xe0>
 8004988:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800498c:	2b00      	cmp	r3, #0
 800498e:	d12b      	bne.n	80049e8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004998:	f023 0302 	bic.w	r3, r3, #2
 800499c:	f043 0202 	orr.w	r2, r3, #2
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049b2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049c4:	4b86      	ldr	r3, [pc, #536]	; (8004be0 <HAL_ADC_Init+0x2d8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a86      	ldr	r2, [pc, #536]	; (8004be4 <HAL_ADC_Init+0x2dc>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	0c9a      	lsrs	r2, r3, #18
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80049da:	e002      	b.n	80049e2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	3b01      	subs	r3, #1
 80049e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f9      	bne.n	80049dc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d007      	beq.n	8004a06 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a04:	d110      	bne.n	8004a28 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	f023 0312 	bic.w	r3, r3, #18
 8004a0e:	f043 0210 	orr.w	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	f043 0201 	orr.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f040 8136 	bne.w	8004ca2 <HAL_ADC_Init+0x39a>
 8004a36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f040 8131 	bne.w	8004ca2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 8129 	bne.w	8004ca2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004a58:	f043 0202 	orr.w	r2, r3, #2
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a68:	d004      	beq.n	8004a74 <HAL_ADC_Init+0x16c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a5e      	ldr	r2, [pc, #376]	; (8004be8 <HAL_ADC_Init+0x2e0>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_Init+0x170>
 8004a74:	4b5d      	ldr	r3, [pc, #372]	; (8004bec <HAL_ADC_Init+0x2e4>)
 8004a76:	e000      	b.n	8004a7a <HAL_ADC_Init+0x172>
 8004a78:	4b5d      	ldr	r3, [pc, #372]	; (8004bf0 <HAL_ADC_Init+0x2e8>)
 8004a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a84:	d102      	bne.n	8004a8c <HAL_ADC_Init+0x184>
 8004a86:	4b58      	ldr	r3, [pc, #352]	; (8004be8 <HAL_ADC_Init+0x2e0>)
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e01a      	b.n	8004ac2 <HAL_ADC_Init+0x1ba>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a55      	ldr	r2, [pc, #340]	; (8004be8 <HAL_ADC_Init+0x2e0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d103      	bne.n	8004a9e <HAL_ADC_Init+0x196>
 8004a96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e011      	b.n	8004ac2 <HAL_ADC_Init+0x1ba>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a54      	ldr	r2, [pc, #336]	; (8004bf4 <HAL_ADC_Init+0x2ec>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d102      	bne.n	8004aae <HAL_ADC_Init+0x1a6>
 8004aa8:	4b53      	ldr	r3, [pc, #332]	; (8004bf8 <HAL_ADC_Init+0x2f0>)
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e009      	b.n	8004ac2 <HAL_ADC_Init+0x1ba>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a51      	ldr	r2, [pc, #324]	; (8004bf8 <HAL_ADC_Init+0x2f0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d102      	bne.n	8004abe <HAL_ADC_Init+0x1b6>
 8004ab8:	4b4e      	ldr	r3, [pc, #312]	; (8004bf4 <HAL_ADC_Init+0x2ec>)
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e001      	b.n	8004ac2 <HAL_ADC_Init+0x1ba>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d108      	bne.n	8004ae2 <HAL_ADC_Init+0x1da>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_Init+0x1da>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_ADC_Init+0x1dc>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11c      	bne.n	8004b22 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d010      	beq.n	8004b10 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <HAL_ADC_Init+0x202>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_ADC_Init+0x202>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <HAL_ADC_Init+0x204>
 8004b0a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d108      	bne.n	8004b22 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b20:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7e5b      	ldrb	r3, [r3, #25]
 8004b26:	035b      	lsls	r3, r3, #13
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b2c:	2a01      	cmp	r2, #1
 8004b2e:	d002      	beq.n	8004b36 <HAL_ADC_Init+0x22e>
 8004b30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b34:	e000      	b.n	8004b38 <HAL_ADC_Init+0x230>
 8004b36:	2200      	movs	r2, #0
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d11b      	bne.n	8004b8e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	7e5b      	ldrb	r3, [r3, #25]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	3b01      	subs	r3, #1
 8004b64:	045a      	lsls	r2, r3, #17
 8004b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b70:	e00d      	b.n	8004b8e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004b7a:	f043 0220 	orr.w	r2, r3, #32
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	f043 0201 	orr.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d03a      	beq.n	8004c0c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <HAL_ADC_Init+0x2ec>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d004      	beq.n	8004baa <HAL_ADC_Init+0x2a2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <HAL_ADC_Init+0x2f0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d128      	bne.n	8004bfc <HAL_ADC_Init+0x2f4>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004bb2:	d012      	beq.n	8004bda <HAL_ADC_Init+0x2d2>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbc:	d00a      	beq.n	8004bd4 <HAL_ADC_Init+0x2cc>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004bc6:	d002      	beq.n	8004bce <HAL_ADC_Init+0x2c6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	e018      	b.n	8004c00 <HAL_ADC_Init+0x2f8>
 8004bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bd2:	e015      	b.n	8004c00 <HAL_ADC_Init+0x2f8>
 8004bd4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004bd8:	e012      	b.n	8004c00 <HAL_ADC_Init+0x2f8>
 8004bda:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004bde:	e00f      	b.n	8004c00 <HAL_ADC_Init+0x2f8>
 8004be0:	20000028 	.word	0x20000028
 8004be4:	431bde83 	.word	0x431bde83
 8004be8:	50000100 	.word	0x50000100
 8004bec:	50000300 	.word	0x50000300
 8004bf0:	50000700 	.word	0x50000700
 8004bf4:	50000400 	.word	0x50000400
 8004bf8:	50000500 	.word	0x50000500
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c04:	4313      	orrs	r3, r2
 8004c06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 030c 	and.w	r3, r3, #12
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d114      	bne.n	8004c44 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c28:	f023 0302 	bic.w	r3, r3, #2
 8004c2c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	7e1b      	ldrb	r3, [r3, #24]
 8004c32:	039a      	lsls	r2, r3, #14
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c40:	4313      	orrs	r3, r2
 8004c42:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	4b1e      	ldr	r3, [pc, #120]	; (8004cc4 <HAL_ADC_Init+0x3bc>)
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c54:	430b      	orrs	r3, r1
 8004c56:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d10c      	bne.n	8004c7a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	f023 010f 	bic.w	r1, r3, #15
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
 8004c78:	e007      	b.n	8004c8a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 020f 	bic.w	r2, r2, #15
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f023 0303 	bic.w	r3, r3, #3
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40
 8004ca0:	e00a      	b.n	8004cb8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f023 0312 	bic.w	r3, r3, #18
 8004caa:	f043 0210 	orr.w	r2, r3, #16
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004cb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3768      	adds	r7, #104	; 0x68
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	fff0c007 	.word	0xfff0c007

08004cc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b09b      	sub	sp, #108	; 0x6c
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x22>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e2ca      	b.n	8005280 <HAL_ADC_ConfigChannel+0x5b8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 82ae 	bne.w	800525e <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d81c      	bhi.n	8004d44 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	231f      	movs	r3, #31
 8004d20:	4093      	lsls	r3, r2
 8004d22:	43db      	mvns	r3, r3
 8004d24:	4019      	ands	r1, r3
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4413      	add	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	fa00 f203 	lsl.w	r2, r0, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
 8004d42:	e063      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b09      	cmp	r3, #9
 8004d4a:	d81e      	bhi.n	8004d8a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	3b1e      	subs	r3, #30
 8004d60:	221f      	movs	r2, #31
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	43db      	mvns	r3, r3
 8004d68:	4019      	ands	r1, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	005b      	lsls	r3, r3, #1
 8004d76:	4413      	add	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	3b1e      	subs	r3, #30
 8004d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34
 8004d88:	e040      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b0e      	cmp	r3, #14
 8004d90:	d81e      	bhi.n	8004dd0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	4413      	add	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	3b3c      	subs	r3, #60	; 0x3c
 8004da6:	221f      	movs	r2, #31
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	4019      	ands	r1, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	4413      	add	r3, r2
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	3b3c      	subs	r3, #60	; 0x3c
 8004dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8004dce:	e01d      	b.n	8004e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	4413      	add	r3, r2
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	3b5a      	subs	r3, #90	; 0x5a
 8004de4:	221f      	movs	r2, #31
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43db      	mvns	r3, r3
 8004dec:	4019      	ands	r1, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	3b5a      	subs	r3, #90	; 0x5a
 8004e00:	fa00 f203 	lsl.w	r2, r0, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 030c 	and.w	r3, r3, #12
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f040 80e5 	bne.w	8004fe6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b09      	cmp	r3, #9
 8004e22:	d91c      	bls.n	8004e5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6999      	ldr	r1, [r3, #24]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4413      	add	r3, r2
 8004e34:	3b1e      	subs	r3, #30
 8004e36:	2207      	movs	r2, #7
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	43db      	mvns	r3, r3
 8004e3e:	4019      	ands	r1, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6898      	ldr	r0, [r3, #8]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3b1e      	subs	r3, #30
 8004e50:	fa00 f203 	lsl.w	r2, r0, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	619a      	str	r2, [r3, #24]
 8004e5c:	e019      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6959      	ldr	r1, [r3, #20]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	2207      	movs	r2, #7
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	43db      	mvns	r3, r3
 8004e76:	4019      	ands	r1, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6898      	ldr	r0, [r3, #8]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4613      	mov	r3, r2
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4413      	add	r3, r2
 8004e86:	fa00 f203 	lsl.w	r2, r0, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	08db      	lsrs	r3, r3, #3
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d84f      	bhi.n	8004f54 <HAL_ADC_ConfigChannel+0x28c>
 8004eb4:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <HAL_ADC_ConfigChannel+0x1f4>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004ecd 	.word	0x08004ecd
 8004ec0:	08004eef 	.word	0x08004eef
 8004ec4:	08004f11 	.word	0x08004f11
 8004ec8:	08004f33 	.word	0x08004f33
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ed2:	4b9a      	ldr	r3, [pc, #616]	; (800513c <HAL_ADC_ConfigChannel+0x474>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	6812      	ldr	r2, [r2, #0]
 8004eda:	0691      	lsls	r1, r2, #26
 8004edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004eea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004eec:	e07e      	b.n	8004fec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ef4:	4b91      	ldr	r3, [pc, #580]	; (800513c <HAL_ADC_ConfigChannel+0x474>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	0691      	lsls	r1, r2, #26
 8004efe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f00:	430a      	orrs	r2, r1
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f0c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f0e:	e06d      	b.n	8004fec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f16:	4b89      	ldr	r3, [pc, #548]	; (800513c <HAL_ADC_ConfigChannel+0x474>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	6812      	ldr	r2, [r2, #0]
 8004f1e:	0691      	lsls	r1, r2, #26
 8004f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f22:	430a      	orrs	r2, r1
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f2e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f30:	e05c      	b.n	8004fec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f38:	4b80      	ldr	r3, [pc, #512]	; (800513c <HAL_ADC_ConfigChannel+0x474>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	0691      	lsls	r1, r2, #26
 8004f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f44:	430a      	orrs	r2, r1
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f50:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004f52:	e04b      	b.n	8004fec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	069b      	lsls	r3, r3, #26
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d107      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f76:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	069b      	lsls	r3, r3, #26
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d107      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f9a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	069b      	lsls	r3, r3, #26
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d107      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fbe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	069b      	lsls	r3, r3, #26
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d10a      	bne.n	8004fea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fe2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004fe4:	e001      	b.n	8004fea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <HAL_ADC_ConfigChannel+0x324>
      break;
 8004fea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d108      	bne.n	800500c <HAL_ADC_ConfigChannel+0x344>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d101      	bne.n	800500c <HAL_ADC_ConfigChannel+0x344>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_ADC_ConfigChannel+0x346>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 8130 	bne.w	8005274 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d00f      	beq.n	800503c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2201      	movs	r2, #1
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43da      	mvns	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	400a      	ands	r2, r1
 8005036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800503a:	e049      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2201      	movs	r2, #1
 800504a:	409a      	lsls	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b09      	cmp	r3, #9
 800505c:	d91c      	bls.n	8005098 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6999      	ldr	r1, [r3, #24]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4613      	mov	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	4413      	add	r3, r2
 800506e:	3b1b      	subs	r3, #27
 8005070:	2207      	movs	r2, #7
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	4019      	ands	r1, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	6898      	ldr	r0, [r3, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	3b1b      	subs	r3, #27
 800508a:	fa00 f203 	lsl.w	r2, r0, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	619a      	str	r2, [r3, #24]
 8005096:	e01b      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6959      	ldr	r1, [r3, #20]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	2207      	movs	r2, #7
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	4019      	ands	r1, r3
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6898      	ldr	r0, [r3, #8]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	4613      	mov	r3, r2
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	4413      	add	r3, r2
 80050c4:	fa00 f203 	lsl.w	r2, r0, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80050d8:	d004      	beq.n	80050e4 <HAL_ADC_ConfigChannel+0x41c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_ADC_ConfigChannel+0x478>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d101      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x420>
 80050e4:	4b17      	ldr	r3, [pc, #92]	; (8005144 <HAL_ADC_ConfigChannel+0x47c>)
 80050e6:	e000      	b.n	80050ea <HAL_ADC_ConfigChannel+0x422>
 80050e8:	4b17      	ldr	r3, [pc, #92]	; (8005148 <HAL_ADC_ConfigChannel+0x480>)
 80050ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d105      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80050f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d015      	beq.n	800512c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005104:	2b11      	cmp	r3, #17
 8005106:	d105      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00b      	beq.n	800512c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005118:	2b12      	cmp	r3, #18
 800511a:	f040 80ab 	bne.w	8005274 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800511e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005126:	2b00      	cmp	r3, #0
 8005128:	f040 80a4 	bne.w	8005274 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005134:	d10a      	bne.n	800514c <HAL_ADC_ConfigChannel+0x484>
 8005136:	4b02      	ldr	r3, [pc, #8]	; (8005140 <HAL_ADC_ConfigChannel+0x478>)
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	e022      	b.n	8005182 <HAL_ADC_ConfigChannel+0x4ba>
 800513c:	83fff000 	.word	0x83fff000
 8005140:	50000100 	.word	0x50000100
 8005144:	50000300 	.word	0x50000300
 8005148:	50000700 	.word	0x50000700
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a4e      	ldr	r2, [pc, #312]	; (800528c <HAL_ADC_ConfigChannel+0x5c4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d103      	bne.n	800515e <HAL_ADC_ConfigChannel+0x496>
 8005156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e011      	b.n	8005182 <HAL_ADC_ConfigChannel+0x4ba>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a4b      	ldr	r2, [pc, #300]	; (8005290 <HAL_ADC_ConfigChannel+0x5c8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d102      	bne.n	800516e <HAL_ADC_ConfigChannel+0x4a6>
 8005168:	4b4a      	ldr	r3, [pc, #296]	; (8005294 <HAL_ADC_ConfigChannel+0x5cc>)
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e009      	b.n	8005182 <HAL_ADC_ConfigChannel+0x4ba>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a48      	ldr	r2, [pc, #288]	; (8005294 <HAL_ADC_ConfigChannel+0x5cc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d102      	bne.n	800517e <HAL_ADC_ConfigChannel+0x4b6>
 8005178:	4b45      	ldr	r3, [pc, #276]	; (8005290 <HAL_ADC_ConfigChannel+0x5c8>)
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	e001      	b.n	8005182 <HAL_ADC_ConfigChannel+0x4ba>
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d108      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x4da>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x4da>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <HAL_ADC_ConfigChannel+0x4dc>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d150      	bne.n	800524a <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80051a8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d010      	beq.n	80051d0 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 0303 	and.w	r3, r3, #3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d107      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x502>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x502>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <HAL_ADC_ConfigChannel+0x504>
 80051ca:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d13c      	bne.n	800524a <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d11d      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x54c>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051e0:	d118      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80051e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ec:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051ee:	4b2a      	ldr	r3, [pc, #168]	; (8005298 <HAL_ADC_ConfigChannel+0x5d0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2a      	ldr	r2, [pc, #168]	; (800529c <HAL_ADC_ConfigChannel+0x5d4>)
 80051f4:	fba2 2303 	umull	r2, r3, r2, r3
 80051f8:	0c9a      	lsrs	r2, r3, #18
 80051fa:	4613      	mov	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005204:	e002      	b.n	800520c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	3b01      	subs	r3, #1
 800520a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f9      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005212:	e02e      	b.n	8005272 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b11      	cmp	r3, #17
 800521a:	d10b      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x56c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005224:	d106      	bne.n	8005234 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800522e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005230:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005232:	e01e      	b.n	8005272 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b12      	cmp	r3, #18
 800523a:	d11a      	bne.n	8005272 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800523c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005246:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005248:	e013      	b.n	8005272 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f043 0220 	orr.w	r2, r3, #32
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800525c:	e00a      	b.n	8005274 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f043 0220 	orr.w	r2, r3, #32
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005270:	e000      	b.n	8005274 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005272:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800527c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005280:	4618      	mov	r0, r3
 8005282:	376c      	adds	r7, #108	; 0x6c
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	50000100 	.word	0x50000100
 8005290:	50000400 	.word	0x50000400
 8005294:	50000500 	.word	0x50000500
 8005298:	20000028 	.word	0x20000028
 800529c:	431bde83 	.word	0x431bde83

080052a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b099      	sub	sp, #100	; 0x64
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052b8:	d102      	bne.n	80052c0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80052ba:	4b6d      	ldr	r3, [pc, #436]	; (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	e01a      	b.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a6a      	ldr	r2, [pc, #424]	; (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d103      	bne.n	80052d2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80052ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80052ce:	60bb      	str	r3, [r7, #8]
 80052d0:	e011      	b.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a67      	ldr	r2, [pc, #412]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d102      	bne.n	80052e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80052dc:	4b66      	ldr	r3, [pc, #408]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80052de:	60bb      	str	r3, [r7, #8]
 80052e0:	e009      	b.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a64      	ldr	r2, [pc, #400]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d102      	bne.n	80052f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80052ec:	4b61      	ldr	r3, [pc, #388]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	e001      	b.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80052f2:	2300      	movs	r3, #0
 80052f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e0b0      	b.n	8005462 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800530a:	2302      	movs	r3, #2
 800530c:	e0a9      	b.n	8005462 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 808d 	bne.w	8005440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	f040 8086 	bne.w	8005440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800533c:	d004      	beq.n	8005348 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a4b      	ldr	r2, [pc, #300]	; (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d101      	bne.n	800534c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005348:	4b4c      	ldr	r3, [pc, #304]	; (800547c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800534a:	e000      	b.n	800534e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800534c:	4b4c      	ldr	r3, [pc, #304]	; (8005480 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800534e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d040      	beq.n	80053da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800536a:	035b      	lsls	r3, r3, #13
 800536c:	430b      	orrs	r3, r1
 800536e:	431a      	orrs	r2, r3
 8005370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005372:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	2b01      	cmp	r3, #1
 8005380:	d108      	bne.n	8005394 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005394:	2300      	movs	r3, #0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d15c      	bne.n	8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d107      	bne.n	80053b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80053b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d14b      	bne.n	8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80053bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80053c4:	f023 030f 	bic.w	r3, r3, #15
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	6811      	ldr	r1, [r2, #0]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	6892      	ldr	r2, [r2, #8]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	431a      	orrs	r2, r3
 80053d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80053d8:	e03c      	b.n	8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80053da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d108      	bne.n	8005406 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d123      	bne.n	8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005428:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800542a:	2b00      	cmp	r3, #0
 800542c:	d112      	bne.n	8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800542e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005436:	f023 030f 	bic.w	r3, r3, #15
 800543a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800543c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800543e:	e009      	b.n	8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	f043 0220 	orr.w	r2, r3, #32
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005452:	e000      	b.n	8005456 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005454:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800545e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005462:	4618      	mov	r0, r3
 8005464:	3764      	adds	r7, #100	; 0x64
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	50000100 	.word	0x50000100
 8005474:	50000400 	.word	0x50000400
 8005478:	50000500 	.word	0x50000500
 800547c:	50000300 	.word	0x50000300
 8005480:	50000700 	.word	0x50000700

08005484 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	2b01      	cmp	r3, #1
 800549c:	d108      	bne.n	80054b0 <ADC_Disable+0x2c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <ADC_Disable+0x2c>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e000      	b.n	80054b2 <ADC_Disable+0x2e>
 80054b0:	2300      	movs	r3, #0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d047      	beq.n	8005546 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 030d 	and.w	r3, r3, #13
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d10f      	bne.n	80054e4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0202 	orr.w	r2, r2, #2
 80054d2:	609a      	str	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2203      	movs	r2, #3
 80054da:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80054dc:	f7ff f9e4 	bl	80048a8 <HAL_GetTick>
 80054e0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80054e2:	e029      	b.n	8005538 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	f043 0210 	orr.w	r2, r3, #16
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f4:	f043 0201 	orr.w	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e023      	b.n	8005548 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005500:	f7ff f9d2 	bl	80048a8 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d914      	bls.n	8005538 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10d      	bne.n	8005538 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	f043 0210 	orr.w	r2, r3, #16
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552c:	f043 0201 	orr.w	r2, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e007      	b.n	8005548 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b01      	cmp	r3, #1
 8005544:	d0dc      	beq.n	8005500 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005560:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <__NVIC_SetPriorityGrouping+0x44>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800556c:	4013      	ands	r3, r2
 800556e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800557c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005582:	4a04      	ldr	r2, [pc, #16]	; (8005594 <__NVIC_SetPriorityGrouping+0x44>)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	60d3      	str	r3, [r2, #12]
}
 8005588:	bf00      	nop
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	e000ed00 	.word	0xe000ed00

08005598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <__NVIC_GetPriorityGrouping+0x18>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	0a1b      	lsrs	r3, r3, #8
 80055a2:	f003 0307 	and.w	r3, r3, #7
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	e000ed00 	.word	0xe000ed00

080055b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	db0b      	blt.n	80055de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	f003 021f 	and.w	r2, r3, #31
 80055cc:	4907      	ldr	r1, [pc, #28]	; (80055ec <__NVIC_EnableIRQ+0x38>)
 80055ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	2001      	movs	r0, #1
 80055d6:	fa00 f202 	lsl.w	r2, r0, r2
 80055da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	e000e100 	.word	0xe000e100

080055f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	6039      	str	r1, [r7, #0]
 80055fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005600:	2b00      	cmp	r3, #0
 8005602:	db0a      	blt.n	800561a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	490c      	ldr	r1, [pc, #48]	; (800563c <__NVIC_SetPriority+0x4c>)
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	440b      	add	r3, r1
 8005614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005618:	e00a      	b.n	8005630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	4908      	ldr	r1, [pc, #32]	; (8005640 <__NVIC_SetPriority+0x50>)
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	3b04      	subs	r3, #4
 8005628:	0112      	lsls	r2, r2, #4
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	440b      	add	r3, r1
 800562e:	761a      	strb	r2, [r3, #24]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	e000e100 	.word	0xe000e100
 8005640:	e000ed00 	.word	0xe000ed00

08005644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f1c3 0307 	rsb	r3, r3, #7
 800565e:	2b04      	cmp	r3, #4
 8005660:	bf28      	it	cs
 8005662:	2304      	movcs	r3, #4
 8005664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3304      	adds	r3, #4
 800566a:	2b06      	cmp	r3, #6
 800566c:	d902      	bls.n	8005674 <NVIC_EncodePriority+0x30>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3b03      	subs	r3, #3
 8005672:	e000      	b.n	8005676 <NVIC_EncodePriority+0x32>
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43da      	mvns	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	401a      	ands	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800568c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	43d9      	mvns	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800569c:	4313      	orrs	r3, r2
         );
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3724      	adds	r7, #36	; 0x24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
	...

080056ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056bc:	d301      	bcc.n	80056c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056be:	2301      	movs	r3, #1
 80056c0:	e00f      	b.n	80056e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056c2:	4a0a      	ldr	r2, [pc, #40]	; (80056ec <SysTick_Config+0x40>)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ca:	210f      	movs	r1, #15
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056d0:	f7ff ff8e 	bl	80055f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056d4:	4b05      	ldr	r3, [pc, #20]	; (80056ec <SysTick_Config+0x40>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056da:	4b04      	ldr	r3, [pc, #16]	; (80056ec <SysTick_Config+0x40>)
 80056dc:	2207      	movs	r2, #7
 80056de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	e000e010 	.word	0xe000e010

080056f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ff29 	bl	8005550 <__NVIC_SetPriorityGrouping>
}
 80056fe:	bf00      	nop
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b086      	sub	sp, #24
 800570a:	af00      	add	r7, sp, #0
 800570c:	4603      	mov	r3, r0
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005718:	f7ff ff3e 	bl	8005598 <__NVIC_GetPriorityGrouping>
 800571c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	6978      	ldr	r0, [r7, #20]
 8005724:	f7ff ff8e 	bl	8005644 <NVIC_EncodePriority>
 8005728:	4602      	mov	r2, r0
 800572a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800572e:	4611      	mov	r1, r2
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff ff5d 	bl	80055f0 <__NVIC_SetPriority>
}
 8005736:	bf00      	nop
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	4603      	mov	r3, r0
 8005746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff ff31 	bl	80055b4 <__NVIC_EnableIRQ>
}
 8005752:	bf00      	nop
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff ffa2 	bl	80056ac <SysTick_Config>
 8005768:	4603      	mov	r3, r0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800577e:	2300      	movs	r3, #0
 8005780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005782:	e154      	b.n	8005a2e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2101      	movs	r1, #1
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	4013      	ands	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8146 	beq.w	8005a28 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d005      	beq.n	80057b4 <HAL_GPIO_Init+0x40>
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d130      	bne.n	8005816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	2203      	movs	r2, #3
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	43db      	mvns	r3, r3
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	4313      	orrs	r3, r2
 80057dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057ea:	2201      	movs	r2, #1
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4013      	ands	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	091b      	lsrs	r3, r3, #4
 8005800:	f003 0201 	and.w	r2, r3, #1
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	fa02 f303 	lsl.w	r3, r2, r3
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b03      	cmp	r3, #3
 8005820:	d017      	beq.n	8005852 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2203      	movs	r2, #3
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d123      	bne.n	80058a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	08da      	lsrs	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3208      	adds	r2, #8
 8005866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800586a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	220f      	movs	r2, #15
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43db      	mvns	r3, r3
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4013      	ands	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	691a      	ldr	r2, [r3, #16]
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	08da      	lsrs	r2, r3, #3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3208      	adds	r2, #8
 80058a0:	6939      	ldr	r1, [r7, #16]
 80058a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	2203      	movs	r2, #3
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	43db      	mvns	r3, r3
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4013      	ands	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f003 0203 	and.w	r2, r3, #3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80a0 	beq.w	8005a28 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e8:	4b58      	ldr	r3, [pc, #352]	; (8005a4c <HAL_GPIO_Init+0x2d8>)
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	4a57      	ldr	r2, [pc, #348]	; (8005a4c <HAL_GPIO_Init+0x2d8>)
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	6193      	str	r3, [r2, #24]
 80058f4:	4b55      	ldr	r3, [pc, #340]	; (8005a4c <HAL_GPIO_Init+0x2d8>)
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005900:	4a53      	ldr	r2, [pc, #332]	; (8005a50 <HAL_GPIO_Init+0x2dc>)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	089b      	lsrs	r3, r3, #2
 8005906:	3302      	adds	r3, #2
 8005908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800590c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	220f      	movs	r2, #15
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	43db      	mvns	r3, r3
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4013      	ands	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800592a:	d019      	beq.n	8005960 <HAL_GPIO_Init+0x1ec>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a49      	ldr	r2, [pc, #292]	; (8005a54 <HAL_GPIO_Init+0x2e0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <HAL_GPIO_Init+0x1e8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a48      	ldr	r2, [pc, #288]	; (8005a58 <HAL_GPIO_Init+0x2e4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00d      	beq.n	8005958 <HAL_GPIO_Init+0x1e4>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a47      	ldr	r2, [pc, #284]	; (8005a5c <HAL_GPIO_Init+0x2e8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <HAL_GPIO_Init+0x1e0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a46      	ldr	r2, [pc, #280]	; (8005a60 <HAL_GPIO_Init+0x2ec>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d101      	bne.n	8005950 <HAL_GPIO_Init+0x1dc>
 800594c:	2304      	movs	r3, #4
 800594e:	e008      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 8005950:	2305      	movs	r3, #5
 8005952:	e006      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 8005954:	2303      	movs	r3, #3
 8005956:	e004      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 8005958:	2302      	movs	r3, #2
 800595a:	e002      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <HAL_GPIO_Init+0x1ee>
 8005960:	2300      	movs	r3, #0
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	f002 0203 	and.w	r2, r2, #3
 8005968:	0092      	lsls	r2, r2, #2
 800596a:	4093      	lsls	r3, r2
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005972:	4937      	ldr	r1, [pc, #220]	; (8005a50 <HAL_GPIO_Init+0x2dc>)
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	089b      	lsrs	r3, r3, #2
 8005978:	3302      	adds	r3, #2
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005980:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	43db      	mvns	r3, r3
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059a4:	4a2f      	ldr	r2, [pc, #188]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059aa:	4b2e      	ldr	r3, [pc, #184]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	43db      	mvns	r3, r3
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4013      	ands	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80059ce:	4a25      	ldr	r2, [pc, #148]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059d4:	4b23      	ldr	r3, [pc, #140]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	43db      	mvns	r3, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4013      	ands	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80059f8:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059fe:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a22:	4a10      	ldr	r2, [pc, #64]	; (8005a64 <HAL_GPIO_Init+0x2f0>)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	fa22 f303 	lsr.w	r3, r2, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f47f aea3 	bne.w	8005784 <HAL_GPIO_Init+0x10>
  }
}
 8005a3e:	bf00      	nop
 8005a40:	bf00      	nop
 8005a42:	371c      	adds	r7, #28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40010000 	.word	0x40010000
 8005a54:	48000400 	.word	0x48000400
 8005a58:	48000800 	.word	0x48000800
 8005a5c:	48000c00 	.word	0x48000c00
 8005a60:	48001000 	.word	0x48001000
 8005a64:	40010400 	.word	0x40010400

08005a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a72:	4b08      	ldr	r3, [pc, #32]	; (8005a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a74:	695a      	ldr	r2, [r3, #20]
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d006      	beq.n	8005a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a7e:	4a05      	ldr	r2, [pc, #20]	; (8005a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fd fed8 	bl	800383c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40010400 	.word	0x40010400

08005a98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e081      	b.n	8005bae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fe fcc0 	bl	8004444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2224      	movs	r2, #36	; 0x24
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0201 	bic.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ae8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005af8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d107      	bne.n	8005b12 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	e006      	b.n	8005b20 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005b1e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d104      	bne.n	8005b32 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69d9      	ldr	r1, [r3, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	817b      	strh	r3, [r7, #10]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	f040 80da 	bne.w	8005d8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_I2C_Master_Transmit+0x30>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0d3      	b.n	8005d90 <HAL_I2C_Master_Transmit+0x1d8>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bf0:	f7fe fe5a 	bl	80048a8 <HAL_GetTick>
 8005bf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	2319      	movs	r3, #25
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 fbe0 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e0be      	b.n	8005d90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2221      	movs	r2, #33	; 0x21
 8005c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	893a      	ldrh	r2, [r7, #8]
 8005c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2bff      	cmp	r3, #255	; 0xff
 8005c42:	d90e      	bls.n	8005c62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	22ff      	movs	r2, #255	; 0xff
 8005c48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	8979      	ldrh	r1, [r7, #10]
 8005c52:	4b51      	ldr	r3, [pc, #324]	; (8005d98 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fd6e 	bl	800673c <I2C_TransferConfig>
 8005c60:	e06c      	b.n	8005d3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	8979      	ldrh	r1, [r7, #10]
 8005c74:	4b48      	ldr	r3, [pc, #288]	; (8005d98 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 fd5d 	bl	800673c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c82:	e05b      	b.n	8005d3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	6a39      	ldr	r1, [r7, #32]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 fbec 	bl	8006466 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e07b      	b.n	8005d90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	781a      	ldrb	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d034      	beq.n	8005d3c <HAL_I2C_Master_Transmit+0x184>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d130      	bne.n	8005d3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2180      	movs	r1, #128	; 0x80
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 fb6f 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e04d      	b.n	8005d90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2bff      	cmp	r3, #255	; 0xff
 8005cfc:	d90e      	bls.n	8005d1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	8979      	ldrh	r1, [r7, #10]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fd11 	bl	800673c <I2C_TransferConfig>
 8005d1a:	e00f      	b.n	8005d3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d20:	b29a      	uxth	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	8979      	ldrh	r1, [r7, #10]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fd00 	bl	800673c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d19e      	bne.n	8005c84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	6a39      	ldr	r1, [r7, #32]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fbd2 	bl	80064f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e01a      	b.n	8005d90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6859      	ldr	r1, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <HAL_I2C_Master_Transmit+0x1e4>)
 8005d6e:	400b      	ands	r3, r1
 8005d70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e000      	b.n	8005d90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005d8e:	2302      	movs	r3, #2
  }
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	80002000 	.word	0x80002000
 8005d9c:	fe00e800 	.word	0xfe00e800

08005da0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b088      	sub	sp, #32
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	461a      	mov	r2, r3
 8005dae:	4603      	mov	r3, r0
 8005db0:	817b      	strh	r3, [r7, #10]
 8005db2:	460b      	mov	r3, r1
 8005db4:	813b      	strh	r3, [r7, #8]
 8005db6:	4613      	mov	r3, r2
 8005db8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	f040 80f9 	bne.w	8005fba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <HAL_I2C_Mem_Write+0x34>
 8005dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d105      	bne.n	8005de0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e0ed      	b.n	8005fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_I2C_Mem_Write+0x4e>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e0e6      	b.n	8005fbc <HAL_I2C_Mem_Write+0x21c>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005df6:	f7fe fd57 	bl	80048a8 <HAL_GetTick>
 8005dfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	2319      	movs	r3, #25
 8005e02:	2201      	movs	r2, #1
 8005e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 fadd 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0d1      	b.n	8005fbc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2221      	movs	r2, #33	; 0x21
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2240      	movs	r2, #64	; 0x40
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a3a      	ldr	r2, [r7, #32]
 8005e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e40:	88f8      	ldrh	r0, [r7, #6]
 8005e42:	893a      	ldrh	r2, [r7, #8]
 8005e44:	8979      	ldrh	r1, [r7, #10]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	4603      	mov	r3, r0
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f9ed 	bl	8006230 <I2C_RequestMemoryWrite>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e0a9      	b.n	8005fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2bff      	cmp	r3, #255	; 0xff
 8005e70:	d90e      	bls.n	8005e90 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	22ff      	movs	r2, #255	; 0xff
 8005e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	8979      	ldrh	r1, [r7, #10]
 8005e80:	2300      	movs	r3, #0
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 fc57 	bl	800673c <I2C_TransferConfig>
 8005e8e:	e00f      	b.n	8005eb0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	8979      	ldrh	r1, [r7, #10]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 fc46 	bl	800673c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f000 fad6 	bl	8006466 <I2C_WaitOnTXISFlagUntilTimeout>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e07b      	b.n	8005fbc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	781a      	ldrb	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d034      	beq.n	8005f68 <HAL_I2C_Mem_Write+0x1c8>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d130      	bne.n	8005f68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2180      	movs	r1, #128	; 0x80
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fa59 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e04d      	b.n	8005fbc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2bff      	cmp	r3, #255	; 0xff
 8005f28:	d90e      	bls.n	8005f48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	22ff      	movs	r2, #255	; 0xff
 8005f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	8979      	ldrh	r1, [r7, #10]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 fbfb 	bl	800673c <I2C_TransferConfig>
 8005f46:	e00f      	b.n	8005f68 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	8979      	ldrh	r1, [r7, #10]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 fbea 	bl	800673c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d19e      	bne.n	8005eb0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fabc 	bl	80064f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e01a      	b.n	8005fbc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6859      	ldr	r1, [r3, #4]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <HAL_I2C_Mem_Write+0x224>)
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2220      	movs	r2, #32
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	e000      	b.n	8005fbc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005fba:	2302      	movs	r3, #2
  }
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3718      	adds	r7, #24
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	fe00e800 	.word	0xfe00e800

08005fc8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af02      	add	r7, sp, #8
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	817b      	strh	r3, [r7, #10]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	813b      	strh	r3, [r7, #8]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b20      	cmp	r3, #32
 8005fec:	f040 80fd 	bne.w	80061ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_I2C_Mem_Read+0x34>
 8005ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006002:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0f1      	b.n	80061ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_I2C_Mem_Read+0x4e>
 8006012:	2302      	movs	r3, #2
 8006014:	e0ea      	b.n	80061ec <HAL_I2C_Mem_Read+0x224>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800601e:	f7fe fc43 	bl	80048a8 <HAL_GetTick>
 8006022:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	2319      	movs	r3, #25
 800602a:	2201      	movs	r2, #1
 800602c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f9c9 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0d5      	b.n	80061ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2222      	movs	r2, #34	; 0x22
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006068:	88f8      	ldrh	r0, [r7, #6]
 800606a:	893a      	ldrh	r2, [r7, #8]
 800606c:	8979      	ldrh	r1, [r7, #10]
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	9301      	str	r3, [sp, #4]
 8006072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	4603      	mov	r3, r0
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f92d 	bl	80062d8 <I2C_RequestMemoryRead>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d005      	beq.n	8006090 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0ad      	b.n	80061ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2bff      	cmp	r3, #255	; 0xff
 8006098:	d90e      	bls.n	80060b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	22ff      	movs	r2, #255	; 0xff
 800609e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	8979      	ldrh	r1, [r7, #10]
 80060a8:	4b52      	ldr	r3, [pc, #328]	; (80061f4 <HAL_I2C_Mem_Read+0x22c>)
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fb43 	bl	800673c <I2C_TransferConfig>
 80060b6:	e00f      	b.n	80060d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	8979      	ldrh	r1, [r7, #10]
 80060ca:	4b4a      	ldr	r3, [pc, #296]	; (80061f4 <HAL_I2C_Mem_Read+0x22c>)
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fb32 	bl	800673c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	2200      	movs	r2, #0
 80060e0:	2104      	movs	r1, #4
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f970 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e07c      	b.n	80061ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d034      	beq.n	8006198 <HAL_I2C_Mem_Read+0x1d0>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b00      	cmp	r3, #0
 8006134:	d130      	bne.n	8006198 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	2200      	movs	r2, #0
 800613e:	2180      	movs	r1, #128	; 0x80
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f941 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e04d      	b.n	80061ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	2bff      	cmp	r3, #255	; 0xff
 8006158:	d90e      	bls.n	8006178 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	22ff      	movs	r2, #255	; 0xff
 800615e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	b2da      	uxtb	r2, r3
 8006166:	8979      	ldrh	r1, [r7, #10]
 8006168:	2300      	movs	r3, #0
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 fae3 	bl	800673c <I2C_TransferConfig>
 8006176:	e00f      	b.n	8006198 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006186:	b2da      	uxtb	r2, r3
 8006188:	8979      	ldrh	r1, [r7, #10]
 800618a:	2300      	movs	r3, #0
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fad2 	bl	800673c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d19a      	bne.n	80060d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f9a4 	bl	80064f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e01a      	b.n	80061ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2220      	movs	r2, #32
 80061bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <HAL_I2C_Mem_Read+0x230>)
 80061ca:	400b      	ands	r3, r1
 80061cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e000      	b.n	80061ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80061ea:	2302      	movs	r3, #2
  }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	80002400 	.word	0x80002400
 80061f8:	fe00e800 	.word	0xfe00e800

080061fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	4798      	blx	r3
  }
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	4608      	mov	r0, r1
 800623a:	4611      	mov	r1, r2
 800623c:	461a      	mov	r2, r3
 800623e:	4603      	mov	r3, r0
 8006240:	817b      	strh	r3, [r7, #10]
 8006242:	460b      	mov	r3, r1
 8006244:	813b      	strh	r3, [r7, #8]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	8979      	ldrh	r1, [r7, #10]
 8006250:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <I2C_RequestMemoryWrite+0xa4>)
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fa6f 	bl	800673c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	69b9      	ldr	r1, [r7, #24]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 f8ff 	bl	8006466 <I2C_WaitOnTXISFlagUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e02c      	b.n	80062cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d105      	bne.n	8006284 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	629a      	str	r2, [r3, #40]	; 0x28
 8006282:	e015      	b.n	80062b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006284:	893b      	ldrh	r3, [r7, #8]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	b29b      	uxth	r3, r3
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	69b9      	ldr	r1, [r7, #24]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f8e5 	bl	8006466 <I2C_WaitOnTXISFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e012      	b.n	80062cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062a6:	893b      	ldrh	r3, [r7, #8]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2200      	movs	r2, #0
 80062b8:	2180      	movs	r1, #128	; 0x80
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 f884 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e000      	b.n	80062cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	80002000 	.word	0x80002000

080062d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	461a      	mov	r2, r3
 80062e6:	4603      	mov	r3, r0
 80062e8:	817b      	strh	r3, [r7, #10]
 80062ea:	460b      	mov	r3, r1
 80062ec:	813b      	strh	r3, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80062f2:	88fb      	ldrh	r3, [r7, #6]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	8979      	ldrh	r1, [r7, #10]
 80062f8:	4b20      	ldr	r3, [pc, #128]	; (800637c <I2C_RequestMemoryRead+0xa4>)
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	2300      	movs	r3, #0
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 fa1c 	bl	800673c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	69b9      	ldr	r1, [r7, #24]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f8ac 	bl	8006466 <I2C_WaitOnTXISFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e02c      	b.n	8006372 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d105      	bne.n	800632a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800631e:	893b      	ldrh	r3, [r7, #8]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	629a      	str	r2, [r3, #40]	; 0x28
 8006328:	e015      	b.n	8006356 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800632a:	893b      	ldrh	r3, [r7, #8]
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	b29b      	uxth	r3, r3
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	69b9      	ldr	r1, [r7, #24]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f892 	bl	8006466 <I2C_WaitOnTXISFlagUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e012      	b.n	8006372 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	2200      	movs	r2, #0
 800635e:	2140      	movs	r1, #64	; 0x40
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f831 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	80002000 	.word	0x80002000

08006380 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b02      	cmp	r3, #2
 8006394:	d103      	bne.n	800639e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d007      	beq.n	80063bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0201 	orr.w	r2, r2, #1
 80063ba:	619a      	str	r2, [r3, #24]
  }
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d8:	e031      	b.n	800643e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e0:	d02d      	beq.n	800643e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e2:	f7fe fa61 	bl	80048a8 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d122      	bne.n	800643e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699a      	ldr	r2, [r3, #24]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4013      	ands	r3, r2
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	429a      	cmp	r2, r3
 8006406:	bf0c      	ite	eq
 8006408:	2301      	moveq	r3, #1
 800640a:	2300      	movne	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	429a      	cmp	r2, r3
 8006414:	d113      	bne.n	800643e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	f043 0220 	orr.w	r2, r3, #32
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e00f      	b.n	800645e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699a      	ldr	r2, [r3, #24]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4013      	ands	r3, r2
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	bf0c      	ite	eq
 800644e:	2301      	moveq	r3, #1
 8006450:	2300      	movne	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	429a      	cmp	r2, r3
 800645a:	d0be      	beq.n	80063da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006472:	e033      	b.n	80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 f87f 	bl	800657c <I2C_IsErrorOccurred>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e031      	b.n	80064ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800648e:	d025      	beq.n	80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006490:	f7fe fa0a 	bl	80048a8 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	d302      	bcc.n	80064a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11a      	bne.n	80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d013      	beq.n	80064dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b8:	f043 0220 	orr.w	r2, r3, #32
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e007      	b.n	80064ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d1c4      	bne.n	8006474 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006500:	e02f      	b.n	8006562 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f838 	bl	800657c <I2C_IsErrorOccurred>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e02d      	b.n	8006572 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006516:	f7fe f9c7 	bl	80048a8 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	d302      	bcc.n	800652c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d11a      	bne.n	8006562 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b20      	cmp	r3, #32
 8006538:	d013      	beq.n	8006562 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653e:	f043 0220 	orr.w	r2, r3, #32
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e007      	b.n	8006572 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b20      	cmp	r3, #32
 800656e:	d1c8      	bne.n	8006502 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08a      	sub	sp, #40	; 0x28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d068      	beq.n	800667a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2210      	movs	r2, #16
 80065ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065b0:	e049      	b.n	8006646 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b8:	d045      	beq.n	8006646 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065ba:	f7fe f975 	bl	80048a8 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <I2C_IsErrorOccurred+0x54>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d13a      	bne.n	8006646 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f2:	d121      	bne.n	8006638 <I2C_IsErrorOccurred+0xbc>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065fa:	d01d      	beq.n	8006638 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065fc:	7cfb      	ldrb	r3, [r7, #19]
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d01a      	beq.n	8006638 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006610:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006612:	f7fe f949 	bl	80048a8 <HAL_GetTick>
 8006616:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006618:	e00e      	b.n	8006638 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800661a:	f7fe f945 	bl	80048a8 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b19      	cmp	r3, #25
 8006626:	d907      	bls.n	8006638 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	f043 0320 	orr.w	r3, r3, #32
 800662e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006636:	e006      	b.n	8006646 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b20      	cmp	r3, #32
 8006644:	d1e9      	bne.n	800661a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699b      	ldr	r3, [r3, #24]
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b20      	cmp	r3, #32
 8006652:	d003      	beq.n	800665c <I2C_IsErrorOccurred+0xe0>
 8006654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0aa      	beq.n	80065b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800665c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006660:	2b00      	cmp	r3, #0
 8006662:	d103      	bne.n	800666c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2220      	movs	r2, #32
 800666a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	f043 0304 	orr.w	r3, r3, #4
 8006672:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f043 0301 	orr.w	r3, r3, #1
 8006692:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800669c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	f043 0308 	orr.w	r3, r3, #8
 80066b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	f043 0302 	orr.w	r3, r3, #2
 80066d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80066e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01c      	beq.n	800672a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f7ff fe45 	bl	8006380 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <I2C_IsErrorOccurred+0x1bc>)
 8006702:	400b      	ands	r3, r1
 8006704:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	431a      	orrs	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800672a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800672e:	4618      	mov	r0, r3
 8006730:	3728      	adds	r7, #40	; 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	fe00e800 	.word	0xfe00e800

0800673c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	817b      	strh	r3, [r7, #10]
 800674a:	4613      	mov	r3, r2
 800674c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800674e:	897b      	ldrh	r3, [r7, #10]
 8006750:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006754:	7a7b      	ldrb	r3, [r7, #9]
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800675c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	4313      	orrs	r3, r2
 8006766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800676a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	0d5b      	lsrs	r3, r3, #21
 8006776:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800677a:	4b08      	ldr	r3, [pc, #32]	; (800679c <I2C_TransferConfig+0x60>)
 800677c:	430b      	orrs	r3, r1
 800677e:	43db      	mvns	r3, r3
 8006780:	ea02 0103 	and.w	r1, r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	03ff63ff 	.word	0x03ff63ff

080067a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d138      	bne.n	8006828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e032      	b.n	800682a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2224      	movs	r2, #36	; 0x24
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0201 	bic.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6819      	ldr	r1, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	e000      	b.n	800682a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006828:	2302      	movs	r3, #2
  }
}
 800682a:	4618      	mov	r0, r3
 800682c:	370c      	adds	r7, #12
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b20      	cmp	r3, #32
 800684a:	d139      	bne.n	80068c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006856:	2302      	movs	r3, #2
 8006858:	e033      	b.n	80068c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2224      	movs	r2, #36	; 0x24
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0201 	bic.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006888:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
	...

080068d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f001 b823 	b.w	800793c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 817d 	beq.w	8006c06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800690c:	4bbc      	ldr	r3, [pc, #752]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f003 030c 	and.w	r3, r3, #12
 8006914:	2b04      	cmp	r3, #4
 8006916:	d00c      	beq.n	8006932 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006918:	4bb9      	ldr	r3, [pc, #740]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 030c 	and.w	r3, r3, #12
 8006920:	2b08      	cmp	r3, #8
 8006922:	d15c      	bne.n	80069de <HAL_RCC_OscConfig+0x10e>
 8006924:	4bb6      	ldr	r3, [pc, #728]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006930:	d155      	bne.n	80069de <HAL_RCC_OscConfig+0x10e>
 8006932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006936:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800693a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800693e:	fa93 f3a3 	rbit	r3, r3
 8006942:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006946:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800694a:	fab3 f383 	clz	r3, r3
 800694e:	b2db      	uxtb	r3, r3
 8006950:	095b      	lsrs	r3, r3, #5
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b01      	cmp	r3, #1
 800695c:	d102      	bne.n	8006964 <HAL_RCC_OscConfig+0x94>
 800695e:	4ba8      	ldr	r3, [pc, #672]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	e015      	b.n	8006990 <HAL_RCC_OscConfig+0xc0>
 8006964:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006968:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006970:	fa93 f3a3 	rbit	r3, r3
 8006974:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800697c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006980:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006984:	fa93 f3a3 	rbit	r3, r3
 8006988:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800698c:	4b9c      	ldr	r3, [pc, #624]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006994:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006998:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800699c:	fa92 f2a2 	rbit	r2, r2
 80069a0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80069a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80069a8:	fab2 f282 	clz	r2, r2
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	f042 0220 	orr.w	r2, r2, #32
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	f002 021f 	and.w	r2, r2, #31
 80069b8:	2101      	movs	r1, #1
 80069ba:	fa01 f202 	lsl.w	r2, r1, r2
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 811f 	beq.w	8006c04 <HAL_RCC_OscConfig+0x334>
 80069c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f040 8116 	bne.w	8006c04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	f000 bfaf 	b.w	800793c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ee:	d106      	bne.n	80069fe <HAL_RCC_OscConfig+0x12e>
 80069f0:	4b83      	ldr	r3, [pc, #524]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a82      	ldr	r2, [pc, #520]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 80069f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	e036      	b.n	8006a6c <HAL_RCC_OscConfig+0x19c>
 80069fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10c      	bne.n	8006a28 <HAL_RCC_OscConfig+0x158>
 8006a0e:	4b7c      	ldr	r3, [pc, #496]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a7b      	ldr	r2, [pc, #492]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	4b79      	ldr	r3, [pc, #484]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a78      	ldr	r2, [pc, #480]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	e021      	b.n	8006a6c <HAL_RCC_OscConfig+0x19c>
 8006a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a38:	d10c      	bne.n	8006a54 <HAL_RCC_OscConfig+0x184>
 8006a3a:	4b71      	ldr	r3, [pc, #452]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a70      	ldr	r2, [pc, #448]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	4b6e      	ldr	r3, [pc, #440]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a6d      	ldr	r2, [pc, #436]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	e00b      	b.n	8006a6c <HAL_RCC_OscConfig+0x19c>
 8006a54:	4b6a      	ldr	r3, [pc, #424]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a69      	ldr	r2, [pc, #420]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	4b67      	ldr	r3, [pc, #412]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a66      	ldr	r2, [pc, #408]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a6c:	4b64      	ldr	r3, [pc, #400]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	f023 020f 	bic.w	r2, r3, #15
 8006a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a78:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	495f      	ldr	r1, [pc, #380]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d059      	beq.n	8006b4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a96:	f7fd ff07 	bl	80048a8 <HAL_GetTick>
 8006a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a9e:	e00a      	b.n	8006ab6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aa0:	f7fd ff02 	bl	80048a8 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b64      	cmp	r3, #100	; 0x64
 8006aae:	d902      	bls.n	8006ab6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	f000 bf43 	b.w	800793c <HAL_RCC_OscConfig+0x106c>
 8006ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006aba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8006ac2:	fa93 f3a3 	rbit	r3, r3
 8006ac6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006aca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ace:	fab3 f383 	clz	r3, r3
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f043 0301 	orr.w	r3, r3, #1
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d102      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x218>
 8006ae2:	4b47      	ldr	r3, [pc, #284]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	e015      	b.n	8006b14 <HAL_RCC_OscConfig+0x244>
 8006ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006aec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006af4:	fa93 f3a3 	rbit	r3, r3
 8006af8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b00:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006b04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006b08:	fa93 f3a3 	rbit	r3, r3
 8006b0c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006b10:	4b3b      	ldr	r3, [pc, #236]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b18:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006b1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006b20:	fa92 f2a2 	rbit	r2, r2
 8006b24:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006b28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006b2c:	fab2 f282 	clz	r2, r2
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	f042 0220 	orr.w	r2, r2, #32
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	f002 021f 	and.w	r2, r2, #31
 8006b3c:	2101      	movs	r1, #1
 8006b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b42:	4013      	ands	r3, r2
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0ab      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x1d0>
 8006b48:	e05d      	b.n	8006c06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4a:	f7fd fead 	bl	80048a8 <HAL_GetTick>
 8006b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b52:	e00a      	b.n	8006b6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b54:	f7fd fea8 	bl	80048a8 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b64      	cmp	r3, #100	; 0x64
 8006b62:	d902      	bls.n	8006b6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	f000 bee9 	b.w	800793c <HAL_RCC_OscConfig+0x106c>
 8006b6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b6e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8006b76:	fa93 f3a3 	rbit	r3, r3
 8006b7a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006b7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b82:	fab3 f383 	clz	r3, r3
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	095b      	lsrs	r3, r3, #5
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f043 0301 	orr.w	r3, r3, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d102      	bne.n	8006b9c <HAL_RCC_OscConfig+0x2cc>
 8006b96:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	e015      	b.n	8006bc8 <HAL_RCC_OscConfig+0x2f8>
 8006b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ba0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ba4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006ba8:	fa93 f3a3 	rbit	r3, r3
 8006bac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8006bb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006bb4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006bb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006bbc:	fa93 f3a3 	rbit	r3, r3
 8006bc0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006bc4:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <HAL_RCC_OscConfig+0x330>)
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bcc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8006bd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006bd4:	fa92 f2a2 	rbit	r2, r2
 8006bd8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006bdc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8006be0:	fab2 f282 	clz	r2, r2
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	f042 0220 	orr.w	r2, r2, #32
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	f002 021f 	and.w	r2, r2, #31
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1ab      	bne.n	8006b54 <HAL_RCC_OscConfig+0x284>
 8006bfc:	e003      	b.n	8006c06 <HAL_RCC_OscConfig+0x336>
 8006bfe:	bf00      	nop
 8006c00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 817d 	beq.w	8006f16 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006c1c:	4ba6      	ldr	r3, [pc, #664]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f003 030c 	and.w	r3, r3, #12
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006c28:	4ba3      	ldr	r3, [pc, #652]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f003 030c 	and.w	r3, r3, #12
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d172      	bne.n	8006d1a <HAL_RCC_OscConfig+0x44a>
 8006c34:	4ba0      	ldr	r3, [pc, #640]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d16c      	bne.n	8006d1a <HAL_RCC_OscConfig+0x44a>
 8006c40:	2302      	movs	r3, #2
 8006c42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c46:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006c4a:	fa93 f3a3 	rbit	r3, r3
 8006c4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8006c52:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c56:	fab3 f383 	clz	r3, r3
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	f043 0301 	orr.w	r3, r3, #1
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d102      	bne.n	8006c70 <HAL_RCC_OscConfig+0x3a0>
 8006c6a:	4b93      	ldr	r3, [pc, #588]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	e013      	b.n	8006c98 <HAL_RCC_OscConfig+0x3c8>
 8006c70:	2302      	movs	r3, #2
 8006c72:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c76:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006c7a:	fa93 f3a3 	rbit	r3, r3
 8006c7e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006c82:	2302      	movs	r3, #2
 8006c84:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006c88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006c8c:	fa93 f3a3 	rbit	r3, r3
 8006c90:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8006c94:	4b88      	ldr	r3, [pc, #544]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8006c9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006ca2:	fa92 f2a2 	rbit	r2, r2
 8006ca6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006caa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8006cae:	fab2 f282 	clz	r2, r2
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	f042 0220 	orr.w	r2, r2, #32
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	f002 021f 	and.w	r2, r2, #31
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x410>
 8006cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d002      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f000 be2e 	b.w	800793c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce0:	4b75      	ldr	r3, [pc, #468]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	21f8      	movs	r1, #248	; 0xf8
 8006cf6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cfa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006cfe:	fa91 f1a1 	rbit	r1, r1
 8006d02:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006d06:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006d0a:	fab1 f181 	clz	r1, r1
 8006d0e:	b2c9      	uxtb	r1, r1
 8006d10:	408b      	lsls	r3, r1
 8006d12:	4969      	ldr	r1, [pc, #420]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d18:	e0fd      	b.n	8006f16 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f000 8088 	beq.w	8006e3c <HAL_RCC_OscConfig+0x56c>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d32:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006d36:	fa93 f3a3 	rbit	r3, r3
 8006d3a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006d3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d42:	fab3 f383 	clz	r3, r3
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	461a      	mov	r2, r3
 8006d54:	2301      	movs	r3, #1
 8006d56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d58:	f7fd fda6 	bl	80048a8 <HAL_GetTick>
 8006d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d60:	e00a      	b.n	8006d78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d62:	f7fd fda1 	bl	80048a8 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d902      	bls.n	8006d78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	f000 bde2 	b.w	800793c <HAL_RCC_OscConfig+0x106c>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8006d82:	fa93 f3a3 	rbit	r3, r3
 8006d86:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006d8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8e:	fab3 f383 	clz	r3, r3
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	095b      	lsrs	r3, r3, #5
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f043 0301 	orr.w	r3, r3, #1
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d102      	bne.n	8006da8 <HAL_RCC_OscConfig+0x4d8>
 8006da2:	4b45      	ldr	r3, [pc, #276]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	e013      	b.n	8006dd0 <HAL_RCC_OscConfig+0x500>
 8006da8:	2302      	movs	r3, #2
 8006daa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8006db2:	fa93 f3a3 	rbit	r3, r3
 8006db6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006dba:	2302      	movs	r3, #2
 8006dbc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006dc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006dc4:	fa93 f3a3 	rbit	r3, r3
 8006dc8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006dcc:	4b3a      	ldr	r3, [pc, #232]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006dd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006dda:	fa92 f2a2 	rbit	r2, r2
 8006dde:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8006de2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006de6:	fab2 f282 	clz	r2, r2
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	f042 0220 	orr.w	r2, r2, #32
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	f002 021f 	and.w	r2, r2, #31
 8006df6:	2101      	movs	r1, #1
 8006df8:	fa01 f202 	lsl.w	r2, r1, r2
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0af      	beq.n	8006d62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e02:	4b2d      	ldr	r3, [pc, #180]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	695b      	ldr	r3, [r3, #20]
 8006e16:	21f8      	movs	r1, #248	; 0xf8
 8006e18:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006e20:	fa91 f1a1 	rbit	r1, r1
 8006e24:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006e28:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006e2c:	fab1 f181 	clz	r1, r1
 8006e30:	b2c9      	uxtb	r1, r1
 8006e32:	408b      	lsls	r3, r1
 8006e34:	4920      	ldr	r1, [pc, #128]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	600b      	str	r3, [r1, #0]
 8006e3a:	e06c      	b.n	8006f16 <HAL_RCC_OscConfig+0x646>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006e46:	fa93 f3a3 	rbit	r3, r3
 8006e4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006e4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e52:	fab3 f383 	clz	r3, r3
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	461a      	mov	r2, r3
 8006e64:	2300      	movs	r3, #0
 8006e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e68:	f7fd fd1e 	bl	80048a8 <HAL_GetTick>
 8006e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e70:	e00a      	b.n	8006e88 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e72:	f7fd fd19 	bl	80048a8 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d902      	bls.n	8006e88 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	f000 bd5a 	b.w	800793c <HAL_RCC_OscConfig+0x106c>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006e92:	fa93 f3a3 	rbit	r3, r3
 8006e96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8006e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e9e:	fab3 f383 	clz	r3, r3
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d104      	bne.n	8006ebc <HAL_RCC_OscConfig+0x5ec>
 8006eb2:	4b01      	ldr	r3, [pc, #4]	; (8006eb8 <HAL_RCC_OscConfig+0x5e8>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	e015      	b.n	8006ee4 <HAL_RCC_OscConfig+0x614>
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ec6:	fa93 f3a3 	rbit	r3, r3
 8006eca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ece:	2302      	movs	r3, #2
 8006ed0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006ed8:	fa93 f3a3 	rbit	r3, r3
 8006edc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006ee0:	4bc8      	ldr	r3, [pc, #800]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006eea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006eee:	fa92 f2a2 	rbit	r2, r2
 8006ef2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006ef6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006efa:	fab2 f282 	clz	r2, r2
 8006efe:	b2d2      	uxtb	r2, r2
 8006f00:	f042 0220 	orr.w	r2, r2, #32
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	f002 021f 	and.w	r2, r2, #31
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ad      	bne.n	8006e72 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	f000 8110 	beq.w	800714c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d079      	beq.n	8007030 <HAL_RCC_OscConfig+0x760>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006f46:	fa93 f3a3 	rbit	r3, r3
 8006f4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f52:	fab3 f383 	clz	r3, r3
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	4bab      	ldr	r3, [pc, #684]	; (8007208 <HAL_RCC_OscConfig+0x938>)
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	461a      	mov	r2, r3
 8006f62:	2301      	movs	r3, #1
 8006f64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f66:	f7fd fc9f 	bl	80048a8 <HAL_GetTick>
 8006f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f6e:	e00a      	b.n	8006f86 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f70:	f7fd fc9a 	bl	80048a8 <HAL_GetTick>
 8006f74:	4602      	mov	r2, r0
 8006f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d902      	bls.n	8006f86 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	f000 bcdb 	b.w	800793c <HAL_RCC_OscConfig+0x106c>
 8006f86:	2302      	movs	r3, #2
 8006f88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f90:	fa93 f3a3 	rbit	r3, r3
 8006f94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f9c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fa8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	fa93 f2a3 	rbit	r2, r3
 8006fb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	fa93 f2a3 	rbit	r2, r3
 8006fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fda:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fde:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fe0:	4b88      	ldr	r3, [pc, #544]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 8006fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fe8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fec:	2102      	movs	r1, #2
 8006fee:	6019      	str	r1, [r3, #0]
 8006ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ff4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	fa93 f1a3 	rbit	r1, r3
 8006ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007002:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007006:	6019      	str	r1, [r3, #0]
  return result;
 8007008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800700c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	fab3 f383 	clz	r3, r3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 031f 	and.w	r3, r3, #31
 8007022:	2101      	movs	r1, #1
 8007024:	fa01 f303 	lsl.w	r3, r1, r3
 8007028:	4013      	ands	r3, r2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0a0      	beq.n	8006f70 <HAL_RCC_OscConfig+0x6a0>
 800702e:	e08d      	b.n	800714c <HAL_RCC_OscConfig+0x87c>
 8007030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007034:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007038:	2201      	movs	r2, #1
 800703a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007040:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	fa93 f2a3 	rbit	r2, r3
 800704a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800704e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007052:	601a      	str	r2, [r3, #0]
  return result;
 8007054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007058:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800705c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800705e:	fab3 f383 	clz	r3, r3
 8007062:	b2db      	uxtb	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	4b68      	ldr	r3, [pc, #416]	; (8007208 <HAL_RCC_OscConfig+0x938>)
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	461a      	mov	r2, r3
 800706e:	2300      	movs	r3, #0
 8007070:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007072:	f7fd fc19 	bl	80048a8 <HAL_GetTick>
 8007076:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800707a:	e00a      	b.n	8007092 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800707c:	f7fd fc14 	bl	80048a8 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d902      	bls.n	8007092 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	f000 bc55 	b.w	800793c <HAL_RCC_OscConfig+0x106c>
 8007092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007096:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800709a:	2202      	movs	r2, #2
 800709c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	fa93 f2a3 	rbit	r2, r3
 80070ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80070b4:	601a      	str	r2, [r3, #0]
 80070b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80070be:	2202      	movs	r2, #2
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	fa93 f2a3 	rbit	r2, r3
 80070d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e2:	2202      	movs	r2, #2
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	fa93 f2a3 	rbit	r2, r3
 80070f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80070fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070fe:	4b41      	ldr	r3, [pc, #260]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 8007100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007106:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800710a:	2102      	movs	r1, #2
 800710c:	6019      	str	r1, [r3, #0]
 800710e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007112:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	fa93 f1a3 	rbit	r1, r3
 800711c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007120:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007124:	6019      	str	r1, [r3, #0]
  return result;
 8007126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800712a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	fab3 f383 	clz	r3, r3
 8007134:	b2db      	uxtb	r3, r3
 8007136:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	2101      	movs	r1, #1
 8007142:	fa01 f303 	lsl.w	r3, r1, r3
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d197      	bne.n	800707c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800714c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007150:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	f000 81a1 	beq.w	80074a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007162:	2300      	movs	r3, #0
 8007164:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007168:	4b26      	ldr	r3, [pc, #152]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d116      	bne.n	80071a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007174:	4b23      	ldr	r3, [pc, #140]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	4a22      	ldr	r2, [pc, #136]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 800717a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800717e:	61d3      	str	r3, [r2, #28]
 8007180:	4b20      	ldr	r3, [pc, #128]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800718c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007196:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800719a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071a2:	4b1a      	ldr	r3, [pc, #104]	; (800720c <HAL_RCC_OscConfig+0x93c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d11a      	bne.n	80071e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ae:	4b17      	ldr	r3, [pc, #92]	; (800720c <HAL_RCC_OscConfig+0x93c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a16      	ldr	r2, [pc, #88]	; (800720c <HAL_RCC_OscConfig+0x93c>)
 80071b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ba:	f7fd fb75 	bl	80048a8 <HAL_GetTick>
 80071be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071c2:	e009      	b.n	80071d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071c4:	f7fd fb70 	bl	80048a8 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b64      	cmp	r3, #100	; 0x64
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e3b1      	b.n	800793c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d8:	4b0c      	ldr	r3, [pc, #48]	; (800720c <HAL_RCC_OscConfig+0x93c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0ef      	beq.n	80071c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d10d      	bne.n	8007210 <HAL_RCC_OscConfig+0x940>
 80071f4:	4b03      	ldr	r3, [pc, #12]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	4a02      	ldr	r2, [pc, #8]	; (8007204 <HAL_RCC_OscConfig+0x934>)
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	6213      	str	r3, [r2, #32]
 8007200:	e03c      	b.n	800727c <HAL_RCC_OscConfig+0x9ac>
 8007202:	bf00      	nop
 8007204:	40021000 	.word	0x40021000
 8007208:	10908120 	.word	0x10908120
 800720c:	40007000 	.word	0x40007000
 8007210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d10c      	bne.n	800723a <HAL_RCC_OscConfig+0x96a>
 8007220:	4bc1      	ldr	r3, [pc, #772]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	4ac0      	ldr	r2, [pc, #768]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	6213      	str	r3, [r2, #32]
 800722c:	4bbe      	ldr	r3, [pc, #760]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	4abd      	ldr	r2, [pc, #756]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007232:	f023 0304 	bic.w	r3, r3, #4
 8007236:	6213      	str	r3, [r2, #32]
 8007238:	e020      	b.n	800727c <HAL_RCC_OscConfig+0x9ac>
 800723a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800723e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	2b05      	cmp	r3, #5
 8007248:	d10c      	bne.n	8007264 <HAL_RCC_OscConfig+0x994>
 800724a:	4bb7      	ldr	r3, [pc, #732]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	4ab6      	ldr	r2, [pc, #728]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007250:	f043 0304 	orr.w	r3, r3, #4
 8007254:	6213      	str	r3, [r2, #32]
 8007256:	4bb4      	ldr	r3, [pc, #720]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	4ab3      	ldr	r2, [pc, #716]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	6213      	str	r3, [r2, #32]
 8007262:	e00b      	b.n	800727c <HAL_RCC_OscConfig+0x9ac>
 8007264:	4bb0      	ldr	r3, [pc, #704]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	4aaf      	ldr	r2, [pc, #700]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	6213      	str	r3, [r2, #32]
 8007270:	4bad      	ldr	r3, [pc, #692]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	4aac      	ldr	r2, [pc, #688]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007276:	f023 0304 	bic.w	r3, r3, #4
 800727a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800727c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 8081 	beq.w	8007390 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728e:	f7fd fb0b 	bl	80048a8 <HAL_GetTick>
 8007292:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007296:	e00b      	b.n	80072b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007298:	f7fd fb06 	bl	80048a8 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e345      	b.n	800793c <HAL_RCC_OscConfig+0x106c>
 80072b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80072b8:	2202      	movs	r2, #2
 80072ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	fa93 f2a3 	rbit	r2, r3
 80072ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80072dc:	2202      	movs	r2, #2
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	fa93 f2a3 	rbit	r2, r3
 80072ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80072f6:	601a      	str	r2, [r3, #0]
  return result;
 80072f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007300:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007302:	fab3 f383 	clz	r3, r3
 8007306:	b2db      	uxtb	r3, r3
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f043 0302 	orr.w	r3, r3, #2
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d102      	bne.n	800731c <HAL_RCC_OscConfig+0xa4c>
 8007316:	4b84      	ldr	r3, [pc, #528]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	e013      	b.n	8007344 <HAL_RCC_OscConfig+0xa74>
 800731c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007320:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007324:	2202      	movs	r2, #2
 8007326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800732c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	fa93 f2a3 	rbit	r2, r3
 8007336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800733a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	4b79      	ldr	r3, [pc, #484]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007348:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800734c:	2102      	movs	r1, #2
 800734e:	6011      	str	r1, [r2, #0]
 8007350:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007354:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007358:	6812      	ldr	r2, [r2, #0]
 800735a:	fa92 f1a2 	rbit	r1, r2
 800735e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007362:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007366:	6011      	str	r1, [r2, #0]
  return result;
 8007368:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800736c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007370:	6812      	ldr	r2, [r2, #0]
 8007372:	fab2 f282 	clz	r2, r2
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	f002 021f 	and.w	r2, r2, #31
 8007382:	2101      	movs	r1, #1
 8007384:	fa01 f202 	lsl.w	r2, r1, r2
 8007388:	4013      	ands	r3, r2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d084      	beq.n	8007298 <HAL_RCC_OscConfig+0x9c8>
 800738e:	e07f      	b.n	8007490 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007390:	f7fd fa8a 	bl	80048a8 <HAL_GetTick>
 8007394:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007398:	e00b      	b.n	80073b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800739a:	f7fd fa85 	bl	80048a8 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e2c4      	b.n	800793c <HAL_RCC_OscConfig+0x106c>
 80073b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80073ba:	2202      	movs	r2, #2
 80073bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	fa93 f2a3 	rbit	r2, r3
 80073cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80073de:	2202      	movs	r2, #2
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	fa93 f2a3 	rbit	r2, r3
 80073f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80073f8:	601a      	str	r2, [r3, #0]
  return result;
 80073fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007402:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007404:	fab3 f383 	clz	r3, r3
 8007408:	b2db      	uxtb	r3, r3
 800740a:	095b      	lsrs	r3, r3, #5
 800740c:	b2db      	uxtb	r3, r3
 800740e:	f043 0302 	orr.w	r3, r3, #2
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d102      	bne.n	800741e <HAL_RCC_OscConfig+0xb4e>
 8007418:	4b43      	ldr	r3, [pc, #268]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	e013      	b.n	8007446 <HAL_RCC_OscConfig+0xb76>
 800741e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007422:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007426:	2202      	movs	r2, #2
 8007428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800742e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	fa93 f2a3 	rbit	r2, r3
 8007438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800743c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	4b39      	ldr	r3, [pc, #228]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800744a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800744e:	2102      	movs	r1, #2
 8007450:	6011      	str	r1, [r2, #0]
 8007452:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007456:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	fa92 f1a2 	rbit	r1, r2
 8007460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007464:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007468:	6011      	str	r1, [r2, #0]
  return result;
 800746a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800746e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	fab2 f282 	clz	r2, r2
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	f002 021f 	and.w	r2, r2, #31
 8007484:	2101      	movs	r1, #1
 8007486:	fa01 f202 	lsl.w	r2, r1, r2
 800748a:	4013      	ands	r3, r2
 800748c:	2b00      	cmp	r3, #0
 800748e:	d184      	bne.n	800739a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007490:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007494:	2b01      	cmp	r3, #1
 8007496:	d105      	bne.n	80074a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007498:	4b23      	ldr	r3, [pc, #140]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	4a22      	ldr	r2, [pc, #136]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 800749e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 8242 	beq.w	800793a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074b6:	4b1c      	ldr	r3, [pc, #112]	; (8007528 <HAL_RCC_OscConfig+0xc58>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f003 030c 	and.w	r3, r3, #12
 80074be:	2b08      	cmp	r3, #8
 80074c0:	f000 8213 	beq.w	80078ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	f040 8162 	bne.w	800779a <HAL_RCC_OscConfig+0xeca>
 80074d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074da:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80074de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074e8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	fa93 f2a3 	rbit	r2, r3
 80074f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074f6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80074fa:	601a      	str	r2, [r3, #0]
  return result;
 80074fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007500:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007504:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007506:	fab3 f383 	clz	r3, r3
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007510:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	461a      	mov	r2, r3
 8007518:	2300      	movs	r3, #0
 800751a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800751c:	f7fd f9c4 	bl	80048a8 <HAL_GetTick>
 8007520:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007524:	e00c      	b.n	8007540 <HAL_RCC_OscConfig+0xc70>
 8007526:	bf00      	nop
 8007528:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800752c:	f7fd f9bc 	bl	80048a8 <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d901      	bls.n	8007540 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e1fd      	b.n	800793c <HAL_RCC_OscConfig+0x106c>
 8007540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007544:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800754c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007552:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	fa93 f2a3 	rbit	r2, r3
 800755c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007560:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007564:	601a      	str	r2, [r3, #0]
  return result;
 8007566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800756a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800756e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007570:	fab3 f383 	clz	r3, r3
 8007574:	b2db      	uxtb	r3, r3
 8007576:	095b      	lsrs	r3, r3, #5
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f043 0301 	orr.w	r3, r3, #1
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b01      	cmp	r3, #1
 8007582:	d102      	bne.n	800758a <HAL_RCC_OscConfig+0xcba>
 8007584:	4bb0      	ldr	r3, [pc, #704]	; (8007848 <HAL_RCC_OscConfig+0xf78>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	e027      	b.n	80075da <HAL_RCC_OscConfig+0xd0a>
 800758a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800758e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800759c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	fa93 f2a3 	rbit	r2, r3
 80075a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075aa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80075b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	fa93 f2a3 	rbit	r2, r3
 80075cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	4b9c      	ldr	r3, [pc, #624]	; (8007848 <HAL_RCC_OscConfig+0xf78>)
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075de:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80075e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80075e6:	6011      	str	r1, [r2, #0]
 80075e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075ec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80075f0:	6812      	ldr	r2, [r2, #0]
 80075f2:	fa92 f1a2 	rbit	r1, r2
 80075f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80075fa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80075fe:	6011      	str	r1, [r2, #0]
  return result;
 8007600:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007604:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007608:	6812      	ldr	r2, [r2, #0]
 800760a:	fab2 f282 	clz	r2, r2
 800760e:	b2d2      	uxtb	r2, r2
 8007610:	f042 0220 	orr.w	r2, r2, #32
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	f002 021f 	and.w	r2, r2, #31
 800761a:	2101      	movs	r1, #1
 800761c:	fa01 f202 	lsl.w	r2, r1, r2
 8007620:	4013      	ands	r3, r2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d182      	bne.n	800752c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007626:	4b88      	ldr	r3, [pc, #544]	; (8007848 <HAL_RCC_OscConfig+0xf78>)
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800762e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800763a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800763e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6a1b      	ldr	r3, [r3, #32]
 8007646:	430b      	orrs	r3, r1
 8007648:	497f      	ldr	r1, [pc, #508]	; (8007848 <HAL_RCC_OscConfig+0xf78>)
 800764a:	4313      	orrs	r3, r2
 800764c:	604b      	str	r3, [r1, #4]
 800764e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007652:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007656:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800765a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800765c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007660:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	fa93 f2a3 	rbit	r2, r3
 800766a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800766e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007672:	601a      	str	r2, [r3, #0]
  return result;
 8007674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007678:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800767c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800767e:	fab3 f383 	clz	r3, r3
 8007682:	b2db      	uxtb	r3, r3
 8007684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	461a      	mov	r2, r3
 8007690:	2301      	movs	r3, #1
 8007692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007694:	f7fd f908 	bl	80048a8 <HAL_GetTick>
 8007698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800769c:	e009      	b.n	80076b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800769e:	f7fd f903 	bl	80048a8 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e144      	b.n	800793c <HAL_RCC_OscConfig+0x106c>
 80076b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80076ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	fa93 f2a3 	rbit	r2, r3
 80076ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076d2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80076d6:	601a      	str	r2, [r3, #0]
  return result;
 80076d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076dc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80076e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80076e2:	fab3 f383 	clz	r3, r3
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	095b      	lsrs	r3, r3, #5
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d102      	bne.n	80076fc <HAL_RCC_OscConfig+0xe2c>
 80076f6:	4b54      	ldr	r3, [pc, #336]	; (8007848 <HAL_RCC_OscConfig+0xf78>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	e027      	b.n	800774c <HAL_RCC_OscConfig+0xe7c>
 80076fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007700:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007704:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800770a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800770e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	fa93 f2a3 	rbit	r2, r3
 8007718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800771c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007726:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800772a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007734:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	fa93 f2a3 	rbit	r2, r3
 800773e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007742:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	4b3f      	ldr	r3, [pc, #252]	; (8007848 <HAL_RCC_OscConfig+0xf78>)
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007750:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007754:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800775e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	fa92 f1a2 	rbit	r1, r2
 8007768:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800776c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007770:	6011      	str	r1, [r2, #0]
  return result;
 8007772:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007776:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800777a:	6812      	ldr	r2, [r2, #0]
 800777c:	fab2 f282 	clz	r2, r2
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	f042 0220 	orr.w	r2, r2, #32
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	f002 021f 	and.w	r2, r2, #31
 800778c:	2101      	movs	r1, #1
 800778e:	fa01 f202 	lsl.w	r2, r1, r2
 8007792:	4013      	ands	r3, r2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d082      	beq.n	800769e <HAL_RCC_OscConfig+0xdce>
 8007798:	e0cf      	b.n	800793a <HAL_RCC_OscConfig+0x106a>
 800779a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800779e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80077a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	fa93 f2a3 	rbit	r2, r3
 80077b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80077be:	601a      	str	r2, [r3, #0]
  return result;
 80077c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80077c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077ca:	fab3 f383 	clz	r3, r3
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80077d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	461a      	mov	r2, r3
 80077dc:	2300      	movs	r3, #0
 80077de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e0:	f7fd f862 	bl	80048a8 <HAL_GetTick>
 80077e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077e8:	e009      	b.n	80077fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077ea:	f7fd f85d 	bl	80048a8 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e09e      	b.n	800793c <HAL_RCC_OscConfig+0x106c>
 80077fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007802:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007806:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800780a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007810:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	fa93 f2a3 	rbit	r2, r3
 800781a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800781e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007822:	601a      	str	r2, [r3, #0]
  return result;
 8007824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007828:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800782c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800782e:	fab3 f383 	clz	r3, r3
 8007832:	b2db      	uxtb	r3, r3
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f043 0301 	orr.w	r3, r3, #1
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b01      	cmp	r3, #1
 8007840:	d104      	bne.n	800784c <HAL_RCC_OscConfig+0xf7c>
 8007842:	4b01      	ldr	r3, [pc, #4]	; (8007848 <HAL_RCC_OscConfig+0xf78>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	e029      	b.n	800789c <HAL_RCC_OscConfig+0xfcc>
 8007848:	40021000 	.word	0x40021000
 800784c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007850:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800785a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800785e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	fa93 f2a3 	rbit	r2, r3
 8007868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800786c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007876:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800787a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007884:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	fa93 f2a3 	rbit	r2, r3
 800788e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007892:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <HAL_RCC_OscConfig+0x1078>)
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078a0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80078a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80078a8:	6011      	str	r1, [r2, #0]
 80078aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078ae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80078b2:	6812      	ldr	r2, [r2, #0]
 80078b4:	fa92 f1a2 	rbit	r1, r2
 80078b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80078c0:	6011      	str	r1, [r2, #0]
  return result;
 80078c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	fab2 f282 	clz	r2, r2
 80078d0:	b2d2      	uxtb	r2, r2
 80078d2:	f042 0220 	orr.w	r2, r2, #32
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	f002 021f 	and.w	r2, r2, #31
 80078dc:	2101      	movs	r1, #1
 80078de:	fa01 f202 	lsl.w	r2, r1, r2
 80078e2:	4013      	ands	r3, r2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d180      	bne.n	80077ea <HAL_RCC_OscConfig+0xf1a>
 80078e8:	e027      	b.n	800793a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e01e      	b.n	800793c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80078fe:	4b12      	ldr	r3, [pc, #72]	; (8007948 <HAL_RCC_OscConfig+0x1078>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007906:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800790a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800790e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007912:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	429a      	cmp	r2, r3
 800791c:	d10b      	bne.n	8007936 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800791e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007922:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800792a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007932:	429a      	cmp	r2, r3
 8007934:	d001      	beq.n	800793a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e000      	b.n	800793c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	40021000 	.word	0x40021000

0800794c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b09e      	sub	sp, #120	; 0x78
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007956:	2300      	movs	r3, #0
 8007958:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e162      	b.n	8007c2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007964:	4b90      	ldr	r3, [pc, #576]	; (8007ba8 <HAL_RCC_ClockConfig+0x25c>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0307 	and.w	r3, r3, #7
 800796c:	683a      	ldr	r2, [r7, #0]
 800796e:	429a      	cmp	r2, r3
 8007970:	d910      	bls.n	8007994 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007972:	4b8d      	ldr	r3, [pc, #564]	; (8007ba8 <HAL_RCC_ClockConfig+0x25c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f023 0207 	bic.w	r2, r3, #7
 800797a:	498b      	ldr	r1, [pc, #556]	; (8007ba8 <HAL_RCC_ClockConfig+0x25c>)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	4313      	orrs	r3, r2
 8007980:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007982:	4b89      	ldr	r3, [pc, #548]	; (8007ba8 <HAL_RCC_ClockConfig+0x25c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0307 	and.w	r3, r3, #7
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d001      	beq.n	8007994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e14a      	b.n	8007c2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d008      	beq.n	80079b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079a0:	4b82      	ldr	r3, [pc, #520]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	497f      	ldr	r1, [pc, #508]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 80dc 	beq.w	8007b78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d13c      	bne.n	8007a42 <HAL_RCC_ClockConfig+0xf6>
 80079c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079d0:	fa93 f3a3 	rbit	r3, r3
 80079d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80079d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d8:	fab3 f383 	clz	r3, r3
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d102      	bne.n	80079f2 <HAL_RCC_ClockConfig+0xa6>
 80079ec:	4b6f      	ldr	r3, [pc, #444]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	e00f      	b.n	8007a12 <HAL_RCC_ClockConfig+0xc6>
 80079f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079fa:	fa93 f3a3 	rbit	r3, r3
 80079fe:	667b      	str	r3, [r7, #100]	; 0x64
 8007a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a04:	663b      	str	r3, [r7, #96]	; 0x60
 8007a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a08:	fa93 f3a3 	rbit	r3, r3
 8007a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a0e:	4b67      	ldr	r3, [pc, #412]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a16:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a1a:	fa92 f2a2 	rbit	r2, r2
 8007a1e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a22:	fab2 f282 	clz	r2, r2
 8007a26:	b2d2      	uxtb	r2, r2
 8007a28:	f042 0220 	orr.w	r2, r2, #32
 8007a2c:	b2d2      	uxtb	r2, r2
 8007a2e:	f002 021f 	and.w	r2, r2, #31
 8007a32:	2101      	movs	r1, #1
 8007a34:	fa01 f202 	lsl.w	r2, r1, r2
 8007a38:	4013      	ands	r3, r2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d17b      	bne.n	8007b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e0f3      	b.n	8007c2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d13c      	bne.n	8007ac4 <HAL_RCC_ClockConfig+0x178>
 8007a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a4e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a52:	fa93 f3a3 	rbit	r3, r3
 8007a56:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a5a:	fab3 f383 	clz	r3, r3
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f043 0301 	orr.w	r3, r3, #1
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d102      	bne.n	8007a74 <HAL_RCC_ClockConfig+0x128>
 8007a6e:	4b4f      	ldr	r3, [pc, #316]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	e00f      	b.n	8007a94 <HAL_RCC_ClockConfig+0x148>
 8007a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a78:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a7c:	fa93 f3a3 	rbit	r3, r3
 8007a80:	647b      	str	r3, [r7, #68]	; 0x44
 8007a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a86:	643b      	str	r3, [r7, #64]	; 0x40
 8007a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8a:	fa93 f3a3 	rbit	r3, r3
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a90:	4b46      	ldr	r3, [pc, #280]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007a98:	63ba      	str	r2, [r7, #56]	; 0x38
 8007a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a9c:	fa92 f2a2 	rbit	r2, r2
 8007aa0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007aa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aa4:	fab2 f282 	clz	r2, r2
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	f042 0220 	orr.w	r2, r2, #32
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	f002 021f 	and.w	r2, r2, #31
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8007aba:	4013      	ands	r3, r2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d13a      	bne.n	8007b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e0b2      	b.n	8007c2a <HAL_RCC_ClockConfig+0x2de>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	fa93 f3a3 	rbit	r3, r3
 8007ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ad2:	fab3 f383 	clz	r3, r3
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	095b      	lsrs	r3, r3, #5
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f043 0301 	orr.w	r3, r3, #1
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d102      	bne.n	8007aec <HAL_RCC_ClockConfig+0x1a0>
 8007ae6:	4b31      	ldr	r3, [pc, #196]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	e00d      	b.n	8007b08 <HAL_RCC_ClockConfig+0x1bc>
 8007aec:	2302      	movs	r3, #2
 8007aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	fa93 f3a3 	rbit	r3, r3
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
 8007af8:	2302      	movs	r3, #2
 8007afa:	623b      	str	r3, [r7, #32]
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	fa93 f3a3 	rbit	r3, r3
 8007b02:	61fb      	str	r3, [r7, #28]
 8007b04:	4b29      	ldr	r3, [pc, #164]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	2202      	movs	r2, #2
 8007b0a:	61ba      	str	r2, [r7, #24]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	fa92 f2a2 	rbit	r2, r2
 8007b12:	617a      	str	r2, [r7, #20]
  return result;
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	fab2 f282 	clz	r2, r2
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	f042 0220 	orr.w	r2, r2, #32
 8007b20:	b2d2      	uxtb	r2, r2
 8007b22:	f002 021f 	and.w	r2, r2, #31
 8007b26:	2101      	movs	r1, #1
 8007b28:	fa01 f202 	lsl.w	r2, r1, r2
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e079      	b.n	8007c2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b36:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f023 0203 	bic.w	r2, r3, #3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	491a      	ldr	r1, [pc, #104]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b48:	f7fc feae 	bl	80048a8 <HAL_GetTick>
 8007b4c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b50:	f7fc feaa 	bl	80048a8 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e061      	b.n	8007c2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b66:	4b11      	ldr	r3, [pc, #68]	; (8007bac <HAL_RCC_ClockConfig+0x260>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f003 020c 	and.w	r2, r3, #12
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d1eb      	bne.n	8007b50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b78:	4b0b      	ldr	r3, [pc, #44]	; (8007ba8 <HAL_RCC_ClockConfig+0x25c>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0307 	and.w	r3, r3, #7
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d214      	bcs.n	8007bb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b86:	4b08      	ldr	r3, [pc, #32]	; (8007ba8 <HAL_RCC_ClockConfig+0x25c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f023 0207 	bic.w	r2, r3, #7
 8007b8e:	4906      	ldr	r1, [pc, #24]	; (8007ba8 <HAL_RCC_ClockConfig+0x25c>)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b96:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <HAL_RCC_ClockConfig+0x25c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d005      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e040      	b.n	8007c2a <HAL_RCC_ClockConfig+0x2de>
 8007ba8:	40022000 	.word	0x40022000
 8007bac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d008      	beq.n	8007bce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bbc:	4b1d      	ldr	r3, [pc, #116]	; (8007c34 <HAL_RCC_ClockConfig+0x2e8>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	491a      	ldr	r1, [pc, #104]	; (8007c34 <HAL_RCC_ClockConfig+0x2e8>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0308 	and.w	r3, r3, #8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d009      	beq.n	8007bee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007bda:	4b16      	ldr	r3, [pc, #88]	; (8007c34 <HAL_RCC_ClockConfig+0x2e8>)
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4912      	ldr	r1, [pc, #72]	; (8007c34 <HAL_RCC_ClockConfig+0x2e8>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007bee:	f000 f829 	bl	8007c44 <HAL_RCC_GetSysClockFreq>
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <HAL_RCC_ClockConfig+0x2e8>)
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bfc:	22f0      	movs	r2, #240	; 0xf0
 8007bfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	fa92 f2a2 	rbit	r2, r2
 8007c06:	60fa      	str	r2, [r7, #12]
  return result;
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	fab2 f282 	clz	r2, r2
 8007c0e:	b2d2      	uxtb	r2, r2
 8007c10:	40d3      	lsrs	r3, r2
 8007c12:	4a09      	ldr	r2, [pc, #36]	; (8007c38 <HAL_RCC_ClockConfig+0x2ec>)
 8007c14:	5cd3      	ldrb	r3, [r2, r3]
 8007c16:	fa21 f303 	lsr.w	r3, r1, r3
 8007c1a:	4a08      	ldr	r2, [pc, #32]	; (8007c3c <HAL_RCC_ClockConfig+0x2f0>)
 8007c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007c1e:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <HAL_RCC_ClockConfig+0x2f4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fc fdfc 	bl	8004820 <HAL_InitTick>
  
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3778      	adds	r7, #120	; 0x78
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40021000 	.word	0x40021000
 8007c38:	08008c40 	.word	0x08008c40
 8007c3c:	20000028 	.word	0x20000028
 8007c40:	2000002c 	.word	0x2000002c

08007c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b08b      	sub	sp, #44	; 0x2c
 8007c48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	2300      	movs	r3, #0
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
 8007c56:	2300      	movs	r3, #0
 8007c58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007c5e:	4b29      	ldr	r3, [pc, #164]	; (8007d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f003 030c 	and.w	r3, r3, #12
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d002      	beq.n	8007c74 <HAL_RCC_GetSysClockFreq+0x30>
 8007c6e:	2b08      	cmp	r3, #8
 8007c70:	d003      	beq.n	8007c7a <HAL_RCC_GetSysClockFreq+0x36>
 8007c72:	e03c      	b.n	8007cee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007c74:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007c76:	623b      	str	r3, [r7, #32]
      break;
 8007c78:	e03c      	b.n	8007cf4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007c80:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007c84:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	fa92 f2a2 	rbit	r2, r2
 8007c8c:	607a      	str	r2, [r7, #4]
  return result;
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	fab2 f282 	clz	r2, r2
 8007c94:	b2d2      	uxtb	r2, r2
 8007c96:	40d3      	lsrs	r3, r2
 8007c98:	4a1c      	ldr	r2, [pc, #112]	; (8007d0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8007c9a:	5cd3      	ldrb	r3, [r2, r3]
 8007c9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007c9e:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	220f      	movs	r2, #15
 8007ca8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	fa92 f2a2 	rbit	r2, r2
 8007cb0:	60fa      	str	r2, [r7, #12]
  return result;
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	fab2 f282 	clz	r2, r2
 8007cb8:	b2d2      	uxtb	r2, r2
 8007cba:	40d3      	lsrs	r3, r2
 8007cbc:	4a14      	ldr	r2, [pc, #80]	; (8007d10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007cbe:	5cd3      	ldrb	r3, [r2, r3]
 8007cc0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007ccc:	4a0e      	ldr	r2, [pc, #56]	; (8007d08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	fb02 f303 	mul.w	r3, r2, r3
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
 8007cdc:	e004      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	4a0c      	ldr	r2, [pc, #48]	; (8007d14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007ce2:	fb02 f303 	mul.w	r3, r2, r3
 8007ce6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	623b      	str	r3, [r7, #32]
      break;
 8007cec:	e002      	b.n	8007cf4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007cee:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8007cf0:	623b      	str	r3, [r7, #32]
      break;
 8007cf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	372c      	adds	r7, #44	; 0x2c
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	40021000 	.word	0x40021000
 8007d08:	007a1200 	.word	0x007a1200
 8007d0c:	08008c50 	.word	0x08008c50
 8007d10:	08008c60 	.word	0x08008c60
 8007d14:	003d0900 	.word	0x003d0900

08007d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b092      	sub	sp, #72	; 0x48
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 80d4 	beq.w	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d3c:	4b4e      	ldr	r3, [pc, #312]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d3e:	69db      	ldr	r3, [r3, #28]
 8007d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10e      	bne.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d48:	4b4b      	ldr	r3, [pc, #300]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	4a4a      	ldr	r2, [pc, #296]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d52:	61d3      	str	r3, [r2, #28]
 8007d54:	4b48      	ldr	r3, [pc, #288]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d56:	69db      	ldr	r3, [r3, #28]
 8007d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	60bb      	str	r3, [r7, #8]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d66:	4b45      	ldr	r3, [pc, #276]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d118      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d72:	4b42      	ldr	r3, [pc, #264]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a41      	ldr	r2, [pc, #260]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d7e:	f7fc fd93 	bl	80048a8 <HAL_GetTick>
 8007d82:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d84:	e008      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d86:	f7fc fd8f 	bl	80048a8 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	2b64      	cmp	r3, #100	; 0x64
 8007d92:	d901      	bls.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e169      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d98:	4b38      	ldr	r3, [pc, #224]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d0f0      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007da4:	4b34      	ldr	r3, [pc, #208]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 8084 	beq.w	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d07c      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007dc4:	4b2c      	ldr	r3, [pc, #176]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007dd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	fa93 f3a3 	rbit	r3, r3
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007dde:	fab3 f383 	clz	r3, r3
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	4b26      	ldr	r3, [pc, #152]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	461a      	mov	r2, r3
 8007dee:	2301      	movs	r3, #1
 8007df0:	6013      	str	r3, [r2, #0]
 8007df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfa:	fa93 f3a3 	rbit	r3, r3
 8007dfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e02:	fab3 f383 	clz	r3, r3
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	461a      	mov	r2, r3
 8007e0a:	4b1d      	ldr	r3, [pc, #116]	; (8007e80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	461a      	mov	r2, r3
 8007e12:	2300      	movs	r3, #0
 8007e14:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d04b      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e26:	f7fc fd3f 	bl	80048a8 <HAL_GetTick>
 8007e2a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e2c:	e00a      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2e:	f7fc fd3b 	bl	80048a8 <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e113      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007e44:	2302      	movs	r3, #2
 8007e46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4a:	fa93 f3a3 	rbit	r3, r3
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e50:	2302      	movs	r3, #2
 8007e52:	623b      	str	r3, [r7, #32]
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	fa93 f3a3 	rbit	r3, r3
 8007e5a:	61fb      	str	r3, [r7, #28]
  return result;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e5e:	fab3 f383 	clz	r3, r3
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	095b      	lsrs	r3, r3, #5
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f043 0302 	orr.w	r3, r3, #2
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d108      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007e72:	4b01      	ldr	r3, [pc, #4]	; (8007e78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	e00d      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007e78:	40021000 	.word	0x40021000
 8007e7c:	40007000 	.word	0x40007000
 8007e80:	10908100 	.word	0x10908100
 8007e84:	2302      	movs	r3, #2
 8007e86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	fa93 f3a3 	rbit	r3, r3
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	4b78      	ldr	r3, [pc, #480]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	2202      	movs	r2, #2
 8007e96:	613a      	str	r2, [r7, #16]
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	fa92 f2a2 	rbit	r2, r2
 8007e9e:	60fa      	str	r2, [r7, #12]
  return result;
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	fab2 f282 	clz	r2, r2
 8007ea6:	b2d2      	uxtb	r2, r2
 8007ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eac:	b2d2      	uxtb	r2, r2
 8007eae:	f002 021f 	and.w	r2, r2, #31
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8007eb8:	4013      	ands	r3, r2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0b7      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007ebe:	4b6d      	ldr	r3, [pc, #436]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	496a      	ldr	r1, [pc, #424]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007ed0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d105      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ed8:	4b66      	ldr	r3, [pc, #408]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007eda:	69db      	ldr	r3, [r3, #28]
 8007edc:	4a65      	ldr	r2, [pc, #404]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ee2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d008      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ef0:	4b60      	ldr	r3, [pc, #384]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef4:	f023 0203 	bic.w	r2, r3, #3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	495d      	ldr	r1, [pc, #372]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d008      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f0e:	4b59      	ldr	r3, [pc, #356]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	4956      	ldr	r1, [pc, #344]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f2c:	4b51      	ldr	r3, [pc, #324]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	494e      	ldr	r1, [pc, #312]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f4a:	4b4a      	ldr	r3, [pc, #296]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	f023 0210 	bic.w	r2, r3, #16
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	4947      	ldr	r1, [pc, #284]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d008      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007f68:	4b42      	ldr	r3, [pc, #264]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f74:	493f      	ldr	r1, [pc, #252]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d008      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f86:	4b3b      	ldr	r3, [pc, #236]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	f023 0220 	bic.w	r2, r3, #32
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	4938      	ldr	r1, [pc, #224]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0308 	and.w	r3, r3, #8
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d008      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fa4:	4b33      	ldr	r3, [pc, #204]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	4930      	ldr	r1, [pc, #192]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d008      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007fc2:	4b2c      	ldr	r3, [pc, #176]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	4929      	ldr	r1, [pc, #164]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d008      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fe0:	4b24      	ldr	r3, [pc, #144]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	4921      	ldr	r1, [pc, #132]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007ffe:	4b1d      	ldr	r3, [pc, #116]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	491a      	ldr	r1, [pc, #104]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800800c:	4313      	orrs	r3, r2
 800800e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008018:	2b00      	cmp	r3, #0
 800801a:	d008      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800801c:	4b15      	ldr	r3, [pc, #84]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	4912      	ldr	r1, [pc, #72]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800802a:	4313      	orrs	r3, r2
 800802c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d008      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800803a:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	490b      	ldr	r1, [pc, #44]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008048:	4313      	orrs	r3, r2
 800804a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d008      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008064:	4903      	ldr	r1, [pc, #12]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008066:	4313      	orrs	r3, r2
 8008068:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3748      	adds	r7, #72	; 0x48
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40021000 	.word	0x40021000

08008078 <__errno>:
 8008078:	4b01      	ldr	r3, [pc, #4]	; (8008080 <__errno+0x8>)
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000034 	.word	0x20000034

08008084 <__libc_init_array>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	4d0d      	ldr	r5, [pc, #52]	; (80080bc <__libc_init_array+0x38>)
 8008088:	4c0d      	ldr	r4, [pc, #52]	; (80080c0 <__libc_init_array+0x3c>)
 800808a:	1b64      	subs	r4, r4, r5
 800808c:	10a4      	asrs	r4, r4, #2
 800808e:	2600      	movs	r6, #0
 8008090:	42a6      	cmp	r6, r4
 8008092:	d109      	bne.n	80080a8 <__libc_init_array+0x24>
 8008094:	4d0b      	ldr	r5, [pc, #44]	; (80080c4 <__libc_init_array+0x40>)
 8008096:	4c0c      	ldr	r4, [pc, #48]	; (80080c8 <__libc_init_array+0x44>)
 8008098:	f000 fdc6 	bl	8008c28 <_init>
 800809c:	1b64      	subs	r4, r4, r5
 800809e:	10a4      	asrs	r4, r4, #2
 80080a0:	2600      	movs	r6, #0
 80080a2:	42a6      	cmp	r6, r4
 80080a4:	d105      	bne.n	80080b2 <__libc_init_array+0x2e>
 80080a6:	bd70      	pop	{r4, r5, r6, pc}
 80080a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ac:	4798      	blx	r3
 80080ae:	3601      	adds	r6, #1
 80080b0:	e7ee      	b.n	8008090 <__libc_init_array+0xc>
 80080b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b6:	4798      	blx	r3
 80080b8:	3601      	adds	r6, #1
 80080ba:	e7f2      	b.n	80080a2 <__libc_init_array+0x1e>
 80080bc:	08008ce8 	.word	0x08008ce8
 80080c0:	08008ce8 	.word	0x08008ce8
 80080c4:	08008ce8 	.word	0x08008ce8
 80080c8:	08008cec 	.word	0x08008cec

080080cc <memset>:
 80080cc:	4402      	add	r2, r0
 80080ce:	4603      	mov	r3, r0
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d100      	bne.n	80080d6 <memset+0xa>
 80080d4:	4770      	bx	lr
 80080d6:	f803 1b01 	strb.w	r1, [r3], #1
 80080da:	e7f9      	b.n	80080d0 <memset+0x4>

080080dc <asin>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	ed2d 8b02 	vpush	{d8}
 80080e2:	ec55 4b10 	vmov	r4, r5, d0
 80080e6:	f000 f85b 	bl	80081a0 <__ieee754_asin>
 80080ea:	4622      	mov	r2, r4
 80080ec:	462b      	mov	r3, r5
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	eeb0 8a40 	vmov.f32	s16, s0
 80080f6:	eef0 8a60 	vmov.f32	s17, s1
 80080fa:	f7f8 fcbb 	bl	8000a74 <__aeabi_dcmpun>
 80080fe:	b9a8      	cbnz	r0, 800812c <asin+0x50>
 8008100:	ec45 4b10 	vmov	d0, r4, r5
 8008104:	f000 fd7c 	bl	8008c00 <fabs>
 8008108:	4b0c      	ldr	r3, [pc, #48]	; (800813c <asin+0x60>)
 800810a:	ec51 0b10 	vmov	r0, r1, d0
 800810e:	2200      	movs	r2, #0
 8008110:	f7f8 fca6 	bl	8000a60 <__aeabi_dcmpgt>
 8008114:	b150      	cbz	r0, 800812c <asin+0x50>
 8008116:	f7ff ffaf 	bl	8008078 <__errno>
 800811a:	ecbd 8b02 	vpop	{d8}
 800811e:	2321      	movs	r3, #33	; 0x21
 8008120:	6003      	str	r3, [r0, #0]
 8008122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008126:	4806      	ldr	r0, [pc, #24]	; (8008140 <asin+0x64>)
 8008128:	f000 bd76 	b.w	8008c18 <nan>
 800812c:	eeb0 0a48 	vmov.f32	s0, s16
 8008130:	eef0 0a68 	vmov.f32	s1, s17
 8008134:	ecbd 8b02 	vpop	{d8}
 8008138:	bd38      	pop	{r3, r4, r5, pc}
 800813a:	bf00      	nop
 800813c:	3ff00000 	.word	0x3ff00000
 8008140:	08008c70 	.word	0x08008c70

08008144 <atan2>:
 8008144:	f000 ba40 	b.w	80085c8 <__ieee754_atan2>

08008148 <sqrt>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	ed2d 8b02 	vpush	{d8}
 800814e:	ec55 4b10 	vmov	r4, r5, d0
 8008152:	f000 fb03 	bl	800875c <__ieee754_sqrt>
 8008156:	4622      	mov	r2, r4
 8008158:	462b      	mov	r3, r5
 800815a:	4620      	mov	r0, r4
 800815c:	4629      	mov	r1, r5
 800815e:	eeb0 8a40 	vmov.f32	s16, s0
 8008162:	eef0 8a60 	vmov.f32	s17, s1
 8008166:	f7f8 fc85 	bl	8000a74 <__aeabi_dcmpun>
 800816a:	b990      	cbnz	r0, 8008192 <sqrt+0x4a>
 800816c:	2200      	movs	r2, #0
 800816e:	2300      	movs	r3, #0
 8008170:	4620      	mov	r0, r4
 8008172:	4629      	mov	r1, r5
 8008174:	f7f8 fc56 	bl	8000a24 <__aeabi_dcmplt>
 8008178:	b158      	cbz	r0, 8008192 <sqrt+0x4a>
 800817a:	f7ff ff7d 	bl	8008078 <__errno>
 800817e:	2321      	movs	r3, #33	; 0x21
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	4610      	mov	r0, r2
 8008188:	4619      	mov	r1, r3
 800818a:	f7f8 fb03 	bl	8000794 <__aeabi_ddiv>
 800818e:	ec41 0b18 	vmov	d8, r0, r1
 8008192:	eeb0 0a48 	vmov.f32	s0, s16
 8008196:	eef0 0a68 	vmov.f32	s1, s17
 800819a:	ecbd 8b02 	vpop	{d8}
 800819e:	bd38      	pop	{r3, r4, r5, pc}

080081a0 <__ieee754_asin>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	ed2d 8b04 	vpush	{d8-d9}
 80081a8:	ec55 4b10 	vmov	r4, r5, d0
 80081ac:	4bcc      	ldr	r3, [pc, #816]	; (80084e0 <__ieee754_asin+0x340>)
 80081ae:	b083      	sub	sp, #12
 80081b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80081b4:	4598      	cmp	r8, r3
 80081b6:	9501      	str	r5, [sp, #4]
 80081b8:	dd35      	ble.n	8008226 <__ieee754_asin+0x86>
 80081ba:	ee10 3a10 	vmov	r3, s0
 80081be:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80081c2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80081c6:	ea58 0303 	orrs.w	r3, r8, r3
 80081ca:	d117      	bne.n	80081fc <__ieee754_asin+0x5c>
 80081cc:	a3aa      	add	r3, pc, #680	; (adr r3, 8008478 <__ieee754_asin+0x2d8>)
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	ee10 0a10 	vmov	r0, s0
 80081d6:	4629      	mov	r1, r5
 80081d8:	f7f8 f9b2 	bl	8000540 <__aeabi_dmul>
 80081dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008480 <__ieee754_asin+0x2e0>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	4606      	mov	r6, r0
 80081e4:	460f      	mov	r7, r1
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f8 f9a9 	bl	8000540 <__aeabi_dmul>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4630      	mov	r0, r6
 80081f4:	4639      	mov	r1, r7
 80081f6:	f7f7 ffed 	bl	80001d4 <__adddf3>
 80081fa:	e00b      	b.n	8008214 <__ieee754_asin+0x74>
 80081fc:	ee10 2a10 	vmov	r2, s0
 8008200:	462b      	mov	r3, r5
 8008202:	ee10 0a10 	vmov	r0, s0
 8008206:	4629      	mov	r1, r5
 8008208:	f7f7 ffe2 	bl	80001d0 <__aeabi_dsub>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	f7f8 fac0 	bl	8000794 <__aeabi_ddiv>
 8008214:	4604      	mov	r4, r0
 8008216:	460d      	mov	r5, r1
 8008218:	ec45 4b10 	vmov	d0, r4, r5
 800821c:	b003      	add	sp, #12
 800821e:	ecbd 8b04 	vpop	{d8-d9}
 8008222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008226:	4baf      	ldr	r3, [pc, #700]	; (80084e4 <__ieee754_asin+0x344>)
 8008228:	4598      	cmp	r8, r3
 800822a:	dc11      	bgt.n	8008250 <__ieee754_asin+0xb0>
 800822c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008230:	f280 80ae 	bge.w	8008390 <__ieee754_asin+0x1f0>
 8008234:	a394      	add	r3, pc, #592	; (adr r3, 8008488 <__ieee754_asin+0x2e8>)
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	ee10 0a10 	vmov	r0, s0
 800823e:	4629      	mov	r1, r5
 8008240:	f7f7 ffc8 	bl	80001d4 <__adddf3>
 8008244:	4ba8      	ldr	r3, [pc, #672]	; (80084e8 <__ieee754_asin+0x348>)
 8008246:	2200      	movs	r2, #0
 8008248:	f7f8 fc0a 	bl	8000a60 <__aeabi_dcmpgt>
 800824c:	2800      	cmp	r0, #0
 800824e:	d1e3      	bne.n	8008218 <__ieee754_asin+0x78>
 8008250:	ec45 4b10 	vmov	d0, r4, r5
 8008254:	f000 fcd4 	bl	8008c00 <fabs>
 8008258:	49a3      	ldr	r1, [pc, #652]	; (80084e8 <__ieee754_asin+0x348>)
 800825a:	ec53 2b10 	vmov	r2, r3, d0
 800825e:	2000      	movs	r0, #0
 8008260:	f7f7 ffb6 	bl	80001d0 <__aeabi_dsub>
 8008264:	4ba1      	ldr	r3, [pc, #644]	; (80084ec <__ieee754_asin+0x34c>)
 8008266:	2200      	movs	r2, #0
 8008268:	f7f8 f96a 	bl	8000540 <__aeabi_dmul>
 800826c:	a388      	add	r3, pc, #544	; (adr r3, 8008490 <__ieee754_asin+0x2f0>)
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	4604      	mov	r4, r0
 8008274:	460d      	mov	r5, r1
 8008276:	f7f8 f963 	bl	8000540 <__aeabi_dmul>
 800827a:	a387      	add	r3, pc, #540	; (adr r3, 8008498 <__ieee754_asin+0x2f8>)
 800827c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008280:	f7f7 ffa8 	bl	80001d4 <__adddf3>
 8008284:	4622      	mov	r2, r4
 8008286:	462b      	mov	r3, r5
 8008288:	f7f8 f95a 	bl	8000540 <__aeabi_dmul>
 800828c:	a384      	add	r3, pc, #528	; (adr r3, 80084a0 <__ieee754_asin+0x300>)
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f7f7 ff9d 	bl	80001d0 <__aeabi_dsub>
 8008296:	4622      	mov	r2, r4
 8008298:	462b      	mov	r3, r5
 800829a:	f7f8 f951 	bl	8000540 <__aeabi_dmul>
 800829e:	a382      	add	r3, pc, #520	; (adr r3, 80084a8 <__ieee754_asin+0x308>)
 80082a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a4:	f7f7 ff96 	bl	80001d4 <__adddf3>
 80082a8:	4622      	mov	r2, r4
 80082aa:	462b      	mov	r3, r5
 80082ac:	f7f8 f948 	bl	8000540 <__aeabi_dmul>
 80082b0:	a37f      	add	r3, pc, #508	; (adr r3, 80084b0 <__ieee754_asin+0x310>)
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f7f7 ff8b 	bl	80001d0 <__aeabi_dsub>
 80082ba:	4622      	mov	r2, r4
 80082bc:	462b      	mov	r3, r5
 80082be:	f7f8 f93f 	bl	8000540 <__aeabi_dmul>
 80082c2:	a37d      	add	r3, pc, #500	; (adr r3, 80084b8 <__ieee754_asin+0x318>)
 80082c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c8:	f7f7 ff84 	bl	80001d4 <__adddf3>
 80082cc:	4622      	mov	r2, r4
 80082ce:	462b      	mov	r3, r5
 80082d0:	f7f8 f936 	bl	8000540 <__aeabi_dmul>
 80082d4:	a37a      	add	r3, pc, #488	; (adr r3, 80084c0 <__ieee754_asin+0x320>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	ec41 0b18 	vmov	d8, r0, r1
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f8 f92d 	bl	8000540 <__aeabi_dmul>
 80082e6:	a378      	add	r3, pc, #480	; (adr r3, 80084c8 <__ieee754_asin+0x328>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f7 ff70 	bl	80001d0 <__aeabi_dsub>
 80082f0:	4622      	mov	r2, r4
 80082f2:	462b      	mov	r3, r5
 80082f4:	f7f8 f924 	bl	8000540 <__aeabi_dmul>
 80082f8:	a375      	add	r3, pc, #468	; (adr r3, 80084d0 <__ieee754_asin+0x330>)
 80082fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fe:	f7f7 ff69 	bl	80001d4 <__adddf3>
 8008302:	4622      	mov	r2, r4
 8008304:	462b      	mov	r3, r5
 8008306:	f7f8 f91b 	bl	8000540 <__aeabi_dmul>
 800830a:	a373      	add	r3, pc, #460	; (adr r3, 80084d8 <__ieee754_asin+0x338>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f7 ff5e 	bl	80001d0 <__aeabi_dsub>
 8008314:	4622      	mov	r2, r4
 8008316:	462b      	mov	r3, r5
 8008318:	f7f8 f912 	bl	8000540 <__aeabi_dmul>
 800831c:	4b72      	ldr	r3, [pc, #456]	; (80084e8 <__ieee754_asin+0x348>)
 800831e:	2200      	movs	r2, #0
 8008320:	f7f7 ff58 	bl	80001d4 <__adddf3>
 8008324:	ec45 4b10 	vmov	d0, r4, r5
 8008328:	4606      	mov	r6, r0
 800832a:	460f      	mov	r7, r1
 800832c:	f000 fa16 	bl	800875c <__ieee754_sqrt>
 8008330:	4b6f      	ldr	r3, [pc, #444]	; (80084f0 <__ieee754_asin+0x350>)
 8008332:	4598      	cmp	r8, r3
 8008334:	ec5b ab10 	vmov	sl, fp, d0
 8008338:	f340 80dc 	ble.w	80084f4 <__ieee754_asin+0x354>
 800833c:	4632      	mov	r2, r6
 800833e:	463b      	mov	r3, r7
 8008340:	ec51 0b18 	vmov	r0, r1, d8
 8008344:	f7f8 fa26 	bl	8000794 <__aeabi_ddiv>
 8008348:	4652      	mov	r2, sl
 800834a:	465b      	mov	r3, fp
 800834c:	f7f8 f8f8 	bl	8000540 <__aeabi_dmul>
 8008350:	4652      	mov	r2, sl
 8008352:	465b      	mov	r3, fp
 8008354:	f7f7 ff3e 	bl	80001d4 <__adddf3>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	f7f7 ff3a 	bl	80001d4 <__adddf3>
 8008360:	a347      	add	r3, pc, #284	; (adr r3, 8008480 <__ieee754_asin+0x2e0>)
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f7 ff33 	bl	80001d0 <__aeabi_dsub>
 800836a:	4602      	mov	r2, r0
 800836c:	460b      	mov	r3, r1
 800836e:	a142      	add	r1, pc, #264	; (adr r1, 8008478 <__ieee754_asin+0x2d8>)
 8008370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008374:	f7f7 ff2c 	bl	80001d0 <__aeabi_dsub>
 8008378:	9b01      	ldr	r3, [sp, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	bfdc      	itt	le
 800837e:	4602      	movle	r2, r0
 8008380:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008384:	4604      	mov	r4, r0
 8008386:	460d      	mov	r5, r1
 8008388:	bfdc      	itt	le
 800838a:	4614      	movle	r4, r2
 800838c:	461d      	movle	r5, r3
 800838e:	e743      	b.n	8008218 <__ieee754_asin+0x78>
 8008390:	ee10 2a10 	vmov	r2, s0
 8008394:	ee10 0a10 	vmov	r0, s0
 8008398:	462b      	mov	r3, r5
 800839a:	4629      	mov	r1, r5
 800839c:	f7f8 f8d0 	bl	8000540 <__aeabi_dmul>
 80083a0:	a33b      	add	r3, pc, #236	; (adr r3, 8008490 <__ieee754_asin+0x2f0>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	4606      	mov	r6, r0
 80083a8:	460f      	mov	r7, r1
 80083aa:	f7f8 f8c9 	bl	8000540 <__aeabi_dmul>
 80083ae:	a33a      	add	r3, pc, #232	; (adr r3, 8008498 <__ieee754_asin+0x2f8>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f7 ff0e 	bl	80001d4 <__adddf3>
 80083b8:	4632      	mov	r2, r6
 80083ba:	463b      	mov	r3, r7
 80083bc:	f7f8 f8c0 	bl	8000540 <__aeabi_dmul>
 80083c0:	a337      	add	r3, pc, #220	; (adr r3, 80084a0 <__ieee754_asin+0x300>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f7 ff03 	bl	80001d0 <__aeabi_dsub>
 80083ca:	4632      	mov	r2, r6
 80083cc:	463b      	mov	r3, r7
 80083ce:	f7f8 f8b7 	bl	8000540 <__aeabi_dmul>
 80083d2:	a335      	add	r3, pc, #212	; (adr r3, 80084a8 <__ieee754_asin+0x308>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f7 fefc 	bl	80001d4 <__adddf3>
 80083dc:	4632      	mov	r2, r6
 80083de:	463b      	mov	r3, r7
 80083e0:	f7f8 f8ae 	bl	8000540 <__aeabi_dmul>
 80083e4:	a332      	add	r3, pc, #200	; (adr r3, 80084b0 <__ieee754_asin+0x310>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f7 fef1 	bl	80001d0 <__aeabi_dsub>
 80083ee:	4632      	mov	r2, r6
 80083f0:	463b      	mov	r3, r7
 80083f2:	f7f8 f8a5 	bl	8000540 <__aeabi_dmul>
 80083f6:	a330      	add	r3, pc, #192	; (adr r3, 80084b8 <__ieee754_asin+0x318>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f7f7 feea 	bl	80001d4 <__adddf3>
 8008400:	4632      	mov	r2, r6
 8008402:	463b      	mov	r3, r7
 8008404:	f7f8 f89c 	bl	8000540 <__aeabi_dmul>
 8008408:	a32d      	add	r3, pc, #180	; (adr r3, 80084c0 <__ieee754_asin+0x320>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	4680      	mov	r8, r0
 8008410:	4689      	mov	r9, r1
 8008412:	4630      	mov	r0, r6
 8008414:	4639      	mov	r1, r7
 8008416:	f7f8 f893 	bl	8000540 <__aeabi_dmul>
 800841a:	a32b      	add	r3, pc, #172	; (adr r3, 80084c8 <__ieee754_asin+0x328>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	f7f7 fed6 	bl	80001d0 <__aeabi_dsub>
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	f7f8 f88a 	bl	8000540 <__aeabi_dmul>
 800842c:	a328      	add	r3, pc, #160	; (adr r3, 80084d0 <__ieee754_asin+0x330>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f7f7 fecf 	bl	80001d4 <__adddf3>
 8008436:	4632      	mov	r2, r6
 8008438:	463b      	mov	r3, r7
 800843a:	f7f8 f881 	bl	8000540 <__aeabi_dmul>
 800843e:	a326      	add	r3, pc, #152	; (adr r3, 80084d8 <__ieee754_asin+0x338>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f7f7 fec4 	bl	80001d0 <__aeabi_dsub>
 8008448:	4632      	mov	r2, r6
 800844a:	463b      	mov	r3, r7
 800844c:	f7f8 f878 	bl	8000540 <__aeabi_dmul>
 8008450:	4b25      	ldr	r3, [pc, #148]	; (80084e8 <__ieee754_asin+0x348>)
 8008452:	2200      	movs	r2, #0
 8008454:	f7f7 febe 	bl	80001d4 <__adddf3>
 8008458:	4602      	mov	r2, r0
 800845a:	460b      	mov	r3, r1
 800845c:	4640      	mov	r0, r8
 800845e:	4649      	mov	r1, r9
 8008460:	f7f8 f998 	bl	8000794 <__aeabi_ddiv>
 8008464:	4622      	mov	r2, r4
 8008466:	462b      	mov	r3, r5
 8008468:	f7f8 f86a 	bl	8000540 <__aeabi_dmul>
 800846c:	4602      	mov	r2, r0
 800846e:	460b      	mov	r3, r1
 8008470:	4620      	mov	r0, r4
 8008472:	4629      	mov	r1, r5
 8008474:	e6bf      	b.n	80081f6 <__ieee754_asin+0x56>
 8008476:	bf00      	nop
 8008478:	54442d18 	.word	0x54442d18
 800847c:	3ff921fb 	.word	0x3ff921fb
 8008480:	33145c07 	.word	0x33145c07
 8008484:	3c91a626 	.word	0x3c91a626
 8008488:	8800759c 	.word	0x8800759c
 800848c:	7e37e43c 	.word	0x7e37e43c
 8008490:	0dfdf709 	.word	0x0dfdf709
 8008494:	3f023de1 	.word	0x3f023de1
 8008498:	7501b288 	.word	0x7501b288
 800849c:	3f49efe0 	.word	0x3f49efe0
 80084a0:	b5688f3b 	.word	0xb5688f3b
 80084a4:	3fa48228 	.word	0x3fa48228
 80084a8:	0e884455 	.word	0x0e884455
 80084ac:	3fc9c155 	.word	0x3fc9c155
 80084b0:	03eb6f7d 	.word	0x03eb6f7d
 80084b4:	3fd4d612 	.word	0x3fd4d612
 80084b8:	55555555 	.word	0x55555555
 80084bc:	3fc55555 	.word	0x3fc55555
 80084c0:	b12e9282 	.word	0xb12e9282
 80084c4:	3fb3b8c5 	.word	0x3fb3b8c5
 80084c8:	1b8d0159 	.word	0x1b8d0159
 80084cc:	3fe6066c 	.word	0x3fe6066c
 80084d0:	9c598ac8 	.word	0x9c598ac8
 80084d4:	40002ae5 	.word	0x40002ae5
 80084d8:	1c8a2d4b 	.word	0x1c8a2d4b
 80084dc:	40033a27 	.word	0x40033a27
 80084e0:	3fefffff 	.word	0x3fefffff
 80084e4:	3fdfffff 	.word	0x3fdfffff
 80084e8:	3ff00000 	.word	0x3ff00000
 80084ec:	3fe00000 	.word	0x3fe00000
 80084f0:	3fef3332 	.word	0x3fef3332
 80084f4:	ee10 2a10 	vmov	r2, s0
 80084f8:	ee10 0a10 	vmov	r0, s0
 80084fc:	465b      	mov	r3, fp
 80084fe:	4659      	mov	r1, fp
 8008500:	f7f7 fe68 	bl	80001d4 <__adddf3>
 8008504:	4632      	mov	r2, r6
 8008506:	463b      	mov	r3, r7
 8008508:	ec41 0b19 	vmov	d9, r0, r1
 800850c:	ec51 0b18 	vmov	r0, r1, d8
 8008510:	f7f8 f940 	bl	8000794 <__aeabi_ddiv>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	ec51 0b19 	vmov	r0, r1, d9
 800851c:	f7f8 f810 	bl	8000540 <__aeabi_dmul>
 8008520:	f04f 0800 	mov.w	r8, #0
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	4642      	mov	r2, r8
 800852a:	465b      	mov	r3, fp
 800852c:	4640      	mov	r0, r8
 800852e:	4659      	mov	r1, fp
 8008530:	f7f8 f806 	bl	8000540 <__aeabi_dmul>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4620      	mov	r0, r4
 800853a:	4629      	mov	r1, r5
 800853c:	f7f7 fe48 	bl	80001d0 <__aeabi_dsub>
 8008540:	4642      	mov	r2, r8
 8008542:	4604      	mov	r4, r0
 8008544:	460d      	mov	r5, r1
 8008546:	465b      	mov	r3, fp
 8008548:	4650      	mov	r0, sl
 800854a:	4659      	mov	r1, fp
 800854c:	f7f7 fe42 	bl	80001d4 <__adddf3>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f8 f91c 	bl	8000794 <__aeabi_ddiv>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	f7f7 fe38 	bl	80001d4 <__adddf3>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	a113      	add	r1, pc, #76	; (adr r1, 80085b8 <__ieee754_asin+0x418>)
 800856a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800856e:	f7f7 fe2f 	bl	80001d0 <__aeabi_dsub>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4630      	mov	r0, r6
 8008578:	4639      	mov	r1, r7
 800857a:	f7f7 fe29 	bl	80001d0 <__aeabi_dsub>
 800857e:	4642      	mov	r2, r8
 8008580:	4604      	mov	r4, r0
 8008582:	460d      	mov	r5, r1
 8008584:	465b      	mov	r3, fp
 8008586:	4640      	mov	r0, r8
 8008588:	4659      	mov	r1, fp
 800858a:	f7f7 fe23 	bl	80001d4 <__adddf3>
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	a10b      	add	r1, pc, #44	; (adr r1, 80085c0 <__ieee754_asin+0x420>)
 8008594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008598:	f7f7 fe1a 	bl	80001d0 <__aeabi_dsub>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4620      	mov	r0, r4
 80085a2:	4629      	mov	r1, r5
 80085a4:	f7f7 fe14 	bl	80001d0 <__aeabi_dsub>
 80085a8:	4602      	mov	r2, r0
 80085aa:	460b      	mov	r3, r1
 80085ac:	a104      	add	r1, pc, #16	; (adr r1, 80085c0 <__ieee754_asin+0x420>)
 80085ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085b2:	e6df      	b.n	8008374 <__ieee754_asin+0x1d4>
 80085b4:	f3af 8000 	nop.w
 80085b8:	33145c07 	.word	0x33145c07
 80085bc:	3c91a626 	.word	0x3c91a626
 80085c0:	54442d18 	.word	0x54442d18
 80085c4:	3fe921fb 	.word	0x3fe921fb

080085c8 <__ieee754_atan2>:
 80085c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085cc:	ec57 6b11 	vmov	r6, r7, d1
 80085d0:	4273      	negs	r3, r6
 80085d2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8008758 <__ieee754_atan2+0x190>
 80085d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80085da:	4333      	orrs	r3, r6
 80085dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80085e0:	4573      	cmp	r3, lr
 80085e2:	ec51 0b10 	vmov	r0, r1, d0
 80085e6:	ee11 8a10 	vmov	r8, s2
 80085ea:	d80a      	bhi.n	8008602 <__ieee754_atan2+0x3a>
 80085ec:	4244      	negs	r4, r0
 80085ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085f2:	4304      	orrs	r4, r0
 80085f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80085f8:	4574      	cmp	r4, lr
 80085fa:	ee10 9a10 	vmov	r9, s0
 80085fe:	468c      	mov	ip, r1
 8008600:	d907      	bls.n	8008612 <__ieee754_atan2+0x4a>
 8008602:	4632      	mov	r2, r6
 8008604:	463b      	mov	r3, r7
 8008606:	f7f7 fde5 	bl	80001d4 <__adddf3>
 800860a:	ec41 0b10 	vmov	d0, r0, r1
 800860e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008612:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008616:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800861a:	4334      	orrs	r4, r6
 800861c:	d103      	bne.n	8008626 <__ieee754_atan2+0x5e>
 800861e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008622:	f000 b94d 	b.w	80088c0 <atan>
 8008626:	17bc      	asrs	r4, r7, #30
 8008628:	f004 0402 	and.w	r4, r4, #2
 800862c:	ea53 0909 	orrs.w	r9, r3, r9
 8008630:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008634:	d107      	bne.n	8008646 <__ieee754_atan2+0x7e>
 8008636:	2c02      	cmp	r4, #2
 8008638:	d060      	beq.n	80086fc <__ieee754_atan2+0x134>
 800863a:	2c03      	cmp	r4, #3
 800863c:	d1e5      	bne.n	800860a <__ieee754_atan2+0x42>
 800863e:	a142      	add	r1, pc, #264	; (adr r1, 8008748 <__ieee754_atan2+0x180>)
 8008640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008644:	e7e1      	b.n	800860a <__ieee754_atan2+0x42>
 8008646:	ea52 0808 	orrs.w	r8, r2, r8
 800864a:	d106      	bne.n	800865a <__ieee754_atan2+0x92>
 800864c:	f1bc 0f00 	cmp.w	ip, #0
 8008650:	da5f      	bge.n	8008712 <__ieee754_atan2+0x14a>
 8008652:	a13f      	add	r1, pc, #252	; (adr r1, 8008750 <__ieee754_atan2+0x188>)
 8008654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008658:	e7d7      	b.n	800860a <__ieee754_atan2+0x42>
 800865a:	4572      	cmp	r2, lr
 800865c:	d10f      	bne.n	800867e <__ieee754_atan2+0xb6>
 800865e:	4293      	cmp	r3, r2
 8008660:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008664:	d107      	bne.n	8008676 <__ieee754_atan2+0xae>
 8008666:	2c02      	cmp	r4, #2
 8008668:	d84c      	bhi.n	8008704 <__ieee754_atan2+0x13c>
 800866a:	4b35      	ldr	r3, [pc, #212]	; (8008740 <__ieee754_atan2+0x178>)
 800866c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008670:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008674:	e7c9      	b.n	800860a <__ieee754_atan2+0x42>
 8008676:	2c02      	cmp	r4, #2
 8008678:	d848      	bhi.n	800870c <__ieee754_atan2+0x144>
 800867a:	4b32      	ldr	r3, [pc, #200]	; (8008744 <__ieee754_atan2+0x17c>)
 800867c:	e7f6      	b.n	800866c <__ieee754_atan2+0xa4>
 800867e:	4573      	cmp	r3, lr
 8008680:	d0e4      	beq.n	800864c <__ieee754_atan2+0x84>
 8008682:	1a9b      	subs	r3, r3, r2
 8008684:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008688:	ea4f 5223 	mov.w	r2, r3, asr #20
 800868c:	da1e      	bge.n	80086cc <__ieee754_atan2+0x104>
 800868e:	2f00      	cmp	r7, #0
 8008690:	da01      	bge.n	8008696 <__ieee754_atan2+0xce>
 8008692:	323c      	adds	r2, #60	; 0x3c
 8008694:	db1e      	blt.n	80086d4 <__ieee754_atan2+0x10c>
 8008696:	4632      	mov	r2, r6
 8008698:	463b      	mov	r3, r7
 800869a:	f7f8 f87b 	bl	8000794 <__aeabi_ddiv>
 800869e:	ec41 0b10 	vmov	d0, r0, r1
 80086a2:	f000 faad 	bl	8008c00 <fabs>
 80086a6:	f000 f90b 	bl	80088c0 <atan>
 80086aa:	ec51 0b10 	vmov	r0, r1, d0
 80086ae:	2c01      	cmp	r4, #1
 80086b0:	d013      	beq.n	80086da <__ieee754_atan2+0x112>
 80086b2:	2c02      	cmp	r4, #2
 80086b4:	d015      	beq.n	80086e2 <__ieee754_atan2+0x11a>
 80086b6:	2c00      	cmp	r4, #0
 80086b8:	d0a7      	beq.n	800860a <__ieee754_atan2+0x42>
 80086ba:	a319      	add	r3, pc, #100	; (adr r3, 8008720 <__ieee754_atan2+0x158>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f7f7 fd86 	bl	80001d0 <__aeabi_dsub>
 80086c4:	a318      	add	r3, pc, #96	; (adr r3, 8008728 <__ieee754_atan2+0x160>)
 80086c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ca:	e014      	b.n	80086f6 <__ieee754_atan2+0x12e>
 80086cc:	a118      	add	r1, pc, #96	; (adr r1, 8008730 <__ieee754_atan2+0x168>)
 80086ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d2:	e7ec      	b.n	80086ae <__ieee754_atan2+0xe6>
 80086d4:	2000      	movs	r0, #0
 80086d6:	2100      	movs	r1, #0
 80086d8:	e7e9      	b.n	80086ae <__ieee754_atan2+0xe6>
 80086da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086de:	4619      	mov	r1, r3
 80086e0:	e793      	b.n	800860a <__ieee754_atan2+0x42>
 80086e2:	a30f      	add	r3, pc, #60	; (adr r3, 8008720 <__ieee754_atan2+0x158>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fd72 	bl	80001d0 <__aeabi_dsub>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	a10d      	add	r1, pc, #52	; (adr r1, 8008728 <__ieee754_atan2+0x160>)
 80086f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086f6:	f7f7 fd6b 	bl	80001d0 <__aeabi_dsub>
 80086fa:	e786      	b.n	800860a <__ieee754_atan2+0x42>
 80086fc:	a10a      	add	r1, pc, #40	; (adr r1, 8008728 <__ieee754_atan2+0x160>)
 80086fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008702:	e782      	b.n	800860a <__ieee754_atan2+0x42>
 8008704:	a10c      	add	r1, pc, #48	; (adr r1, 8008738 <__ieee754_atan2+0x170>)
 8008706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800870a:	e77e      	b.n	800860a <__ieee754_atan2+0x42>
 800870c:	2000      	movs	r0, #0
 800870e:	2100      	movs	r1, #0
 8008710:	e77b      	b.n	800860a <__ieee754_atan2+0x42>
 8008712:	a107      	add	r1, pc, #28	; (adr r1, 8008730 <__ieee754_atan2+0x168>)
 8008714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008718:	e777      	b.n	800860a <__ieee754_atan2+0x42>
 800871a:	bf00      	nop
 800871c:	f3af 8000 	nop.w
 8008720:	33145c07 	.word	0x33145c07
 8008724:	3ca1a626 	.word	0x3ca1a626
 8008728:	54442d18 	.word	0x54442d18
 800872c:	400921fb 	.word	0x400921fb
 8008730:	54442d18 	.word	0x54442d18
 8008734:	3ff921fb 	.word	0x3ff921fb
 8008738:	54442d18 	.word	0x54442d18
 800873c:	3fe921fb 	.word	0x3fe921fb
 8008740:	08008c78 	.word	0x08008c78
 8008744:	08008c90 	.word	0x08008c90
 8008748:	54442d18 	.word	0x54442d18
 800874c:	c00921fb 	.word	0xc00921fb
 8008750:	54442d18 	.word	0x54442d18
 8008754:	bff921fb 	.word	0xbff921fb
 8008758:	7ff00000 	.word	0x7ff00000

0800875c <__ieee754_sqrt>:
 800875c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008760:	ec55 4b10 	vmov	r4, r5, d0
 8008764:	4e55      	ldr	r6, [pc, #340]	; (80088bc <__ieee754_sqrt+0x160>)
 8008766:	43ae      	bics	r6, r5
 8008768:	ee10 0a10 	vmov	r0, s0
 800876c:	ee10 3a10 	vmov	r3, s0
 8008770:	462a      	mov	r2, r5
 8008772:	4629      	mov	r1, r5
 8008774:	d110      	bne.n	8008798 <__ieee754_sqrt+0x3c>
 8008776:	ee10 2a10 	vmov	r2, s0
 800877a:	462b      	mov	r3, r5
 800877c:	f7f7 fee0 	bl	8000540 <__aeabi_dmul>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	4620      	mov	r0, r4
 8008786:	4629      	mov	r1, r5
 8008788:	f7f7 fd24 	bl	80001d4 <__adddf3>
 800878c:	4604      	mov	r4, r0
 800878e:	460d      	mov	r5, r1
 8008790:	ec45 4b10 	vmov	d0, r4, r5
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	2d00      	cmp	r5, #0
 800879a:	dc10      	bgt.n	80087be <__ieee754_sqrt+0x62>
 800879c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80087a0:	4330      	orrs	r0, r6
 80087a2:	d0f5      	beq.n	8008790 <__ieee754_sqrt+0x34>
 80087a4:	b15d      	cbz	r5, 80087be <__ieee754_sqrt+0x62>
 80087a6:	ee10 2a10 	vmov	r2, s0
 80087aa:	462b      	mov	r3, r5
 80087ac:	ee10 0a10 	vmov	r0, s0
 80087b0:	f7f7 fd0e 	bl	80001d0 <__aeabi_dsub>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	f7f7 ffec 	bl	8000794 <__aeabi_ddiv>
 80087bc:	e7e6      	b.n	800878c <__ieee754_sqrt+0x30>
 80087be:	1512      	asrs	r2, r2, #20
 80087c0:	d074      	beq.n	80088ac <__ieee754_sqrt+0x150>
 80087c2:	07d4      	lsls	r4, r2, #31
 80087c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80087c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80087cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80087d0:	bf5e      	ittt	pl
 80087d2:	0fda      	lsrpl	r2, r3, #31
 80087d4:	005b      	lslpl	r3, r3, #1
 80087d6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80087da:	2400      	movs	r4, #0
 80087dc:	0fda      	lsrs	r2, r3, #31
 80087de:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80087e2:	107f      	asrs	r7, r7, #1
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	2516      	movs	r5, #22
 80087e8:	4620      	mov	r0, r4
 80087ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80087ee:	1886      	adds	r6, r0, r2
 80087f0:	428e      	cmp	r6, r1
 80087f2:	bfde      	ittt	le
 80087f4:	1b89      	suble	r1, r1, r6
 80087f6:	18b0      	addle	r0, r6, r2
 80087f8:	18a4      	addle	r4, r4, r2
 80087fa:	0049      	lsls	r1, r1, #1
 80087fc:	3d01      	subs	r5, #1
 80087fe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008802:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008806:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800880a:	d1f0      	bne.n	80087ee <__ieee754_sqrt+0x92>
 800880c:	462a      	mov	r2, r5
 800880e:	f04f 0e20 	mov.w	lr, #32
 8008812:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008816:	4281      	cmp	r1, r0
 8008818:	eb06 0c05 	add.w	ip, r6, r5
 800881c:	dc02      	bgt.n	8008824 <__ieee754_sqrt+0xc8>
 800881e:	d113      	bne.n	8008848 <__ieee754_sqrt+0xec>
 8008820:	459c      	cmp	ip, r3
 8008822:	d811      	bhi.n	8008848 <__ieee754_sqrt+0xec>
 8008824:	f1bc 0f00 	cmp.w	ip, #0
 8008828:	eb0c 0506 	add.w	r5, ip, r6
 800882c:	da43      	bge.n	80088b6 <__ieee754_sqrt+0x15a>
 800882e:	2d00      	cmp	r5, #0
 8008830:	db41      	blt.n	80088b6 <__ieee754_sqrt+0x15a>
 8008832:	f100 0801 	add.w	r8, r0, #1
 8008836:	1a09      	subs	r1, r1, r0
 8008838:	459c      	cmp	ip, r3
 800883a:	bf88      	it	hi
 800883c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8008840:	eba3 030c 	sub.w	r3, r3, ip
 8008844:	4432      	add	r2, r6
 8008846:	4640      	mov	r0, r8
 8008848:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800884c:	f1be 0e01 	subs.w	lr, lr, #1
 8008850:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008854:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008858:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800885c:	d1db      	bne.n	8008816 <__ieee754_sqrt+0xba>
 800885e:	430b      	orrs	r3, r1
 8008860:	d006      	beq.n	8008870 <__ieee754_sqrt+0x114>
 8008862:	1c50      	adds	r0, r2, #1
 8008864:	bf13      	iteet	ne
 8008866:	3201      	addne	r2, #1
 8008868:	3401      	addeq	r4, #1
 800886a:	4672      	moveq	r2, lr
 800886c:	f022 0201 	bicne.w	r2, r2, #1
 8008870:	1063      	asrs	r3, r4, #1
 8008872:	0852      	lsrs	r2, r2, #1
 8008874:	07e1      	lsls	r1, r4, #31
 8008876:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800887a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800887e:	bf48      	it	mi
 8008880:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008884:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008888:	4614      	mov	r4, r2
 800888a:	e781      	b.n	8008790 <__ieee754_sqrt+0x34>
 800888c:	0ad9      	lsrs	r1, r3, #11
 800888e:	3815      	subs	r0, #21
 8008890:	055b      	lsls	r3, r3, #21
 8008892:	2900      	cmp	r1, #0
 8008894:	d0fa      	beq.n	800888c <__ieee754_sqrt+0x130>
 8008896:	02cd      	lsls	r5, r1, #11
 8008898:	d50a      	bpl.n	80088b0 <__ieee754_sqrt+0x154>
 800889a:	f1c2 0420 	rsb	r4, r2, #32
 800889e:	fa23 f404 	lsr.w	r4, r3, r4
 80088a2:	1e55      	subs	r5, r2, #1
 80088a4:	4093      	lsls	r3, r2
 80088a6:	4321      	orrs	r1, r4
 80088a8:	1b42      	subs	r2, r0, r5
 80088aa:	e78a      	b.n	80087c2 <__ieee754_sqrt+0x66>
 80088ac:	4610      	mov	r0, r2
 80088ae:	e7f0      	b.n	8008892 <__ieee754_sqrt+0x136>
 80088b0:	0049      	lsls	r1, r1, #1
 80088b2:	3201      	adds	r2, #1
 80088b4:	e7ef      	b.n	8008896 <__ieee754_sqrt+0x13a>
 80088b6:	4680      	mov	r8, r0
 80088b8:	e7bd      	b.n	8008836 <__ieee754_sqrt+0xda>
 80088ba:	bf00      	nop
 80088bc:	7ff00000 	.word	0x7ff00000

080088c0 <atan>:
 80088c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ec55 4b10 	vmov	r4, r5, d0
 80088c8:	4bc3      	ldr	r3, [pc, #780]	; (8008bd8 <atan+0x318>)
 80088ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80088ce:	429e      	cmp	r6, r3
 80088d0:	46ab      	mov	fp, r5
 80088d2:	dd18      	ble.n	8008906 <atan+0x46>
 80088d4:	4bc1      	ldr	r3, [pc, #772]	; (8008bdc <atan+0x31c>)
 80088d6:	429e      	cmp	r6, r3
 80088d8:	dc01      	bgt.n	80088de <atan+0x1e>
 80088da:	d109      	bne.n	80088f0 <atan+0x30>
 80088dc:	b144      	cbz	r4, 80088f0 <atan+0x30>
 80088de:	4622      	mov	r2, r4
 80088e0:	462b      	mov	r3, r5
 80088e2:	4620      	mov	r0, r4
 80088e4:	4629      	mov	r1, r5
 80088e6:	f7f7 fc75 	bl	80001d4 <__adddf3>
 80088ea:	4604      	mov	r4, r0
 80088ec:	460d      	mov	r5, r1
 80088ee:	e006      	b.n	80088fe <atan+0x3e>
 80088f0:	f1bb 0f00 	cmp.w	fp, #0
 80088f4:	f300 8131 	bgt.w	8008b5a <atan+0x29a>
 80088f8:	a59b      	add	r5, pc, #620	; (adr r5, 8008b68 <atan+0x2a8>)
 80088fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088fe:	ec45 4b10 	vmov	d0, r4, r5
 8008902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008906:	4bb6      	ldr	r3, [pc, #728]	; (8008be0 <atan+0x320>)
 8008908:	429e      	cmp	r6, r3
 800890a:	dc14      	bgt.n	8008936 <atan+0x76>
 800890c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008910:	429e      	cmp	r6, r3
 8008912:	dc0d      	bgt.n	8008930 <atan+0x70>
 8008914:	a396      	add	r3, pc, #600	; (adr r3, 8008b70 <atan+0x2b0>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	ee10 0a10 	vmov	r0, s0
 800891e:	4629      	mov	r1, r5
 8008920:	f7f7 fc58 	bl	80001d4 <__adddf3>
 8008924:	4baf      	ldr	r3, [pc, #700]	; (8008be4 <atan+0x324>)
 8008926:	2200      	movs	r2, #0
 8008928:	f7f8 f89a 	bl	8000a60 <__aeabi_dcmpgt>
 800892c:	2800      	cmp	r0, #0
 800892e:	d1e6      	bne.n	80088fe <atan+0x3e>
 8008930:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008934:	e02b      	b.n	800898e <atan+0xce>
 8008936:	f000 f963 	bl	8008c00 <fabs>
 800893a:	4bab      	ldr	r3, [pc, #684]	; (8008be8 <atan+0x328>)
 800893c:	429e      	cmp	r6, r3
 800893e:	ec55 4b10 	vmov	r4, r5, d0
 8008942:	f300 80bf 	bgt.w	8008ac4 <atan+0x204>
 8008946:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800894a:	429e      	cmp	r6, r3
 800894c:	f300 80a0 	bgt.w	8008a90 <atan+0x1d0>
 8008950:	ee10 2a10 	vmov	r2, s0
 8008954:	ee10 0a10 	vmov	r0, s0
 8008958:	462b      	mov	r3, r5
 800895a:	4629      	mov	r1, r5
 800895c:	f7f7 fc3a 	bl	80001d4 <__adddf3>
 8008960:	4ba0      	ldr	r3, [pc, #640]	; (8008be4 <atan+0x324>)
 8008962:	2200      	movs	r2, #0
 8008964:	f7f7 fc34 	bl	80001d0 <__aeabi_dsub>
 8008968:	2200      	movs	r2, #0
 800896a:	4606      	mov	r6, r0
 800896c:	460f      	mov	r7, r1
 800896e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008972:	4620      	mov	r0, r4
 8008974:	4629      	mov	r1, r5
 8008976:	f7f7 fc2d 	bl	80001d4 <__adddf3>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4630      	mov	r0, r6
 8008980:	4639      	mov	r1, r7
 8008982:	f7f7 ff07 	bl	8000794 <__aeabi_ddiv>
 8008986:	f04f 0a00 	mov.w	sl, #0
 800898a:	4604      	mov	r4, r0
 800898c:	460d      	mov	r5, r1
 800898e:	4622      	mov	r2, r4
 8008990:	462b      	mov	r3, r5
 8008992:	4620      	mov	r0, r4
 8008994:	4629      	mov	r1, r5
 8008996:	f7f7 fdd3 	bl	8000540 <__aeabi_dmul>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4680      	mov	r8, r0
 80089a0:	4689      	mov	r9, r1
 80089a2:	f7f7 fdcd 	bl	8000540 <__aeabi_dmul>
 80089a6:	a374      	add	r3, pc, #464	; (adr r3, 8008b78 <atan+0x2b8>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	4606      	mov	r6, r0
 80089ae:	460f      	mov	r7, r1
 80089b0:	f7f7 fdc6 	bl	8000540 <__aeabi_dmul>
 80089b4:	a372      	add	r3, pc, #456	; (adr r3, 8008b80 <atan+0x2c0>)
 80089b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ba:	f7f7 fc0b 	bl	80001d4 <__adddf3>
 80089be:	4632      	mov	r2, r6
 80089c0:	463b      	mov	r3, r7
 80089c2:	f7f7 fdbd 	bl	8000540 <__aeabi_dmul>
 80089c6:	a370      	add	r3, pc, #448	; (adr r3, 8008b88 <atan+0x2c8>)
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fc02 	bl	80001d4 <__adddf3>
 80089d0:	4632      	mov	r2, r6
 80089d2:	463b      	mov	r3, r7
 80089d4:	f7f7 fdb4 	bl	8000540 <__aeabi_dmul>
 80089d8:	a36d      	add	r3, pc, #436	; (adr r3, 8008b90 <atan+0x2d0>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	f7f7 fbf9 	bl	80001d4 <__adddf3>
 80089e2:	4632      	mov	r2, r6
 80089e4:	463b      	mov	r3, r7
 80089e6:	f7f7 fdab 	bl	8000540 <__aeabi_dmul>
 80089ea:	a36b      	add	r3, pc, #428	; (adr r3, 8008b98 <atan+0x2d8>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	f7f7 fbf0 	bl	80001d4 <__adddf3>
 80089f4:	4632      	mov	r2, r6
 80089f6:	463b      	mov	r3, r7
 80089f8:	f7f7 fda2 	bl	8000540 <__aeabi_dmul>
 80089fc:	a368      	add	r3, pc, #416	; (adr r3, 8008ba0 <atan+0x2e0>)
 80089fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a02:	f7f7 fbe7 	bl	80001d4 <__adddf3>
 8008a06:	4642      	mov	r2, r8
 8008a08:	464b      	mov	r3, r9
 8008a0a:	f7f7 fd99 	bl	8000540 <__aeabi_dmul>
 8008a0e:	a366      	add	r3, pc, #408	; (adr r3, 8008ba8 <atan+0x2e8>)
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	4680      	mov	r8, r0
 8008a16:	4689      	mov	r9, r1
 8008a18:	4630      	mov	r0, r6
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	f7f7 fd90 	bl	8000540 <__aeabi_dmul>
 8008a20:	a363      	add	r3, pc, #396	; (adr r3, 8008bb0 <atan+0x2f0>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fbd3 	bl	80001d0 <__aeabi_dsub>
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	463b      	mov	r3, r7
 8008a2e:	f7f7 fd87 	bl	8000540 <__aeabi_dmul>
 8008a32:	a361      	add	r3, pc, #388	; (adr r3, 8008bb8 <atan+0x2f8>)
 8008a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a38:	f7f7 fbca 	bl	80001d0 <__aeabi_dsub>
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	463b      	mov	r3, r7
 8008a40:	f7f7 fd7e 	bl	8000540 <__aeabi_dmul>
 8008a44:	a35e      	add	r3, pc, #376	; (adr r3, 8008bc0 <atan+0x300>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fbc1 	bl	80001d0 <__aeabi_dsub>
 8008a4e:	4632      	mov	r2, r6
 8008a50:	463b      	mov	r3, r7
 8008a52:	f7f7 fd75 	bl	8000540 <__aeabi_dmul>
 8008a56:	a35c      	add	r3, pc, #368	; (adr r3, 8008bc8 <atan+0x308>)
 8008a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5c:	f7f7 fbb8 	bl	80001d0 <__aeabi_dsub>
 8008a60:	4632      	mov	r2, r6
 8008a62:	463b      	mov	r3, r7
 8008a64:	f7f7 fd6c 	bl	8000540 <__aeabi_dmul>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	4649      	mov	r1, r9
 8008a70:	f7f7 fbb0 	bl	80001d4 <__adddf3>
 8008a74:	4622      	mov	r2, r4
 8008a76:	462b      	mov	r3, r5
 8008a78:	f7f7 fd62 	bl	8000540 <__aeabi_dmul>
 8008a7c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	d14b      	bne.n	8008b1e <atan+0x25e>
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 fba1 	bl	80001d0 <__aeabi_dsub>
 8008a8e:	e72c      	b.n	80088ea <atan+0x2a>
 8008a90:	ee10 0a10 	vmov	r0, s0
 8008a94:	4b53      	ldr	r3, [pc, #332]	; (8008be4 <atan+0x324>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f7 fb99 	bl	80001d0 <__aeabi_dsub>
 8008a9e:	4b51      	ldr	r3, [pc, #324]	; (8008be4 <atan+0x324>)
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	460f      	mov	r7, r1
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	f7f7 fb93 	bl	80001d4 <__adddf3>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	f7f7 fe6d 	bl	8000794 <__aeabi_ddiv>
 8008aba:	f04f 0a01 	mov.w	sl, #1
 8008abe:	4604      	mov	r4, r0
 8008ac0:	460d      	mov	r5, r1
 8008ac2:	e764      	b.n	800898e <atan+0xce>
 8008ac4:	4b49      	ldr	r3, [pc, #292]	; (8008bec <atan+0x32c>)
 8008ac6:	429e      	cmp	r6, r3
 8008ac8:	da1d      	bge.n	8008b06 <atan+0x246>
 8008aca:	ee10 0a10 	vmov	r0, s0
 8008ace:	4b48      	ldr	r3, [pc, #288]	; (8008bf0 <atan+0x330>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	f7f7 fb7c 	bl	80001d0 <__aeabi_dsub>
 8008ad8:	4b45      	ldr	r3, [pc, #276]	; (8008bf0 <atan+0x330>)
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	2200      	movs	r2, #0
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	f7f7 fd2c 	bl	8000540 <__aeabi_dmul>
 8008ae8:	4b3e      	ldr	r3, [pc, #248]	; (8008be4 <atan+0x324>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	f7f7 fb72 	bl	80001d4 <__adddf3>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4630      	mov	r0, r6
 8008af6:	4639      	mov	r1, r7
 8008af8:	f7f7 fe4c 	bl	8000794 <__aeabi_ddiv>
 8008afc:	f04f 0a02 	mov.w	sl, #2
 8008b00:	4604      	mov	r4, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	e743      	b.n	800898e <atan+0xce>
 8008b06:	462b      	mov	r3, r5
 8008b08:	ee10 2a10 	vmov	r2, s0
 8008b0c:	4939      	ldr	r1, [pc, #228]	; (8008bf4 <atan+0x334>)
 8008b0e:	2000      	movs	r0, #0
 8008b10:	f7f7 fe40 	bl	8000794 <__aeabi_ddiv>
 8008b14:	f04f 0a03 	mov.w	sl, #3
 8008b18:	4604      	mov	r4, r0
 8008b1a:	460d      	mov	r5, r1
 8008b1c:	e737      	b.n	800898e <atan+0xce>
 8008b1e:	4b36      	ldr	r3, [pc, #216]	; (8008bf8 <atan+0x338>)
 8008b20:	4e36      	ldr	r6, [pc, #216]	; (8008bfc <atan+0x33c>)
 8008b22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008b26:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008b2a:	e9da 2300 	ldrd	r2, r3, [sl]
 8008b2e:	f7f7 fb4f 	bl	80001d0 <__aeabi_dsub>
 8008b32:	4622      	mov	r2, r4
 8008b34:	462b      	mov	r3, r5
 8008b36:	f7f7 fb4b 	bl	80001d0 <__aeabi_dsub>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008b42:	f7f7 fb45 	bl	80001d0 <__aeabi_dsub>
 8008b46:	f1bb 0f00 	cmp.w	fp, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	460d      	mov	r5, r1
 8008b4e:	f6bf aed6 	bge.w	80088fe <atan+0x3e>
 8008b52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b56:	461d      	mov	r5, r3
 8008b58:	e6d1      	b.n	80088fe <atan+0x3e>
 8008b5a:	a51d      	add	r5, pc, #116	; (adr r5, 8008bd0 <atan+0x310>)
 8008b5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008b60:	e6cd      	b.n	80088fe <atan+0x3e>
 8008b62:	bf00      	nop
 8008b64:	f3af 8000 	nop.w
 8008b68:	54442d18 	.word	0x54442d18
 8008b6c:	bff921fb 	.word	0xbff921fb
 8008b70:	8800759c 	.word	0x8800759c
 8008b74:	7e37e43c 	.word	0x7e37e43c
 8008b78:	e322da11 	.word	0xe322da11
 8008b7c:	3f90ad3a 	.word	0x3f90ad3a
 8008b80:	24760deb 	.word	0x24760deb
 8008b84:	3fa97b4b 	.word	0x3fa97b4b
 8008b88:	a0d03d51 	.word	0xa0d03d51
 8008b8c:	3fb10d66 	.word	0x3fb10d66
 8008b90:	c54c206e 	.word	0xc54c206e
 8008b94:	3fb745cd 	.word	0x3fb745cd
 8008b98:	920083ff 	.word	0x920083ff
 8008b9c:	3fc24924 	.word	0x3fc24924
 8008ba0:	5555550d 	.word	0x5555550d
 8008ba4:	3fd55555 	.word	0x3fd55555
 8008ba8:	2c6a6c2f 	.word	0x2c6a6c2f
 8008bac:	bfa2b444 	.word	0xbfa2b444
 8008bb0:	52defd9a 	.word	0x52defd9a
 8008bb4:	3fadde2d 	.word	0x3fadde2d
 8008bb8:	af749a6d 	.word	0xaf749a6d
 8008bbc:	3fb3b0f2 	.word	0x3fb3b0f2
 8008bc0:	fe231671 	.word	0xfe231671
 8008bc4:	3fbc71c6 	.word	0x3fbc71c6
 8008bc8:	9998ebc4 	.word	0x9998ebc4
 8008bcc:	3fc99999 	.word	0x3fc99999
 8008bd0:	54442d18 	.word	0x54442d18
 8008bd4:	3ff921fb 	.word	0x3ff921fb
 8008bd8:	440fffff 	.word	0x440fffff
 8008bdc:	7ff00000 	.word	0x7ff00000
 8008be0:	3fdbffff 	.word	0x3fdbffff
 8008be4:	3ff00000 	.word	0x3ff00000
 8008be8:	3ff2ffff 	.word	0x3ff2ffff
 8008bec:	40038000 	.word	0x40038000
 8008bf0:	3ff80000 	.word	0x3ff80000
 8008bf4:	bff00000 	.word	0xbff00000
 8008bf8:	08008cc8 	.word	0x08008cc8
 8008bfc:	08008ca8 	.word	0x08008ca8

08008c00 <fabs>:
 8008c00:	ec51 0b10 	vmov	r0, r1, d0
 8008c04:	ee10 2a10 	vmov	r2, s0
 8008c08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c0c:	ec43 2b10 	vmov	d0, r2, r3
 8008c10:	4770      	bx	lr
 8008c12:	0000      	movs	r0, r0
 8008c14:	0000      	movs	r0, r0
	...

08008c18 <nan>:
 8008c18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008c20 <nan+0x8>
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	00000000 	.word	0x00000000
 8008c24:	7ff80000 	.word	0x7ff80000

08008c28 <_init>:
 8008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2a:	bf00      	nop
 8008c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2e:	bc08      	pop	{r3}
 8008c30:	469e      	mov	lr, r3
 8008c32:	4770      	bx	lr

08008c34 <_fini>:
 8008c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c36:	bf00      	nop
 8008c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c3a:	bc08      	pop	{r3}
 8008c3c:	469e      	mov	lr, r3
 8008c3e:	4770      	bx	lr
