
imu_adc_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f74c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012b0  0800f8e0  0800f8e0  0001f8e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b90  08010b90  00030230  2**0
                  CONTENTS
  4 .ARM          00000000  08010b90  08010b90  00030230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010b90  08010b90  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b90  08010b90  00020b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b94  08010b94  00020b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08010b98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030230  2**0
                  CONTENTS
 10 .bss          00000d9c  20000230  20000230  00030230  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000fcc  20000fcc  00030230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3c1  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e6  00000000  00000000  0004c621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001988  00000000  00000000  0004fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f0  00000000  00000000  00051490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000056a6  00000000  00000000  00052c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d48b  00000000  00000000  00058326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4c51  00000000  00000000  000757b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008324  00000000  00000000  0013a454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f8c4 	.word	0x0800f8c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800f8c4 	.word	0x0800f8c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <calculate_gestures>:
extern float resistance_max[4];

//====================================================================================================
// Functions

void calculate_gestures() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	e00d      	b.n	8000cb0 <calculate_gestures+0x28>
        finger_angles[i] = calculate_finger_angle(i);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f90d 	bl	8000eb4 <calculate_finger_angle>
 8000c9a:	eef0 7a40 	vmov.f32	s15, s0
 8000c9e:	4a68      	ldr	r2, [pc, #416]	; (8000e40 <calculate_gestures+0x1b8>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3301      	adds	r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	ddee      	ble.n	8000c94 <calculate_gestures+0xc>
    }

    int gesture_key = detect_gestures(finger_angles);
 8000cb6:	4862      	ldr	r0, [pc, #392]	; (8000e40 <calculate_gestures+0x1b8>)
 8000cb8:	f000 f8ce 	bl	8000e58 <detect_gestures>
 8000cbc:	6038      	str	r0, [r7, #0]
    switch (gesture_key) {
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d003      	beq.n	8000ccc <calculate_gestures+0x44>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d042      	beq.n	8000d50 <calculate_gestures+0xc8>
 8000cca:	e085      	b.n	8000dd8 <calculate_gestures+0x150>
        case 0b0001: // yaw right
            gimbal_yaw = 0.5 + lerp(0, 0.5, finger_angles[FINGER_INDEX_IDX] / 90);
 8000ccc:	4b5c      	ldr	r3, [pc, #368]	; (8000e40 <calculate_gestures+0x1b8>)
 8000cce:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cd2:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8000e44 <calculate_gestures+0x1bc>
 8000cd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cda:	eeb0 1a47 	vmov.f32	s2, s14
 8000cde:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000ce2:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8000e48 <calculate_gestures+0x1c0>
 8000ce6:	f005 fe9d 	bl	8006a24 <lerp>
 8000cea:	ee10 3a10 	vmov	r3, s0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc2a 	bl	8000548 <__aeabi_f2d>
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <calculate_gestures+0x1c4>)
 8000cfa:	f7ff fac7 	bl	800028c <__adddf3>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff ff6f 	bl	8000be8 <__aeabi_d2f>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <calculate_gestures+0x1c8>)
 8000d0e:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000d10:	4b4b      	ldr	r3, [pc, #300]	; (8000e40 <calculate_gestures+0x1b8>)
 8000d12:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d16:	4b4a      	ldr	r3, [pc, #296]	; (8000e40 <calculate_gestures+0x1b8>)
 8000d18:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d1c:	eef0 0a47 	vmov.f32	s1, s14
 8000d20:	eeb0 0a67 	vmov.f32	s0, s15
 8000d24:	f005 fe46 	bl	80069b4 <max>
 8000d28:	eeb0 7a40 	vmov.f32	s14, s0
 8000d2c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8000e44 <calculate_gestures+0x1bc>
 8000d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d34:	eeb0 1a67 	vmov.f32	s2, s15
 8000d38:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d3c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8000e48 <calculate_gestures+0x1c0>
 8000d40:	f005 fe70 	bl	8006a24 <lerp>
 8000d44:	eef0 7a40 	vmov.f32	s15, s0
 8000d48:	4b42      	ldr	r3, [pc, #264]	; (8000e54 <calculate_gestures+0x1cc>)
 8000d4a:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000d4e:	e04c      	b.n	8000dea <calculate_gestures+0x162>
        case 0b1000: // yaw left
            gimbal_yaw = 0.5 - lerp(0, 0.5, finger_angles[FINGER_PINKY_IDX] / 90);
 8000d50:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <calculate_gestures+0x1b8>)
 8000d52:	edd3 7a00 	vldr	s15, [r3]
 8000d56:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8000e44 <calculate_gestures+0x1bc>
 8000d5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d5e:	eeb0 1a47 	vmov.f32	s2, s14
 8000d62:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000d66:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8000e48 <calculate_gestures+0x1c0>
 8000d6a:	f005 fe5b 	bl	8006a24 <lerp>
 8000d6e:	ee10 3a10 	vmov	r3, s0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fbe8 	bl	8000548 <__aeabi_f2d>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4932      	ldr	r1, [pc, #200]	; (8000e4c <calculate_gestures+0x1c4>)
 8000d82:	f7ff fa81 	bl	8000288 <__aeabi_dsub>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f7ff ff2b 	bl	8000be8 <__aeabi_d2f>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a2e      	ldr	r2, [pc, #184]	; (8000e50 <calculate_gestures+0x1c8>)
 8000d96:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <calculate_gestures+0x1b8>)
 8000d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <calculate_gestures+0x1b8>)
 8000da0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000da4:	eef0 0a47 	vmov.f32	s1, s14
 8000da8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dac:	f005 fe02 	bl	80069b4 <max>
 8000db0:	eeb0 7a40 	vmov.f32	s14, s0
 8000db4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000e44 <calculate_gestures+0x1bc>
 8000db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dbc:	eeb0 1a67 	vmov.f32	s2, s15
 8000dc0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000dc4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000e48 <calculate_gestures+0x1c0>
 8000dc8:	f005 fe2c 	bl	8006a24 <lerp>
 8000dcc:	eef0 7a40 	vmov.f32	s15, s0
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <calculate_gestures+0x1cc>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000dd6:	e008      	b.n	8000dea <calculate_gestures+0x162>
        // case 0b0110: // throttle
        //     gimbal_yaw = 0;
        //     gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
        //     break;
        default: // no-op
        	gimbal_yaw = 0.5;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <calculate_gestures+0x1c8>)
 8000dda:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000dde:	601a      	str	r2, [r3, #0]
        	gimbal_throttle = 0;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <calculate_gestures+0x1cc>)
 8000de2:	f04f 0200 	mov.w	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
            break;
 8000de8:	bf00      	nop
    }
    if (gesture_key >> 2 && gesture_key >> 1) {
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	109b      	asrs	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d022      	beq.n	8000e38 <calculate_gestures+0x1b0>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	105b      	asrs	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d01e      	beq.n	8000e38 <calculate_gestures+0x1b0>
    	gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <calculate_gestures+0x1b8>)
 8000dfc:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <calculate_gestures+0x1b8>)
 8000e02:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e06:	eef0 0a47 	vmov.f32	s1, s14
 8000e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0e:	f005 fdd1 	bl	80069b4 <max>
 8000e12:	eeb0 7a40 	vmov.f32	s14, s0
 8000e16:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000e44 <calculate_gestures+0x1bc>
 8000e1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e1e:	eeb0 1a67 	vmov.f32	s2, s15
 8000e22:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e26:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000e48 <calculate_gestures+0x1c0>
 8000e2a:	f005 fdfb 	bl	8006a24 <lerp>
 8000e2e:	eef0 7a40 	vmov.f32	s15, s0
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <calculate_gestures+0x1cc>)
 8000e34:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2000024c 	.word	0x2000024c
 8000e44:	42b40000 	.word	0x42b40000
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	3fe00000 	.word	0x3fe00000
 8000e50:	20000cd8 	.word	0x20000cd8
 8000e54:	20000cdc 	.word	0x20000cdc

08000e58 <detect_gestures>:

int detect_gestures(float* finger_angles) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    short gesture_key = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	e019      	b.n	8000e9e <detect_gestures+0x46>
        if (finger_angles[i] > ANGLE_THRESH) {
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	edd3 7a00 	vldr	s15, [r3]
 8000e76:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e82:	dd09      	ble.n	8000e98 <detect_gestures+0x40>
            gesture_key |= 1 << (3 - i);
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	f1c3 0303 	rsb	r3, r3, #3
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	89fb      	ldrh	r3, [r7, #14]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	dde2      	ble.n	8000e6a <detect_gestures+0x12>
        }
    }
    return gesture_key;
 8000ea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <calculate_finger_angle>:

/*
 * Calculate finger angles
 * ADC_flex read by "analogRead(flexPin)" // analogRead later defined in flex sensor interface
 */
float calculate_finger_angle(int finger_num) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    float resistance_flex = calculate_finger_resistance(finger_num);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 f833 	bl	8000f28 <calculate_finger_resistance>
 8000ec2:	ed87 0a03 	vstr	s0, [r7, #12]
    float angle = 90 - map(resistance_flex, resistance_min[finger_num], resistance_max[finger_num], 0, 90);
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <calculate_finger_angle+0x64>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <calculate_finger_angle+0x68>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	ed93 7a00 	vldr	s14, [r3]
 8000ede:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8000f20 <calculate_finger_angle+0x6c>
 8000ee2:	eddf 1a10 	vldr	s3, [pc, #64]	; 8000f24 <calculate_finger_angle+0x70>
 8000ee6:	eeb0 1a47 	vmov.f32	s2, s14
 8000eea:	eef0 0a67 	vmov.f32	s1, s15
 8000eee:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ef2:	f005 fdb5 	bl	8006a60 <map>
 8000ef6:	eef0 7a40 	vmov.f32	s15, s0
 8000efa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000f20 <calculate_finger_angle+0x6c>
 8000efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f02:	edc7 7a02 	vstr	s15, [r7, #8]
    return angle;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	ee07 3a90 	vmov	s15, r3
}
 8000f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000d14 	.word	0x20000d14
 8000f1c:	20000d24 	.word	0x20000d24
 8000f20:	42b40000 	.word	0x42b40000
 8000f24:	00000000 	.word	0x00000000

08000f28 <calculate_finger_resistance>:

float calculate_finger_resistance(int finger_num) {
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	float voltage_flex = ADC_vals[finger_num] * VCC / ADC_MAX_VAL;
 8000f30:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <calculate_finger_resistance+0xb0>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff faf3 	bl	8000524 <__aeabi_i2d>
 8000f3e:	a324      	add	r3, pc, #144	; (adr r3, 8000fd0 <calculate_finger_resistance+0xa8>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff fb58 	bl	80005f8 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4614      	mov	r4, r2
 8000f4e:	461d      	mov	r5, r3
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <calculate_finger_resistance+0xb4>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fae5 	bl	8000524 <__aeabi_i2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4629      	mov	r1, r5
 8000f62:	f7ff fc73 	bl	800084c <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fe3b 	bl	8000be8 <__aeabi_d2f>
 8000f72:	4603      	mov	r3, r0
 8000f74:	60fb      	str	r3, [r7, #12]
	float resistance_flex = (RESISTANCE_PULLDOWN * voltage_flex) / (VCC - voltage_flex);
 8000f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000fe0 <calculate_finger_resistance+0xb8>
 8000f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f82:	ee17 0a90 	vmov	r0, s15
 8000f86:	f7ff fadf 	bl	8000548 <__aeabi_f2d>
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	460d      	mov	r5, r1
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f7ff fada 	bl	8000548 <__aeabi_f2d>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	a10d      	add	r1, pc, #52	; (adr r1, 8000fd0 <calculate_finger_resistance+0xa8>)
 8000f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f9e:	f7ff f973 	bl	8000288 <__aeabi_dsub>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	4629      	mov	r1, r5
 8000faa:	f7ff fc4f 	bl	800084c <__aeabi_ddiv>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff fe17 	bl	8000be8 <__aeabi_d2f>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	60bb      	str	r3, [r7, #8]
	return resistance_flex;
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	ee07 3a90 	vmov	s15, r3
}
 8000fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	66666666 	.word	0x66666666
 8000fd4:	400a6666 	.word	0x400a6666
 8000fd8:	20000d04 	.word	0x20000d04
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	469c4000 	.word	0x469c4000

08000fe4 <calibrate_init>:

void calibrate_init() {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	e00e      	b.n	800100e <calibrate_init+0x2a>
		resistance_min[i] = RESISTANCE_FLEXED;
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <calibrate_init+0x40>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <calibrate_init+0x44>)
 8000ffa:	601a      	str	r2, [r3, #0]
		resistance_max[i] = RESISTANCE_UNFLEXED;
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	; (800102c <calibrate_init+0x48>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <calibrate_init+0x4c>)
 8001006:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3301      	adds	r3, #1
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b03      	cmp	r3, #3
 8001012:	dded      	ble.n	8000ff0 <calibrate_init+0xc>
	}
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000d14 	.word	0x20000d14
 8001028:	472fc800 	.word	0x472fc800
 800102c:	20000d24 	.word	0x20000d24
 8001030:	461c4000 	.word	0x461c4000

08001034 <calculate_orientation>:

/*
 * Estimate orientation based on previous quaternion values. 
 * Runs Madgwick, Madgwick output quaternion to relative Euler angles, and remaps angles to gimbal potentiometer percentages.
 */
void calculate_orientation(float delta_time) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	ed87 0a01 	vstr	s0, [r7, #4]
	float sample_freq;
	#ifdef sampleFreq
	sample_freq = sampleFreq;
	#else
	sample_freq = convert_period_to_freq(delta_time);
 800103e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001042:	f005 fd53 	bl	8006aec <convert_period_to_freq>
 8001046:	ed87 0a03 	vstr	s0, [r7, #12]
	#endif /* sampleFreq */

	MadgwickAHRSupdate(gyro.gyro.x, gyro.gyro.y, gyro.gyro.z, accel.acceleration.x, accel.acceleration.y, accel.acceleration.z, mag.magnetic.x, mag.magnetic.y, mag.magnetic.z, sample_freq); // gyro, accel, mag are sensors_type_t
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <calculate_orientation+0x7c>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <calculate_orientation+0x7c>)
 8001052:	ed93 7a01 	vldr	s14, [r3, #4]
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <calculate_orientation+0x7c>)
 8001058:	edd3 6a02 	vldr	s13, [r3, #8]
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <calculate_orientation+0x80>)
 800105e:	ed93 6a00 	vldr	s12, [r3]
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <calculate_orientation+0x80>)
 8001064:	edd3 5a01 	vldr	s11, [r3, #4]
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <calculate_orientation+0x80>)
 800106a:	ed93 5a02 	vldr	s10, [r3, #8]
 800106e:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <calculate_orientation+0x84>)
 8001070:	ed93 3a00 	vldr	s6, [r3]
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculate_orientation+0x84>)
 8001076:	edd3 3a01 	vldr	s7, [r3, #4]
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <calculate_orientation+0x84>)
 800107c:	ed93 4a02 	vldr	s8, [r3, #8]
 8001080:	edd7 4a03 	vldr	s9, [r7, #12]
 8001084:	eef0 2a45 	vmov.f32	s5, s10
 8001088:	eeb0 2a65 	vmov.f32	s4, s11
 800108c:	eef0 1a46 	vmov.f32	s3, s12
 8001090:	eeb0 1a66 	vmov.f32	s2, s13
 8001094:	eef0 0a47 	vmov.f32	s1, s14
 8001098:	eeb0 0a67 	vmov.f32	s0, s15
 800109c:	f000 f9bc 	bl	8001418 <MadgwickAHRSupdate>
	convert_quaternion_to_euler();
 80010a0:	f000 f8ee 	bl	8001280 <convert_quaternion_to_euler>
	remap_angles_to_gimbals();
 80010a4:	f000 f80c 	bl	80010c0 <remap_angles_to_gimbals>
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000ce0 	.word	0x20000ce0
 80010b4:	20000cec 	.word	0x20000cec
 80010b8:	20000cf8 	.word	0x20000cf8
 80010bc:	00000000 	.word	0x00000000

080010c0 <remap_angles_to_gimbals>:

/*
 * Remapping only consists of pitch and roll
 */
void remap_angles_to_gimbals() {
 80010c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c4:	af00      	add	r7, sp, #0
	remapped_angle_x = (angle_x + atan2_offset) / (2 * M_PI);
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <remap_angles_to_gimbals+0x160>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa3c 	bl	8000548 <__aeabi_f2d>
 80010d0:	a34b      	add	r3, pc, #300	; (adr r3, 8001200 <remap_angles_to_gimbals+0x140>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff f8d9 	bl	800028c <__adddf3>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4610      	mov	r0, r2
 80010e0:	4619      	mov	r1, r3
 80010e2:	a349      	add	r3, pc, #292	; (adr r3, 8001208 <remap_angles_to_gimbals+0x148>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fbb0 	bl	800084c <__aeabi_ddiv>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f7ff fd78 	bl	8000be8 <__aeabi_d2f>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a4a      	ldr	r2, [pc, #296]	; (8001224 <remap_angles_to_gimbals+0x164>)
 80010fc:	6013      	str	r3, [r2, #0]
	remapped_angle_y = (angle_y + asin_offset) / (M_PI);
 80010fe:	4b4a      	ldr	r3, [pc, #296]	; (8001228 <remap_angles_to_gimbals+0x168>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	a341      	add	r3, pc, #260	; (adr r3, 8001210 <remap_angles_to_gimbals+0x150>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff f8bd 	bl	800028c <__adddf3>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	a339      	add	r3, pc, #228	; (adr r3, 8001200 <remap_angles_to_gimbals+0x140>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff fb94 	bl	800084c <__aeabi_ddiv>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fd5c 	bl	8000be8 <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	4a3e      	ldr	r2, [pc, #248]	; (800122c <remap_angles_to_gimbals+0x16c>)
 8001134:	6013      	str	r3, [r2, #0]
	gimbal_roll = lerp(0, 1, remapped_angle_x);
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <remap_angles_to_gimbals+0x164>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	eeb0 1a67 	vmov.f32	s2, s15
 8001140:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001144:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001230 <remap_angles_to_gimbals+0x170>
 8001148:	f005 fc6c 	bl	8006a24 <lerp>
 800114c:	eef0 7a40 	vmov.f32	s15, s0
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <remap_angles_to_gimbals+0x174>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
	if (fabs(gimbal_roll - 0.5) <= GIMBAL_IDLE_THRESH) {
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <remap_angles_to_gimbals+0x174>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b34      	ldr	r3, [pc, #208]	; (8001238 <remap_angles_to_gimbals+0x178>)
 8001166:	f7ff f88f 	bl	8000288 <__aeabi_dsub>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4690      	mov	r8, r2
 8001170:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001174:	a328      	add	r3, pc, #160	; (adr r3, 8001218 <remap_angles_to_gimbals+0x158>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	4640      	mov	r0, r8
 800117c:	4649      	mov	r1, r9
 800117e:	f7ff fcb7 	bl	8000af0 <__aeabi_dcmple>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <remap_angles_to_gimbals+0xd0>
		gimbal_roll = 0.5;
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <remap_angles_to_gimbals+0x174>)
 800118a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800118e:	601a      	str	r2, [r3, #0]
	}
	gimbal_pitch = 1 - lerp(0, 1, remapped_angle_y);
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <remap_angles_to_gimbals+0x16c>)
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	eeb0 1a67 	vmov.f32	s2, s15
 800119a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800119e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8001230 <remap_angles_to_gimbals+0x170>
 80011a2:	f005 fc3f 	bl	8006a24 <lerp>
 80011a6:	eef0 7a40 	vmov.f32	s15, s0
 80011aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b2:	4b22      	ldr	r3, [pc, #136]	; (800123c <remap_angles_to_gimbals+0x17c>)
 80011b4:	edc3 7a00 	vstr	s15, [r3]
	if (fabs(gimbal_pitch - 0.5) <= GIMBAL_IDLE_THRESH) {
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <remap_angles_to_gimbals+0x17c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9c3 	bl	8000548 <__aeabi_f2d>
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <remap_angles_to_gimbals+0x178>)
 80011c8:	f7ff f85e 	bl	8000288 <__aeabi_dsub>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4614      	mov	r4, r2
 80011d2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80011d6:	a310      	add	r3, pc, #64	; (adr r3, 8001218 <remap_angles_to_gimbals+0x158>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	4620      	mov	r0, r4
 80011de:	4629      	mov	r1, r5
 80011e0:	f7ff fc86 	bl	8000af0 <__aeabi_dcmple>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <remap_angles_to_gimbals+0x12c>
		gimbal_pitch = 0.5;
	}
}
 80011ea:	e003      	b.n	80011f4 <remap_angles_to_gimbals+0x134>
		gimbal_pitch = 0.5;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <remap_angles_to_gimbals+0x17c>)
 80011ee:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011fa:	bf00      	nop
 80011fc:	f3af 8000 	nop.w
 8001200:	54442d18 	.word	0x54442d18
 8001204:	400921fb 	.word	0x400921fb
 8001208:	54442d18 	.word	0x54442d18
 800120c:	401921fb 	.word	0x401921fb
 8001210:	54442d18 	.word	0x54442d18
 8001214:	3ff921fb 	.word	0x3ff921fb
 8001218:	9999999a 	.word	0x9999999a
 800121c:	3fa99999 	.word	0x3fa99999
 8001220:	20000cc8 	.word	0x20000cc8
 8001224:	2000025c 	.word	0x2000025c
 8001228:	20000ccc 	.word	0x20000ccc
 800122c:	20000260 	.word	0x20000260
 8001230:	00000000 	.word	0x00000000
 8001234:	20000cd0 	.word	0x20000cd0
 8001238:	3fe00000 	.word	0x3fe00000
 800123c:	20000cd4 	.word	0x20000cd4

08001240 <reset_aux_frame>:

/*
 * Reset aux frame (identity)
 */
void reset_aux_frame() {
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
	q0 = 1.0f;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <reset_aux_frame+0x30>)
 8001246:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800124a:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <reset_aux_frame+0x34>)
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <reset_aux_frame+0x38>)
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <reset_aux_frame+0x3c>)
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000002c 	.word	0x2000002c
 8001274:	20000cbc 	.word	0x20000cbc
 8001278:	20000cc0 	.word	0x20000cc0
 800127c:	20000cc4 	.word	0x20000cc4

08001280 <convert_quaternion_to_euler>:

/*
 * Convert quaternion to euler angles
 */
void convert_quaternion_to_euler() {
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
	// angle_x is roll; angle_y is pitch; angle_z is yaw
	double q2sqr = q2 * q2;
 8001286:	4b5c      	ldr	r3, [pc, #368]	; (80013f8 <convert_quaternion_to_euler+0x178>)
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <convert_quaternion_to_euler+0x178>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	ee17 0a90 	vmov	r0, s15
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// double t0 = -2.0 * (q2sqr + q3 * q3) + 1.0;
	// double t1 = +2.0 * (q1 * q2 + q0 * q3);
	double t2 = -2.0 * (q1 * q3 - q0 * q2);
 80012a6:	4b55      	ldr	r3, [pc, #340]	; (80013fc <convert_quaternion_to_euler+0x17c>)
 80012a8:	ed93 7a00 	vldr	s14, [r3]
 80012ac:	4b54      	ldr	r3, [pc, #336]	; (8001400 <convert_quaternion_to_euler+0x180>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b6:	4b53      	ldr	r3, [pc, #332]	; (8001404 <convert_quaternion_to_euler+0x184>)
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	4b4e      	ldr	r3, [pc, #312]	; (80013f8 <convert_quaternion_to_euler+0x178>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ca:	ee17 0a90 	vmov	r0, s15
 80012ce:	f7ff f93b 	bl	8000548 <__aeabi_f2d>
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012da:	f7ff f98d 	bl	80005f8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double t3 = +2.0 * (q2 * q3 + q0 * q1);
 80012e6:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <convert_quaternion_to_euler+0x178>)
 80012e8:	ed93 7a00 	vldr	s14, [r3]
 80012ec:	4b44      	ldr	r3, [pc, #272]	; (8001400 <convert_quaternion_to_euler+0x180>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <convert_quaternion_to_euler+0x184>)
 80012f8:	edd3 6a00 	vldr	s13, [r3]
 80012fc:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <convert_quaternion_to_euler+0x17c>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	ee17 0a90 	vmov	r0, s15
 800130e:	f7ff f91b 	bl	8000548 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	f7fe ffb9 	bl	800028c <__adddf3>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double t4 = -2.0 * (q1 * q1 + q2sqr) + 1.0;
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <convert_quaternion_to_euler+0x17c>)
 8001324:	ed93 7a00 	vldr	s14, [r3]
 8001328:	4b34      	ldr	r3, [pc, #208]	; (80013fc <convert_quaternion_to_euler+0x17c>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001332:	ee17 0a90 	vmov	r0, s15
 8001336:	f7ff f907 	bl	8000548 <__aeabi_f2d>
 800133a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800133e:	f7fe ffa5 	bl	800028c <__adddf3>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001352:	f7ff f951 	bl	80005f8 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b29      	ldr	r3, [pc, #164]	; (8001408 <convert_quaternion_to_euler+0x188>)
 8001364:	f7fe ff92 	bl	800028c <__adddf3>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	e9c7 2300 	strd	r2, r3, [r7]

	t2 = t2 > 1.0 ? 1.0 : t2;
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b24      	ldr	r3, [pc, #144]	; (8001408 <convert_quaternion_to_euler+0x188>)
 8001376:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800137a:	f7ff fbcd 	bl	8000b18 <__aeabi_dcmpgt>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <convert_quaternion_to_euler+0x10c>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <convert_quaternion_to_euler+0x188>)
 800138a:	e001      	b.n	8001390 <convert_quaternion_to_euler+0x110>
 800138c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001390:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t2 = t2 < -1.0 ? -1.0 : t2;
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <convert_quaternion_to_euler+0x18c>)
 800139a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800139e:	f7ff fb9d 	bl	8000adc <__aeabi_dcmplt>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <convert_quaternion_to_euler+0x130>
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <convert_quaternion_to_euler+0x18c>)
 80013ae:	e001      	b.n	80013b4 <convert_quaternion_to_euler+0x134>
 80013b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// @henry: switch x, y for roll/pitch
	angle_x = asin(t2);
 80013b8:	ed97 0b04 	vldr	d0, [r7, #16]
 80013bc:	f00c fcec 	bl	800dd98 <asin>
 80013c0:	ec53 2b10 	vmov	r2, r3, d0
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fc0e 	bl	8000be8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <convert_quaternion_to_euler+0x190>)
 80013d0:	6013      	str	r3, [r2, #0]
	angle_y = atan2(t3, t4);
 80013d2:	ed97 1b00 	vldr	d1, [r7]
 80013d6:	ed97 0b02 	vldr	d0, [r7, #8]
 80013da:	f00c fd11 	bl	800de00 <atan2>
 80013de:	ec53 2b10 	vmov	r2, r3, d0
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fbff 	bl	8000be8 <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a09      	ldr	r2, [pc, #36]	; (8001414 <convert_quaternion_to_euler+0x194>)
 80013ee:	6013      	str	r3, [r2, #0]
	// angle_z = atan2(t1, t0);
}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000cc0 	.word	0x20000cc0
 80013fc:	20000cbc 	.word	0x20000cbc
 8001400:	20000cc4 	.word	0x20000cc4
 8001404:	2000002c 	.word	0x2000002c
 8001408:	3ff00000 	.word	0x3ff00000
 800140c:	bff00000 	.word	0xbff00000
 8001410:	20000cc8 	.word	0x20000cc8
 8001414:	20000ccc 	.word	0x20000ccc

08001418 <MadgwickAHRSupdate>:


//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float sample_freq) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b0ae      	sub	sp, #184	; 0xb8
 800141c:	af00      	add	r7, sp, #0
 800141e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001422:	edc7 0a08 	vstr	s1, [r7, #32]
 8001426:	ed87 1a07 	vstr	s2, [r7, #28]
 800142a:	edc7 1a06 	vstr	s3, [r7, #24]
 800142e:	ed87 2a05 	vstr	s4, [r7, #20]
 8001432:	edc7 2a04 	vstr	s5, [r7, #16]
 8001436:	ed87 3a03 	vstr	s6, [r7, #12]
 800143a:	edc7 3a02 	vstr	s7, [r7, #8]
 800143e:	ed87 4a01 	vstr	s8, [r7, #4]
 8001442:	edc7 4a00 	vstr	s9, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001446:	edd7 7a03 	vldr	s15, [r7, #12]
 800144a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	d11f      	bne.n	8001494 <MadgwickAHRSupdate+0x7c>
 8001454:	edd7 7a02 	vldr	s15, [r7, #8]
 8001458:	eef5 7a40 	vcmp.f32	s15, #0.0
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	d118      	bne.n	8001494 <MadgwickAHRSupdate+0x7c>
 8001462:	edd7 7a01 	vldr	s15, [r7, #4]
 8001466:	eef5 7a40 	vcmp.f32	s15, #0.0
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d111      	bne.n	8001494 <MadgwickAHRSupdate+0x7c>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az, sample_freq);
 8001470:	ed97 3a00 	vldr	s6, [r7]
 8001474:	edd7 2a04 	vldr	s5, [r7, #16]
 8001478:	ed97 2a05 	vldr	s4, [r7, #20]
 800147c:	edd7 1a06 	vldr	s3, [r7, #24]
 8001480:	ed97 1a07 	vldr	s2, [r7, #28]
 8001484:	edd7 0a08 	vldr	s1, [r7, #32]
 8001488:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800148c:	f000 feec 	bl	8002268 <MadgwickAHRSupdateIMU>
		return;
 8001490:	f000 bedc 	b.w	800224c <MadgwickAHRSupdate+0xe34>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001494:	4be4      	ldr	r3, [pc, #912]	; (8001828 <MadgwickAHRSupdate+0x410>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eeb1 7a67 	vneg.f32	s14, s15
 800149e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a6:	4be1      	ldr	r3, [pc, #900]	; (800182c <MadgwickAHRSupdate+0x414>)
 80014a8:	edd3 6a00 	vldr	s13, [r3]
 80014ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80014b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b8:	4bdd      	ldr	r3, [pc, #884]	; (8001830 <MadgwickAHRSupdate+0x418>)
 80014ba:	edd3 6a00 	vldr	s13, [r3]
 80014be:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80014d6:	4bd7      	ldr	r3, [pc, #860]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e4:	4bd1      	ldr	r3, [pc, #836]	; (800182c <MadgwickAHRSupdate+0x414>)
 80014e6:	edd3 6a00 	vldr	s13, [r3]
 80014ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014f6:	4bce      	ldr	r3, [pc, #824]	; (8001830 <MadgwickAHRSupdate+0x418>)
 80014f8:	edd3 6a00 	vldr	s13, [r3]
 80014fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001508:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800150c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001510:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001514:	4bc7      	ldr	r3, [pc, #796]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	edd7 7a08 	vldr	s15, [r7, #32]
 800151e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001522:	4bc1      	ldr	r3, [pc, #772]	; (8001828 <MadgwickAHRSupdate+0x410>)
 8001524:	edd3 6a00 	vldr	s13, [r3]
 8001528:	edd7 7a07 	vldr	s15, [r7, #28]
 800152c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001530:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001534:	4bbe      	ldr	r3, [pc, #760]	; (8001830 <MadgwickAHRSupdate+0x418>)
 8001536:	edd3 6a00 	vldr	s13, [r3]
 800153a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800153e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800154a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001552:	4bb8      	ldr	r3, [pc, #736]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 8001554:	ed93 7a00 	vldr	s14, [r3]
 8001558:	edd7 7a07 	vldr	s15, [r7, #28]
 800155c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001560:	4bb1      	ldr	r3, [pc, #708]	; (8001828 <MadgwickAHRSupdate+0x410>)
 8001562:	edd3 6a00 	vldr	s13, [r3]
 8001566:	edd7 7a08 	vldr	s15, [r7, #32]
 800156a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001572:	4bae      	ldr	r3, [pc, #696]	; (800182c <MadgwickAHRSupdate+0x414>)
 8001574:	edd3 6a00 	vldr	s13, [r3]
 8001578:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800157c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001584:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001590:	edd7 7a06 	vldr	s15, [r7, #24]
 8001594:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159c:	d10e      	bne.n	80015bc <MadgwickAHRSupdate+0x1a4>
 800159e:	edd7 7a05 	vldr	s15, [r7, #20]
 80015a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	d107      	bne.n	80015bc <MadgwickAHRSupdate+0x1a4>
 80015ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80015b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80015b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b8:	f000 85ac 	beq.w	8002114 <MadgwickAHRSupdate+0xcfc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80015bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80015c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	f001 f976 	bl	80028d0 <invSqrt>
 80015e4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80015e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80015ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80015f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f4:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80015f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001608:	ed97 7a04 	vldr	s14, [r7, #16]
 800160c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001618:	edd7 7a03 	vldr	s15, [r7, #12]
 800161c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001620:	edd7 7a02 	vldr	s15, [r7, #8]
 8001624:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800162c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001630:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	f001 f948 	bl	80028d0 <invSqrt>
 8001640:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001644:	ed97 7a03 	vldr	s14, [r7, #12]
 8001648:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001654:	ed97 7a02 	vldr	s14, [r7, #8]
 8001658:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001664:	ed97 7a01 	vldr	s14, [r7, #4]
 8001668:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001670:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001674:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800167e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001686:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800168a:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 800168c:	edd3 7a00 	vldr	s15, [r3]
 8001690:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001694:	ed97 7a02 	vldr	s14, [r7, #8]
 8001698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80016a0:	4b64      	ldr	r3, [pc, #400]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80016b6:	4b5c      	ldr	r3, [pc, #368]	; (8001828 <MadgwickAHRSupdate+0x410>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80016cc:	4b59      	ldr	r3, [pc, #356]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016d6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80016da:	4b53      	ldr	r3, [pc, #332]	; (8001828 <MadgwickAHRSupdate+0x410>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016e4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80016e8:	4b50      	ldr	r3, [pc, #320]	; (800182c <MadgwickAHRSupdate+0x414>)
 80016ea:	edd3 7a00 	vldr	s15, [r3]
 80016ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016f2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80016f6:	4b4e      	ldr	r3, [pc, #312]	; (8001830 <MadgwickAHRSupdate+0x418>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001700:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 8001706:	edd3 7a00 	vldr	s15, [r3]
 800170a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <MadgwickAHRSupdate+0x414>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001718:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <MadgwickAHRSupdate+0x414>)
 800171e:	edd3 7a00 	vldr	s15, [r3]
 8001722:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001726:	4b42      	ldr	r3, [pc, #264]	; (8001830 <MadgwickAHRSupdate+0x418>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001730:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001734:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b3e      	ldr	r3, [pc, #248]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001744:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 800174a:	ed93 7a00 	vldr	s14, [r3]
 800174e:	4b36      	ldr	r3, [pc, #216]	; (8001828 <MadgwickAHRSupdate+0x410>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001758:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <MadgwickAHRSupdate+0x414>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001770:	4b30      	ldr	r3, [pc, #192]	; (8001834 <MadgwickAHRSupdate+0x41c>)
 8001772:	ed93 7a00 	vldr	s14, [r3]
 8001776:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <MadgwickAHRSupdate+0x418>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001780:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <MadgwickAHRSupdate+0x410>)
 8001786:	ed93 7a00 	vldr	s14, [r3]
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <MadgwickAHRSupdate+0x410>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001794:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <MadgwickAHRSupdate+0x410>)
 800179a:	ed93 7a00 	vldr	s14, [r3]
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <MadgwickAHRSupdate+0x414>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80017ac:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <MadgwickAHRSupdate+0x410>)
 80017ae:	ed93 7a00 	vldr	s14, [r3]
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <MadgwickAHRSupdate+0x418>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017bc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MadgwickAHRSupdate+0x414>)
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <MadgwickAHRSupdate+0x414>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <MadgwickAHRSupdate+0x414>)
 80017d6:	ed93 7a00 	vldr	s14, [r3]
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MadgwickAHRSupdate+0x418>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MadgwickAHRSupdate+0x418>)
 80017ea:	ed93 7a00 	vldr	s14, [r3]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <MadgwickAHRSupdate+0x418>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80017fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001800:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001804:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MadgwickAHRSupdate+0x418>)
 800180a:	edd3 6a00 	vldr	s13, [r3]
 800180e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001816:	ee37 7a67 	vsub.f32	s14, s14, s15
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <MadgwickAHRSupdate+0x414>)
 800181c:	edd3 6a00 	vldr	s13, [r3]
 8001820:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001824:	e008      	b.n	8001838 <MadgwickAHRSupdate+0x420>
 8001826:	bf00      	nop
 8001828:	20000cbc 	.word	0x20000cbc
 800182c:	20000cc0 	.word	0x20000cc0
 8001830:	20000cc4 	.word	0x20000cc4
 8001834:	2000002c 	.word	0x2000002c
 8001838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001840:	edd7 6a03 	vldr	s13, [r7, #12]
 8001844:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001850:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001854:	edd7 7a02 	vldr	s15, [r7, #8]
 8001858:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800185c:	4bf5      	ldr	r3, [pc, #980]	; (8001c34 <MadgwickAHRSupdate+0x81c>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800186a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800186e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001872:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001876:	4bf0      	ldr	r3, [pc, #960]	; (8001c38 <MadgwickAHRSupdate+0x820>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001884:	edd7 6a03 	vldr	s13, [r7, #12]
 8001888:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800188c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001894:	edd7 6a03 	vldr	s13, [r7, #12]
 8001898:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800189c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80018a8:	4be3      	ldr	r3, [pc, #908]	; (8001c38 <MadgwickAHRSupdate+0x820>)
 80018aa:	ed93 7a00 	vldr	s14, [r3]
 80018ae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80018b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b6:	edd7 6a02 	vldr	s13, [r7, #8]
 80018ba:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80018be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c6:	4bdd      	ldr	r3, [pc, #884]	; (8001c3c <MadgwickAHRSupdate+0x824>)
 80018c8:	edd3 6a00 	vldr	s13, [r3]
 80018cc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80018d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d8:	4bd6      	ldr	r3, [pc, #856]	; (8001c34 <MadgwickAHRSupdate+0x81c>)
 80018da:	edd3 6a00 	vldr	s13, [r3]
 80018de:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80018e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80018ee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80018f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018fa:	edd7 6a02 	vldr	s13, [r7, #8]
 80018fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800190e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001912:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001916:	4bc8      	ldr	r3, [pc, #800]	; (8001c38 <MadgwickAHRSupdate+0x820>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001924:	edd7 6a02 	vldr	s13, [r7, #8]
 8001928:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800192c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001934:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001938:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800193c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001940:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001944:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	ee17 0a90 	vmov	r0, s15
 8001950:	f7fe fdfa 	bl	8000548 <__aeabi_f2d>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	ec43 2b10 	vmov	d0, r2, r3
 800195c:	f00c fa52 	bl	800de04 <sqrt>
 8001960:	ec53 2b10 	vmov	r2, r3, d0
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f93e 	bl	8000be8 <__aeabi_d2f>
 800196c:	4603      	mov	r3, r0
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001970:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001974:	eeb1 7a67 	vneg.f32	s14, s15
 8001978:	4bae      	ldr	r3, [pc, #696]	; (8001c34 <MadgwickAHRSupdate+0x81c>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001982:	4bae      	ldr	r3, [pc, #696]	; (8001c3c <MadgwickAHRSupdate+0x824>)
 8001984:	edd3 6a00 	vldr	s13, [r3]
 8001988:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001994:	edd7 6a01 	vldr	s13, [r7, #4]
 8001998:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800199c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a4:	4ba4      	ldr	r3, [pc, #656]	; (8001c38 <MadgwickAHRSupdate+0x820>)
 80019a6:	edd3 6a00 	vldr	s13, [r3]
 80019aa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80019ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80019ba:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80019be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80019ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019d2:	4b99      	ldr	r3, [pc, #612]	; (8001c38 <MadgwickAHRSupdate+0x820>)
 80019d4:	edd3 7a00 	vldr	s15, [r3]
 80019d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e0:	edd7 6a01 	vldr	s13, [r7, #4]
 80019e4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80019f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a00:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001a04:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a08:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001a10:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001a1c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001a20:	eeb1 7a67 	vneg.f32	s14, s15
 8001a24:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a28:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a2c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a30:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a34:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a40:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a44:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a48:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a58:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001a5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a64:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <MadgwickAHRSupdate+0x81c>)
 8001a66:	edd3 6a00 	vldr	s13, [r3]
 8001a6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a72:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a76:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a7a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a7e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a82:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a8a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a8e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a92:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a96:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a9a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a9e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001aa2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001aa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aaa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ab6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aba:	eef1 6a67 	vneg.f32	s13, s15
 8001abe:	4b5e      	ldr	r3, [pc, #376]	; (8001c38 <MadgwickAHRSupdate+0x820>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ac8:	4b5c      	ldr	r3, [pc, #368]	; (8001c3c <MadgwickAHRSupdate+0x824>)
 8001aca:	ed93 6a00 	vldr	s12, [r3]
 8001ace:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ad2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ad6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ada:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001ade:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ae2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ae6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aea:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aee:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001af2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001af6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001afa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001afe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b16:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <MadgwickAHRSupdate+0x81c>)
 8001b18:	edd3 6a00 	vldr	s13, [r3]
 8001b1c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b24:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001b28:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b2c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b30:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b34:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b38:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b3c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b40:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b44:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b48:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b50:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b58:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b5c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b6c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b70:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b74:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b84:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b90:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b94:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b98:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ba4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <MadgwickAHRSupdate+0x824>)
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001bba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bbe:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bc6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001bca:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bd6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bde:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001be2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bea:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MadgwickAHRSupdate+0x820>)
 8001bec:	edd3 6a00 	vldr	s13, [r3]
 8001bf0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bf4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bf8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001bfc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c04:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c08:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c0c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c10:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c14:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001c18:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001c1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c30:	e006      	b.n	8001c40 <MadgwickAHRSupdate+0x828>
 8001c32:	bf00      	nop
 8001c34:	20000cc0 	.word	0x20000cc0
 8001c38:	20000cc4 	.word	0x20000cc4
 8001c3c:	20000cbc 	.word	0x20000cbc
 8001c40:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c4c:	4bf6      	ldr	r3, [pc, #984]	; (8002028 <MadgwickAHRSupdate+0xc10>)
 8001c4e:	edd3 6a00 	vldr	s13, [r3]
 8001c52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c5a:	4bf4      	ldr	r3, [pc, #976]	; (800202c <MadgwickAHRSupdate+0xc14>)
 8001c5c:	ed93 6a00 	vldr	s12, [r3]
 8001c60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c64:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c6c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c70:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c74:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c78:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c7c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c80:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c84:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c88:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c8c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c90:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c94:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c9c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ca8:	4be1      	ldr	r3, [pc, #900]	; (8002030 <MadgwickAHRSupdate+0xc18>)
 8001caa:	edd3 6a00 	vldr	s13, [r3]
 8001cae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cb2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb6:	4bdf      	ldr	r3, [pc, #892]	; (8002034 <MadgwickAHRSupdate+0xc1c>)
 8001cb8:	ed93 6a00 	vldr	s12, [r3]
 8001cbc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001cc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cc4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cc8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001ccc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cd0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cd4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cd8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cdc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ce0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ce4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ce8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cf0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cf4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cf8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d00:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d10:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001d14:	eeb1 7a67 	vneg.f32	s14, s15
 8001d18:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d1c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d20:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001d24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d34:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d3c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d44:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d48:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d4c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	4bb3      	ldr	r3, [pc, #716]	; (8002028 <MadgwickAHRSupdate+0xc10>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001d62:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d66:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d6e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d72:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d76:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d7e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d92:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d96:	eef1 6a67 	vneg.f32	s13, s15
 8001d9a:	4ba3      	ldr	r3, [pc, #652]	; (8002028 <MadgwickAHRSupdate+0xc10>)
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001da4:	4ba1      	ldr	r3, [pc, #644]	; (800202c <MadgwickAHRSupdate+0xc14>)
 8001da6:	ed93 6a00 	vldr	s12, [r3]
 8001daa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001db2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001db6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001dba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001dbe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dc2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001dc6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dce:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dd2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001dd6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001dda:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001dde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001de6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001dea:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfa:	4b8e      	ldr	r3, [pc, #568]	; (8002034 <MadgwickAHRSupdate+0xc1c>)
 8001dfc:	edd3 6a00 	vldr	s13, [r3]
 8001e00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e08:	4b89      	ldr	r3, [pc, #548]	; (8002030 <MadgwickAHRSupdate+0xc18>)
 8001e0a:	ed93 6a00 	vldr	s12, [r3]
 8001e0e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e1a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001e1e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e22:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001e26:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e2e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e32:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e36:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e3e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e42:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e56:	4b75      	ldr	r3, [pc, #468]	; (800202c <MadgwickAHRSupdate+0xc14>)
 8001e58:	edd3 6a00 	vldr	s13, [r3]
 8001e5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e64:	4b70      	ldr	r3, [pc, #448]	; (8002028 <MadgwickAHRSupdate+0xc10>)
 8001e66:	ed93 6a00 	vldr	s12, [r3]
 8001e6a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e72:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e76:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e7a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e7e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e82:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e86:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e8a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e8e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e92:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e96:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e9a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e9e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ea2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ea6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001eaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eae:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ebe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ec2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ec6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001eca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ece:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ed2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ed6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ede:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001ee2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ee6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ef6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f02:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f06:	eef1 6a67 	vneg.f32	s13, s15
 8001f0a:	4b49      	ldr	r3, [pc, #292]	; (8002030 <MadgwickAHRSupdate+0xc18>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f14:	4b47      	ldr	r3, [pc, #284]	; (8002034 <MadgwickAHRSupdate+0xc1c>)
 8001f16:	ed93 6a00 	vldr	s12, [r3]
 8001f1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f22:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f26:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001f2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f2e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f32:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001f36:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f42:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001f46:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001f4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f6e:	eef1 6a67 	vneg.f32	s13, s15
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <MadgwickAHRSupdate+0xc14>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <MadgwickAHRSupdate+0xc10>)
 8001f7e:	ed93 6a00 	vldr	s12, [r3]
 8001f82:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f8e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001f92:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001f96:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f9a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fa2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001fa6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001faa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001fae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fb2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fb6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fbe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fca:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MadgwickAHRSupdate+0xc1c>)
 8001fcc:	edd3 6a00 	vldr	s13, [r3]
 8001fd0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001fd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fd8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001fdc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001fe0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001fe4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001fe8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fec:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ff0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ff4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ff8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ffc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8002000:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002004:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002008:	ee36 6a27 	vadd.f32	s12, s12, s15
 800200c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002010:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002020:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002024:	e008      	b.n	8002038 <MadgwickAHRSupdate+0xc20>
 8002026:	bf00      	nop
 8002028:	20000cc0 	.word	0x20000cc0
 800202c:	2000002c 	.word	0x2000002c
 8002030:	20000cc4 	.word	0x20000cc4
 8002034:	20000cbc 	.word	0x20000cbc
 8002038:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800203c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002040:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002048:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800204c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002054:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002058:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800205c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002060:	eeb0 0a67 	vmov.f32	s0, s15
 8002064:	f000 fc34 	bl	80028d0 <invSqrt>
 8002068:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 800206c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002070:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 800207c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002080:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002088:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 800208c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002090:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002098:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 800209c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80020a0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 80020ac:	4b69      	ldr	r3, [pc, #420]	; (8002254 <MadgwickAHRSupdate+0xe3c>)
 80020ae:	ed93 7a00 	vldr	s14, [r3]
 80020b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80020be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 80020c6:	4b63      	ldr	r3, [pc, #396]	; (8002254 <MadgwickAHRSupdate+0xe3c>)
 80020c8:	ed93 7a00 	vldr	s14, [r3]
 80020cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80020d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020dc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 80020e0:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <MadgwickAHRSupdate+0xe3c>)
 80020e2:	ed93 7a00 	vldr	s14, [r3]
 80020e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ee:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80020f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 80020fa:	4b56      	ldr	r3, [pc, #344]	; (8002254 <MadgwickAHRSupdate+0xe3c>)
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002108:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 8002114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002118:	edd7 7a00 	vldr	s15, [r7]
 800211c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002120:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8002124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002128:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <MadgwickAHRSupdate+0xe40>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	4b49      	ldr	r3, [pc, #292]	; (8002258 <MadgwickAHRSupdate+0xe40>)
 8002134:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 8002138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800213c:	edd7 7a00 	vldr	s15, [r7]
 8002140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002144:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214c:	4b43      	ldr	r3, [pc, #268]	; (800225c <MadgwickAHRSupdate+0xe44>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <MadgwickAHRSupdate+0xe44>)
 8002158:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 800215c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002160:	edd7 7a00 	vldr	s15, [r7]
 8002164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002168:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800216c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002170:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <MadgwickAHRSupdate+0xe48>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	4b39      	ldr	r3, [pc, #228]	; (8002260 <MadgwickAHRSupdate+0xe48>)
 800217c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8002180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002184:	edd7 7a00 	vldr	s15, [r7]
 8002188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002194:	4b33      	ldr	r3, [pc, #204]	; (8002264 <MadgwickAHRSupdate+0xe4c>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <MadgwickAHRSupdate+0xe4c>)
 80021a0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80021a4:	4b2c      	ldr	r3, [pc, #176]	; (8002258 <MadgwickAHRSupdate+0xe40>)
 80021a6:	ed93 7a00 	vldr	s14, [r3]
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <MadgwickAHRSupdate+0xe40>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <MadgwickAHRSupdate+0xe44>)
 80021b6:	edd3 6a00 	vldr	s13, [r3]
 80021ba:	4b28      	ldr	r3, [pc, #160]	; (800225c <MadgwickAHRSupdate+0xe44>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <MadgwickAHRSupdate+0xe48>)
 80021ca:	edd3 6a00 	vldr	s13, [r3]
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <MadgwickAHRSupdate+0xe48>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <MadgwickAHRSupdate+0xe4c>)
 80021de:	edd3 6a00 	vldr	s13, [r3]
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <MadgwickAHRSupdate+0xe4c>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f0:	eeb0 0a67 	vmov.f32	s0, s15
 80021f4:	f000 fb6c 	bl	80028d0 <invSqrt>
 80021f8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <MadgwickAHRSupdate+0xe40>)
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <MadgwickAHRSupdate+0xe40>)
 800220c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <MadgwickAHRSupdate+0xe44>)
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MadgwickAHRSupdate+0xe44>)
 8002220:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002224:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <MadgwickAHRSupdate+0xe48>)
 8002226:	ed93 7a00 	vldr	s14, [r3]
 800222a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800222e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <MadgwickAHRSupdate+0xe48>)
 8002234:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <MadgwickAHRSupdate+0xe4c>)
 800223a:	ed93 7a00 	vldr	s14, [r3]
 800223e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <MadgwickAHRSupdate+0xe4c>)
 8002248:	edc3 7a00 	vstr	s15, [r3]
}
 800224c:	37b8      	adds	r7, #184	; 0xb8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000004 	.word	0x20000004
 8002258:	2000002c 	.word	0x2000002c
 800225c:	20000cbc 	.word	0x20000cbc
 8002260:	20000cc0 	.word	0x20000cc0
 8002264:	20000cc4 	.word	0x20000cc4

08002268 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sample_freq) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b09e      	sub	sp, #120	; 0x78
 800226c:	af00      	add	r7, sp, #0
 800226e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002272:	edc7 0a06 	vstr	s1, [r7, #24]
 8002276:	ed87 1a05 	vstr	s2, [r7, #20]
 800227a:	edc7 1a04 	vstr	s3, [r7, #16]
 800227e:	ed87 2a03 	vstr	s4, [r7, #12]
 8002282:	edc7 2a02 	vstr	s5, [r7, #8]
 8002286:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800228a:	4bec      	ldr	r3, [pc, #944]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	eeb1 7a67 	vneg.f32	s14, s15
 8002294:	edd7 7a07 	vldr	s15, [r7, #28]
 8002298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800229c:	4be8      	ldr	r3, [pc, #928]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 800229e:	edd3 6a00 	vldr	s13, [r3]
 80022a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80022a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ae:	4be5      	ldr	r3, [pc, #916]	; (8002644 <MadgwickAHRSupdateIMU+0x3dc>)
 80022b0:	edd3 6a00 	vldr	s13, [r3]
 80022b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80022cc:	4bde      	ldr	r3, [pc, #888]	; (8002648 <MadgwickAHRSupdateIMU+0x3e0>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80022d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022da:	4bd9      	ldr	r3, [pc, #868]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 80022dc:	edd3 6a00 	vldr	s13, [r3]
 80022e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80022e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ec:	4bd5      	ldr	r3, [pc, #852]	; (8002644 <MadgwickAHRSupdateIMU+0x3dc>)
 80022ee:	edd3 6a00 	vldr	s13, [r3]
 80022f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80022f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002306:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800230a:	4bcf      	ldr	r3, [pc, #828]	; (8002648 <MadgwickAHRSupdateIMU+0x3e0>)
 800230c:	ed93 7a00 	vldr	s14, [r3]
 8002310:	edd7 7a06 	vldr	s15, [r7, #24]
 8002314:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002318:	4bc8      	ldr	r3, [pc, #800]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 800231a:	edd3 6a00 	vldr	s13, [r3]
 800231e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002326:	ee37 7a67 	vsub.f32	s14, s14, s15
 800232a:	4bc6      	ldr	r3, [pc, #792]	; (8002644 <MadgwickAHRSupdateIMU+0x3dc>)
 800232c:	edd3 6a00 	vldr	s13, [r3]
 8002330:	edd7 7a07 	vldr	s15, [r7, #28]
 8002334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002344:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002348:	4bbf      	ldr	r3, [pc, #764]	; (8002648 <MadgwickAHRSupdateIMU+0x3e0>)
 800234a:	ed93 7a00 	vldr	s14, [r3]
 800234e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002356:	4bb9      	ldr	r3, [pc, #740]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 8002358:	edd3 6a00 	vldr	s13, [r3]
 800235c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002368:	4bb5      	ldr	r3, [pc, #724]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 800236a:	edd3 6a00 	vldr	s13, [r3]
 800236e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800237e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002382:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002386:	edd7 7a04 	vldr	s15, [r7, #16]
 800238a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	d10e      	bne.n	80023b2 <MadgwickAHRSupdateIMU+0x14a>
 8002394:	edd7 7a03 	vldr	s15, [r7, #12]
 8002398:	eef5 7a40 	vcmp.f32	s15, #0.0
 800239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a0:	d107      	bne.n	80023b2 <MadgwickAHRSupdateIMU+0x14a>
 80023a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	f000 81e5 	beq.w	800277c <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80023b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80023b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80023be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	eeb0 0a67 	vmov.f32	s0, s15
 80023d6:	f000 fa7b 	bl	80028d0 <invSqrt>
 80023da:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 80023de:	ed97 7a04 	vldr	s14, [r7, #16]
 80023e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ea:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 80023ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80023f2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;   
 80023fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8002402:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800240e:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <MadgwickAHRSupdateIMU+0x3e0>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002418:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 800241c:	4b87      	ldr	r3, [pc, #540]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 800241e:	edd3 7a00 	vldr	s15, [r3]
 8002422:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002426:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 800242a:	4b85      	ldr	r3, [pc, #532]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002434:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8002438:	4b82      	ldr	r3, [pc, #520]	; (8002644 <MadgwickAHRSupdateIMU+0x3dc>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002442:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8002446:	4b80      	ldr	r3, [pc, #512]	; (8002648 <MadgwickAHRSupdateIMU+0x3e0>)
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002454:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8002458:	4b78      	ldr	r3, [pc, #480]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002466:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 800246a:	4b75      	ldr	r3, [pc, #468]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 800246c:	edd3 7a00 	vldr	s15, [r3]
 8002470:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002478:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 800247c:	4b6f      	ldr	r3, [pc, #444]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 800248e:	4b6c      	ldr	r3, [pc, #432]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 80024a0:	4b69      	ldr	r3, [pc, #420]	; (8002648 <MadgwickAHRSupdateIMU+0x3e0>)
 80024a2:	ed93 7a00 	vldr	s14, [r3]
 80024a6:	4b68      	ldr	r3, [pc, #416]	; (8002648 <MadgwickAHRSupdateIMU+0x3e0>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	4b60      	ldr	r3, [pc, #384]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 80024c8:	4b5d      	ldr	r3, [pc, #372]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 80024ca:	ed93 7a00 	vldr	s14, [r3]
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 80024dc:	4b59      	ldr	r3, [pc, #356]	; (8002644 <MadgwickAHRSupdateIMU+0x3dc>)
 80024de:	ed93 7a00 	vldr	s14, [r3]
 80024e2:	4b58      	ldr	r3, [pc, #352]	; (8002644 <MadgwickAHRSupdateIMU+0x3dc>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80024f0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024fc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002500:	edd7 7a04 	vldr	s15, [r7, #16]
 8002504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002510:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002520:	edd7 7a03 	vldr	s15, [r7, #12]
 8002524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002530:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002534:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800253c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002540:	edd7 7a04 	vldr	s15, [r7, #16]
 8002544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800254c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002550:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002554:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <MadgwickAHRSupdateIMU+0x3d4>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002566:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800256a:	edd7 7a03 	vldr	s15, [r7, #12]
 800256e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002572:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002576:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800257a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800257e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002582:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800258a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002592:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80025a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80025b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80025b6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80025ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <MadgwickAHRSupdateIMU+0x3d8>)
 80025c0:	edd3 7a00 	vldr	s15, [r3]
 80025c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80025cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80025dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80025ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80025fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002600:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002604:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002610:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002614:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002620:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002624:	edd7 7a02 	vldr	s15, [r7, #8]
 8002628:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002634:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002638:	e008      	b.n	800264c <MadgwickAHRSupdateIMU+0x3e4>
 800263a:	bf00      	nop
 800263c:	20000cbc 	.word	0x20000cbc
 8002640:	20000cc0 	.word	0x20000cc0
 8002644:	20000cc4 	.word	0x20000cc4
 8002648:	2000002c 	.word	0x2000002c
 800264c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002650:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002654:	4b99      	ldr	r3, [pc, #612]	; (80028bc <MadgwickAHRSupdateIMU+0x654>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002662:	edd7 7a04 	vldr	s15, [r7, #16]
 8002666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800266e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002672:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002676:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800267a:	4b90      	ldr	r3, [pc, #576]	; (80028bc <MadgwickAHRSupdateIMU+0x654>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002688:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800268c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002698:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800269c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80026c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c8:	eeb0 0a67 	vmov.f32	s0, s15
 80026cc:	f000 f900 	bl	80028d0 <invSqrt>
 80026d0:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 80026d4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80026d8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 80026e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80026e8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 80026f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80026f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002700:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 8002704:	ed97 7a08 	vldr	s14, [r7, #32]
 8002708:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800270c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002710:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <MadgwickAHRSupdateIMU+0x658>)
 8002716:	ed93 7a00 	vldr	s14, [r3]
 800271a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800271e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002722:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 800272e:	4b64      	ldr	r3, [pc, #400]	; (80028c0 <MadgwickAHRSupdateIMU+0x658>)
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002744:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 8002748:	4b5d      	ldr	r3, [pc, #372]	; (80028c0 <MadgwickAHRSupdateIMU+0x658>)
 800274a:	ed93 7a00 	vldr	s14, [r3]
 800274e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002756:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800275a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <MadgwickAHRSupdateIMU+0x658>)
 8002764:	ed93 7a00 	vldr	s14, [r3]
 8002768:	edd7 7a08 	vldr	s15, [r7, #32]
 800276c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002770:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002778:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 800277c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002780:	edd7 7a01 	vldr	s15, [r7, #4]
 8002784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002788:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800278c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002790:	4b4c      	ldr	r3, [pc, #304]	; (80028c4 <MadgwickAHRSupdateIMU+0x65c>)
 8002792:	edd3 7a00 	vldr	s15, [r3]
 8002796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <MadgwickAHRSupdateIMU+0x65c>)
 800279c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 80027a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ac:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80027b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b4:	4b44      	ldr	r3, [pc, #272]	; (80028c8 <MadgwickAHRSupdateIMU+0x660>)
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027be:	4b42      	ldr	r3, [pc, #264]	; (80028c8 <MadgwickAHRSupdateIMU+0x660>)
 80027c0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 80027c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80027cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80027d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d8:	4b3c      	ldr	r3, [pc, #240]	; (80028cc <MadgwickAHRSupdateIMU+0x664>)
 80027da:	edd3 7a00 	vldr	s15, [r3]
 80027de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e2:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <MadgwickAHRSupdateIMU+0x664>)
 80027e4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 80027e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80027f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fc:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <MadgwickAHRSupdateIMU+0x654>)
 80027fe:	edd3 7a00 	vldr	s15, [r3]
 8002802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <MadgwickAHRSupdateIMU+0x654>)
 8002808:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <MadgwickAHRSupdateIMU+0x65c>)
 800280e:	ed93 7a00 	vldr	s14, [r3]
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <MadgwickAHRSupdateIMU+0x65c>)
 8002814:	edd3 7a00 	vldr	s15, [r3]
 8002818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <MadgwickAHRSupdateIMU+0x660>)
 800281e:	edd3 6a00 	vldr	s13, [r3]
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <MadgwickAHRSupdateIMU+0x660>)
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002830:	4b26      	ldr	r3, [pc, #152]	; (80028cc <MadgwickAHRSupdateIMU+0x664>)
 8002832:	edd3 6a00 	vldr	s13, [r3]
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <MadgwickAHRSupdateIMU+0x664>)
 8002838:	edd3 7a00 	vldr	s15, [r3]
 800283c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MadgwickAHRSupdateIMU+0x654>)
 8002846:	edd3 6a00 	vldr	s13, [r3]
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <MadgwickAHRSupdateIMU+0x654>)
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	eeb0 0a67 	vmov.f32	s0, s15
 800285c:	f000 f838 	bl	80028d0 <invSqrt>
 8002860:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MadgwickAHRSupdateIMU+0x65c>)
 8002866:	ed93 7a00 	vldr	s14, [r3]
 800286a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800286e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MadgwickAHRSupdateIMU+0x65c>)
 8002874:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <MadgwickAHRSupdateIMU+0x660>)
 800287a:	ed93 7a00 	vldr	s14, [r3]
 800287e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <MadgwickAHRSupdateIMU+0x660>)
 8002888:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <MadgwickAHRSupdateIMU+0x664>)
 800288e:	ed93 7a00 	vldr	s14, [r3]
 8002892:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MadgwickAHRSupdateIMU+0x664>)
 800289c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80028a0:	4b06      	ldr	r3, [pc, #24]	; (80028bc <MadgwickAHRSupdateIMU+0x654>)
 80028a2:	ed93 7a00 	vldr	s14, [r3]
 80028a6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80028aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ae:	4b03      	ldr	r3, [pc, #12]	; (80028bc <MadgwickAHRSupdateIMU+0x654>)
 80028b0:	edc3 7a00 	vstr	s15, [r3]
}
 80028b4:	bf00      	nop
 80028b6:	3778      	adds	r7, #120	; 0x78
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000cc4 	.word	0x20000cc4
 80028c0:	20000004 	.word	0x20000004
 80028c4:	2000002c 	.word	0x2000002c
 80028c8:	20000cbc 	.word	0x20000cbc
 80028cc:	20000cc0 	.word	0x20000cc0

080028d0 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80028da:	edd7 7a01 	vldr	s15, [r7, #4]
 80028de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	105a      	asrs	r2, r3, #1
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <invSqrt+0x74>)
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002908:	ed97 7a04 	vldr	s14, [r7, #16]
 800290c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002914:	edd7 7a04 	vldr	s15, [r7, #16]
 8002918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002920:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002924:	edd7 7a04 	vldr	s15, [r7, #16]
 8002928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	ee07 3a90 	vmov	s15, r3
}
 8002936:	eeb0 0a67 	vmov.f32	s0, s15
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	5f3759df 	.word	0x5f3759df

08002948 <MCP4728_Write_GeneralCall>:
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, data, sizeof(data), HAL_MAX_DELAY);
	return ret;
}

void MCP4728_Write_GeneralCall(I2C_HandleTypeDef *I2CHandler, uint8_t command) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af02      	add	r7, sp, #8
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
	uint16_t zeoo = 0x00;
 8002954:	2300      	movs	r3, #0
 8002956:	81fb      	strh	r3, [r7, #14]
	uint16_t sizey = 0x1;
 8002958:	2301      	movs	r3, #1
 800295a:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(I2CHandler, zeoo, &command, sizey, HAL_MAX_DELAY);
 800295c:	89bb      	ldrh	r3, [r7, #12]
 800295e:	1cfa      	adds	r2, r7, #3
 8002960:	89f9      	ldrh	r1, [r7, #14]
 8002962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002966:	9000      	str	r0, [sp, #0]
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f005 fc35 	bl	80081d8 <HAL_I2C_Master_Transmit>

}
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <MCP4728_Write_AllChannels_Diff>:
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Write_AllChannels_Diff(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 8002976:	b580      	push	{r7, lr}
 8002978:	b08a      	sub	sp, #40	; 0x28
 800297a:	af02      	add	r7, sp, #8
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	4638      	mov	r0, r7
 8002980:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf[8];
	for(uint8_t i = 0; i < 4; i++){
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e024      	b.n	80029d4 <MCP4728_Write_AllChannels_Diff+0x5e>
		uint8_t lowByte = output.channel_Val[i] & 0xff;
 800298a:	7ffb      	ldrb	r3, [r7, #31]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	3320      	adds	r3, #32
 8002990:	443b      	add	r3, r7
 8002992:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8002996:	77bb      	strb	r3, [r7, #30]
		uint8_t highByte = (output.channel_Val[i] >> 8);
 8002998:	7ffb      	ldrb	r3, [r7, #31]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	3320      	adds	r3, #32
 800299e:	443b      	add	r3, r7
 80029a0:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	777b      	strb	r3, [r7, #29]
		buf[i*2] =  0x0f&highByte;
 80029aa:	7ffb      	ldrb	r3, [r7, #31]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	7f7a      	ldrb	r2, [r7, #29]
 80029b0:	f002 020f 	and.w	r2, r2, #15
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	3320      	adds	r3, #32
 80029b8:	443b      	add	r3, r7
 80029ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)+1] = lowByte;
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	3301      	adds	r3, #1
 80029c4:	3320      	adds	r3, #32
 80029c6:	443b      	add	r3, r7
 80029c8:	7fba      	ldrb	r2, [r7, #30]
 80029ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	3301      	adds	r3, #1
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	7ffb      	ldrb	r3, [r7, #31]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d9d7      	bls.n	800298a <MCP4728_Write_AllChannels_Diff+0x14>
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 80029da:	f107 0214 	add.w	r2, r7, #20
 80029de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2308      	movs	r3, #8
 80029e6:	21c8      	movs	r1, #200	; 0xc8
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f005 fbf5 	bl	80081d8 <HAL_I2C_Master_Transmit>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 80029ee:	2108      	movs	r1, #8
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff ffa9 	bl	8002948 <MCP4728_Write_GeneralCall>
}
 80029f6:	bf00      	nop
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <MCP4728_Init>:
	buf[2] = lowByte;
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Init(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b08a      	sub	sp, #40	; 0x28
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	4638      	mov	r0, r7
 8002a08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_RESET);
 8002a0c:	2106      	movs	r1, #6
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff ff9a 	bl	8002948 <MCP4728_Write_GeneralCall>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_WAKEUP);
 8002a14:	2109      	movs	r1, #9
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff ff96 	bl	8002948 <MCP4728_Write_GeneralCall>
	//MCP4728_Write_GeneralCall(I2CHandler, 0x0C);

	uint8_t buf[9];
	buf[0] = MCP4728_CMD_DACWRITE_SEQ;
 8002a1c:	2350      	movs	r3, #80	; 0x50
 8002a1e:	753b      	strb	r3, [r7, #20]
	for(uint8_t i = 1; i <= 4; i++){
 8002a20:	2301      	movs	r3, #1
 8002a22:	77fb      	strb	r3, [r7, #31]
 8002a24:	e015      	b.n	8002a52 <MCP4728_Init+0x54>
		buf[(i*2)+1] = 0x00;
 8002a26:	7ffb      	ldrb	r3, [r7, #31]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	3320      	adds	r3, #32
 8002a2e:	443b      	add	r3, r7
 8002a30:	2200      	movs	r2, #0
 8002a32:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)] = (0 << 7) | ((i-1)<<4) | 0x0;
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	7ffb      	ldrb	r3, [r7, #31]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	0112      	lsls	r2, r2, #4
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	3320      	adds	r3, #32
 8002a46:	443b      	add	r3, r7
 8002a48:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 1; i <= 4; i++){
 8002a4c:	7ffb      	ldrb	r3, [r7, #31]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	77fb      	strb	r3, [r7, #31]
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d9e6      	bls.n	8002a26 <MCP4728_Init+0x28>
	}

	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8002a58:	f107 0214 	add.w	r2, r7, #20
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2309      	movs	r3, #9
 8002a64:	21c8      	movs	r1, #200	; 0xc8
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f005 fbb6 	bl	80081d8 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(I2CHandler, 0xC8, buf, sizeof(buf), HAL_MAX_DELAY);
	//C0, C2, C4, C6, C8, CA, CC, CE
	//60, 61, 62, 63, 64, 65, 66, 67
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff ff6a 	bl	8002948 <MCP4728_Write_GeneralCall>
}
 8002a74:	bf00      	nop
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <LCD_Reset>:
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}

void LCD_Reset(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
	int i;
    lcddev.reset(1);      // Assert reset
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <LCD_Reset+0x48>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2001      	movs	r0, #1
 8002a88:	4798      	blx	r3
    //nano_wait(100000000); // Wait
    for(i=0; i<100000;i++);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	e002      	b.n	8002a96 <LCD_Reset+0x1a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3301      	adds	r3, #1
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <LCD_Reset+0x4c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	ddf8      	ble.n	8002a90 <LCD_Reset+0x14>
    //nano_wait(10);
    lcddev.reset(0);      // De-assert reset
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <LCD_Reset+0x48>)
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	4798      	blx	r3
    //nano_wait(50000000);  // Wait
    //nano_wait(10);
    for(i=0;i<1000000;i++);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	e002      	b.n	8002ab2 <LCD_Reset+0x36>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a05      	ldr	r2, [pc, #20]	; (8002acc <LCD_Reset+0x50>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	ddf8      	ble.n	8002aac <LCD_Reset+0x30>
}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000270 	.word	0x20000270
 8002ac8:	0001869f 	.word	0x0001869f
 8002acc:	000f423f 	.word	0x000f423f

08002ad0 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	71fb      	strb	r3, [r7, #7]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8002ada:	bf00      	nop
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <LCD_WR_REG+0x30>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f9      	bne.n	8002adc <LCD_WR_REG+0xc>
        ;
    // Don't clear RS until the previous operation is done.
    lcddev.reg_select(1);
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <LCD_WR_REG+0x34>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2001      	movs	r0, #1
 8002aee:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8002af0:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <LCD_WR_REG+0x38>)
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	7013      	strb	r3, [r2, #0]
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40013000 	.word	0x40013000
 8002b04:	20000270 	.word	0x20000270
 8002b08:	4001300c 	.word	0x4001300c

08002b0c <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8002b16:	bf00      	nop
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <LCD_WR_DATA+0x30>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f9      	bne.n	8002b18 <LCD_WR_DATA+0xc>
        ;
    // Don't set RS until the previous operation is done.
    lcddev.reg_select(0);
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <LCD_WR_DATA+0x34>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	2000      	movs	r0, #0
 8002b2a:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8002b2c:	4a05      	ldr	r2, [pc, #20]	; (8002b44 <LCD_WR_DATA+0x38>)
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	7013      	strb	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40013000 	.word	0x40013000
 8002b40:	20000270 	.word	0x20000270
 8002b44:	4001300c 	.word	0x4001300c

08002b48 <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
    lcddev.reg_select(0);
 8002b4c:	4b05      	ldr	r3, [pc, #20]	; (8002b64 <LCD_WriteData16_Prepare+0x1c>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2000      	movs	r0, #0
 8002b52:	4798      	blx	r3
    SPI->CR2 |= SPI_CR2_DS;
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <LCD_WriteData16_Prepare+0x20>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4a03      	ldr	r2, [pc, #12]	; (8002b68 <LCD_WriteData16_Prepare+0x20>)
 8002b5a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002b5e:	6053      	str	r3, [r2, #4]
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000270 	.word	0x20000270
 8002b68:	40013000 	.word	0x40013000

08002b6c <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	80fb      	strh	r3, [r7, #6]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8002b76:	bf00      	nop
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <LCD_WriteData16+0x2c>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f9      	beq.n	8002b78 <LCD_WriteData16+0xc>
        ;
    SPI->DR = data;
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <LCD_WriteData16+0x2c>)
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	60d3      	str	r3, [r2, #12]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40013000 	.word	0x40013000

08002b9c <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <LCD_WriteData16_End+0x1c>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <LCD_WriteData16_End+0x1c>)
 8002ba6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002baa:	6053      	str	r3, [r2, #4]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40013000 	.word	0x40013000

08002bbc <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	71fb      	strb	r3, [r7, #7]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80bb      	strh	r3, [r7, #4]
    LCD_WR_REG(LCD_Reg);
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff7e 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8002bd4:	88bb      	ldrh	r3, [r7, #4]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff97 	bl	8002b0c <LCD_WR_DATA>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <LCD_WriteRAM_Prepare+0x14>)
 8002bee:	891b      	ldrh	r3, [r3, #8]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff6c 	bl	8002ad0 <LCD_WR_REG>
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000270 	.word	0x20000270

08002c00 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
    lcddev.setxcmd=0x2A;
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <LCD_direction+0xa4>)
 8002c0c:	222a      	movs	r2, #42	; 0x2a
 8002c0e:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 8002c10:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <LCD_direction+0xa4>)
 8002c12:	222b      	movs	r2, #43	; 0x2b
 8002c14:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <LCD_direction+0xa4>)
 8002c18:	222c      	movs	r2, #44	; 0x2c
 8002c1a:	811a      	strh	r2, [r3, #8]
    switch(direction){
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d83a      	bhi.n	8002c98 <LCD_direction+0x98>
 8002c22:	a201      	add	r2, pc, #4	; (adr r2, 8002c28 <LCD_direction+0x28>)
 8002c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c28:	08002c39 	.word	0x08002c39
 8002c2c:	08002c51 	.word	0x08002c51
 8002c30:	08002c69 	.word	0x08002c69
 8002c34:	08002c81 	.word	0x08002c81
    case 0:
        lcddev.width=LCD_W;
 8002c38:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <LCD_direction+0xa4>)
 8002c3a:	22f0      	movs	r2, #240	; 0xf0
 8002c3c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <LCD_direction+0xa4>)
 8002c40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c44:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8002c46:	2108      	movs	r1, #8
 8002c48:	2036      	movs	r0, #54	; 0x36
 8002c4a:	f7ff ffb7 	bl	8002bbc <LCD_WriteReg>
        break;
 8002c4e:	e024      	b.n	8002c9a <LCD_direction+0x9a>
    case 1:
        lcddev.width=LCD_H;
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <LCD_direction+0xa4>)
 8002c52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c56:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <LCD_direction+0xa4>)
 8002c5a:	22f0      	movs	r2, #240	; 0xf0
 8002c5c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8002c5e:	2168      	movs	r1, #104	; 0x68
 8002c60:	2036      	movs	r0, #54	; 0x36
 8002c62:	f7ff ffab 	bl	8002bbc <LCD_WriteReg>
        break;
 8002c66:	e018      	b.n	8002c9a <LCD_direction+0x9a>
    case 2:
        lcddev.width=LCD_W;
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <LCD_direction+0xa4>)
 8002c6a:	22f0      	movs	r2, #240	; 0xf0
 8002c6c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <LCD_direction+0xa4>)
 8002c70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c74:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8002c76:	21c8      	movs	r1, #200	; 0xc8
 8002c78:	2036      	movs	r0, #54	; 0x36
 8002c7a:	f7ff ff9f 	bl	8002bbc <LCD_WriteReg>
        break;
 8002c7e:	e00c      	b.n	8002c9a <LCD_direction+0x9a>
    case 3:
        lcddev.width=LCD_H;
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <LCD_direction+0xa4>)
 8002c82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c86:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <LCD_direction+0xa4>)
 8002c8a:	22f0      	movs	r2, #240	; 0xf0
 8002c8c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8002c8e:	21a8      	movs	r1, #168	; 0xa8
 8002c90:	2036      	movs	r0, #54	; 0x36
 8002c92:	f7ff ff93 	bl	8002bbc <LCD_WriteReg>
        break;
 8002c96:	e000      	b.n	8002c9a <LCD_direction+0x9a>
    default:break;
 8002c98:	bf00      	nop
    }
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000270 	.word	0x20000270

08002ca8 <tft_select>:

static void tft_select(int val)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
    if (val == 0) {
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10b      	bne.n	8002cce <tft_select+0x26>
        while(SPI1->SR & SPI_SR_BSY)
 8002cb6:	bf00      	nop
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <tft_select+0x4c>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f9      	bne.n	8002cb8 <tft_select+0x10>
            ;
        GPIOA->BSRR = 1<<4;
 8002cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cc8:	2210      	movs	r2, #16
 8002cca:	619a      	str	r2, [r3, #24]
            // This is a common mistake made by students.
            // This is what catches the problem early.
        }
        GPIOA->BRR = 1<<4;
    }
}
 8002ccc:	e00b      	b.n	8002ce6 <tft_select+0x3e>
    	while((GPIOA->ODR & (1<<4)) == 0) {
 8002cce:	bf00      	nop
 8002cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f8      	beq.n	8002cd0 <tft_select+0x28>
        GPIOA->BRR = 1<<4;
 8002cde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40013000 	.word	0x40013000

08002cf8 <tft_reset>:

static void tft_reset(int val)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
    if (val) {
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <tft_reset+0x16>
        GPIOB->BRR = 1<<0;
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <tft_reset+0x28>)
 8002d08:	2201      	movs	r2, #1
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28
    } else {
        GPIOB->BSRR = 1<<0;
    }
}
 8002d0c:	e002      	b.n	8002d14 <tft_reset+0x1c>
        GPIOB->BSRR = 1<<0;
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <tft_reset+0x28>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	619a      	str	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	48000400 	.word	0x48000400

08002d24 <tft_reg_select>:

static void tft_reg_select(int val)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    if (val == 1) { // select registers
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d104      	bne.n	8002d3c <tft_reg_select+0x18>
        GPIOA->BRR = 1<<3; // clear
 8002d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d36:	2208      	movs	r2, #8
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
    } else { // select data
        GPIOA->BSRR = 1<<3; // set
    }
}
 8002d3a:	e003      	b.n	8002d44 <tft_reg_select+0x20>
        GPIOA->BSRR = 1<<3; // set
 8002d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d40:	2208      	movs	r2, #8
 8002d42:	619a      	str	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init(void (*reset)(int), void (*select)(int), void (*reg_select)(int))
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
	int i;

    lcddev.reset = tft_reset;
 8002d5c:	4ba3      	ldr	r3, [pc, #652]	; (8002fec <LCD_Init+0x29c>)
 8002d5e:	4aa4      	ldr	r2, [pc, #656]	; (8002ff0 <LCD_Init+0x2a0>)
 8002d60:	611a      	str	r2, [r3, #16]
    lcddev.select = tft_select;
 8002d62:	4ba2      	ldr	r3, [pc, #648]	; (8002fec <LCD_Init+0x29c>)
 8002d64:	4aa3      	ldr	r2, [pc, #652]	; (8002ff4 <LCD_Init+0x2a4>)
 8002d66:	615a      	str	r2, [r3, #20]
    lcddev.reg_select = tft_reg_select;
 8002d68:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <LCD_Init+0x29c>)
 8002d6a:	4aa3      	ldr	r2, [pc, #652]	; (8002ff8 <LCD_Init+0x2a8>)
 8002d6c:	619a      	str	r2, [r3, #24]
    if (reset)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <LCD_Init+0x2a>
        lcddev.reset = reset;
 8002d74:	4a9d      	ldr	r2, [pc, #628]	; (8002fec <LCD_Init+0x29c>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6113      	str	r3, [r2, #16]
    if (select)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <LCD_Init+0x36>
        lcddev.select = select;
 8002d80:	4a9a      	ldr	r2, [pc, #616]	; (8002fec <LCD_Init+0x29c>)
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6153      	str	r3, [r2, #20]
    if (reg_select)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <LCD_Init+0x42>
        lcddev.reg_select = reg_select;
 8002d8c:	4a97      	ldr	r2, [pc, #604]	; (8002fec <LCD_Init+0x29c>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6193      	str	r3, [r2, #24]
    lcddev.select(1);
 8002d92:	4b96      	ldr	r3, [pc, #600]	; (8002fec <LCD_Init+0x29c>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	2001      	movs	r0, #1
 8002d98:	4798      	blx	r3
    LCD_Reset();
 8002d9a:	f7ff fe6f 	bl	8002a7c <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8002d9e:	20cf      	movs	r0, #207	; 0xcf
 8002da0:	f7ff fe96 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7ff feb1 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8002daa:	20d9      	movs	r0, #217	; 0xd9
 8002dac:	f7ff feae 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8002db0:	2030      	movs	r0, #48	; 0x30
 8002db2:	f7ff feab 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 8002db6:	20ed      	movs	r0, #237	; 0xed
 8002db8:	f7ff fe8a 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8002dbc:	2064      	movs	r0, #100	; 0x64
 8002dbe:	f7ff fea5 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	f7ff fea2 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8002dc8:	2012      	movs	r0, #18
 8002dca:	f7ff fe9f 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8002dce:	2081      	movs	r0, #129	; 0x81
 8002dd0:	f7ff fe9c 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 8002dd4:	20e8      	movs	r0, #232	; 0xe8
 8002dd6:	f7ff fe7b 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8002dda:	2085      	movs	r0, #133	; 0x85
 8002ddc:	f7ff fe96 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002de0:	2010      	movs	r0, #16
 8002de2:	f7ff fe93 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 8002de6:	207a      	movs	r0, #122	; 0x7a
 8002de8:	f7ff fe90 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8002dec:	20cb      	movs	r0, #203	; 0xcb
 8002dee:	f7ff fe6f 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 8002df2:	2039      	movs	r0, #57	; 0x39
 8002df4:	f7ff fe8a 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8002df8:	202c      	movs	r0, #44	; 0x2c
 8002dfa:	f7ff fe87 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7ff fe84 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8002e04:	2034      	movs	r0, #52	; 0x34
 8002e06:	f7ff fe81 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8002e0a:	2002      	movs	r0, #2
 8002e0c:	f7ff fe7e 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 8002e10:	20f7      	movs	r0, #247	; 0xf7
 8002e12:	f7ff fe5d 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 8002e16:	2020      	movs	r0, #32
 8002e18:	f7ff fe78 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 8002e1c:	20ea      	movs	r0, #234	; 0xea
 8002e1e:	f7ff fe57 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff fe72 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7ff fe6f 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 8002e2e:	20c0      	movs	r0, #192	; 0xc0
 8002e30:	f7ff fe4e 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 8002e34:	2021      	movs	r0, #33	; 0x21
 8002e36:	f7ff fe69 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 8002e3a:	20c1      	movs	r0, #193	; 0xc1
 8002e3c:	f7ff fe48 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 8002e40:	2012      	movs	r0, #18
 8002e42:	f7ff fe63 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 8002e46:	20c5      	movs	r0, #197	; 0xc5
 8002e48:	f7ff fe42 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 8002e4c:	2039      	movs	r0, #57	; 0x39
 8002e4e:	f7ff fe5d 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 8002e52:	2037      	movs	r0, #55	; 0x37
 8002e54:	f7ff fe5a 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 8002e58:	20c7      	movs	r0, #199	; 0xc7
 8002e5a:	f7ff fe39 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 8002e5e:	20ab      	movs	r0, #171	; 0xab
 8002e60:	f7ff fe54 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 8002e64:	2036      	movs	r0, #54	; 0x36
 8002e66:	f7ff fe33 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 8002e6a:	2048      	movs	r0, #72	; 0x48
 8002e6c:	f7ff fe4e 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 8002e70:	203a      	movs	r0, #58	; 0x3a
 8002e72:	f7ff fe2d 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 8002e76:	2055      	movs	r0, #85	; 0x55
 8002e78:	f7ff fe48 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8002e7c:	20b1      	movs	r0, #177	; 0xb1
 8002e7e:	f7ff fe27 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7ff fe42 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 8002e88:	201b      	movs	r0, #27
 8002e8a:	f7ff fe3f 	bl	8002b0c <LCD_WR_DATA>



    LCD_WR_REG(0xB6);    // Display Function Control
 8002e8e:	20b6      	movs	r0, #182	; 0xb6
 8002e90:	f7ff fe1e 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 8002e94:	200a      	movs	r0, #10
 8002e96:	f7ff fe39 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8002e9a:	20a2      	movs	r0, #162	; 0xa2
 8002e9c:	f7ff fe36 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002ea0:	20f2      	movs	r0, #242	; 0xf2
 8002ea2:	f7ff fe15 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7ff fe30 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8002eac:	2026      	movs	r0, #38	; 0x26
 8002eae:	f7ff fe0f 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f7ff fe2a 	bl	8002b0c <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8002eb8:	20e0      	movs	r0, #224	; 0xe0
 8002eba:	f7ff fe09 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8002ebe:	200f      	movs	r0, #15
 8002ec0:	f7ff fe24 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8002ec4:	2023      	movs	r0, #35	; 0x23
 8002ec6:	f7ff fe21 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8002eca:	201f      	movs	r0, #31
 8002ecc:	f7ff fe1e 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8002ed0:	200b      	movs	r0, #11
 8002ed2:	f7ff fe1b 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8002ed6:	200e      	movs	r0, #14
 8002ed8:	f7ff fe18 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8002edc:	2008      	movs	r0, #8
 8002ede:	f7ff fe15 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8002ee2:	204b      	movs	r0, #75	; 0x4b
 8002ee4:	f7ff fe12 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8002ee8:	20a8      	movs	r0, #168	; 0xa8
 8002eea:	f7ff fe0f 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8002eee:	203b      	movs	r0, #59	; 0x3b
 8002ef0:	f7ff fe0c 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 8002ef4:	200a      	movs	r0, #10
 8002ef6:	f7ff fe09 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8002efa:	2014      	movs	r0, #20
 8002efc:	f7ff fe06 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 8002f00:	2006      	movs	r0, #6
 8002f02:	f7ff fe03 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002f06:	2010      	movs	r0, #16
 8002f08:	f7ff fe00 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8002f0c:	2009      	movs	r0, #9
 8002f0e:	f7ff fdfd 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7ff fdfa 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 8002f18:	20e1      	movs	r0, #225	; 0xe1
 8002f1a:	f7ff fdd9 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f7ff fdf4 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 8002f24:	201c      	movs	r0, #28
 8002f26:	f7ff fdf1 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 8002f2a:	2020      	movs	r0, #32
 8002f2c:	f7ff fdee 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 8002f30:	2004      	movs	r0, #4
 8002f32:	f7ff fdeb 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002f36:	2010      	movs	r0, #16
 8002f38:	f7ff fde8 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8002f3c:	2008      	movs	r0, #8
 8002f3e:	f7ff fde5 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8002f42:	2034      	movs	r0, #52	; 0x34
 8002f44:	f7ff fde2 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 8002f48:	2047      	movs	r0, #71	; 0x47
 8002f4a:	f7ff fddf 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 8002f4e:	2044      	movs	r0, #68	; 0x44
 8002f50:	f7ff fddc 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 8002f54:	2005      	movs	r0, #5
 8002f56:	f7ff fdd9 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8002f5a:	200b      	movs	r0, #11
 8002f5c:	f7ff fdd6 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8002f60:	2009      	movs	r0, #9
 8002f62:	f7ff fdd3 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 8002f66:	202f      	movs	r0, #47	; 0x2f
 8002f68:	f7ff fdd0 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8002f6c:	2036      	movs	r0, #54	; 0x36
 8002f6e:	f7ff fdcd 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8002f72:	200f      	movs	r0, #15
 8002f74:	f7ff fdca 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8002f78:	202b      	movs	r0, #43	; 0x2b
 8002f7a:	f7ff fda9 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002f7e:	2000      	movs	r0, #0
 8002f80:	f7ff fdc4 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f7ff fdc1 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7ff fdbe 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8002f90:	203f      	movs	r0, #63	; 0x3f
 8002f92:	f7ff fdbb 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8002f96:	202a      	movs	r0, #42	; 0x2a
 8002f98:	f7ff fd9a 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7ff fdb5 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7ff fdb2 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7ff fdaf 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8002fae:	20ef      	movs	r0, #239	; 0xef
 8002fb0:	f7ff fdac 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8002fb4:	2011      	movs	r0, #17
 8002fb6:	f7ff fd8b 	bl	8002ad0 <LCD_WR_REG>
    //nano_wait(120000000); // Wait 120 ms
    for(i=0; i<10000;i++);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	e002      	b.n	8002fc6 <LCD_Init+0x276>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	ddf7      	ble.n	8002fc0 <LCD_Init+0x270>
    LCD_WR_REG(0x29);     // Display on
 8002fd0:	2029      	movs	r0, #41	; 0x29
 8002fd2:	f7ff fd7d 	bl	8002ad0 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff fe12 	bl	8002c00 <LCD_direction>
    lcddev.select(0);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <LCD_Init+0x29c>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	4798      	blx	r3
}
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000270 	.word	0x20000270
 8002ff0:	08002cf9 	.word	0x08002cf9
 8002ff4:	08002ca9 	.word	0x08002ca9
 8002ff8:	08002d25 	.word	0x08002d25

08002ffc <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4604      	mov	r4, r0
 8003004:	4608      	mov	r0, r1
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	4623      	mov	r3, r4
 800300c:	80fb      	strh	r3, [r7, #6]
 800300e:	4603      	mov	r3, r0
 8003010:	80bb      	strh	r3, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	807b      	strh	r3, [r7, #2]
 8003016:	4613      	mov	r3, r2
 8003018:	803b      	strh	r3, [r7, #0]
    LCD_WR_REG(lcddev.setxcmd);
 800301a:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <LCD_SetWindow+0xa4>)
 800301c:	895b      	ldrh	r3, [r3, #10]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fd55 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	b29b      	uxth	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fd6c 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fd67 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	b29b      	uxth	r3, r3
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fd60 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fd5b 	bl	8002b0c <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <LCD_SetWindow+0xa4>)
 8003058:	899b      	ldrh	r3, [r3, #12]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fd37 	bl	8002ad0 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8003062:	88bb      	ldrh	r3, [r7, #4]
 8003064:	0a1b      	lsrs	r3, r3, #8
 8003066:	b29b      	uxth	r3, r3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fd4e 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8003070:	88bb      	ldrh	r3, [r7, #4]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fd49 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 800307a:	883b      	ldrh	r3, [r7, #0]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	b29b      	uxth	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff fd42 	bl	8002b0c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8003088:	883b      	ldrh	r3, [r7, #0]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fd3d 	bl	8002b0c <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8003092:	f7ff fda9 	bl	8002be8 <LCD_WriteRAM_Prepare>
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bd90      	pop	{r4, r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000270 	.word	0x20000270

080030a4 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	80fb      	strh	r3, [r7, #6]
	int j;

    lcddev.select(1);
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <LCD_Clear+0x94>)
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	2001      	movs	r0, #1
 80030b4:	4798      	blx	r3
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <LCD_Clear+0x94>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <LCD_Clear+0x94>)
 80030c0:	885b      	ldrh	r3, [r3, #2]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2100      	movs	r1, #0
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7ff ff97 	bl	8002ffc <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 80030ce:	f7ff fd3b 	bl	8002b48 <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	e012      	b.n	80030fe <LCD_Clear+0x5a>
    {
        for(m=0;m<lcddev.width;m++)
 80030d8:	2300      	movs	r3, #0
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	e006      	b.n	80030ec <LCD_Clear+0x48>
        {
            LCD_WriteData16(Color);
 80030de:	88fb      	ldrh	r3, [r7, #6]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fd43 	bl	8002b6c <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	3301      	adds	r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	4b12      	ldr	r3, [pc, #72]	; (8003138 <LCD_Clear+0x94>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d3f2      	bcc.n	80030de <LCD_Clear+0x3a>
    for(i=0;i<lcddev.height;i++)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	3301      	adds	r3, #1
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <LCD_Clear+0x94>)
 8003100:	885b      	ldrh	r3, [r3, #2]
 8003102:	461a      	mov	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4293      	cmp	r3, r2
 8003108:	d3e6      	bcc.n	80030d8 <LCD_Clear+0x34>
        }
    }
    LCD_WriteData16_End();
 800310a:	f7ff fd47 	bl	8002b9c <LCD_WriteData16_End>
    lcddev.select(0);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <LCD_Clear+0x94>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	2000      	movs	r0, #0
 8003114:	4798      	blx	r3
    for(j = 0; j < 10000; j++);
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e002      	b.n	8003122 <LCD_Clear+0x7e>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	f242 720f 	movw	r2, #9999	; 0x270f
 8003128:	4293      	cmp	r3, r2
 800312a:	ddf7      	ble.n	800311c <LCD_Clear+0x78>
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000270 	.word	0x20000270

0800313c <_LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
static void _LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	80fb      	strh	r3, [r7, #6]
 8003146:	460b      	mov	r3, r1
 8003148:	80bb      	strh	r3, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	807b      	strh	r3, [r7, #2]
    LCD_SetWindow(x,y,x,y);
 800314e:	88bb      	ldrh	r3, [r7, #4]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	88b9      	ldrh	r1, [r7, #4]
 8003154:	88f8      	ldrh	r0, [r7, #6]
 8003156:	f7ff ff51 	bl	8002ffc <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 800315a:	f7ff fcf5 	bl	8002b48 <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 800315e:	887b      	ldrh	r3, [r7, #2]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fd03 	bl	8002b6c <LCD_WriteData16>
    LCD_WriteData16_End();
 8003166:	f7ff fd19 	bl	8002b9c <LCD_WriteData16_End>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <_LCD_DrawLine>:

//===========================================================================
// Draw a line of color c from (x1,y1) to (x2,y2).
//===========================================================================
static void _LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 8003172:	b590      	push	{r4, r7, lr}
 8003174:	b08d      	sub	sp, #52	; 0x34
 8003176:	af00      	add	r7, sp, #0
 8003178:	4604      	mov	r4, r0
 800317a:	4608      	mov	r0, r1
 800317c:	4611      	mov	r1, r2
 800317e:	461a      	mov	r2, r3
 8003180:	4623      	mov	r3, r4
 8003182:	80fb      	strh	r3, [r7, #6]
 8003184:	4603      	mov	r3, r0
 8003186:	80bb      	strh	r3, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	807b      	strh	r3, [r7, #2]
 800318c:	4613      	mov	r3, r2
 800318e:	803b      	strh	r3, [r7, #0]
    u16 t;
    int xerr=0,yerr=0,delta_x,delta_y,distance;
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    int incx,incy,uRow,uCol;

    delta_x=x2-x1;
 8003198:	887a      	ldrh	r2, [r7, #2]
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	623b      	str	r3, [r7, #32]
    delta_y=y2-y1;
 80031a0:	883a      	ldrh	r2, [r7, #0]
 80031a2:	88bb      	ldrh	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	61fb      	str	r3, [r7, #28]
    uRow=x1;
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	60fb      	str	r3, [r7, #12]
    uCol=y1;
 80031ac:	88bb      	ldrh	r3, [r7, #4]
 80031ae:	60bb      	str	r3, [r7, #8]
    if(delta_x>0)incx=1;
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	dd02      	ble.n	80031bc <_LCD_DrawLine+0x4a>
 80031b6:	2301      	movs	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e00b      	b.n	80031d4 <_LCD_DrawLine+0x62>
    else if(delta_x==0)incx=0;
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <_LCD_DrawLine+0x56>
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
 80031c6:	e005      	b.n	80031d4 <_LCD_DrawLine+0x62>
    else {incx=-1;delta_x=-delta_x;}
 80031c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	425b      	negs	r3, r3
 80031d2:	623b      	str	r3, [r7, #32]
    if(delta_y>0)incy=1;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	dd02      	ble.n	80031e0 <_LCD_DrawLine+0x6e>
 80031da:	2301      	movs	r3, #1
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	e00b      	b.n	80031f8 <_LCD_DrawLine+0x86>
    else if(delta_y==0)incy=0;
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <_LCD_DrawLine+0x7a>
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	e005      	b.n	80031f8 <_LCD_DrawLine+0x86>
    else{incy=-1;delta_y=-delta_y;}
 80031ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	425b      	negs	r3, r3
 80031f6:	61fb      	str	r3, [r7, #28]
    if( delta_x>delta_y)distance=delta_x;
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	dd02      	ble.n	8003206 <_LCD_DrawLine+0x94>
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	e001      	b.n	800320a <_LCD_DrawLine+0x98>
    else distance=delta_y;
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	61bb      	str	r3, [r7, #24]
    for(t=0;t<=distance+1;t++ )
 800320a:	2300      	movs	r3, #0
 800320c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800320e:	e02b      	b.n	8003268 <_LCD_DrawLine+0xf6>
    {
        _LCD_DrawPoint(uRow,uCol,c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	b29b      	uxth	r3, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	b291      	uxth	r1, r2
 8003218:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff ff8d 	bl	800313c <_LCD_DrawPoint>
        xerr+=delta_x ;
 8003222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	4413      	add	r3, r2
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
        yerr+=delta_y ;
 800322a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
        if(xerr>distance)
 8003232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	429a      	cmp	r2, r3
 8003238:	dd07      	ble.n	800324a <_LCD_DrawLine+0xd8>
        {
            xerr-=distance;
 800323a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
            uRow+=incx;
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
        }
        if(yerr>distance)
 800324a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	429a      	cmp	r2, r3
 8003250:	dd07      	ble.n	8003262 <_LCD_DrawLine+0xf0>
        {
            yerr-=distance;
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
            uCol+=incy;
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4413      	add	r3, r2
 8003260:	60bb      	str	r3, [r7, #8]
    for(t=0;t<=distance+1;t++ )
 8003262:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003264:	3301      	adds	r3, #1
 8003266:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003268:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	3301      	adds	r3, #1
 800326e:	429a      	cmp	r2, r3
 8003270:	ddce      	ble.n	8003210 <_LCD_DrawLine+0x9e>
        }
    }
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	3734      	adds	r7, #52	; 0x34
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}

0800327c <LCD_DrawLine>:

void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b085      	sub	sp, #20
 8003280:	af02      	add	r7, sp, #8
 8003282:	4604      	mov	r4, r0
 8003284:	4608      	mov	r0, r1
 8003286:	4611      	mov	r1, r2
 8003288:	461a      	mov	r2, r3
 800328a:	4623      	mov	r3, r4
 800328c:	80fb      	strh	r3, [r7, #6]
 800328e:	4603      	mov	r3, r0
 8003290:	80bb      	strh	r3, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	807b      	strh	r3, [r7, #2]
 8003296:	4613      	mov	r3, r2
 8003298:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <LCD_DrawLine+0x48>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2001      	movs	r0, #1
 80032a0:	4798      	blx	r3
    _LCD_DrawLine(x1,y1,x2,y2,c);
 80032a2:	883c      	ldrh	r4, [r7, #0]
 80032a4:	887a      	ldrh	r2, [r7, #2]
 80032a6:	88b9      	ldrh	r1, [r7, #4]
 80032a8:	88f8      	ldrh	r0, [r7, #6]
 80032aa:	8b3b      	ldrh	r3, [r7, #24]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	4623      	mov	r3, r4
 80032b0:	f7ff ff5f 	bl	8003172 <_LCD_DrawLine>
    lcddev.select(0);
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <LCD_DrawLine+0x48>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	2000      	movs	r0, #0
 80032ba:	4798      	blx	r3
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	20000270 	.word	0x20000270

080032c8 <_LCD_Fill>:

//===========================================================================
// Fill a rectangle with color c from (x1,y1) to (x2,y2).
//===========================================================================
static void _LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4604      	mov	r4, r0
 80032d0:	4608      	mov	r0, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	4623      	mov	r3, r4
 80032d8:	80fb      	strh	r3, [r7, #6]
 80032da:	4603      	mov	r3, r0
 80032dc:	80bb      	strh	r3, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]
 80032e2:	4613      	mov	r3, r2
 80032e4:	803b      	strh	r3, [r7, #0]
    u16 i,j;
    u16 width=ex-sx+1;
 80032e6:	887a      	ldrh	r2, [r7, #2]
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3301      	adds	r3, #1
 80032f0:	817b      	strh	r3, [r7, #10]
    u16 height=ey-sy+1;
 80032f2:	883a      	ldrh	r2, [r7, #0]
 80032f4:	88bb      	ldrh	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	813b      	strh	r3, [r7, #8]
    LCD_SetWindow(sx,sy,ex,ey);
 80032fe:	883b      	ldrh	r3, [r7, #0]
 8003300:	887a      	ldrh	r2, [r7, #2]
 8003302:	88b9      	ldrh	r1, [r7, #4]
 8003304:	88f8      	ldrh	r0, [r7, #6]
 8003306:	f7ff fe79 	bl	8002ffc <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 800330a:	f7ff fc1d 	bl	8002b48 <LCD_WriteData16_Prepare>
    for(i=0;i<height;i++)
 800330e:	2300      	movs	r3, #0
 8003310:	81fb      	strh	r3, [r7, #14]
 8003312:	e010      	b.n	8003336 <_LCD_Fill+0x6e>
    {
        for(j=0;j<width;j++)
 8003314:	2300      	movs	r3, #0
 8003316:	81bb      	strh	r3, [r7, #12]
 8003318:	e006      	b.n	8003328 <_LCD_Fill+0x60>
        LCD_WriteData16(color);
 800331a:	8c3b      	ldrh	r3, [r7, #32]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fc25 	bl	8002b6c <LCD_WriteData16>
        for(j=0;j<width;j++)
 8003322:	89bb      	ldrh	r3, [r7, #12]
 8003324:	3301      	adds	r3, #1
 8003326:	81bb      	strh	r3, [r7, #12]
 8003328:	89ba      	ldrh	r2, [r7, #12]
 800332a:	897b      	ldrh	r3, [r7, #10]
 800332c:	429a      	cmp	r2, r3
 800332e:	d3f4      	bcc.n	800331a <_LCD_Fill+0x52>
    for(i=0;i<height;i++)
 8003330:	89fb      	ldrh	r3, [r7, #14]
 8003332:	3301      	adds	r3, #1
 8003334:	81fb      	strh	r3, [r7, #14]
 8003336:	89fa      	ldrh	r2, [r7, #14]
 8003338:	893b      	ldrh	r3, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d3ea      	bcc.n	8003314 <_LCD_Fill+0x4c>
    }
    LCD_WriteData16_End();
 800333e:	f7ff fc2d 	bl	8002b9c <LCD_WriteData16_End>
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}
	...

0800334c <LCD_DrawFillRectangle>:

//===========================================================================
// Draw a filled rectangle of lines of color c from (x1,y1) to (x2,y2).
//===========================================================================
void LCD_DrawFillRectangle(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b085      	sub	sp, #20
 8003350:	af02      	add	r7, sp, #8
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4623      	mov	r3, r4
 800335c:	80fb      	strh	r3, [r7, #6]
 800335e:	4603      	mov	r3, r0
 8003360:	80bb      	strh	r3, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	807b      	strh	r3, [r7, #2]
 8003366:	4613      	mov	r3, r2
 8003368:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <LCD_DrawFillRectangle+0x48>)
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2001      	movs	r0, #1
 8003370:	4798      	blx	r3
    _LCD_Fill(x1,y1,x2,y2,c);
 8003372:	883c      	ldrh	r4, [r7, #0]
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	88b9      	ldrh	r1, [r7, #4]
 8003378:	88f8      	ldrh	r0, [r7, #6]
 800337a:	8b3b      	ldrh	r3, [r7, #24]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	4623      	mov	r3, r4
 8003380:	f7ff ffa2 	bl	80032c8 <_LCD_Fill>
    lcddev.select(0);
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <LCD_DrawFillRectangle+0x48>)
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	2000      	movs	r0, #0
 800338a:	4798      	blx	r3
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bd90      	pop	{r4, r7, pc}
 8003394:	20000270 	.word	0x20000270

08003398 <_swap>:
    _LCD_DrawLine(x2,y2,x0,y0,c);
    lcddev.select(0);
}

static void _swap(u16 *a, u16 *b)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
    u16 tmp;
    tmp = *a;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	81fb      	strh	r3, [r7, #14]
    *a = *b;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	881a      	ldrh	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	801a      	strh	r2, [r3, #0]
    *b = tmp;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	89fa      	ldrh	r2, [r7, #14]
 80033b4:	801a      	strh	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <LCD_DrawFillTriangle>:

//===========================================================================
// Draw a filled triangle of color c with vertices at (x0,y0), (x1,y1), (x2,y2).
//===========================================================================
void LCD_DrawFillTriangle(u16 x0,u16 y0, u16 x1,u16 y1, u16 x2,u16 y2, u16 c)
{
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b08f      	sub	sp, #60	; 0x3c
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	4604      	mov	r4, r0
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	461a      	mov	r2, r3
 80033d2:	4623      	mov	r3, r4
 80033d4:	80fb      	strh	r3, [r7, #6]
 80033d6:	4603      	mov	r3, r0
 80033d8:	80bb      	strh	r3, [r7, #4]
 80033da:	460b      	mov	r3, r1
 80033dc:	807b      	strh	r3, [r7, #2]
 80033de:	4613      	mov	r3, r2
 80033e0:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 80033e2:	4b92      	ldr	r3, [pc, #584]	; (800362c <LCD_DrawFillTriangle+0x268>)
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	2001      	movs	r0, #1
 80033e8:	4798      	blx	r3
    u16 a, b, y, last;
    int dx01, dy01, dx02, dy02, dx12, dy12;
    long sa = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
    long sb = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (y0 > y1)
 80033f2:	88ba      	ldrh	r2, [r7, #4]
 80033f4:	883b      	ldrh	r3, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d90b      	bls.n	8003412 <LCD_DrawFillTriangle+0x4e>
    {
    _swap(&y0,&y1);
 80033fa:	463a      	mov	r2, r7
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ffc9 	bl	8003398 <_swap>
        _swap(&x0,&x1);
 8003406:	1cba      	adds	r2, r7, #2
 8003408:	1dbb      	adds	r3, r7, #6
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ffc3 	bl	8003398 <_swap>
    }
    if (y1 > y2)
 8003412:	883a      	ldrh	r2, [r7, #0]
 8003414:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003418:	429a      	cmp	r2, r3
 800341a:	d90c      	bls.n	8003436 <LCD_DrawFillTriangle+0x72>
    {
    _swap(&y2,&y1);
 800341c:	463a      	mov	r2, r7
 800341e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ffb7 	bl	8003398 <_swap>
        _swap(&x2,&x1);
 800342a:	1cbb      	adds	r3, r7, #2
 800342c:	4619      	mov	r1, r3
 800342e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003432:	f7ff ffb1 	bl	8003398 <_swap>
    }
  if (y0 > y1)
 8003436:	88ba      	ldrh	r2, [r7, #4]
 8003438:	883b      	ldrh	r3, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d90b      	bls.n	8003456 <LCD_DrawFillTriangle+0x92>
    {
    _swap(&y0,&y1);
 800343e:	463a      	mov	r2, r7
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ffa7 	bl	8003398 <_swap>
        _swap(&x0,&x1);
 800344a:	1cba      	adds	r2, r7, #2
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ffa1 	bl	8003398 <_swap>
  }
    if(y0 == y2)
 8003456:	88ba      	ldrh	r2, [r7, #4]
 8003458:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800345c:	429a      	cmp	r2, r3
 800345e:	d130      	bne.n	80034c2 <LCD_DrawFillTriangle+0xfe>
    {
        a = b = x0;
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	813b      	strh	r3, [r7, #8]
 8003464:	893b      	ldrh	r3, [r7, #8]
 8003466:	817b      	strh	r3, [r7, #10]
        if(x1 < a)
 8003468:	887a      	ldrh	r2, [r7, #2]
 800346a:	897b      	ldrh	r3, [r7, #10]
 800346c:	429a      	cmp	r2, r3
 800346e:	d202      	bcs.n	8003476 <LCD_DrawFillTriangle+0xb2>
    {
            a = x1;
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	817b      	strh	r3, [r7, #10]
 8003474:	e005      	b.n	8003482 <LCD_DrawFillTriangle+0xbe>
    }
    else if(x1 > b)
 8003476:	887a      	ldrh	r2, [r7, #2]
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	429a      	cmp	r2, r3
 800347c:	d901      	bls.n	8003482 <LCD_DrawFillTriangle+0xbe>
    {
            b = x1;
 800347e:	887b      	ldrh	r3, [r7, #2]
 8003480:	813b      	strh	r3, [r7, #8]
    }
    if(x2 < a)
 8003482:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003486:	897b      	ldrh	r3, [r7, #10]
 8003488:	429a      	cmp	r2, r3
 800348a:	d203      	bcs.n	8003494 <LCD_DrawFillTriangle+0xd0>
    {
            a = x2;
 800348c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003490:	817b      	strh	r3, [r7, #10]
 8003492:	e007      	b.n	80034a4 <LCD_DrawFillTriangle+0xe0>
    }
        else if(x2 > b)
 8003494:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d902      	bls.n	80034a4 <LCD_DrawFillTriangle+0xe0>
    {
            b = x2;
 800349e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034a2:	813b      	strh	r3, [r7, #8]
    }
        _LCD_Fill(a,y0,b,y0,c);
 80034a4:	8978      	ldrh	r0, [r7, #10]
 80034a6:	88b9      	ldrh	r1, [r7, #4]
 80034a8:	893a      	ldrh	r2, [r7, #8]
 80034aa:	88bc      	ldrh	r4, [r7, #4]
 80034ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	4623      	mov	r3, r4
 80034b4:	f7ff ff08 	bl	80032c8 <_LCD_Fill>
    lcddev.select(0); // @henry: added in select()
 80034b8:	4b5c      	ldr	r3, [pc, #368]	; (800362c <LCD_DrawFillTriangle+0x268>)
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	2000      	movs	r0, #0
 80034be:	4798      	blx	r3
 80034c0:	e0b1      	b.n	8003626 <LCD_DrawFillTriangle+0x262>
    return;
    }
    dx01 = x1 - x0;
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	461a      	mov	r2, r3
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	623b      	str	r3, [r7, #32]
    dy01 = y1 - y0;
 80034cc:	883b      	ldrh	r3, [r7, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	88bb      	ldrh	r3, [r7, #4]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	61fb      	str	r3, [r7, #28]
    dx02 = x2 - x0;
 80034d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034da:	461a      	mov	r2, r3
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	61bb      	str	r3, [r7, #24]
    dy02 = y2 - y0;
 80034e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034e6:	461a      	mov	r2, r3
 80034e8:	88bb      	ldrh	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    dx12 = x2 - x1;
 80034ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034f2:	461a      	mov	r2, r3
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	613b      	str	r3, [r7, #16]
    dy12 = y2 - y1;
 80034fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034fe:	461a      	mov	r2, r3
 8003500:	883b      	ldrh	r3, [r7, #0]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	60fb      	str	r3, [r7, #12]

    if(y1 == y2)
 8003506:	883a      	ldrh	r2, [r7, #0]
 8003508:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800350c:	429a      	cmp	r2, r3
 800350e:	d102      	bne.n	8003516 <LCD_DrawFillTriangle+0x152>
    {
        last = y1;
 8003510:	883b      	ldrh	r3, [r7, #0]
 8003512:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003514:	e002      	b.n	800351c <LCD_DrawFillTriangle+0x158>
    }
  else
    {
        last = y1-1;
 8003516:	883b      	ldrh	r3, [r7, #0]
 8003518:	3b01      	subs	r3, #1
 800351a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    for(y=y0; y<=last; y++)
 800351c:	88bb      	ldrh	r3, [r7, #4]
 800351e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003520:	e032      	b.n	8003588 <LCD_DrawFillTriangle+0x1c4>
    {
        a = x0 + sa / dy01;
 8003522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	fb92 f3f3 	sdiv	r3, r2, r3
 800352a:	b29a      	uxth	r2, r3
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	4413      	add	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	817b      	strh	r3, [r7, #10]
        b = x0 + sb / dy02;
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	fb92 f3f3 	sdiv	r3, r2, r3
 800353c:	b29a      	uxth	r2, r3
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	4413      	add	r3, r2
 8003542:	b29b      	uxth	r3, r3
 8003544:	813b      	strh	r3, [r7, #8]
        sa += dx01;
 8003546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	4413      	add	r3, r2
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
    sb += dx02;
 800354e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
    if(a > b)
 8003556:	897a      	ldrh	r2, [r7, #10]
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	d907      	bls.n	800356e <LCD_DrawFillTriangle+0x1aa>
    {
            _swap(&a,&b);
 800355e:	f107 0208 	add.w	r2, r7, #8
 8003562:	f107 030a 	add.w	r3, r7, #10
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff15 	bl	8003398 <_swap>
        }
        _LCD_Fill(a,y,b,y,c);
 800356e:	8978      	ldrh	r0, [r7, #10]
 8003570:	893a      	ldrh	r2, [r7, #8]
 8003572:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8003574:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003576:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	4623      	mov	r3, r4
 800357e:	f7ff fea3 	bl	80032c8 <_LCD_Fill>
    for(y=y0; y<=last; y++)
 8003582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003584:	3301      	adds	r3, #1
 8003586:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003588:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800358a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800358c:	429a      	cmp	r2, r3
 800358e:	d9c8      	bls.n	8003522 <LCD_DrawFillTriangle+0x15e>
    }
    sa = dx12 * (y - y1);
 8003590:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003592:	883a      	ldrh	r2, [r7, #0]
 8003594:	1a9a      	subs	r2, r3, r2
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
    sb = dx02 * (y - y0);
 800359e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035a0:	88ba      	ldrh	r2, [r7, #4]
 80035a2:	1a9a      	subs	r2, r3, r2
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	fb02 f303 	mul.w	r3, r2, r3
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
    for(; y<=y2; y++)
 80035ac:	e032      	b.n	8003614 <LCD_DrawFillTriangle+0x250>
    {
        a = x1 + sa / dy12;
 80035ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	887b      	ldrh	r3, [r7, #2]
 80035ba:	4413      	add	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	817b      	strh	r3, [r7, #10]
        b = x0 + sb / dy02;
 80035c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	4413      	add	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	813b      	strh	r3, [r7, #8]
        sa += dx12;
 80035d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
        sb += dx02;
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	4413      	add	r3, r2
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
        if(a > b)
 80035e2:	897a      	ldrh	r2, [r7, #10]
 80035e4:	893b      	ldrh	r3, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d907      	bls.n	80035fa <LCD_DrawFillTriangle+0x236>
        {
            _swap(&a,&b);
 80035ea:	f107 0208 	add.w	r2, r7, #8
 80035ee:	f107 030a 	add.w	r3, r7, #10
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fecf 	bl	8003398 <_swap>
        }
        _LCD_Fill(a,y,b,y,c);
 80035fa:	8978      	ldrh	r0, [r7, #10]
 80035fc:	893a      	ldrh	r2, [r7, #8]
 80035fe:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8003600:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003602:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	4623      	mov	r3, r4
 800360a:	f7ff fe5d 	bl	80032c8 <_LCD_Fill>
    for(; y<=y2; y++)
 800360e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003610:	3301      	adds	r3, #1
 8003612:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003614:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800361a:	429a      	cmp	r2, r3
 800361c:	d9c7      	bls.n	80035ae <LCD_DrawFillTriangle+0x1ea>
    }
    lcddev.select(0);
 800361e:	4b03      	ldr	r3, [pc, #12]	; (800362c <LCD_DrawFillTriangle+0x268>)
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	2000      	movs	r0, #0
 8003624:	4798      	blx	r3
}
 8003626:	3734      	adds	r7, #52	; 0x34
 8003628:	46bd      	mov	sp, r7
 800362a:	bd90      	pop	{r4, r7, pc}
 800362c:	20000270 	.word	0x20000270

08003630 <_LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void _LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8003630:	b590      	push	{r4, r7, lr}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	4604      	mov	r4, r0
 8003638:	4608      	mov	r0, r1
 800363a:	4611      	mov	r1, r2
 800363c:	461a      	mov	r2, r3
 800363e:	4623      	mov	r3, r4
 8003640:	80fb      	strh	r3, [r7, #6]
 8003642:	4603      	mov	r3, r0
 8003644:	80bb      	strh	r3, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	807b      	strh	r3, [r7, #2]
 800364a:	4613      	mov	r3, r2
 800364c:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 800364e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003652:	3b20      	subs	r3, #32
 8003654:	f887 3020 	strb.w	r3, [r7, #32]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8003658:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	b29a      	uxth	r2, r3
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	4413      	add	r3, r2
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29c      	uxth	r4, r3
 800366c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003670:	b29a      	uxth	r2, r3
 8003672:	88bb      	ldrh	r3, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	3b01      	subs	r3, #1
 800367a:	b29b      	uxth	r3, r3
 800367c:	88b9      	ldrh	r1, [r7, #4]
 800367e:	88f8      	ldrh	r0, [r7, #6]
 8003680:	4622      	mov	r2, r4
 8003682:	f7ff fcbb 	bl	8002ffc <LCD_SetWindow>
    if (!mode) {
 8003686:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d147      	bne.n	800371e <_LCD_DrawChar+0xee>
        LCD_WriteData16_Prepare();
 800368e:	f7ff fa5b 	bl	8002b48 <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 8003692:	2300      	movs	r3, #0
 8003694:	73bb      	strb	r3, [r7, #14]
 8003696:	e03a      	b.n	800370e <_LCD_DrawChar+0xde>
            if (size==12)
 8003698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800369c:	2b0c      	cmp	r3, #12
 800369e:	d10c      	bne.n	80036ba <_LCD_DrawChar+0x8a>
                temp=asc2_1206[num][pos];
 80036a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036a4:	7bb9      	ldrb	r1, [r7, #14]
 80036a6:	4844      	ldr	r0, [pc, #272]	; (80037b8 <_LCD_DrawChar+0x188>)
 80036a8:	4613      	mov	r3, r2
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4403      	add	r3, r0
 80036b2:	440b      	add	r3, r1
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e008      	b.n	80036cc <_LCD_DrawChar+0x9c>
            else
                temp=asc2_1608[num][pos];
 80036ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036be:	7bbb      	ldrb	r3, [r7, #14]
 80036c0:	493e      	ldr	r1, [pc, #248]	; (80037bc <_LCD_DrawChar+0x18c>)
 80036c2:	0112      	lsls	r2, r2, #4
 80036c4:	440a      	add	r2, r1
 80036c6:	4413      	add	r3, r2
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++) {
 80036cc:	2300      	movs	r3, #0
 80036ce:	737b      	strb	r3, [r7, #13]
 80036d0:	e013      	b.n	80036fa <_LCD_DrawChar+0xca>
                if (temp&0x01)
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d004      	beq.n	80036e6 <_LCD_DrawChar+0xb6>
                    LCD_WriteData16(fc);
 80036dc:	887b      	ldrh	r3, [r7, #2]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fa44 	bl	8002b6c <LCD_WriteData16>
 80036e4:	e003      	b.n	80036ee <_LCD_DrawChar+0xbe>
                else
                    LCD_WriteData16(bc);
 80036e6:	883b      	ldrh	r3, [r7, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff fa3f 	bl	8002b6c <LCD_WriteData16>
                temp>>=1;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++) {
 80036f4:	7b7b      	ldrb	r3, [r7, #13]
 80036f6:	3301      	adds	r3, #1
 80036f8:	737b      	strb	r3, [r7, #13]
 80036fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	7b7a      	ldrb	r2, [r7, #13]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3e4      	bcc.n	80036d2 <_LCD_DrawChar+0xa2>
        for(pos=0;pos<size;pos++) {
 8003708:	7bbb      	ldrb	r3, [r7, #14]
 800370a:	3301      	adds	r3, #1
 800370c:	73bb      	strb	r3, [r7, #14]
 800370e:	7bba      	ldrb	r2, [r7, #14]
 8003710:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003714:	429a      	cmp	r2, r3
 8003716:	d3bf      	bcc.n	8003698 <_LCD_DrawChar+0x68>

            }
        }
        LCD_WriteData16_End();
 8003718:	f7ff fa40 	bl	8002b9c <LCD_WriteData16_End>
                    _LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 800371c:	e047      	b.n	80037ae <_LCD_DrawChar+0x17e>
        for(pos=0;pos<size;pos++)
 800371e:	2300      	movs	r3, #0
 8003720:	73bb      	strb	r3, [r7, #14]
 8003722:	e03f      	b.n	80037a4 <_LCD_DrawChar+0x174>
            if (size==12)
 8003724:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d10c      	bne.n	8003746 <_LCD_DrawChar+0x116>
                temp=asc2_1206[num][pos];
 800372c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003730:	7bb9      	ldrb	r1, [r7, #14]
 8003732:	4821      	ldr	r0, [pc, #132]	; (80037b8 <_LCD_DrawChar+0x188>)
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4403      	add	r3, r0
 800373e:	440b      	add	r3, r1
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	73fb      	strb	r3, [r7, #15]
 8003744:	e008      	b.n	8003758 <_LCD_DrawChar+0x128>
                temp=asc2_1608[num][pos];
 8003746:	f897 2020 	ldrb.w	r2, [r7, #32]
 800374a:	7bbb      	ldrb	r3, [r7, #14]
 800374c:	491b      	ldr	r1, [pc, #108]	; (80037bc <_LCD_DrawChar+0x18c>)
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	440a      	add	r2, r1
 8003752:	4413      	add	r3, r2
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++)
 8003758:	2300      	movs	r3, #0
 800375a:	737b      	strb	r3, [r7, #13]
 800375c:	e018      	b.n	8003790 <_LCD_DrawChar+0x160>
                if(temp&0x01)
 800375e:	7bfb      	ldrb	r3, [r7, #15]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00d      	beq.n	8003784 <_LCD_DrawChar+0x154>
                    _LCD_DrawPoint(x+t,y+pos,fc);
 8003768:	7b7b      	ldrb	r3, [r7, #13]
 800376a:	b29a      	uxth	r2, r3
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	4413      	add	r3, r2
 8003770:	b298      	uxth	r0, r3
 8003772:	7bbb      	ldrb	r3, [r7, #14]
 8003774:	b29a      	uxth	r2, r3
 8003776:	88bb      	ldrh	r3, [r7, #4]
 8003778:	4413      	add	r3, r2
 800377a:	b29b      	uxth	r3, r3
 800377c:	887a      	ldrh	r2, [r7, #2]
 800377e:	4619      	mov	r1, r3
 8003780:	f7ff fcdc 	bl	800313c <_LCD_DrawPoint>
                temp>>=1;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	085b      	lsrs	r3, r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++)
 800378a:	7b7b      	ldrb	r3, [r7, #13]
 800378c:	3301      	adds	r3, #1
 800378e:	737b      	strb	r3, [r7, #13]
 8003790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	7b7a      	ldrb	r2, [r7, #13]
 800379a:	429a      	cmp	r2, r3
 800379c:	d3df      	bcc.n	800375e <_LCD_DrawChar+0x12e>
        for(pos=0;pos<size;pos++)
 800379e:	7bbb      	ldrb	r3, [r7, #14]
 80037a0:	3301      	adds	r3, #1
 80037a2:	73bb      	strb	r3, [r7, #14]
 80037a4:	7bba      	ldrb	r2, [r7, #14]
 80037a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d3ba      	bcc.n	8003724 <_LCD_DrawChar+0xf4>
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	0800fad4 	.word	0x0800fad4
 80037bc:	0800ff48 	.word	0x0800ff48

080037c0 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af04      	add	r7, sp, #16
 80037c6:	4604      	mov	r4, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	461a      	mov	r2, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	80fb      	strh	r3, [r7, #6]
 80037d2:	4603      	mov	r3, r0
 80037d4:	80bb      	strh	r3, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	807b      	strh	r3, [r7, #2]
 80037da:	4613      	mov	r3, r2
 80037dc:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <LCD_DrawString+0x94>)
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2001      	movs	r0, #1
 80037e4:	4798      	blx	r3
    while((*p<='~')&&(*p>=' '))
 80037e6:	e023      	b.n	8003830 <LCD_DrawString+0x70>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <LCD_DrawString+0x94>)
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	88fa      	ldrh	r2, [r7, #6]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d22b      	bcs.n	800384a <LCD_DrawString+0x8a>
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <LCD_DrawString+0x94>)
 80037f4:	885b      	ldrh	r3, [r3, #2]
 80037f6:	88ba      	ldrh	r2, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d226      	bcs.n	800384a <LCD_DrawString+0x8a>
        return;
        _LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	883d      	ldrh	r5, [r7, #0]
 8003802:	887c      	ldrh	r4, [r7, #2]
 8003804:	88b9      	ldrh	r1, [r7, #4]
 8003806:	88f8      	ldrh	r0, [r7, #6]
 8003808:	f897 2020 	ldrb.w	r2, [r7, #32]
 800380c:	9202      	str	r2, [sp, #8]
 800380e:	7f3a      	ldrb	r2, [r7, #28]
 8003810:	9201      	str	r2, [sp, #4]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	462b      	mov	r3, r5
 8003816:	4622      	mov	r2, r4
 8003818:	f7ff ff0a 	bl	8003630 <_LCD_DrawChar>
        x+=size/2;
 800381c:	7f3b      	ldrb	r3, [r7, #28]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	b2db      	uxtb	r3, r3
 8003822:	b29a      	uxth	r2, r3
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	4413      	add	r3, r2
 8003828:	80fb      	strh	r3, [r7, #6]
        p++;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	3301      	adds	r3, #1
 800382e:	61bb      	str	r3, [r7, #24]
    while((*p<='~')&&(*p>=' '))
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b7e      	cmp	r3, #126	; 0x7e
 8003836:	d803      	bhi.n	8003840 <LCD_DrawString+0x80>
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b1f      	cmp	r3, #31
 800383e:	d8d3      	bhi.n	80037e8 <LCD_DrawString+0x28>
    }
    lcddev.select(0);
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <LCD_DrawString+0x94>)
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	2000      	movs	r0, #0
 8003846:	4798      	blx	r3
 8003848:	e000      	b.n	800384c <LCD_DrawString+0x8c>
        return;
 800384a:	bf00      	nop
}
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bdb0      	pop	{r4, r5, r7, pc}
 8003852:	bf00      	nop
 8003854:	20000270 	.word	0x20000270

08003858 <LCD_print_labels>:
void LCD_small_delay() {
    nano_wait(10000);
    return;
}

void LCD_print_labels() {
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af04      	add	r7, sp, #16
	LCD_DrawString(5, 10, WHITE, BLACK, "Aerial Ace Status Window", 16, 0);
 800385e:	2300      	movs	r3, #0
 8003860:	9302      	str	r3, [sp, #8]
 8003862:	2310      	movs	r3, #16
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <LCD_print_labels+0x80>)
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2300      	movs	r3, #0
 800386c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003870:	210a      	movs	r1, #10
 8003872:	2005      	movs	r0, #5
 8003874:	f7ff ffa4 	bl	80037c0 <LCD_DrawString>
	LCD_DrawFillRectangle(2, 35, 300, 110, LGRAYBLUE);
 8003878:	f24a 6351 	movw	r3, #42577	; 0xa651
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	236e      	movs	r3, #110	; 0x6e
 8003880:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003884:	2123      	movs	r1, #35	; 0x23
 8003886:	2002      	movs	r0, #2
 8003888:	f7ff fd60 	bl	800334c <LCD_DrawFillRectangle>
	LCD_DrawString(5, 45, WHITE, LGRAYBLUE, "Current Mode", 16, 0);
 800388c:	2300      	movs	r3, #0
 800388e:	9302      	str	r3, [sp, #8]
 8003890:	2310      	movs	r3, #16
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	4b11      	ldr	r3, [pc, #68]	; (80038dc <LCD_print_labels+0x84>)
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	f24a 6351 	movw	r3, #42577	; 0xa651
 800389c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038a0:	212d      	movs	r1, #45	; 0x2d
 80038a2:	2005      	movs	r0, #5
 80038a4:	f7ff ff8c 	bl	80037c0 <LCD_DrawString>
	LCD_DrawLine(2, 30, 300, 30, WHITE);
 80038a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	231e      	movs	r3, #30
 80038b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038b4:	211e      	movs	r1, #30
 80038b6:	2002      	movs	r0, #2
 80038b8:	f7ff fce0 	bl	800327c <LCD_DrawLine>
	LCD_DrawLine(2, 160, 300, 160, WHITE);
 80038bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	23a0      	movs	r3, #160	; 0xa0
 80038c4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038c8:	21a0      	movs	r1, #160	; 0xa0
 80038ca:	2002      	movs	r0, #2
 80038cc:	f7ff fcd6 	bl	800327c <LCD_DrawLine>
}
 80038d0:	bf00      	nop
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	0800f8e0 	.word	0x0800f8e0
 80038dc:	0800f8fc 	.word	0x0800f8fc

080038e0 <LCD_print_title>:

void LCD_print_title(DispState currDisp) {
 80038e0:	b084      	sub	sp, #16
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af04      	add	r7, sp, #16
 80038e8:	f107 0c08 	add.w	ip, r7, #8
 80038ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_DrawString(50, 70, WHITE, LGRAYBLUE, currDisp.title, 16, 0);
 80038f0:	2300      	movs	r3, #0
 80038f2:	9302      	str	r3, [sp, #8]
 80038f4:	2310      	movs	r3, #16
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	f24a 6351 	movw	r3, #42577	; 0xa651
 8003902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003906:	2146      	movs	r1, #70	; 0x46
 8003908:	2032      	movs	r0, #50	; 0x32
 800390a:	f7ff ff59 	bl	80037c0 <LCD_DrawString>
	return;
 800390e:	bf00      	nop
}
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003916:	b004      	add	sp, #16
 8003918:	4770      	bx	lr

0800391a <LCD_print_command>:

void LCD_print_command(DispState currDisp) {
 800391a:	b084      	sub	sp, #16
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af04      	add	r7, sp, #16
 8003922:	f107 0c10 	add.w	ip, r7, #16
 8003926:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	
	LCD_DrawString(0, 120,  WHITE, BLACK, currDisp.command_ln1, 12, 0);
 800392a:	2300      	movs	r3, #0
 800392c:	9302      	str	r3, [sp, #8]
 800392e:	230c      	movs	r3, #12
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	f107 03ba 	add.w	r3, r7, #186	; 0xba
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	2300      	movs	r3, #0
 800393a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800393e:	2178      	movs	r1, #120	; 0x78
 8003940:	2000      	movs	r0, #0
 8003942:	f7ff ff3d 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(0, 130,  WHITE, BLACK, currDisp.command_ln2, 12, 0);
 8003946:	2300      	movs	r3, #0
 8003948:	9302      	str	r3, [sp, #8]
 800394a:	230c      	movs	r3, #12
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	f507 73c1 	add.w	r3, r7, #386	; 0x182
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800395a:	2182      	movs	r1, #130	; 0x82
 800395c:	2000      	movs	r0, #0
 800395e:	f7ff ff2f 	bl	80037c0 <LCD_DrawString>
	for(int i = 0; i < 1000; i++);
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	e002      	b.n	800396e <LCD_print_command+0x54>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3301      	adds	r3, #1
 800396c:	607b      	str	r3, [r7, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003974:	dbf8      	blt.n	8003968 <LCD_print_command+0x4e>
	return;
 8003976:	bf00      	nop
}
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003980:	b004      	add	sp, #16
 8003982:	4770      	bx	lr

08003984 <LCD_print_stats>:

void LCD_print_stats(DispState currDisp) {
 8003984:	b084      	sub	sp, #16
 8003986:	b580      	push	{r7, lr}
 8003988:	b0a4      	sub	sp, #144	; 0x90
 800398a:	af04      	add	r7, sp, #16
 800398c:	f107 0c88 	add.w	ip, r7, #136	; 0x88
 8003990:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char yaw[30];
	char roll[30];
	char pitch[30];
	char throttle[30];

	sprintf(yaw, "%.3f", currDisp.yaw_num);
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fdd5 	bl	8000548 <__aeabi_f2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80039a6:	4973      	ldr	r1, [pc, #460]	; (8003b74 <LCD_print_stats+0x1f0>)
 80039a8:	f007 fe82 	bl	800b6b0 <siprintf>
	sprintf(roll, "%.3f", currDisp.roll_num);
 80039ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fdc9 	bl	8000548 <__aeabi_f2d>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80039be:	496d      	ldr	r1, [pc, #436]	; (8003b74 <LCD_print_stats+0x1f0>)
 80039c0:	f007 fe76 	bl	800b6b0 <siprintf>
	sprintf(pitch, "%.3f", currDisp.pitch_num);
 80039c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fdbd 	bl	8000548 <__aeabi_f2d>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	f107 0020 	add.w	r0, r7, #32
 80039d6:	4967      	ldr	r1, [pc, #412]	; (8003b74 <LCD_print_stats+0x1f0>)
 80039d8:	f007 fe6a 	bl	800b6b0 <siprintf>
	sprintf(throttle, "%.3f", currDisp.throttle_num);
 80039dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fc fdb1 	bl	8000548 <__aeabi_f2d>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4638      	mov	r0, r7
 80039ec:	4961      	ldr	r1, [pc, #388]	; (8003b74 <LCD_print_stats+0x1f0>)
 80039ee:	f007 fe5f 	bl	800b6b0 <siprintf>

	LCD_DrawLine(90, 165, 90, 330, WHITE);
 80039f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80039fc:	225a      	movs	r2, #90	; 0x5a
 80039fe:	21a5      	movs	r1, #165	; 0xa5
 8003a00:	205a      	movs	r0, #90	; 0x5a
 8003a02:	f7ff fc3b 	bl	800327c <LCD_DrawLine>
	LCD_DrawLine(160, 165, 160, 330, WHITE);
 8003a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8003a10:	22a0      	movs	r2, #160	; 0xa0
 8003a12:	21a5      	movs	r1, #165	; 0xa5
 8003a14:	20a0      	movs	r0, #160	; 0xa0
 8003a16:	f7ff fc31 	bl	800327c <LCD_DrawLine>

	LCD_DrawString(10, 175, WHITE, BLACK, "PITCH", 16, 0); //90
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9302      	str	r3, [sp, #8]
 8003a1e:	2310      	movs	r3, #16
 8003a20:	9301      	str	r3, [sp, #4]
 8003a22:	4b55      	ldr	r3, [pc, #340]	; (8003b78 <LCD_print_stats+0x1f4>)
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2300      	movs	r3, #0
 8003a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a2c:	21af      	movs	r1, #175	; 0xaf
 8003a2e:	200a      	movs	r0, #10
 8003a30:	f7ff fec6 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(10, 210, WHITE, BLACK, "ROLL", 16, 0); //150
 8003a34:	2300      	movs	r3, #0
 8003a36:	9302      	str	r3, [sp, #8]
 8003a38:	2310      	movs	r3, #16
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	4b4f      	ldr	r3, [pc, #316]	; (8003b7c <LCD_print_stats+0x1f8>)
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	2300      	movs	r3, #0
 8003a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a46:	21d2      	movs	r1, #210	; 0xd2
 8003a48:	200a      	movs	r0, #10
 8003a4a:	f7ff feb9 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(10, 245, WHITE, BLACK, "THROTTLE", 16, 0); //200
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9302      	str	r3, [sp, #8]
 8003a52:	2310      	movs	r3, #16
 8003a54:	9301      	str	r3, [sp, #4]
 8003a56:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <LCD_print_stats+0x1fc>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a60:	21f5      	movs	r1, #245	; 0xf5
 8003a62:	200a      	movs	r0, #10
 8003a64:	f7ff feac 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(10, 280, WHITE, BLACK, "YAW", 16, 0); //250
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9302      	str	r3, [sp, #8]
 8003a6c:	2310      	movs	r3, #16
 8003a6e:	9301      	str	r3, [sp, #4]
 8003a70:	4b44      	ldr	r3, [pc, #272]	; (8003b84 <LCD_print_stats+0x200>)
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2300      	movs	r3, #0
 8003a76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a7a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003a7e:	200a      	movs	r0, #10
 8003a80:	f7ff fe9e 	bl	80037c0 <LCD_DrawString>

	LCD_DrawString(100, 175, WHITE, BLACK, pitch , 16, 0);
 8003a84:	2300      	movs	r3, #0
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	2310      	movs	r3, #16
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	f107 0320 	add.w	r3, r7, #32
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2300      	movs	r3, #0
 8003a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a98:	21af      	movs	r1, #175	; 0xaf
 8003a9a:	2064      	movs	r0, #100	; 0x64
 8003a9c:	f7ff fe90 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(100, 210, WHITE, BLACK, roll, 16, 0);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9302      	str	r3, [sp, #8]
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ab4:	21d2      	movs	r1, #210	; 0xd2
 8003ab6:	2064      	movs	r0, #100	; 0x64
 8003ab8:	f7ff fe82 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(100, 245, WHITE, BLACK, throttle, 16, 0);
 8003abc:	2300      	movs	r3, #0
 8003abe:	9302      	str	r3, [sp, #8]
 8003ac0:	2310      	movs	r3, #16
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ace:	21f5      	movs	r1, #245	; 0xf5
 8003ad0:	2064      	movs	r0, #100	; 0x64
 8003ad2:	f7ff fe75 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(100, 280, WHITE, BLACK, yaw , 16, 0);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9302      	str	r3, [sp, #8]
 8003ada:	2310      	movs	r3, #16
 8003adc:	9301      	str	r3, [sp, #4]
 8003ade:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aea:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003aee:	2064      	movs	r0, #100	; 0x64
 8003af0:	f7ff fe66 	bl	80037c0 <LCD_DrawString>

	LCD_DrawString(170, 175, WHITE, BLACK, currDisp.pitch_mode, 16, 0);
 8003af4:	2300      	movs	r3, #0
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	2310      	movs	r3, #16
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	f107 03e3 	add.w	r3, r7, #227	; 0xe3
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b08:	21af      	movs	r1, #175	; 0xaf
 8003b0a:	20aa      	movs	r0, #170	; 0xaa
 8003b0c:	f7ff fe58 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(170, 210, WHITE, BLACK, currDisp.roll_mode, 16, 0);
 8003b10:	2300      	movs	r3, #0
 8003b12:	9302      	str	r3, [sp, #8]
 8003b14:	2310      	movs	r3, #16
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	f107 03a7 	add.w	r3, r7, #167	; 0xa7
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b24:	21d2      	movs	r1, #210	; 0xd2
 8003b26:	20aa      	movs	r0, #170	; 0xaa
 8003b28:	f7ff fe4a 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(170, 245, WHITE, BLACK, currDisp.throttle_mode, 16, 0);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	9302      	str	r3, [sp, #8]
 8003b30:	2310      	movs	r3, #16
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	f107 03c5 	add.w	r3, r7, #197	; 0xc5
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b40:	21f5      	movs	r1, #245	; 0xf5
 8003b42:	20aa      	movs	r0, #170	; 0xaa
 8003b44:	f7ff fe3c 	bl	80037c0 <LCD_DrawString>
	LCD_DrawString(170, 280, WHITE, BLACK, currDisp.yaw_mode, 16, 0);
 8003b48:	2300      	movs	r3, #0
 8003b4a:	9302      	str	r3, [sp, #8]
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	f107 0389 	add.w	r3, r7, #137	; 0x89
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	2300      	movs	r3, #0
 8003b58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b5c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003b60:	20aa      	movs	r0, #170	; 0xaa
 8003b62:	f7ff fe2d 	bl	80037c0 <LCD_DrawString>
	return;
 8003b66:	bf00      	nop
}
 8003b68:	3780      	adds	r7, #128	; 0x80
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b70:	b004      	add	sp, #16
 8003b72:	4770      	bx	lr
 8003b74:	0800f90c 	.word	0x0800f90c
 8003b78:	0800f914 	.word	0x0800f914
 8003b7c:	0800f91c 	.word	0x0800f91c
 8003b80:	0800f924 	.word	0x0800f924
 8003b84:	0800f930 	.word	0x0800f930

08003b88 <LCD_print_progress>:

void LCD_print_progress(int time_secs, int curTim) {
 8003b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8a:	b08b      	sub	sp, #44	; 0x2c
 8003b8c:	af04      	add	r7, sp, #16
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
	char strs[3];
	sprintf(strs, "%d", curTim);
 8003b92:	f107 0314 	add.w	r3, r7, #20
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	4933      	ldr	r1, [pc, #204]	; (8003c68 <LCD_print_progress+0xe0>)
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f007 fd88 	bl	800b6b0 <siprintf>

	if (curTim < time_secs) {
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	da45      	bge.n	8003c34 <LCD_print_progress+0xac>
		LCD_DrawFillTriangle(sectors[curTim][0], sectors[curTim][1], sectors[curTim][2], sectors[curTim][3], sectors[curTim][4], sectors[curTim][5], BLACK);
 8003ba8:	4930      	ldr	r1, [pc, #192]	; (8003c6c <LCD_print_progress+0xe4>)
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4613      	mov	r3, r2
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	440b      	add	r3, r1
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	b298      	uxth	r0, r3
 8003bba:	492c      	ldr	r1, [pc, #176]	; (8003c6c <LCD_print_progress+0xe4>)
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3304      	adds	r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b29c      	uxth	r4, r3
 8003bce:	4927      	ldr	r1, [pc, #156]	; (8003c6c <LCD_print_progress+0xe4>)
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	3308      	adds	r3, #8
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b29d      	uxth	r5, r3
 8003be2:	4922      	ldr	r1, [pc, #136]	; (8003c6c <LCD_print_progress+0xe4>)
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	440b      	add	r3, r1
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	b29e      	uxth	r6, r3
 8003bf6:	491d      	ldr	r1, [pc, #116]	; (8003c6c <LCD_print_progress+0xe4>)
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	4413      	add	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	440b      	add	r3, r1
 8003c04:	3310      	adds	r3, #16
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b299      	uxth	r1, r3
 8003c0a:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <LCD_print_progress+0xe4>)
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4613      	mov	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4413      	add	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3314      	adds	r3, #20
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2200      	movs	r2, #0
 8003c24:	9202      	str	r2, [sp, #8]
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	9100      	str	r1, [sp, #0]
 8003c2a:	4633      	mov	r3, r6
 8003c2c:	462a      	mov	r2, r5
 8003c2e:	4621      	mov	r1, r4
 8003c30:	f7ff fbc8 	bl	80033c4 <LCD_DrawFillTriangle>
	}
	LCD_DrawFillRectangle(CAL_CIRCLE_X - 8, CAL_CIRCLE_Y - 8, CAL_CIRCLE_X + 8, CAL_CIRCLE_Y + 8, BLACK);
 8003c34:	2300      	movs	r3, #0
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	23f8      	movs	r3, #248	; 0xf8
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	21e8      	movs	r1, #232	; 0xe8
 8003c3e:	2070      	movs	r0, #112	; 0x70
 8003c40:	f7ff fb84 	bl	800334c <LCD_DrawFillRectangle>
	LCD_DrawString(CAL_CIRCLE_X - 8, CAL_CIRCLE_Y - 8, WHITE, BLACK, strs, 16, 1);
 8003c44:	2301      	movs	r3, #1
 8003c46:	9302      	str	r3, [sp, #8]
 8003c48:	2310      	movs	r3, #16
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2300      	movs	r3, #0
 8003c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c58:	21e8      	movs	r1, #232	; 0xe8
 8003c5a:	2070      	movs	r0, #112	; 0x70
 8003c5c:	f7ff fdb0 	bl	80037c0 <LCD_DrawString>
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c68:	0800f934 	.word	0x0800f934
 8003c6c:	200008d0 	.word	0x200008d0

08003c70 <LCD_print_circle>:

void LCD_print_circle(int time_secs, int CX, int CY, int radius, u16 color) {
 8003c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c72:	b08d      	sub	sp, #52	; 0x34
 8003c74:	af04      	add	r7, sp, #16
 8003c76:	6178      	str	r0, [r7, #20]
 8003c78:	6139      	str	r1, [r7, #16]
 8003c7a:	60fa      	str	r2, [r7, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
	LCD_generate_sectors(time_secs, CX, CY, radius);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	6939      	ldr	r1, [r7, #16]
 8003c84:	6978      	ldr	r0, [r7, #20]
 8003c86:	f000 f857 	bl	8003d38 <LCD_generate_sectors>
	for(int i = 0; i < time_secs; i++) {
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e048      	b.n	8003d22 <LCD_print_circle+0xb2>
		LCD_DrawFillTriangle(sectors[i][0], sectors[i][1], sectors[i][2], sectors[i][3], sectors[i][4], sectors[i][5], color);
 8003c90:	4928      	ldr	r1, [pc, #160]	; (8003d34 <LCD_print_circle+0xc4>)
 8003c92:	69fa      	ldr	r2, [r7, #28]
 8003c94:	4613      	mov	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	4413      	add	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	440b      	add	r3, r1
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	b298      	uxth	r0, r3
 8003ca2:	4924      	ldr	r1, [pc, #144]	; (8003d34 <LCD_print_circle+0xc4>)
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	440b      	add	r3, r1
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	b29c      	uxth	r4, r3
 8003cb6:	491f      	ldr	r1, [pc, #124]	; (8003d34 <LCD_print_circle+0xc4>)
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4413      	add	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	440b      	add	r3, r1
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	b29d      	uxth	r5, r3
 8003cca:	491a      	ldr	r1, [pc, #104]	; (8003d34 <LCD_print_circle+0xc4>)
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	330c      	adds	r3, #12
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b29e      	uxth	r6, r3
 8003cde:	4915      	ldr	r1, [pc, #84]	; (8003d34 <LCD_print_circle+0xc4>)
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	4413      	add	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	440b      	add	r3, r1
 8003cec:	3310      	adds	r3, #16
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b299      	uxth	r1, r3
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <LCD_print_circle+0xc4>)
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3314      	adds	r3, #20
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003d0c:	9202      	str	r2, [sp, #8]
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	9100      	str	r1, [sp, #0]
 8003d12:	4633      	mov	r3, r6
 8003d14:	462a      	mov	r2, r5
 8003d16:	4621      	mov	r1, r4
 8003d18:	f7ff fb54 	bl	80033c4 <LCD_DrawFillTriangle>
	for(int i = 0; i < time_secs; i++) {
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	dbb2      	blt.n	8003c90 <LCD_print_circle+0x20>
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	3724      	adds	r7, #36	; 0x24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d34:	200008d0 	.word	0x200008d0

08003d38 <LCD_generate_sectors>:

void LCD_generate_sectors(int time_secs, int CX, int CY, int radius) {
 8003d38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d3c:	b0a0      	sub	sp, #128	; 0x80
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	603b      	str	r3, [r7, #0]
	int X2;
	int Y0;
	int Y1;
	int Y2;

	int sidesAB = radius;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
	double Cy;
	double Cx;
	int CyR;
	int CxR;

	int startX = CX;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	66bb      	str	r3, [r7, #104]	; 0x68
	int startY = CY - radius;
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	667b      	str	r3, [r7, #100]	; 0x64

	double central_angleD = 360 / time_secs;
 8003d58:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fbde 	bl	8000524 <__aeabi_i2d>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double other_angleD = (180 - central_angleD) / 2;
 8003d70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	4963      	ldr	r1, [pc, #396]	; (8003f08 <LCD_generate_sectors+0x1d0>)
 8003d7a:	f7fc fa85 	bl	8000288 <__aeabi_dsub>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d8e:	f7fc fd5d 	bl	800084c <__aeabi_ddiv>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	double central_angleR = central_angleD * M_PI / 180;
 8003d9a:	a359      	add	r3, pc, #356	; (adr r3, 8003f00 <LCD_generate_sectors+0x1c8>)
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003da4:	f7fc fc28 	bl	80005f8 <__aeabi_dmul>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4610      	mov	r0, r2
 8003dae:	4619      	mov	r1, r3
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	4b54      	ldr	r3, [pc, #336]	; (8003f08 <LCD_generate_sectors+0x1d0>)
 8003db6:	f7fc fd49 	bl	800084c <__aeabi_ddiv>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double other_angleR = other_angleD * M_PI / 180;
 8003dc2:	a34f      	add	r3, pc, #316	; (adr r3, 8003f00 <LCD_generate_sectors+0x1c8>)
 8003dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003dcc:	f7fc fc14 	bl	80005f8 <__aeabi_dmul>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <LCD_generate_sectors+0x1d0>)
 8003dde:	f7fc fd35 	bl	800084c <__aeabi_ddiv>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//For progress indicator
	for(int i = 0; i < time_secs; i++) {
 8003dea:	2300      	movs	r3, #0
 8003dec:	677b      	str	r3, [r7, #116]	; 0x74
 8003dee:	e078      	b.n	8003ee2 <LCD_generate_sectors+0x1aa>
		if (i == 0) {
 8003df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d12b      	bne.n	8003e4e <LCD_generate_sectors+0x116>
			a[i] = (90 - other_angleD);
 8003df6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	4943      	ldr	r1, [pc, #268]	; (8003f0c <LCD_generate_sectors+0x1d4>)
 8003e00:	f7fc fa42 	bl	8000288 <__aeabi_dsub>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4841      	ldr	r0, [pc, #260]	; (8003f10 <LCD_generate_sectors+0x1d8>)
 8003e0a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003e0c:	00c9      	lsls	r1, r1, #3
 8003e0e:	4401      	add	r1, r0
 8003e10:	e9c1 2300 	strd	r2, r3, [r1]
			b[i] = a[i] * M_PI / 180;
 8003e14:	4a3e      	ldr	r2, [pc, #248]	; (8003f10 <LCD_generate_sectors+0x1d8>)
 8003e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e20:	a337      	add	r3, pc, #220	; (adr r3, 8003f00 <LCD_generate_sectors+0x1c8>)
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f7fc fbe7 	bl	80005f8 <__aeabi_dmul>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4610      	mov	r0, r2
 8003e30:	4619      	mov	r1, r3
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <LCD_generate_sectors+0x1d0>)
 8003e38:	f7fc fd08 	bl	800084c <__aeabi_ddiv>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4834      	ldr	r0, [pc, #208]	; (8003f14 <LCD_generate_sectors+0x1dc>)
 8003e42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003e44:	00c9      	lsls	r1, r1, #3
 8003e46:	4401      	add	r1, r0
 8003e48:	e9c1 2300 	strd	r2, r3, [r1]
 8003e4c:	e046      	b.n	8003edc <LCD_generate_sectors+0x1a4>
		} else {
			a[i] = (360 - ((180 - a[i - 1]) + 2 * other_angleD));
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	3b01      	subs	r3, #1
 8003e52:	4a2f      	ldr	r2, [pc, #188]	; (8003f10 <LCD_generate_sectors+0x1d8>)
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	4929      	ldr	r1, [pc, #164]	; (8003f08 <LCD_generate_sectors+0x1d0>)
 8003e62:	f7fc fa11 	bl	8000288 <__aeabi_dsub>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4614      	mov	r4, r2
 8003e6c:	461d      	mov	r5, r3
 8003e6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	f7fc fa09 	bl	800028c <__adddf3>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7fc fa03 	bl	800028c <__adddf3>
 8003e86:	4602      	mov	r2, r0
 8003e88:	460b      	mov	r3, r1
 8003e8a:	f04f 0000 	mov.w	r0, #0
 8003e8e:	4922      	ldr	r1, [pc, #136]	; (8003f18 <LCD_generate_sectors+0x1e0>)
 8003e90:	f7fc f9fa 	bl	8000288 <__aeabi_dsub>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	481d      	ldr	r0, [pc, #116]	; (8003f10 <LCD_generate_sectors+0x1d8>)
 8003e9a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003e9c:	00c9      	lsls	r1, r1, #3
 8003e9e:	4401      	add	r1, r0
 8003ea0:	e9c1 2300 	strd	r2, r3, [r1]
			b[i] = a[i] * M_PI / 180;
 8003ea4:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <LCD_generate_sectors+0x1d8>)
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eb0:	a313      	add	r3, pc, #76	; (adr r3, 8003f00 <LCD_generate_sectors+0x1c8>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f7fc fb9f 	bl	80005f8 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <LCD_generate_sectors+0x1d0>)
 8003ec8:	f7fc fcc0 	bl	800084c <__aeabi_ddiv>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4810      	ldr	r0, [pc, #64]	; (8003f14 <LCD_generate_sectors+0x1dc>)
 8003ed2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003ed4:	00c9      	lsls	r1, r1, #3
 8003ed6:	4401      	add	r1, r0
 8003ed8:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < time_secs; i++) {
 8003edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ede:	3301      	adds	r3, #1
 8003ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8003ee2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	db82      	blt.n	8003df0 <LCD_generate_sectors+0xb8>
		}
	}

	X0 = startX;
 8003eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eec:	67fb      	str	r3, [r7, #124]	; 0x7c
	Y0 = startY;
 8003eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef0:	67bb      	str	r3, [r7, #120]	; 0x78
	X1 = CX;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
	Y1 = CY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	63bb      	str	r3, [r7, #56]	; 0x38

	for(int i = 0; i < time_secs; i++) {
 8003efa:	2300      	movs	r3, #0
 8003efc:	673b      	str	r3, [r7, #112]	; 0x70
 8003efe:	e0c9      	b.n	8004094 <LCD_generate_sectors+0x35c>
 8003f00:	54442d18 	.word	0x54442d18
 8003f04:	400921fb 	.word	0x400921fb
 8003f08:	40668000 	.word	0x40668000
 8003f0c:	40568000 	.word	0x40568000
 8003f10:	20000290 	.word	0x20000290
 8003f14:	200005b0 	.word	0x200005b0
 8003f18:	40768000 	.word	0x40768000
		sideC = sqrt(2 * (sidesAB * sidesAB) - 2 * (sidesAB * sidesAB) * cos(central_angleR));
 8003f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1e:	fb03 f303 	mul.w	r3, r3, r3
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc fafd 	bl	8000524 <__aeabi_i2d>
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	460d      	mov	r5, r1
 8003f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f30:	fb03 f303 	mul.w	r3, r3, r3
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fc faf4 	bl	8000524 <__aeabi_i2d>
 8003f3c:	4680      	mov	r8, r0
 8003f3e:	4689      	mov	r9, r1
 8003f40:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003f44:	f009 fe34 	bl	800dbb0 <cos>
 8003f48:	ec53 2b10 	vmov	r2, r3, d0
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	4649      	mov	r1, r9
 8003f50:	f7fc fb52 	bl	80005f8 <__aeabi_dmul>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4620      	mov	r0, r4
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7fc f994 	bl	8000288 <__aeabi_dsub>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	ec43 2b17 	vmov	d7, r2, r3
 8003f68:	eeb0 0a47 	vmov.f32	s0, s14
 8003f6c:	eef0 0a67 	vmov.f32	s1, s15
 8003f70:	f009 ff48 	bl	800de04 <sqrt>
 8003f74:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

		Cy = sin(b[i]) * sideC;
 8003f78:	4a56      	ldr	r2, [pc, #344]	; (80040d4 <LCD_generate_sectors+0x39c>)
 8003f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	ed93 7b00 	vldr	d7, [r3]
 8003f84:	eeb0 0a47 	vmov.f32	s0, s14
 8003f88:	eef0 0a67 	vmov.f32	s1, s15
 8003f8c:	f009 feac 	bl	800dce8 <sin>
 8003f90:	ec53 2b10 	vmov	r2, r3, d0
 8003f94:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f98:	f7fc fb2e 	bl	80005f8 <__aeabi_dmul>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		Cx = cos(b[i]) * sideC;
 8003fa4:	4a4b      	ldr	r2, [pc, #300]	; (80040d4 <LCD_generate_sectors+0x39c>)
 8003fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	ed93 7b00 	vldr	d7, [r3]
 8003fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8003fb4:	eef0 0a67 	vmov.f32	s1, s15
 8003fb8:	f009 fdfa 	bl	800dbb0 <cos>
 8003fbc:	ec53 2b10 	vmov	r2, r3, d0
 8003fc0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003fc4:	f7fc fb18 	bl	80005f8 <__aeabi_dmul>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	e9c7 2308 	strd	r2, r3, [r7, #32]

		CyR = round(Cy);
 8003fd0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003fd4:	f009 fe40 	bl	800dc58 <round>
 8003fd8:	ec53 2b10 	vmov	r2, r3, d0
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f7fc fdba 	bl	8000b58 <__aeabi_d2iz>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	61fb      	str	r3, [r7, #28]
		CxR = round(Cx);
 8003fe8:	ed97 0b08 	vldr	d0, [r7, #32]
 8003fec:	f009 fe34 	bl	800dc58 <round>
 8003ff0:	ec53 2b10 	vmov	r2, r3, d0
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f7fc fdae 	bl	8000b58 <__aeabi_d2iz>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	61bb      	str	r3, [r7, #24]

		X2 = X0 + CxR;
 8004000:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	4413      	add	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
		Y2 = Y0 + CyR;
 8004008:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	613b      	str	r3, [r7, #16]

		sectors[i][0] = X0;
 8004010:	4931      	ldr	r1, [pc, #196]	; (80040d8 <LCD_generate_sectors+0x3a0>)
 8004012:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004014:	4613      	mov	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004020:	601a      	str	r2, [r3, #0]
		sectors[i][1] = Y0;
 8004022:	492d      	ldr	r1, [pc, #180]	; (80040d8 <LCD_generate_sectors+0x3a0>)
 8004024:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004026:	4613      	mov	r3, r2
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	4413      	add	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	440b      	add	r3, r1
 8004030:	3304      	adds	r3, #4
 8004032:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004034:	601a      	str	r2, [r3, #0]
		sectors[i][2] = X1;
 8004036:	4928      	ldr	r1, [pc, #160]	; (80040d8 <LCD_generate_sectors+0x3a0>)
 8004038:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	3308      	adds	r3, #8
 8004046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004048:	601a      	str	r2, [r3, #0]
		sectors[i][3] = Y1;
 800404a:	4923      	ldr	r1, [pc, #140]	; (80040d8 <LCD_generate_sectors+0x3a0>)
 800404c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	440b      	add	r3, r1
 8004058:	330c      	adds	r3, #12
 800405a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800405c:	601a      	str	r2, [r3, #0]
		sectors[i][4] = X2;
 800405e:	491e      	ldr	r1, [pc, #120]	; (80040d8 <LCD_generate_sectors+0x3a0>)
 8004060:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	3310      	adds	r3, #16
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	601a      	str	r2, [r3, #0]
		sectors[i][5] = Y2;
 8004072:	4919      	ldr	r1, [pc, #100]	; (80040d8 <LCD_generate_sectors+0x3a0>)
 8004074:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	440b      	add	r3, r1
 8004080:	3314      	adds	r3, #20
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	601a      	str	r2, [r3, #0]
		X0 = X2;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	67fb      	str	r3, [r7, #124]	; 0x7c
		Y0 = Y2;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < time_secs; i++) {
 800408e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004090:	3301      	adds	r3, #1
 8004092:	673b      	str	r3, [r7, #112]	; 0x70
 8004094:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	429a      	cmp	r2, r3
 800409a:	f6ff af3f 	blt.w	8003f1c <LCD_generate_sectors+0x1e4>
	}

	sectors[time_secs - 1][5] = startX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1e5a      	subs	r2, r3, #1
 80040a2:	490d      	ldr	r1, [pc, #52]	; (80040d8 <LCD_generate_sectors+0x3a0>)
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	440b      	add	r3, r1
 80040ae:	3314      	adds	r3, #20
 80040b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040b2:	601a      	str	r2, [r3, #0]
	sectors[time_secs - 1][5] = startY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e5a      	subs	r2, r3, #1
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <LCD_generate_sectors+0x3a0>)
 80040ba:	4613      	mov	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	4413      	add	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	440b      	add	r3, r1
 80040c4:	3314      	adds	r3, #20
 80040c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040c8:	601a      	str	r2, [r3, #0]

	return;
 80040ca:	bf00      	nop
}
 80040cc:	3780      	adds	r7, #128	; 0x80
 80040ce:	46bd      	mov	sp, r7
 80040d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040d4:	200005b0 	.word	0x200005b0
 80040d8:	200008d0 	.word	0x200008d0
 80040dc:	00000000 	.word	0x00000000

080040e0 <LCD_update>:

void LCD_update(float roll, float pitch, float throttle, float yaw, int state, int total_time_sec, int cnt_sec) {
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80040e6:	af8e      	add	r7, sp, #568	; 0x238
 80040e8:	ed87 0a07 	vstr	s0, [r7, #28]
 80040ec:	edc7 0a06 	vstr	s1, [r7, #24]
 80040f0:	ed87 1a05 	vstr	s2, [r7, #20]
 80040f4:	edc7 1a04 	vstr	s3, [r7, #16]
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
	LCD_print_labels(); // @henry: can be done in init?
 80040fe:	f7ff fbab 	bl	8003858 <LCD_print_labels>

	currDisp.state = state;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4bb2      	ldr	r3, [pc, #712]	; (80043d0 <LCD_update+0x2f0>)
 8004108:	701a      	strb	r2, [r3, #0]
	if (currDisp.state == INIT) {
 800410a:	4bb1      	ldr	r3, [pc, #708]	; (80043d0 <LCD_update+0x2f0>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <LCD_update+0x52>
		strncpy(currDisp.title, "INITIALISING", 29);
 8004112:	221d      	movs	r2, #29
 8004114:	49af      	ldr	r1, [pc, #700]	; (80043d4 <LCD_update+0x2f4>)
 8004116:	48b0      	ldr	r0, [pc, #704]	; (80043d8 <LCD_update+0x2f8>)
 8004118:	f007 faea 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln1, " .            ...loading...            ", 199);
 800411c:	22c7      	movs	r2, #199	; 0xc7
 800411e:	49af      	ldr	r1, [pc, #700]	; (80043dc <LCD_update+0x2fc>)
 8004120:	48af      	ldr	r0, [pc, #700]	; (80043e0 <LCD_update+0x300>)
 8004122:	f007 fae5 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln2, "                                       ", 199);
 8004126:	22c7      	movs	r2, #199	; 0xc7
 8004128:	49ae      	ldr	r1, [pc, #696]	; (80043e4 <LCD_update+0x304>)
 800412a:	48af      	ldr	r0, [pc, #700]	; (80043e8 <LCD_update+0x308>)
 800412c:	f007 fae0 	bl	800b6f0 <strncpy>
 8004130:	e04e      	b.n	80041d0 <LCD_update+0xf0>
	} else if(currDisp.state == CAL_UNFLEXED) {
 8004132:	4ba7      	ldr	r3, [pc, #668]	; (80043d0 <LCD_update+0x2f0>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d10f      	bne.n	800415a <LCD_update+0x7a>
		strncpy(currDisp.title, "CALIBRATION", 29);
 800413a:	221d      	movs	r2, #29
 800413c:	49ab      	ldr	r1, [pc, #684]	; (80043ec <LCD_update+0x30c>)
 800413e:	48a6      	ldr	r0, [pc, #664]	; (80043d8 <LCD_update+0x2f8>)
 8004140:	f007 fad6 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln1, "Please unflex your fingers until finger", 199);
 8004144:	22c7      	movs	r2, #199	; 0xc7
 8004146:	49aa      	ldr	r1, [pc, #680]	; (80043f0 <LCD_update+0x310>)
 8004148:	48a5      	ldr	r0, [pc, #660]	; (80043e0 <LCD_update+0x300>)
 800414a:	f007 fad1 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln2, "angles are 0 degrees.                  ", 199);
 800414e:	22c7      	movs	r2, #199	; 0xc7
 8004150:	49a8      	ldr	r1, [pc, #672]	; (80043f4 <LCD_update+0x314>)
 8004152:	48a5      	ldr	r0, [pc, #660]	; (80043e8 <LCD_update+0x308>)
 8004154:	f007 facc 	bl	800b6f0 <strncpy>
 8004158:	e03a      	b.n	80041d0 <LCD_update+0xf0>
	} else if(currDisp.state == CAL_FLEXED) {
 800415a:	4b9d      	ldr	r3, [pc, #628]	; (80043d0 <LCD_update+0x2f0>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d10f      	bne.n	8004182 <LCD_update+0xa2>
		strncpy(currDisp.title, "CALIBRATION", 29);
 8004162:	221d      	movs	r2, #29
 8004164:	49a1      	ldr	r1, [pc, #644]	; (80043ec <LCD_update+0x30c>)
 8004166:	489c      	ldr	r0, [pc, #624]	; (80043d8 <LCD_update+0x2f8>)
 8004168:	f007 fac2 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln1, "Please flex your fingers until finger  ", 199);
 800416c:	22c7      	movs	r2, #199	; 0xc7
 800416e:	49a2      	ldr	r1, [pc, #648]	; (80043f8 <LCD_update+0x318>)
 8004170:	489b      	ldr	r0, [pc, #620]	; (80043e0 <LCD_update+0x300>)
 8004172:	f007 fabd 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln2, "angles are 90 degrees.                 ", 199);
 8004176:	22c7      	movs	r2, #199	; 0xc7
 8004178:	49a0      	ldr	r1, [pc, #640]	; (80043fc <LCD_update+0x31c>)
 800417a:	489b      	ldr	r0, [pc, #620]	; (80043e8 <LCD_update+0x308>)
 800417c:	f007 fab8 	bl	800b6f0 <strncpy>
 8004180:	e026      	b.n	80041d0 <LCD_update+0xf0>
	} else if(currDisp.state == MODE_STANDARD) {
 8004182:	4b93      	ldr	r3, [pc, #588]	; (80043d0 <LCD_update+0x2f0>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d10f      	bne.n	80041aa <LCD_update+0xca>
		strncpy(currDisp.title, "STANDARD", 29);
 800418a:	221d      	movs	r2, #29
 800418c:	499c      	ldr	r1, [pc, #624]	; (8004400 <LCD_update+0x320>)
 800418e:	4892      	ldr	r0, [pc, #584]	; (80043d8 <LCD_update+0x2f8>)
 8004190:	f007 faae 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln1, "Toggle switch for advanced mode!       ", 199);
 8004194:	22c7      	movs	r2, #199	; 0xc7
 8004196:	499b      	ldr	r1, [pc, #620]	; (8004404 <LCD_update+0x324>)
 8004198:	4891      	ldr	r0, [pc, #580]	; (80043e0 <LCD_update+0x300>)
 800419a:	f007 faa9 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln2, "                                       ", 199);
 800419e:	22c7      	movs	r2, #199	; 0xc7
 80041a0:	4990      	ldr	r1, [pc, #576]	; (80043e4 <LCD_update+0x304>)
 80041a2:	4891      	ldr	r0, [pc, #580]	; (80043e8 <LCD_update+0x308>)
 80041a4:	f007 faa4 	bl	800b6f0 <strncpy>
 80041a8:	e012      	b.n	80041d0 <LCD_update+0xf0>
	} else if(currDisp.state == MODE_ADVANCED) {
 80041aa:	4b89      	ldr	r3, [pc, #548]	; (80043d0 <LCD_update+0x2f0>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b04      	cmp	r3, #4
 80041b0:	d10e      	bne.n	80041d0 <LCD_update+0xf0>
		strncpy(currDisp.title, "ADVANCED", 29);
 80041b2:	221d      	movs	r2, #29
 80041b4:	4994      	ldr	r1, [pc, #592]	; (8004408 <LCD_update+0x328>)
 80041b6:	4888      	ldr	r0, [pc, #544]	; (80043d8 <LCD_update+0x2f8>)
 80041b8:	f007 fa9a 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln1, "Toggle switch for standard mode!       ", 199);
 80041bc:	22c7      	movs	r2, #199	; 0xc7
 80041be:	4993      	ldr	r1, [pc, #588]	; (800440c <LCD_update+0x32c>)
 80041c0:	4887      	ldr	r0, [pc, #540]	; (80043e0 <LCD_update+0x300>)
 80041c2:	f007 fa95 	bl	800b6f0 <strncpy>
		strncpy(currDisp.command_ln2, "                                       ", 199);
 80041c6:	22c7      	movs	r2, #199	; 0xc7
 80041c8:	4986      	ldr	r1, [pc, #536]	; (80043e4 <LCD_update+0x304>)
 80041ca:	4887      	ldr	r0, [pc, #540]	; (80043e8 <LCD_update+0x308>)
 80041cc:	f007 fa90 	bl	800b6f0 <strncpy>
	}

	LCD_print_title(currDisp);
 80041d0:	4c7f      	ldr	r4, [pc, #508]	; (80043d0 <LCD_update+0x2f0>)
 80041d2:	4668      	mov	r0, sp
 80041d4:	f104 0310 	add.w	r3, r4, #16
 80041d8:	f44f 720d 	mov.w	r2, #564	; 0x234
 80041dc:	4619      	mov	r1, r3
 80041de:	f006 fde7 	bl	800adb0 <memcpy>
 80041e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041e6:	f7ff fb7b 	bl	80038e0 <LCD_print_title>

	if (currDisp.state == CAL_FLEXED || currDisp.state == CAL_UNFLEXED) {
 80041ea:	4b79      	ldr	r3, [pc, #484]	; (80043d0 <LCD_update+0x2f0>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d003      	beq.n	80041fa <LCD_update+0x11a>
 80041f2:	4b77      	ldr	r3, [pc, #476]	; (80043d0 <LCD_update+0x2f0>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d11f      	bne.n	800423a <LCD_update+0x15a>
		if (cnt_sec == CAL_TIME_SEC) {
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b0a      	cmp	r3, #10
 80041fe:	d117      	bne.n	8004230 <LCD_update+0x150>
			LCD_print_circle(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS, BRED);
 8004200:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	233c      	movs	r3, #60	; 0x3c
 8004208:	22f0      	movs	r2, #240	; 0xf0
 800420a:	2178      	movs	r1, #120	; 0x78
 800420c:	200a      	movs	r0, #10
 800420e:	f7ff fd2f 	bl	8003c70 <LCD_print_circle>
			LCD_print_circle(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS_INNER, BLACK);
 8004212:	4b7f      	ldr	r3, [pc, #508]	; (8004410 <LCD_update+0x330>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2200      	movs	r2, #0
 8004218:	9200      	str	r2, [sp, #0]
 800421a:	22f0      	movs	r2, #240	; 0xf0
 800421c:	2178      	movs	r1, #120	; 0x78
 800421e:	200a      	movs	r0, #10
 8004220:	f7ff fd26 	bl	8003c70 <LCD_print_circle>
			LCD_generate_sectors(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS);
 8004224:	233c      	movs	r3, #60	; 0x3c
 8004226:	22f0      	movs	r2, #240	; 0xf0
 8004228:	2178      	movs	r1, #120	; 0x78
 800422a:	200a      	movs	r0, #10
 800422c:	f7ff fd84 	bl	8003d38 <LCD_generate_sectors>
		}
		// LCD_print_progress(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS, cnt_sec);
		LCD_print_progress(CAL_TIME_SEC, cnt_sec);
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	200a      	movs	r0, #10
 8004234:	f7ff fca8 	bl	8003b88 <LCD_print_progress>
 8004238:	e10b      	b.n	8004452 <LCD_update+0x372>
		// LCD_DrawFillRectangle(CAL_CIRCLE_X - 10, CAL_CIRCLE_Y - 10, CAL_CIRCLE_X + 10 , CAL_CIRCLE_Y + 10, BLACK);
	  // LCD_DrawFillRectangle(CAL_CIRCLE_X - 5, CAL_CIRCLE_Y - CAL_CIRCLE_RADIUS_INNER, CAL_CIRCLE_X + 2 , CAL_CIRCLE_Y, BLACK);
	} else if (currDisp.state == MODE_ADVANCED) {
 800423a:	4b65      	ldr	r3, [pc, #404]	; (80043d0 <LCD_update+0x2f0>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b04      	cmp	r3, #4
 8004240:	f040 80fa 	bne.w	8004438 <LCD_update+0x358>
		currDisp.pitch_num = pitch;
 8004244:	4a62      	ldr	r2, [pc, #392]	; (80043d0 <LCD_update+0x2f0>)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		currDisp.yaw_num = yaw;
 800424c:	4a60      	ldr	r2, [pc, #384]	; (80043d0 <LCD_update+0x2f0>)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	67d3      	str	r3, [r2, #124]	; 0x7c
		currDisp.roll_num = roll;
 8004252:	4a5f      	ldr	r2, [pc, #380]	; (80043d0 <LCD_update+0x2f0>)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		currDisp.throttle_num = throttle;
 800425a:	4a5d      	ldr	r2, [pc, #372]	; (80043d0 <LCD_update+0x2f0>)
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		if (roll >= 0.5 + GIMBAL_IDLE_THRESH) {
 8004262:	69f8      	ldr	r0, [r7, #28]
 8004264:	f7fc f970 	bl	8000548 <__aeabi_f2d>
 8004268:	a353      	add	r3, pc, #332	; (adr r3, 80043b8 <LCD_update+0x2d8>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fc fc49 	bl	8000b04 <__aeabi_dcmpge>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <LCD_update+0x1a4>
			strncpy(currDisp.roll_mode, "RIGHT", 29);
 8004278:	221d      	movs	r2, #29
 800427a:	4966      	ldr	r1, [pc, #408]	; (8004414 <LCD_update+0x334>)
 800427c:	4866      	ldr	r0, [pc, #408]	; (8004418 <LCD_update+0x338>)
 800427e:	f007 fa37 	bl	800b6f0 <strncpy>
 8004282:	e015      	b.n	80042b0 <LCD_update+0x1d0>
		} else if (roll <= 0.5 - GIMBAL_IDLE_THRESH) {
 8004284:	69f8      	ldr	r0, [r7, #28]
 8004286:	f7fc f95f 	bl	8000548 <__aeabi_f2d>
 800428a:	a34d      	add	r3, pc, #308	; (adr r3, 80043c0 <LCD_update+0x2e0>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fc fc2e 	bl	8000af0 <__aeabi_dcmple>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <LCD_update+0x1c6>
			strncpy(currDisp.roll_mode, "LEFT ", 29);
 800429a:	221d      	movs	r2, #29
 800429c:	495f      	ldr	r1, [pc, #380]	; (800441c <LCD_update+0x33c>)
 800429e:	485e      	ldr	r0, [pc, #376]	; (8004418 <LCD_update+0x338>)
 80042a0:	f007 fa26 	bl	800b6f0 <strncpy>
 80042a4:	e004      	b.n	80042b0 <LCD_update+0x1d0>
		} else {
			strncpy(currDisp.roll_mode, "-----", 29);
 80042a6:	221d      	movs	r2, #29
 80042a8:	495d      	ldr	r1, [pc, #372]	; (8004420 <LCD_update+0x340>)
 80042aa:	485b      	ldr	r0, [pc, #364]	; (8004418 <LCD_update+0x338>)
 80042ac:	f007 fa20 	bl	800b6f0 <strncpy>
		}

		if (pitch >= 0.5 + GIMBAL_IDLE_THRESH) {
 80042b0:	69b8      	ldr	r0, [r7, #24]
 80042b2:	f7fc f949 	bl	8000548 <__aeabi_f2d>
 80042b6:	a340      	add	r3, pc, #256	; (adr r3, 80043b8 <LCD_update+0x2d8>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f7fc fc22 	bl	8000b04 <__aeabi_dcmpge>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <LCD_update+0x1f2>
			strncpy(currDisp.pitch_mode, "UP   ", 29);
 80042c6:	221d      	movs	r2, #29
 80042c8:	4956      	ldr	r1, [pc, #344]	; (8004424 <LCD_update+0x344>)
 80042ca:	4857      	ldr	r0, [pc, #348]	; (8004428 <LCD_update+0x348>)
 80042cc:	f007 fa10 	bl	800b6f0 <strncpy>
 80042d0:	e015      	b.n	80042fe <LCD_update+0x21e>
		} else if (pitch <= 0.5 - GIMBAL_IDLE_THRESH) {
 80042d2:	69b8      	ldr	r0, [r7, #24]
 80042d4:	f7fc f938 	bl	8000548 <__aeabi_f2d>
 80042d8:	a339      	add	r3, pc, #228	; (adr r3, 80043c0 <LCD_update+0x2e0>)
 80042da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042de:	f7fc fc07 	bl	8000af0 <__aeabi_dcmple>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <LCD_update+0x214>
			strncpy(currDisp.pitch_mode, "DOWN ", 29);
 80042e8:	221d      	movs	r2, #29
 80042ea:	4950      	ldr	r1, [pc, #320]	; (800442c <LCD_update+0x34c>)
 80042ec:	484e      	ldr	r0, [pc, #312]	; (8004428 <LCD_update+0x348>)
 80042ee:	f007 f9ff 	bl	800b6f0 <strncpy>
 80042f2:	e004      	b.n	80042fe <LCD_update+0x21e>
		} else {
			strncpy(currDisp.pitch_mode, "-----", 29);	
 80042f4:	221d      	movs	r2, #29
 80042f6:	494a      	ldr	r1, [pc, #296]	; (8004420 <LCD_update+0x340>)
 80042f8:	484b      	ldr	r0, [pc, #300]	; (8004428 <LCD_update+0x348>)
 80042fa:	f007 f9f9 	bl	800b6f0 <strncpy>
		}

		if (yaw >= 0.5 + GIMBAL_IDLE_THRESH) {
 80042fe:	6938      	ldr	r0, [r7, #16]
 8004300:	f7fc f922 	bl	8000548 <__aeabi_f2d>
 8004304:	a32c      	add	r3, pc, #176	; (adr r3, 80043b8 <LCD_update+0x2d8>)
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f7fc fbfb 	bl	8000b04 <__aeabi_dcmpge>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <LCD_update+0x240>
			strncpy(currDisp.yaw_mode, "RIGHT", 29);
 8004314:	221d      	movs	r2, #29
 8004316:	493f      	ldr	r1, [pc, #252]	; (8004414 <LCD_update+0x334>)
 8004318:	4845      	ldr	r0, [pc, #276]	; (8004430 <LCD_update+0x350>)
 800431a:	f007 f9e9 	bl	800b6f0 <strncpy>
 800431e:	e015      	b.n	800434c <LCD_update+0x26c>
		} else if (yaw <= 0.5 - GIMBAL_IDLE_THRESH) {
 8004320:	6938      	ldr	r0, [r7, #16]
 8004322:	f7fc f911 	bl	8000548 <__aeabi_f2d>
 8004326:	a326      	add	r3, pc, #152	; (adr r3, 80043c0 <LCD_update+0x2e0>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fc fbe0 	bl	8000af0 <__aeabi_dcmple>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <LCD_update+0x262>
			strncpy(currDisp.yaw_mode, "LEFT ", 29);
 8004336:	221d      	movs	r2, #29
 8004338:	4938      	ldr	r1, [pc, #224]	; (800441c <LCD_update+0x33c>)
 800433a:	483d      	ldr	r0, [pc, #244]	; (8004430 <LCD_update+0x350>)
 800433c:	f007 f9d8 	bl	800b6f0 <strncpy>
 8004340:	e004      	b.n	800434c <LCD_update+0x26c>
		} else {
			strncpy(currDisp.yaw_mode, "-----", 29);
 8004342:	221d      	movs	r2, #29
 8004344:	4936      	ldr	r1, [pc, #216]	; (8004420 <LCD_update+0x340>)
 8004346:	483a      	ldr	r0, [pc, #232]	; (8004430 <LCD_update+0x350>)
 8004348:	f007 f9d2 	bl	800b6f0 <strncpy>
		}

		if (throttle >= 0.5) {
 800434c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004350:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435c:	db05      	blt.n	800436a <LCD_update+0x28a>
			strncpy(currDisp.throttle_mode, "UP   ", 29);
 800435e:	221d      	movs	r2, #29
 8004360:	4930      	ldr	r1, [pc, #192]	; (8004424 <LCD_update+0x344>)
 8004362:	4834      	ldr	r0, [pc, #208]	; (8004434 <LCD_update+0x354>)
 8004364:	f007 f9c4 	bl	800b6f0 <strncpy>
 8004368:	e015      	b.n	8004396 <LCD_update+0x2b6>
		} else if (throttle < 0 + GIMBAL_IDLE_THRESH) {
 800436a:	6978      	ldr	r0, [r7, #20]
 800436c:	f7fc f8ec 	bl	8000548 <__aeabi_f2d>
 8004370:	a315      	add	r3, pc, #84	; (adr r3, 80043c8 <LCD_update+0x2e8>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f7fc fbb1 	bl	8000adc <__aeabi_dcmplt>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <LCD_update+0x2ac>
			strncpy(currDisp.throttle_mode, "-----", 29);	
 8004380:	221d      	movs	r2, #29
 8004382:	4927      	ldr	r1, [pc, #156]	; (8004420 <LCD_update+0x340>)
 8004384:	482b      	ldr	r0, [pc, #172]	; (8004434 <LCD_update+0x354>)
 8004386:	f007 f9b3 	bl	800b6f0 <strncpy>
 800438a:	e004      	b.n	8004396 <LCD_update+0x2b6>
		} else {
			strncpy(currDisp.throttle_mode, "DOWN ", 29);	
 800438c:	221d      	movs	r2, #29
 800438e:	4927      	ldr	r1, [pc, #156]	; (800442c <LCD_update+0x34c>)
 8004390:	4828      	ldr	r0, [pc, #160]	; (8004434 <LCD_update+0x354>)
 8004392:	f007 f9ad 	bl	800b6f0 <strncpy>
		}

		LCD_print_stats(currDisp);
 8004396:	4c0e      	ldr	r4, [pc, #56]	; (80043d0 <LCD_update+0x2f0>)
 8004398:	4668      	mov	r0, sp
 800439a:	f104 0310 	add.w	r3, r4, #16
 800439e:	f44f 720d 	mov.w	r2, #564	; 0x234
 80043a2:	4619      	mov	r1, r3
 80043a4:	f006 fd04 	bl	800adb0 <memcpy>
 80043a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80043ac:	f7ff faea 	bl	8003984 <LCD_print_stats>
 80043b0:	e04f      	b.n	8004452 <LCD_update+0x372>
 80043b2:	bf00      	nop
 80043b4:	f3af 8000 	nop.w
 80043b8:	9999999a 	.word	0x9999999a
 80043bc:	3fe19999 	.word	0x3fe19999
 80043c0:	cccccccd 	.word	0xcccccccd
 80043c4:	3fdccccc 	.word	0x3fdccccc
 80043c8:	9999999a 	.word	0x9999999a
 80043cc:	3fa99999 	.word	0x3fa99999
 80043d0:	20000d68 	.word	0x20000d68
 80043d4:	0800f938 	.word	0x0800f938
 80043d8:	20000df4 	.word	0x20000df4
 80043dc:	0800f948 	.word	0x0800f948
 80043e0:	20000e12 	.word	0x20000e12
 80043e4:	0800f970 	.word	0x0800f970
 80043e8:	20000eda 	.word	0x20000eda
 80043ec:	0800f998 	.word	0x0800f998
 80043f0:	0800f9a4 	.word	0x0800f9a4
 80043f4:	0800f9cc 	.word	0x0800f9cc
 80043f8:	0800f9f4 	.word	0x0800f9f4
 80043fc:	0800fa1c 	.word	0x0800fa1c
 8004400:	0800fa44 	.word	0x0800fa44
 8004404:	0800fa50 	.word	0x0800fa50
 8004408:	0800fa78 	.word	0x0800fa78
 800440c:	0800fa84 	.word	0x0800fa84
 8004410:	20000008 	.word	0x20000008
 8004414:	0800faac 	.word	0x0800faac
 8004418:	20000d87 	.word	0x20000d87
 800441c:	0800fab4 	.word	0x0800fab4
 8004420:	0800fabc 	.word	0x0800fabc
 8004424:	0800fac4 	.word	0x0800fac4
 8004428:	20000dc3 	.word	0x20000dc3
 800442c:	0800facc 	.word	0x0800facc
 8004430:	20000d69 	.word	0x20000d69
 8004434:	20000da5 	.word	0x20000da5
	} else if (currDisp.state == MODE_STANDARD) {
 8004438:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <LCD_update+0x394>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b03      	cmp	r3, #3
 800443e:	d108      	bne.n	8004452 <LCD_update+0x372>
		LCD_DrawFillRectangle(10, 165, 230, 330, BLACK);
 8004440:	2300      	movs	r3, #0
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8004448:	22e6      	movs	r2, #230	; 0xe6
 800444a:	21a5      	movs	r1, #165	; 0xa5
 800444c:	200a      	movs	r0, #10
 800444e:	f7fe ff7d 	bl	800334c <LCD_DrawFillRectangle>
	}

	LCD_print_command(currDisp);
 8004452:	4c08      	ldr	r4, [pc, #32]	; (8004474 <LCD_update+0x394>)
 8004454:	4668      	mov	r0, sp
 8004456:	f104 0310 	add.w	r3, r4, #16
 800445a:	f44f 720d 	mov.w	r2, #564	; 0x234
 800445e:	4619      	mov	r1, r3
 8004460:	f006 fca6 	bl	800adb0 <memcpy>
 8004464:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004468:	f7ff fa57 	bl	800391a <LCD_print_command>
}
 800446c:	bf00      	nop
 800446e:	3724      	adds	r7, #36	; 0x24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd90      	pop	{r4, r7, pc}
 8004474:	20000d68 	.word	0x20000d68

08004478 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004478:	b590      	push	{r4, r7, lr}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	461a      	mov	r2, r3
 8004484:	460b      	mov	r3, r1
 8004486:	72fb      	strb	r3, [r7, #11]
 8004488:	4613      	mov	r3, r2
 800448a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685c      	ldr	r4, [r3, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68d8      	ldr	r0, [r3, #12]
 8004494:	893b      	ldrh	r3, [r7, #8]
 8004496:	7af9      	ldrb	r1, [r7, #11]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	47a0      	blx	r4
 800449c:	6178      	str	r0, [r7, #20]

  return ret;
 800449e:	697b      	ldr	r3, [r7, #20]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd90      	pop	{r4, r7, pc}

080044a8 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	461a      	mov	r2, r3
 80044b4:	460b      	mov	r3, r1
 80044b6:	72fb      	strb	r3, [r7, #11]
 80044b8:	4613      	mov	r3, r2
 80044ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681c      	ldr	r4, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68d8      	ldr	r0, [r3, #12]
 80044c4:	893b      	ldrh	r3, [r7, #8]
 80044c6:	7af9      	ldrb	r1, [r7, #11]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	47a0      	blx	r4
 80044cc:	6178      	str	r0, [r7, #20]

  return ret;
 80044ce:	697b      	ldr	r3, [r7, #20]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd90      	pop	{r4, r7, pc}

080044d8 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 80044e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004504 <lsm9ds1_from_fs4g_to_mg+0x2c>
 80044f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80044f6:	eeb0 0a67 	vmov.f32	s0, s15
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	3df9db23 	.word	0x3df9db23

08004508 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800451e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004534 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 8004522:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004526:	eeb0 0a67 	vmov.f32	s0, s15
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	428c0000 	.word	0x428c0000

08004538 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 8004542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800454e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004564 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8004552:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004556:	eeb0 0a67 	vmov.f32	s0, s15
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	3f147ae1 	.word	0x3f147ae1

08004568 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8004574:	f107 0208 	add.w	r2, r7, #8
 8004578:	2301      	movs	r3, #1
 800457a:	2110      	movs	r1, #16
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff ff7b 	bl	8004478 <lsm9ds1_read_reg>
 8004582:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	b2da      	uxtb	r2, r3
 8004592:	7a3b      	ldrb	r3, [r7, #8]
 8004594:	f362 03c4 	bfi	r3, r2, #3, #2
 8004598:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800459a:	f107 0208 	add.w	r2, r7, #8
 800459e:	2301      	movs	r3, #1
 80045a0:	2110      	movs	r1, #16
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff ff80 	bl	80044a8 <lsm9ds1_write_reg>
 80045a8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 80045aa:	68fb      	ldr	r3, [r7, #12]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80045c0:	f107 0210 	add.w	r2, r7, #16
 80045c4:	2301      	movs	r3, #1
 80045c6:	2110      	movs	r1, #16
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff ff55 	bl	8004478 <lsm9ds1_read_reg>
 80045ce:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10f      	bne.n	80045f6 <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	7c3b      	ldrb	r3, [r7, #16]
 80045e0:	f362 1347 	bfi	r3, r2, #5, #3
 80045e4:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80045e6:	f107 0210 	add.w	r2, r7, #16
 80045ea:	2301      	movs	r3, #1
 80045ec:	2110      	movs	r1, #16
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff5a 	bl	80044a8 <lsm9ds1_write_reg>
 80045f4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d107      	bne.n	800460c <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80045fc:	f107 020c 	add.w	r2, r7, #12
 8004600:	2301      	movs	r3, #1
 8004602:	2120      	movs	r1, #32
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff37 	bl	8004478 <lsm9ds1_read_reg>
 800460a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d110      	bne.n	8004634 <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 8004612:	78fb      	ldrb	r3, [r7, #3]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	b2da      	uxtb	r2, r3
 800461c:	7b3b      	ldrb	r3, [r7, #12]
 800461e:	f362 1347 	bfi	r3, r2, #5, #3
 8004622:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8004624:	f107 020c 	add.w	r2, r7, #12
 8004628:	2301      	movs	r3, #1
 800462a:	2120      	movs	r1, #32
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff3b 	bl	80044a8 <lsm9ds1_write_reg>
 8004632:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800463a:	f107 0208 	add.w	r2, r7, #8
 800463e:	2301      	movs	r3, #1
 8004640:	2112      	movs	r1, #18
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff ff18 	bl	8004478 <lsm9ds1_read_reg>
 8004648:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d111      	bne.n	8004674 <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	09db      	lsrs	r3, r3, #7
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	7a3b      	ldrb	r3, [r7, #8]
 800465e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004662:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004664:	f107 0208 	add.w	r2, r7, #8
 8004668:	2301      	movs	r3, #1
 800466a:	2112      	movs	r1, #18
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ff1b 	bl	80044a8 <lsm9ds1_write_reg>
 8004672:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8004674:	697b      	ldr	r3, [r7, #20]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800468a:	f107 0208 	add.w	r2, r7, #8
 800468e:	2301      	movs	r3, #1
 8004690:	2120      	movs	r1, #32
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff fef0 	bl	8004478 <lsm9ds1_read_reg>
 8004698:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10f      	bne.n	80046c0 <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	7a3b      	ldrb	r3, [r7, #8]
 80046aa:	f362 03c4 	bfi	r3, r2, #3, #2
 80046ae:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80046b0:	f107 0208 	add.w	r2, r7, #8
 80046b4:	2301      	movs	r3, #1
 80046b6:	2120      	movs	r1, #32
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fef5 	bl	80044a8 <lsm9ds1_write_reg>
 80046be:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 80046c0:	68fb      	ldr	r3, [r7, #12]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b088      	sub	sp, #32
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80046d8:	f107 0218 	add.w	r2, r7, #24
 80046dc:	2301      	movs	r3, #1
 80046de:	2122      	movs	r1, #34	; 0x22
 80046e0:	68b8      	ldr	r0, [r7, #8]
 80046e2:	f7ff fec9 	bl	8004478 <lsm9ds1_read_reg>
 80046e6:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10f      	bne.n	800470e <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	7e3b      	ldrb	r3, [r7, #24]
 80046f8:	f362 1386 	bfi	r3, r2, #6, #1
 80046fc:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80046fe:	f107 0218 	add.w	r2, r7, #24
 8004702:	2301      	movs	r3, #1
 8004704:	2122      	movs	r1, #34	; 0x22
 8004706:	68b8      	ldr	r0, [r7, #8]
 8004708:	f7ff fece 	bl	80044a8 <lsm9ds1_write_reg>
 800470c:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d107      	bne.n	8004724 <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8004714:	f107 0214 	add.w	r2, r7, #20
 8004718:	2301      	movs	r3, #1
 800471a:	2124      	movs	r1, #36	; 0x24
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f7ff feab 	bl	8004478 <lsm9ds1_read_reg>
 8004722:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d119      	bne.n	800475e <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 800472a:	79fb      	ldrb	r3, [r7, #7]
 800472c:	43db      	mvns	r3, r3
 800472e:	b2db      	uxtb	r3, r3
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	b2da      	uxtb	r2, r3
 8004736:	7d3b      	ldrb	r3, [r7, #20]
 8004738:	f362 13c7 	bfi	r3, r2, #7, #1
 800473c:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	b2da      	uxtb	r2, r3
 8004746:	7d3b      	ldrb	r3, [r7, #20]
 8004748:	f362 1386 	bfi	r3, r2, #6, #1
 800474c:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 800474e:	f107 0214 	add.w	r2, r7, #20
 8004752:	2301      	movs	r3, #1
 8004754:	2124      	movs	r1, #36	; 0x24
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f7ff fea6 	bl	80044a8 <lsm9ds1_write_reg>
 800475c:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 800475e:	69fb      	ldr	r3, [r7, #28]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3720      	adds	r7, #32
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8004774:	f107 0210 	add.w	r2, r7, #16
 8004778:	2301      	movs	r3, #1
 800477a:	2120      	movs	r1, #32
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fe7b 	bl	8004478 <lsm9ds1_read_reg>
 8004782:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d125      	bne.n	80047d6 <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	08db      	lsrs	r3, r3, #3
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	7c3b      	ldrb	r3, [r7, #16]
 8004796:	f362 0341 	bfi	r3, r2, #1, #1
 800479a:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	7c3b      	ldrb	r3, [r7, #16]
 80047a6:	f362 0384 	bfi	r3, r2, #2, #3
 80047aa:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	091b      	lsrs	r3, r3, #4
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	7c3b      	ldrb	r3, [r7, #16]
 80047b8:	f362 1346 	bfi	r3, r2, #5, #2
 80047bc:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 80047be:	7c3b      	ldrb	r3, [r7, #16]
 80047c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c4:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 80047c6:	f107 0210 	add.w	r2, r7, #16
 80047ca:	2301      	movs	r3, #1
 80047cc:	2120      	movs	r1, #32
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fe6a 	bl	80044a8 <lsm9ds1_write_reg>
 80047d4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d107      	bne.n	80047ec <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 80047dc:	f107 020c 	add.w	r2, r7, #12
 80047e0:	2301      	movs	r3, #1
 80047e2:	2122      	movs	r1, #34	; 0x22
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fe47 	bl	8004478 <lsm9ds1_read_reg>
 80047ea:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d111      	bne.n	8004816 <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	7b3b      	ldrb	r3, [r7, #12]
 8004800:	f362 0301 	bfi	r3, r2, #0, #2
 8004804:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8004806:	f107 020c 	add.w	r2, r7, #12
 800480a:	2301      	movs	r3, #1
 800480c:	2122      	movs	r1, #34	; 0x22
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fe4a 	bl	80044a8 <lsm9ds1_write_reg>
 8004814:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 800481c:	f107 0208 	add.w	r2, r7, #8
 8004820:	2301      	movs	r3, #1
 8004822:	2123      	movs	r1, #35	; 0x23
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fe27 	bl	8004478 <lsm9ds1_read_reg>
 800482a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d110      	bne.n	8004854 <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	b2da      	uxtb	r2, r3
 800483c:	7a3b      	ldrb	r3, [r7, #8]
 800483e:	f362 0383 	bfi	r3, r2, #2, #2
 8004842:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8004844:	f107 0208 	add.w	r2, r7, #8
 8004848:	2301      	movs	r3, #1
 800484a:	2123      	movs	r1, #35	; 0x23
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff fe2b 	bl	80044a8 <lsm9ds1_write_reg>
 8004852:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 8004854:	697b      	ldr	r3, [r7, #20]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 800486a:	f107 0208 	add.w	r2, r7, #8
 800486e:	2301      	movs	r3, #1
 8004870:	2121      	movs	r1, #33	; 0x21
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fe00 	bl	8004478 <lsm9ds1_read_reg>
 8004878:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10f      	bne.n	80048a0 <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	b2da      	uxtb	r2, r3
 8004888:	7a3b      	ldrb	r3, [r7, #8]
 800488a:	f362 1346 	bfi	r3, r2, #5, #2
 800488e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8004890:	f107 0208 	add.w	r2, r7, #8
 8004894:	2301      	movs	r3, #1
 8004896:	2121      	movs	r1, #33	; 0x21
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fe05 	bl	80044a8 <lsm9ds1_write_reg>
 800489e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 80048a0:	68fb      	ldr	r3, [r7, #12]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 80048b4:	f107 020c 	add.w	r2, r7, #12
 80048b8:	2306      	movs	r3, #6
 80048ba:	2118      	movs	r1, #24
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fddb 	bl	8004478 <lsm9ds1_read_reg>
 80048c2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80048c4:	7b7b      	ldrb	r3, [r7, #13]
 80048c6:	b21a      	sxth	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	7b3b      	ldrb	r3, [r7, #12]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	4413      	add	r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	b21a      	sxth	r2, r3
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80048e6:	7bfa      	ldrb	r2, [r7, #15]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	3302      	adds	r3, #2
 80048ec:	b212      	sxth	r2, r2
 80048ee:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	3302      	adds	r3, #2
 80048f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	7bbb      	ldrb	r3, [r7, #14]
 8004900:	b29b      	uxth	r3, r3
 8004902:	4413      	add	r3, r2
 8004904:	b29a      	uxth	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3302      	adds	r3, #2
 800490a:	b212      	sxth	r2, r2
 800490c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800490e:	7c7a      	ldrb	r2, [r7, #17]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	3304      	adds	r3, #4
 8004914:	b212      	sxth	r2, r2
 8004916:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	3304      	adds	r3, #4
 800491c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004920:	b29b      	uxth	r3, r3
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	b29a      	uxth	r2, r3
 8004926:	7c3b      	ldrb	r3, [r7, #16]
 8004928:	b29b      	uxth	r3, r3
 800492a:	4413      	add	r3, r2
 800492c:	b29a      	uxth	r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	3304      	adds	r3, #4
 8004932:	b212      	sxth	r2, r2
 8004934:	801a      	strh	r2, [r3, #0]

  return ret;
 8004936:	697b      	ldr	r3, [r7, #20]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 800494a:	f107 020c 	add.w	r2, r7, #12
 800494e:	2306      	movs	r3, #6
 8004950:	2128      	movs	r1, #40	; 0x28
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fd90 	bl	8004478 <lsm9ds1_read_reg>
 8004958:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800495a:	7b7b      	ldrb	r3, [r7, #13]
 800495c:	b21a      	sxth	r2, r3
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004968:	b29b      	uxth	r3, r3
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	b29a      	uxth	r2, r3
 800496e:	7b3b      	ldrb	r3, [r7, #12]
 8004970:	b29b      	uxth	r3, r3
 8004972:	4413      	add	r3, r2
 8004974:	b29b      	uxth	r3, r3
 8004976:	b21a      	sxth	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800497c:	7bfa      	ldrb	r2, [r7, #15]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	3302      	adds	r3, #2
 8004982:	b212      	sxth	r2, r2
 8004984:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	3302      	adds	r3, #2
 800498a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800498e:	b29b      	uxth	r3, r3
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	b29a      	uxth	r2, r3
 8004994:	7bbb      	ldrb	r3, [r7, #14]
 8004996:	b29b      	uxth	r3, r3
 8004998:	4413      	add	r3, r2
 800499a:	b29a      	uxth	r2, r3
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	3302      	adds	r3, #2
 80049a0:	b212      	sxth	r2, r2
 80049a2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80049a4:	7c7a      	ldrb	r2, [r7, #17]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	3304      	adds	r3, #4
 80049aa:	b212      	sxth	r2, r2
 80049ac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	3304      	adds	r3, #4
 80049b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	021b      	lsls	r3, r3, #8
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	7c3b      	ldrb	r3, [r7, #16]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4413      	add	r3, r2
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	3304      	adds	r3, #4
 80049c8:	b212      	sxth	r2, r2
 80049ca:	801a      	strh	r2, [r3, #0]

  return ret;
 80049cc:	697b      	ldr	r3, [r7, #20]
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b086      	sub	sp, #24
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 80049e0:	f107 020c 	add.w	r2, r7, #12
 80049e4:	2306      	movs	r3, #6
 80049e6:	2128      	movs	r1, #40	; 0x28
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff fd45 	bl	8004478 <lsm9ds1_read_reg>
 80049ee:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80049f0:	7b7b      	ldrb	r3, [r7, #13]
 80049f2:	b21a      	sxth	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	021b      	lsls	r3, r3, #8
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	7b3b      	ldrb	r3, [r7, #12]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	b21a      	sxth	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	3302      	adds	r3, #2
 8004a18:	b212      	sxth	r2, r2
 8004a1a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	3302      	adds	r3, #2
 8004a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	7bbb      	ldrb	r3, [r7, #14]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	4413      	add	r3, r2
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3302      	adds	r3, #2
 8004a36:	b212      	sxth	r2, r2
 8004a38:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004a3a:	7c7a      	ldrb	r2, [r7, #17]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	b212      	sxth	r2, r2
 8004a42:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	3304      	adds	r3, #4
 8004a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	7c3b      	ldrb	r3, [r7, #16]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	b212      	sxth	r2, r2
 8004a60:	801a      	strh	r2, [r3, #0]

  return ret;
 8004a62:	697b      	ldr	r3, [r7, #20]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	210f      	movs	r1, #15
 8004a7e:	68b8      	ldr	r0, [r7, #8]
 8004a80:	f7ff fcfa 	bl	8004478 <lsm9ds1_read_reg>
 8004a84:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d107      	bne.n	8004a9c <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	2301      	movs	r3, #1
 8004a92:	210f      	movs	r1, #15
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f7ff fcef 	bl	8004478 <lsm9ds1_read_reg>
 8004a9a:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8004a9c:	697b      	ldr	r3, [r7, #20]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b086      	sub	sp, #24
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	2117      	movs	r1, #23
 8004aba:	68b8      	ldr	r0, [r7, #8]
 8004abc:	f7ff fcdc 	bl	8004478 <lsm9ds1_read_reg>
 8004ac0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8004ac8:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8004aca:	2301      	movs	r3, #1
 8004acc:	2127      	movs	r1, #39	; 0x27
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff fcd2 	bl	8004478 <lsm9ds1_read_reg>
 8004ad4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004ad6:	697b      	ldr	r3, [r7, #20]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b088      	sub	sp, #32
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	4613      	mov	r3, r2
 8004aec:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8004aee:	f107 0214 	add.w	r2, r7, #20
 8004af2:	2301      	movs	r3, #1
 8004af4:	2122      	movs	r1, #34	; 0x22
 8004af6:	68b8      	ldr	r0, [r7, #8]
 8004af8:	f7ff fcbe 	bl	8004478 <lsm9ds1_read_reg>
 8004afc:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 8004b04:	79fb      	ldrb	r3, [r7, #7]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	7d3b      	ldrb	r3, [r7, #20]
 8004b0e:	f362 0300 	bfi	r3, r2, #0, #1
 8004b12:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8004b14:	f107 0214 	add.w	r2, r7, #20
 8004b18:	2301      	movs	r3, #1
 8004b1a:	2122      	movs	r1, #34	; 0x22
 8004b1c:	68b8      	ldr	r0, [r7, #8]
 8004b1e:	f7ff fcc3 	bl	80044a8 <lsm9ds1_write_reg>
 8004b22:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d107      	bne.n	8004b3a <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8004b2a:	f107 0218 	add.w	r2, r7, #24
 8004b2e:	2301      	movs	r3, #1
 8004b30:	2121      	movs	r1, #33	; 0x21
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff fca0 	bl	8004478 <lsm9ds1_read_reg>
 8004b38:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10f      	bne.n	8004b60 <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	7e3b      	ldrb	r3, [r7, #24]
 8004b4a:	f362 0382 	bfi	r3, r2, #2, #1
 8004b4e:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8004b50:	f107 0218 	add.w	r2, r7, #24
 8004b54:	2301      	movs	r3, #1
 8004b56:	2121      	movs	r1, #33	; 0x21
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f7ff fca5 	bl	80044a8 <lsm9ds1_write_reg>
 8004b5e:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8004b60:	69fb      	ldr	r3, [r7, #28]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3720      	adds	r7, #32
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b088      	sub	sp, #32
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8004b76:	f107 0214 	add.w	r2, r7, #20
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	2122      	movs	r1, #34	; 0x22
 8004b7e:	68b8      	ldr	r0, [r7, #8]
 8004b80:	f7ff fc7a 	bl	8004478 <lsm9ds1_read_reg>
 8004b84:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d114      	bne.n	8004bb6 <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8004b8c:	f107 0218 	add.w	r2, r7, #24
 8004b90:	2301      	movs	r3, #1
 8004b92:	2121      	movs	r1, #33	; 0x21
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff fc6f 	bl	8004478 <lsm9ds1_read_reg>
 8004b9a:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8004b9c:	7e3b      	ldrb	r3, [r7, #24]
 8004b9e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	7d3b      	ldrb	r3, [r7, #20]
 8004ba6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	4313      	orrs	r3, r2
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8004bcc:	f107 0208 	add.w	r2, r7, #8
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fc4f 	bl	8004478 <lsm9ds1_read_reg>
 8004bda:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10f      	bne.n	8004c02 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	f003 0303 	and.w	r3, r3, #3
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	7a3b      	ldrb	r3, [r7, #8]
 8004bec:	f362 0301 	bfi	r3, r2, #0, #2
 8004bf0:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8004bf2:	f107 0208 	add.w	r2, r7, #8
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	2110      	movs	r1, #16
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fc54 	bl	80044a8 <lsm9ds1_write_reg>
 8004c00:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 8004c02:	68fb      	ldr	r3, [r7, #12]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8004c18:	f107 0210 	add.w	r2, r7, #16
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	2111      	movs	r1, #17
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fc29 	bl	8004478 <lsm9ds1_read_reg>
 8004c26:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10f      	bne.n	8004c4e <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	7c3b      	ldrb	r3, [r7, #16]
 8004c38:	f362 0301 	bfi	r3, r2, #0, #2
 8004c3c:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8004c3e:	f107 0210 	add.w	r2, r7, #16
 8004c42:	2301      	movs	r3, #1
 8004c44:	2111      	movs	r1, #17
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fc2e 	bl	80044a8 <lsm9ds1_write_reg>
 8004c4c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004c54:	f107 020c 	add.w	r2, r7, #12
 8004c58:	2301      	movs	r3, #1
 8004c5a:	2112      	movs	r1, #18
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fc0b 	bl	8004478 <lsm9ds1_read_reg>
 8004c62:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d110      	bne.n	8004c8c <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 8004c6a:	78fb      	ldrb	r3, [r7, #3]
 8004c6c:	091b      	lsrs	r3, r3, #4
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	7b3b      	ldrb	r3, [r7, #12]
 8004c76:	f362 1386 	bfi	r3, r2, #6, #1
 8004c7a:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004c7c:	f107 020c 	add.w	r2, r7, #12
 8004c80:	2301      	movs	r3, #1
 8004c82:	2112      	movs	r1, #18
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fc0f 	bl	80044a8 <lsm9ds1_write_reg>
 8004c8a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8004c8c:	697b      	ldr	r3, [r7, #20]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004ca2:	f107 0208 	add.w	r2, r7, #8
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	2112      	movs	r1, #18
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff fbe4 	bl	8004478 <lsm9ds1_read_reg>
 8004cb0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10f      	bne.n	8004cd8 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	7a3b      	ldrb	r3, [r7, #8]
 8004cc2:	f362 0303 	bfi	r3, r2, #0, #4
 8004cc6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004cc8:	f107 0208 	add.w	r2, r7, #8
 8004ccc:	2301      	movs	r3, #1
 8004cce:	2112      	movs	r1, #18
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff fbe9 	bl	80044a8 <lsm9ds1_write_reg>
 8004cd6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8004cee:	f107 0208 	add.w	r2, r7, #8
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	2120      	movs	r1, #32
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7ff fbbe 	bl	8004478 <lsm9ds1_read_reg>
 8004cfc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d118      	bne.n	8004d36 <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	7a3b      	ldrb	r3, [r7, #8]
 8004d0e:	f362 0301 	bfi	r3, r2, #0, #2
 8004d12:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	7a3b      	ldrb	r3, [r7, #8]
 8004d20:	f362 0382 	bfi	r3, r2, #2, #1
 8004d24:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8004d26:	f107 0208 	add.w	r2, r7, #8
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	2120      	movs	r1, #32
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fbba 	bl	80044a8 <lsm9ds1_write_reg>
 8004d34:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8004d36:	68fb      	ldr	r3, [r7, #12]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8004d4c:	f107 0208 	add.w	r2, r7, #8
 8004d50:	2301      	movs	r3, #1
 8004d52:	2121      	movs	r1, #33	; 0x21
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff fb8f 	bl	8004478 <lsm9ds1_read_reg>
 8004d5a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10f      	bne.n	8004d82 <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	7a3b      	ldrb	r3, [r7, #8]
 8004d6c:	f362 0382 	bfi	r3, r2, #2, #1
 8004d70:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8004d72:	f107 0208 	add.w	r2, r7, #8
 8004d76:	2301      	movs	r3, #1
 8004d78:	2121      	movs	r1, #33	; 0x21
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff fb94 	bl	80044a8 <lsm9ds1_write_reg>
 8004d80:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8004d82:	68fb      	ldr	r3, [r7, #12]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8004d98:	f107 0208 	add.w	r2, r7, #8
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	2121      	movs	r1, #33	; 0x21
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff fb69 	bl	8004478 <lsm9ds1_read_reg>
 8004da6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d118      	bne.n	8004de0 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	7a3b      	ldrb	r3, [r7, #8]
 8004dba:	f362 13c7 	bfi	r3, r2, #7, #1
 8004dbe:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	7a3b      	ldrb	r3, [r7, #8]
 8004dca:	f362 1346 	bfi	r3, r2, #5, #2
 8004dce:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8004dd0:	f107 0208 	add.w	r2, r7, #8
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	2121      	movs	r1, #33	; 0x21
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7ff fb65 	bl	80044a8 <lsm9ds1_write_reg>
 8004dde:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8004de0:	68fb      	ldr	r3, [r7, #12]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <ADC_Read>:
static void ADC_ADVREGEN(ADC_TypeDef* adc) {
	adc->CR &= ~ADC_CR_ADVREGEN;
	adc->CR |= 0x1UL << ADC_CR_ADVREGEN_Pos;
}

static void ADC_Read(void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
//	ADC1_val = ADC_GetVal(ADC1);
//	ADC2_val = ADC_GetVal(ADC2);
//	ADC3_val = ADC_GetVal(ADC3);
//	ADC4_val = ADC_GetVal(ADC4);
	ADC_vals[0] = ADC_GetVal(ADC1);
 8004df0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004df4:	f000 f858 	bl	8004ea8 <ADC_GetVal>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4a0b      	ldr	r2, [pc, #44]	; (8004e28 <ADC_Read+0x3c>)
 8004dfc:	6013      	str	r3, [r2, #0]
	ADC_vals[1] = ADC_GetVal(ADC2);
 8004dfe:	480b      	ldr	r0, [pc, #44]	; (8004e2c <ADC_Read+0x40>)
 8004e00:	f000 f852 	bl	8004ea8 <ADC_GetVal>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <ADC_Read+0x3c>)
 8004e08:	6053      	str	r3, [r2, #4]
	ADC_vals[2] = ADC_GetVal(ADC3);
 8004e0a:	4809      	ldr	r0, [pc, #36]	; (8004e30 <ADC_Read+0x44>)
 8004e0c:	f000 f84c 	bl	8004ea8 <ADC_GetVal>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <ADC_Read+0x3c>)
 8004e14:	6093      	str	r3, [r2, #8]
	ADC_vals[3] = ADC_GetVal(ADC4);
 8004e16:	4807      	ldr	r0, [pc, #28]	; (8004e34 <ADC_Read+0x48>)
 8004e18:	f000 f846 	bl	8004ea8 <ADC_GetVal>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4a02      	ldr	r2, [pc, #8]	; (8004e28 <ADC_Read+0x3c>)
 8004e20:	60d3      	str	r3, [r2, #12]
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000d04 	.word	0x20000d04
 8004e2c:	50000100 	.word	0x50000100
 8004e30:	50000400 	.word	0x50000400
 8004e34:	50000500 	.word	0x50000500

08004e38 <ADC_Calibrate>:

static void ADC_Calibrate(ADC_TypeDef* adc) {
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e46:	d00b      	beq.n	8004e60 <ADC_Calibrate+0x28>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <ADC_Calibrate+0x64>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d007      	beq.n	8004e60 <ADC_Calibrate+0x28>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <ADC_Calibrate+0x68>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d003      	beq.n	8004e60 <ADC_Calibrate+0x28>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a12      	ldr	r2, [pc, #72]	; (8004ea4 <ADC_Calibrate+0x6c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d117      	bne.n	8004e90 <ADC_Calibrate+0x58>
	  return;
  }

  adc->CR &= ~ADC_CR_ADEN; // Disable ADC
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 0201 	bic.w	r2, r3, #1
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCALDIF; // Calibration for Single-ended input mode
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCAL; // Start ADC calibration
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	609a      	str	r2, [r3, #8]
  while (adc->CR & ADC_CR_ADCAL);
 8004e84:	bf00      	nop
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	dbfb      	blt.n	8004e86 <ADC_Calibrate+0x4e>
 8004e8e:	e000      	b.n	8004e92 <ADC_Calibrate+0x5a>
	  return;
 8004e90:	bf00      	nop
}
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	50000100 	.word	0x50000100
 8004ea0:	50000400 	.word	0x50000400
 8004ea4:	50000500 	.word	0x50000500

08004ea8 <ADC_GetVal>:

static int ADC_GetVal(ADC_TypeDef* adc) {
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004eb6:	d00d      	beq.n	8004ed4 <ADC_GetVal+0x2c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a0a      	ldr	r2, [pc, #40]	; (8004ee4 <ADC_GetVal+0x3c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <ADC_GetVal+0x2c>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <ADC_GetVal+0x40>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d005      	beq.n	8004ed4 <ADC_GetVal+0x2c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a08      	ldr	r2, [pc, #32]	; (8004eec <ADC_GetVal+0x44>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d001      	beq.n	8004ed4 <ADC_GetVal+0x2c>
		return 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e001      	b.n	8004ed8 <ADC_GetVal+0x30>
	}
	return adc->DR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	50000100 	.word	0x50000100
 8004ee8:	50000400 	.word	0x50000400
 8004eec:	50000500 	.word	0x50000500

08004ef0 <IMU_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void IMU_Read(void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8004ef4:	4aa4      	ldr	r2, [pc, #656]	; (8005188 <IMU_Read+0x298>)
 8004ef6:	49a5      	ldr	r1, [pc, #660]	; (800518c <IMU_Read+0x29c>)
 8004ef8:	48a5      	ldr	r0, [pc, #660]	; (8005190 <IMU_Read+0x2a0>)
 8004efa:	f7ff fdd4 	bl	8004aa6 <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 8004efe:	4ba2      	ldr	r3, [pc, #648]	; (8005188 <IMU_Read+0x298>)
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80ef 	beq.w	80050ec <IMU_Read+0x1fc>
 8004f0e:	4b9e      	ldr	r3, [pc, #632]	; (8005188 <IMU_Read+0x298>)
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80e7 	beq.w	80050ec <IMU_Read+0x1fc>
		/* Read accelerometer and gyroscope data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8004f1e:	2206      	movs	r2, #6
 8004f20:	2100      	movs	r1, #0
 8004f22:	489c      	ldr	r0, [pc, #624]	; (8005194 <IMU_Read+0x2a4>)
 8004f24:	f005 ff52 	bl	800adcc <memset>
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004f28:	2206      	movs	r2, #6
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	489a      	ldr	r0, [pc, #616]	; (8005198 <IMU_Read+0x2a8>)
 8004f2e:	f005 ff4d 	bl	800adcc <memset>
		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration);
 8004f32:	4998      	ldr	r1, [pc, #608]	; (8005194 <IMU_Read+0x2a4>)
 8004f34:	4895      	ldr	r0, [pc, #596]	; (800518c <IMU_Read+0x29c>)
 8004f36:	f7ff fd03 	bl	8004940 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate);
 8004f3a:	4997      	ldr	r1, [pc, #604]	; (8005198 <IMU_Read+0x2a8>)
 8004f3c:	4893      	ldr	r0, [pc, #588]	; (800518c <IMU_Read+0x29c>)
 8004f3e:	f7ff fcb4 	bl	80048aa <lsm9ds1_angular_rate_raw_get>
		 accel.acceleration.x = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[0]) * 9.807) / 1000;
 8004f42:	4b94      	ldr	r3, [pc, #592]	; (8005194 <IMU_Read+0x2a4>)
 8004f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fac5 	bl	80044d8 <lsm9ds1_from_fs4g_to_mg>
 8004f4e:	ee10 3a10 	vmov	r3, s0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb faf8 	bl	8000548 <__aeabi_f2d>
 8004f58:	a385      	add	r3, pc, #532	; (adr r3, 8005170 <IMU_Read+0x280>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb fb4b 	bl	80005f8 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4610      	mov	r0, r2
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	4b8b      	ldr	r3, [pc, #556]	; (800519c <IMU_Read+0x2ac>)
 8004f70:	f7fb fc6c 	bl	800084c <__aeabi_ddiv>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	f7fb fe34 	bl	8000be8 <__aeabi_d2f>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4a87      	ldr	r2, [pc, #540]	; (80051a0 <IMU_Read+0x2b0>)
 8004f84:	6013      	str	r3, [r2, #0]
		 accel.acceleration.y = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]) * 9.807) / 1000;
 8004f86:	4b83      	ldr	r3, [pc, #524]	; (8005194 <IMU_Read+0x2a4>)
 8004f88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff faa3 	bl	80044d8 <lsm9ds1_from_fs4g_to_mg>
 8004f92:	ee10 3a10 	vmov	r3, s0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb fad6 	bl	8000548 <__aeabi_f2d>
 8004f9c:	a374      	add	r3, pc, #464	; (adr r3, 8005170 <IMU_Read+0x280>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb fb29 	bl	80005f8 <__aeabi_dmul>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	4b7a      	ldr	r3, [pc, #488]	; (800519c <IMU_Read+0x2ac>)
 8004fb4:	f7fb fc4a 	bl	800084c <__aeabi_ddiv>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f7fb fe12 	bl	8000be8 <__aeabi_d2f>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	4a76      	ldr	r2, [pc, #472]	; (80051a0 <IMU_Read+0x2b0>)
 8004fc8:	6053      	str	r3, [r2, #4]
		 accel.acceleration.z = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]) * 9.807) / 1000;
 8004fca:	4b72      	ldr	r3, [pc, #456]	; (8005194 <IMU_Read+0x2a4>)
 8004fcc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fa81 	bl	80044d8 <lsm9ds1_from_fs4g_to_mg>
 8004fd6:	ee10 3a10 	vmov	r3, s0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fb fab4 	bl	8000548 <__aeabi_f2d>
 8004fe0:	a363      	add	r3, pc, #396	; (adr r3, 8005170 <IMU_Read+0x280>)
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f7fb fb07 	bl	80005f8 <__aeabi_dmul>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4610      	mov	r0, r2
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	4b69      	ldr	r3, [pc, #420]	; (800519c <IMU_Read+0x2ac>)
 8004ff8:	f7fb fc28 	bl	800084c <__aeabi_ddiv>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	f7fb fdf0 	bl	8000be8 <__aeabi_d2f>
 8005008:	4603      	mov	r3, r0
 800500a:	4a65      	ldr	r2, [pc, #404]	; (80051a0 <IMU_Read+0x2b0>)
 800500c:	6093      	str	r3, [r2, #8]
		 gyro.gyro.x = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) * 2 * M_PI)/360000;
 800500e:	4b62      	ldr	r3, [pc, #392]	; (8005198 <IMU_Read+0x2a8>)
 8005010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005014:	4618      	mov	r0, r3
 8005016:	f7ff fa77 	bl	8004508 <lsm9ds1_from_fs2000dps_to_mdps>
 800501a:	eef0 7a40 	vmov.f32	s15, s0
 800501e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005022:	ee17 0a90 	vmov	r0, s15
 8005026:	f7fb fa8f 	bl	8000548 <__aeabi_f2d>
 800502a:	a353      	add	r3, pc, #332	; (adr r3, 8005178 <IMU_Read+0x288>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f7fb fae2 	bl	80005f8 <__aeabi_dmul>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	a350      	add	r3, pc, #320	; (adr r3, 8005180 <IMU_Read+0x290>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb fc03 	bl	800084c <__aeabi_ddiv>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	f7fb fdcb 	bl	8000be8 <__aeabi_d2f>
 8005052:	4603      	mov	r3, r0
 8005054:	4a53      	ldr	r2, [pc, #332]	; (80051a4 <IMU_Read+0x2b4>)
 8005056:	6013      	str	r3, [r2, #0]
		 gyro.gyro.y = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) * 2 * M_PI)/360000;
 8005058:	4b4f      	ldr	r3, [pc, #316]	; (8005198 <IMU_Read+0x2a8>)
 800505a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fa52 	bl	8004508 <lsm9ds1_from_fs2000dps_to_mdps>
 8005064:	eef0 7a40 	vmov.f32	s15, s0
 8005068:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800506c:	ee17 0a90 	vmov	r0, s15
 8005070:	f7fb fa6a 	bl	8000548 <__aeabi_f2d>
 8005074:	a340      	add	r3, pc, #256	; (adr r3, 8005178 <IMU_Read+0x288>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb fabd 	bl	80005f8 <__aeabi_dmul>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4610      	mov	r0, r2
 8005084:	4619      	mov	r1, r3
 8005086:	a33e      	add	r3, pc, #248	; (adr r3, 8005180 <IMU_Read+0x290>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f7fb fbde 	bl	800084c <__aeabi_ddiv>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	f7fb fda6 	bl	8000be8 <__aeabi_d2f>
 800509c:	4603      	mov	r3, r0
 800509e:	4a41      	ldr	r2, [pc, #260]	; (80051a4 <IMU_Read+0x2b4>)
 80050a0:	6053      	str	r3, [r2, #4]
		 gyro.gyro.z = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) * 2 * M_PI)/360000;
 80050a2:	4b3d      	ldr	r3, [pc, #244]	; (8005198 <IMU_Read+0x2a8>)
 80050a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fa2d 	bl	8004508 <lsm9ds1_from_fs2000dps_to_mdps>
 80050ae:	eef0 7a40 	vmov.f32	s15, s0
 80050b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050b6:	ee17 0a90 	vmov	r0, s15
 80050ba:	f7fb fa45 	bl	8000548 <__aeabi_f2d>
 80050be:	a32e      	add	r3, pc, #184	; (adr r3, 8005178 <IMU_Read+0x288>)
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f7fb fa98 	bl	80005f8 <__aeabi_dmul>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4610      	mov	r0, r2
 80050ce:	4619      	mov	r1, r3
 80050d0:	a32b      	add	r3, pc, #172	; (adr r3, 8005180 <IMU_Read+0x290>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f7fb fbb9 	bl	800084c <__aeabi_ddiv>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	f7fb fd81 	bl	8000be8 <__aeabi_d2f>
 80050e6:	4603      	mov	r3, r0
 80050e8:	4a2e      	ldr	r2, [pc, #184]	; (80051a4 <IMU_Read+0x2b4>)
 80050ea:	6093      	str	r3, [r2, #8]
//		gyro.gyro.x = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
//		gyro.gyro.y = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
//		gyro.gyro.z = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}

	if (reg.status_mag.zyxda) {
 80050ec:	4b26      	ldr	r3, [pc, #152]	; (8005188 <IMU_Read+0x298>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d035      	beq.n	8005166 <IMU_Read+0x276>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 80050fa:	2206      	movs	r2, #6
 80050fc:	2100      	movs	r1, #0
 80050fe:	482a      	ldr	r0, [pc, #168]	; (80051a8 <IMU_Read+0x2b8>)
 8005100:	f005 fe64 	bl	800adcc <memset>
		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 8005104:	4928      	ldr	r1, [pc, #160]	; (80051a8 <IMU_Read+0x2b8>)
 8005106:	4822      	ldr	r0, [pc, #136]	; (8005190 <IMU_Read+0x2a0>)
 8005108:	f7ff fc65 	bl	80049d6 <lsm9ds1_magnetic_raw_get>
		mag.magnetic.x = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[0]) / 10;
 800510c:	4b26      	ldr	r3, [pc, #152]	; (80051a8 <IMU_Read+0x2b8>)
 800510e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fa10 	bl	8004538 <lsm9ds1_from_fs16gauss_to_mG>
 8005118:	eeb0 7a40 	vmov.f32	s14, s0
 800511c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005124:	4b21      	ldr	r3, [pc, #132]	; (80051ac <IMU_Read+0x2bc>)
 8005126:	edc3 7a00 	vstr	s15, [r3]
		mag.magnetic.y = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[1]) / 10;
 800512a:	4b1f      	ldr	r3, [pc, #124]	; (80051a8 <IMU_Read+0x2b8>)
 800512c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fa01 	bl	8004538 <lsm9ds1_from_fs16gauss_to_mG>
 8005136:	eeb0 7a40 	vmov.f32	s14, s0
 800513a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800513e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005142:	4b1a      	ldr	r3, [pc, #104]	; (80051ac <IMU_Read+0x2bc>)
 8005144:	edc3 7a01 	vstr	s15, [r3, #4]
		mag.magnetic.z = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[2]) / 10;
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <IMU_Read+0x2b8>)
 800514a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff f9f2 	bl	8004538 <lsm9ds1_from_fs16gauss_to_mG>
 8005154:	eeb0 7a40 	vmov.f32	s14, s0
 8005158:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800515c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005160:	4b12      	ldr	r3, [pc, #72]	; (80051ac <IMU_Read+0x2bc>)
 8005162:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8005166:	bf00      	nop
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	f3af 8000 	nop.w
 8005170:	1a9fbe77 	.word	0x1a9fbe77
 8005174:	40239d2f 	.word	0x40239d2f
 8005178:	54442d18 	.word	0x54442d18
 800517c:	400921fb 	.word	0x400921fb
 8005180:	00000000 	.word	0x00000000
 8005184:	4115f900 	.word	0x4115f900
 8005188:	200009dc 	.word	0x200009dc
 800518c:	20000d34 	.word	0x20000d34
 8005190:	20000d44 	.word	0x20000d44
 8005194:	200009c0 	.word	0x200009c0
 8005198:	200009c8 	.word	0x200009c8
 800519c:	408f4000 	.word	0x408f4000
 80051a0:	20000cec 	.word	0x20000cec
 80051a4:	20000ce0 	.word	0x20000ce0
 80051a8:	200009d0 	.word	0x200009d0
 80051ac:	20000cf8 	.word	0x20000cf8

080051b0 <IMU_Setup>:

static int IMU_Setup(void) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 80051b4:	4b31      	ldr	r3, [pc, #196]	; (800527c <IMU_Setup+0xcc>)
 80051b6:	4a32      	ldr	r2, [pc, #200]	; (8005280 <IMU_Setup+0xd0>)
 80051b8:	601a      	str	r2, [r3, #0]
  dev_ctx_imu.read_reg = platform_read_imu;
 80051ba:	4b30      	ldr	r3, [pc, #192]	; (800527c <IMU_Setup+0xcc>)
 80051bc:	4a31      	ldr	r2, [pc, #196]	; (8005284 <IMU_Setup+0xd4>)
 80051be:	605a      	str	r2, [r3, #4]
  dev_ctx_imu.handle = (void *)&imu_bus;
 80051c0:	4b2e      	ldr	r3, [pc, #184]	; (800527c <IMU_Setup+0xcc>)
 80051c2:	4a31      	ldr	r2, [pc, #196]	; (8005288 <IMU_Setup+0xd8>)
 80051c4:	60da      	str	r2, [r3, #12]
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 80051c6:	4b31      	ldr	r3, [pc, #196]	; (800528c <IMU_Setup+0xdc>)
 80051c8:	4a31      	ldr	r2, [pc, #196]	; (8005290 <IMU_Setup+0xe0>)
 80051ca:	601a      	str	r2, [r3, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 80051cc:	4b2f      	ldr	r3, [pc, #188]	; (800528c <IMU_Setup+0xdc>)
 80051ce:	4a31      	ldr	r2, [pc, #196]	; (8005294 <IMU_Setup+0xe4>)
 80051d0:	605a      	str	r2, [r3, #4]
  dev_ctx_mag.handle = (void *)&mag_bus;
 80051d2:	4b2e      	ldr	r3, [pc, #184]	; (800528c <IMU_Setup+0xdc>)
 80051d4:	4a30      	ldr	r2, [pc, #192]	; (8005298 <IMU_Setup+0xe8>)
 80051d6:	60da      	str	r2, [r3, #12]

  platform_delay(BOOT_TIME);
 80051d8:	2014      	movs	r0, #20
 80051da:	f000 f8f3 	bl	80053c4 <platform_delay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 80051de:	4a2f      	ldr	r2, [pc, #188]	; (800529c <IMU_Setup+0xec>)
 80051e0:	4926      	ldr	r1, [pc, #152]	; (800527c <IMU_Setup+0xcc>)
 80051e2:	482a      	ldr	r0, [pc, #168]	; (800528c <IMU_Setup+0xdc>)
 80051e4:	f7ff fc42 	bl	8004a6c <lsm9ds1_dev_id_get>

//  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
  if (whoamI.imu != LSM9DS1_IMU_ID) {
 80051e8:	4b2c      	ldr	r3, [pc, #176]	; (800529c <IMU_Setup+0xec>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b68      	cmp	r3, #104	; 0x68
 80051ee:	d002      	beq.n	80051f6 <IMU_Setup+0x46>
	  while (1) {
		  /* Device not found management */
		  return SETUP_FAIL;
 80051f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051f4:	e03f      	b.n	8005276 <IMU_Setup+0xc6>
	  }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 80051f6:	2201      	movs	r2, #1
 80051f8:	4920      	ldr	r1, [pc, #128]	; (800527c <IMU_Setup+0xcc>)
 80051fa:	4824      	ldr	r0, [pc, #144]	; (800528c <IMU_Setup+0xdc>)
 80051fc:	f7ff fc70 	bl	8004ae0 <lsm9ds1_dev_reset_set>

  do {
	  lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8005200:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <IMU_Setup+0xf0>)
 8005202:	491e      	ldr	r1, [pc, #120]	; (800527c <IMU_Setup+0xcc>)
 8005204:	4821      	ldr	r0, [pc, #132]	; (800528c <IMU_Setup+0xdc>)
 8005206:	f7ff fcb0 	bl	8004b6a <lsm9ds1_dev_reset_get>
  } while (rst);
 800520a:	4b25      	ldr	r3, [pc, #148]	; (80052a0 <IMU_Setup+0xf0>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f6      	bne.n	8005200 <IMU_Setup+0x50>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8005212:	2201      	movs	r2, #1
 8005214:	4919      	ldr	r1, [pc, #100]	; (800527c <IMU_Setup+0xcc>)
 8005216:	481d      	ldr	r0, [pc, #116]	; (800528c <IMU_Setup+0xdc>)
 8005218:	f7ff fa57 	bl	80046ca <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 800521c:	2102      	movs	r1, #2
 800521e:	4817      	ldr	r0, [pc, #92]	; (800527c <IMU_Setup+0xcc>)
 8005220:	f7ff fa2d 	bl	800467e <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8005224:	2103      	movs	r1, #3
 8005226:	4815      	ldr	r0, [pc, #84]	; (800527c <IMU_Setup+0xcc>)
 8005228:	f7ff f99e 	bl	8004568 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 800522c:	2103      	movs	r1, #3
 800522e:	4817      	ldr	r0, [pc, #92]	; (800528c <IMU_Setup+0xdc>)
 8005230:	f7ff fb15 	bl	800485e <lsm9ds1_mag_full_scale_set>
  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 8005234:	2100      	movs	r1, #0
 8005236:	4811      	ldr	r0, [pc, #68]	; (800527c <IMU_Setup+0xcc>)
 8005238:	f7ff fd53 	bl	8004ce2 <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 800523c:	2110      	movs	r1, #16
 800523e:	480f      	ldr	r0, [pc, #60]	; (800527c <IMU_Setup+0xcc>)
 8005240:	f7ff fda4 	bl	8004d8c <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 8005244:	2100      	movs	r1, #0
 8005246:	480d      	ldr	r0, [pc, #52]	; (800527c <IMU_Setup+0xcc>)
 8005248:	f7ff fd7a 	bl	8004d40 <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 800524c:	2103      	movs	r1, #3
 800524e:	480b      	ldr	r0, [pc, #44]	; (800527c <IMU_Setup+0xcc>)
 8005250:	f7ff fcb6 	bl	8004bc0 <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 8005254:	2105      	movs	r1, #5
 8005256:	4809      	ldr	r0, [pc, #36]	; (800527c <IMU_Setup+0xcc>)
 8005258:	f7ff fd1d 	bl	8004c96 <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 800525c:	2112      	movs	r1, #18
 800525e:	4807      	ldr	r0, [pc, #28]	; (800527c <IMU_Setup+0xcc>)
 8005260:	f7ff fcd4 	bl	8004c0c <lsm9ds1_gy_filter_out_path_set>
  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 8005264:	2122      	movs	r1, #34	; 0x22
 8005266:	4805      	ldr	r0, [pc, #20]	; (800527c <IMU_Setup+0xcc>)
 8005268:	f7ff f9a4 	bl	80045b4 <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 800526c:	2134      	movs	r1, #52	; 0x34
 800526e:	4807      	ldr	r0, [pc, #28]	; (800528c <IMU_Setup+0xdc>)
 8005270:	f7ff fa7a 	bl	8004768 <lsm9ds1_mag_data_rate_set>

  return SETUP_SUCCESS;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000d34 	.word	0x20000d34
 8005280:	080052a5 	.word	0x080052a5
 8005284:	08005335 	.word	0x08005335
 8005288:	2000001c 	.word	0x2000001c
 800528c:	20000d44 	.word	0x20000d44
 8005290:	080052e9 	.word	0x080052e9
 8005294:	08005379 	.word	0x08005379
 8005298:	2000000c 	.word	0x2000000c
 800529c:	200009d8 	.word	0x200009d8
 80052a0:	200009de 	.word	0x200009de

080052a4 <platform_write_imu>:

static int32_t platform_write_imu(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af04      	add	r7, sp, #16
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	607a      	str	r2, [r7, #4]
 80052ae:	461a      	mov	r2, r3
 80052b0:	460b      	mov	r3, r1
 80052b2:	72fb      	strb	r3, [r7, #11]
 80052b4:	4613      	mov	r3, r2
 80052b6:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	791b      	ldrb	r3, [r3, #4]
 80052c4:	b299      	uxth	r1, r3
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052ce:	9302      	str	r3, [sp, #8]
 80052d0:	893b      	ldrh	r3, [r7, #8]
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	2301      	movs	r3, #1
 80052da:	f003 f871 	bl	80083c0 <HAL_I2C_Mem_Write>
  return 0;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <platform_write_mag>:

static int32_t platform_write_mag(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af04      	add	r7, sp, #16
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	461a      	mov	r2, r3
 80052f4:	460b      	mov	r3, r1
 80052f6:	72fb      	strb	r3, [r7, #11]
 80052f8:	4613      	mov	r3, r2
 80052fa:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	617b      	str	r3, [r7, #20]
	reg |= 0x80;
 8005300:	7afb      	ldrb	r3, [r7, #11]
 8005302:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005306:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	791b      	ldrb	r3, [r3, #4]
 8005310:	b299      	uxth	r1, r3
 8005312:	7afb      	ldrb	r3, [r7, #11]
 8005314:	b29a      	uxth	r2, r3
 8005316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800531a:	9302      	str	r3, [sp, #8]
 800531c:	893b      	ldrh	r3, [r7, #8]
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	2301      	movs	r3, #1
 8005326:	f003 f84b 	bl	80083c0 <HAL_I2C_Mem_Write>
	  return 0;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <platform_read_imu>:

static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af04      	add	r7, sp, #16
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	461a      	mov	r2, r3
 8005340:	460b      	mov	r3, r1
 8005342:	72fb      	strb	r3, [r7, #11]
 8005344:	4613      	mov	r3, r2
 8005346:	813b      	strh	r3, [r7, #8]
	  sensbus_t *sensbus = (sensbus_t *)handle;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	617b      	str	r3, [r7, #20]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	791b      	ldrb	r3, [r3, #4]
 8005354:	b299      	uxth	r1, r3
 8005356:	7afb      	ldrb	r3, [r7, #11]
 8005358:	b29a      	uxth	r2, r3
 800535a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800535e:	9302      	str	r3, [sp, #8]
 8005360:	893b      	ldrh	r3, [r7, #8]
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	2301      	movs	r3, #1
 800536a:	f003 f93d 	bl	80085e8 <HAL_I2C_Mem_Read>
	  return 0;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <platform_read_mag>:

static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af04      	add	r7, sp, #16
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	461a      	mov	r2, r3
 8005384:	460b      	mov	r3, r1
 8005386:	72fb      	strb	r3, [r7, #11]
 8005388:	4613      	mov	r3, r2
 800538a:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	617b      	str	r3, [r7, #20]
	  reg |= 0x80;
 8005390:	7afb      	ldrb	r3, [r7, #11]
 8005392:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005396:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	791b      	ldrb	r3, [r3, #4]
 80053a0:	b299      	uxth	r1, r3
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053aa:	9302      	str	r3, [sp, #8]
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2301      	movs	r3, #1
 80053b6:	f003 f917 	bl	80085e8 <HAL_I2C_Mem_Read>
	  return 0;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fc31 	bl	8006c34 <HAL_Delay>
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10a      	bne.n	8005402 <HAL_GPIO_EXTI_Callback+0x26>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 80053ec:	2101      	movs	r1, #1
 80053ee:	480d      	ldr	r0, [pc, #52]	; (8005424 <HAL_GPIO_EXTI_Callback+0x48>)
 80053f0:	f002 fe1a 	bl	8008028 <HAL_GPIO_ReadPin>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d10f      	bne.n	800541a <HAL_GPIO_EXTI_Callback+0x3e>
			Set_AdvancedMode(1);
 80053fa:	2001      	movs	r0, #1
 80053fc:	f000 f814 	bl	8005428 <Set_AdvancedMode>
    		Set_StandardMode();
    	}
    }
//    exti_test1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
//    exti_test2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
}
 8005400:	e00b      	b.n	800541a <HAL_GPIO_EXTI_Callback+0x3e>
    } else if (GPIO_Pin == GPIO_PIN_1) {
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d108      	bne.n	800541a <HAL_GPIO_EXTI_Callback+0x3e>
    	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8005408:	2102      	movs	r1, #2
 800540a:	4806      	ldr	r0, [pc, #24]	; (8005424 <HAL_GPIO_EXTI_Callback+0x48>)
 800540c:	f002 fe0c 	bl	8008028 <HAL_GPIO_ReadPin>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_GPIO_EXTI_Callback+0x3e>
    		Set_StandardMode();
 8005416:	f000 f81f 	bl	8005458 <Set_StandardMode>
}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	48000800 	.word	0x48000800

08005428 <Set_AdvancedMode>:

void Set_AdvancedMode(int start_adv) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
	state = MODE_ADVANCED;
 8005430:	4b07      	ldr	r3, [pc, #28]	; (8005450 <Set_AdvancedMode+0x28>)
 8005432:	2204      	movs	r2, #4
 8005434:	701a      	strb	r2, [r3, #0]
	mode = RUNNING_MODE_ADVANCED;
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <Set_AdvancedMode+0x2c>)
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
  if (start_adv == 1) {
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <Set_AdvancedMode+0x1e>
	  Start_AdvancedMode();
 8005442:	f000 f98d 	bl	8005760 <Start_AdvancedMode>
  }
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000d5c 	.word	0x20000d5c
 8005454:	20000050 	.word	0x20000050

08005458 <Set_StandardMode>:
void Set_StandardMode() {
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
	state = MODE_STANDARD;
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <Set_StandardMode+0x1c>)
 800545e:	2203      	movs	r2, #3
 8005460:	701a      	strb	r2, [r3, #0]
	mode = RUNNING_MODE_STANDARD;
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <Set_StandardMode+0x20>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000d5c 	.word	0x20000d5c
 8005478:	20000050 	.word	0x20000050

0800547c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800547c:	b580      	push	{r7, lr}
 800547e:	ed2d 8b02 	vpush	{d8}
 8005482:	b088      	sub	sp, #32
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a80      	ldr	r2, [pc, #512]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800548c:	4293      	cmp	r3, r2
 800548e:	f040 80f7 	bne.w	8005680 <HAL_TIM_PeriodElapsedCallback+0x204>
  did_state_change = 0;
 8005492:	4b7f      	ldr	r3, [pc, #508]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
	if (state == INIT) { // State: INIT
 8005498:	4b7e      	ldr	r3, [pc, #504]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d115      	bne.n	80054cc <HAL_TIM_PeriodElapsedCallback+0x50>
		if (cnt_sec <= 0) {
 80054a0:	4b7d      	ldr	r3, [pc, #500]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	dc0b      	bgt.n	80054c0 <HAL_TIM_PeriodElapsedCallback+0x44>
			calibrate_init();
 80054a8:	f7fb fd9c 	bl	8000fe4 <calibrate_init>
			state = CAL_UNFLEXED;
 80054ac:	4b79      	ldr	r3, [pc, #484]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	701a      	strb	r2, [r3, #0]
			cnt_sec = CAL_TIME_SEC;
 80054b2:	4b79      	ldr	r3, [pc, #484]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80054b4:	220a      	movs	r2, #10
 80054b6:	601a      	str	r2, [r3, #0]
      did_state_change = 1;
 80054b8:	4b75      	ldr	r3, [pc, #468]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	e0c2      	b.n	8005646 <HAL_TIM_PeriodElapsedCallback+0x1ca>
		} else {
			cnt_sec -= 1;
 80054c0:	4b75      	ldr	r3, [pc, #468]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	4a74      	ldr	r2, [pc, #464]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e0bc      	b.n	8005646 <HAL_TIM_PeriodElapsedCallback+0x1ca>
		}
	} else if (state == CAL_UNFLEXED) { // State: CAL_UNFLEXED
 80054cc:	4b71      	ldr	r3, [pc, #452]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d137      	bne.n	8005544 <HAL_TIM_PeriodElapsedCallback+0xc8>
      ADC_Read();
 80054d4:	f7ff fc8a 	bl	8004dec <ADC_Read>
	  for (int i = 0; i < 4; i++) {
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e01b      	b.n	8005516 <HAL_TIM_PeriodElapsedCallback+0x9a>
      resistance_max[i] = max(resistance_max[i], calculate_finger_resistance(i));
 80054de:	4a6f      	ldr	r2, [pc, #444]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	ed93 8a00 	vldr	s16, [r3]
 80054ea:	6978      	ldr	r0, [r7, #20]
 80054ec:	f7fb fd1c 	bl	8000f28 <calculate_finger_resistance>
 80054f0:	eef0 7a40 	vmov.f32	s15, s0
 80054f4:	eef0 0a67 	vmov.f32	s1, s15
 80054f8:	eeb0 0a48 	vmov.f32	s0, s16
 80054fc:	f001 fa5a 	bl	80069b4 <max>
 8005500:	eef0 7a40 	vmov.f32	s15, s0
 8005504:	4a65      	ldr	r2, [pc, #404]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 4; i++) {
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	3301      	adds	r3, #1
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b03      	cmp	r3, #3
 800551a:	dde0      	ble.n	80054de <HAL_TIM_PeriodElapsedCallback+0x62>
	  }
      if (cnt_sec <= 0) {
 800551c:	4b5e      	ldr	r3, [pc, #376]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	dc09      	bgt.n	8005538 <HAL_TIM_PeriodElapsedCallback+0xbc>
        state = CAL_FLEXED;
 8005524:	4b5b      	ldr	r3, [pc, #364]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005526:	2202      	movs	r2, #2
 8005528:	701a      	strb	r2, [r3, #0]
        cnt_sec = CAL_TIME_SEC;
 800552a:	4b5b      	ldr	r3, [pc, #364]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800552c:	220a      	movs	r2, #10
 800552e:	601a      	str	r2, [r3, #0]
        did_state_change = 1;
 8005530:	4b57      	ldr	r3, [pc, #348]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005532:	2201      	movs	r2, #1
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e086      	b.n	8005646 <HAL_TIM_PeriodElapsedCallback+0x1ca>
      } else {
        cnt_sec -= 1;
 8005538:	4b57      	ldr	r3, [pc, #348]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3b01      	subs	r3, #1
 800553e:	4a56      	ldr	r2, [pc, #344]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e080      	b.n	8005646 <HAL_TIM_PeriodElapsedCallback+0x1ca>
      }
    } else if (state == CAL_FLEXED) { // State: CAL_FLEXED
 8005544:	4b53      	ldr	r3, [pc, #332]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d17c      	bne.n	8005646 <HAL_TIM_PeriodElapsedCallback+0x1ca>
      ADC_Read();
 800554c:	f7ff fc4e 	bl	8004dec <ADC_Read>
      for (int i = 0; i < 4; i++) {
 8005550:	2300      	movs	r3, #0
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	e01b      	b.n	800558e <HAL_TIM_PeriodElapsedCallback+0x112>
    		resistance_min[i] = min(resistance_min[i], calculate_finger_resistance(i));
 8005556:	4a52      	ldr	r2, [pc, #328]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	ed93 8a00 	vldr	s16, [r3]
 8005562:	6938      	ldr	r0, [r7, #16]
 8005564:	f7fb fce0 	bl	8000f28 <calculate_finger_resistance>
 8005568:	eef0 7a40 	vmov.f32	s15, s0
 800556c:	eef0 0a67 	vmov.f32	s1, s15
 8005570:	eeb0 0a48 	vmov.f32	s0, s16
 8005574:	f001 fa3a 	bl	80069ec <min>
 8005578:	eef0 7a40 	vmov.f32	s15, s0
 800557c:	4a48      	ldr	r2, [pc, #288]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 4; i++) {
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	3301      	adds	r3, #1
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b03      	cmp	r3, #3
 8005592:	dde0      	ble.n	8005556 <HAL_TIM_PeriodElapsedCallback+0xda>
      }
      if (cnt_sec <= 0) {
 8005594:	4b40      	ldr	r3, [pc, #256]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	dc4f      	bgt.n	800563c <HAL_TIM_PeriodElapsedCallback+0x1c0>
    	int is_resistance_range_valid = 1;
 800559c:	2301      	movs	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < 4; i++) {
 80055a0:	2300      	movs	r3, #0
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	e01a      	b.n	80055dc <HAL_TIM_PeriodElapsedCallback+0x160>
    		if (resistance_max[i] - resistance_min[i] < RESISTANCE_RANGE_THRESH) {
 80055a6:	4a3d      	ldr	r2, [pc, #244]	; (800569c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	ed93 7a00 	vldr	s14, [r3]
 80055b2:	4a3b      	ldr	r2, [pc, #236]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	edd3 7a00 	vldr	s15, [r3]
 80055be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055c2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80056a4 <HAL_TIM_PeriodElapsedCallback+0x228>
 80055c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ce:	d502      	bpl.n	80055d6 <HAL_TIM_PeriodElapsedCallback+0x15a>
    			is_resistance_range_valid = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
    			break;
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_PeriodElapsedCallback+0x166>
    	for (int i = 0; i < 4; i++) {
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	3301      	adds	r3, #1
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b03      	cmp	r3, #3
 80055e0:	dde1      	ble.n	80055a6 <HAL_TIM_PeriodElapsedCallback+0x12a>
    		}
    	}
    	if (is_resistance_range_valid != 0) {
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01f      	beq.n	8005628 <HAL_TIM_PeriodElapsedCallback+0x1ac>
//    		HAL_TIM_Base_Stop_IT(&htim16);
      htim16.Init.Period = 1000 - 1;
 80055e8:	4b28      	ldr	r3, [pc, #160]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80055ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055ee:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80055f0:	2006      	movs	r0, #6
 80055f2:	f002 fa5e 	bl	8007ab2 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80055f6:	2007      	movs	r0, #7
 80055f8:	f002 fa5b 	bl	8007ab2 <HAL_NVIC_EnableIRQ>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) { // @henry: check PC0 IDR for starting mode
 80055fc:	2101      	movs	r1, #1
 80055fe:	482a      	ldr	r0, [pc, #168]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005600:	f002 fd12 	bl	8008028 <HAL_GPIO_ReadPin>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d103      	bne.n	8005612 <HAL_TIM_PeriodElapsedCallback+0x196>
        Set_AdvancedMode(0);
 800560a:	2000      	movs	r0, #0
 800560c:	f7ff ff0c 	bl	8005428 <Set_AdvancedMode>
 8005610:	e001      	b.n	8005616 <HAL_TIM_PeriodElapsedCallback+0x19a>
			} else {
	      Set_StandardMode();
 8005612:	f7ff ff21 	bl	8005458 <Set_StandardMode>
			}
			LCD_DrawFillRectangle(CAL_CIRCLE_X - 8, CAL_CIRCLE_Y - 8, CAL_CIRCLE_X + 8, CAL_CIRCLE_Y + 8, BLACK); // hides countdown from calibration stages
 8005616:	2300      	movs	r3, #0
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	23f8      	movs	r3, #248	; 0xf8
 800561c:	2280      	movs	r2, #128	; 0x80
 800561e:	21e8      	movs	r1, #232	; 0xe8
 8005620:	2070      	movs	r0, #112	; 0x70
 8005622:	f7fd fe93 	bl	800334c <LCD_DrawFillRectangle>
 8005626:	e005      	b.n	8005634 <HAL_TIM_PeriodElapsedCallback+0x1b8>
    	} else {
    		state = CAL_UNFLEXED;
 8005628:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
    		cnt_sec = CAL_TIME_SEC;
 800562e:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005630:	220a      	movs	r2, #10
 8005632:	601a      	str	r2, [r3, #0]
    	}
      did_state_change = 1;
 8005634:	4b16      	ldr	r3, [pc, #88]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e004      	b.n	8005646 <HAL_TIM_PeriodElapsedCallback+0x1ca>
      } else {
        cnt_sec -= 1;
 800563c:	4b16      	ldr	r3, [pc, #88]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3b01      	subs	r3, #1
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005644:	6013      	str	r3, [r2, #0]
      }
    }
  LCD_update(gimbal_roll, gimbal_pitch, gimbal_throttle, gimbal_yaw, state, CAL_TIME_SEC, cnt_sec);
 8005646:	4b19      	ldr	r3, [pc, #100]	; (80056ac <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005648:	edd3 7a00 	vldr	s15, [r3]
 800564c:	4b18      	ldr	r3, [pc, #96]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800564e:	ed93 7a00 	vldr	s14, [r3]
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005654:	edd3 6a00 	vldr	s13, [r3]
 8005658:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800565a:	ed93 6a00 	vldr	s12, [r3]
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	461a      	mov	r2, r3
 800566a:	210a      	movs	r1, #10
 800566c:	eef0 1a46 	vmov.f32	s3, s12
 8005670:	eeb0 1a66 	vmov.f32	s2, s13
 8005674:	eef0 0a47 	vmov.f32	s1, s14
 8005678:	eeb0 0a67 	vmov.f32	s0, s15
 800567c:	f7fe fd30 	bl	80040e0 <LCD_update>
  }
}
 8005680:	bf00      	nop
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	ecbd 8b02 	vpop	{d8}
 800568a:	bd80      	pop	{r7, pc}
 800568c:	20000c70 	.word	0x20000c70
 8005690:	20000d60 	.word	0x20000d60
 8005694:	20000d5c 	.word	0x20000d5c
 8005698:	20000d64 	.word	0x20000d64
 800569c:	20000d24 	.word	0x20000d24
 80056a0:	20000d14 	.word	0x20000d14
 80056a4:	461c4000 	.word	0x461c4000
 80056a8:	48000800 	.word	0x48000800
 80056ac:	20000cd0 	.word	0x20000cd0
 80056b0:	20000cd4 	.word	0x20000cd4
 80056b4:	20000cdc 	.word	0x20000cdc
 80056b8:	20000cd8 	.word	0x20000cd8

080056bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056c0:	f001 fa52 	bl	8006b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056c4:	f000 f948 	bl	8005958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056c8:	f000 fd40 	bl	800614c <MX_GPIO_Init>
  MX_DMA_Init();
 80056cc:	f000 fd20 	bl	8006110 <MX_DMA_Init>
  MX_ADC1_Init();
 80056d0:	f000 f9a0 	bl	8005a14 <MX_ADC1_Init>
  MX_ADC2_Init();
 80056d4:	f000 fa4a 	bl	8005b6c <MX_ADC2_Init>
  MX_ADC3_Init();
 80056d8:	f000 fad4 	bl	8005c84 <MX_ADC3_Init>
  MX_ADC4_Init();
 80056dc:	f000 fb70 	bl	8005dc0 <MX_ADC4_Init>
  MX_I2C1_Init();
 80056e0:	f000 fbfa 	bl	8005ed8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80056e4:	f000 fc38 	bl	8005f58 <MX_I2C2_Init>
  MX_TIM16_Init();
 80056e8:	f000 fcea 	bl	80060c0 <MX_TIM16_Init>
  MX_SPI1_Init();
 80056ec:	f000 fc74 	bl	8005fd8 <MX_SPI1_Init>
//  SPI1_Setup();
  LCD_Init(0,0,0);
 80056f0:	2200      	movs	r2, #0
 80056f2:	2100      	movs	r1, #0
 80056f4:	2000      	movs	r0, #0
 80056f6:	f7fd fb2b 	bl	8002d50 <LCD_Init>
  LCD_Clear(BLACK);
 80056fa:	2000      	movs	r0, #0
 80056fc:	f7fd fcd2 	bl	80030a4 <LCD_Clear>

  /* USER CODE BEGIN 2 */
 if (IMU_Setup() != SETUP_SUCCESS) {
 8005700:	f7ff fd56 	bl	80051b0 <IMU_Setup>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <main+0x52>
	  return 1;
 800570a:	2301      	movs	r3, #1
 800570c:	e01c      	b.n	8005748 <main+0x8c>
 }
 MCP4728_Init(&hi2c2, output);
 800570e:	4b0f      	ldr	r3, [pc, #60]	; (800574c <main+0x90>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4611      	mov	r1, r2
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	4610      	mov	r0, r2
 8005718:	891a      	ldrh	r2, [r3, #8]
 800571a:	2300      	movs	r3, #0
 800571c:	f362 030f 	bfi	r3, r2, #0, #16
 8005720:	4602      	mov	r2, r0
 8005722:	480b      	ldr	r0, [pc, #44]	; (8005750 <main+0x94>)
 8005724:	f7fd f96b 	bl	80029fe <MCP4728_Init>
 output.channelVref = 0x00;
 8005728:	4b08      	ldr	r3, [pc, #32]	; (800574c <main+0x90>)
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
 output.channel_Gain = 0x00;
 800572e:	4b07      	ldr	r3, [pc, #28]	; (800574c <main+0x90>)
 8005730:	2200      	movs	r2, #0
 8005732:	705a      	strb	r2, [r3, #1]

  state = INIT;
 8005734:	4b07      	ldr	r3, [pc, #28]	; (8005754 <main+0x98>)
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
  cnt_sec = INIT_TIME_SEC;
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <main+0x9c>)
 800573c:	2205      	movs	r2, #5
 800573e:	601a      	str	r2, [r3, #0]
//  LCD_update(gimbal_roll, gimbal_pitch, gimbal_throttle, gimbal_yaw, state, CAL_TIME_SEC, cnt_sec);
  HAL_TIM_Base_Start_IT(&htim16); // @henry: starting timer
 8005740:	4806      	ldr	r0, [pc, #24]	; (800575c <main+0xa0>)
 8005742:	f005 f8ab 	bl	800a89c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
//  Start_AdvancedMode();

  while (1);
 8005746:	e7fe      	b.n	8005746 <main+0x8a>
}
 8005748:	4618      	mov	r0, r3
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000264 	.word	0x20000264
 8005750:	20000b74 	.word	0x20000b74
 8005754:	20000d5c 	.word	0x20000d5c
 8005758:	20000d64 	.word	0x20000d64
 800575c:	20000c70 	.word	0x20000c70

08005760 <Start_AdvancedMode>:

void Start_AdvancedMode(void) {
 8005760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005764:	af00      	add	r7, sp, #0
  reset_aux_frame();
 8005766:	f7fb fd6b 	bl	8001240 <reset_aux_frame>
  t1 = HAL_GetTick();
 800576a:	f001 fa57 	bl	8006c1c <HAL_GetTick>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	4b6c      	ldr	r3, [pc, #432]	; (8005924 <Start_AdvancedMode+0x1c4>)
 8005774:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (mode == RUNNING_MODE_ADVANCED) {
 8005776:	e0cc      	b.n	8005912 <Start_AdvancedMode+0x1b2>
	  /* SENSOR READ BEGIN */
	  ADC_Read();
 8005778:	f7ff fb38 	bl	8004dec <ADC_Read>
	  IMU_Read();
 800577c:	f7ff fbb8 	bl	8004ef0 <IMU_Read>

	  /* SENSOR READ END */

	  /* CALCULATIONS BEGIN */
	  t2 = HAL_GetTick();
 8005780:	f001 fa4c 	bl	8006c1c <HAL_GetTick>
 8005784:	4603      	mov	r3, r0
 8005786:	461a      	mov	r2, r3
 8005788:	4b67      	ldr	r3, [pc, #412]	; (8005928 <Start_AdvancedMode+0x1c8>)
 800578a:	601a      	str	r2, [r3, #0]
//	  calculate_orientation((t2 - t1) / 1000.0f); // @henry: adaptive frequency was way too fast
	  calculate_orientation(0.015);
 800578c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800592c <Start_AdvancedMode+0x1cc>
 8005790:	f7fb fc50 	bl	8001034 <calculate_orientation>
	  t1 = t2;
 8005794:	4b64      	ldr	r3, [pc, #400]	; (8005928 <Start_AdvancedMode+0x1c8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a62      	ldr	r2, [pc, #392]	; (8005924 <Start_AdvancedMode+0x1c4>)
 800579a:	6013      	str	r3, [r2, #0]
	  calculate_gestures();
 800579c:	f7fb fa74 	bl	8000c88 <calculate_gestures>

	  /* CALCULATIONS END*/

	  /* OUTPUT BEGIN */
	  output.channel_Val[0] = DAC_resting[0] + (gimbal_pitch - 0.5) * DAC_factor[0]; // pitch
 80057a0:	4b63      	ldr	r3, [pc, #396]	; (8005930 <Start_AdvancedMode+0x1d0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fa febd 	bl	8000524 <__aeabi_i2d>
 80057aa:	4604      	mov	r4, r0
 80057ac:	460d      	mov	r5, r1
 80057ae:	4b61      	ldr	r3, [pc, #388]	; (8005934 <Start_AdvancedMode+0x1d4>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fa fec8 	bl	8000548 <__aeabi_f2d>
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	4b5e      	ldr	r3, [pc, #376]	; (8005938 <Start_AdvancedMode+0x1d8>)
 80057be:	f7fa fd63 	bl	8000288 <__aeabi_dsub>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4690      	mov	r8, r2
 80057c8:	4699      	mov	r9, r3
 80057ca:	4b5c      	ldr	r3, [pc, #368]	; (800593c <Start_AdvancedMode+0x1dc>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fa fea8 	bl	8000524 <__aeabi_i2d>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fa ff0c 	bl	80005f8 <__aeabi_dmul>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4620      	mov	r0, r4
 80057e6:	4629      	mov	r1, r5
 80057e8:	f7fa fd50 	bl	800028c <__adddf3>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	f7fb f9d8 	bl	8000ba8 <__aeabi_d2uiz>
 80057f8:	4603      	mov	r3, r0
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	4b50      	ldr	r3, [pc, #320]	; (8005940 <Start_AdvancedMode+0x1e0>)
 80057fe:	805a      	strh	r2, [r3, #2]
	  output.channel_Val[1] = DAC_resting[1] + (gimbal_roll - 0.5) * DAC_factor[1]; // roll
 8005800:	4b4b      	ldr	r3, [pc, #300]	; (8005930 <Start_AdvancedMode+0x1d0>)
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	f7fa fe8d 	bl	8000524 <__aeabi_i2d>
 800580a:	4604      	mov	r4, r0
 800580c:	460d      	mov	r5, r1
 800580e:	4b4d      	ldr	r3, [pc, #308]	; (8005944 <Start_AdvancedMode+0x1e4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f7fa fe98 	bl	8000548 <__aeabi_f2d>
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	4b46      	ldr	r3, [pc, #280]	; (8005938 <Start_AdvancedMode+0x1d8>)
 800581e:	f7fa fd33 	bl	8000288 <__aeabi_dsub>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4690      	mov	r8, r2
 8005828:	4699      	mov	r9, r3
 800582a:	4b44      	ldr	r3, [pc, #272]	; (800593c <Start_AdvancedMode+0x1dc>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	4618      	mov	r0, r3
 8005830:	f7fa fe78 	bl	8000524 <__aeabi_i2d>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4640      	mov	r0, r8
 800583a:	4649      	mov	r1, r9
 800583c:	f7fa fedc 	bl	80005f8 <__aeabi_dmul>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	f7fa fd20 	bl	800028c <__adddf3>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4610      	mov	r0, r2
 8005852:	4619      	mov	r1, r3
 8005854:	f7fb f9a8 	bl	8000ba8 <__aeabi_d2uiz>
 8005858:	4603      	mov	r3, r0
 800585a:	b29a      	uxth	r2, r3
 800585c:	4b38      	ldr	r3, [pc, #224]	; (8005940 <Start_AdvancedMode+0x1e0>)
 800585e:	809a      	strh	r2, [r3, #4]
	  output.channel_Val[2] = DAC_resting[2] + (gimbal_throttle * 2) * DAC_factor[2]; // throttle
 8005860:	4b33      	ldr	r3, [pc, #204]	; (8005930 <Start_AdvancedMode+0x1d0>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	ee07 3a90 	vmov	s15, r3
 8005868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800586c:	4b36      	ldr	r3, [pc, #216]	; (8005948 <Start_AdvancedMode+0x1e8>)
 800586e:	edd3 7a00 	vldr	s15, [r3]
 8005872:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005876:	4b31      	ldr	r3, [pc, #196]	; (800593c <Start_AdvancedMode+0x1dc>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800588a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800588e:	ee17 3a90 	vmov	r3, s15
 8005892:	b29a      	uxth	r2, r3
 8005894:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <Start_AdvancedMode+0x1e0>)
 8005896:	80da      	strh	r2, [r3, #6]
	  output.channel_Val[3] = DAC_resting[3] + (gimbal_yaw - 0.5) * DAC_factor[3]; // yaw
 8005898:	4b25      	ldr	r3, [pc, #148]	; (8005930 <Start_AdvancedMode+0x1d0>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4618      	mov	r0, r3
 800589e:	f7fa fe41 	bl	8000524 <__aeabi_i2d>
 80058a2:	4604      	mov	r4, r0
 80058a4:	460d      	mov	r5, r1
 80058a6:	4b29      	ldr	r3, [pc, #164]	; (800594c <Start_AdvancedMode+0x1ec>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fa fe4c 	bl	8000548 <__aeabi_f2d>
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	4b20      	ldr	r3, [pc, #128]	; (8005938 <Start_AdvancedMode+0x1d8>)
 80058b6:	f7fa fce7 	bl	8000288 <__aeabi_dsub>
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	4690      	mov	r8, r2
 80058c0:	4699      	mov	r9, r3
 80058c2:	4b1e      	ldr	r3, [pc, #120]	; (800593c <Start_AdvancedMode+0x1dc>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fa fe2c 	bl	8000524 <__aeabi_i2d>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4640      	mov	r0, r8
 80058d2:	4649      	mov	r1, r9
 80058d4:	f7fa fe90 	bl	80005f8 <__aeabi_dmul>
 80058d8:	4602      	mov	r2, r0
 80058da:	460b      	mov	r3, r1
 80058dc:	4620      	mov	r0, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	f7fa fcd4 	bl	800028c <__adddf3>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4610      	mov	r0, r2
 80058ea:	4619      	mov	r1, r3
 80058ec:	f7fb f95c 	bl	8000ba8 <__aeabi_d2uiz>
 80058f0:	4603      	mov	r3, r0
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	4b12      	ldr	r3, [pc, #72]	; (8005940 <Start_AdvancedMode+0x1e0>)
 80058f6:	811a      	strh	r2, [r3, #8]
	  MCP4728_Write_AllChannels_Diff(&hi2c2, output);
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <Start_AdvancedMode+0x1e0>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4611      	mov	r1, r2
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	4610      	mov	r0, r2
 8005902:	891a      	ldrh	r2, [r3, #8]
 8005904:	2300      	movs	r3, #0
 8005906:	f362 030f 	bfi	r3, r2, #0, #16
 800590a:	4602      	mov	r2, r0
 800590c:	4810      	ldr	r0, [pc, #64]	; (8005950 <Start_AdvancedMode+0x1f0>)
 800590e:	f7fd f832 	bl	8002976 <MCP4728_Write_AllChannels_Diff>
  while (mode == RUNNING_MODE_ADVANCED) {
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <Start_AdvancedMode+0x1f4>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	f43f af2e 	beq.w	8005778 <Start_AdvancedMode+0x18>

	  /* OUTPUT END */
  }
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005924:	20000d54 	.word	0x20000d54
 8005928:	20000d58 	.word	0x20000d58
 800592c:	3c75c28f 	.word	0x3c75c28f
 8005930:	20000030 	.word	0x20000030
 8005934:	20000cd4 	.word	0x20000cd4
 8005938:	3fe00000 	.word	0x3fe00000
 800593c:	20000040 	.word	0x20000040
 8005940:	20000264 	.word	0x20000264
 8005944:	20000cd0 	.word	0x20000cd0
 8005948:	20000cdc 	.word	0x20000cdc
 800594c:	20000cd8 	.word	0x20000cd8
 8005950:	20000b74 	.word	0x20000b74
 8005954:	20000050 	.word	0x20000050

08005958 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b09e      	sub	sp, #120	; 0x78
 800595c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800595e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005962:	2228      	movs	r2, #40	; 0x28
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f005 fa30 	bl	800adcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800596c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	605a      	str	r2, [r3, #4]
 8005976:	609a      	str	r2, [r3, #8]
 8005978:	60da      	str	r2, [r3, #12]
 800597a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800597c:	463b      	mov	r3, r7
 800597e:	223c      	movs	r2, #60	; 0x3c
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f005 fa22 	bl	800adcc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005988:	2302      	movs	r3, #2
 800598a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800598c:	2301      	movs	r3, #1
 800598e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005990:	2310      	movs	r3, #16
 8005992:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005994:	2302      	movs	r3, #2
 8005996:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005998:	2300      	movs	r3, #0
 800599a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800599c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80059a0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80059a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80059a6:	4618      	mov	r0, r3
 80059a8:	f003 faa2 	bl	8008ef0 <HAL_RCC_OscConfig>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80059b2:	f000 fc5b 	bl	800626c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80059b6:	230f      	movs	r3, #15
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80059ba:	2300      	movs	r3, #0
 80059bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80059be:	2300      	movs	r3, #0
 80059c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80059c2:	2300      	movs	r3, #0
 80059c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80059c6:	2300      	movs	r3, #0
 80059c8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80059ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f004 facb 	bl	8009f6c <HAL_RCC_ClockConfig>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80059dc:	f000 fc46 	bl	800626c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80059e0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80059e4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80059e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80059ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80059f6:	2300      	movs	r3, #0
 80059f8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80059fa:	463b      	mov	r3, r7
 80059fc:	4618      	mov	r0, r3
 80059fe:	f004 fc9b 	bl	800a338 <HAL_RCCEx_PeriphCLKConfig>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8005a08:	f000 fc30 	bl	800626c <Error_Handler>
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3778      	adds	r7, #120	; 0x78
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	; 0x28
 8005a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005a1a:	f107 031c 	add.w	r3, r7, #28
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	611a      	str	r2, [r3, #16]
 8005a34:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005a36:	4b4c      	ldr	r3, [pc, #304]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005a3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005a3e:	4b4a      	ldr	r3, [pc, #296]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005a44:	4b48      	ldr	r3, [pc, #288]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005a4a:	4b47      	ldr	r3, [pc, #284]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005a50:	4b45      	ldr	r3, [pc, #276]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005a56:	4b44      	ldr	r3, [pc, #272]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005a5e:	4b42      	ldr	r3, [pc, #264]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a64:	4b40      	ldr	r3, [pc, #256]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a6a:	4b3f      	ldr	r3, [pc, #252]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005a70:	4b3d      	ldr	r3, [pc, #244]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a72:	2201      	movs	r2, #1
 8005a74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005a76:	4b3c      	ldr	r3, [pc, #240]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005a7e:	4b3a      	ldr	r3, [pc, #232]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a80:	2204      	movs	r2, #4
 8005a82:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005a84:	4b38      	ldr	r3, [pc, #224]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005a8a:	4b37      	ldr	r3, [pc, #220]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005a90:	4835      	ldr	r0, [pc, #212]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005a92:	f001 f8f3 	bl	8006c7c <HAL_ADC_Init>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8005a9c:	f000 fbe6 	bl	800626c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005aa4:	f107 031c 	add.w	r3, r7, #28
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	482f      	ldr	r0, [pc, #188]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005aac:	f001 fdb2 	bl	8007614 <HAL_ADCEx_MultiModeConfigChannel>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8005ab6:	f000 fbd9 	bl	800626c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005aba:	2301      	movs	r3, #1
 8005abc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005ad2:	1d3b      	adds	r3, r7, #4
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4824      	ldr	r0, [pc, #144]	; (8005b68 <MX_ADC1_Init+0x154>)
 8005ad8:	f001 fab0 	bl	800703c <HAL_ADC_ConfigChannel>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8005ae2:	f000 fbc3 	bl	800626c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_Calibrate(ADC1);
 8005ae6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005aea:	f7ff f9a5 	bl	8004e38 <ADC_Calibrate>
//  ADC_ADVREGEN(ADC1); // @henry
//  ADC12_COMMON->CCR|= ADC_CCR_VREFEN; // @henry

  ADC1->CR |= ADC_CR_ADEN; // Enable ADC
 8005aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005af8:	f043 0301 	orr.w	r3, r3, #1
 8005afc:	6093      	str	r3, [r2, #8]
//  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC1->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b0c:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR &= ~0xC; // 12-bit Resolution
 8005b0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b18:	f023 030c 	bic.w	r3, r3, #12
 8005b1c:	60d3      	str	r3, [r2, #12]

  ADC1->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005b1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b28:	f023 030f 	bic.w	r3, r3, #15
 8005b2c:	6313      	str	r3, [r2, #48]	; 0x30
  ADC1->SQR1 |= 0x1 << 6; // Channel 1 of ADC1
 8005b2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b3c:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005b3e:	bf00      	nop
 8005b40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f8      	beq.n	8005b40 <MX_ADC1_Init+0x12c>
  ADC1->CR |= ADC_CR_ADSTART; // Start the ADC
 8005b4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b58:	f043 0304 	orr.w	r3, r3, #4
 8005b5c:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 8005b5e:	bf00      	nop
 8005b60:	3728      	adds	r7, #40	; 0x28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200009e0 	.word	0x200009e0

08005b6c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005b72:	463b      	mov	r3, r7
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
 8005b78:	605a      	str	r2, [r3, #4]
 8005b7a:	609a      	str	r2, [r3, #8]
 8005b7c:	60da      	str	r2, [r3, #12]
 8005b7e:	611a      	str	r2, [r3, #16]
 8005b80:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8005b82:	4b3e      	ldr	r3, [pc, #248]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005b84:	4a3e      	ldr	r2, [pc, #248]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005b86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005b88:	4b3c      	ldr	r3, [pc, #240]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005b8e:	4b3b      	ldr	r3, [pc, #236]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005b94:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005b9a:	4b38      	ldr	r3, [pc, #224]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005ba0:	4b36      	ldr	r3, [pc, #216]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ba8:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005bae:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005bb4:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005bba:	4b30      	ldr	r3, [pc, #192]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005bc0:	4b2e      	ldr	r3, [pc, #184]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005bc8:	4b2c      	ldr	r3, [pc, #176]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005bca:	2204      	movs	r2, #4
 8005bcc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005bce:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005bd4:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005bda:	4828      	ldr	r0, [pc, #160]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005bdc:	f001 f84e 	bl	8006c7c <HAL_ADC_Init>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8005be6:	f000 fb41 	bl	800626c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005bea:	2303      	movs	r3, #3
 8005bec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005c02:	463b      	mov	r3, r7
 8005c04:	4619      	mov	r1, r3
 8005c06:	481d      	ldr	r0, [pc, #116]	; (8005c7c <MX_ADC2_Init+0x110>)
 8005c08:	f001 fa18 	bl	800703c <HAL_ADC_ConfigChannel>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8005c12:	f000 fb2b 	bl	800626c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC_Calibrate(ADC2);
 8005c16:	481a      	ldr	r0, [pc, #104]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c18:	f7ff f90e 	bl	8004e38 <ADC_Calibrate>

  ADC2->CR |= ADC_CR_ADEN; // Enable ADC
 8005c1c:	4b18      	ldr	r3, [pc, #96]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	6093      	str	r3, [r2, #8]
//  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC2->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005c28:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	4a14      	ldr	r2, [pc, #80]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c32:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~0xC; // 12-bit Resolution
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c3a:	f023 030c 	bic.w	r3, r3, #12
 8005c3e:	60d3      	str	r3, [r2, #12]

  ADC2->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005c40:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	4a0e      	ldr	r2, [pc, #56]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c46:	f023 030f 	bic.w	r3, r3, #15
 8005c4a:	6313      	str	r3, [r2, #48]	; 0x30
  ADC2->SQR1 |= 0x3 << 6; // Channel 3 of ADC2
 8005c4c:	4b0c      	ldr	r3, [pc, #48]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	4a0b      	ldr	r2, [pc, #44]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c56:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005c58:	bf00      	nop
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0f9      	beq.n	8005c5a <MX_ADC2_Init+0xee>
  ADC2->CR |= ADC_CR_ADSTART; // Start the ADC
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <MX_ADC2_Init+0x114>)
 8005c6c:	f043 0304 	orr.w	r3, r3, #4
 8005c70:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC2_Init 2 */

}
 8005c72:	bf00      	nop
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20000a30 	.word	0x20000a30
 8005c80:	50000100 	.word	0x50000100

08005c84 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	; 0x28
 8005c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005c8a:	f107 031c 	add.w	r3, r7, #28
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005c96:	1d3b      	adds	r3, r7, #4
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	60da      	str	r2, [r3, #12]
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8005ca6:	4b44      	ldr	r3, [pc, #272]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005ca8:	4a44      	ldr	r2, [pc, #272]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005caa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005cac:	4b42      	ldr	r3, [pc, #264]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005cb2:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005cb8:	4b3f      	ldr	r3, [pc, #252]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005cbe:	4b3e      	ldr	r3, [pc, #248]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005cc4:	4b3c      	ldr	r3, [pc, #240]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ccc:	4b3a      	ldr	r3, [pc, #232]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005cd2:	4b39      	ldr	r3, [pc, #228]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005cd8:	4b37      	ldr	r3, [pc, #220]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8005cde:	4b36      	ldr	r3, [pc, #216]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005ce4:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005cec:	4b32      	ldr	r3, [pc, #200]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cee:	2204      	movs	r2, #4
 8005cf0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8005cf2:	4b31      	ldr	r3, [pc, #196]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005cf8:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005cfe:	482e      	ldr	r0, [pc, #184]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005d00:	f000 ffbc 	bl	8006c7c <HAL_ADC_Init>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8005d0a:	f000 faaf 	bl	800626c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8005d12:	f107 031c 	add.w	r3, r7, #28
 8005d16:	4619      	mov	r1, r3
 8005d18:	4827      	ldr	r0, [pc, #156]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005d1a:	f001 fc7b 	bl	8007614 <HAL_ADCEx_MultiModeConfigChannel>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8005d24:	f000 faa2 	bl	800626c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005d40:	1d3b      	adds	r3, r7, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	481c      	ldr	r0, [pc, #112]	; (8005db8 <MX_ADC3_Init+0x134>)
 8005d46:	f001 f979 	bl	800703c <HAL_ADC_ConfigChannel>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d001      	beq.n	8005d54 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8005d50:	f000 fa8c 	bl	800626c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  ADC_Calibrate(ADC3);
 8005d54:	4819      	ldr	r0, [pc, #100]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d56:	f7ff f86f 	bl	8004e38 <ADC_Calibrate>

  ADC3->CR |= ADC_CR_ADEN; // Enable ADC
 8005d5a:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4a17      	ldr	r2, [pc, #92]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d60:	f043 0301 	orr.w	r3, r3, #1
 8005d64:	6093      	str	r3, [r2, #8]
//  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC3->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	4a14      	ldr	r2, [pc, #80]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d70:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~0xC; // 12-bit Resolution
 8005d72:	4b12      	ldr	r3, [pc, #72]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	4a11      	ldr	r2, [pc, #68]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d78:	f023 030c 	bic.w	r3, r3, #12
 8005d7c:	60d3      	str	r3, [r2, #12]

  ADC3->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	4a0e      	ldr	r2, [pc, #56]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d84:	f023 030f 	bic.w	r3, r3, #15
 8005d88:	6313      	str	r3, [r2, #48]	; 0x30
  ADC3->SQR1 |= 0x1 << 6; // Channel 1 of ADC3
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	4a0b      	ldr	r2, [pc, #44]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d94:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005d96:	bf00      	nop
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f9      	beq.n	8005d98 <MX_ADC3_Init+0x114>
  ADC3->CR |= ADC_CR_ADSTART; // Start the ADC
 8005da4:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	4a04      	ldr	r2, [pc, #16]	; (8005dbc <MX_ADC3_Init+0x138>)
 8005daa:	f043 0304 	orr.w	r3, r3, #4
 8005dae:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC3_Init 2 */

}
 8005db0:	bf00      	nop
 8005db2:	3728      	adds	r7, #40	; 0x28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000a80 	.word	0x20000a80
 8005dbc:	50000400 	.word	0x50000400

08005dc0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005dc6:	463b      	mov	r3, r7
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	60da      	str	r2, [r3, #12]
 8005dd2:	611a      	str	r2, [r3, #16]
 8005dd4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005dd8:	4a3e      	ldr	r2, [pc, #248]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005dda:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005ddc:	4b3c      	ldr	r3, [pc, #240]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8005de2:	4b3b      	ldr	r3, [pc, #236]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005de8:	4b39      	ldr	r3, [pc, #228]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8005dee:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8005df4:	4b36      	ldr	r3, [pc, #216]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005dfc:	4b34      	ldr	r3, [pc, #208]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e02:	4b33      	ldr	r3, [pc, #204]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e08:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8005e0e:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e10:	2201      	movs	r2, #1
 8005e12:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8005e14:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e1c:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e1e:	2204      	movs	r2, #4
 8005e20:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8005e22:	4b2b      	ldr	r3, [pc, #172]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005e28:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8005e2e:	4828      	ldr	r0, [pc, #160]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e30:	f000 ff24 	bl	8006c7c <HAL_ADC_Init>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8005e3a:	f000 fa17 	bl	800626c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005e42:	2301      	movs	r3, #1
 8005e44:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8005e56:	463b      	mov	r3, r7
 8005e58:	4619      	mov	r1, r3
 8005e5a:	481d      	ldr	r0, [pc, #116]	; (8005ed0 <MX_ADC4_Init+0x110>)
 8005e5c:	f001 f8ee 	bl	800703c <HAL_ADC_ConfigChannel>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8005e66:	f000 fa01 	bl	800626c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  ADC_Calibrate(ADC4);
 8005e6a:	481a      	ldr	r0, [pc, #104]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e6c:	f7fe ffe4 	bl	8004e38 <ADC_Calibrate>

  ADC4->CR |= ADC_CR_ADEN; // Enable ADC
 8005e70:	4b18      	ldr	r3, [pc, #96]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e76:	f043 0301 	orr.w	r3, r3, #1
 8005e7a:	6093      	str	r3, [r2, #8]
//  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC4->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005e7c:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e86:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~0xC; // 12-bit Resolution
 8005e88:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4a11      	ldr	r2, [pc, #68]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e8e:	f023 030c 	bic.w	r3, r3, #12
 8005e92:	60d3      	str	r3, [r2, #12]

  ADC4->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	4a0e      	ldr	r2, [pc, #56]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005e9a:	f023 030f 	bic.w	r3, r3, #15
 8005e9e:	6313      	str	r3, [r2, #48]	; 0x30
  ADC4->SQR1 |= 0x1 << 6; // Channel 1 of ADC4
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea4:	4a0b      	ldr	r2, [pc, #44]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eaa:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005eac:	bf00      	nop
 8005eae:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f9      	beq.n	8005eae <MX_ADC4_Init+0xee>
  ADC4->CR |= ADC_CR_ADSTART; // Start the ADC
 8005eba:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	4a05      	ldr	r2, [pc, #20]	; (8005ed4 <MX_ADC4_Init+0x114>)
 8005ec0:	f043 0304 	orr.w	r3, r3, #4
 8005ec4:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC4_Init 2 */

}
 8005ec6:	bf00      	nop
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000ad0 	.word	0x20000ad0
 8005ed4:	50000500 	.word	0x50000500

08005ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005edc:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005ede:	4a1c      	ldr	r2, [pc, #112]	; (8005f50 <MX_I2C1_Init+0x78>)
 8005ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8005ee2:	4b1a      	ldr	r3, [pc, #104]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005ee4:	4a1b      	ldr	r2, [pc, #108]	; (8005f54 <MX_I2C1_Init+0x7c>)
 8005ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005ee8:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005eee:	4b17      	ldr	r3, [pc, #92]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ef4:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005efa:	4b14      	ldr	r3, [pc, #80]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005f00:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005f12:	480e      	ldr	r0, [pc, #56]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005f14:	f002 f8d0 	bl	80080b8 <HAL_I2C_Init>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005f1e:	f000 f9a5 	bl	800626c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005f22:	2100      	movs	r1, #0
 8005f24:	4809      	ldr	r0, [pc, #36]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005f26:	f002 ff4b 	bl	8008dc0 <HAL_I2CEx_ConfigAnalogFilter>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005f30:	f000 f99c 	bl	800626c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005f34:	2100      	movs	r1, #0
 8005f36:	4805      	ldr	r0, [pc, #20]	; (8005f4c <MX_I2C1_Init+0x74>)
 8005f38:	f002 ff8d 	bl	8008e56 <HAL_I2CEx_ConfigDigitalFilter>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d001      	beq.n	8005f46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005f42:	f000 f993 	bl	800626c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005f46:	bf00      	nop
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000b20 	.word	0x20000b20
 8005f50:	40005400 	.word	0x40005400
 8005f54:	2000090e 	.word	0x2000090e

08005f58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005f5c:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f5e:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <MX_I2C2_Init+0x78>)
 8005f60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f64:	4a1b      	ldr	r2, [pc, #108]	; (8005fd4 <MX_I2C2_Init+0x7c>)
 8005f66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005f68:	4b18      	ldr	r3, [pc, #96]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f6e:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f74:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005f7a:	4b14      	ldr	r3, [pc, #80]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005f80:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f86:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f8c:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005f92:	480e      	ldr	r0, [pc, #56]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005f94:	f002 f890 	bl	80080b8 <HAL_I2C_Init>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005f9e:	f000 f965 	bl	800626c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4809      	ldr	r0, [pc, #36]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005fa6:	f002 ff0b 	bl	8008dc0 <HAL_I2CEx_ConfigAnalogFilter>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005fb0:	f000 f95c 	bl	800626c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4805      	ldr	r0, [pc, #20]	; (8005fcc <MX_I2C2_Init+0x74>)
 8005fb8:	f002 ff4d 	bl	8008e56 <HAL_I2CEx_ConfigDigitalFilter>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005fc2:	f000 f953 	bl	800626c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005fc6:	bf00      	nop
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20000b74 	.word	0x20000b74
 8005fd0:	40005800 	.word	0x40005800
 8005fd4:	2000090e 	.word	0x2000090e

08005fd8 <MX_SPI1_Init>:
* @brief SPI1 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI1_Init(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_Init 0 */
	/* USER CODE END SPI1_Init 0 */
	/* USER CODE BEGIN SPI1_Init 1 */
	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8005fdc:	4b34      	ldr	r3, [pc, #208]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8005fde:	4a35      	ldr	r2, [pc, #212]	; (80060b4 <MX_SPI1_Init+0xdc>)
 8005fe0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8005fe2:	4b33      	ldr	r3, [pc, #204]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8005fe4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005fe8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005fea:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8005ff0:	4b2f      	ldr	r3, [pc, #188]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8005ff2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005ff6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005ffe:	4b2c      	ldr	r3, [pc, #176]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8006000:	2200      	movs	r2, #0
 8006002:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8006004:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8006006:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800600a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800600c:	4b28      	ldr	r3, [pc, #160]	; (80060b0 <MX_SPI1_Init+0xd8>)
 800600e:	2208      	movs	r2, #8
 8006010:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006012:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8006014:	2200      	movs	r2, #0
 8006016:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006018:	4b25      	ldr	r3, [pc, #148]	; (80060b0 <MX_SPI1_Init+0xd8>)
 800601a:	2200      	movs	r2, #0
 800601c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800601e:	4b24      	ldr	r3, [pc, #144]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8006020:	2200      	movs	r2, #0
 8006022:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8006026:	2207      	movs	r2, #7
 8006028:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800602a:	4b21      	ldr	r3, [pc, #132]	; (80060b0 <MX_SPI1_Init+0xd8>)
 800602c:	2200      	movs	r2, #0
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006030:	4b1f      	ldr	r3, [pc, #124]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8006032:	2208      	movs	r2, #8
 8006034:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006036:	481e      	ldr	r0, [pc, #120]	; (80060b0 <MX_SPI1_Init+0xd8>)
 8006038:	f004 fb2e 	bl	800a698 <HAL_SPI_Init>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <MX_SPI1_Init+0x6e>
	{
	Error_Handler();
 8006042:	f000 f913 	bl	800626c <Error_Handler>
	}
	GPIOB->ODR |= 0x1;
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <MX_SPI1_Init+0xe0>)
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <MX_SPI1_Init+0xe0>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= 0x18;
 8006052:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800605c:	f043 0318 	orr.w	r3, r3, #24
 8006060:	6153      	str	r3, [r2, #20]

	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006062:	4b16      	ldr	r3, [pc, #88]	; (80060bc <MX_SPI1_Init+0xe4>)
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <MX_SPI1_Init+0xe4>)
 8006068:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800606c:	6193      	str	r3, [r2, #24]
	SPI1->CR2 &= ~SPI_CR2_DS;
 800606e:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <MX_SPI1_Init+0xdc>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	4a10      	ldr	r2, [pc, #64]	; (80060b4 <MX_SPI1_Init+0xdc>)
 8006074:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006078:	6053      	str	r3, [r2, #4]
	SPI1->CR1 &= ~(SPI_CR1_BR);
 800607a:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <MX_SPI1_Init+0xdc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a0d      	ldr	r2, [pc, #52]	; (80060b4 <MX_SPI1_Init+0xdc>)
 8006080:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006084:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;
 8006086:	4b0b      	ldr	r3, [pc, #44]	; (80060b4 <MX_SPI1_Init+0xdc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <MX_SPI1_Init+0xdc>)
 800608c:	f043 0304 	orr.w	r3, r3, #4
 8006090:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8006092:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <MX_SPI1_Init+0xdc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a07      	ldr	r2, [pc, #28]	; (80060b4 <MX_SPI1_Init+0xdc>)
 8006098:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800609c:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE;
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <MX_SPI1_Init+0xdc>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a04      	ldr	r2, [pc, #16]	; (80060b4 <MX_SPI1_Init+0xdc>)
 80060a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a8:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN SPI1_Init 2 */
	/* USER CODE END SPI1_Init 2 */
}
 80060aa:	bf00      	nop
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	20000bc8 	.word	0x20000bc8
 80060b4:	40013000 	.word	0x40013000
 80060b8:	48000400 	.word	0x48000400
 80060bc:	40021000 	.word	0x40021000

080060c0 <MX_TIM16_Init>:
* @brief TIM16 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM16_Init(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM16_Init 0 */
	/* USER CODE END TIM16_Init 0 */
	/* USER CODE BEGIN TIM16_Init 1 */
	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80060c4:	4b10      	ldr	r3, [pc, #64]	; (8006108 <MX_TIM16_Init+0x48>)
 80060c6:	4a11      	ldr	r2, [pc, #68]	; (800610c <MX_TIM16_Init+0x4c>)
 80060c8:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 8000 - 1;
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <MX_TIM16_Init+0x48>)
 80060cc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80060d0:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <MX_TIM16_Init+0x48>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1000 - 1;
 80060d8:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <MX_TIM16_Init+0x48>)
 80060da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060de:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e0:	4b09      	ldr	r3, [pc, #36]	; (8006108 <MX_TIM16_Init+0x48>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 80060e6:	4b08      	ldr	r3, [pc, #32]	; (8006108 <MX_TIM16_Init+0x48>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <MX_TIM16_Init+0x48>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80060f2:	4805      	ldr	r0, [pc, #20]	; (8006108 <MX_TIM16_Init+0x48>)
 80060f4:	f004 fb7b 	bl	800a7ee <HAL_TIM_Base_Init>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <MX_TIM16_Init+0x42>
	{
	Error_Handler();
 80060fe:	f000 f8b5 	bl	800626c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	/* USER CODE END TIM16_Init 2 */
}
 8006102:	bf00      	nop
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000c70 	.word	0x20000c70
 800610c:	40014400 	.word	0x40014400

08006110 <MX_DMA_Init>:

/**
* Enable DMA controller clock
*/
static void MX_DMA_Init(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <MX_DMA_Init+0x38>)
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	4a0b      	ldr	r2, [pc, #44]	; (8006148 <MX_DMA_Init+0x38>)
 800611c:	f043 0301 	orr.w	r3, r3, #1
 8006120:	6153      	str	r3, [r2, #20]
 8006122:	4b09      	ldr	r3, [pc, #36]	; (8006148 <MX_DMA_Init+0x38>)
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	607b      	str	r3, [r7, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800612e:	2200      	movs	r2, #0
 8006130:	2100      	movs	r1, #0
 8006132:	200d      	movs	r0, #13
 8006134:	f001 fca1 	bl	8007a7a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006138:	200d      	movs	r0, #13
 800613a:	f001 fcba 	bl	8007ab2 <HAL_NVIC_EnableIRQ>
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40021000 	.word	0x40021000

0800614c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006152:	f107 0314 	add.w	r3, r7, #20
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	605a      	str	r2, [r3, #4]
 800615c:	609a      	str	r2, [r3, #8]
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006162:	4b3f      	ldr	r3, [pc, #252]	; (8006260 <MX_GPIO_Init+0x114>)
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	4a3e      	ldr	r2, [pc, #248]	; (8006260 <MX_GPIO_Init+0x114>)
 8006168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616c:	6153      	str	r3, [r2, #20]
 800616e:	4b3c      	ldr	r3, [pc, #240]	; (8006260 <MX_GPIO_Init+0x114>)
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800617a:	4b39      	ldr	r3, [pc, #228]	; (8006260 <MX_GPIO_Init+0x114>)
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	4a38      	ldr	r2, [pc, #224]	; (8006260 <MX_GPIO_Init+0x114>)
 8006180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006184:	6153      	str	r3, [r2, #20]
 8006186:	4b36      	ldr	r3, [pc, #216]	; (8006260 <MX_GPIO_Init+0x114>)
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006192:	4b33      	ldr	r3, [pc, #204]	; (8006260 <MX_GPIO_Init+0x114>)
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	4a32      	ldr	r2, [pc, #200]	; (8006260 <MX_GPIO_Init+0x114>)
 8006198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800619c:	6153      	str	r3, [r2, #20]
 800619e:	4b30      	ldr	r3, [pc, #192]	; (8006260 <MX_GPIO_Init+0x114>)
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a6:	60bb      	str	r3, [r7, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061aa:	4b2d      	ldr	r3, [pc, #180]	; (8006260 <MX_GPIO_Init+0x114>)
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <MX_GPIO_Init+0x114>)
 80061b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061b4:	6153      	str	r3, [r2, #20]
 80061b6:	4b2a      	ldr	r3, [pc, #168]	; (8006260 <MX_GPIO_Init+0x114>)
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061be:	607b      	str	r3, [r7, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80061c2:	4b27      	ldr	r3, [pc, #156]	; (8006260 <MX_GPIO_Init+0x114>)
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	4a26      	ldr	r2, [pc, #152]	; (8006260 <MX_GPIO_Init+0x114>)
 80061c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80061cc:	6153      	str	r3, [r2, #20]
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <MX_GPIO_Init+0x114>)
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 80061da:	2200      	movs	r2, #0
 80061dc:	2108      	movs	r1, #8
 80061de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061e2:	f001 ff39 	bl	8008058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80061e6:	2200      	movs	r2, #0
 80061e8:	2101      	movs	r1, #1
 80061ea:	481e      	ldr	r0, [pc, #120]	; (8006264 <MX_GPIO_Init+0x118>)
 80061ec:	f001 ff34 	bl	8008058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80061f0:	2308      	movs	r3, #8
 80061f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061f4:	2301      	movs	r3, #1
 80061f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061fc:	2300      	movs	r3, #0
 80061fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006200:	f107 0314 	add.w	r3, r7, #20
 8006204:	4619      	mov	r1, r3
 8006206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800620a:	f001 fd93 	bl	8007d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800620e:	2301      	movs	r3, #1
 8006210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006212:	2301      	movs	r3, #1
 8006214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800621a:	2300      	movs	r3, #0
 800621c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800621e:	f107 0314 	add.w	r3, r7, #20
 8006222:	4619      	mov	r1, r3
 8006224:	480f      	ldr	r0, [pc, #60]	; (8006264 <MX_GPIO_Init+0x118>)
 8006226:	f001 fd85 	bl	8007d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800622a:	2303      	movs	r3, #3
 800622c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800622e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006232:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006234:	2302      	movs	r3, #2
 8006236:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006238:	f107 0314 	add.w	r3, r7, #20
 800623c:	4619      	mov	r1, r3
 800623e:	480a      	ldr	r0, [pc, #40]	; (8006268 <MX_GPIO_Init+0x11c>)
 8006240:	f001 fd78 	bl	8007d34 <HAL_GPIO_Init>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8006244:	2200      	movs	r2, #0
 8006246:	2101      	movs	r1, #1
 8006248:	2006      	movs	r0, #6
 800624a:	f001 fc16 	bl	8007a7a <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800624e:	2200      	movs	r2, #0
 8006250:	2100      	movs	r1, #0
 8006252:	2007      	movs	r0, #7
 8006254:	f001 fc11 	bl	8007a7a <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8006258:	bf00      	nop
 800625a:	3728      	adds	r7, #40	; 0x28
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40021000 	.word	0x40021000
 8006264:	48000400 	.word	0x48000400
 8006268:	48000800 	.word	0x48000800

0800626c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006270:	b672      	cpsid	i
}
 8006272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006274:	e7fe      	b.n	8006274 <Error_Handler+0x8>
	...

08006278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800627e:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <HAL_MspInit+0x44>)
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	4a0e      	ldr	r2, [pc, #56]	; (80062bc <HAL_MspInit+0x44>)
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	6193      	str	r3, [r2, #24]
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <HAL_MspInit+0x44>)
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <HAL_MspInit+0x44>)
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	4a08      	ldr	r2, [pc, #32]	; (80062bc <HAL_MspInit+0x44>)
 800629c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a0:	61d3      	str	r3, [r2, #28]
 80062a2:	4b06      	ldr	r3, [pc, #24]	; (80062bc <HAL_MspInit+0x44>)
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062aa:	603b      	str	r3, [r7, #0]
 80062ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40021000 	.word	0x40021000

080062c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b090      	sub	sp, #64	; 0x40
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	605a      	str	r2, [r3, #4]
 80062d2:	609a      	str	r2, [r3, #8]
 80062d4:	60da      	str	r2, [r3, #12]
 80062d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062e0:	d12e      	bne.n	8006340 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80062e2:	4b66      	ldr	r3, [pc, #408]	; (800647c <HAL_ADC_MspInit+0x1bc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3301      	adds	r3, #1
 80062e8:	4a64      	ldr	r2, [pc, #400]	; (800647c <HAL_ADC_MspInit+0x1bc>)
 80062ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80062ec:	4b63      	ldr	r3, [pc, #396]	; (800647c <HAL_ADC_MspInit+0x1bc>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d10b      	bne.n	800630c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80062f4:	4b62      	ldr	r3, [pc, #392]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	4a61      	ldr	r2, [pc, #388]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 80062fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fe:	6153      	str	r3, [r2, #20]
 8006300:	4b5f      	ldr	r3, [pc, #380]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006308:	62bb      	str	r3, [r7, #40]	; 0x28
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800630c:	4b5c      	ldr	r3, [pc, #368]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	4a5b      	ldr	r2, [pc, #364]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006316:	6153      	str	r3, [r2, #20]
 8006318:	4b59      	ldr	r3, [pc, #356]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006324:	2301      	movs	r3, #1
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006328:	2303      	movs	r3, #3
 800632a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632c:	2300      	movs	r3, #0
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006334:	4619      	mov	r1, r3
 8006336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800633a:	f001 fcfb 	bl	8007d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800633e:	e099      	b.n	8006474 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a4f      	ldr	r2, [pc, #316]	; (8006484 <HAL_ADC_MspInit+0x1c4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d12e      	bne.n	80063a8 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800634a:	4b4c      	ldr	r3, [pc, #304]	; (800647c <HAL_ADC_MspInit+0x1bc>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	4a4a      	ldr	r2, [pc, #296]	; (800647c <HAL_ADC_MspInit+0x1bc>)
 8006352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8006354:	4b49      	ldr	r3, [pc, #292]	; (800647c <HAL_ADC_MspInit+0x1bc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10b      	bne.n	8006374 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800635c:	4b48      	ldr	r3, [pc, #288]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	4a47      	ldr	r2, [pc, #284]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006366:	6153      	str	r3, [r2, #20]
 8006368:	4b45      	ldr	r3, [pc, #276]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006374:	4b42      	ldr	r3, [pc, #264]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	4a41      	ldr	r2, [pc, #260]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 800637a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800637e:	6153      	str	r3, [r2, #20]
 8006380:	4b3f      	ldr	r3, [pc, #252]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006390:	2303      	movs	r3, #3
 8006392:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006394:	2300      	movs	r3, #0
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800639c:	4619      	mov	r1, r3
 800639e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063a2:	f001 fcc7 	bl	8007d34 <HAL_GPIO_Init>
}
 80063a6:	e065      	b.n	8006474 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC3)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a36      	ldr	r2, [pc, #216]	; (8006488 <HAL_ADC_MspInit+0x1c8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d12d      	bne.n	800640e <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80063b2:	4b36      	ldr	r3, [pc, #216]	; (800648c <HAL_ADC_MspInit+0x1cc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	4a34      	ldr	r2, [pc, #208]	; (800648c <HAL_ADC_MspInit+0x1cc>)
 80063ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80063bc:	4b33      	ldr	r3, [pc, #204]	; (800648c <HAL_ADC_MspInit+0x1cc>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d10b      	bne.n	80063dc <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80063c4:	4b2e      	ldr	r3, [pc, #184]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4a2d      	ldr	r2, [pc, #180]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 80063ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ce:	6153      	str	r3, [r2, #20]
 80063d0:	4b2b      	ldr	r3, [pc, #172]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063dc:	4b28      	ldr	r3, [pc, #160]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	4a27      	ldr	r2, [pc, #156]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 80063e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e6:	6153      	str	r3, [r2, #20]
 80063e8:	4b25      	ldr	r3, [pc, #148]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80063f4:	2302      	movs	r3, #2
 80063f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063f8:	2303      	movs	r3, #3
 80063fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063fc:	2300      	movs	r3, #0
 80063fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006404:	4619      	mov	r1, r3
 8006406:	4822      	ldr	r0, [pc, #136]	; (8006490 <HAL_ADC_MspInit+0x1d0>)
 8006408:	f001 fc94 	bl	8007d34 <HAL_GPIO_Init>
}
 800640c:	e032      	b.n	8006474 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC4)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a20      	ldr	r2, [pc, #128]	; (8006494 <HAL_ADC_MspInit+0x1d4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d12d      	bne.n	8006474 <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8006418:	4b1c      	ldr	r3, [pc, #112]	; (800648c <HAL_ADC_MspInit+0x1cc>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3301      	adds	r3, #1
 800641e:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_ADC_MspInit+0x1cc>)
 8006420:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8006422:	4b1a      	ldr	r3, [pc, #104]	; (800648c <HAL_ADC_MspInit+0x1cc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d10b      	bne.n	8006442 <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800642a:	4b15      	ldr	r3, [pc, #84]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4a14      	ldr	r2, [pc, #80]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006434:	6153      	str	r3, [r2, #20]
 8006436:	4b12      	ldr	r3, [pc, #72]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006442:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	4a0e      	ldr	r2, [pc, #56]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800644c:	6153      	str	r3, [r2, #20]
 800644e:	4b0c      	ldr	r3, [pc, #48]	; (8006480 <HAL_ADC_MspInit+0x1c0>)
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800645a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006460:	2303      	movs	r3, #3
 8006462:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006464:	2300      	movs	r3, #0
 8006466:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800646c:	4619      	mov	r1, r3
 800646e:	480a      	ldr	r0, [pc, #40]	; (8006498 <HAL_ADC_MspInit+0x1d8>)
 8006470:	f001 fc60 	bl	8007d34 <HAL_GPIO_Init>
}
 8006474:	bf00      	nop
 8006476:	3740      	adds	r7, #64	; 0x40
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000fac 	.word	0x20000fac
 8006480:	40021000 	.word	0x40021000
 8006484:	50000100 	.word	0x50000100
 8006488:	50000400 	.word	0x50000400
 800648c:	20000fb0 	.word	0x20000fb0
 8006490:	48000400 	.word	0x48000400
 8006494:	50000500 	.word	0x50000500
 8006498:	48001000 	.word	0x48001000

0800649c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08e      	sub	sp, #56	; 0x38
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	609a      	str	r2, [r3, #8]
 80064b0:	60da      	str	r2, [r3, #12]
 80064b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a54      	ldr	r2, [pc, #336]	; (800660c <HAL_I2C_MspInit+0x170>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d14e      	bne.n	800655c <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064be:	4b54      	ldr	r3, [pc, #336]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	4a53      	ldr	r2, [pc, #332]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80064c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c8:	6153      	str	r3, [r2, #20]
 80064ca:	4b51      	ldr	r3, [pc, #324]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d2:	623b      	str	r3, [r7, #32]
 80064d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064d6:	4b4e      	ldr	r3, [pc, #312]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	4a4d      	ldr	r2, [pc, #308]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80064dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e0:	6153      	str	r3, [r2, #20]
 80064e2:	4b4b      	ldr	r3, [pc, #300]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ea:	61fb      	str	r3, [r7, #28]
 80064ec:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80064ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80064f4:	2312      	movs	r3, #18
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80064fc:	2303      	movs	r3, #3
 80064fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006500:	2304      	movs	r3, #4
 8006502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006508:	4619      	mov	r1, r3
 800650a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800650e:	f001 fc11 	bl	8007d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006512:	2380      	movs	r3, #128	; 0x80
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006516:	2312      	movs	r3, #18
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800651a:	2300      	movs	r3, #0
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800651e:	2303      	movs	r3, #3
 8006520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006522:	2304      	movs	r3, #4
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800652a:	4619      	mov	r1, r3
 800652c:	4839      	ldr	r0, [pc, #228]	; (8006614 <HAL_I2C_MspInit+0x178>)
 800652e:	f001 fc01 	bl	8007d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006532:	4b37      	ldr	r3, [pc, #220]	; (8006610 <HAL_I2C_MspInit+0x174>)
 8006534:	69db      	ldr	r3, [r3, #28]
 8006536:	4a36      	ldr	r2, [pc, #216]	; (8006610 <HAL_I2C_MspInit+0x174>)
 8006538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800653c:	61d3      	str	r3, [r2, #28]
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <HAL_I2C_MspInit+0x174>)
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800654a:	2200      	movs	r2, #0
 800654c:	2100      	movs	r1, #0
 800654e:	201f      	movs	r0, #31
 8006550:	f001 fa93 	bl	8007a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006554:	201f      	movs	r0, #31
 8006556:	f001 faac 	bl	8007ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800655a:	e052      	b.n	8006602 <HAL_I2C_MspInit+0x166>
  else if(hi2c->Instance==I2C2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a2d      	ldr	r2, [pc, #180]	; (8006618 <HAL_I2C_MspInit+0x17c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d14d      	bne.n	8006602 <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006566:	4b2a      	ldr	r3, [pc, #168]	; (8006610 <HAL_I2C_MspInit+0x174>)
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	4a29      	ldr	r2, [pc, #164]	; (8006610 <HAL_I2C_MspInit+0x174>)
 800656c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006570:	6153      	str	r3, [r2, #20]
 8006572:	4b27      	ldr	r3, [pc, #156]	; (8006610 <HAL_I2C_MspInit+0x174>)
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800657e:	4b24      	ldr	r3, [pc, #144]	; (8006610 <HAL_I2C_MspInit+0x174>)
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	4a23      	ldr	r2, [pc, #140]	; (8006610 <HAL_I2C_MspInit+0x174>)
 8006584:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006588:	6153      	str	r3, [r2, #20]
 800658a:	4b21      	ldr	r3, [pc, #132]	; (8006610 <HAL_I2C_MspInit+0x174>)
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006592:	613b      	str	r3, [r7, #16]
 8006594:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800659c:	2312      	movs	r3, #18
 800659e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065a4:	2303      	movs	r3, #3
 80065a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80065a8:	2304      	movs	r3, #4
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b0:	4619      	mov	r1, r3
 80065b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065b6:	f001 fbbd 	bl	8007d34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80065ba:	2340      	movs	r3, #64	; 0x40
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065be:	2312      	movs	r3, #18
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065c6:	2303      	movs	r3, #3
 80065c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80065ca:	2304      	movs	r3, #4
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065d2:	4619      	mov	r1, r3
 80065d4:	4811      	ldr	r0, [pc, #68]	; (800661c <HAL_I2C_MspInit+0x180>)
 80065d6:	f001 fbad 	bl	8007d34 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80065da:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	4a0c      	ldr	r2, [pc, #48]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80065e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065e4:	61d3      	str	r3, [r2, #28]
 80065e6:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <HAL_I2C_MspInit+0x174>)
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ee:	60fb      	str	r3, [r7, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80065f2:	2200      	movs	r2, #0
 80065f4:	2100      	movs	r1, #0
 80065f6:	2021      	movs	r0, #33	; 0x21
 80065f8:	f001 fa3f 	bl	8007a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80065fc:	2021      	movs	r0, #33	; 0x21
 80065fe:	f001 fa58 	bl	8007ab2 <HAL_NVIC_EnableIRQ>
}
 8006602:	bf00      	nop
 8006604:	3738      	adds	r7, #56	; 0x38
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	40005400 	.word	0x40005400
 8006610:	40021000 	.word	0x40021000
 8006614:	48000400 	.word	0x48000400
 8006618:	40005800 	.word	0x40005800
 800661c:	48001400 	.word	0x48001400

08006620 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b08a      	sub	sp, #40	; 0x28
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006628:	f107 0314 	add.w	r3, r7, #20
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	605a      	str	r2, [r3, #4]
 8006632:	609a      	str	r2, [r3, #8]
 8006634:	60da      	str	r2, [r3, #12]
 8006636:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <HAL_SPI_MspInit+0xc8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d14e      	bne.n	80066e0 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006642:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <HAL_SPI_MspInit+0xcc>)
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	4a29      	ldr	r2, [pc, #164]	; (80066ec <HAL_SPI_MspInit+0xcc>)
 8006648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800664c:	6193      	str	r3, [r2, #24]
 800664e:	4b27      	ldr	r3, [pc, #156]	; (80066ec <HAL_SPI_MspInit+0xcc>)
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800665a:	4b24      	ldr	r3, [pc, #144]	; (80066ec <HAL_SPI_MspInit+0xcc>)
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	4a23      	ldr	r2, [pc, #140]	; (80066ec <HAL_SPI_MspInit+0xcc>)
 8006660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006664:	6153      	str	r3, [r2, #20]
 8006666:	4b21      	ldr	r3, [pc, #132]	; (80066ec <HAL_SPI_MspInit+0xcc>)
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8006672:	23b0      	movs	r3, #176	; 0xb0
 8006674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006676:	2302      	movs	r3, #2
 8006678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800667a:	2300      	movs	r3, #0
 800667c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800667e:	2303      	movs	r3, #3
 8006680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006682:	2305      	movs	r3, #5
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006686:	f107 0314 	add.w	r3, r7, #20
 800668a:	4619      	mov	r1, r3
 800668c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006690:	f001 fb50 	bl	8007d34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8006694:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 8006696:	4a17      	ldr	r2, [pc, #92]	; (80066f4 <HAL_SPI_MspInit+0xd4>)
 8006698:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800669a:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 800669c:	2210      	movs	r2, #16
 800669e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066a0:	4b13      	ldr	r3, [pc, #76]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80066a6:	4b12      	ldr	r3, [pc, #72]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066a8:	2280      	movs	r2, #128	; 0x80
 80066aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066ac:	4b10      	ldr	r3, [pc, #64]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066b2:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80066b8:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80066c4:	480a      	ldr	r0, [pc, #40]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066c6:	f001 fa0e 	bl	8007ae6 <HAL_DMA_Init>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 80066d0:	f7ff fdcc 	bl	800626c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a06      	ldr	r2, [pc, #24]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066d8:	655a      	str	r2, [r3, #84]	; 0x54
 80066da:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <HAL_SPI_MspInit+0xd0>)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80066e0:	bf00      	nop
 80066e2:	3728      	adds	r7, #40	; 0x28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	40013000 	.word	0x40013000
 80066ec:	40021000 	.word	0x40021000
 80066f0:	20000c2c 	.word	0x20000c2c
 80066f4:	40020030 	.word	0x40020030

080066f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a0d      	ldr	r2, [pc, #52]	; (800673c <HAL_TIM_Base_MspInit+0x44>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d113      	bne.n	8006732 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800670a:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <HAL_TIM_Base_MspInit+0x48>)
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	4a0c      	ldr	r2, [pc, #48]	; (8006740 <HAL_TIM_Base_MspInit+0x48>)
 8006710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006714:	6193      	str	r3, [r2, #24]
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <HAL_TIM_Base_MspInit+0x48>)
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006722:	2200      	movs	r2, #0
 8006724:	2100      	movs	r1, #0
 8006726:	2019      	movs	r0, #25
 8006728:	f001 f9a7 	bl	8007a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800672c:	2019      	movs	r0, #25
 800672e:	f001 f9c0 	bl	8007ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006732:	bf00      	nop
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40014400 	.word	0x40014400
 8006740:	40021000 	.word	0x40021000

08006744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006748:	e7fe      	b.n	8006748 <NMI_Handler+0x4>

0800674a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800674a:	b480      	push	{r7}
 800674c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800674e:	e7fe      	b.n	800674e <HardFault_Handler+0x4>

08006750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006754:	e7fe      	b.n	8006754 <MemManage_Handler+0x4>

08006756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006756:	b480      	push	{r7}
 8006758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800675a:	e7fe      	b.n	800675a <BusFault_Handler+0x4>

0800675c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006760:	e7fe      	b.n	8006760 <UsageFault_Handler+0x4>

08006762 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006762:	b480      	push	{r7}
 8006764:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006766:	bf00      	nop
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800677e:	b480      	push	{r7}
 8006780:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006782:	bf00      	nop
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006790:	f000 fa30 	bl	8006bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006794:	bf00      	nop
 8006796:	bd80      	pop	{r7, pc}

08006798 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800679c:	2001      	movs	r0, #1
 800679e:	f001 fc73 	bl	8008088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80067a2:	bf00      	nop
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80067aa:	2002      	movs	r0, #2
 80067ac:	f001 fc6c 	bl	8008088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80067b0:	bf00      	nop
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80067b8:	4802      	ldr	r0, [pc, #8]	; (80067c4 <DMA1_Channel3_IRQHandler+0x10>)
 80067ba:	f001 f9db 	bl	8007b74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80067be:	bf00      	nop
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000c2c 	.word	0x20000c2c

080067c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80067cc:	4802      	ldr	r0, [pc, #8]	; (80067d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80067ce:	f004 f8cf 	bl	800a970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	20000c70 	.word	0x20000c70

080067dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80067e0:	4802      	ldr	r0, [pc, #8]	; (80067ec <I2C1_EV_IRQHandler+0x10>)
 80067e2:	f002 f81b 	bl	800881c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80067e6:	bf00      	nop
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000b20 	.word	0x20000b20

080067f0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80067f4:	4802      	ldr	r0, [pc, #8]	; (8006800 <I2C2_EV_IRQHandler+0x10>)
 80067f6:	f002 f811 	bl	800881c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80067fa:	bf00      	nop
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000b74 	.word	0x20000b74

08006804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006804:	b480      	push	{r7}
 8006806:	af00      	add	r7, sp, #0
  return 1;
 8006808:	2301      	movs	r3, #1
}
 800680a:	4618      	mov	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <_kill>:

int _kill(int pid, int sig)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800681e:	f004 fa9d 	bl	800ad5c <__errno>
 8006822:	4603      	mov	r3, r0
 8006824:	2216      	movs	r2, #22
 8006826:	601a      	str	r2, [r3, #0]
  return -1;
 8006828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800682c:	4618      	mov	r0, r3
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <_exit>:

void _exit (int status)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800683c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff ffe7 	bl	8006814 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006846:	e7fe      	b.n	8006846 <_exit+0x12>

08006848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	e00a      	b.n	8006870 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800685a:	f3af 8000 	nop.w
 800685e:	4601      	mov	r1, r0
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	60ba      	str	r2, [r7, #8]
 8006866:	b2ca      	uxtb	r2, r1
 8006868:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	3301      	adds	r3, #1
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	429a      	cmp	r2, r3
 8006876:	dbf0      	blt.n	800685a <_read+0x12>
  }

  return len;
 8006878:	687b      	ldr	r3, [r7, #4]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b086      	sub	sp, #24
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	e009      	b.n	80068a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	60ba      	str	r2, [r7, #8]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	3301      	adds	r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	dbf1      	blt.n	8006894 <_write+0x12>
  }
  return len;
 80068b0:	687b      	ldr	r3, [r7, #4]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3718      	adds	r7, #24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <_close>:

int _close(int file)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80068c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068e2:	605a      	str	r2, [r3, #4]
  return 0;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <_isatty>:

int _isatty(int file)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b083      	sub	sp, #12
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80068fa:	2301      	movs	r3, #1
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
	...

08006924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800692c:	4a14      	ldr	r2, [pc, #80]	; (8006980 <_sbrk+0x5c>)
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <_sbrk+0x60>)
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006938:	4b13      	ldr	r3, [pc, #76]	; (8006988 <_sbrk+0x64>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <_sbrk+0x64>)
 8006942:	4a12      	ldr	r2, [pc, #72]	; (800698c <_sbrk+0x68>)
 8006944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006946:	4b10      	ldr	r3, [pc, #64]	; (8006988 <_sbrk+0x64>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	429a      	cmp	r2, r3
 8006952:	d207      	bcs.n	8006964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006954:	f004 fa02 	bl	800ad5c <__errno>
 8006958:	4603      	mov	r3, r0
 800695a:	220c      	movs	r2, #12
 800695c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800695e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006962:	e009      	b.n	8006978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006964:	4b08      	ldr	r3, [pc, #32]	; (8006988 <_sbrk+0x64>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <_sbrk+0x64>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	4a05      	ldr	r2, [pc, #20]	; (8006988 <_sbrk+0x64>)
 8006974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	2000a000 	.word	0x2000a000
 8006984:	00000400 	.word	0x00000400
 8006988:	20000fb4 	.word	0x20000fb4
 800698c:	20000fd0 	.word	0x20000fd0

08006990 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006994:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <SystemInit+0x20>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	4a05      	ldr	r2, [pc, #20]	; (80069b0 <SystemInit+0x20>)
 800699c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000ed00 	.word	0xe000ed00

080069b4 <max>:
#include "utils.h"

float max(float a, float b) {
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80069be:	edc7 0a00 	vstr	s1, [r7]
    if (a >= b) {
 80069c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80069c6:	edd7 7a00 	vldr	s15, [r7]
 80069ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	db01      	blt.n	80069d8 <max+0x24>
        return a;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	e000      	b.n	80069da <max+0x26>
    }
    return b;
 80069d8:	683b      	ldr	r3, [r7, #0]
}
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eeb0 0a67 	vmov.f32	s0, s15
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <min>:

float min(float a, float b) {
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80069f6:	edc7 0a00 	vstr	s1, [r7]
    if (a <= b) {
 80069fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80069fe:	edd7 7a00 	vldr	s15, [r7]
 8006a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0a:	d801      	bhi.n	8006a10 <min+0x24>
        return a;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	e000      	b.n	8006a12 <min+0x26>
    }
    return b;
 8006a10:	683b      	ldr	r3, [r7, #0]
}
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eeb0 0a67 	vmov.f32	s0, s15
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <lerp>:
    }
    return val;
}

float lerp(float a, float b, float t)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8006a2e:	edc7 0a02 	vstr	s1, [r7, #8]
 8006a32:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + (b - a) * t;
 8006a36:	ed97 7a02 	vldr	s14, [r7, #8]
 8006a3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006a52:	eeb0 0a67 	vmov.f32	s0, s15
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <map>:

float map(float value, float in_min, float in_max, float out_min, float out_max) {
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	ed87 0a05 	vstr	s0, [r7, #20]
 8006a6a:	edc7 0a04 	vstr	s1, [r7, #16]
 8006a6e:	ed87 1a03 	vstr	s2, [r7, #12]
 8006a72:	edc7 1a02 	vstr	s3, [r7, #8]
 8006a76:	ed87 2a01 	vstr	s4, [r7, #4]
    if (value >= in_max) {
 8006a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8a:	db02      	blt.n	8006a92 <map+0x32>
        return out_max;
 8006a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a90:	e025      	b.n	8006ade <map+0x7e>
    }
    if (value <= in_min) {
 8006a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a96:	edd7 7a04 	vldr	s15, [r7, #16]
 8006a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa2:	d802      	bhi.n	8006aaa <map+0x4a>
        return out_min;
 8006aa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8006aa8:	e019      	b.n	8006ade <map+0x7e>
    }
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006aaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8006aae:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ab2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ab6:	edd7 6a01 	vldr	s13, [r7, #4]
 8006aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8006abe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006ac2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006ac6:	ed97 7a03 	vldr	s14, [r7, #12]
 8006aca:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ada:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006ade:	eeb0 0a67 	vmov.f32	s0, s15
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <convert_period_to_freq>:

float convert_period_to_freq(float period) {
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 / period;
 8006af6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006afa:	edd7 7a01 	vldr	s15, [r7, #4]
 8006afe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006b02:	eef0 7a66 	vmov.f32	s15, s13
}
 8006b06:	eeb0 0a67 	vmov.f32	s0, s15
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b4c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8006b18:	f7ff ff3a 	bl	8006990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b1c:	480c      	ldr	r0, [pc, #48]	; (8006b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8006b1e:	490d      	ldr	r1, [pc, #52]	; (8006b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006b20:	4a0d      	ldr	r2, [pc, #52]	; (8006b58 <LoopForever+0xe>)
  movs r3, #0
 8006b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b24:	e002      	b.n	8006b2c <LoopCopyDataInit>

08006b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b2a:	3304      	adds	r3, #4

08006b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b30:	d3f9      	bcc.n	8006b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b32:	4a0a      	ldr	r2, [pc, #40]	; (8006b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006b34:	4c0a      	ldr	r4, [pc, #40]	; (8006b60 <LoopForever+0x16>)
  movs r3, #0
 8006b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b38:	e001      	b.n	8006b3e <LoopFillZerobss>

08006b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b3c:	3204      	adds	r2, #4

08006b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b40:	d3fb      	bcc.n	8006b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b42:	f004 f911 	bl	800ad68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006b46:	f7fe fdb9 	bl	80056bc <main>

08006b4a <LoopForever>:

LoopForever:
    b LoopForever
 8006b4a:	e7fe      	b.n	8006b4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006b4c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8006b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b54:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8006b58:	08010b98 	.word	0x08010b98
  ldr r2, =_sbss
 8006b5c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8006b60:	20000fcc 	.word	0x20000fcc

08006b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006b64:	e7fe      	b.n	8006b64 <ADC1_2_IRQHandler>
	...

08006b68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006b6c:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <HAL_Init+0x28>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a07      	ldr	r2, [pc, #28]	; (8006b90 <HAL_Init+0x28>)
 8006b72:	f043 0310 	orr.w	r3, r3, #16
 8006b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b78:	2003      	movs	r0, #3
 8006b7a:	f000 ff73 	bl	8007a64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006b7e:	200f      	movs	r0, #15
 8006b80:	f000 f808 	bl	8006b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006b84:	f7ff fb78 	bl	8006278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40022000 	.word	0x40022000

08006b94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006b9c:	4b12      	ldr	r3, [pc, #72]	; (8006be8 <HAL_InitTick+0x54>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	4b12      	ldr	r3, [pc, #72]	; (8006bec <HAL_InitTick+0x58>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 ff8b 	bl	8007ace <HAL_SYSTICK_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e00e      	b.n	8006be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b0f      	cmp	r3, #15
 8006bc6:	d80a      	bhi.n	8006bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006bc8:	2200      	movs	r2, #0
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bd0:	f000 ff53 	bl	8007a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006bd4:	4a06      	ldr	r2, [pc, #24]	; (8006bf0 <HAL_InitTick+0x5c>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e000      	b.n	8006be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000054 	.word	0x20000054
 8006bec:	2000005c 	.word	0x2000005c
 8006bf0:	20000058 	.word	0x20000058

08006bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006bf8:	4b06      	ldr	r3, [pc, #24]	; (8006c14 <HAL_IncTick+0x20>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <HAL_IncTick+0x24>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4413      	add	r3, r2
 8006c04:	4a04      	ldr	r2, [pc, #16]	; (8006c18 <HAL_IncTick+0x24>)
 8006c06:	6013      	str	r3, [r2, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	2000005c 	.word	0x2000005c
 8006c18:	20000fb8 	.word	0x20000fb8

08006c1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8006c20:	4b03      	ldr	r3, [pc, #12]	; (8006c30 <HAL_GetTick+0x14>)
 8006c22:	681b      	ldr	r3, [r3, #0]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000fb8 	.word	0x20000fb8

08006c34 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c3c:	f7ff ffee 	bl	8006c1c <HAL_GetTick>
 8006c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4c:	d005      	beq.n	8006c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <HAL_Delay+0x44>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	461a      	mov	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006c5a:	bf00      	nop
 8006c5c:	f7ff ffde 	bl	8006c1c <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d8f7      	bhi.n	8006c5c <HAL_Delay+0x28>
  {
  }
}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	2000005c 	.word	0x2000005c

08006c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b09a      	sub	sp, #104	; 0x68
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e1c9      	b.n	8007030 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	f003 0310 	and.w	r3, r3, #16
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d176      	bne.n	8006d9c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d152      	bne.n	8006d5c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff faf5 	bl	80062c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d13b      	bne.n	8006d5c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fd87 	bl	80077f8 <ADC_Disable>
 8006cea:	4603      	mov	r3, r0
 8006cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d12f      	bne.n	8006d5c <HAL_ADC_Init+0xe0>
 8006cfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d12b      	bne.n	8006d5c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006d0c:	f023 0302 	bic.w	r3, r3, #2
 8006d10:	f043 0202 	orr.w	r2, r3, #2
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d26:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006d36:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d38:	4b86      	ldr	r3, [pc, #536]	; (8006f54 <HAL_ADC_Init+0x2d8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a86      	ldr	r2, [pc, #536]	; (8006f58 <HAL_ADC_Init+0x2dc>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	0c9a      	lsrs	r2, r3, #18
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006d4e:	e002      	b.n	8006d56 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f9      	bne.n	8006d50 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d78:	d110      	bne.n	8006d9c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7e:	f023 0312 	bic.w	r3, r3, #18
 8006d82:	f043 0210 	orr.w	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8e:	f043 0201 	orr.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f040 8136 	bne.w	8007016 <HAL_ADC_Init+0x39a>
 8006daa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 8131 	bne.w	8007016 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f040 8129 	bne.w	8007016 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006dcc:	f043 0202 	orr.w	r2, r3, #2
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ddc:	d004      	beq.n	8006de8 <HAL_ADC_Init+0x16c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a5e      	ldr	r2, [pc, #376]	; (8006f5c <HAL_ADC_Init+0x2e0>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d101      	bne.n	8006dec <HAL_ADC_Init+0x170>
 8006de8:	4b5d      	ldr	r3, [pc, #372]	; (8006f60 <HAL_ADC_Init+0x2e4>)
 8006dea:	e000      	b.n	8006dee <HAL_ADC_Init+0x172>
 8006dec:	4b5d      	ldr	r3, [pc, #372]	; (8006f64 <HAL_ADC_Init+0x2e8>)
 8006dee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006df8:	d102      	bne.n	8006e00 <HAL_ADC_Init+0x184>
 8006dfa:	4b58      	ldr	r3, [pc, #352]	; (8006f5c <HAL_ADC_Init+0x2e0>)
 8006dfc:	60fb      	str	r3, [r7, #12]
 8006dfe:	e01a      	b.n	8006e36 <HAL_ADC_Init+0x1ba>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a55      	ldr	r2, [pc, #340]	; (8006f5c <HAL_ADC_Init+0x2e0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d103      	bne.n	8006e12 <HAL_ADC_Init+0x196>
 8006e0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e011      	b.n	8006e36 <HAL_ADC_Init+0x1ba>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a54      	ldr	r2, [pc, #336]	; (8006f68 <HAL_ADC_Init+0x2ec>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d102      	bne.n	8006e22 <HAL_ADC_Init+0x1a6>
 8006e1c:	4b53      	ldr	r3, [pc, #332]	; (8006f6c <HAL_ADC_Init+0x2f0>)
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	e009      	b.n	8006e36 <HAL_ADC_Init+0x1ba>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a51      	ldr	r2, [pc, #324]	; (8006f6c <HAL_ADC_Init+0x2f0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d102      	bne.n	8006e32 <HAL_ADC_Init+0x1b6>
 8006e2c:	4b4e      	ldr	r3, [pc, #312]	; (8006f68 <HAL_ADC_Init+0x2ec>)
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	e001      	b.n	8006e36 <HAL_ADC_Init+0x1ba>
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d108      	bne.n	8006e56 <HAL_ADC_Init+0x1da>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_ADC_Init+0x1da>
 8006e52:	2301      	movs	r3, #1
 8006e54:	e000      	b.n	8006e58 <HAL_ADC_Init+0x1dc>
 8006e56:	2300      	movs	r3, #0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d11c      	bne.n	8006e96 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006e5c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d010      	beq.n	8006e84 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d107      	bne.n	8006e7e <HAL_ADC_Init+0x202>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0301 	and.w	r3, r3, #1
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <HAL_ADC_Init+0x202>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <HAL_ADC_Init+0x204>
 8006e7e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d108      	bne.n	8006e96 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8006e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	431a      	orrs	r2, r3
 8006e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e94:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7e5b      	ldrb	r3, [r3, #25]
 8006e9a:	035b      	lsls	r3, r3, #13
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ea0:	2a01      	cmp	r2, #1
 8006ea2:	d002      	beq.n	8006eaa <HAL_ADC_Init+0x22e>
 8006ea4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ea8:	e000      	b.n	8006eac <HAL_ADC_Init+0x230>
 8006eaa:	2200      	movs	r2, #0
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d11b      	bne.n	8006f02 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7e5b      	ldrb	r3, [r3, #25]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	045a      	lsls	r2, r3, #17
 8006eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ee4:	e00d      	b.n	8006f02 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006eee:	f043 0220 	orr.w	r2, r3, #32
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efa:	f043 0201 	orr.w	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d03a      	beq.n	8006f80 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <HAL_ADC_Init+0x2ec>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d004      	beq.n	8006f1e <HAL_ADC_Init+0x2a2>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a14      	ldr	r2, [pc, #80]	; (8006f6c <HAL_ADC_Init+0x2f0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d128      	bne.n	8006f70 <HAL_ADC_Init+0x2f4>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8006f26:	d012      	beq.n	8006f4e <HAL_ADC_Init+0x2d2>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f30:	d00a      	beq.n	8006f48 <HAL_ADC_Init+0x2cc>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f36:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8006f3a:	d002      	beq.n	8006f42 <HAL_ADC_Init+0x2c6>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f40:	e018      	b.n	8006f74 <HAL_ADC_Init+0x2f8>
 8006f42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f46:	e015      	b.n	8006f74 <HAL_ADC_Init+0x2f8>
 8006f48:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8006f4c:	e012      	b.n	8006f74 <HAL_ADC_Init+0x2f8>
 8006f4e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8006f52:	e00f      	b.n	8006f74 <HAL_ADC_Init+0x2f8>
 8006f54:	20000054 	.word	0x20000054
 8006f58:	431bde83 	.word	0x431bde83
 8006f5c:	50000100 	.word	0x50000100
 8006f60:	50000300 	.word	0x50000300
 8006f64:	50000700 	.word	0x50000700
 8006f68:	50000400 	.word	0x50000400
 8006f6c:	50000500 	.word	0x50000500
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 030c 	and.w	r3, r3, #12
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d114      	bne.n	8006fb8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f9c:	f023 0302 	bic.w	r3, r3, #2
 8006fa0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	7e1b      	ldrb	r3, [r3, #24]
 8006fa6:	039a      	lsls	r2, r3, #14
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68da      	ldr	r2, [r3, #12]
 8006fbe:	4b1e      	ldr	r3, [pc, #120]	; (8007038 <HAL_ADC_Init+0x3bc>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d10c      	bne.n	8006fee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f023 010f 	bic.w	r1, r3, #15
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	1e5a      	subs	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
 8006fec:	e007      	b.n	8006ffe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f022 020f 	bic.w	r2, r2, #15
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	f023 0303 	bic.w	r3, r3, #3
 800700c:	f043 0201 	orr.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
 8007014:	e00a      	b.n	800702c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f023 0312 	bic.w	r3, r3, #18
 800701e:	f043 0210 	orr.w	r2, r3, #16
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8007026:	2301      	movs	r3, #1
 8007028:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800702c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007030:	4618      	mov	r0, r3
 8007032:	3768      	adds	r7, #104	; 0x68
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	fff0c007 	.word	0xfff0c007

0800703c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800703c:	b480      	push	{r7}
 800703e:	b09b      	sub	sp, #108	; 0x6c
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800704c:	2300      	movs	r3, #0
 800704e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_ADC_ConfigChannel+0x22>
 800705a:	2302      	movs	r3, #2
 800705c:	e2ca      	b.n	80075f4 <HAL_ADC_ConfigChannel+0x5b8>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	f040 82ae 	bne.w	80075d2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b04      	cmp	r3, #4
 800707c:	d81c      	bhi.n	80070b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	4613      	mov	r3, r2
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	4413      	add	r3, r2
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	461a      	mov	r2, r3
 8007092:	231f      	movs	r3, #31
 8007094:	4093      	lsls	r3, r2
 8007096:	43db      	mvns	r3, r3
 8007098:	4019      	ands	r1, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	4613      	mov	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4413      	add	r3, r2
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	fa00 f203 	lsl.w	r2, r0, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	631a      	str	r2, [r3, #48]	; 0x30
 80070b6:	e063      	b.n	8007180 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b09      	cmp	r3, #9
 80070be:	d81e      	bhi.n	80070fe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	4413      	add	r3, r2
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	3b1e      	subs	r3, #30
 80070d4:	221f      	movs	r2, #31
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	43db      	mvns	r3, r3
 80070dc:	4019      	ands	r1, r3
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	6818      	ldr	r0, [r3, #0]
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	4613      	mov	r3, r2
 80070e8:	005b      	lsls	r3, r3, #1
 80070ea:	4413      	add	r3, r2
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	3b1e      	subs	r3, #30
 80070f0:	fa00 f203 	lsl.w	r2, r0, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	635a      	str	r2, [r3, #52]	; 0x34
 80070fc:	e040      	b.n	8007180 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2b0e      	cmp	r3, #14
 8007104:	d81e      	bhi.n	8007144 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	4613      	mov	r3, r2
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	4413      	add	r3, r2
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	3b3c      	subs	r3, #60	; 0x3c
 800711a:	221f      	movs	r2, #31
 800711c:	fa02 f303 	lsl.w	r3, r2, r3
 8007120:	43db      	mvns	r3, r3
 8007122:	4019      	ands	r1, r3
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	4613      	mov	r3, r2
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	4413      	add	r3, r2
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	3b3c      	subs	r3, #60	; 0x3c
 8007136:	fa00 f203 	lsl.w	r2, r0, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	639a      	str	r2, [r3, #56]	; 0x38
 8007142:	e01d      	b.n	8007180 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	3b5a      	subs	r3, #90	; 0x5a
 8007158:	221f      	movs	r2, #31
 800715a:	fa02 f303 	lsl.w	r3, r2, r3
 800715e:	43db      	mvns	r3, r3
 8007160:	4019      	ands	r1, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	4413      	add	r3, r2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	3b5a      	subs	r3, #90	; 0x5a
 8007174:	fa00 f203 	lsl.w	r2, r0, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f003 030c 	and.w	r3, r3, #12
 800718a:	2b00      	cmp	r3, #0
 800718c:	f040 80e5 	bne.w	800735a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b09      	cmp	r3, #9
 8007196:	d91c      	bls.n	80071d2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6999      	ldr	r1, [r3, #24]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4613      	mov	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4413      	add	r3, r2
 80071a8:	3b1e      	subs	r3, #30
 80071aa:	2207      	movs	r2, #7
 80071ac:	fa02 f303 	lsl.w	r3, r2, r3
 80071b0:	43db      	mvns	r3, r3
 80071b2:	4019      	ands	r1, r3
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	6898      	ldr	r0, [r3, #8]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	4413      	add	r3, r2
 80071c2:	3b1e      	subs	r3, #30
 80071c4:	fa00 f203 	lsl.w	r2, r0, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	619a      	str	r2, [r3, #24]
 80071d0:	e019      	b.n	8007206 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6959      	ldr	r1, [r3, #20]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	4613      	mov	r3, r2
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	4413      	add	r3, r2
 80071e2:	2207      	movs	r2, #7
 80071e4:	fa02 f303 	lsl.w	r3, r2, r3
 80071e8:	43db      	mvns	r3, r3
 80071ea:	4019      	ands	r1, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	6898      	ldr	r0, [r3, #8]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	4613      	mov	r3, r2
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	4413      	add	r3, r2
 80071fa:	fa00 f203 	lsl.w	r2, r0, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	695a      	ldr	r2, [r3, #20]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	08db      	lsrs	r3, r3, #3
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	3b01      	subs	r3, #1
 8007224:	2b03      	cmp	r3, #3
 8007226:	d84f      	bhi.n	80072c8 <HAL_ADC_ConfigChannel+0x28c>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <HAL_ADC_ConfigChannel+0x1f4>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007241 	.word	0x08007241
 8007234:	08007263 	.word	0x08007263
 8007238:	08007285 	.word	0x08007285
 800723c:	080072a7 	.word	0x080072a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007246:	4b9a      	ldr	r3, [pc, #616]	; (80074b0 <HAL_ADC_ConfigChannel+0x474>)
 8007248:	4013      	ands	r3, r2
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	0691      	lsls	r1, r2, #26
 8007250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007252:	430a      	orrs	r2, r1
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800725e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007260:	e07e      	b.n	8007360 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007268:	4b91      	ldr	r3, [pc, #580]	; (80074b0 <HAL_ADC_ConfigChannel+0x474>)
 800726a:	4013      	ands	r3, r2
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	0691      	lsls	r1, r2, #26
 8007272:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007274:	430a      	orrs	r2, r1
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007280:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007282:	e06d      	b.n	8007360 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800728a:	4b89      	ldr	r3, [pc, #548]	; (80074b0 <HAL_ADC_ConfigChannel+0x474>)
 800728c:	4013      	ands	r3, r2
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	0691      	lsls	r1, r2, #26
 8007294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007296:	430a      	orrs	r2, r1
 8007298:	431a      	orrs	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80072a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80072a4:	e05c      	b.n	8007360 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80072ac:	4b80      	ldr	r3, [pc, #512]	; (80074b0 <HAL_ADC_ConfigChannel+0x474>)
 80072ae:	4013      	ands	r3, r2
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	6812      	ldr	r2, [r2, #0]
 80072b4:	0691      	lsls	r1, r2, #26
 80072b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072b8:	430a      	orrs	r2, r1
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80072c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80072c6:	e04b      	b.n	8007360 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	069b      	lsls	r3, r3, #26
 80072d8:	429a      	cmp	r2, r3
 80072da:	d107      	bne.n	80072ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80072ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	069b      	lsls	r3, r3, #26
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d107      	bne.n	8007310 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800730e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007316:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	069b      	lsls	r3, r3, #26
 8007320:	429a      	cmp	r2, r3
 8007322:	d107      	bne.n	8007334 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007332:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	069b      	lsls	r3, r3, #26
 8007344:	429a      	cmp	r2, r3
 8007346:	d10a      	bne.n	800735e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007356:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8007358:	e001      	b.n	800735e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800735a:	bf00      	nop
 800735c:	e000      	b.n	8007360 <HAL_ADC_ConfigChannel+0x324>
      break;
 800735e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	2b01      	cmp	r3, #1
 800736c:	d108      	bne.n	8007380 <HAL_ADC_ConfigChannel+0x344>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_ADC_ConfigChannel+0x344>
 800737c:	2301      	movs	r3, #1
 800737e:	e000      	b.n	8007382 <HAL_ADC_ConfigChannel+0x346>
 8007380:	2300      	movs	r3, #0
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 8130 	bne.w	80075e8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d00f      	beq.n	80073b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2201      	movs	r2, #1
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	43da      	mvns	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	400a      	ands	r2, r1
 80073aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80073ae:	e049      	b.n	8007444 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2201      	movs	r2, #1
 80073be:	409a      	lsls	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b09      	cmp	r3, #9
 80073d0:	d91c      	bls.n	800740c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6999      	ldr	r1, [r3, #24]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	4613      	mov	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	3b1b      	subs	r3, #27
 80073e4:	2207      	movs	r2, #7
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	43db      	mvns	r3, r3
 80073ec:	4019      	ands	r1, r3
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	6898      	ldr	r0, [r3, #8]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4613      	mov	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	3b1b      	subs	r3, #27
 80073fe:	fa00 f203 	lsl.w	r2, r0, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	619a      	str	r2, [r3, #24]
 800740a:	e01b      	b.n	8007444 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6959      	ldr	r1, [r3, #20]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	4613      	mov	r3, r2
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	4413      	add	r3, r2
 800741e:	2207      	movs	r2, #7
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43db      	mvns	r3, r3
 8007426:	4019      	ands	r1, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	6898      	ldr	r0, [r3, #8]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	4613      	mov	r3, r2
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	4413      	add	r3, r2
 8007438:	fa00 f203 	lsl.w	r2, r0, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800744c:	d004      	beq.n	8007458 <HAL_ADC_ConfigChannel+0x41c>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a18      	ldr	r2, [pc, #96]	; (80074b4 <HAL_ADC_ConfigChannel+0x478>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d101      	bne.n	800745c <HAL_ADC_ConfigChannel+0x420>
 8007458:	4b17      	ldr	r3, [pc, #92]	; (80074b8 <HAL_ADC_ConfigChannel+0x47c>)
 800745a:	e000      	b.n	800745e <HAL_ADC_ConfigChannel+0x422>
 800745c:	4b17      	ldr	r3, [pc, #92]	; (80074bc <HAL_ADC_ConfigChannel+0x480>)
 800745e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b10      	cmp	r3, #16
 8007466:	d105      	bne.n	8007474 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8007468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007470:	2b00      	cmp	r3, #0
 8007472:	d015      	beq.n	80074a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8007478:	2b11      	cmp	r3, #17
 800747a:	d105      	bne.n	8007488 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800747c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800748c:	2b12      	cmp	r3, #18
 800748e:	f040 80ab 	bne.w	80075e8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8007492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800749a:	2b00      	cmp	r3, #0
 800749c:	f040 80a4 	bne.w	80075e8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a8:	d10a      	bne.n	80074c0 <HAL_ADC_ConfigChannel+0x484>
 80074aa:	4b02      	ldr	r3, [pc, #8]	; (80074b4 <HAL_ADC_ConfigChannel+0x478>)
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	e022      	b.n	80074f6 <HAL_ADC_ConfigChannel+0x4ba>
 80074b0:	83fff000 	.word	0x83fff000
 80074b4:	50000100 	.word	0x50000100
 80074b8:	50000300 	.word	0x50000300
 80074bc:	50000700 	.word	0x50000700
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a4e      	ldr	r2, [pc, #312]	; (8007600 <HAL_ADC_ConfigChannel+0x5c4>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d103      	bne.n	80074d2 <HAL_ADC_ConfigChannel+0x496>
 80074ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	e011      	b.n	80074f6 <HAL_ADC_ConfigChannel+0x4ba>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a4b      	ldr	r2, [pc, #300]	; (8007604 <HAL_ADC_ConfigChannel+0x5c8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d102      	bne.n	80074e2 <HAL_ADC_ConfigChannel+0x4a6>
 80074dc:	4b4a      	ldr	r3, [pc, #296]	; (8007608 <HAL_ADC_ConfigChannel+0x5cc>)
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	e009      	b.n	80074f6 <HAL_ADC_ConfigChannel+0x4ba>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a48      	ldr	r2, [pc, #288]	; (8007608 <HAL_ADC_ConfigChannel+0x5cc>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d102      	bne.n	80074f2 <HAL_ADC_ConfigChannel+0x4b6>
 80074ec:	4b45      	ldr	r3, [pc, #276]	; (8007604 <HAL_ADC_ConfigChannel+0x5c8>)
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e001      	b.n	80074f6 <HAL_ADC_ConfigChannel+0x4ba>
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	2b01      	cmp	r3, #1
 8007502:	d108      	bne.n	8007516 <HAL_ADC_ConfigChannel+0x4da>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <HAL_ADC_ConfigChannel+0x4da>
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <HAL_ADC_ConfigChannel+0x4dc>
 8007516:	2300      	movs	r3, #0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d150      	bne.n	80075be <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800751c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800751e:	2b00      	cmp	r3, #0
 8007520:	d010      	beq.n	8007544 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d107      	bne.n	800753e <HAL_ADC_ConfigChannel+0x502>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_ADC_ConfigChannel+0x502>
 800753a:	2301      	movs	r3, #1
 800753c:	e000      	b.n	8007540 <HAL_ADC_ConfigChannel+0x504>
 800753e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007540:	2b00      	cmp	r3, #0
 8007542:	d13c      	bne.n	80075be <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b10      	cmp	r3, #16
 800754a:	d11d      	bne.n	8007588 <HAL_ADC_ConfigChannel+0x54c>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007554:	d118      	bne.n	8007588 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8007556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800755e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007560:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007562:	4b2a      	ldr	r3, [pc, #168]	; (800760c <HAL_ADC_ConfigChannel+0x5d0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a2a      	ldr	r2, [pc, #168]	; (8007610 <HAL_ADC_ConfigChannel+0x5d4>)
 8007568:	fba2 2303 	umull	r2, r3, r2, r3
 800756c:	0c9a      	lsrs	r2, r3, #18
 800756e:	4613      	mov	r3, r2
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007578:	e002      	b.n	8007580 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	3b01      	subs	r3, #1
 800757e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f9      	bne.n	800757a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8007586:	e02e      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b11      	cmp	r3, #17
 800758e:	d10b      	bne.n	80075a8 <HAL_ADC_ConfigChannel+0x56c>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007598:	d106      	bne.n	80075a8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800759a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80075a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075a4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80075a6:	e01e      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b12      	cmp	r3, #18
 80075ae:	d11a      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80075b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80075b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075ba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80075bc:	e013      	b.n	80075e6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	f043 0220 	orr.w	r2, r3, #32
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075d0:	e00a      	b.n	80075e8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	f043 0220 	orr.w	r2, r3, #32
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075e4:	e000      	b.n	80075e8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80075e6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80075f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	376c      	adds	r7, #108	; 0x6c
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr
 8007600:	50000100 	.word	0x50000100
 8007604:	50000400 	.word	0x50000400
 8007608:	50000500 	.word	0x50000500
 800760c:	20000054 	.word	0x20000054
 8007610:	431bde83 	.word	0x431bde83

08007614 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8007614:	b480      	push	{r7}
 8007616:	b099      	sub	sp, #100	; 0x64
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800762c:	d102      	bne.n	8007634 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800762e:	4b6d      	ldr	r3, [pc, #436]	; (80077e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8007630:	60bb      	str	r3, [r7, #8]
 8007632:	e01a      	b.n	800766a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a6a      	ldr	r2, [pc, #424]	; (80077e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d103      	bne.n	8007646 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800763e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007642:	60bb      	str	r3, [r7, #8]
 8007644:	e011      	b.n	800766a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a67      	ldr	r2, [pc, #412]	; (80077e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d102      	bne.n	8007656 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007650:	4b66      	ldr	r3, [pc, #408]	; (80077ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8007652:	60bb      	str	r3, [r7, #8]
 8007654:	e009      	b.n	800766a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a64      	ldr	r2, [pc, #400]	; (80077ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d102      	bne.n	8007666 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007660:	4b61      	ldr	r3, [pc, #388]	; (80077e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8007662:	60bb      	str	r3, [r7, #8]
 8007664:	e001      	b.n	800766a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8007666:	2300      	movs	r3, #0
 8007668:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e0b0      	b.n	80077d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800767e:	2302      	movs	r3, #2
 8007680:	e0a9      	b.n	80077d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	f040 808d 	bne.w	80077b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 0304 	and.w	r3, r3, #4
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	f040 8086 	bne.w	80077b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076b0:	d004      	beq.n	80076bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a4b      	ldr	r2, [pc, #300]	; (80077e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d101      	bne.n	80076c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80076bc:	4b4c      	ldr	r3, [pc, #304]	; (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80076be:	e000      	b.n	80076c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80076c0:	4b4c      	ldr	r3, [pc, #304]	; (80077f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80076c2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d040      	beq.n	800774e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80076cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	6859      	ldr	r1, [r3, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076de:	035b      	lsls	r3, r3, #13
 80076e0:	430b      	orrs	r3, r1
 80076e2:	431a      	orrs	r2, r3
 80076e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80076e6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d108      	bne.n	8007708 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b01      	cmp	r3, #1
 8007702:	d101      	bne.n	8007708 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8007708:	2300      	movs	r3, #0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d15c      	bne.n	80077c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 0303 	and.w	r3, r3, #3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d107      	bne.n	800772a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800772a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800772c:	2b00      	cmp	r3, #0
 800772e:	d14b      	bne.n	80077c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8007730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007738:	f023 030f 	bic.w	r3, r3, #15
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	6811      	ldr	r1, [r2, #0]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	6892      	ldr	r2, [r2, #8]
 8007744:	430a      	orrs	r2, r1
 8007746:	431a      	orrs	r2, r3
 8007748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800774a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800774c:	e03c      	b.n	80077c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800774e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007758:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 0303 	and.w	r3, r3, #3
 8007764:	2b01      	cmp	r3, #1
 8007766:	d108      	bne.n	800777a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8007776:	2301      	movs	r3, #1
 8007778:	e000      	b.n	800777c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800777a:	2300      	movs	r3, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d123      	bne.n	80077c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	2b01      	cmp	r3, #1
 800778a:	d107      	bne.n	800779c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800779c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d112      	bne.n	80077c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80077a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80077aa:	f023 030f 	bic.w	r3, r3, #15
 80077ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077b0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80077b2:	e009      	b.n	80077c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	f043 0220 	orr.w	r2, r3, #32
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80077c6:	e000      	b.n	80077ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80077c8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80077d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80077d6:	4618      	mov	r0, r3
 80077d8:	3764      	adds	r7, #100	; 0x64
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	50000100 	.word	0x50000100
 80077e8:	50000400 	.word	0x50000400
 80077ec:	50000500 	.word	0x50000500
 80077f0:	50000300 	.word	0x50000300
 80077f4:	50000700 	.word	0x50000700

080077f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b01      	cmp	r3, #1
 8007810:	d108      	bne.n	8007824 <ADC_Disable+0x2c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <ADC_Disable+0x2c>
 8007820:	2301      	movs	r3, #1
 8007822:	e000      	b.n	8007826 <ADC_Disable+0x2e>
 8007824:	2300      	movs	r3, #0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d047      	beq.n	80078ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 030d 	and.w	r3, r3, #13
 8007834:	2b01      	cmp	r3, #1
 8007836:	d10f      	bne.n	8007858 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0202 	orr.w	r2, r2, #2
 8007846:	609a      	str	r2, [r3, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2203      	movs	r2, #3
 800784e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8007850:	f7ff f9e4 	bl	8006c1c <HAL_GetTick>
 8007854:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007856:	e029      	b.n	80078ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	f043 0210 	orr.w	r2, r3, #16
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007868:	f043 0201 	orr.w	r2, r3, #1
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e023      	b.n	80078bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007874:	f7ff f9d2 	bl	8006c1c <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d914      	bls.n	80078ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	d10d      	bne.n	80078ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	f043 0210 	orr.w	r2, r3, #16
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	f043 0201 	orr.w	r2, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e007      	b.n	80078bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d0dc      	beq.n	8007874 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f003 0307 	and.w	r3, r3, #7
 80078d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <__NVIC_SetPriorityGrouping+0x44>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078e0:	4013      	ands	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80078f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80078f6:	4a04      	ldr	r2, [pc, #16]	; (8007908 <__NVIC_SetPriorityGrouping+0x44>)
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	60d3      	str	r3, [r2, #12]
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	e000ed00 	.word	0xe000ed00

0800790c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <__NVIC_GetPriorityGrouping+0x18>)
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	0a1b      	lsrs	r3, r3, #8
 8007916:	f003 0307 	and.w	r3, r3, #7
}
 800791a:	4618      	mov	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	e000ed00 	.word	0xe000ed00

08007928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007936:	2b00      	cmp	r3, #0
 8007938:	db0b      	blt.n	8007952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	f003 021f 	and.w	r2, r3, #31
 8007940:	4907      	ldr	r1, [pc, #28]	; (8007960 <__NVIC_EnableIRQ+0x38>)
 8007942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	2001      	movs	r0, #1
 800794a:	fa00 f202 	lsl.w	r2, r0, r2
 800794e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	e000e100 	.word	0xe000e100

08007964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	4603      	mov	r3, r0
 800796c:	6039      	str	r1, [r7, #0]
 800796e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007974:	2b00      	cmp	r3, #0
 8007976:	db0a      	blt.n	800798e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	b2da      	uxtb	r2, r3
 800797c:	490c      	ldr	r1, [pc, #48]	; (80079b0 <__NVIC_SetPriority+0x4c>)
 800797e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007982:	0112      	lsls	r2, r2, #4
 8007984:	b2d2      	uxtb	r2, r2
 8007986:	440b      	add	r3, r1
 8007988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800798c:	e00a      	b.n	80079a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	b2da      	uxtb	r2, r3
 8007992:	4908      	ldr	r1, [pc, #32]	; (80079b4 <__NVIC_SetPriority+0x50>)
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	3b04      	subs	r3, #4
 800799c:	0112      	lsls	r2, r2, #4
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	440b      	add	r3, r1
 80079a2:	761a      	strb	r2, [r3, #24]
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	e000e100 	.word	0xe000e100
 80079b4:	e000ed00 	.word	0xe000ed00

080079b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b089      	sub	sp, #36	; 0x24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f1c3 0307 	rsb	r3, r3, #7
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	bf28      	it	cs
 80079d6:	2304      	movcs	r3, #4
 80079d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	3304      	adds	r3, #4
 80079de:	2b06      	cmp	r3, #6
 80079e0:	d902      	bls.n	80079e8 <NVIC_EncodePriority+0x30>
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	3b03      	subs	r3, #3
 80079e6:	e000      	b.n	80079ea <NVIC_EncodePriority+0x32>
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	fa02 f303 	lsl.w	r3, r2, r3
 80079f6:	43da      	mvns	r2, r3
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	401a      	ands	r2, r3
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0a:	43d9      	mvns	r1, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a10:	4313      	orrs	r3, r2
         );
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3724      	adds	r7, #36	; 0x24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a30:	d301      	bcc.n	8007a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007a32:	2301      	movs	r3, #1
 8007a34:	e00f      	b.n	8007a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a36:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <SysTick_Config+0x40>)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007a3e:	210f      	movs	r1, #15
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a44:	f7ff ff8e 	bl	8007964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <SysTick_Config+0x40>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a4e:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <SysTick_Config+0x40>)
 8007a50:	2207      	movs	r2, #7
 8007a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	e000e010 	.word	0xe000e010

08007a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff ff29 	bl	80078c4 <__NVIC_SetPriorityGrouping>
}
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b086      	sub	sp, #24
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	4603      	mov	r3, r0
 8007a82:	60b9      	str	r1, [r7, #8]
 8007a84:	607a      	str	r2, [r7, #4]
 8007a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a8c:	f7ff ff3e 	bl	800790c <__NVIC_GetPriorityGrouping>
 8007a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	68b9      	ldr	r1, [r7, #8]
 8007a96:	6978      	ldr	r0, [r7, #20]
 8007a98:	f7ff ff8e 	bl	80079b8 <NVIC_EncodePriority>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f7ff ff5d 	bl	8007964 <__NVIC_SetPriority>
}
 8007aaa:	bf00      	nop
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	4603      	mov	r3, r0
 8007aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff ff31 	bl	8007928 <__NVIC_EnableIRQ>
}
 8007ac6:	bf00      	nop
 8007ac8:	3708      	adds	r7, #8
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b082      	sub	sp, #8
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff ffa2 	bl	8007a20 <SysTick_Config>
 8007adc:	4603      	mov	r3, r0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e037      	b.n	8007b6c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007b12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007b16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8b4 	bl	8007cbc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}  
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	2204      	movs	r2, #4
 8007b92:	409a      	lsls	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4013      	ands	r3, r2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d024      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x72>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01f      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d107      	bne.n	8007bc4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0204 	bic.w	r2, r2, #4
 8007bc2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bcc:	2104      	movs	r1, #4
 8007bce:	fa01 f202 	lsl.w	r2, r1, r2
 8007bd2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d06a      	beq.n	8007cb2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8007be4:	e065      	b.n	8007cb2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bea:	2202      	movs	r2, #2
 8007bec:	409a      	lsls	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d02c      	beq.n	8007c50 <HAL_DMA_IRQHandler+0xdc>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d027      	beq.n	8007c50 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 0320 	and.w	r3, r3, #32
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10b      	bne.n	8007c26 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 020a 	bic.w	r2, r2, #10
 8007c1c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	2102      	movs	r1, #2
 8007c30:	fa01 f202 	lsl.w	r2, r1, r2
 8007c34:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d035      	beq.n	8007cb2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8007c4e:	e030      	b.n	8007cb2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	2208      	movs	r2, #8
 8007c56:	409a      	lsls	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d028      	beq.n	8007cb2 <HAL_DMA_IRQHandler+0x13e>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d023      	beq.n	8007cb2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 020e 	bic.w	r2, r2, #14
 8007c78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c82:	2101      	movs	r1, #1
 8007c84:	fa01 f202 	lsl.w	r2, r1, r2
 8007c88:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d004      	beq.n	8007cb2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	4798      	blx	r3
    }
  }
}  
 8007cb0:	e7ff      	b.n	8007cb2 <HAL_DMA_IRQHandler+0x13e>
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
	...

08007cbc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4b14      	ldr	r3, [pc, #80]	; (8007d1c <DMA_CalcBaseAndBitshift+0x60>)
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d80f      	bhi.n	8007cf0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <DMA_CalcBaseAndBitshift+0x64>)
 8007cd8:	4413      	add	r3, r2
 8007cda:	4a12      	ldr	r2, [pc, #72]	; (8007d24 <DMA_CalcBaseAndBitshift+0x68>)
 8007cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	009a      	lsls	r2, r3, #2
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a0f      	ldr	r2, [pc, #60]	; (8007d28 <DMA_CalcBaseAndBitshift+0x6c>)
 8007cec:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8007cee:	e00e      	b.n	8007d0e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <DMA_CalcBaseAndBitshift+0x70>)
 8007cf8:	4413      	add	r3, r2
 8007cfa:	4a0a      	ldr	r2, [pc, #40]	; (8007d24 <DMA_CalcBaseAndBitshift+0x68>)
 8007cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007d00:	091b      	lsrs	r3, r3, #4
 8007d02:	009a      	lsls	r2, r3, #2
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <DMA_CalcBaseAndBitshift+0x74>)
 8007d0c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	40020407 	.word	0x40020407
 8007d20:	bffdfff8 	.word	0xbffdfff8
 8007d24:	cccccccd 	.word	0xcccccccd
 8007d28:	40020000 	.word	0x40020000
 8007d2c:	bffdfbf8 	.word	0xbffdfbf8
 8007d30:	40020400 	.word	0x40020400

08007d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b087      	sub	sp, #28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d42:	e154      	b.n	8007fee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	2101      	movs	r1, #1
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d50:	4013      	ands	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8146 	beq.w	8007fe8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d005      	beq.n	8007d74 <HAL_GPIO_Init+0x40>
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f003 0303 	and.w	r3, r3, #3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d130      	bne.n	8007dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	2203      	movs	r2, #3
 8007d80:	fa02 f303 	lsl.w	r3, r2, r3
 8007d84:	43db      	mvns	r3, r3
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68da      	ldr	r2, [r3, #12]
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007daa:	2201      	movs	r2, #1
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	fa02 f303 	lsl.w	r3, r2, r3
 8007db2:	43db      	mvns	r3, r3
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	4013      	ands	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685b      	ldr	r3, [r3, #4]
 8007dbe:	091b      	lsrs	r3, r3, #4
 8007dc0:	f003 0201 	and.w	r2, r3, #1
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d017      	beq.n	8007e12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	2203      	movs	r2, #3
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	43db      	mvns	r3, r3
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	4013      	ands	r3, r2
 8007df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d123      	bne.n	8007e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	08da      	lsrs	r2, r3, #3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3208      	adds	r2, #8
 8007e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f003 0307 	and.w	r3, r3, #7
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	220f      	movs	r2, #15
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	43db      	mvns	r3, r3
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	691a      	ldr	r2, [r3, #16]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	08da      	lsrs	r2, r3, #3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3208      	adds	r2, #8
 8007e60:	6939      	ldr	r1, [r7, #16]
 8007e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	2203      	movs	r2, #3
 8007e72:	fa02 f303 	lsl.w	r3, r2, r3
 8007e76:	43db      	mvns	r3, r3
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f003 0203 	and.w	r2, r3, #3
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80a0 	beq.w	8007fe8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ea8:	4b58      	ldr	r3, [pc, #352]	; (800800c <HAL_GPIO_Init+0x2d8>)
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	4a57      	ldr	r2, [pc, #348]	; (800800c <HAL_GPIO_Init+0x2d8>)
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	6193      	str	r3, [r2, #24]
 8007eb4:	4b55      	ldr	r3, [pc, #340]	; (800800c <HAL_GPIO_Init+0x2d8>)
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007ec0:	4a53      	ldr	r2, [pc, #332]	; (8008010 <HAL_GPIO_Init+0x2dc>)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	089b      	lsrs	r3, r3, #2
 8007ec6:	3302      	adds	r3, #2
 8007ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	220f      	movs	r2, #15
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	43db      	mvns	r3, r3
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007eea:	d019      	beq.n	8007f20 <HAL_GPIO_Init+0x1ec>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a49      	ldr	r2, [pc, #292]	; (8008014 <HAL_GPIO_Init+0x2e0>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d013      	beq.n	8007f1c <HAL_GPIO_Init+0x1e8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a48      	ldr	r2, [pc, #288]	; (8008018 <HAL_GPIO_Init+0x2e4>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00d      	beq.n	8007f18 <HAL_GPIO_Init+0x1e4>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a47      	ldr	r2, [pc, #284]	; (800801c <HAL_GPIO_Init+0x2e8>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d007      	beq.n	8007f14 <HAL_GPIO_Init+0x1e0>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a46      	ldr	r2, [pc, #280]	; (8008020 <HAL_GPIO_Init+0x2ec>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d101      	bne.n	8007f10 <HAL_GPIO_Init+0x1dc>
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	e008      	b.n	8007f22 <HAL_GPIO_Init+0x1ee>
 8007f10:	2305      	movs	r3, #5
 8007f12:	e006      	b.n	8007f22 <HAL_GPIO_Init+0x1ee>
 8007f14:	2303      	movs	r3, #3
 8007f16:	e004      	b.n	8007f22 <HAL_GPIO_Init+0x1ee>
 8007f18:	2302      	movs	r3, #2
 8007f1a:	e002      	b.n	8007f22 <HAL_GPIO_Init+0x1ee>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e000      	b.n	8007f22 <HAL_GPIO_Init+0x1ee>
 8007f20:	2300      	movs	r3, #0
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	f002 0203 	and.w	r2, r2, #3
 8007f28:	0092      	lsls	r2, r2, #2
 8007f2a:	4093      	lsls	r3, r2
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007f32:	4937      	ldr	r1, [pc, #220]	; (8008010 <HAL_GPIO_Init+0x2dc>)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	089b      	lsrs	r3, r3, #2
 8007f38:	3302      	adds	r3, #2
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007f40:	4b38      	ldr	r3, [pc, #224]	; (8008024 <HAL_GPIO_Init+0x2f0>)
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007f64:	4a2f      	ldr	r2, [pc, #188]	; (8008024 <HAL_GPIO_Init+0x2f0>)
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f6a:	4b2e      	ldr	r3, [pc, #184]	; (8008024 <HAL_GPIO_Init+0x2f0>)
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	43db      	mvns	r3, r3
 8007f74:	693a      	ldr	r2, [r7, #16]
 8007f76:	4013      	ands	r3, r2
 8007f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007f8e:	4a25      	ldr	r2, [pc, #148]	; (8008024 <HAL_GPIO_Init+0x2f0>)
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007f94:	4b23      	ldr	r3, [pc, #140]	; (8008024 <HAL_GPIO_Init+0x2f0>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	43db      	mvns	r3, r3
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007fb8:	4a1a      	ldr	r2, [pc, #104]	; (8008024 <HAL_GPIO_Init+0x2f0>)
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007fbe:	4b19      	ldr	r3, [pc, #100]	; (8008024 <HAL_GPIO_Init+0x2f0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	43db      	mvns	r3, r3
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007fe2:	4a10      	ldr	r2, [pc, #64]	; (8008024 <HAL_GPIO_Init+0x2f0>)
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	3301      	adds	r3, #1
 8007fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f47f aea3 	bne.w	8007d44 <HAL_GPIO_Init+0x10>
  }
}
 8007ffe:	bf00      	nop
 8008000:	bf00      	nop
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	40021000 	.word	0x40021000
 8008010:	40010000 	.word	0x40010000
 8008014:	48000400 	.word	0x48000400
 8008018:	48000800 	.word	0x48000800
 800801c:	48000c00 	.word	0x48000c00
 8008020:	48001000 	.word	0x48001000
 8008024:	40010400 	.word	0x40010400

08008028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	691a      	ldr	r2, [r3, #16]
 8008038:	887b      	ldrh	r3, [r7, #2]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008040:	2301      	movs	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
 8008044:	e001      	b.n	800804a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	460b      	mov	r3, r1
 8008062:	807b      	strh	r3, [r7, #2]
 8008064:	4613      	mov	r3, r2
 8008066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008068:	787b      	ldrb	r3, [r7, #1]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800806e:	887a      	ldrh	r2, [r7, #2]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008074:	e002      	b.n	800807c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008076:	887a      	ldrh	r2, [r7, #2]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800807c:	bf00      	nop
 800807e:	370c      	adds	r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008094:	695a      	ldr	r2, [r3, #20]
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	4013      	ands	r3, r2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800809e:	4a05      	ldr	r2, [pc, #20]	; (80080b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fd f998 	bl	80053dc <HAL_GPIO_EXTI_Callback>
  }
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	40010400 	.word	0x40010400

080080b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e081      	b.n	80081ce <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7fe f9dc 	bl	800649c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2224      	movs	r2, #36	; 0x24
 80080e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0201 	bic.w	r2, r2, #1
 80080fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008108:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689a      	ldr	r2, [r3, #8]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008118:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d107      	bne.n	8008132 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800812e:	609a      	str	r2, [r3, #8]
 8008130:	e006      	b.n	8008140 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800813e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d104      	bne.n	8008152 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008150:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6812      	ldr	r2, [r2, #0]
 800815c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008164:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68da      	ldr	r2, [r3, #12]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008174:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691a      	ldr	r2, [r3, #16]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69d9      	ldr	r1, [r3, #28]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f042 0201 	orr.w	r2, r2, #1
 80081ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af02      	add	r7, sp, #8
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	461a      	mov	r2, r3
 80081e4:	460b      	mov	r3, r1
 80081e6:	817b      	strh	r3, [r7, #10]
 80081e8:	4613      	mov	r3, r2
 80081ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	f040 80da 	bne.w	80083ae <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_I2C_Master_Transmit+0x30>
 8008204:	2302      	movs	r3, #2
 8008206:	e0d3      	b.n	80083b0 <HAL_I2C_Master_Transmit+0x1d8>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008210:	f7fe fd04 	bl	8006c1c <HAL_GetTick>
 8008214:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	2319      	movs	r3, #25
 800821c:	2201      	movs	r2, #1
 800821e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 fbe0 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e0be      	b.n	80083b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2221      	movs	r2, #33	; 0x21
 8008236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2210      	movs	r2, #16
 800823e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	893a      	ldrh	r2, [r7, #8]
 8008252:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825e:	b29b      	uxth	r3, r3
 8008260:	2bff      	cmp	r3, #255	; 0xff
 8008262:	d90e      	bls.n	8008282 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	22ff      	movs	r2, #255	; 0xff
 8008268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800826e:	b2da      	uxtb	r2, r3
 8008270:	8979      	ldrh	r1, [r7, #10]
 8008272:	4b51      	ldr	r3, [pc, #324]	; (80083b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 fd6e 	bl	8008d5c <I2C_TransferConfig>
 8008280:	e06c      	b.n	800835c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008286:	b29a      	uxth	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008290:	b2da      	uxtb	r2, r3
 8008292:	8979      	ldrh	r1, [r7, #10]
 8008294:	4b48      	ldr	r3, [pc, #288]	; (80083b8 <HAL_I2C_Master_Transmit+0x1e0>)
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fd5d 	bl	8008d5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80082a2:	e05b      	b.n	800835c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	6a39      	ldr	r1, [r7, #32]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fbec 	bl	8008a86 <I2C_WaitOnTXISFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e07b      	b.n	80083b0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	781a      	ldrb	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	3b01      	subs	r3, #1
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e0:	3b01      	subs	r3, #1
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d034      	beq.n	800835c <HAL_I2C_Master_Transmit+0x184>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d130      	bne.n	800835c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	2200      	movs	r2, #0
 8008302:	2180      	movs	r1, #128	; 0x80
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 fb6f 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e04d      	b.n	80083b0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	2bff      	cmp	r3, #255	; 0xff
 800831c:	d90e      	bls.n	800833c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	22ff      	movs	r2, #255	; 0xff
 8008322:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008328:	b2da      	uxtb	r2, r3
 800832a:	8979      	ldrh	r1, [r7, #10]
 800832c:	2300      	movs	r3, #0
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fd11 	bl	8008d5c <I2C_TransferConfig>
 800833a:	e00f      	b.n	800835c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008340:	b29a      	uxth	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800834a:	b2da      	uxtb	r2, r3
 800834c:	8979      	ldrh	r1, [r7, #10]
 800834e:	2300      	movs	r3, #0
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fd00 	bl	8008d5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008360:	b29b      	uxth	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d19e      	bne.n	80082a4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	6a39      	ldr	r1, [r7, #32]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fbd2 	bl	8008b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e01a      	b.n	80083b0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2220      	movs	r2, #32
 8008380:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6859      	ldr	r1, [r3, #4]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <HAL_I2C_Master_Transmit+0x1e4>)
 800838e:	400b      	ands	r3, r1
 8008390:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	e000      	b.n	80083b0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80083ae:	2302      	movs	r3, #2
  }
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3718      	adds	r7, #24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	80002000 	.word	0x80002000
 80083bc:	fe00e800 	.word	0xfe00e800

080083c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	817b      	strh	r3, [r7, #10]
 80083d2:	460b      	mov	r3, r1
 80083d4:	813b      	strh	r3, [r7, #8]
 80083d6:	4613      	mov	r3, r2
 80083d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b20      	cmp	r3, #32
 80083e4:	f040 80f9 	bne.w	80085da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_I2C_Mem_Write+0x34>
 80083ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d105      	bne.n	8008400 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	e0ed      	b.n	80085dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <HAL_I2C_Mem_Write+0x4e>
 800840a:	2302      	movs	r3, #2
 800840c:	e0e6      	b.n	80085dc <HAL_I2C_Mem_Write+0x21c>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008416:	f7fe fc01 	bl	8006c1c <HAL_GetTick>
 800841a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2319      	movs	r3, #25
 8008422:	2201      	movs	r2, #1
 8008424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 fadd 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e0d1      	b.n	80085dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2221      	movs	r2, #33	; 0x21
 800843c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2240      	movs	r2, #64	; 0x40
 8008444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6a3a      	ldr	r2, [r7, #32]
 8008452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008460:	88f8      	ldrh	r0, [r7, #6]
 8008462:	893a      	ldrh	r2, [r7, #8]
 8008464:	8979      	ldrh	r1, [r7, #10]
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	9301      	str	r3, [sp, #4]
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	4603      	mov	r3, r0
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f9ed 	bl	8008850 <I2C_RequestMemoryWrite>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e0a9      	b.n	80085dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800848c:	b29b      	uxth	r3, r3
 800848e:	2bff      	cmp	r3, #255	; 0xff
 8008490:	d90e      	bls.n	80084b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	22ff      	movs	r2, #255	; 0xff
 8008496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800849c:	b2da      	uxtb	r2, r3
 800849e:	8979      	ldrh	r1, [r7, #10]
 80084a0:	2300      	movs	r3, #0
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fc57 	bl	8008d5c <I2C_TransferConfig>
 80084ae:	e00f      	b.n	80084d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	8979      	ldrh	r1, [r7, #10]
 80084c2:	2300      	movs	r3, #0
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f000 fc46 	bl	8008d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 fad6 	bl	8008a86 <I2C_WaitOnTXISFlagUntilTimeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e07b      	b.n	80085dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	781a      	ldrb	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084fe:	b29b      	uxth	r3, r3
 8008500:	3b01      	subs	r3, #1
 8008502:	b29a      	uxth	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008518:	b29b      	uxth	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d034      	beq.n	8008588 <HAL_I2C_Mem_Write+0x1c8>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008522:	2b00      	cmp	r3, #0
 8008524:	d130      	bne.n	8008588 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852c:	2200      	movs	r2, #0
 800852e:	2180      	movs	r1, #128	; 0x80
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 fa59 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e04d      	b.n	80085dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008544:	b29b      	uxth	r3, r3
 8008546:	2bff      	cmp	r3, #255	; 0xff
 8008548:	d90e      	bls.n	8008568 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	22ff      	movs	r2, #255	; 0xff
 800854e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008554:	b2da      	uxtb	r2, r3
 8008556:	8979      	ldrh	r1, [r7, #10]
 8008558:	2300      	movs	r3, #0
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fbfb 	bl	8008d5c <I2C_TransferConfig>
 8008566:	e00f      	b.n	8008588 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856c:	b29a      	uxth	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008576:	b2da      	uxtb	r2, r3
 8008578:	8979      	ldrh	r1, [r7, #10]
 800857a:	2300      	movs	r3, #0
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 fbea 	bl	8008d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d19e      	bne.n	80084d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 fabc 	bl	8008b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e01a      	b.n	80085dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2220      	movs	r2, #32
 80085ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6859      	ldr	r1, [r3, #4]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <HAL_I2C_Mem_Write+0x224>)
 80085ba:	400b      	ands	r3, r1
 80085bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	e000      	b.n	80085dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80085da:	2302      	movs	r3, #2
  }
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	fe00e800 	.word	0xfe00e800

080085e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	4608      	mov	r0, r1
 80085f2:	4611      	mov	r1, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	4603      	mov	r3, r0
 80085f8:	817b      	strh	r3, [r7, #10]
 80085fa:	460b      	mov	r3, r1
 80085fc:	813b      	strh	r3, [r7, #8]
 80085fe:	4613      	mov	r3, r2
 8008600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b20      	cmp	r3, #32
 800860c:	f040 80fd 	bne.w	800880a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <HAL_I2C_Mem_Read+0x34>
 8008616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008618:	2b00      	cmp	r3, #0
 800861a:	d105      	bne.n	8008628 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008622:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e0f1      	b.n	800880c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <HAL_I2C_Mem_Read+0x4e>
 8008632:	2302      	movs	r3, #2
 8008634:	e0ea      	b.n	800880c <HAL_I2C_Mem_Read+0x224>
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800863e:	f7fe faed 	bl	8006c1c <HAL_GetTick>
 8008642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	2319      	movs	r3, #25
 800864a:	2201      	movs	r2, #1
 800864c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 f9c9 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e0d5      	b.n	800880c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2222      	movs	r2, #34	; 0x22
 8008664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2240      	movs	r2, #64	; 0x40
 800866c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6a3a      	ldr	r2, [r7, #32]
 800867a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008688:	88f8      	ldrh	r0, [r7, #6]
 800868a:	893a      	ldrh	r2, [r7, #8]
 800868c:	8979      	ldrh	r1, [r7, #10]
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	9301      	str	r3, [sp, #4]
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	4603      	mov	r3, r0
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f92d 	bl	80088f8 <I2C_RequestMemoryRead>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0ad      	b.n	800880c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2bff      	cmp	r3, #255	; 0xff
 80086b8:	d90e      	bls.n	80086d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	22ff      	movs	r2, #255	; 0xff
 80086be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	8979      	ldrh	r1, [r7, #10]
 80086c8:	4b52      	ldr	r3, [pc, #328]	; (8008814 <HAL_I2C_Mem_Read+0x22c>)
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fb43 	bl	8008d5c <I2C_TransferConfig>
 80086d6:	e00f      	b.n	80086f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	8979      	ldrh	r1, [r7, #10]
 80086ea:	4b4a      	ldr	r3, [pc, #296]	; (8008814 <HAL_I2C_Mem_Read+0x22c>)
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 fb32 	bl	8008d5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fe:	2200      	movs	r2, #0
 8008700:	2104      	movs	r1, #4
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 f970 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e07c      	b.n	800880c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	b2d2      	uxtb	r2, r2
 800871e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800872e:	3b01      	subs	r3, #1
 8008730:	b29a      	uxth	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873a:	b29b      	uxth	r3, r3
 800873c:	3b01      	subs	r3, #1
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008748:	b29b      	uxth	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d034      	beq.n	80087b8 <HAL_I2C_Mem_Read+0x1d0>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008752:	2b00      	cmp	r3, #0
 8008754:	d130      	bne.n	80087b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	2200      	movs	r2, #0
 800875e:	2180      	movs	r1, #128	; 0x80
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 f941 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e04d      	b.n	800880c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008774:	b29b      	uxth	r3, r3
 8008776:	2bff      	cmp	r3, #255	; 0xff
 8008778:	d90e      	bls.n	8008798 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	22ff      	movs	r2, #255	; 0xff
 800877e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008784:	b2da      	uxtb	r2, r3
 8008786:	8979      	ldrh	r1, [r7, #10]
 8008788:	2300      	movs	r3, #0
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008790:	68f8      	ldr	r0, [r7, #12]
 8008792:	f000 fae3 	bl	8008d5c <I2C_TransferConfig>
 8008796:	e00f      	b.n	80087b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a6:	b2da      	uxtb	r2, r3
 80087a8:	8979      	ldrh	r1, [r7, #10]
 80087aa:	2300      	movs	r3, #0
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 fad2 	bl	8008d5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087bc:	b29b      	uxth	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d19a      	bne.n	80086f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f9a4 	bl	8008b14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e01a      	b.n	800880c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2220      	movs	r2, #32
 80087dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	6859      	ldr	r1, [r3, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <HAL_I2C_Mem_Read+0x230>)
 80087ea:	400b      	ands	r3, r1
 80087ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	e000      	b.n	800880c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800880a:	2302      	movs	r3, #2
  }
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	80002400 	.word	0x80002400
 8008818:	fe00e800 	.word	0xfe00e800

0800881c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	4798      	blx	r3
  }
}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	4608      	mov	r0, r1
 800885a:	4611      	mov	r1, r2
 800885c:	461a      	mov	r2, r3
 800885e:	4603      	mov	r3, r0
 8008860:	817b      	strh	r3, [r7, #10]
 8008862:	460b      	mov	r3, r1
 8008864:	813b      	strh	r3, [r7, #8]
 8008866:	4613      	mov	r3, r2
 8008868:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800886a:	88fb      	ldrh	r3, [r7, #6]
 800886c:	b2da      	uxtb	r2, r3
 800886e:	8979      	ldrh	r1, [r7, #10]
 8008870:	4b20      	ldr	r3, [pc, #128]	; (80088f4 <I2C_RequestMemoryWrite+0xa4>)
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 fa6f 	bl	8008d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	69b9      	ldr	r1, [r7, #24]
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 f8ff 	bl	8008a86 <I2C_WaitOnTXISFlagUntilTimeout>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e02c      	b.n	80088ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008892:	88fb      	ldrh	r3, [r7, #6]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d105      	bne.n	80088a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008898:	893b      	ldrh	r3, [r7, #8]
 800889a:	b2da      	uxtb	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	629a      	str	r2, [r3, #40]	; 0x28
 80088a2:	e015      	b.n	80088d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80088a4:	893b      	ldrh	r3, [r7, #8]
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	69b9      	ldr	r1, [r7, #24]
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 f8e5 	bl	8008a86 <I2C_WaitOnTXISFlagUntilTimeout>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e012      	b.n	80088ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088c6:	893b      	ldrh	r3, [r7, #8]
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	2200      	movs	r2, #0
 80088d8:	2180      	movs	r1, #128	; 0x80
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 f884 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e000      	b.n	80088ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	80002000 	.word	0x80002000

080088f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	4608      	mov	r0, r1
 8008902:	4611      	mov	r1, r2
 8008904:	461a      	mov	r2, r3
 8008906:	4603      	mov	r3, r0
 8008908:	817b      	strh	r3, [r7, #10]
 800890a:	460b      	mov	r3, r1
 800890c:	813b      	strh	r3, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	b2da      	uxtb	r2, r3
 8008916:	8979      	ldrh	r1, [r7, #10]
 8008918:	4b20      	ldr	r3, [pc, #128]	; (800899c <I2C_RequestMemoryRead+0xa4>)
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	2300      	movs	r3, #0
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 fa1c 	bl	8008d5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	69b9      	ldr	r1, [r7, #24]
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f8ac 	bl	8008a86 <I2C_WaitOnTXISFlagUntilTimeout>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e02c      	b.n	8008992 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008938:	88fb      	ldrh	r3, [r7, #6]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d105      	bne.n	800894a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800893e:	893b      	ldrh	r3, [r7, #8]
 8008940:	b2da      	uxtb	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	629a      	str	r2, [r3, #40]	; 0x28
 8008948:	e015      	b.n	8008976 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800894a:	893b      	ldrh	r3, [r7, #8]
 800894c:	0a1b      	lsrs	r3, r3, #8
 800894e:	b29b      	uxth	r3, r3
 8008950:	b2da      	uxtb	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	69b9      	ldr	r1, [r7, #24]
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 f892 	bl	8008a86 <I2C_WaitOnTXISFlagUntilTimeout>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d001      	beq.n	800896c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e012      	b.n	8008992 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800896c:	893b      	ldrh	r3, [r7, #8]
 800896e:	b2da      	uxtb	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2200      	movs	r2, #0
 800897e:	2140      	movs	r1, #64	; 0x40
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f831 	bl	80089e8 <I2C_WaitOnFlagUntilTimeout>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	e000      	b.n	8008992 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	80002000 	.word	0x80002000

080089a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d103      	bne.n	80089be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d007      	beq.n	80089dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	619a      	str	r2, [r3, #24]
  }
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089f8:	e031      	b.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a00:	d02d      	beq.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a02:	f7fe f90b 	bl	8006c1c <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d302      	bcc.n	8008a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d122      	bne.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4013      	ands	r3, r2
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bf0c      	ite	eq
 8008a28:	2301      	moveq	r3, #1
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d113      	bne.n	8008a5e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a3a:	f043 0220 	orr.w	r2, r3, #32
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e00f      	b.n	8008a7e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699a      	ldr	r2, [r3, #24]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	4013      	ands	r3, r2
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	bf0c      	ite	eq
 8008a6e:	2301      	moveq	r3, #1
 8008a70:	2300      	movne	r3, #0
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	461a      	mov	r2, r3
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d0be      	beq.n	80089fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008a92:	e033      	b.n	8008afc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f87f 	bl	8008b9c <I2C_IsErrorOccurred>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e031      	b.n	8008b0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aae:	d025      	beq.n	8008afc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ab0:	f7fe f8b4 	bl	8006c1c <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d302      	bcc.n	8008ac6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d11a      	bne.n	8008afc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d013      	beq.n	8008afc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad8:	f043 0220 	orr.w	r2, r3, #32
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e007      	b.n	8008b0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d1c4      	bne.n	8008a94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b20:	e02f      	b.n	8008b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	68b9      	ldr	r1, [r7, #8]
 8008b26:	68f8      	ldr	r0, [r7, #12]
 8008b28:	f000 f838 	bl	8008b9c <I2C_IsErrorOccurred>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e02d      	b.n	8008b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b36:	f7fe f871 	bl	8006c1c <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d302      	bcc.n	8008b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d11a      	bne.n	8008b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	f003 0320 	and.w	r3, r3, #32
 8008b56:	2b20      	cmp	r3, #32
 8008b58:	d013      	beq.n	8008b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5e:	f043 0220 	orr.w	r2, r3, #32
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e007      	b.n	8008b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	d1c8      	bne.n	8008b22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08a      	sub	sp, #40	; 0x28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	f003 0310 	and.w	r3, r3, #16
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d068      	beq.n	8008c9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2210      	movs	r2, #16
 8008bce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008bd0:	e049      	b.n	8008c66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd8:	d045      	beq.n	8008c66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008bda:	f7fe f81f 	bl	8006c1c <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d302      	bcc.n	8008bf0 <I2C_IsErrorOccurred+0x54>
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d13a      	bne.n	8008c66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c12:	d121      	bne.n	8008c58 <I2C_IsErrorOccurred+0xbc>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c1a:	d01d      	beq.n	8008c58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008c1c:	7cfb      	ldrb	r3, [r7, #19]
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d01a      	beq.n	8008c58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008c32:	f7fd fff3 	bl	8006c1c <HAL_GetTick>
 8008c36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c38:	e00e      	b.n	8008c58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008c3a:	f7fd ffef 	bl	8006c1c <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	2b19      	cmp	r3, #25
 8008c46:	d907      	bls.n	8008c58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	f043 0320 	orr.w	r3, r3, #32
 8008c4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008c56:	e006      	b.n	8008c66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	f003 0320 	and.w	r3, r3, #32
 8008c62:	2b20      	cmp	r3, #32
 8008c64:	d1e9      	bne.n	8008c3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b20      	cmp	r3, #32
 8008c72:	d003      	beq.n	8008c7c <I2C_IsErrorOccurred+0xe0>
 8008c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d0aa      	beq.n	8008bd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d103      	bne.n	8008c8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	f043 0304 	orr.w	r3, r3, #4
 8008c92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008c94:	2301      	movs	r3, #1
 8008c96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00b      	beq.n	8008cc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	f043 0301 	orr.w	r3, r3, #1
 8008cb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	f043 0308 	orr.w	r3, r3, #8
 8008cd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	f043 0302 	orr.w	r3, r3, #2
 8008cf6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01c      	beq.n	8008d4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f7ff fe45 	bl	80089a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6859      	ldr	r1, [r3, #4]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <I2C_IsErrorOccurred+0x1bc>)
 8008d22:	400b      	ands	r3, r1
 8008d24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3728      	adds	r7, #40	; 0x28
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	fe00e800 	.word	0xfe00e800

08008d5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	607b      	str	r3, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	817b      	strh	r3, [r7, #10]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d6e:	897b      	ldrh	r3, [r7, #10]
 8008d70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d74:	7a7b      	ldrb	r3, [r7, #9]
 8008d76:	041b      	lsls	r3, r3, #16
 8008d78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d82:	6a3b      	ldr	r3, [r7, #32]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	0d5b      	lsrs	r3, r3, #21
 8008d96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008d9a:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <I2C_TransferConfig+0x60>)
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	43db      	mvns	r3, r3
 8008da0:	ea02 0103 	and.w	r1, r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008dae:	bf00      	nop
 8008db0:	371c      	adds	r7, #28
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	03ff63ff 	.word	0x03ff63ff

08008dc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	d138      	bne.n	8008e48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d101      	bne.n	8008de4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008de0:	2302      	movs	r3, #2
 8008de2:	e032      	b.n	8008e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2224      	movs	r2, #36	; 0x24
 8008df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 0201 	bic.w	r2, r2, #1
 8008e02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6819      	ldr	r1, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2220      	movs	r2, #32
 8008e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	e000      	b.n	8008e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e48:	2302      	movs	r3, #2
  }
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e56:	b480      	push	{r7}
 8008e58:	b085      	sub	sp, #20
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b20      	cmp	r3, #32
 8008e6a:	d139      	bne.n	8008ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e76:	2302      	movs	r3, #2
 8008e78:	e033      	b.n	8008ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2224      	movs	r2, #36	; 0x24
 8008e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0201 	bic.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008ea8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	021b      	lsls	r3, r3, #8
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	e000      	b.n	8008ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008ee0:	2302      	movs	r3, #2
  }
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
	...

08008ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	f001 b823 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008f1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f000 817d 	beq.w	8009226 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008f2c:	4bbc      	ldr	r3, [pc, #752]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f003 030c 	and.w	r3, r3, #12
 8008f34:	2b04      	cmp	r3, #4
 8008f36:	d00c      	beq.n	8008f52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008f38:	4bb9      	ldr	r3, [pc, #740]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f003 030c 	and.w	r3, r3, #12
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d15c      	bne.n	8008ffe <HAL_RCC_OscConfig+0x10e>
 8008f44:	4bb6      	ldr	r3, [pc, #728]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f50:	d155      	bne.n	8008ffe <HAL_RCC_OscConfig+0x10e>
 8008f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f56:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8008f5e:	fa93 f3a3 	rbit	r3, r3
 8008f62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008f66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f6a:	fab3 f383 	clz	r3, r3
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	095b      	lsrs	r3, r3, #5
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	f043 0301 	orr.w	r3, r3, #1
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d102      	bne.n	8008f84 <HAL_RCC_OscConfig+0x94>
 8008f7e:	4ba8      	ldr	r3, [pc, #672]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	e015      	b.n	8008fb0 <HAL_RCC_OscConfig+0xc0>
 8008f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f8c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8008f90:	fa93 f3a3 	rbit	r3, r3
 8008f94:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f9c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008fa0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008fa4:	fa93 f3a3 	rbit	r3, r3
 8008fa8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8008fac:	4b9c      	ldr	r3, [pc, #624]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008fb4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8008fb8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008fbc:	fa92 f2a2 	rbit	r2, r2
 8008fc0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8008fc4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8008fc8:	fab2 f282 	clz	r2, r2
 8008fcc:	b2d2      	uxtb	r2, r2
 8008fce:	f042 0220 	orr.w	r2, r2, #32
 8008fd2:	b2d2      	uxtb	r2, r2
 8008fd4:	f002 021f 	and.w	r2, r2, #31
 8008fd8:	2101      	movs	r1, #1
 8008fda:	fa01 f202 	lsl.w	r2, r1, r2
 8008fde:	4013      	ands	r3, r2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 811f 	beq.w	8009224 <HAL_RCC_OscConfig+0x334>
 8008fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f040 8116 	bne.w	8009224 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f000 bfaf 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800900e:	d106      	bne.n	800901e <HAL_RCC_OscConfig+0x12e>
 8009010:	4b83      	ldr	r3, [pc, #524]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a82      	ldr	r2, [pc, #520]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	e036      	b.n	800908c <HAL_RCC_OscConfig+0x19c>
 800901e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d10c      	bne.n	8009048 <HAL_RCC_OscConfig+0x158>
 800902e:	4b7c      	ldr	r3, [pc, #496]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a7b      	ldr	r2, [pc, #492]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	4b79      	ldr	r3, [pc, #484]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a78      	ldr	r2, [pc, #480]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009044:	6013      	str	r3, [r2, #0]
 8009046:	e021      	b.n	800908c <HAL_RCC_OscConfig+0x19c>
 8009048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800904c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009058:	d10c      	bne.n	8009074 <HAL_RCC_OscConfig+0x184>
 800905a:	4b71      	ldr	r3, [pc, #452]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a70      	ldr	r2, [pc, #448]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009060:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009064:	6013      	str	r3, [r2, #0]
 8009066:	4b6e      	ldr	r3, [pc, #440]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a6d      	ldr	r2, [pc, #436]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 800906c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009070:	6013      	str	r3, [r2, #0]
 8009072:	e00b      	b.n	800908c <HAL_RCC_OscConfig+0x19c>
 8009074:	4b6a      	ldr	r3, [pc, #424]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a69      	ldr	r2, [pc, #420]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 800907a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800907e:	6013      	str	r3, [r2, #0]
 8009080:	4b67      	ldr	r3, [pc, #412]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a66      	ldr	r2, [pc, #408]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800908a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800908c:	4b64      	ldr	r3, [pc, #400]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	f023 020f 	bic.w	r2, r3, #15
 8009094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009098:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	495f      	ldr	r1, [pc, #380]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80090aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d059      	beq.n	800916a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b6:	f7fd fdb1 	bl	8006c1c <HAL_GetTick>
 80090ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090be:	e00a      	b.n	80090d6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090c0:	f7fd fdac 	bl	8006c1c <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	2b64      	cmp	r3, #100	; 0x64
 80090ce:	d902      	bls.n	80090d6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	f000 bf43 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>
 80090d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80090da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80090e2:	fa93 f3a3 	rbit	r3, r3
 80090e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80090ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ee:	fab3 f383 	clz	r3, r3
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	095b      	lsrs	r3, r3, #5
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	f043 0301 	orr.w	r3, r3, #1
 80090fc:	b2db      	uxtb	r3, r3
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d102      	bne.n	8009108 <HAL_RCC_OscConfig+0x218>
 8009102:	4b47      	ldr	r3, [pc, #284]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	e015      	b.n	8009134 <HAL_RCC_OscConfig+0x244>
 8009108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800910c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009110:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8009114:	fa93 f3a3 	rbit	r3, r3
 8009118:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800911c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009120:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8009124:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8009128:	fa93 f3a3 	rbit	r3, r3
 800912c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8009130:	4b3b      	ldr	r3, [pc, #236]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009138:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800913c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8009140:	fa92 f2a2 	rbit	r2, r2
 8009144:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8009148:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800914c:	fab2 f282 	clz	r2, r2
 8009150:	b2d2      	uxtb	r2, r2
 8009152:	f042 0220 	orr.w	r2, r2, #32
 8009156:	b2d2      	uxtb	r2, r2
 8009158:	f002 021f 	and.w	r2, r2, #31
 800915c:	2101      	movs	r1, #1
 800915e:	fa01 f202 	lsl.w	r2, r1, r2
 8009162:	4013      	ands	r3, r2
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0ab      	beq.n	80090c0 <HAL_RCC_OscConfig+0x1d0>
 8009168:	e05d      	b.n	8009226 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800916a:	f7fd fd57 	bl	8006c1c <HAL_GetTick>
 800916e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009172:	e00a      	b.n	800918a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009174:	f7fd fd52 	bl	8006c1c <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	2b64      	cmp	r3, #100	; 0x64
 8009182:	d902      	bls.n	800918a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8009184:	2303      	movs	r3, #3
 8009186:	f000 bee9 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>
 800918a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800918e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009192:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8009196:	fa93 f3a3 	rbit	r3, r3
 800919a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800919e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091a2:	fab3 f383 	clz	r3, r3
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	095b      	lsrs	r3, r3, #5
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f043 0301 	orr.w	r3, r3, #1
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d102      	bne.n	80091bc <HAL_RCC_OscConfig+0x2cc>
 80091b6:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	e015      	b.n	80091e8 <HAL_RCC_OscConfig+0x2f8>
 80091bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091c0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091c4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80091c8:	fa93 f3a3 	rbit	r3, r3
 80091cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80091d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091d4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80091d8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80091dc:	fa93 f3a3 	rbit	r3, r3
 80091e0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80091e4:	4b0e      	ldr	r3, [pc, #56]	; (8009220 <HAL_RCC_OscConfig+0x330>)
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80091ec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80091f0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80091f4:	fa92 f2a2 	rbit	r2, r2
 80091f8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80091fc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8009200:	fab2 f282 	clz	r2, r2
 8009204:	b2d2      	uxtb	r2, r2
 8009206:	f042 0220 	orr.w	r2, r2, #32
 800920a:	b2d2      	uxtb	r2, r2
 800920c:	f002 021f 	and.w	r2, r2, #31
 8009210:	2101      	movs	r1, #1
 8009212:	fa01 f202 	lsl.w	r2, r1, r2
 8009216:	4013      	ands	r3, r2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1ab      	bne.n	8009174 <HAL_RCC_OscConfig+0x284>
 800921c:	e003      	b.n	8009226 <HAL_RCC_OscConfig+0x336>
 800921e:	bf00      	nop
 8009220:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800922a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0302 	and.w	r3, r3, #2
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 817d 	beq.w	8009536 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800923c:	4ba6      	ldr	r3, [pc, #664]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f003 030c 	and.w	r3, r3, #12
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009248:	4ba3      	ldr	r3, [pc, #652]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f003 030c 	and.w	r3, r3, #12
 8009250:	2b08      	cmp	r3, #8
 8009252:	d172      	bne.n	800933a <HAL_RCC_OscConfig+0x44a>
 8009254:	4ba0      	ldr	r3, [pc, #640]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800925c:	2b00      	cmp	r3, #0
 800925e:	d16c      	bne.n	800933a <HAL_RCC_OscConfig+0x44a>
 8009260:	2302      	movs	r3, #2
 8009262:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009266:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800926a:	fa93 f3a3 	rbit	r3, r3
 800926e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8009272:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009276:	fab3 f383 	clz	r3, r3
 800927a:	b2db      	uxtb	r3, r3
 800927c:	095b      	lsrs	r3, r3, #5
 800927e:	b2db      	uxtb	r3, r3
 8009280:	f043 0301 	orr.w	r3, r3, #1
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b01      	cmp	r3, #1
 8009288:	d102      	bne.n	8009290 <HAL_RCC_OscConfig+0x3a0>
 800928a:	4b93      	ldr	r3, [pc, #588]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	e013      	b.n	80092b8 <HAL_RCC_OscConfig+0x3c8>
 8009290:	2302      	movs	r3, #2
 8009292:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009296:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800929a:	fa93 f3a3 	rbit	r3, r3
 800929e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80092a2:	2302      	movs	r3, #2
 80092a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80092a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80092ac:	fa93 f3a3 	rbit	r3, r3
 80092b0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80092b4:	4b88      	ldr	r3, [pc, #544]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	2202      	movs	r2, #2
 80092ba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80092be:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80092c2:	fa92 f2a2 	rbit	r2, r2
 80092c6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80092ca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80092ce:	fab2 f282 	clz	r2, r2
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	f042 0220 	orr.w	r2, r2, #32
 80092d8:	b2d2      	uxtb	r2, r2
 80092da:	f002 021f 	and.w	r2, r2, #31
 80092de:	2101      	movs	r1, #1
 80092e0:	fa01 f202 	lsl.w	r2, r1, r2
 80092e4:	4013      	ands	r3, r2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <HAL_RCC_OscConfig+0x410>
 80092ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80092ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d002      	beq.n	8009300 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	f000 be2e 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009300:	4b75      	ldr	r3, [pc, #468]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800930c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	21f8      	movs	r1, #248	; 0xf8
 8009316:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800931a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800931e:	fa91 f1a1 	rbit	r1, r1
 8009322:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8009326:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800932a:	fab1 f181 	clz	r1, r1
 800932e:	b2c9      	uxtb	r1, r1
 8009330:	408b      	lsls	r3, r1
 8009332:	4969      	ldr	r1, [pc, #420]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 8009334:	4313      	orrs	r3, r2
 8009336:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009338:	e0fd      	b.n	8009536 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800933a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800933e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	f000 8088 	beq.w	800945c <HAL_RCC_OscConfig+0x56c>
 800934c:	2301      	movs	r3, #1
 800934e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009352:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009356:	fa93 f3a3 	rbit	r3, r3
 800935a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800935e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009362:	fab3 f383 	clz	r3, r3
 8009366:	b2db      	uxtb	r3, r3
 8009368:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800936c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	461a      	mov	r2, r3
 8009374:	2301      	movs	r3, #1
 8009376:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009378:	f7fd fc50 	bl	8006c1c <HAL_GetTick>
 800937c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009380:	e00a      	b.n	8009398 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009382:	f7fd fc4b 	bl	8006c1c <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b02      	cmp	r3, #2
 8009390:	d902      	bls.n	8009398 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	f000 bde2 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>
 8009398:	2302      	movs	r3, #2
 800939a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800939e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80093a2:	fa93 f3a3 	rbit	r3, r3
 80093a6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80093aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ae:	fab3 f383 	clz	r3, r3
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	095b      	lsrs	r3, r3, #5
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	f043 0301 	orr.w	r3, r3, #1
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d102      	bne.n	80093c8 <HAL_RCC_OscConfig+0x4d8>
 80093c2:	4b45      	ldr	r3, [pc, #276]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	e013      	b.n	80093f0 <HAL_RCC_OscConfig+0x500>
 80093c8:	2302      	movs	r3, #2
 80093ca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80093d2:	fa93 f3a3 	rbit	r3, r3
 80093d6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80093da:	2302      	movs	r3, #2
 80093dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80093e0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80093e4:	fa93 f3a3 	rbit	r3, r3
 80093e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80093ec:	4b3a      	ldr	r3, [pc, #232]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	2202      	movs	r2, #2
 80093f2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80093f6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80093fa:	fa92 f2a2 	rbit	r2, r2
 80093fe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8009402:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8009406:	fab2 f282 	clz	r2, r2
 800940a:	b2d2      	uxtb	r2, r2
 800940c:	f042 0220 	orr.w	r2, r2, #32
 8009410:	b2d2      	uxtb	r2, r2
 8009412:	f002 021f 	and.w	r2, r2, #31
 8009416:	2101      	movs	r1, #1
 8009418:	fa01 f202 	lsl.w	r2, r1, r2
 800941c:	4013      	ands	r3, r2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0af      	beq.n	8009382 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009422:	4b2d      	ldr	r3, [pc, #180]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800942a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800942e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	21f8      	movs	r1, #248	; 0xf8
 8009438:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009440:	fa91 f1a1 	rbit	r1, r1
 8009444:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8009448:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800944c:	fab1 f181 	clz	r1, r1
 8009450:	b2c9      	uxtb	r1, r1
 8009452:	408b      	lsls	r3, r1
 8009454:	4920      	ldr	r1, [pc, #128]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 8009456:	4313      	orrs	r3, r2
 8009458:	600b      	str	r3, [r1, #0]
 800945a:	e06c      	b.n	8009536 <HAL_RCC_OscConfig+0x646>
 800945c:	2301      	movs	r3, #1
 800945e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009462:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009466:	fa93 f3a3 	rbit	r3, r3
 800946a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800946e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009472:	fab3 f383 	clz	r3, r3
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800947c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	461a      	mov	r2, r3
 8009484:	2300      	movs	r3, #0
 8009486:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009488:	f7fd fbc8 	bl	8006c1c <HAL_GetTick>
 800948c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009490:	e00a      	b.n	80094a8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009492:	f7fd fbc3 	bl	8006c1c <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d902      	bls.n	80094a8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	f000 bd5a 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>
 80094a8:	2302      	movs	r3, #2
 80094aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094b2:	fa93 f3a3 	rbit	r3, r3
 80094b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80094ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094be:	fab3 f383 	clz	r3, r3
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	095b      	lsrs	r3, r3, #5
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f043 0301 	orr.w	r3, r3, #1
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d104      	bne.n	80094dc <HAL_RCC_OscConfig+0x5ec>
 80094d2:	4b01      	ldr	r3, [pc, #4]	; (80094d8 <HAL_RCC_OscConfig+0x5e8>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	e015      	b.n	8009504 <HAL_RCC_OscConfig+0x614>
 80094d8:	40021000 	.word	0x40021000
 80094dc:	2302      	movs	r3, #2
 80094de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094e6:	fa93 f3a3 	rbit	r3, r3
 80094ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80094ee:	2302      	movs	r3, #2
 80094f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80094f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80094f8:	fa93 f3a3 	rbit	r3, r3
 80094fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009500:	4bc8      	ldr	r3, [pc, #800]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	2202      	movs	r2, #2
 8009506:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800950a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800950e:	fa92 f2a2 	rbit	r2, r2
 8009512:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8009516:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800951a:	fab2 f282 	clz	r2, r2
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	f042 0220 	orr.w	r2, r2, #32
 8009524:	b2d2      	uxtb	r2, r2
 8009526:	f002 021f 	and.w	r2, r2, #31
 800952a:	2101      	movs	r1, #1
 800952c:	fa01 f202 	lsl.w	r2, r1, r2
 8009530:	4013      	ands	r3, r2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1ad      	bne.n	8009492 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800953a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0308 	and.w	r3, r3, #8
 8009546:	2b00      	cmp	r3, #0
 8009548:	f000 8110 	beq.w	800976c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800954c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009550:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d079      	beq.n	8009650 <HAL_RCC_OscConfig+0x760>
 800955c:	2301      	movs	r3, #1
 800955e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009562:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009566:	fa93 f3a3 	rbit	r3, r3
 800956a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800956e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009572:	fab3 f383 	clz	r3, r3
 8009576:	b2db      	uxtb	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	4bab      	ldr	r3, [pc, #684]	; (8009828 <HAL_RCC_OscConfig+0x938>)
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	461a      	mov	r2, r3
 8009582:	2301      	movs	r3, #1
 8009584:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009586:	f7fd fb49 	bl	8006c1c <HAL_GetTick>
 800958a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800958e:	e00a      	b.n	80095a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009590:	f7fd fb44 	bl	8006c1c <HAL_GetTick>
 8009594:	4602      	mov	r2, r0
 8009596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	d902      	bls.n	80095a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	f000 bcdb 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>
 80095a6:	2302      	movs	r3, #2
 80095a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095b0:	fa93 f3a3 	rbit	r3, r3
 80095b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80095b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80095c0:	2202      	movs	r2, #2
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	fa93 f2a3 	rbit	r2, r3
 80095d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e4:	2202      	movs	r2, #2
 80095e6:	601a      	str	r2, [r3, #0]
 80095e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	fa93 f2a3 	rbit	r2, r3
 80095f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80095fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009600:	4b88      	ldr	r3, [pc, #544]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 8009602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009608:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800960c:	2102      	movs	r1, #2
 800960e:	6019      	str	r1, [r3, #0]
 8009610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009614:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	fa93 f1a3 	rbit	r1, r3
 800961e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009622:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009626:	6019      	str	r1, [r3, #0]
  return result;
 8009628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800962c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	fab3 f383 	clz	r3, r3
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 031f 	and.w	r3, r3, #31
 8009642:	2101      	movs	r1, #1
 8009644:	fa01 f303 	lsl.w	r3, r1, r3
 8009648:	4013      	ands	r3, r2
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0a0      	beq.n	8009590 <HAL_RCC_OscConfig+0x6a0>
 800964e:	e08d      	b.n	800976c <HAL_RCC_OscConfig+0x87c>
 8009650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009654:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009658:	2201      	movs	r2, #1
 800965a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800965c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009660:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	fa93 f2a3 	rbit	r2, r3
 800966a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800966e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009672:	601a      	str	r2, [r3, #0]
  return result;
 8009674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009678:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800967c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800967e:	fab3 f383 	clz	r3, r3
 8009682:	b2db      	uxtb	r3, r3
 8009684:	461a      	mov	r2, r3
 8009686:	4b68      	ldr	r3, [pc, #416]	; (8009828 <HAL_RCC_OscConfig+0x938>)
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	461a      	mov	r2, r3
 800968e:	2300      	movs	r3, #0
 8009690:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009692:	f7fd fac3 	bl	8006c1c <HAL_GetTick>
 8009696:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800969a:	e00a      	b.n	80096b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800969c:	f7fd fabe 	bl	8006c1c <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d902      	bls.n	80096b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	f000 bc55 	b.w	8009f5c <HAL_RCC_OscConfig+0x106c>
 80096b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80096ba:	2202      	movs	r2, #2
 80096bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	fa93 f2a3 	rbit	r2, r3
 80096cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096de:	2202      	movs	r2, #2
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	fa93 f2a3 	rbit	r2, r3
 80096f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009702:	2202      	movs	r2, #2
 8009704:	601a      	str	r2, [r3, #0]
 8009706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800970a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	fa93 f2a3 	rbit	r2, r3
 8009714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009718:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800971c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800971e:	4b41      	ldr	r3, [pc, #260]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 8009720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009726:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800972a:	2102      	movs	r1, #2
 800972c:	6019      	str	r1, [r3, #0]
 800972e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009732:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	fa93 f1a3 	rbit	r1, r3
 800973c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009740:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009744:	6019      	str	r1, [r3, #0]
  return result;
 8009746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800974a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	fab3 f383 	clz	r3, r3
 8009754:	b2db      	uxtb	r3, r3
 8009756:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800975a:	b2db      	uxtb	r3, r3
 800975c:	f003 031f 	and.w	r3, r3, #31
 8009760:	2101      	movs	r1, #1
 8009762:	fa01 f303 	lsl.w	r3, r1, r3
 8009766:	4013      	ands	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d197      	bne.n	800969c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800976c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 81a1 	beq.w	8009ac4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009782:	2300      	movs	r3, #0
 8009784:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009788:	4b26      	ldr	r3, [pc, #152]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 800978a:	69db      	ldr	r3, [r3, #28]
 800978c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d116      	bne.n	80097c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009794:	4b23      	ldr	r3, [pc, #140]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	4a22      	ldr	r2, [pc, #136]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 800979a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800979e:	61d3      	str	r3, [r2, #28]
 80097a0:	4b20      	ldr	r3, [pc, #128]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80097a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80097b0:	601a      	str	r2, [r3, #0]
 80097b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80097ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80097bc:	2301      	movs	r3, #1
 80097be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097c2:	4b1a      	ldr	r3, [pc, #104]	; (800982c <HAL_RCC_OscConfig+0x93c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d11a      	bne.n	8009804 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80097ce:	4b17      	ldr	r3, [pc, #92]	; (800982c <HAL_RCC_OscConfig+0x93c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a16      	ldr	r2, [pc, #88]	; (800982c <HAL_RCC_OscConfig+0x93c>)
 80097d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80097da:	f7fd fa1f 	bl	8006c1c <HAL_GetTick>
 80097de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097e2:	e009      	b.n	80097f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097e4:	f7fd fa1a 	bl	8006c1c <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b64      	cmp	r3, #100	; 0x64
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e3b1      	b.n	8009f5c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097f8:	4b0c      	ldr	r3, [pc, #48]	; (800982c <HAL_RCC_OscConfig+0x93c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009800:	2b00      	cmp	r3, #0
 8009802:	d0ef      	beq.n	80097e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d10d      	bne.n	8009830 <HAL_RCC_OscConfig+0x940>
 8009814:	4b03      	ldr	r3, [pc, #12]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	4a02      	ldr	r2, [pc, #8]	; (8009824 <HAL_RCC_OscConfig+0x934>)
 800981a:	f043 0301 	orr.w	r3, r3, #1
 800981e:	6213      	str	r3, [r2, #32]
 8009820:	e03c      	b.n	800989c <HAL_RCC_OscConfig+0x9ac>
 8009822:	bf00      	nop
 8009824:	40021000 	.word	0x40021000
 8009828:	10908120 	.word	0x10908120
 800982c:	40007000 	.word	0x40007000
 8009830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009834:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10c      	bne.n	800985a <HAL_RCC_OscConfig+0x96a>
 8009840:	4bc1      	ldr	r3, [pc, #772]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	4ac0      	ldr	r2, [pc, #768]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009846:	f023 0301 	bic.w	r3, r3, #1
 800984a:	6213      	str	r3, [r2, #32]
 800984c:	4bbe      	ldr	r3, [pc, #760]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	4abd      	ldr	r2, [pc, #756]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009852:	f023 0304 	bic.w	r3, r3, #4
 8009856:	6213      	str	r3, [r2, #32]
 8009858:	e020      	b.n	800989c <HAL_RCC_OscConfig+0x9ac>
 800985a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800985e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	2b05      	cmp	r3, #5
 8009868:	d10c      	bne.n	8009884 <HAL_RCC_OscConfig+0x994>
 800986a:	4bb7      	ldr	r3, [pc, #732]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 800986c:	6a1b      	ldr	r3, [r3, #32]
 800986e:	4ab6      	ldr	r2, [pc, #728]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009870:	f043 0304 	orr.w	r3, r3, #4
 8009874:	6213      	str	r3, [r2, #32]
 8009876:	4bb4      	ldr	r3, [pc, #720]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	4ab3      	ldr	r2, [pc, #716]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 800987c:	f043 0301 	orr.w	r3, r3, #1
 8009880:	6213      	str	r3, [r2, #32]
 8009882:	e00b      	b.n	800989c <HAL_RCC_OscConfig+0x9ac>
 8009884:	4bb0      	ldr	r3, [pc, #704]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009886:	6a1b      	ldr	r3, [r3, #32]
 8009888:	4aaf      	ldr	r2, [pc, #700]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 800988a:	f023 0301 	bic.w	r3, r3, #1
 800988e:	6213      	str	r3, [r2, #32]
 8009890:	4bad      	ldr	r3, [pc, #692]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	4aac      	ldr	r2, [pc, #688]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009896:	f023 0304 	bic.w	r3, r3, #4
 800989a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800989c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 8081 	beq.w	80099b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80098ae:	f7fd f9b5 	bl	8006c1c <HAL_GetTick>
 80098b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098b6:	e00b      	b.n	80098d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098b8:	f7fd f9b0 	bl	8006c1c <HAL_GetTick>
 80098bc:	4602      	mov	r2, r0
 80098be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d901      	bls.n	80098d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e345      	b.n	8009f5c <HAL_RCC_OscConfig+0x106c>
 80098d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80098d8:	2202      	movs	r2, #2
 80098da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	fa93 f2a3 	rbit	r2, r3
 80098ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80098fc:	2202      	movs	r2, #2
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009904:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	fa93 f2a3 	rbit	r2, r3
 800990e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009912:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009916:	601a      	str	r2, [r3, #0]
  return result;
 8009918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800991c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009920:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009922:	fab3 f383 	clz	r3, r3
 8009926:	b2db      	uxtb	r3, r3
 8009928:	095b      	lsrs	r3, r3, #5
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f043 0302 	orr.w	r3, r3, #2
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b02      	cmp	r3, #2
 8009934:	d102      	bne.n	800993c <HAL_RCC_OscConfig+0xa4c>
 8009936:	4b84      	ldr	r3, [pc, #528]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	e013      	b.n	8009964 <HAL_RCC_OscConfig+0xa74>
 800993c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009940:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009944:	2202      	movs	r2, #2
 8009946:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800994c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	fa93 f2a3 	rbit	r2, r3
 8009956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800995a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800995e:	601a      	str	r2, [r3, #0]
 8009960:	4b79      	ldr	r3, [pc, #484]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009968:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800996c:	2102      	movs	r1, #2
 800996e:	6011      	str	r1, [r2, #0]
 8009970:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009974:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009978:	6812      	ldr	r2, [r2, #0]
 800997a:	fa92 f1a2 	rbit	r1, r2
 800997e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009982:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009986:	6011      	str	r1, [r2, #0]
  return result;
 8009988:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800998c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009990:	6812      	ldr	r2, [r2, #0]
 8009992:	fab2 f282 	clz	r2, r2
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800999c:	b2d2      	uxtb	r2, r2
 800999e:	f002 021f 	and.w	r2, r2, #31
 80099a2:	2101      	movs	r1, #1
 80099a4:	fa01 f202 	lsl.w	r2, r1, r2
 80099a8:	4013      	ands	r3, r2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d084      	beq.n	80098b8 <HAL_RCC_OscConfig+0x9c8>
 80099ae:	e07f      	b.n	8009ab0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099b0:	f7fd f934 	bl	8006c1c <HAL_GetTick>
 80099b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80099b8:	e00b      	b.n	80099d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099ba:	f7fd f92f 	bl	8006c1c <HAL_GetTick>
 80099be:	4602      	mov	r2, r0
 80099c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d901      	bls.n	80099d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e2c4      	b.n	8009f5c <HAL_RCC_OscConfig+0x106c>
 80099d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80099da:	2202      	movs	r2, #2
 80099dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	fa93 f2a3 	rbit	r2, r3
 80099ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80099fe:	2202      	movs	r2, #2
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	fa93 f2a3 	rbit	r2, r3
 8009a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a14:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009a18:	601a      	str	r2, [r3, #0]
  return result;
 8009a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a1e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009a22:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a24:	fab3 f383 	clz	r3, r3
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	095b      	lsrs	r3, r3, #5
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f043 0302 	orr.w	r3, r3, #2
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d102      	bne.n	8009a3e <HAL_RCC_OscConfig+0xb4e>
 8009a38:	4b43      	ldr	r3, [pc, #268]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009a3a:	6a1b      	ldr	r3, [r3, #32]
 8009a3c:	e013      	b.n	8009a66 <HAL_RCC_OscConfig+0xb76>
 8009a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009a46:	2202      	movs	r2, #2
 8009a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	fa93 f2a3 	rbit	r2, r3
 8009a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a5c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	4b39      	ldr	r3, [pc, #228]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009a6e:	2102      	movs	r1, #2
 8009a70:	6011      	str	r1, [r2, #0]
 8009a72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009a7a:	6812      	ldr	r2, [r2, #0]
 8009a7c:	fa92 f1a2 	rbit	r1, r2
 8009a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a84:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009a88:	6011      	str	r1, [r2, #0]
  return result;
 8009a8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a8e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009a92:	6812      	ldr	r2, [r2, #0]
 8009a94:	fab2 f282 	clz	r2, r2
 8009a98:	b2d2      	uxtb	r2, r2
 8009a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	f002 021f 	and.w	r2, r2, #31
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8009aaa:	4013      	ands	r3, r2
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d184      	bne.n	80099ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ab0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d105      	bne.n	8009ac4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ab8:	4b23      	ldr	r3, [pc, #140]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	4a22      	ldr	r2, [pc, #136]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ac2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ac8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f000 8242 	beq.w	8009f5a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ad6:	4b1c      	ldr	r3, [pc, #112]	; (8009b48 <HAL_RCC_OscConfig+0xc58>)
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f003 030c 	and.w	r3, r3, #12
 8009ade:	2b08      	cmp	r3, #8
 8009ae0:	f000 8213 	beq.w	8009f0a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ae8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	69db      	ldr	r3, [r3, #28]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	f040 8162 	bne.w	8009dba <HAL_RCC_OscConfig+0xeca>
 8009af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009afa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009afe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b08:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	fa93 f2a3 	rbit	r2, r3
 8009b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b16:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009b1a:	601a      	str	r2, [r3, #0]
  return result;
 8009b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009b24:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b26:	fab3 f383 	clz	r3, r3
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	461a      	mov	r2, r3
 8009b38:	2300      	movs	r3, #0
 8009b3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b3c:	f7fd f86e 	bl	8006c1c <HAL_GetTick>
 8009b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b44:	e00c      	b.n	8009b60 <HAL_RCC_OscConfig+0xc70>
 8009b46:	bf00      	nop
 8009b48:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b4c:	f7fd f866 	bl	8006c1c <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e1fd      	b.n	8009f5c <HAL_RCC_OscConfig+0x106c>
 8009b60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b64:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b72:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	fa93 f2a3 	rbit	r2, r3
 8009b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b80:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009b84:	601a      	str	r2, [r3, #0]
  return result;
 8009b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b8a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009b8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009b90:	fab3 f383 	clz	r3, r3
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	f043 0301 	orr.w	r3, r3, #1
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d102      	bne.n	8009baa <HAL_RCC_OscConfig+0xcba>
 8009ba4:	4bb0      	ldr	r3, [pc, #704]	; (8009e68 <HAL_RCC_OscConfig+0xf78>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	e027      	b.n	8009bfa <HAL_RCC_OscConfig+0xd0a>
 8009baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009bb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bbc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	fa93 f2a3 	rbit	r2, r3
 8009bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bd4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009bd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009be2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	fa93 f2a3 	rbit	r2, r3
 8009bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bf0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	4b9c      	ldr	r3, [pc, #624]	; (8009e68 <HAL_RCC_OscConfig+0xf78>)
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009bfe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009c02:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009c06:	6011      	str	r1, [r2, #0]
 8009c08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c0c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009c10:	6812      	ldr	r2, [r2, #0]
 8009c12:	fa92 f1a2 	rbit	r1, r2
 8009c16:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c1a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009c1e:	6011      	str	r1, [r2, #0]
  return result;
 8009c20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009c24:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009c28:	6812      	ldr	r2, [r2, #0]
 8009c2a:	fab2 f282 	clz	r2, r2
 8009c2e:	b2d2      	uxtb	r2, r2
 8009c30:	f042 0220 	orr.w	r2, r2, #32
 8009c34:	b2d2      	uxtb	r2, r2
 8009c36:	f002 021f 	and.w	r2, r2, #31
 8009c3a:	2101      	movs	r1, #1
 8009c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8009c40:	4013      	ands	r3, r2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d182      	bne.n	8009b4c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009c46:	4b88      	ldr	r3, [pc, #544]	; (8009e68 <HAL_RCC_OscConfig+0xf78>)
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	430b      	orrs	r3, r1
 8009c68:	497f      	ldr	r1, [pc, #508]	; (8009e68 <HAL_RCC_OscConfig+0xf78>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	604b      	str	r3, [r1, #4]
 8009c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c72:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009c76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c80:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	fa93 f2a3 	rbit	r2, r3
 8009c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c8e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009c92:	601a      	str	r2, [r3, #0]
  return result;
 8009c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c98:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009c9c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c9e:	fab3 f383 	clz	r3, r3
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cb4:	f7fc ffb2 	bl	8006c1c <HAL_GetTick>
 8009cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009cbc:	e009      	b.n	8009cd2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cbe:	f7fc ffad 	bl	8006c1c <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d901      	bls.n	8009cd2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e144      	b.n	8009f5c <HAL_RCC_OscConfig+0x106c>
 8009cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cd6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009cda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	fa93 f2a3 	rbit	r2, r3
 8009cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cf2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009cf6:	601a      	str	r2, [r3, #0]
  return result;
 8009cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cfc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009d00:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009d02:	fab3 f383 	clz	r3, r3
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	095b      	lsrs	r3, r3, #5
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f043 0301 	orr.w	r3, r3, #1
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d102      	bne.n	8009d1c <HAL_RCC_OscConfig+0xe2c>
 8009d16:	4b54      	ldr	r3, [pc, #336]	; (8009e68 <HAL_RCC_OscConfig+0xf78>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	e027      	b.n	8009d6c <HAL_RCC_OscConfig+0xe7c>
 8009d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d20:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d2e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	fa93 f2a3 	rbit	r2, r3
 8009d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d3c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d46:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009d4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d54:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	fa93 f2a3 	rbit	r2, r3
 8009d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d62:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	4b3f      	ldr	r3, [pc, #252]	; (8009e68 <HAL_RCC_OscConfig+0xf78>)
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d70:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009d74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009d78:	6011      	str	r1, [r2, #0]
 8009d7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d7e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009d82:	6812      	ldr	r2, [r2, #0]
 8009d84:	fa92 f1a2 	rbit	r1, r2
 8009d88:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d8c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009d90:	6011      	str	r1, [r2, #0]
  return result;
 8009d92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d96:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009d9a:	6812      	ldr	r2, [r2, #0]
 8009d9c:	fab2 f282 	clz	r2, r2
 8009da0:	b2d2      	uxtb	r2, r2
 8009da2:	f042 0220 	orr.w	r2, r2, #32
 8009da6:	b2d2      	uxtb	r2, r2
 8009da8:	f002 021f 	and.w	r2, r2, #31
 8009dac:	2101      	movs	r1, #1
 8009dae:	fa01 f202 	lsl.w	r2, r1, r2
 8009db2:	4013      	ands	r3, r2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d082      	beq.n	8009cbe <HAL_RCC_OscConfig+0xdce>
 8009db8:	e0cf      	b.n	8009f5a <HAL_RCC_OscConfig+0x106a>
 8009dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dbe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009dc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dcc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	fa93 f2a3 	rbit	r2, r3
 8009dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dda:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009dde:	601a      	str	r2, [r3, #0]
  return result;
 8009de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009de4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009de8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dea:	fab3 f383 	clz	r3, r3
 8009dee:	b2db      	uxtb	r3, r3
 8009df0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009df4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e00:	f7fc ff0c 	bl	8006c1c <HAL_GetTick>
 8009e04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e08:	e009      	b.n	8009e1e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e0a:	f7fc ff07 	bl	8006c1c <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e09e      	b.n	8009f5c <HAL_RCC_OscConfig+0x106c>
 8009e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e22:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e30:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	fa93 f2a3 	rbit	r2, r3
 8009e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e3e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009e42:	601a      	str	r2, [r3, #0]
  return result;
 8009e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e48:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009e4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009e4e:	fab3 f383 	clz	r3, r3
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	095b      	lsrs	r3, r3, #5
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f043 0301 	orr.w	r3, r3, #1
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d104      	bne.n	8009e6c <HAL_RCC_OscConfig+0xf7c>
 8009e62:	4b01      	ldr	r3, [pc, #4]	; (8009e68 <HAL_RCC_OscConfig+0xf78>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	e029      	b.n	8009ebc <HAL_RCC_OscConfig+0xfcc>
 8009e68:	40021000 	.word	0x40021000
 8009e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e70:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e7e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	fa93 f2a3 	rbit	r2, r3
 8009e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e8c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e96:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009e9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ea4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	fa93 f2a3 	rbit	r2, r3
 8009eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eb2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	4b2b      	ldr	r3, [pc, #172]	; (8009f68 <HAL_RCC_OscConfig+0x1078>)
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ec0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009ec4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009ec8:	6011      	str	r1, [r2, #0]
 8009eca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ece:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	fa92 f1a2 	rbit	r1, r2
 8009ed8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009edc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009ee0:	6011      	str	r1, [r2, #0]
  return result;
 8009ee2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009ee6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009eea:	6812      	ldr	r2, [r2, #0]
 8009eec:	fab2 f282 	clz	r2, r2
 8009ef0:	b2d2      	uxtb	r2, r2
 8009ef2:	f042 0220 	orr.w	r2, r2, #32
 8009ef6:	b2d2      	uxtb	r2, r2
 8009ef8:	f002 021f 	and.w	r2, r2, #31
 8009efc:	2101      	movs	r1, #1
 8009efe:	fa01 f202 	lsl.w	r2, r1, r2
 8009f02:	4013      	ands	r3, r2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d180      	bne.n	8009e0a <HAL_RCC_OscConfig+0xf1a>
 8009f08:	e027      	b.n	8009f5a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d101      	bne.n	8009f1e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e01e      	b.n	8009f5c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009f1e:	4b12      	ldr	r3, [pc, #72]	; (8009f68 <HAL_RCC_OscConfig+0x1078>)
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009f26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009f2a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d10b      	bne.n	8009f56 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8009f3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8009f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d001      	beq.n	8009f5a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e000      	b.n	8009f5c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	40021000 	.word	0x40021000

08009f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b09e      	sub	sp, #120	; 0x78
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e162      	b.n	800a24a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f84:	4b90      	ldr	r3, [pc, #576]	; (800a1c8 <HAL_RCC_ClockConfig+0x25c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0307 	and.w	r3, r3, #7
 8009f8c:	683a      	ldr	r2, [r7, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d910      	bls.n	8009fb4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f92:	4b8d      	ldr	r3, [pc, #564]	; (800a1c8 <HAL_RCC_ClockConfig+0x25c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f023 0207 	bic.w	r2, r3, #7
 8009f9a:	498b      	ldr	r1, [pc, #556]	; (800a1c8 <HAL_RCC_ClockConfig+0x25c>)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fa2:	4b89      	ldr	r3, [pc, #548]	; (800a1c8 <HAL_RCC_ClockConfig+0x25c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d001      	beq.n	8009fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e14a      	b.n	800a24a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d008      	beq.n	8009fd2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fc0:	4b82      	ldr	r3, [pc, #520]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	497f      	ldr	r1, [pc, #508]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 80dc 	beq.w	800a198 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d13c      	bne.n	800a062 <HAL_RCC_ClockConfig+0xf6>
 8009fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009fec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ff0:	fa93 f3a3 	rbit	r3, r3
 8009ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ff8:	fab3 f383 	clz	r3, r3
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	095b      	lsrs	r3, r3, #5
 800a000:	b2db      	uxtb	r3, r3
 800a002:	f043 0301 	orr.w	r3, r3, #1
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d102      	bne.n	800a012 <HAL_RCC_ClockConfig+0xa6>
 800a00c:	4b6f      	ldr	r3, [pc, #444]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	e00f      	b.n	800a032 <HAL_RCC_ClockConfig+0xc6>
 800a012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a016:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a01a:	fa93 f3a3 	rbit	r3, r3
 800a01e:	667b      	str	r3, [r7, #100]	; 0x64
 800a020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a024:	663b      	str	r3, [r7, #96]	; 0x60
 800a026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a028:	fa93 f3a3 	rbit	r3, r3
 800a02c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a02e:	4b67      	ldr	r3, [pc, #412]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a036:	65ba      	str	r2, [r7, #88]	; 0x58
 800a038:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a03a:	fa92 f2a2 	rbit	r2, r2
 800a03e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800a040:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a042:	fab2 f282 	clz	r2, r2
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	f042 0220 	orr.w	r2, r2, #32
 800a04c:	b2d2      	uxtb	r2, r2
 800a04e:	f002 021f 	and.w	r2, r2, #31
 800a052:	2101      	movs	r1, #1
 800a054:	fa01 f202 	lsl.w	r2, r1, r2
 800a058:	4013      	ands	r3, r2
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d17b      	bne.n	800a156 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e0f3      	b.n	800a24a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	2b02      	cmp	r3, #2
 800a068:	d13c      	bne.n	800a0e4 <HAL_RCC_ClockConfig+0x178>
 800a06a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a06e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a072:	fa93 f3a3 	rbit	r3, r3
 800a076:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a07a:	fab3 f383 	clz	r3, r3
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	095b      	lsrs	r3, r3, #5
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f043 0301 	orr.w	r3, r3, #1
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d102      	bne.n	800a094 <HAL_RCC_ClockConfig+0x128>
 800a08e:	4b4f      	ldr	r3, [pc, #316]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	e00f      	b.n	800a0b4 <HAL_RCC_ClockConfig+0x148>
 800a094:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a098:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a09c:	fa93 f3a3 	rbit	r3, r3
 800a0a0:	647b      	str	r3, [r7, #68]	; 0x44
 800a0a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0a6:	643b      	str	r3, [r7, #64]	; 0x40
 800a0a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0aa:	fa93 f3a3 	rbit	r3, r3
 800a0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0b0:	4b46      	ldr	r3, [pc, #280]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0b8:	63ba      	str	r2, [r7, #56]	; 0x38
 800a0ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a0bc:	fa92 f2a2 	rbit	r2, r2
 800a0c0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a0c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0c4:	fab2 f282 	clz	r2, r2
 800a0c8:	b2d2      	uxtb	r2, r2
 800a0ca:	f042 0220 	orr.w	r2, r2, #32
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	f002 021f 	and.w	r2, r2, #31
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	fa01 f202 	lsl.w	r2, r1, r2
 800a0da:	4013      	ands	r3, r2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d13a      	bne.n	800a156 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	e0b2      	b.n	800a24a <HAL_RCC_ClockConfig+0x2de>
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	fa93 f3a3 	rbit	r3, r3
 800a0ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a0f2:	fab3 f383 	clz	r3, r3
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	095b      	lsrs	r3, r3, #5
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	f043 0301 	orr.w	r3, r3, #1
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b01      	cmp	r3, #1
 800a104:	d102      	bne.n	800a10c <HAL_RCC_ClockConfig+0x1a0>
 800a106:	4b31      	ldr	r3, [pc, #196]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	e00d      	b.n	800a128 <HAL_RCC_ClockConfig+0x1bc>
 800a10c:	2302      	movs	r3, #2
 800a10e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	fa93 f3a3 	rbit	r3, r3
 800a116:	627b      	str	r3, [r7, #36]	; 0x24
 800a118:	2302      	movs	r3, #2
 800a11a:	623b      	str	r3, [r7, #32]
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	fa93 f3a3 	rbit	r3, r3
 800a122:	61fb      	str	r3, [r7, #28]
 800a124:	4b29      	ldr	r3, [pc, #164]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2202      	movs	r2, #2
 800a12a:	61ba      	str	r2, [r7, #24]
 800a12c:	69ba      	ldr	r2, [r7, #24]
 800a12e:	fa92 f2a2 	rbit	r2, r2
 800a132:	617a      	str	r2, [r7, #20]
  return result;
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	fab2 f282 	clz	r2, r2
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	f042 0220 	orr.w	r2, r2, #32
 800a140:	b2d2      	uxtb	r2, r2
 800a142:	f002 021f 	and.w	r2, r2, #31
 800a146:	2101      	movs	r1, #1
 800a148:	fa01 f202 	lsl.w	r2, r1, r2
 800a14c:	4013      	ands	r3, r2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e079      	b.n	800a24a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a156:	4b1d      	ldr	r3, [pc, #116]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	f023 0203 	bic.w	r2, r3, #3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	491a      	ldr	r1, [pc, #104]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a164:	4313      	orrs	r3, r2
 800a166:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a168:	f7fc fd58 	bl	8006c1c <HAL_GetTick>
 800a16c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a16e:	e00a      	b.n	800a186 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a170:	f7fc fd54 	bl	8006c1c <HAL_GetTick>
 800a174:	4602      	mov	r2, r0
 800a176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a178:	1ad3      	subs	r3, r2, r3
 800a17a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a17e:	4293      	cmp	r3, r2
 800a180:	d901      	bls.n	800a186 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e061      	b.n	800a24a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a186:	4b11      	ldr	r3, [pc, #68]	; (800a1cc <HAL_RCC_ClockConfig+0x260>)
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	f003 020c 	and.w	r2, r3, #12
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	429a      	cmp	r2, r3
 800a196:	d1eb      	bne.n	800a170 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a198:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <HAL_RCC_ClockConfig+0x25c>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 0307 	and.w	r3, r3, #7
 800a1a0:	683a      	ldr	r2, [r7, #0]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d214      	bcs.n	800a1d0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1a6:	4b08      	ldr	r3, [pc, #32]	; (800a1c8 <HAL_RCC_ClockConfig+0x25c>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f023 0207 	bic.w	r2, r3, #7
 800a1ae:	4906      	ldr	r1, [pc, #24]	; (800a1c8 <HAL_RCC_ClockConfig+0x25c>)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1b6:	4b04      	ldr	r3, [pc, #16]	; (800a1c8 <HAL_RCC_ClockConfig+0x25c>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d005      	beq.n	800a1d0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e040      	b.n	800a24a <HAL_RCC_ClockConfig+0x2de>
 800a1c8:	40022000 	.word	0x40022000
 800a1cc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0304 	and.w	r3, r3, #4
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d008      	beq.n	800a1ee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a1dc:	4b1d      	ldr	r3, [pc, #116]	; (800a254 <HAL_RCC_ClockConfig+0x2e8>)
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	491a      	ldr	r1, [pc, #104]	; (800a254 <HAL_RCC_ClockConfig+0x2e8>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a1fa:	4b16      	ldr	r3, [pc, #88]	; (800a254 <HAL_RCC_ClockConfig+0x2e8>)
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	00db      	lsls	r3, r3, #3
 800a208:	4912      	ldr	r1, [pc, #72]	; (800a254 <HAL_RCC_ClockConfig+0x2e8>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a20e:	f000 f829 	bl	800a264 <HAL_RCC_GetSysClockFreq>
 800a212:	4601      	mov	r1, r0
 800a214:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <HAL_RCC_ClockConfig+0x2e8>)
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a21c:	22f0      	movs	r2, #240	; 0xf0
 800a21e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	fa92 f2a2 	rbit	r2, r2
 800a226:	60fa      	str	r2, [r7, #12]
  return result;
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	fab2 f282 	clz	r2, r2
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	40d3      	lsrs	r3, r2
 800a232:	4a09      	ldr	r2, [pc, #36]	; (800a258 <HAL_RCC_ClockConfig+0x2ec>)
 800a234:	5cd3      	ldrb	r3, [r2, r3]
 800a236:	fa21 f303 	lsr.w	r3, r1, r3
 800a23a:	4a08      	ldr	r2, [pc, #32]	; (800a25c <HAL_RCC_ClockConfig+0x2f0>)
 800a23c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a23e:	4b08      	ldr	r3, [pc, #32]	; (800a260 <HAL_RCC_ClockConfig+0x2f4>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f7fc fca6 	bl	8006b94 <HAL_InitTick>
  
  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3778      	adds	r7, #120	; 0x78
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	40021000 	.word	0x40021000
 800a258:	08010538 	.word	0x08010538
 800a25c:	20000054 	.word	0x20000054
 800a260:	20000058 	.word	0x20000058

0800a264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a264:	b480      	push	{r7}
 800a266:	b08b      	sub	sp, #44	; 0x2c
 800a268:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a26a:	2300      	movs	r3, #0
 800a26c:	61fb      	str	r3, [r7, #28]
 800a26e:	2300      	movs	r3, #0
 800a270:	61bb      	str	r3, [r7, #24]
 800a272:	2300      	movs	r3, #0
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
 800a276:	2300      	movs	r3, #0
 800a278:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a27e:	4b29      	ldr	r3, [pc, #164]	; (800a324 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a284:	69fb      	ldr	r3, [r7, #28]
 800a286:	f003 030c 	and.w	r3, r3, #12
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	d002      	beq.n	800a294 <HAL_RCC_GetSysClockFreq+0x30>
 800a28e:	2b08      	cmp	r3, #8
 800a290:	d003      	beq.n	800a29a <HAL_RCC_GetSysClockFreq+0x36>
 800a292:	e03c      	b.n	800a30e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a294:	4b24      	ldr	r3, [pc, #144]	; (800a328 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a296:	623b      	str	r3, [r7, #32]
      break;
 800a298:	e03c      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a2a0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a2a4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	fa92 f2a2 	rbit	r2, r2
 800a2ac:	607a      	str	r2, [r7, #4]
  return result;
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	fab2 f282 	clz	r2, r2
 800a2b4:	b2d2      	uxtb	r2, r2
 800a2b6:	40d3      	lsrs	r3, r2
 800a2b8:	4a1c      	ldr	r2, [pc, #112]	; (800a32c <HAL_RCC_GetSysClockFreq+0xc8>)
 800a2ba:	5cd3      	ldrb	r3, [r2, r3]
 800a2bc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a2be:	4b19      	ldr	r3, [pc, #100]	; (800a324 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	f003 030f 	and.w	r3, r3, #15
 800a2c6:	220f      	movs	r2, #15
 800a2c8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	fa92 f2a2 	rbit	r2, r2
 800a2d0:	60fa      	str	r2, [r7, #12]
  return result;
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	fab2 f282 	clz	r2, r2
 800a2d8:	b2d2      	uxtb	r2, r2
 800a2da:	40d3      	lsrs	r3, r2
 800a2dc:	4a14      	ldr	r2, [pc, #80]	; (800a330 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a2de:	5cd3      	ldrb	r3, [r2, r3]
 800a2e0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d008      	beq.n	800a2fe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a2ec:	4a0e      	ldr	r2, [pc, #56]	; (800a328 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	fbb2 f2f3 	udiv	r2, r2, r3
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
 800a2fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a2fc:	e004      	b.n	800a308 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	4a0c      	ldr	r2, [pc, #48]	; (800a334 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a302:	fb02 f303 	mul.w	r3, r2, r3
 800a306:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	623b      	str	r3, [r7, #32]
      break;
 800a30c:	e002      	b.n	800a314 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a30e:	4b06      	ldr	r3, [pc, #24]	; (800a328 <HAL_RCC_GetSysClockFreq+0xc4>)
 800a310:	623b      	str	r3, [r7, #32]
      break;
 800a312:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a314:	6a3b      	ldr	r3, [r7, #32]
}
 800a316:	4618      	mov	r0, r3
 800a318:	372c      	adds	r7, #44	; 0x2c
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	40021000 	.word	0x40021000
 800a328:	007a1200 	.word	0x007a1200
 800a32c:	08010548 	.word	0x08010548
 800a330:	08010558 	.word	0x08010558
 800a334:	003d0900 	.word	0x003d0900

0800a338 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b092      	sub	sp, #72	; 0x48
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a340:	2300      	movs	r3, #0
 800a342:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a348:	2300      	movs	r3, #0
 800a34a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 80d4 	beq.w	800a504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a35c:	4b4e      	ldr	r3, [pc, #312]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10e      	bne.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a368:	4b4b      	ldr	r3, [pc, #300]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	4a4a      	ldr	r2, [pc, #296]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a36e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a372:	61d3      	str	r3, [r2, #28]
 800a374:	4b48      	ldr	r3, [pc, #288]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a37c:	60bb      	str	r3, [r7, #8]
 800a37e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a380:	2301      	movs	r3, #1
 800a382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a386:	4b45      	ldr	r3, [pc, #276]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d118      	bne.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a392:	4b42      	ldr	r3, [pc, #264]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a41      	ldr	r2, [pc, #260]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a39c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a39e:	f7fc fc3d 	bl	8006c1c <HAL_GetTick>
 800a3a2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3a4:	e008      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3a6:	f7fc fc39 	bl	8006c1c <HAL_GetTick>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ae:	1ad3      	subs	r3, r2, r3
 800a3b0:	2b64      	cmp	r3, #100	; 0x64
 800a3b2:	d901      	bls.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e169      	b.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3b8:	4b38      	ldr	r3, [pc, #224]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d0f0      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a3c4:	4b34      	ldr	r3, [pc, #208]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 8084 	beq.w	800a4de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d07c      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3e4:	4b2c      	ldr	r3, [pc, #176]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a3e6:	6a1b      	ldr	r3, [r3, #32]
 800a3e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a3f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	fa93 f3a3 	rbit	r3, r3
 800a3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a3fe:	fab3 f383 	clz	r3, r3
 800a402:	b2db      	uxtb	r3, r3
 800a404:	461a      	mov	r2, r3
 800a406:	4b26      	ldr	r3, [pc, #152]	; (800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	461a      	mov	r2, r3
 800a40e:	2301      	movs	r3, #1
 800a410:	6013      	str	r3, [r2, #0]
 800a412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a416:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	fa93 f3a3 	rbit	r3, r3
 800a41e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a422:	fab3 f383 	clz	r3, r3
 800a426:	b2db      	uxtb	r3, r3
 800a428:	461a      	mov	r2, r3
 800a42a:	4b1d      	ldr	r3, [pc, #116]	; (800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a42c:	4413      	add	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	461a      	mov	r2, r3
 800a432:	2300      	movs	r3, #0
 800a434:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a436:	4a18      	ldr	r2, [pc, #96]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a43a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d04b      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a446:	f7fc fbe9 	bl	8006c1c <HAL_GetTick>
 800a44a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a44c:	e00a      	b.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a44e:	f7fc fbe5 	bl	8006c1c <HAL_GetTick>
 800a452:	4602      	mov	r2, r0
 800a454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	f241 3288 	movw	r2, #5000	; 0x1388
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d901      	bls.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e113      	b.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a464:	2302      	movs	r3, #2
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	fa93 f3a3 	rbit	r3, r3
 800a46e:	627b      	str	r3, [r7, #36]	; 0x24
 800a470:	2302      	movs	r3, #2
 800a472:	623b      	str	r3, [r7, #32]
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	fa93 f3a3 	rbit	r3, r3
 800a47a:	61fb      	str	r3, [r7, #28]
  return result;
 800a47c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a47e:	fab3 f383 	clz	r3, r3
 800a482:	b2db      	uxtb	r3, r3
 800a484:	095b      	lsrs	r3, r3, #5
 800a486:	b2db      	uxtb	r3, r3
 800a488:	f043 0302 	orr.w	r3, r3, #2
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d108      	bne.n	800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a492:	4b01      	ldr	r3, [pc, #4]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	e00d      	b.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a498:	40021000 	.word	0x40021000
 800a49c:	40007000 	.word	0x40007000
 800a4a0:	10908100 	.word	0x10908100
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	fa93 f3a3 	rbit	r3, r3
 800a4ae:	617b      	str	r3, [r7, #20]
 800a4b0:	4b78      	ldr	r3, [pc, #480]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	613a      	str	r2, [r7, #16]
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	fa92 f2a2 	rbit	r2, r2
 800a4be:	60fa      	str	r2, [r7, #12]
  return result;
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	fab2 f282 	clz	r2, r2
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4cc:	b2d2      	uxtb	r2, r2
 800a4ce:	f002 021f 	and.w	r2, r2, #31
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	fa01 f202 	lsl.w	r2, r1, r2
 800a4d8:	4013      	ands	r3, r2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0b7      	beq.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a4de:	4b6d      	ldr	r3, [pc, #436]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	496a      	ldr	r1, [pc, #424]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a4f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d105      	bne.n	800a504 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4f8:	4b66      	ldr	r3, [pc, #408]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	4a65      	ldr	r2, [pc, #404]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a4fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a502:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d008      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a510:	4b60      	ldr	r3, [pc, #384]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a514:	f023 0203 	bic.w	r2, r3, #3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	495d      	ldr	r1, [pc, #372]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0302 	and.w	r3, r3, #2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d008      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a52e:	4b59      	ldr	r3, [pc, #356]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	4956      	ldr	r1, [pc, #344]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d008      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a54c:	4b51      	ldr	r3, [pc, #324]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	494e      	ldr	r1, [pc, #312]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	2b00      	cmp	r3, #0
 800a568:	d008      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a56a:	4b4a      	ldr	r3, [pc, #296]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56e:	f023 0210 	bic.w	r2, r3, #16
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	4947      	ldr	r1, [pc, #284]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d008      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a588:	4b42      	ldr	r3, [pc, #264]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a594:	493f      	ldr	r1, [pc, #252]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a596:	4313      	orrs	r3, r2
 800a598:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d008      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a5a6:	4b3b      	ldr	r3, [pc, #236]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	f023 0220 	bic.w	r2, r3, #32
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	4938      	ldr	r1, [pc, #224]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0308 	and.w	r3, r3, #8
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d008      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a5c4:	4b33      	ldr	r3, [pc, #204]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	4930      	ldr	r1, [pc, #192]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 0310 	and.w	r3, r3, #16
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d008      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a5e2:	4b2c      	ldr	r3, [pc, #176]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	4929      	ldr	r1, [pc, #164]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d008      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a600:	4b24      	ldr	r3, [pc, #144]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60c:	4921      	ldr	r1, [pc, #132]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a60e:	4313      	orrs	r3, r2
 800a610:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a61e:	4b1d      	ldr	r3, [pc, #116]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a622:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62a:	491a      	ldr	r1, [pc, #104]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d008      	beq.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a63c:	4b15      	ldr	r3, [pc, #84]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a648:	4912      	ldr	r1, [pc, #72]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a65a:	4b0e      	ldr	r3, [pc, #56]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a666:	490b      	ldr	r1, [pc, #44]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a668:	4313      	orrs	r3, r2
 800a66a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a674:	2b00      	cmp	r3, #0
 800a676:	d008      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a678:	4b06      	ldr	r3, [pc, #24]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a684:	4903      	ldr	r1, [pc, #12]	; (800a694 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a686:	4313      	orrs	r3, r2
 800a688:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3748      	adds	r7, #72	; 0x48
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	40021000 	.word	0x40021000

0800a698 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e09d      	b.n	800a7e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d108      	bne.n	800a6c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ba:	d009      	beq.n	800a6d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	61da      	str	r2, [r3, #28]
 800a6c2:	e005      	b.n	800a6d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7fb ff98 	bl	8006620 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a706:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a710:	d902      	bls.n	800a718 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a712:	2300      	movs	r3, #0
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	e002      	b.n	800a71e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a71c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a726:	d007      	beq.n	800a738 <HAL_SPI_Init+0xa0>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a730:	d002      	beq.n	800a738 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a748:	431a      	orrs	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	431a      	orrs	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	431a      	orrs	r2, r3
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	69db      	ldr	r3, [r3, #28]
 800a76c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a770:	431a      	orrs	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77a:	ea42 0103 	orr.w	r1, r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	0c1b      	lsrs	r3, r3, #16
 800a794:	f003 0204 	and.w	r2, r3, #4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	f003 0310 	and.w	r3, r3, #16
 800a7a0:	431a      	orrs	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a6:	f003 0308 	and.w	r3, r3, #8
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a7b4:	ea42 0103 	orr.w	r1, r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	69da      	ldr	r2, [r3, #28]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b082      	sub	sp, #8
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d101      	bne.n	800a800 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e049      	b.n	800a894 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d106      	bne.n	800a81a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7fb ff6f 	bl	80066f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2202      	movs	r2, #2
 800a81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	4619      	mov	r1, r3
 800a82c:	4610      	mov	r0, r2
 800a82e:	f000 f9e7 	bl	800ac00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d001      	beq.n	800a8b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e04a      	b.n	800a94a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68da      	ldr	r2, [r3, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0201 	orr.w	r2, r2, #1
 800a8ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a21      	ldr	r2, [pc, #132]	; (800a958 <HAL_TIM_Base_Start_IT+0xbc>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d018      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x6c>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8de:	d013      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x6c>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a1d      	ldr	r2, [pc, #116]	; (800a95c <HAL_TIM_Base_Start_IT+0xc0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d00e      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x6c>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a1c      	ldr	r2, [pc, #112]	; (800a960 <HAL_TIM_Base_Start_IT+0xc4>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d009      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x6c>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a1a      	ldr	r2, [pc, #104]	; (800a964 <HAL_TIM_Base_Start_IT+0xc8>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d004      	beq.n	800a908 <HAL_TIM_Base_Start_IT+0x6c>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a19      	ldr	r2, [pc, #100]	; (800a968 <HAL_TIM_Base_Start_IT+0xcc>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d115      	bne.n	800a934 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689a      	ldr	r2, [r3, #8]
 800a90e:	4b17      	ldr	r3, [pc, #92]	; (800a96c <HAL_TIM_Base_Start_IT+0xd0>)
 800a910:	4013      	ands	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b06      	cmp	r3, #6
 800a918:	d015      	beq.n	800a946 <HAL_TIM_Base_Start_IT+0xaa>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a920:	d011      	beq.n	800a946 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f042 0201 	orr.w	r2, r2, #1
 800a930:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a932:	e008      	b.n	800a946 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f042 0201 	orr.w	r2, r2, #1
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	e000      	b.n	800a948 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a946:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40012c00 	.word	0x40012c00
 800a95c:	40000400 	.word	0x40000400
 800a960:	40000800 	.word	0x40000800
 800a964:	40013400 	.word	0x40013400
 800a968:	40014000 	.word	0x40014000
 800a96c:	00010007 	.word	0x00010007

0800a970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b02      	cmp	r3, #2
 800a984:	d122      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	f003 0302 	and.w	r3, r3, #2
 800a990:	2b02      	cmp	r3, #2
 800a992:	d11b      	bne.n	800a9cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f06f 0202 	mvn.w	r2, #2
 800a99c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f905 	bl	800abc2 <HAL_TIM_IC_CaptureCallback>
 800a9b8:	e005      	b.n	800a9c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f8f7 	bl	800abae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f908 	bl	800abd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f003 0304 	and.w	r3, r3, #4
 800a9d6:	2b04      	cmp	r3, #4
 800a9d8:	d122      	bne.n	800aa20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f003 0304 	and.w	r3, r3, #4
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	d11b      	bne.n	800aa20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f06f 0204 	mvn.w	r2, #4
 800a9f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2202      	movs	r2, #2
 800a9f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	699b      	ldr	r3, [r3, #24]
 800a9fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f8db 	bl	800abc2 <HAL_TIM_IC_CaptureCallback>
 800aa0c:	e005      	b.n	800aa1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f8cd 	bl	800abae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f8de 	bl	800abd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	f003 0308 	and.w	r3, r3, #8
 800aa2a:	2b08      	cmp	r3, #8
 800aa2c:	d122      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68db      	ldr	r3, [r3, #12]
 800aa34:	f003 0308 	and.w	r3, r3, #8
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d11b      	bne.n	800aa74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f06f 0208 	mvn.w	r2, #8
 800aa44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2204      	movs	r2, #4
 800aa4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	69db      	ldr	r3, [r3, #28]
 800aa52:	f003 0303 	and.w	r3, r3, #3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 f8b1 	bl	800abc2 <HAL_TIM_IC_CaptureCallback>
 800aa60:	e005      	b.n	800aa6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f8a3 	bl	800abae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 f8b4 	bl	800abd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	f003 0310 	and.w	r3, r3, #16
 800aa7e:	2b10      	cmp	r3, #16
 800aa80:	d122      	bne.n	800aac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	f003 0310 	and.w	r3, r3, #16
 800aa8c:	2b10      	cmp	r3, #16
 800aa8e:	d11b      	bne.n	800aac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f06f 0210 	mvn.w	r2, #16
 800aa98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2208      	movs	r2, #8
 800aa9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d003      	beq.n	800aab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f887 	bl	800abc2 <HAL_TIM_IC_CaptureCallback>
 800aab4:	e005      	b.n	800aac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f879 	bl	800abae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f88a 	bl	800abd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d10e      	bne.n	800aaf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	f003 0301 	and.w	r3, r3, #1
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d107      	bne.n	800aaf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f06f 0201 	mvn.w	r2, #1
 800aaec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7fa fcc4 	bl	800547c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	691b      	ldr	r3, [r3, #16]
 800aafa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafe:	2b80      	cmp	r3, #128	; 0x80
 800ab00:	d10e      	bne.n	800ab20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab0c:	2b80      	cmp	r3, #128	; 0x80
 800ab0e:	d107      	bne.n	800ab20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f90a 	bl	800ad34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab2e:	d10e      	bne.n	800ab4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3a:	2b80      	cmp	r3, #128	; 0x80
 800ab3c:	d107      	bne.n	800ab4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ab46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f8fd 	bl	800ad48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab58:	2b40      	cmp	r3, #64	; 0x40
 800ab5a:	d10e      	bne.n	800ab7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab66:	2b40      	cmp	r3, #64	; 0x40
 800ab68:	d107      	bne.n	800ab7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f838 	bl	800abea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	f003 0320 	and.w	r3, r3, #32
 800ab84:	2b20      	cmp	r3, #32
 800ab86:	d10e      	bne.n	800aba6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	f003 0320 	and.w	r3, r3, #32
 800ab92:	2b20      	cmp	r3, #32
 800ab94:	d107      	bne.n	800aba6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f06f 0220 	mvn.w	r2, #32
 800ab9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f8bd 	bl	800ad20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aba6:	bf00      	nop
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abd6:	b480      	push	{r7}
 800abd8:	b083      	sub	sp, #12
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abea:	b480      	push	{r7}
 800abec:	b083      	sub	sp, #12
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800abf2:	bf00      	nop
 800abf4:	370c      	adds	r7, #12
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
	...

0800ac00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a3c      	ldr	r2, [pc, #240]	; (800ad04 <TIM_Base_SetConfig+0x104>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d00f      	beq.n	800ac38 <TIM_Base_SetConfig+0x38>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac1e:	d00b      	beq.n	800ac38 <TIM_Base_SetConfig+0x38>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a39      	ldr	r2, [pc, #228]	; (800ad08 <TIM_Base_SetConfig+0x108>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d007      	beq.n	800ac38 <TIM_Base_SetConfig+0x38>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	4a38      	ldr	r2, [pc, #224]	; (800ad0c <TIM_Base_SetConfig+0x10c>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d003      	beq.n	800ac38 <TIM_Base_SetConfig+0x38>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a37      	ldr	r2, [pc, #220]	; (800ad10 <TIM_Base_SetConfig+0x110>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d108      	bne.n	800ac4a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a2d      	ldr	r2, [pc, #180]	; (800ad04 <TIM_Base_SetConfig+0x104>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d01b      	beq.n	800ac8a <TIM_Base_SetConfig+0x8a>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac58:	d017      	beq.n	800ac8a <TIM_Base_SetConfig+0x8a>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a2a      	ldr	r2, [pc, #168]	; (800ad08 <TIM_Base_SetConfig+0x108>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d013      	beq.n	800ac8a <TIM_Base_SetConfig+0x8a>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a29      	ldr	r2, [pc, #164]	; (800ad0c <TIM_Base_SetConfig+0x10c>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d00f      	beq.n	800ac8a <TIM_Base_SetConfig+0x8a>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a28      	ldr	r2, [pc, #160]	; (800ad10 <TIM_Base_SetConfig+0x110>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d00b      	beq.n	800ac8a <TIM_Base_SetConfig+0x8a>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a27      	ldr	r2, [pc, #156]	; (800ad14 <TIM_Base_SetConfig+0x114>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d007      	beq.n	800ac8a <TIM_Base_SetConfig+0x8a>
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a26      	ldr	r2, [pc, #152]	; (800ad18 <TIM_Base_SetConfig+0x118>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d003      	beq.n	800ac8a <TIM_Base_SetConfig+0x8a>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a25      	ldr	r2, [pc, #148]	; (800ad1c <TIM_Base_SetConfig+0x11c>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d108      	bne.n	800ac9c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	695b      	ldr	r3, [r3, #20]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689a      	ldr	r2, [r3, #8]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a10      	ldr	r2, [pc, #64]	; (800ad04 <TIM_Base_SetConfig+0x104>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00f      	beq.n	800ace8 <TIM_Base_SetConfig+0xe8>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a11      	ldr	r2, [pc, #68]	; (800ad10 <TIM_Base_SetConfig+0x110>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d00b      	beq.n	800ace8 <TIM_Base_SetConfig+0xe8>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a10      	ldr	r2, [pc, #64]	; (800ad14 <TIM_Base_SetConfig+0x114>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d007      	beq.n	800ace8 <TIM_Base_SetConfig+0xe8>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a0f      	ldr	r2, [pc, #60]	; (800ad18 <TIM_Base_SetConfig+0x118>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d003      	beq.n	800ace8 <TIM_Base_SetConfig+0xe8>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a0e      	ldr	r2, [pc, #56]	; (800ad1c <TIM_Base_SetConfig+0x11c>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d103      	bne.n	800acf0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	691a      	ldr	r2, [r3, #16]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	615a      	str	r2, [r3, #20]
}
 800acf6:	bf00      	nop
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	40012c00 	.word	0x40012c00
 800ad08:	40000400 	.word	0x40000400
 800ad0c:	40000800 	.word	0x40000800
 800ad10:	40013400 	.word	0x40013400
 800ad14:	40014000 	.word	0x40014000
 800ad18:	40014400 	.word	0x40014400
 800ad1c:	40014800 	.word	0x40014800

0800ad20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad28:	bf00      	nop
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b083      	sub	sp, #12
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad50:	bf00      	nop
 800ad52:	370c      	adds	r7, #12
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <__errno>:
 800ad5c:	4b01      	ldr	r3, [pc, #4]	; (800ad64 <__errno+0x8>)
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20000060 	.word	0x20000060

0800ad68 <__libc_init_array>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	4d0d      	ldr	r5, [pc, #52]	; (800ada0 <__libc_init_array+0x38>)
 800ad6c:	4c0d      	ldr	r4, [pc, #52]	; (800ada4 <__libc_init_array+0x3c>)
 800ad6e:	1b64      	subs	r4, r4, r5
 800ad70:	10a4      	asrs	r4, r4, #2
 800ad72:	2600      	movs	r6, #0
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	d109      	bne.n	800ad8c <__libc_init_array+0x24>
 800ad78:	4d0b      	ldr	r5, [pc, #44]	; (800ada8 <__libc_init_array+0x40>)
 800ad7a:	4c0c      	ldr	r4, [pc, #48]	; (800adac <__libc_init_array+0x44>)
 800ad7c:	f004 fda2 	bl	800f8c4 <_init>
 800ad80:	1b64      	subs	r4, r4, r5
 800ad82:	10a4      	asrs	r4, r4, #2
 800ad84:	2600      	movs	r6, #0
 800ad86:	42a6      	cmp	r6, r4
 800ad88:	d105      	bne.n	800ad96 <__libc_init_array+0x2e>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad90:	4798      	blx	r3
 800ad92:	3601      	adds	r6, #1
 800ad94:	e7ee      	b.n	800ad74 <__libc_init_array+0xc>
 800ad96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9a:	4798      	blx	r3
 800ad9c:	3601      	adds	r6, #1
 800ad9e:	e7f2      	b.n	800ad86 <__libc_init_array+0x1e>
 800ada0:	08010b90 	.word	0x08010b90
 800ada4:	08010b90 	.word	0x08010b90
 800ada8:	08010b90 	.word	0x08010b90
 800adac:	08010b94 	.word	0x08010b94

0800adb0 <memcpy>:
 800adb0:	440a      	add	r2, r1
 800adb2:	4291      	cmp	r1, r2
 800adb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800adb8:	d100      	bne.n	800adbc <memcpy+0xc>
 800adba:	4770      	bx	lr
 800adbc:	b510      	push	{r4, lr}
 800adbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adc6:	4291      	cmp	r1, r2
 800adc8:	d1f9      	bne.n	800adbe <memcpy+0xe>
 800adca:	bd10      	pop	{r4, pc}

0800adcc <memset>:
 800adcc:	4402      	add	r2, r0
 800adce:	4603      	mov	r3, r0
 800add0:	4293      	cmp	r3, r2
 800add2:	d100      	bne.n	800add6 <memset+0xa>
 800add4:	4770      	bx	lr
 800add6:	f803 1b01 	strb.w	r1, [r3], #1
 800adda:	e7f9      	b.n	800add0 <memset+0x4>

0800addc <__cvt>:
 800addc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ade0:	ec55 4b10 	vmov	r4, r5, d0
 800ade4:	2d00      	cmp	r5, #0
 800ade6:	460e      	mov	r6, r1
 800ade8:	4619      	mov	r1, r3
 800adea:	462b      	mov	r3, r5
 800adec:	bfbb      	ittet	lt
 800adee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800adf2:	461d      	movlt	r5, r3
 800adf4:	2300      	movge	r3, #0
 800adf6:	232d      	movlt	r3, #45	; 0x2d
 800adf8:	700b      	strb	r3, [r1, #0]
 800adfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adfc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae00:	4691      	mov	r9, r2
 800ae02:	f023 0820 	bic.w	r8, r3, #32
 800ae06:	bfbc      	itt	lt
 800ae08:	4622      	movlt	r2, r4
 800ae0a:	4614      	movlt	r4, r2
 800ae0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae10:	d005      	beq.n	800ae1e <__cvt+0x42>
 800ae12:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae16:	d100      	bne.n	800ae1a <__cvt+0x3e>
 800ae18:	3601      	adds	r6, #1
 800ae1a:	2102      	movs	r1, #2
 800ae1c:	e000      	b.n	800ae20 <__cvt+0x44>
 800ae1e:	2103      	movs	r1, #3
 800ae20:	ab03      	add	r3, sp, #12
 800ae22:	9301      	str	r3, [sp, #4]
 800ae24:	ab02      	add	r3, sp, #8
 800ae26:	9300      	str	r3, [sp, #0]
 800ae28:	ec45 4b10 	vmov	d0, r4, r5
 800ae2c:	4653      	mov	r3, sl
 800ae2e:	4632      	mov	r2, r6
 800ae30:	f000 fcfe 	bl	800b830 <_dtoa_r>
 800ae34:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae38:	4607      	mov	r7, r0
 800ae3a:	d102      	bne.n	800ae42 <__cvt+0x66>
 800ae3c:	f019 0f01 	tst.w	r9, #1
 800ae40:	d022      	beq.n	800ae88 <__cvt+0xac>
 800ae42:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae46:	eb07 0906 	add.w	r9, r7, r6
 800ae4a:	d110      	bne.n	800ae6e <__cvt+0x92>
 800ae4c:	783b      	ldrb	r3, [r7, #0]
 800ae4e:	2b30      	cmp	r3, #48	; 0x30
 800ae50:	d10a      	bne.n	800ae68 <__cvt+0x8c>
 800ae52:	2200      	movs	r2, #0
 800ae54:	2300      	movs	r3, #0
 800ae56:	4620      	mov	r0, r4
 800ae58:	4629      	mov	r1, r5
 800ae5a:	f7f5 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae5e:	b918      	cbnz	r0, 800ae68 <__cvt+0x8c>
 800ae60:	f1c6 0601 	rsb	r6, r6, #1
 800ae64:	f8ca 6000 	str.w	r6, [sl]
 800ae68:	f8da 3000 	ldr.w	r3, [sl]
 800ae6c:	4499      	add	r9, r3
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2300      	movs	r3, #0
 800ae72:	4620      	mov	r0, r4
 800ae74:	4629      	mov	r1, r5
 800ae76:	f7f5 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae7a:	b108      	cbz	r0, 800ae80 <__cvt+0xa4>
 800ae7c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae80:	2230      	movs	r2, #48	; 0x30
 800ae82:	9b03      	ldr	r3, [sp, #12]
 800ae84:	454b      	cmp	r3, r9
 800ae86:	d307      	bcc.n	800ae98 <__cvt+0xbc>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae8c:	1bdb      	subs	r3, r3, r7
 800ae8e:	4638      	mov	r0, r7
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	b004      	add	sp, #16
 800ae94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae98:	1c59      	adds	r1, r3, #1
 800ae9a:	9103      	str	r1, [sp, #12]
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	e7f0      	b.n	800ae82 <__cvt+0xa6>

0800aea0 <__exponent>:
 800aea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aea2:	4603      	mov	r3, r0
 800aea4:	2900      	cmp	r1, #0
 800aea6:	bfb8      	it	lt
 800aea8:	4249      	neglt	r1, r1
 800aeaa:	f803 2b02 	strb.w	r2, [r3], #2
 800aeae:	bfb4      	ite	lt
 800aeb0:	222d      	movlt	r2, #45	; 0x2d
 800aeb2:	222b      	movge	r2, #43	; 0x2b
 800aeb4:	2909      	cmp	r1, #9
 800aeb6:	7042      	strb	r2, [r0, #1]
 800aeb8:	dd2a      	ble.n	800af10 <__exponent+0x70>
 800aeba:	f10d 0407 	add.w	r4, sp, #7
 800aebe:	46a4      	mov	ip, r4
 800aec0:	270a      	movs	r7, #10
 800aec2:	46a6      	mov	lr, r4
 800aec4:	460a      	mov	r2, r1
 800aec6:	fb91 f6f7 	sdiv	r6, r1, r7
 800aeca:	fb07 1516 	mls	r5, r7, r6, r1
 800aece:	3530      	adds	r5, #48	; 0x30
 800aed0:	2a63      	cmp	r2, #99	; 0x63
 800aed2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aed6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aeda:	4631      	mov	r1, r6
 800aedc:	dcf1      	bgt.n	800aec2 <__exponent+0x22>
 800aede:	3130      	adds	r1, #48	; 0x30
 800aee0:	f1ae 0502 	sub.w	r5, lr, #2
 800aee4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aee8:	1c44      	adds	r4, r0, #1
 800aeea:	4629      	mov	r1, r5
 800aeec:	4561      	cmp	r1, ip
 800aeee:	d30a      	bcc.n	800af06 <__exponent+0x66>
 800aef0:	f10d 0209 	add.w	r2, sp, #9
 800aef4:	eba2 020e 	sub.w	r2, r2, lr
 800aef8:	4565      	cmp	r5, ip
 800aefa:	bf88      	it	hi
 800aefc:	2200      	movhi	r2, #0
 800aefe:	4413      	add	r3, r2
 800af00:	1a18      	subs	r0, r3, r0
 800af02:	b003      	add	sp, #12
 800af04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af0e:	e7ed      	b.n	800aeec <__exponent+0x4c>
 800af10:	2330      	movs	r3, #48	; 0x30
 800af12:	3130      	adds	r1, #48	; 0x30
 800af14:	7083      	strb	r3, [r0, #2]
 800af16:	70c1      	strb	r1, [r0, #3]
 800af18:	1d03      	adds	r3, r0, #4
 800af1a:	e7f1      	b.n	800af00 <__exponent+0x60>

0800af1c <_printf_float>:
 800af1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af20:	ed2d 8b02 	vpush	{d8}
 800af24:	b08d      	sub	sp, #52	; 0x34
 800af26:	460c      	mov	r4, r1
 800af28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af2c:	4616      	mov	r6, r2
 800af2e:	461f      	mov	r7, r3
 800af30:	4605      	mov	r5, r0
 800af32:	f001 fa6b 	bl	800c40c <_localeconv_r>
 800af36:	f8d0 a000 	ldr.w	sl, [r0]
 800af3a:	4650      	mov	r0, sl
 800af3c:	f7f5 f948 	bl	80001d0 <strlen>
 800af40:	2300      	movs	r3, #0
 800af42:	930a      	str	r3, [sp, #40]	; 0x28
 800af44:	6823      	ldr	r3, [r4, #0]
 800af46:	9305      	str	r3, [sp, #20]
 800af48:	f8d8 3000 	ldr.w	r3, [r8]
 800af4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af50:	3307      	adds	r3, #7
 800af52:	f023 0307 	bic.w	r3, r3, #7
 800af56:	f103 0208 	add.w	r2, r3, #8
 800af5a:	f8c8 2000 	str.w	r2, [r8]
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af66:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af6e:	9307      	str	r3, [sp, #28]
 800af70:	f8cd 8018 	str.w	r8, [sp, #24]
 800af74:	ee08 0a10 	vmov	s16, r0
 800af78:	4b9f      	ldr	r3, [pc, #636]	; (800b1f8 <_printf_float+0x2dc>)
 800af7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af82:	f7f5 fdd3 	bl	8000b2c <__aeabi_dcmpun>
 800af86:	bb88      	cbnz	r0, 800afec <_printf_float+0xd0>
 800af88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af8c:	4b9a      	ldr	r3, [pc, #616]	; (800b1f8 <_printf_float+0x2dc>)
 800af8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af92:	f7f5 fdad 	bl	8000af0 <__aeabi_dcmple>
 800af96:	bb48      	cbnz	r0, 800afec <_printf_float+0xd0>
 800af98:	2200      	movs	r2, #0
 800af9a:	2300      	movs	r3, #0
 800af9c:	4640      	mov	r0, r8
 800af9e:	4649      	mov	r1, r9
 800afa0:	f7f5 fd9c 	bl	8000adc <__aeabi_dcmplt>
 800afa4:	b110      	cbz	r0, 800afac <_printf_float+0x90>
 800afa6:	232d      	movs	r3, #45	; 0x2d
 800afa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afac:	4b93      	ldr	r3, [pc, #588]	; (800b1fc <_printf_float+0x2e0>)
 800afae:	4894      	ldr	r0, [pc, #592]	; (800b200 <_printf_float+0x2e4>)
 800afb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800afb4:	bf94      	ite	ls
 800afb6:	4698      	movls	r8, r3
 800afb8:	4680      	movhi	r8, r0
 800afba:	2303      	movs	r3, #3
 800afbc:	6123      	str	r3, [r4, #16]
 800afbe:	9b05      	ldr	r3, [sp, #20]
 800afc0:	f023 0204 	bic.w	r2, r3, #4
 800afc4:	6022      	str	r2, [r4, #0]
 800afc6:	f04f 0900 	mov.w	r9, #0
 800afca:	9700      	str	r7, [sp, #0]
 800afcc:	4633      	mov	r3, r6
 800afce:	aa0b      	add	r2, sp, #44	; 0x2c
 800afd0:	4621      	mov	r1, r4
 800afd2:	4628      	mov	r0, r5
 800afd4:	f000 f9d8 	bl	800b388 <_printf_common>
 800afd8:	3001      	adds	r0, #1
 800afda:	f040 8090 	bne.w	800b0fe <_printf_float+0x1e2>
 800afde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afe2:	b00d      	add	sp, #52	; 0x34
 800afe4:	ecbd 8b02 	vpop	{d8}
 800afe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afec:	4642      	mov	r2, r8
 800afee:	464b      	mov	r3, r9
 800aff0:	4640      	mov	r0, r8
 800aff2:	4649      	mov	r1, r9
 800aff4:	f7f5 fd9a 	bl	8000b2c <__aeabi_dcmpun>
 800aff8:	b140      	cbz	r0, 800b00c <_printf_float+0xf0>
 800affa:	464b      	mov	r3, r9
 800affc:	2b00      	cmp	r3, #0
 800affe:	bfbc      	itt	lt
 800b000:	232d      	movlt	r3, #45	; 0x2d
 800b002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b006:	487f      	ldr	r0, [pc, #508]	; (800b204 <_printf_float+0x2e8>)
 800b008:	4b7f      	ldr	r3, [pc, #508]	; (800b208 <_printf_float+0x2ec>)
 800b00a:	e7d1      	b.n	800afb0 <_printf_float+0x94>
 800b00c:	6863      	ldr	r3, [r4, #4]
 800b00e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b012:	9206      	str	r2, [sp, #24]
 800b014:	1c5a      	adds	r2, r3, #1
 800b016:	d13f      	bne.n	800b098 <_printf_float+0x17c>
 800b018:	2306      	movs	r3, #6
 800b01a:	6063      	str	r3, [r4, #4]
 800b01c:	9b05      	ldr	r3, [sp, #20]
 800b01e:	6861      	ldr	r1, [r4, #4]
 800b020:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b024:	2300      	movs	r3, #0
 800b026:	9303      	str	r3, [sp, #12]
 800b028:	ab0a      	add	r3, sp, #40	; 0x28
 800b02a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b02e:	ab09      	add	r3, sp, #36	; 0x24
 800b030:	ec49 8b10 	vmov	d0, r8, r9
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	6022      	str	r2, [r4, #0]
 800b038:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b03c:	4628      	mov	r0, r5
 800b03e:	f7ff fecd 	bl	800addc <__cvt>
 800b042:	9b06      	ldr	r3, [sp, #24]
 800b044:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b046:	2b47      	cmp	r3, #71	; 0x47
 800b048:	4680      	mov	r8, r0
 800b04a:	d108      	bne.n	800b05e <_printf_float+0x142>
 800b04c:	1cc8      	adds	r0, r1, #3
 800b04e:	db02      	blt.n	800b056 <_printf_float+0x13a>
 800b050:	6863      	ldr	r3, [r4, #4]
 800b052:	4299      	cmp	r1, r3
 800b054:	dd41      	ble.n	800b0da <_printf_float+0x1be>
 800b056:	f1ab 0b02 	sub.w	fp, fp, #2
 800b05a:	fa5f fb8b 	uxtb.w	fp, fp
 800b05e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b062:	d820      	bhi.n	800b0a6 <_printf_float+0x18a>
 800b064:	3901      	subs	r1, #1
 800b066:	465a      	mov	r2, fp
 800b068:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b06c:	9109      	str	r1, [sp, #36]	; 0x24
 800b06e:	f7ff ff17 	bl	800aea0 <__exponent>
 800b072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b074:	1813      	adds	r3, r2, r0
 800b076:	2a01      	cmp	r2, #1
 800b078:	4681      	mov	r9, r0
 800b07a:	6123      	str	r3, [r4, #16]
 800b07c:	dc02      	bgt.n	800b084 <_printf_float+0x168>
 800b07e:	6822      	ldr	r2, [r4, #0]
 800b080:	07d2      	lsls	r2, r2, #31
 800b082:	d501      	bpl.n	800b088 <_printf_float+0x16c>
 800b084:	3301      	adds	r3, #1
 800b086:	6123      	str	r3, [r4, #16]
 800b088:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d09c      	beq.n	800afca <_printf_float+0xae>
 800b090:	232d      	movs	r3, #45	; 0x2d
 800b092:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b096:	e798      	b.n	800afca <_printf_float+0xae>
 800b098:	9a06      	ldr	r2, [sp, #24]
 800b09a:	2a47      	cmp	r2, #71	; 0x47
 800b09c:	d1be      	bne.n	800b01c <_printf_float+0x100>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1bc      	bne.n	800b01c <_printf_float+0x100>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e7b9      	b.n	800b01a <_printf_float+0xfe>
 800b0a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b0aa:	d118      	bne.n	800b0de <_printf_float+0x1c2>
 800b0ac:	2900      	cmp	r1, #0
 800b0ae:	6863      	ldr	r3, [r4, #4]
 800b0b0:	dd0b      	ble.n	800b0ca <_printf_float+0x1ae>
 800b0b2:	6121      	str	r1, [r4, #16]
 800b0b4:	b913      	cbnz	r3, 800b0bc <_printf_float+0x1a0>
 800b0b6:	6822      	ldr	r2, [r4, #0]
 800b0b8:	07d0      	lsls	r0, r2, #31
 800b0ba:	d502      	bpl.n	800b0c2 <_printf_float+0x1a6>
 800b0bc:	3301      	adds	r3, #1
 800b0be:	440b      	add	r3, r1
 800b0c0:	6123      	str	r3, [r4, #16]
 800b0c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0c4:	f04f 0900 	mov.w	r9, #0
 800b0c8:	e7de      	b.n	800b088 <_printf_float+0x16c>
 800b0ca:	b913      	cbnz	r3, 800b0d2 <_printf_float+0x1b6>
 800b0cc:	6822      	ldr	r2, [r4, #0]
 800b0ce:	07d2      	lsls	r2, r2, #31
 800b0d0:	d501      	bpl.n	800b0d6 <_printf_float+0x1ba>
 800b0d2:	3302      	adds	r3, #2
 800b0d4:	e7f4      	b.n	800b0c0 <_printf_float+0x1a4>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e7f2      	b.n	800b0c0 <_printf_float+0x1a4>
 800b0da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	db05      	blt.n	800b0f0 <_printf_float+0x1d4>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	6121      	str	r1, [r4, #16]
 800b0e8:	07d8      	lsls	r0, r3, #31
 800b0ea:	d5ea      	bpl.n	800b0c2 <_printf_float+0x1a6>
 800b0ec:	1c4b      	adds	r3, r1, #1
 800b0ee:	e7e7      	b.n	800b0c0 <_printf_float+0x1a4>
 800b0f0:	2900      	cmp	r1, #0
 800b0f2:	bfd4      	ite	le
 800b0f4:	f1c1 0202 	rsble	r2, r1, #2
 800b0f8:	2201      	movgt	r2, #1
 800b0fa:	4413      	add	r3, r2
 800b0fc:	e7e0      	b.n	800b0c0 <_printf_float+0x1a4>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	055a      	lsls	r2, r3, #21
 800b102:	d407      	bmi.n	800b114 <_printf_float+0x1f8>
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	4642      	mov	r2, r8
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	d12c      	bne.n	800b16c <_printf_float+0x250>
 800b112:	e764      	b.n	800afde <_printf_float+0xc2>
 800b114:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b118:	f240 80e0 	bls.w	800b2dc <_printf_float+0x3c0>
 800b11c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b120:	2200      	movs	r2, #0
 800b122:	2300      	movs	r3, #0
 800b124:	f7f5 fcd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b128:	2800      	cmp	r0, #0
 800b12a:	d034      	beq.n	800b196 <_printf_float+0x27a>
 800b12c:	4a37      	ldr	r2, [pc, #220]	; (800b20c <_printf_float+0x2f0>)
 800b12e:	2301      	movs	r3, #1
 800b130:	4631      	mov	r1, r6
 800b132:	4628      	mov	r0, r5
 800b134:	47b8      	blx	r7
 800b136:	3001      	adds	r0, #1
 800b138:	f43f af51 	beq.w	800afde <_printf_float+0xc2>
 800b13c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b140:	429a      	cmp	r2, r3
 800b142:	db02      	blt.n	800b14a <_printf_float+0x22e>
 800b144:	6823      	ldr	r3, [r4, #0]
 800b146:	07d8      	lsls	r0, r3, #31
 800b148:	d510      	bpl.n	800b16c <_printf_float+0x250>
 800b14a:	ee18 3a10 	vmov	r3, s16
 800b14e:	4652      	mov	r2, sl
 800b150:	4631      	mov	r1, r6
 800b152:	4628      	mov	r0, r5
 800b154:	47b8      	blx	r7
 800b156:	3001      	adds	r0, #1
 800b158:	f43f af41 	beq.w	800afde <_printf_float+0xc2>
 800b15c:	f04f 0800 	mov.w	r8, #0
 800b160:	f104 091a 	add.w	r9, r4, #26
 800b164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b166:	3b01      	subs	r3, #1
 800b168:	4543      	cmp	r3, r8
 800b16a:	dc09      	bgt.n	800b180 <_printf_float+0x264>
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	079b      	lsls	r3, r3, #30
 800b170:	f100 8105 	bmi.w	800b37e <_printf_float+0x462>
 800b174:	68e0      	ldr	r0, [r4, #12]
 800b176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b178:	4298      	cmp	r0, r3
 800b17a:	bfb8      	it	lt
 800b17c:	4618      	movlt	r0, r3
 800b17e:	e730      	b.n	800afe2 <_printf_float+0xc6>
 800b180:	2301      	movs	r3, #1
 800b182:	464a      	mov	r2, r9
 800b184:	4631      	mov	r1, r6
 800b186:	4628      	mov	r0, r5
 800b188:	47b8      	blx	r7
 800b18a:	3001      	adds	r0, #1
 800b18c:	f43f af27 	beq.w	800afde <_printf_float+0xc2>
 800b190:	f108 0801 	add.w	r8, r8, #1
 800b194:	e7e6      	b.n	800b164 <_printf_float+0x248>
 800b196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b198:	2b00      	cmp	r3, #0
 800b19a:	dc39      	bgt.n	800b210 <_printf_float+0x2f4>
 800b19c:	4a1b      	ldr	r2, [pc, #108]	; (800b20c <_printf_float+0x2f0>)
 800b19e:	2301      	movs	r3, #1
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	47b8      	blx	r7
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	f43f af19 	beq.w	800afde <_printf_float+0xc2>
 800b1ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	d102      	bne.n	800b1ba <_printf_float+0x29e>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	07d9      	lsls	r1, r3, #31
 800b1b8:	d5d8      	bpl.n	800b16c <_printf_float+0x250>
 800b1ba:	ee18 3a10 	vmov	r3, s16
 800b1be:	4652      	mov	r2, sl
 800b1c0:	4631      	mov	r1, r6
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	47b8      	blx	r7
 800b1c6:	3001      	adds	r0, #1
 800b1c8:	f43f af09 	beq.w	800afde <_printf_float+0xc2>
 800b1cc:	f04f 0900 	mov.w	r9, #0
 800b1d0:	f104 0a1a 	add.w	sl, r4, #26
 800b1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d6:	425b      	negs	r3, r3
 800b1d8:	454b      	cmp	r3, r9
 800b1da:	dc01      	bgt.n	800b1e0 <_printf_float+0x2c4>
 800b1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1de:	e792      	b.n	800b106 <_printf_float+0x1ea>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	47b8      	blx	r7
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	f43f aef7 	beq.w	800afde <_printf_float+0xc2>
 800b1f0:	f109 0901 	add.w	r9, r9, #1
 800b1f4:	e7ee      	b.n	800b1d4 <_printf_float+0x2b8>
 800b1f6:	bf00      	nop
 800b1f8:	7fefffff 	.word	0x7fefffff
 800b1fc:	0801056c 	.word	0x0801056c
 800b200:	08010570 	.word	0x08010570
 800b204:	08010578 	.word	0x08010578
 800b208:	08010574 	.word	0x08010574
 800b20c:	0801057c 	.word	0x0801057c
 800b210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b214:	429a      	cmp	r2, r3
 800b216:	bfa8      	it	ge
 800b218:	461a      	movge	r2, r3
 800b21a:	2a00      	cmp	r2, #0
 800b21c:	4691      	mov	r9, r2
 800b21e:	dc37      	bgt.n	800b290 <_printf_float+0x374>
 800b220:	f04f 0b00 	mov.w	fp, #0
 800b224:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b228:	f104 021a 	add.w	r2, r4, #26
 800b22c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b22e:	9305      	str	r3, [sp, #20]
 800b230:	eba3 0309 	sub.w	r3, r3, r9
 800b234:	455b      	cmp	r3, fp
 800b236:	dc33      	bgt.n	800b2a0 <_printf_float+0x384>
 800b238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b23c:	429a      	cmp	r2, r3
 800b23e:	db3b      	blt.n	800b2b8 <_printf_float+0x39c>
 800b240:	6823      	ldr	r3, [r4, #0]
 800b242:	07da      	lsls	r2, r3, #31
 800b244:	d438      	bmi.n	800b2b8 <_printf_float+0x39c>
 800b246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b248:	9a05      	ldr	r2, [sp, #20]
 800b24a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b24c:	1a9a      	subs	r2, r3, r2
 800b24e:	eba3 0901 	sub.w	r9, r3, r1
 800b252:	4591      	cmp	r9, r2
 800b254:	bfa8      	it	ge
 800b256:	4691      	movge	r9, r2
 800b258:	f1b9 0f00 	cmp.w	r9, #0
 800b25c:	dc35      	bgt.n	800b2ca <_printf_float+0x3ae>
 800b25e:	f04f 0800 	mov.w	r8, #0
 800b262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b266:	f104 0a1a 	add.w	sl, r4, #26
 800b26a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b26e:	1a9b      	subs	r3, r3, r2
 800b270:	eba3 0309 	sub.w	r3, r3, r9
 800b274:	4543      	cmp	r3, r8
 800b276:	f77f af79 	ble.w	800b16c <_printf_float+0x250>
 800b27a:	2301      	movs	r3, #1
 800b27c:	4652      	mov	r2, sl
 800b27e:	4631      	mov	r1, r6
 800b280:	4628      	mov	r0, r5
 800b282:	47b8      	blx	r7
 800b284:	3001      	adds	r0, #1
 800b286:	f43f aeaa 	beq.w	800afde <_printf_float+0xc2>
 800b28a:	f108 0801 	add.w	r8, r8, #1
 800b28e:	e7ec      	b.n	800b26a <_printf_float+0x34e>
 800b290:	4613      	mov	r3, r2
 800b292:	4631      	mov	r1, r6
 800b294:	4642      	mov	r2, r8
 800b296:	4628      	mov	r0, r5
 800b298:	47b8      	blx	r7
 800b29a:	3001      	adds	r0, #1
 800b29c:	d1c0      	bne.n	800b220 <_printf_float+0x304>
 800b29e:	e69e      	b.n	800afde <_printf_float+0xc2>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	9205      	str	r2, [sp, #20]
 800b2a8:	47b8      	blx	r7
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	f43f ae97 	beq.w	800afde <_printf_float+0xc2>
 800b2b0:	9a05      	ldr	r2, [sp, #20]
 800b2b2:	f10b 0b01 	add.w	fp, fp, #1
 800b2b6:	e7b9      	b.n	800b22c <_printf_float+0x310>
 800b2b8:	ee18 3a10 	vmov	r3, s16
 800b2bc:	4652      	mov	r2, sl
 800b2be:	4631      	mov	r1, r6
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	47b8      	blx	r7
 800b2c4:	3001      	adds	r0, #1
 800b2c6:	d1be      	bne.n	800b246 <_printf_float+0x32a>
 800b2c8:	e689      	b.n	800afde <_printf_float+0xc2>
 800b2ca:	9a05      	ldr	r2, [sp, #20]
 800b2cc:	464b      	mov	r3, r9
 800b2ce:	4442      	add	r2, r8
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b8      	blx	r7
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d1c1      	bne.n	800b25e <_printf_float+0x342>
 800b2da:	e680      	b.n	800afde <_printf_float+0xc2>
 800b2dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2de:	2a01      	cmp	r2, #1
 800b2e0:	dc01      	bgt.n	800b2e6 <_printf_float+0x3ca>
 800b2e2:	07db      	lsls	r3, r3, #31
 800b2e4:	d538      	bpl.n	800b358 <_printf_float+0x43c>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	4642      	mov	r2, r8
 800b2ea:	4631      	mov	r1, r6
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	47b8      	blx	r7
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	f43f ae74 	beq.w	800afde <_printf_float+0xc2>
 800b2f6:	ee18 3a10 	vmov	r3, s16
 800b2fa:	4652      	mov	r2, sl
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4628      	mov	r0, r5
 800b300:	47b8      	blx	r7
 800b302:	3001      	adds	r0, #1
 800b304:	f43f ae6b 	beq.w	800afde <_printf_float+0xc2>
 800b308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b30c:	2200      	movs	r2, #0
 800b30e:	2300      	movs	r3, #0
 800b310:	f7f5 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800b314:	b9d8      	cbnz	r0, 800b34e <_printf_float+0x432>
 800b316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b318:	f108 0201 	add.w	r2, r8, #1
 800b31c:	3b01      	subs	r3, #1
 800b31e:	4631      	mov	r1, r6
 800b320:	4628      	mov	r0, r5
 800b322:	47b8      	blx	r7
 800b324:	3001      	adds	r0, #1
 800b326:	d10e      	bne.n	800b346 <_printf_float+0x42a>
 800b328:	e659      	b.n	800afde <_printf_float+0xc2>
 800b32a:	2301      	movs	r3, #1
 800b32c:	4652      	mov	r2, sl
 800b32e:	4631      	mov	r1, r6
 800b330:	4628      	mov	r0, r5
 800b332:	47b8      	blx	r7
 800b334:	3001      	adds	r0, #1
 800b336:	f43f ae52 	beq.w	800afde <_printf_float+0xc2>
 800b33a:	f108 0801 	add.w	r8, r8, #1
 800b33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b340:	3b01      	subs	r3, #1
 800b342:	4543      	cmp	r3, r8
 800b344:	dcf1      	bgt.n	800b32a <_printf_float+0x40e>
 800b346:	464b      	mov	r3, r9
 800b348:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b34c:	e6dc      	b.n	800b108 <_printf_float+0x1ec>
 800b34e:	f04f 0800 	mov.w	r8, #0
 800b352:	f104 0a1a 	add.w	sl, r4, #26
 800b356:	e7f2      	b.n	800b33e <_printf_float+0x422>
 800b358:	2301      	movs	r3, #1
 800b35a:	4642      	mov	r2, r8
 800b35c:	e7df      	b.n	800b31e <_printf_float+0x402>
 800b35e:	2301      	movs	r3, #1
 800b360:	464a      	mov	r2, r9
 800b362:	4631      	mov	r1, r6
 800b364:	4628      	mov	r0, r5
 800b366:	47b8      	blx	r7
 800b368:	3001      	adds	r0, #1
 800b36a:	f43f ae38 	beq.w	800afde <_printf_float+0xc2>
 800b36e:	f108 0801 	add.w	r8, r8, #1
 800b372:	68e3      	ldr	r3, [r4, #12]
 800b374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b376:	1a5b      	subs	r3, r3, r1
 800b378:	4543      	cmp	r3, r8
 800b37a:	dcf0      	bgt.n	800b35e <_printf_float+0x442>
 800b37c:	e6fa      	b.n	800b174 <_printf_float+0x258>
 800b37e:	f04f 0800 	mov.w	r8, #0
 800b382:	f104 0919 	add.w	r9, r4, #25
 800b386:	e7f4      	b.n	800b372 <_printf_float+0x456>

0800b388 <_printf_common>:
 800b388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	4616      	mov	r6, r2
 800b38e:	4699      	mov	r9, r3
 800b390:	688a      	ldr	r2, [r1, #8]
 800b392:	690b      	ldr	r3, [r1, #16]
 800b394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b398:	4293      	cmp	r3, r2
 800b39a:	bfb8      	it	lt
 800b39c:	4613      	movlt	r3, r2
 800b39e:	6033      	str	r3, [r6, #0]
 800b3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3a4:	4607      	mov	r7, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	b10a      	cbz	r2, 800b3ae <_printf_common+0x26>
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	6033      	str	r3, [r6, #0]
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	0699      	lsls	r1, r3, #26
 800b3b2:	bf42      	ittt	mi
 800b3b4:	6833      	ldrmi	r3, [r6, #0]
 800b3b6:	3302      	addmi	r3, #2
 800b3b8:	6033      	strmi	r3, [r6, #0]
 800b3ba:	6825      	ldr	r5, [r4, #0]
 800b3bc:	f015 0506 	ands.w	r5, r5, #6
 800b3c0:	d106      	bne.n	800b3d0 <_printf_common+0x48>
 800b3c2:	f104 0a19 	add.w	sl, r4, #25
 800b3c6:	68e3      	ldr	r3, [r4, #12]
 800b3c8:	6832      	ldr	r2, [r6, #0]
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	42ab      	cmp	r3, r5
 800b3ce:	dc26      	bgt.n	800b41e <_printf_common+0x96>
 800b3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3d4:	1e13      	subs	r3, r2, #0
 800b3d6:	6822      	ldr	r2, [r4, #0]
 800b3d8:	bf18      	it	ne
 800b3da:	2301      	movne	r3, #1
 800b3dc:	0692      	lsls	r2, r2, #26
 800b3de:	d42b      	bmi.n	800b438 <_printf_common+0xb0>
 800b3e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	47c0      	blx	r8
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	d01e      	beq.n	800b42c <_printf_common+0xa4>
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	68e5      	ldr	r5, [r4, #12]
 800b3f2:	6832      	ldr	r2, [r6, #0]
 800b3f4:	f003 0306 	and.w	r3, r3, #6
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	bf08      	it	eq
 800b3fc:	1aad      	subeq	r5, r5, r2
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	bf0c      	ite	eq
 800b404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b408:	2500      	movne	r5, #0
 800b40a:	4293      	cmp	r3, r2
 800b40c:	bfc4      	itt	gt
 800b40e:	1a9b      	subgt	r3, r3, r2
 800b410:	18ed      	addgt	r5, r5, r3
 800b412:	2600      	movs	r6, #0
 800b414:	341a      	adds	r4, #26
 800b416:	42b5      	cmp	r5, r6
 800b418:	d11a      	bne.n	800b450 <_printf_common+0xc8>
 800b41a:	2000      	movs	r0, #0
 800b41c:	e008      	b.n	800b430 <_printf_common+0xa8>
 800b41e:	2301      	movs	r3, #1
 800b420:	4652      	mov	r2, sl
 800b422:	4649      	mov	r1, r9
 800b424:	4638      	mov	r0, r7
 800b426:	47c0      	blx	r8
 800b428:	3001      	adds	r0, #1
 800b42a:	d103      	bne.n	800b434 <_printf_common+0xac>
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b434:	3501      	adds	r5, #1
 800b436:	e7c6      	b.n	800b3c6 <_printf_common+0x3e>
 800b438:	18e1      	adds	r1, r4, r3
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	2030      	movs	r0, #48	; 0x30
 800b43e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b442:	4422      	add	r2, r4
 800b444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b44c:	3302      	adds	r3, #2
 800b44e:	e7c7      	b.n	800b3e0 <_printf_common+0x58>
 800b450:	2301      	movs	r3, #1
 800b452:	4622      	mov	r2, r4
 800b454:	4649      	mov	r1, r9
 800b456:	4638      	mov	r0, r7
 800b458:	47c0      	blx	r8
 800b45a:	3001      	adds	r0, #1
 800b45c:	d0e6      	beq.n	800b42c <_printf_common+0xa4>
 800b45e:	3601      	adds	r6, #1
 800b460:	e7d9      	b.n	800b416 <_printf_common+0x8e>
	...

0800b464 <_printf_i>:
 800b464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b468:	7e0f      	ldrb	r7, [r1, #24]
 800b46a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b46c:	2f78      	cmp	r7, #120	; 0x78
 800b46e:	4691      	mov	r9, r2
 800b470:	4680      	mov	r8, r0
 800b472:	460c      	mov	r4, r1
 800b474:	469a      	mov	sl, r3
 800b476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b47a:	d807      	bhi.n	800b48c <_printf_i+0x28>
 800b47c:	2f62      	cmp	r7, #98	; 0x62
 800b47e:	d80a      	bhi.n	800b496 <_printf_i+0x32>
 800b480:	2f00      	cmp	r7, #0
 800b482:	f000 80d8 	beq.w	800b636 <_printf_i+0x1d2>
 800b486:	2f58      	cmp	r7, #88	; 0x58
 800b488:	f000 80a3 	beq.w	800b5d2 <_printf_i+0x16e>
 800b48c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b494:	e03a      	b.n	800b50c <_printf_i+0xa8>
 800b496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b49a:	2b15      	cmp	r3, #21
 800b49c:	d8f6      	bhi.n	800b48c <_printf_i+0x28>
 800b49e:	a101      	add	r1, pc, #4	; (adr r1, 800b4a4 <_printf_i+0x40>)
 800b4a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4a4:	0800b4fd 	.word	0x0800b4fd
 800b4a8:	0800b511 	.word	0x0800b511
 800b4ac:	0800b48d 	.word	0x0800b48d
 800b4b0:	0800b48d 	.word	0x0800b48d
 800b4b4:	0800b48d 	.word	0x0800b48d
 800b4b8:	0800b48d 	.word	0x0800b48d
 800b4bc:	0800b511 	.word	0x0800b511
 800b4c0:	0800b48d 	.word	0x0800b48d
 800b4c4:	0800b48d 	.word	0x0800b48d
 800b4c8:	0800b48d 	.word	0x0800b48d
 800b4cc:	0800b48d 	.word	0x0800b48d
 800b4d0:	0800b61d 	.word	0x0800b61d
 800b4d4:	0800b541 	.word	0x0800b541
 800b4d8:	0800b5ff 	.word	0x0800b5ff
 800b4dc:	0800b48d 	.word	0x0800b48d
 800b4e0:	0800b48d 	.word	0x0800b48d
 800b4e4:	0800b63f 	.word	0x0800b63f
 800b4e8:	0800b48d 	.word	0x0800b48d
 800b4ec:	0800b541 	.word	0x0800b541
 800b4f0:	0800b48d 	.word	0x0800b48d
 800b4f4:	0800b48d 	.word	0x0800b48d
 800b4f8:	0800b607 	.word	0x0800b607
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	1d1a      	adds	r2, r3, #4
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	602a      	str	r2, [r5, #0]
 800b504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b50c:	2301      	movs	r3, #1
 800b50e:	e0a3      	b.n	800b658 <_printf_i+0x1f4>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	6829      	ldr	r1, [r5, #0]
 800b514:	0606      	lsls	r6, r0, #24
 800b516:	f101 0304 	add.w	r3, r1, #4
 800b51a:	d50a      	bpl.n	800b532 <_printf_i+0xce>
 800b51c:	680e      	ldr	r6, [r1, #0]
 800b51e:	602b      	str	r3, [r5, #0]
 800b520:	2e00      	cmp	r6, #0
 800b522:	da03      	bge.n	800b52c <_printf_i+0xc8>
 800b524:	232d      	movs	r3, #45	; 0x2d
 800b526:	4276      	negs	r6, r6
 800b528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b52c:	485e      	ldr	r0, [pc, #376]	; (800b6a8 <_printf_i+0x244>)
 800b52e:	230a      	movs	r3, #10
 800b530:	e019      	b.n	800b566 <_printf_i+0x102>
 800b532:	680e      	ldr	r6, [r1, #0]
 800b534:	602b      	str	r3, [r5, #0]
 800b536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b53a:	bf18      	it	ne
 800b53c:	b236      	sxthne	r6, r6
 800b53e:	e7ef      	b.n	800b520 <_printf_i+0xbc>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	1d19      	adds	r1, r3, #4
 800b546:	6029      	str	r1, [r5, #0]
 800b548:	0601      	lsls	r1, r0, #24
 800b54a:	d501      	bpl.n	800b550 <_printf_i+0xec>
 800b54c:	681e      	ldr	r6, [r3, #0]
 800b54e:	e002      	b.n	800b556 <_printf_i+0xf2>
 800b550:	0646      	lsls	r6, r0, #25
 800b552:	d5fb      	bpl.n	800b54c <_printf_i+0xe8>
 800b554:	881e      	ldrh	r6, [r3, #0]
 800b556:	4854      	ldr	r0, [pc, #336]	; (800b6a8 <_printf_i+0x244>)
 800b558:	2f6f      	cmp	r7, #111	; 0x6f
 800b55a:	bf0c      	ite	eq
 800b55c:	2308      	moveq	r3, #8
 800b55e:	230a      	movne	r3, #10
 800b560:	2100      	movs	r1, #0
 800b562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b566:	6865      	ldr	r5, [r4, #4]
 800b568:	60a5      	str	r5, [r4, #8]
 800b56a:	2d00      	cmp	r5, #0
 800b56c:	bfa2      	ittt	ge
 800b56e:	6821      	ldrge	r1, [r4, #0]
 800b570:	f021 0104 	bicge.w	r1, r1, #4
 800b574:	6021      	strge	r1, [r4, #0]
 800b576:	b90e      	cbnz	r6, 800b57c <_printf_i+0x118>
 800b578:	2d00      	cmp	r5, #0
 800b57a:	d04d      	beq.n	800b618 <_printf_i+0x1b4>
 800b57c:	4615      	mov	r5, r2
 800b57e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b582:	fb03 6711 	mls	r7, r3, r1, r6
 800b586:	5dc7      	ldrb	r7, [r0, r7]
 800b588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b58c:	4637      	mov	r7, r6
 800b58e:	42bb      	cmp	r3, r7
 800b590:	460e      	mov	r6, r1
 800b592:	d9f4      	bls.n	800b57e <_printf_i+0x11a>
 800b594:	2b08      	cmp	r3, #8
 800b596:	d10b      	bne.n	800b5b0 <_printf_i+0x14c>
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	07de      	lsls	r6, r3, #31
 800b59c:	d508      	bpl.n	800b5b0 <_printf_i+0x14c>
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	6861      	ldr	r1, [r4, #4]
 800b5a2:	4299      	cmp	r1, r3
 800b5a4:	bfde      	ittt	le
 800b5a6:	2330      	movle	r3, #48	; 0x30
 800b5a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b5b0:	1b52      	subs	r2, r2, r5
 800b5b2:	6122      	str	r2, [r4, #16]
 800b5b4:	f8cd a000 	str.w	sl, [sp]
 800b5b8:	464b      	mov	r3, r9
 800b5ba:	aa03      	add	r2, sp, #12
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f7ff fee2 	bl	800b388 <_printf_common>
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	d14c      	bne.n	800b662 <_printf_i+0x1fe>
 800b5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5cc:	b004      	add	sp, #16
 800b5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d2:	4835      	ldr	r0, [pc, #212]	; (800b6a8 <_printf_i+0x244>)
 800b5d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5d8:	6829      	ldr	r1, [r5, #0]
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5e0:	6029      	str	r1, [r5, #0]
 800b5e2:	061d      	lsls	r5, r3, #24
 800b5e4:	d514      	bpl.n	800b610 <_printf_i+0x1ac>
 800b5e6:	07df      	lsls	r7, r3, #31
 800b5e8:	bf44      	itt	mi
 800b5ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ee:	6023      	strmi	r3, [r4, #0]
 800b5f0:	b91e      	cbnz	r6, 800b5fa <_printf_i+0x196>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	f023 0320 	bic.w	r3, r3, #32
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	2310      	movs	r3, #16
 800b5fc:	e7b0      	b.n	800b560 <_printf_i+0xfc>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	f043 0320 	orr.w	r3, r3, #32
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	2378      	movs	r3, #120	; 0x78
 800b608:	4828      	ldr	r0, [pc, #160]	; (800b6ac <_printf_i+0x248>)
 800b60a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b60e:	e7e3      	b.n	800b5d8 <_printf_i+0x174>
 800b610:	0659      	lsls	r1, r3, #25
 800b612:	bf48      	it	mi
 800b614:	b2b6      	uxthmi	r6, r6
 800b616:	e7e6      	b.n	800b5e6 <_printf_i+0x182>
 800b618:	4615      	mov	r5, r2
 800b61a:	e7bb      	b.n	800b594 <_printf_i+0x130>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	6826      	ldr	r6, [r4, #0]
 800b620:	6961      	ldr	r1, [r4, #20]
 800b622:	1d18      	adds	r0, r3, #4
 800b624:	6028      	str	r0, [r5, #0]
 800b626:	0635      	lsls	r5, r6, #24
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	d501      	bpl.n	800b630 <_printf_i+0x1cc>
 800b62c:	6019      	str	r1, [r3, #0]
 800b62e:	e002      	b.n	800b636 <_printf_i+0x1d2>
 800b630:	0670      	lsls	r0, r6, #25
 800b632:	d5fb      	bpl.n	800b62c <_printf_i+0x1c8>
 800b634:	8019      	strh	r1, [r3, #0]
 800b636:	2300      	movs	r3, #0
 800b638:	6123      	str	r3, [r4, #16]
 800b63a:	4615      	mov	r5, r2
 800b63c:	e7ba      	b.n	800b5b4 <_printf_i+0x150>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	1d1a      	adds	r2, r3, #4
 800b642:	602a      	str	r2, [r5, #0]
 800b644:	681d      	ldr	r5, [r3, #0]
 800b646:	6862      	ldr	r2, [r4, #4]
 800b648:	2100      	movs	r1, #0
 800b64a:	4628      	mov	r0, r5
 800b64c:	f7f4 fdc8 	bl	80001e0 <memchr>
 800b650:	b108      	cbz	r0, 800b656 <_printf_i+0x1f2>
 800b652:	1b40      	subs	r0, r0, r5
 800b654:	6060      	str	r0, [r4, #4]
 800b656:	6863      	ldr	r3, [r4, #4]
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	2300      	movs	r3, #0
 800b65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b660:	e7a8      	b.n	800b5b4 <_printf_i+0x150>
 800b662:	6923      	ldr	r3, [r4, #16]
 800b664:	462a      	mov	r2, r5
 800b666:	4649      	mov	r1, r9
 800b668:	4640      	mov	r0, r8
 800b66a:	47d0      	blx	sl
 800b66c:	3001      	adds	r0, #1
 800b66e:	d0ab      	beq.n	800b5c8 <_printf_i+0x164>
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	079b      	lsls	r3, r3, #30
 800b674:	d413      	bmi.n	800b69e <_printf_i+0x23a>
 800b676:	68e0      	ldr	r0, [r4, #12]
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	4298      	cmp	r0, r3
 800b67c:	bfb8      	it	lt
 800b67e:	4618      	movlt	r0, r3
 800b680:	e7a4      	b.n	800b5cc <_printf_i+0x168>
 800b682:	2301      	movs	r3, #1
 800b684:	4632      	mov	r2, r6
 800b686:	4649      	mov	r1, r9
 800b688:	4640      	mov	r0, r8
 800b68a:	47d0      	blx	sl
 800b68c:	3001      	adds	r0, #1
 800b68e:	d09b      	beq.n	800b5c8 <_printf_i+0x164>
 800b690:	3501      	adds	r5, #1
 800b692:	68e3      	ldr	r3, [r4, #12]
 800b694:	9903      	ldr	r1, [sp, #12]
 800b696:	1a5b      	subs	r3, r3, r1
 800b698:	42ab      	cmp	r3, r5
 800b69a:	dcf2      	bgt.n	800b682 <_printf_i+0x21e>
 800b69c:	e7eb      	b.n	800b676 <_printf_i+0x212>
 800b69e:	2500      	movs	r5, #0
 800b6a0:	f104 0619 	add.w	r6, r4, #25
 800b6a4:	e7f5      	b.n	800b692 <_printf_i+0x22e>
 800b6a6:	bf00      	nop
 800b6a8:	0801057e 	.word	0x0801057e
 800b6ac:	0801058f 	.word	0x0801058f

0800b6b0 <siprintf>:
 800b6b0:	b40e      	push	{r1, r2, r3}
 800b6b2:	b500      	push	{lr}
 800b6b4:	b09c      	sub	sp, #112	; 0x70
 800b6b6:	ab1d      	add	r3, sp, #116	; 0x74
 800b6b8:	9002      	str	r0, [sp, #8]
 800b6ba:	9006      	str	r0, [sp, #24]
 800b6bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6c0:	4809      	ldr	r0, [pc, #36]	; (800b6e8 <siprintf+0x38>)
 800b6c2:	9107      	str	r1, [sp, #28]
 800b6c4:	9104      	str	r1, [sp, #16]
 800b6c6:	4909      	ldr	r1, [pc, #36]	; (800b6ec <siprintf+0x3c>)
 800b6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6cc:	9105      	str	r1, [sp, #20]
 800b6ce:	6800      	ldr	r0, [r0, #0]
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	a902      	add	r1, sp, #8
 800b6d4:	f001 fb7c 	bl	800cdd0 <_svfiprintf_r>
 800b6d8:	9b02      	ldr	r3, [sp, #8]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	701a      	strb	r2, [r3, #0]
 800b6de:	b01c      	add	sp, #112	; 0x70
 800b6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e4:	b003      	add	sp, #12
 800b6e6:	4770      	bx	lr
 800b6e8:	20000060 	.word	0x20000060
 800b6ec:	ffff0208 	.word	0xffff0208

0800b6f0 <strncpy>:
 800b6f0:	b510      	push	{r4, lr}
 800b6f2:	3901      	subs	r1, #1
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	b132      	cbz	r2, 800b706 <strncpy+0x16>
 800b6f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b6fc:	f803 4b01 	strb.w	r4, [r3], #1
 800b700:	3a01      	subs	r2, #1
 800b702:	2c00      	cmp	r4, #0
 800b704:	d1f7      	bne.n	800b6f6 <strncpy+0x6>
 800b706:	441a      	add	r2, r3
 800b708:	2100      	movs	r1, #0
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d100      	bne.n	800b710 <strncpy+0x20>
 800b70e:	bd10      	pop	{r4, pc}
 800b710:	f803 1b01 	strb.w	r1, [r3], #1
 800b714:	e7f9      	b.n	800b70a <strncpy+0x1a>

0800b716 <quorem>:
 800b716:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71a:	6903      	ldr	r3, [r0, #16]
 800b71c:	690c      	ldr	r4, [r1, #16]
 800b71e:	42a3      	cmp	r3, r4
 800b720:	4607      	mov	r7, r0
 800b722:	f2c0 8081 	blt.w	800b828 <quorem+0x112>
 800b726:	3c01      	subs	r4, #1
 800b728:	f101 0814 	add.w	r8, r1, #20
 800b72c:	f100 0514 	add.w	r5, r0, #20
 800b730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b73a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b73e:	3301      	adds	r3, #1
 800b740:	429a      	cmp	r2, r3
 800b742:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b746:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b74a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b74e:	d331      	bcc.n	800b7b4 <quorem+0x9e>
 800b750:	f04f 0e00 	mov.w	lr, #0
 800b754:	4640      	mov	r0, r8
 800b756:	46ac      	mov	ip, r5
 800b758:	46f2      	mov	sl, lr
 800b75a:	f850 2b04 	ldr.w	r2, [r0], #4
 800b75e:	b293      	uxth	r3, r2
 800b760:	fb06 e303 	mla	r3, r6, r3, lr
 800b764:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b768:	b29b      	uxth	r3, r3
 800b76a:	ebaa 0303 	sub.w	r3, sl, r3
 800b76e:	f8dc a000 	ldr.w	sl, [ip]
 800b772:	0c12      	lsrs	r2, r2, #16
 800b774:	fa13 f38a 	uxtah	r3, r3, sl
 800b778:	fb06 e202 	mla	r2, r6, r2, lr
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	9b00      	ldr	r3, [sp, #0]
 800b780:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b784:	b292      	uxth	r2, r2
 800b786:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b78a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b78e:	f8bd 3000 	ldrh.w	r3, [sp]
 800b792:	4581      	cmp	r9, r0
 800b794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b798:	f84c 3b04 	str.w	r3, [ip], #4
 800b79c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7a0:	d2db      	bcs.n	800b75a <quorem+0x44>
 800b7a2:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7a6:	b92b      	cbnz	r3, 800b7b4 <quorem+0x9e>
 800b7a8:	9b01      	ldr	r3, [sp, #4]
 800b7aa:	3b04      	subs	r3, #4
 800b7ac:	429d      	cmp	r5, r3
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	d32e      	bcc.n	800b810 <quorem+0xfa>
 800b7b2:	613c      	str	r4, [r7, #16]
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	f001 f8b7 	bl	800c928 <__mcmp>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	db24      	blt.n	800b808 <quorem+0xf2>
 800b7be:	3601      	adds	r6, #1
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f04f 0c00 	mov.w	ip, #0
 800b7c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7ca:	f8d0 e000 	ldr.w	lr, [r0]
 800b7ce:	b293      	uxth	r3, r2
 800b7d0:	ebac 0303 	sub.w	r3, ip, r3
 800b7d4:	0c12      	lsrs	r2, r2, #16
 800b7d6:	fa13 f38e 	uxtah	r3, r3, lr
 800b7da:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7e8:	45c1      	cmp	r9, r8
 800b7ea:	f840 3b04 	str.w	r3, [r0], #4
 800b7ee:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7f2:	d2e8      	bcs.n	800b7c6 <quorem+0xb0>
 800b7f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7fc:	b922      	cbnz	r2, 800b808 <quorem+0xf2>
 800b7fe:	3b04      	subs	r3, #4
 800b800:	429d      	cmp	r5, r3
 800b802:	461a      	mov	r2, r3
 800b804:	d30a      	bcc.n	800b81c <quorem+0x106>
 800b806:	613c      	str	r4, [r7, #16]
 800b808:	4630      	mov	r0, r6
 800b80a:	b003      	add	sp, #12
 800b80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b810:	6812      	ldr	r2, [r2, #0]
 800b812:	3b04      	subs	r3, #4
 800b814:	2a00      	cmp	r2, #0
 800b816:	d1cc      	bne.n	800b7b2 <quorem+0x9c>
 800b818:	3c01      	subs	r4, #1
 800b81a:	e7c7      	b.n	800b7ac <quorem+0x96>
 800b81c:	6812      	ldr	r2, [r2, #0]
 800b81e:	3b04      	subs	r3, #4
 800b820:	2a00      	cmp	r2, #0
 800b822:	d1f0      	bne.n	800b806 <quorem+0xf0>
 800b824:	3c01      	subs	r4, #1
 800b826:	e7eb      	b.n	800b800 <quorem+0xea>
 800b828:	2000      	movs	r0, #0
 800b82a:	e7ee      	b.n	800b80a <quorem+0xf4>
 800b82c:	0000      	movs	r0, r0
	...

0800b830 <_dtoa_r>:
 800b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	ed2d 8b04 	vpush	{d8-d9}
 800b838:	ec57 6b10 	vmov	r6, r7, d0
 800b83c:	b093      	sub	sp, #76	; 0x4c
 800b83e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b840:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b844:	9106      	str	r1, [sp, #24]
 800b846:	ee10 aa10 	vmov	sl, s0
 800b84a:	4604      	mov	r4, r0
 800b84c:	9209      	str	r2, [sp, #36]	; 0x24
 800b84e:	930c      	str	r3, [sp, #48]	; 0x30
 800b850:	46bb      	mov	fp, r7
 800b852:	b975      	cbnz	r5, 800b872 <_dtoa_r+0x42>
 800b854:	2010      	movs	r0, #16
 800b856:	f000 fddd 	bl	800c414 <malloc>
 800b85a:	4602      	mov	r2, r0
 800b85c:	6260      	str	r0, [r4, #36]	; 0x24
 800b85e:	b920      	cbnz	r0, 800b86a <_dtoa_r+0x3a>
 800b860:	4ba7      	ldr	r3, [pc, #668]	; (800bb00 <_dtoa_r+0x2d0>)
 800b862:	21ea      	movs	r1, #234	; 0xea
 800b864:	48a7      	ldr	r0, [pc, #668]	; (800bb04 <_dtoa_r+0x2d4>)
 800b866:	f001 fbc3 	bl	800cff0 <__assert_func>
 800b86a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b86e:	6005      	str	r5, [r0, #0]
 800b870:	60c5      	str	r5, [r0, #12]
 800b872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b874:	6819      	ldr	r1, [r3, #0]
 800b876:	b151      	cbz	r1, 800b88e <_dtoa_r+0x5e>
 800b878:	685a      	ldr	r2, [r3, #4]
 800b87a:	604a      	str	r2, [r1, #4]
 800b87c:	2301      	movs	r3, #1
 800b87e:	4093      	lsls	r3, r2
 800b880:	608b      	str	r3, [r1, #8]
 800b882:	4620      	mov	r0, r4
 800b884:	f000 fe0e 	bl	800c4a4 <_Bfree>
 800b888:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b88a:	2200      	movs	r2, #0
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	1e3b      	subs	r3, r7, #0
 800b890:	bfaa      	itet	ge
 800b892:	2300      	movge	r3, #0
 800b894:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b898:	f8c8 3000 	strge.w	r3, [r8]
 800b89c:	4b9a      	ldr	r3, [pc, #616]	; (800bb08 <_dtoa_r+0x2d8>)
 800b89e:	bfbc      	itt	lt
 800b8a0:	2201      	movlt	r2, #1
 800b8a2:	f8c8 2000 	strlt.w	r2, [r8]
 800b8a6:	ea33 030b 	bics.w	r3, r3, fp
 800b8aa:	d11b      	bne.n	800b8e4 <_dtoa_r+0xb4>
 800b8ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8b2:	6013      	str	r3, [r2, #0]
 800b8b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8b8:	4333      	orrs	r3, r6
 800b8ba:	f000 8592 	beq.w	800c3e2 <_dtoa_r+0xbb2>
 800b8be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8c0:	b963      	cbnz	r3, 800b8dc <_dtoa_r+0xac>
 800b8c2:	4b92      	ldr	r3, [pc, #584]	; (800bb0c <_dtoa_r+0x2dc>)
 800b8c4:	e022      	b.n	800b90c <_dtoa_r+0xdc>
 800b8c6:	4b92      	ldr	r3, [pc, #584]	; (800bb10 <_dtoa_r+0x2e0>)
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	9801      	ldr	r0, [sp, #4]
 800b8d2:	b013      	add	sp, #76	; 0x4c
 800b8d4:	ecbd 8b04 	vpop	{d8-d9}
 800b8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8dc:	4b8b      	ldr	r3, [pc, #556]	; (800bb0c <_dtoa_r+0x2dc>)
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	3303      	adds	r3, #3
 800b8e2:	e7f3      	b.n	800b8cc <_dtoa_r+0x9c>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	4650      	mov	r0, sl
 800b8ea:	4659      	mov	r1, fp
 800b8ec:	f7f5 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8f0:	ec4b ab19 	vmov	d9, sl, fp
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	b158      	cbz	r0, 800b910 <_dtoa_r+0xe0>
 800b8f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b900:	2b00      	cmp	r3, #0
 800b902:	f000 856b 	beq.w	800c3dc <_dtoa_r+0xbac>
 800b906:	4883      	ldr	r0, [pc, #524]	; (800bb14 <_dtoa_r+0x2e4>)
 800b908:	6018      	str	r0, [r3, #0]
 800b90a:	1e43      	subs	r3, r0, #1
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	e7df      	b.n	800b8d0 <_dtoa_r+0xa0>
 800b910:	ec4b ab10 	vmov	d0, sl, fp
 800b914:	aa10      	add	r2, sp, #64	; 0x40
 800b916:	a911      	add	r1, sp, #68	; 0x44
 800b918:	4620      	mov	r0, r4
 800b91a:	f001 f8ab 	bl	800ca74 <__d2b>
 800b91e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b922:	ee08 0a10 	vmov	s16, r0
 800b926:	2d00      	cmp	r5, #0
 800b928:	f000 8084 	beq.w	800ba34 <_dtoa_r+0x204>
 800b92c:	ee19 3a90 	vmov	r3, s19
 800b930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b934:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b938:	4656      	mov	r6, sl
 800b93a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b93e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b942:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b946:	4b74      	ldr	r3, [pc, #464]	; (800bb18 <_dtoa_r+0x2e8>)
 800b948:	2200      	movs	r2, #0
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f7f4 fc9b 	bl	8000288 <__aeabi_dsub>
 800b952:	a365      	add	r3, pc, #404	; (adr r3, 800bae8 <_dtoa_r+0x2b8>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f7f4 fe4e 	bl	80005f8 <__aeabi_dmul>
 800b95c:	a364      	add	r3, pc, #400	; (adr r3, 800baf0 <_dtoa_r+0x2c0>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f7f4 fc93 	bl	800028c <__adddf3>
 800b966:	4606      	mov	r6, r0
 800b968:	4628      	mov	r0, r5
 800b96a:	460f      	mov	r7, r1
 800b96c:	f7f4 fdda 	bl	8000524 <__aeabi_i2d>
 800b970:	a361      	add	r3, pc, #388	; (adr r3, 800baf8 <_dtoa_r+0x2c8>)
 800b972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b976:	f7f4 fe3f 	bl	80005f8 <__aeabi_dmul>
 800b97a:	4602      	mov	r2, r0
 800b97c:	460b      	mov	r3, r1
 800b97e:	4630      	mov	r0, r6
 800b980:	4639      	mov	r1, r7
 800b982:	f7f4 fc83 	bl	800028c <__adddf3>
 800b986:	4606      	mov	r6, r0
 800b988:	460f      	mov	r7, r1
 800b98a:	f7f5 f8e5 	bl	8000b58 <__aeabi_d2iz>
 800b98e:	2200      	movs	r2, #0
 800b990:	9000      	str	r0, [sp, #0]
 800b992:	2300      	movs	r3, #0
 800b994:	4630      	mov	r0, r6
 800b996:	4639      	mov	r1, r7
 800b998:	f7f5 f8a0 	bl	8000adc <__aeabi_dcmplt>
 800b99c:	b150      	cbz	r0, 800b9b4 <_dtoa_r+0x184>
 800b99e:	9800      	ldr	r0, [sp, #0]
 800b9a0:	f7f4 fdc0 	bl	8000524 <__aeabi_i2d>
 800b9a4:	4632      	mov	r2, r6
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	f7f5 f88e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9ac:	b910      	cbnz	r0, 800b9b4 <_dtoa_r+0x184>
 800b9ae:	9b00      	ldr	r3, [sp, #0]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	9300      	str	r3, [sp, #0]
 800b9b4:	9b00      	ldr	r3, [sp, #0]
 800b9b6:	2b16      	cmp	r3, #22
 800b9b8:	d85a      	bhi.n	800ba70 <_dtoa_r+0x240>
 800b9ba:	9a00      	ldr	r2, [sp, #0]
 800b9bc:	4b57      	ldr	r3, [pc, #348]	; (800bb1c <_dtoa_r+0x2ec>)
 800b9be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	ec51 0b19 	vmov	r0, r1, d9
 800b9ca:	f7f5 f887 	bl	8000adc <__aeabi_dcmplt>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d050      	beq.n	800ba74 <_dtoa_r+0x244>
 800b9d2:	9b00      	ldr	r3, [sp, #0]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	2300      	movs	r3, #0
 800b9da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9de:	1b5d      	subs	r5, r3, r5
 800b9e0:	1e6b      	subs	r3, r5, #1
 800b9e2:	9305      	str	r3, [sp, #20]
 800b9e4:	bf45      	ittet	mi
 800b9e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9ea:	9304      	strmi	r3, [sp, #16]
 800b9ec:	2300      	movpl	r3, #0
 800b9ee:	2300      	movmi	r3, #0
 800b9f0:	bf4c      	ite	mi
 800b9f2:	9305      	strmi	r3, [sp, #20]
 800b9f4:	9304      	strpl	r3, [sp, #16]
 800b9f6:	9b00      	ldr	r3, [sp, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	db3d      	blt.n	800ba78 <_dtoa_r+0x248>
 800b9fc:	9b05      	ldr	r3, [sp, #20]
 800b9fe:	9a00      	ldr	r2, [sp, #0]
 800ba00:	920a      	str	r2, [sp, #40]	; 0x28
 800ba02:	4413      	add	r3, r2
 800ba04:	9305      	str	r3, [sp, #20]
 800ba06:	2300      	movs	r3, #0
 800ba08:	9307      	str	r3, [sp, #28]
 800ba0a:	9b06      	ldr	r3, [sp, #24]
 800ba0c:	2b09      	cmp	r3, #9
 800ba0e:	f200 8089 	bhi.w	800bb24 <_dtoa_r+0x2f4>
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	bfc4      	itt	gt
 800ba16:	3b04      	subgt	r3, #4
 800ba18:	9306      	strgt	r3, [sp, #24]
 800ba1a:	9b06      	ldr	r3, [sp, #24]
 800ba1c:	f1a3 0302 	sub.w	r3, r3, #2
 800ba20:	bfcc      	ite	gt
 800ba22:	2500      	movgt	r5, #0
 800ba24:	2501      	movle	r5, #1
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	f200 8087 	bhi.w	800bb3a <_dtoa_r+0x30a>
 800ba2c:	e8df f003 	tbb	[pc, r3]
 800ba30:	59383a2d 	.word	0x59383a2d
 800ba34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba38:	441d      	add	r5, r3
 800ba3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba3e:	2b20      	cmp	r3, #32
 800ba40:	bfc1      	itttt	gt
 800ba42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba52:	bfda      	itte	le
 800ba54:	f1c3 0320 	rsble	r3, r3, #32
 800ba58:	fa06 f003 	lslle.w	r0, r6, r3
 800ba5c:	4318      	orrgt	r0, r3
 800ba5e:	f7f4 fd51 	bl	8000504 <__aeabi_ui2d>
 800ba62:	2301      	movs	r3, #1
 800ba64:	4606      	mov	r6, r0
 800ba66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba6a:	3d01      	subs	r5, #1
 800ba6c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba6e:	e76a      	b.n	800b946 <_dtoa_r+0x116>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e7b2      	b.n	800b9da <_dtoa_r+0x1aa>
 800ba74:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba76:	e7b1      	b.n	800b9dc <_dtoa_r+0x1ac>
 800ba78:	9b04      	ldr	r3, [sp, #16]
 800ba7a:	9a00      	ldr	r2, [sp, #0]
 800ba7c:	1a9b      	subs	r3, r3, r2
 800ba7e:	9304      	str	r3, [sp, #16]
 800ba80:	4253      	negs	r3, r2
 800ba82:	9307      	str	r3, [sp, #28]
 800ba84:	2300      	movs	r3, #0
 800ba86:	930a      	str	r3, [sp, #40]	; 0x28
 800ba88:	e7bf      	b.n	800ba0a <_dtoa_r+0x1da>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	9308      	str	r3, [sp, #32]
 800ba8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dc55      	bgt.n	800bb40 <_dtoa_r+0x310>
 800ba94:	2301      	movs	r3, #1
 800ba96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba9e:	e00c      	b.n	800baba <_dtoa_r+0x28a>
 800baa0:	2301      	movs	r3, #1
 800baa2:	e7f3      	b.n	800ba8c <_dtoa_r+0x25c>
 800baa4:	2300      	movs	r3, #0
 800baa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa8:	9308      	str	r3, [sp, #32]
 800baaa:	9b00      	ldr	r3, [sp, #0]
 800baac:	4413      	add	r3, r2
 800baae:	9302      	str	r3, [sp, #8]
 800bab0:	3301      	adds	r3, #1
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	9303      	str	r3, [sp, #12]
 800bab6:	bfb8      	it	lt
 800bab8:	2301      	movlt	r3, #1
 800baba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800babc:	2200      	movs	r2, #0
 800babe:	6042      	str	r2, [r0, #4]
 800bac0:	2204      	movs	r2, #4
 800bac2:	f102 0614 	add.w	r6, r2, #20
 800bac6:	429e      	cmp	r6, r3
 800bac8:	6841      	ldr	r1, [r0, #4]
 800baca:	d93d      	bls.n	800bb48 <_dtoa_r+0x318>
 800bacc:	4620      	mov	r0, r4
 800bace:	f000 fca9 	bl	800c424 <_Balloc>
 800bad2:	9001      	str	r0, [sp, #4]
 800bad4:	2800      	cmp	r0, #0
 800bad6:	d13b      	bne.n	800bb50 <_dtoa_r+0x320>
 800bad8:	4b11      	ldr	r3, [pc, #68]	; (800bb20 <_dtoa_r+0x2f0>)
 800bada:	4602      	mov	r2, r0
 800badc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bae0:	e6c0      	b.n	800b864 <_dtoa_r+0x34>
 800bae2:	2301      	movs	r3, #1
 800bae4:	e7df      	b.n	800baa6 <_dtoa_r+0x276>
 800bae6:	bf00      	nop
 800bae8:	636f4361 	.word	0x636f4361
 800baec:	3fd287a7 	.word	0x3fd287a7
 800baf0:	8b60c8b3 	.word	0x8b60c8b3
 800baf4:	3fc68a28 	.word	0x3fc68a28
 800baf8:	509f79fb 	.word	0x509f79fb
 800bafc:	3fd34413 	.word	0x3fd34413
 800bb00:	080105ad 	.word	0x080105ad
 800bb04:	080105c4 	.word	0x080105c4
 800bb08:	7ff00000 	.word	0x7ff00000
 800bb0c:	080105a9 	.word	0x080105a9
 800bb10:	080105a0 	.word	0x080105a0
 800bb14:	0801057d 	.word	0x0801057d
 800bb18:	3ff80000 	.word	0x3ff80000
 800bb1c:	080106b8 	.word	0x080106b8
 800bb20:	0801061f 	.word	0x0801061f
 800bb24:	2501      	movs	r5, #1
 800bb26:	2300      	movs	r3, #0
 800bb28:	9306      	str	r3, [sp, #24]
 800bb2a:	9508      	str	r5, [sp, #32]
 800bb2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb34:	2200      	movs	r2, #0
 800bb36:	2312      	movs	r3, #18
 800bb38:	e7b0      	b.n	800ba9c <_dtoa_r+0x26c>
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	9308      	str	r3, [sp, #32]
 800bb3e:	e7f5      	b.n	800bb2c <_dtoa_r+0x2fc>
 800bb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb46:	e7b8      	b.n	800baba <_dtoa_r+0x28a>
 800bb48:	3101      	adds	r1, #1
 800bb4a:	6041      	str	r1, [r0, #4]
 800bb4c:	0052      	lsls	r2, r2, #1
 800bb4e:	e7b8      	b.n	800bac2 <_dtoa_r+0x292>
 800bb50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb52:	9a01      	ldr	r2, [sp, #4]
 800bb54:	601a      	str	r2, [r3, #0]
 800bb56:	9b03      	ldr	r3, [sp, #12]
 800bb58:	2b0e      	cmp	r3, #14
 800bb5a:	f200 809d 	bhi.w	800bc98 <_dtoa_r+0x468>
 800bb5e:	2d00      	cmp	r5, #0
 800bb60:	f000 809a 	beq.w	800bc98 <_dtoa_r+0x468>
 800bb64:	9b00      	ldr	r3, [sp, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	dd32      	ble.n	800bbd0 <_dtoa_r+0x3a0>
 800bb6a:	4ab7      	ldr	r2, [pc, #732]	; (800be48 <_dtoa_r+0x618>)
 800bb6c:	f003 030f 	and.w	r3, r3, #15
 800bb70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb78:	9b00      	ldr	r3, [sp, #0]
 800bb7a:	05d8      	lsls	r0, r3, #23
 800bb7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb80:	d516      	bpl.n	800bbb0 <_dtoa_r+0x380>
 800bb82:	4bb2      	ldr	r3, [pc, #712]	; (800be4c <_dtoa_r+0x61c>)
 800bb84:	ec51 0b19 	vmov	r0, r1, d9
 800bb88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb8c:	f7f4 fe5e 	bl	800084c <__aeabi_ddiv>
 800bb90:	f007 070f 	and.w	r7, r7, #15
 800bb94:	4682      	mov	sl, r0
 800bb96:	468b      	mov	fp, r1
 800bb98:	2503      	movs	r5, #3
 800bb9a:	4eac      	ldr	r6, [pc, #688]	; (800be4c <_dtoa_r+0x61c>)
 800bb9c:	b957      	cbnz	r7, 800bbb4 <_dtoa_r+0x384>
 800bb9e:	4642      	mov	r2, r8
 800bba0:	464b      	mov	r3, r9
 800bba2:	4650      	mov	r0, sl
 800bba4:	4659      	mov	r1, fp
 800bba6:	f7f4 fe51 	bl	800084c <__aeabi_ddiv>
 800bbaa:	4682      	mov	sl, r0
 800bbac:	468b      	mov	fp, r1
 800bbae:	e028      	b.n	800bc02 <_dtoa_r+0x3d2>
 800bbb0:	2502      	movs	r5, #2
 800bbb2:	e7f2      	b.n	800bb9a <_dtoa_r+0x36a>
 800bbb4:	07f9      	lsls	r1, r7, #31
 800bbb6:	d508      	bpl.n	800bbca <_dtoa_r+0x39a>
 800bbb8:	4640      	mov	r0, r8
 800bbba:	4649      	mov	r1, r9
 800bbbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbc0:	f7f4 fd1a 	bl	80005f8 <__aeabi_dmul>
 800bbc4:	3501      	adds	r5, #1
 800bbc6:	4680      	mov	r8, r0
 800bbc8:	4689      	mov	r9, r1
 800bbca:	107f      	asrs	r7, r7, #1
 800bbcc:	3608      	adds	r6, #8
 800bbce:	e7e5      	b.n	800bb9c <_dtoa_r+0x36c>
 800bbd0:	f000 809b 	beq.w	800bd0a <_dtoa_r+0x4da>
 800bbd4:	9b00      	ldr	r3, [sp, #0]
 800bbd6:	4f9d      	ldr	r7, [pc, #628]	; (800be4c <_dtoa_r+0x61c>)
 800bbd8:	425e      	negs	r6, r3
 800bbda:	4b9b      	ldr	r3, [pc, #620]	; (800be48 <_dtoa_r+0x618>)
 800bbdc:	f006 020f 	and.w	r2, r6, #15
 800bbe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	ec51 0b19 	vmov	r0, r1, d9
 800bbec:	f7f4 fd04 	bl	80005f8 <__aeabi_dmul>
 800bbf0:	1136      	asrs	r6, r6, #4
 800bbf2:	4682      	mov	sl, r0
 800bbf4:	468b      	mov	fp, r1
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	2502      	movs	r5, #2
 800bbfa:	2e00      	cmp	r6, #0
 800bbfc:	d17a      	bne.n	800bcf4 <_dtoa_r+0x4c4>
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1d3      	bne.n	800bbaa <_dtoa_r+0x37a>
 800bc02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 8082 	beq.w	800bd0e <_dtoa_r+0x4de>
 800bc0a:	4b91      	ldr	r3, [pc, #580]	; (800be50 <_dtoa_r+0x620>)
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	4650      	mov	r0, sl
 800bc10:	4659      	mov	r1, fp
 800bc12:	f7f4 ff63 	bl	8000adc <__aeabi_dcmplt>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d079      	beq.n	800bd0e <_dtoa_r+0x4de>
 800bc1a:	9b03      	ldr	r3, [sp, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d076      	beq.n	800bd0e <_dtoa_r+0x4de>
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	dd36      	ble.n	800bc94 <_dtoa_r+0x464>
 800bc26:	9b00      	ldr	r3, [sp, #0]
 800bc28:	4650      	mov	r0, sl
 800bc2a:	4659      	mov	r1, fp
 800bc2c:	1e5f      	subs	r7, r3, #1
 800bc2e:	2200      	movs	r2, #0
 800bc30:	4b88      	ldr	r3, [pc, #544]	; (800be54 <_dtoa_r+0x624>)
 800bc32:	f7f4 fce1 	bl	80005f8 <__aeabi_dmul>
 800bc36:	9e02      	ldr	r6, [sp, #8]
 800bc38:	4682      	mov	sl, r0
 800bc3a:	468b      	mov	fp, r1
 800bc3c:	3501      	adds	r5, #1
 800bc3e:	4628      	mov	r0, r5
 800bc40:	f7f4 fc70 	bl	8000524 <__aeabi_i2d>
 800bc44:	4652      	mov	r2, sl
 800bc46:	465b      	mov	r3, fp
 800bc48:	f7f4 fcd6 	bl	80005f8 <__aeabi_dmul>
 800bc4c:	4b82      	ldr	r3, [pc, #520]	; (800be58 <_dtoa_r+0x628>)
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f7f4 fb1c 	bl	800028c <__adddf3>
 800bc54:	46d0      	mov	r8, sl
 800bc56:	46d9      	mov	r9, fp
 800bc58:	4682      	mov	sl, r0
 800bc5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc5e:	2e00      	cmp	r6, #0
 800bc60:	d158      	bne.n	800bd14 <_dtoa_r+0x4e4>
 800bc62:	4b7e      	ldr	r3, [pc, #504]	; (800be5c <_dtoa_r+0x62c>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	4640      	mov	r0, r8
 800bc68:	4649      	mov	r1, r9
 800bc6a:	f7f4 fb0d 	bl	8000288 <__aeabi_dsub>
 800bc6e:	4652      	mov	r2, sl
 800bc70:	465b      	mov	r3, fp
 800bc72:	4680      	mov	r8, r0
 800bc74:	4689      	mov	r9, r1
 800bc76:	f7f4 ff4f 	bl	8000b18 <__aeabi_dcmpgt>
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f040 8295 	bne.w	800c1aa <_dtoa_r+0x97a>
 800bc80:	4652      	mov	r2, sl
 800bc82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc86:	4640      	mov	r0, r8
 800bc88:	4649      	mov	r1, r9
 800bc8a:	f7f4 ff27 	bl	8000adc <__aeabi_dcmplt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f040 8289 	bne.w	800c1a6 <_dtoa_r+0x976>
 800bc94:	ec5b ab19 	vmov	sl, fp, d9
 800bc98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f2c0 8148 	blt.w	800bf30 <_dtoa_r+0x700>
 800bca0:	9a00      	ldr	r2, [sp, #0]
 800bca2:	2a0e      	cmp	r2, #14
 800bca4:	f300 8144 	bgt.w	800bf30 <_dtoa_r+0x700>
 800bca8:	4b67      	ldr	r3, [pc, #412]	; (800be48 <_dtoa_r+0x618>)
 800bcaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f280 80d5 	bge.w	800be64 <_dtoa_r+0x634>
 800bcba:	9b03      	ldr	r3, [sp, #12]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f300 80d1 	bgt.w	800be64 <_dtoa_r+0x634>
 800bcc2:	f040 826f 	bne.w	800c1a4 <_dtoa_r+0x974>
 800bcc6:	4b65      	ldr	r3, [pc, #404]	; (800be5c <_dtoa_r+0x62c>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4640      	mov	r0, r8
 800bccc:	4649      	mov	r1, r9
 800bcce:	f7f4 fc93 	bl	80005f8 <__aeabi_dmul>
 800bcd2:	4652      	mov	r2, sl
 800bcd4:	465b      	mov	r3, fp
 800bcd6:	f7f4 ff15 	bl	8000b04 <__aeabi_dcmpge>
 800bcda:	9e03      	ldr	r6, [sp, #12]
 800bcdc:	4637      	mov	r7, r6
 800bcde:	2800      	cmp	r0, #0
 800bce0:	f040 8245 	bne.w	800c16e <_dtoa_r+0x93e>
 800bce4:	9d01      	ldr	r5, [sp, #4]
 800bce6:	2331      	movs	r3, #49	; 0x31
 800bce8:	f805 3b01 	strb.w	r3, [r5], #1
 800bcec:	9b00      	ldr	r3, [sp, #0]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	e240      	b.n	800c176 <_dtoa_r+0x946>
 800bcf4:	07f2      	lsls	r2, r6, #31
 800bcf6:	d505      	bpl.n	800bd04 <_dtoa_r+0x4d4>
 800bcf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcfc:	f7f4 fc7c 	bl	80005f8 <__aeabi_dmul>
 800bd00:	3501      	adds	r5, #1
 800bd02:	2301      	movs	r3, #1
 800bd04:	1076      	asrs	r6, r6, #1
 800bd06:	3708      	adds	r7, #8
 800bd08:	e777      	b.n	800bbfa <_dtoa_r+0x3ca>
 800bd0a:	2502      	movs	r5, #2
 800bd0c:	e779      	b.n	800bc02 <_dtoa_r+0x3d2>
 800bd0e:	9f00      	ldr	r7, [sp, #0]
 800bd10:	9e03      	ldr	r6, [sp, #12]
 800bd12:	e794      	b.n	800bc3e <_dtoa_r+0x40e>
 800bd14:	9901      	ldr	r1, [sp, #4]
 800bd16:	4b4c      	ldr	r3, [pc, #304]	; (800be48 <_dtoa_r+0x618>)
 800bd18:	4431      	add	r1, r6
 800bd1a:	910d      	str	r1, [sp, #52]	; 0x34
 800bd1c:	9908      	ldr	r1, [sp, #32]
 800bd1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd26:	2900      	cmp	r1, #0
 800bd28:	d043      	beq.n	800bdb2 <_dtoa_r+0x582>
 800bd2a:	494d      	ldr	r1, [pc, #308]	; (800be60 <_dtoa_r+0x630>)
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	f7f4 fd8d 	bl	800084c <__aeabi_ddiv>
 800bd32:	4652      	mov	r2, sl
 800bd34:	465b      	mov	r3, fp
 800bd36:	f7f4 faa7 	bl	8000288 <__aeabi_dsub>
 800bd3a:	9d01      	ldr	r5, [sp, #4]
 800bd3c:	4682      	mov	sl, r0
 800bd3e:	468b      	mov	fp, r1
 800bd40:	4649      	mov	r1, r9
 800bd42:	4640      	mov	r0, r8
 800bd44:	f7f4 ff08 	bl	8000b58 <__aeabi_d2iz>
 800bd48:	4606      	mov	r6, r0
 800bd4a:	f7f4 fbeb 	bl	8000524 <__aeabi_i2d>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	4640      	mov	r0, r8
 800bd54:	4649      	mov	r1, r9
 800bd56:	f7f4 fa97 	bl	8000288 <__aeabi_dsub>
 800bd5a:	3630      	adds	r6, #48	; 0x30
 800bd5c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd60:	4652      	mov	r2, sl
 800bd62:	465b      	mov	r3, fp
 800bd64:	4680      	mov	r8, r0
 800bd66:	4689      	mov	r9, r1
 800bd68:	f7f4 feb8 	bl	8000adc <__aeabi_dcmplt>
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d163      	bne.n	800be38 <_dtoa_r+0x608>
 800bd70:	4642      	mov	r2, r8
 800bd72:	464b      	mov	r3, r9
 800bd74:	4936      	ldr	r1, [pc, #216]	; (800be50 <_dtoa_r+0x620>)
 800bd76:	2000      	movs	r0, #0
 800bd78:	f7f4 fa86 	bl	8000288 <__aeabi_dsub>
 800bd7c:	4652      	mov	r2, sl
 800bd7e:	465b      	mov	r3, fp
 800bd80:	f7f4 feac 	bl	8000adc <__aeabi_dcmplt>
 800bd84:	2800      	cmp	r0, #0
 800bd86:	f040 80b5 	bne.w	800bef4 <_dtoa_r+0x6c4>
 800bd8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd8c:	429d      	cmp	r5, r3
 800bd8e:	d081      	beq.n	800bc94 <_dtoa_r+0x464>
 800bd90:	4b30      	ldr	r3, [pc, #192]	; (800be54 <_dtoa_r+0x624>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	4650      	mov	r0, sl
 800bd96:	4659      	mov	r1, fp
 800bd98:	f7f4 fc2e 	bl	80005f8 <__aeabi_dmul>
 800bd9c:	4b2d      	ldr	r3, [pc, #180]	; (800be54 <_dtoa_r+0x624>)
 800bd9e:	4682      	mov	sl, r0
 800bda0:	468b      	mov	fp, r1
 800bda2:	4640      	mov	r0, r8
 800bda4:	4649      	mov	r1, r9
 800bda6:	2200      	movs	r2, #0
 800bda8:	f7f4 fc26 	bl	80005f8 <__aeabi_dmul>
 800bdac:	4680      	mov	r8, r0
 800bdae:	4689      	mov	r9, r1
 800bdb0:	e7c6      	b.n	800bd40 <_dtoa_r+0x510>
 800bdb2:	4650      	mov	r0, sl
 800bdb4:	4659      	mov	r1, fp
 800bdb6:	f7f4 fc1f 	bl	80005f8 <__aeabi_dmul>
 800bdba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdbc:	9d01      	ldr	r5, [sp, #4]
 800bdbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdc0:	4682      	mov	sl, r0
 800bdc2:	468b      	mov	fp, r1
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	f7f4 fec6 	bl	8000b58 <__aeabi_d2iz>
 800bdcc:	4606      	mov	r6, r0
 800bdce:	f7f4 fba9 	bl	8000524 <__aeabi_i2d>
 800bdd2:	3630      	adds	r6, #48	; 0x30
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4640      	mov	r0, r8
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7f4 fa54 	bl	8000288 <__aeabi_dsub>
 800bde0:	f805 6b01 	strb.w	r6, [r5], #1
 800bde4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde6:	429d      	cmp	r5, r3
 800bde8:	4680      	mov	r8, r0
 800bdea:	4689      	mov	r9, r1
 800bdec:	f04f 0200 	mov.w	r2, #0
 800bdf0:	d124      	bne.n	800be3c <_dtoa_r+0x60c>
 800bdf2:	4b1b      	ldr	r3, [pc, #108]	; (800be60 <_dtoa_r+0x630>)
 800bdf4:	4650      	mov	r0, sl
 800bdf6:	4659      	mov	r1, fp
 800bdf8:	f7f4 fa48 	bl	800028c <__adddf3>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4640      	mov	r0, r8
 800be02:	4649      	mov	r1, r9
 800be04:	f7f4 fe88 	bl	8000b18 <__aeabi_dcmpgt>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d173      	bne.n	800bef4 <_dtoa_r+0x6c4>
 800be0c:	4652      	mov	r2, sl
 800be0e:	465b      	mov	r3, fp
 800be10:	4913      	ldr	r1, [pc, #76]	; (800be60 <_dtoa_r+0x630>)
 800be12:	2000      	movs	r0, #0
 800be14:	f7f4 fa38 	bl	8000288 <__aeabi_dsub>
 800be18:	4602      	mov	r2, r0
 800be1a:	460b      	mov	r3, r1
 800be1c:	4640      	mov	r0, r8
 800be1e:	4649      	mov	r1, r9
 800be20:	f7f4 fe5c 	bl	8000adc <__aeabi_dcmplt>
 800be24:	2800      	cmp	r0, #0
 800be26:	f43f af35 	beq.w	800bc94 <_dtoa_r+0x464>
 800be2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be2c:	1e6b      	subs	r3, r5, #1
 800be2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be34:	2b30      	cmp	r3, #48	; 0x30
 800be36:	d0f8      	beq.n	800be2a <_dtoa_r+0x5fa>
 800be38:	9700      	str	r7, [sp, #0]
 800be3a:	e049      	b.n	800bed0 <_dtoa_r+0x6a0>
 800be3c:	4b05      	ldr	r3, [pc, #20]	; (800be54 <_dtoa_r+0x624>)
 800be3e:	f7f4 fbdb 	bl	80005f8 <__aeabi_dmul>
 800be42:	4680      	mov	r8, r0
 800be44:	4689      	mov	r9, r1
 800be46:	e7bd      	b.n	800bdc4 <_dtoa_r+0x594>
 800be48:	080106b8 	.word	0x080106b8
 800be4c:	08010690 	.word	0x08010690
 800be50:	3ff00000 	.word	0x3ff00000
 800be54:	40240000 	.word	0x40240000
 800be58:	401c0000 	.word	0x401c0000
 800be5c:	40140000 	.word	0x40140000
 800be60:	3fe00000 	.word	0x3fe00000
 800be64:	9d01      	ldr	r5, [sp, #4]
 800be66:	4656      	mov	r6, sl
 800be68:	465f      	mov	r7, fp
 800be6a:	4642      	mov	r2, r8
 800be6c:	464b      	mov	r3, r9
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 fceb 	bl	800084c <__aeabi_ddiv>
 800be76:	f7f4 fe6f 	bl	8000b58 <__aeabi_d2iz>
 800be7a:	4682      	mov	sl, r0
 800be7c:	f7f4 fb52 	bl	8000524 <__aeabi_i2d>
 800be80:	4642      	mov	r2, r8
 800be82:	464b      	mov	r3, r9
 800be84:	f7f4 fbb8 	bl	80005f8 <__aeabi_dmul>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4630      	mov	r0, r6
 800be8e:	4639      	mov	r1, r7
 800be90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be94:	f7f4 f9f8 	bl	8000288 <__aeabi_dsub>
 800be98:	f805 6b01 	strb.w	r6, [r5], #1
 800be9c:	9e01      	ldr	r6, [sp, #4]
 800be9e:	9f03      	ldr	r7, [sp, #12]
 800bea0:	1bae      	subs	r6, r5, r6
 800bea2:	42b7      	cmp	r7, r6
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	d135      	bne.n	800bf16 <_dtoa_r+0x6e6>
 800beaa:	f7f4 f9ef 	bl	800028c <__adddf3>
 800beae:	4642      	mov	r2, r8
 800beb0:	464b      	mov	r3, r9
 800beb2:	4606      	mov	r6, r0
 800beb4:	460f      	mov	r7, r1
 800beb6:	f7f4 fe2f 	bl	8000b18 <__aeabi_dcmpgt>
 800beba:	b9d0      	cbnz	r0, 800bef2 <_dtoa_r+0x6c2>
 800bebc:	4642      	mov	r2, r8
 800bebe:	464b      	mov	r3, r9
 800bec0:	4630      	mov	r0, r6
 800bec2:	4639      	mov	r1, r7
 800bec4:	f7f4 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 800bec8:	b110      	cbz	r0, 800bed0 <_dtoa_r+0x6a0>
 800beca:	f01a 0f01 	tst.w	sl, #1
 800bece:	d110      	bne.n	800bef2 <_dtoa_r+0x6c2>
 800bed0:	4620      	mov	r0, r4
 800bed2:	ee18 1a10 	vmov	r1, s16
 800bed6:	f000 fae5 	bl	800c4a4 <_Bfree>
 800beda:	2300      	movs	r3, #0
 800bedc:	9800      	ldr	r0, [sp, #0]
 800bede:	702b      	strb	r3, [r5, #0]
 800bee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee2:	3001      	adds	r0, #1
 800bee4:	6018      	str	r0, [r3, #0]
 800bee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f43f acf1 	beq.w	800b8d0 <_dtoa_r+0xa0>
 800beee:	601d      	str	r5, [r3, #0]
 800bef0:	e4ee      	b.n	800b8d0 <_dtoa_r+0xa0>
 800bef2:	9f00      	ldr	r7, [sp, #0]
 800bef4:	462b      	mov	r3, r5
 800bef6:	461d      	mov	r5, r3
 800bef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800befc:	2a39      	cmp	r2, #57	; 0x39
 800befe:	d106      	bne.n	800bf0e <_dtoa_r+0x6de>
 800bf00:	9a01      	ldr	r2, [sp, #4]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d1f7      	bne.n	800bef6 <_dtoa_r+0x6c6>
 800bf06:	9901      	ldr	r1, [sp, #4]
 800bf08:	2230      	movs	r2, #48	; 0x30
 800bf0a:	3701      	adds	r7, #1
 800bf0c:	700a      	strb	r2, [r1, #0]
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	3201      	adds	r2, #1
 800bf12:	701a      	strb	r2, [r3, #0]
 800bf14:	e790      	b.n	800be38 <_dtoa_r+0x608>
 800bf16:	4ba6      	ldr	r3, [pc, #664]	; (800c1b0 <_dtoa_r+0x980>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f7f4 fb6d 	bl	80005f8 <__aeabi_dmul>
 800bf1e:	2200      	movs	r2, #0
 800bf20:	2300      	movs	r3, #0
 800bf22:	4606      	mov	r6, r0
 800bf24:	460f      	mov	r7, r1
 800bf26:	f7f4 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d09d      	beq.n	800be6a <_dtoa_r+0x63a>
 800bf2e:	e7cf      	b.n	800bed0 <_dtoa_r+0x6a0>
 800bf30:	9a08      	ldr	r2, [sp, #32]
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	f000 80d7 	beq.w	800c0e6 <_dtoa_r+0x8b6>
 800bf38:	9a06      	ldr	r2, [sp, #24]
 800bf3a:	2a01      	cmp	r2, #1
 800bf3c:	f300 80ba 	bgt.w	800c0b4 <_dtoa_r+0x884>
 800bf40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf42:	2a00      	cmp	r2, #0
 800bf44:	f000 80b2 	beq.w	800c0ac <_dtoa_r+0x87c>
 800bf48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf4c:	9e07      	ldr	r6, [sp, #28]
 800bf4e:	9d04      	ldr	r5, [sp, #16]
 800bf50:	9a04      	ldr	r2, [sp, #16]
 800bf52:	441a      	add	r2, r3
 800bf54:	9204      	str	r2, [sp, #16]
 800bf56:	9a05      	ldr	r2, [sp, #20]
 800bf58:	2101      	movs	r1, #1
 800bf5a:	441a      	add	r2, r3
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	9205      	str	r2, [sp, #20]
 800bf60:	f000 fb58 	bl	800c614 <__i2b>
 800bf64:	4607      	mov	r7, r0
 800bf66:	2d00      	cmp	r5, #0
 800bf68:	dd0c      	ble.n	800bf84 <_dtoa_r+0x754>
 800bf6a:	9b05      	ldr	r3, [sp, #20]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dd09      	ble.n	800bf84 <_dtoa_r+0x754>
 800bf70:	42ab      	cmp	r3, r5
 800bf72:	9a04      	ldr	r2, [sp, #16]
 800bf74:	bfa8      	it	ge
 800bf76:	462b      	movge	r3, r5
 800bf78:	1ad2      	subs	r2, r2, r3
 800bf7a:	9204      	str	r2, [sp, #16]
 800bf7c:	9a05      	ldr	r2, [sp, #20]
 800bf7e:	1aed      	subs	r5, r5, r3
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	9305      	str	r3, [sp, #20]
 800bf84:	9b07      	ldr	r3, [sp, #28]
 800bf86:	b31b      	cbz	r3, 800bfd0 <_dtoa_r+0x7a0>
 800bf88:	9b08      	ldr	r3, [sp, #32]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 80af 	beq.w	800c0ee <_dtoa_r+0x8be>
 800bf90:	2e00      	cmp	r6, #0
 800bf92:	dd13      	ble.n	800bfbc <_dtoa_r+0x78c>
 800bf94:	4639      	mov	r1, r7
 800bf96:	4632      	mov	r2, r6
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f000 fbfb 	bl	800c794 <__pow5mult>
 800bf9e:	ee18 2a10 	vmov	r2, s16
 800bfa2:	4601      	mov	r1, r0
 800bfa4:	4607      	mov	r7, r0
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 fb4a 	bl	800c640 <__multiply>
 800bfac:	ee18 1a10 	vmov	r1, s16
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f000 fa76 	bl	800c4a4 <_Bfree>
 800bfb8:	ee08 8a10 	vmov	s16, r8
 800bfbc:	9b07      	ldr	r3, [sp, #28]
 800bfbe:	1b9a      	subs	r2, r3, r6
 800bfc0:	d006      	beq.n	800bfd0 <_dtoa_r+0x7a0>
 800bfc2:	ee18 1a10 	vmov	r1, s16
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 fbe4 	bl	800c794 <__pow5mult>
 800bfcc:	ee08 0a10 	vmov	s16, r0
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f000 fb1e 	bl	800c614 <__i2b>
 800bfd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	4606      	mov	r6, r0
 800bfde:	f340 8088 	ble.w	800c0f2 <_dtoa_r+0x8c2>
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	4601      	mov	r1, r0
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f000 fbd4 	bl	800c794 <__pow5mult>
 800bfec:	9b06      	ldr	r3, [sp, #24]
 800bfee:	2b01      	cmp	r3, #1
 800bff0:	4606      	mov	r6, r0
 800bff2:	f340 8081 	ble.w	800c0f8 <_dtoa_r+0x8c8>
 800bff6:	f04f 0800 	mov.w	r8, #0
 800bffa:	6933      	ldr	r3, [r6, #16]
 800bffc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c000:	6918      	ldr	r0, [r3, #16]
 800c002:	f000 fab7 	bl	800c574 <__hi0bits>
 800c006:	f1c0 0020 	rsb	r0, r0, #32
 800c00a:	9b05      	ldr	r3, [sp, #20]
 800c00c:	4418      	add	r0, r3
 800c00e:	f010 001f 	ands.w	r0, r0, #31
 800c012:	f000 8092 	beq.w	800c13a <_dtoa_r+0x90a>
 800c016:	f1c0 0320 	rsb	r3, r0, #32
 800c01a:	2b04      	cmp	r3, #4
 800c01c:	f340 808a 	ble.w	800c134 <_dtoa_r+0x904>
 800c020:	f1c0 001c 	rsb	r0, r0, #28
 800c024:	9b04      	ldr	r3, [sp, #16]
 800c026:	4403      	add	r3, r0
 800c028:	9304      	str	r3, [sp, #16]
 800c02a:	9b05      	ldr	r3, [sp, #20]
 800c02c:	4403      	add	r3, r0
 800c02e:	4405      	add	r5, r0
 800c030:	9305      	str	r3, [sp, #20]
 800c032:	9b04      	ldr	r3, [sp, #16]
 800c034:	2b00      	cmp	r3, #0
 800c036:	dd07      	ble.n	800c048 <_dtoa_r+0x818>
 800c038:	ee18 1a10 	vmov	r1, s16
 800c03c:	461a      	mov	r2, r3
 800c03e:	4620      	mov	r0, r4
 800c040:	f000 fc02 	bl	800c848 <__lshift>
 800c044:	ee08 0a10 	vmov	s16, r0
 800c048:	9b05      	ldr	r3, [sp, #20]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	dd05      	ble.n	800c05a <_dtoa_r+0x82a>
 800c04e:	4631      	mov	r1, r6
 800c050:	461a      	mov	r2, r3
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fbf8 	bl	800c848 <__lshift>
 800c058:	4606      	mov	r6, r0
 800c05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d06e      	beq.n	800c13e <_dtoa_r+0x90e>
 800c060:	ee18 0a10 	vmov	r0, s16
 800c064:	4631      	mov	r1, r6
 800c066:	f000 fc5f 	bl	800c928 <__mcmp>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	da67      	bge.n	800c13e <_dtoa_r+0x90e>
 800c06e:	9b00      	ldr	r3, [sp, #0]
 800c070:	3b01      	subs	r3, #1
 800c072:	ee18 1a10 	vmov	r1, s16
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	220a      	movs	r2, #10
 800c07a:	2300      	movs	r3, #0
 800c07c:	4620      	mov	r0, r4
 800c07e:	f000 fa33 	bl	800c4e8 <__multadd>
 800c082:	9b08      	ldr	r3, [sp, #32]
 800c084:	ee08 0a10 	vmov	s16, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f000 81b1 	beq.w	800c3f0 <_dtoa_r+0xbc0>
 800c08e:	2300      	movs	r3, #0
 800c090:	4639      	mov	r1, r7
 800c092:	220a      	movs	r2, #10
 800c094:	4620      	mov	r0, r4
 800c096:	f000 fa27 	bl	800c4e8 <__multadd>
 800c09a:	9b02      	ldr	r3, [sp, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	4607      	mov	r7, r0
 800c0a0:	f300 808e 	bgt.w	800c1c0 <_dtoa_r+0x990>
 800c0a4:	9b06      	ldr	r3, [sp, #24]
 800c0a6:	2b02      	cmp	r3, #2
 800c0a8:	dc51      	bgt.n	800c14e <_dtoa_r+0x91e>
 800c0aa:	e089      	b.n	800c1c0 <_dtoa_r+0x990>
 800c0ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0b2:	e74b      	b.n	800bf4c <_dtoa_r+0x71c>
 800c0b4:	9b03      	ldr	r3, [sp, #12]
 800c0b6:	1e5e      	subs	r6, r3, #1
 800c0b8:	9b07      	ldr	r3, [sp, #28]
 800c0ba:	42b3      	cmp	r3, r6
 800c0bc:	bfbf      	itttt	lt
 800c0be:	9b07      	ldrlt	r3, [sp, #28]
 800c0c0:	9607      	strlt	r6, [sp, #28]
 800c0c2:	1af2      	sublt	r2, r6, r3
 800c0c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0c6:	bfb6      	itet	lt
 800c0c8:	189b      	addlt	r3, r3, r2
 800c0ca:	1b9e      	subge	r6, r3, r6
 800c0cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c0ce:	9b03      	ldr	r3, [sp, #12]
 800c0d0:	bfb8      	it	lt
 800c0d2:	2600      	movlt	r6, #0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bfb7      	itett	lt
 800c0d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c0dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0e0:	1a9d      	sublt	r5, r3, r2
 800c0e2:	2300      	movlt	r3, #0
 800c0e4:	e734      	b.n	800bf50 <_dtoa_r+0x720>
 800c0e6:	9e07      	ldr	r6, [sp, #28]
 800c0e8:	9d04      	ldr	r5, [sp, #16]
 800c0ea:	9f08      	ldr	r7, [sp, #32]
 800c0ec:	e73b      	b.n	800bf66 <_dtoa_r+0x736>
 800c0ee:	9a07      	ldr	r2, [sp, #28]
 800c0f0:	e767      	b.n	800bfc2 <_dtoa_r+0x792>
 800c0f2:	9b06      	ldr	r3, [sp, #24]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	dc18      	bgt.n	800c12a <_dtoa_r+0x8fa>
 800c0f8:	f1ba 0f00 	cmp.w	sl, #0
 800c0fc:	d115      	bne.n	800c12a <_dtoa_r+0x8fa>
 800c0fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c102:	b993      	cbnz	r3, 800c12a <_dtoa_r+0x8fa>
 800c104:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c108:	0d1b      	lsrs	r3, r3, #20
 800c10a:	051b      	lsls	r3, r3, #20
 800c10c:	b183      	cbz	r3, 800c130 <_dtoa_r+0x900>
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	3301      	adds	r3, #1
 800c112:	9304      	str	r3, [sp, #16]
 800c114:	9b05      	ldr	r3, [sp, #20]
 800c116:	3301      	adds	r3, #1
 800c118:	9305      	str	r3, [sp, #20]
 800c11a:	f04f 0801 	mov.w	r8, #1
 800c11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c120:	2b00      	cmp	r3, #0
 800c122:	f47f af6a 	bne.w	800bffa <_dtoa_r+0x7ca>
 800c126:	2001      	movs	r0, #1
 800c128:	e76f      	b.n	800c00a <_dtoa_r+0x7da>
 800c12a:	f04f 0800 	mov.w	r8, #0
 800c12e:	e7f6      	b.n	800c11e <_dtoa_r+0x8ee>
 800c130:	4698      	mov	r8, r3
 800c132:	e7f4      	b.n	800c11e <_dtoa_r+0x8ee>
 800c134:	f43f af7d 	beq.w	800c032 <_dtoa_r+0x802>
 800c138:	4618      	mov	r0, r3
 800c13a:	301c      	adds	r0, #28
 800c13c:	e772      	b.n	800c024 <_dtoa_r+0x7f4>
 800c13e:	9b03      	ldr	r3, [sp, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	dc37      	bgt.n	800c1b4 <_dtoa_r+0x984>
 800c144:	9b06      	ldr	r3, [sp, #24]
 800c146:	2b02      	cmp	r3, #2
 800c148:	dd34      	ble.n	800c1b4 <_dtoa_r+0x984>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	9302      	str	r3, [sp, #8]
 800c14e:	9b02      	ldr	r3, [sp, #8]
 800c150:	b96b      	cbnz	r3, 800c16e <_dtoa_r+0x93e>
 800c152:	4631      	mov	r1, r6
 800c154:	2205      	movs	r2, #5
 800c156:	4620      	mov	r0, r4
 800c158:	f000 f9c6 	bl	800c4e8 <__multadd>
 800c15c:	4601      	mov	r1, r0
 800c15e:	4606      	mov	r6, r0
 800c160:	ee18 0a10 	vmov	r0, s16
 800c164:	f000 fbe0 	bl	800c928 <__mcmp>
 800c168:	2800      	cmp	r0, #0
 800c16a:	f73f adbb 	bgt.w	800bce4 <_dtoa_r+0x4b4>
 800c16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c170:	9d01      	ldr	r5, [sp, #4]
 800c172:	43db      	mvns	r3, r3
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	f04f 0800 	mov.w	r8, #0
 800c17a:	4631      	mov	r1, r6
 800c17c:	4620      	mov	r0, r4
 800c17e:	f000 f991 	bl	800c4a4 <_Bfree>
 800c182:	2f00      	cmp	r7, #0
 800c184:	f43f aea4 	beq.w	800bed0 <_dtoa_r+0x6a0>
 800c188:	f1b8 0f00 	cmp.w	r8, #0
 800c18c:	d005      	beq.n	800c19a <_dtoa_r+0x96a>
 800c18e:	45b8      	cmp	r8, r7
 800c190:	d003      	beq.n	800c19a <_dtoa_r+0x96a>
 800c192:	4641      	mov	r1, r8
 800c194:	4620      	mov	r0, r4
 800c196:	f000 f985 	bl	800c4a4 <_Bfree>
 800c19a:	4639      	mov	r1, r7
 800c19c:	4620      	mov	r0, r4
 800c19e:	f000 f981 	bl	800c4a4 <_Bfree>
 800c1a2:	e695      	b.n	800bed0 <_dtoa_r+0x6a0>
 800c1a4:	2600      	movs	r6, #0
 800c1a6:	4637      	mov	r7, r6
 800c1a8:	e7e1      	b.n	800c16e <_dtoa_r+0x93e>
 800c1aa:	9700      	str	r7, [sp, #0]
 800c1ac:	4637      	mov	r7, r6
 800c1ae:	e599      	b.n	800bce4 <_dtoa_r+0x4b4>
 800c1b0:	40240000 	.word	0x40240000
 800c1b4:	9b08      	ldr	r3, [sp, #32]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	f000 80ca 	beq.w	800c350 <_dtoa_r+0xb20>
 800c1bc:	9b03      	ldr	r3, [sp, #12]
 800c1be:	9302      	str	r3, [sp, #8]
 800c1c0:	2d00      	cmp	r5, #0
 800c1c2:	dd05      	ble.n	800c1d0 <_dtoa_r+0x9a0>
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	462a      	mov	r2, r5
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f000 fb3d 	bl	800c848 <__lshift>
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	f1b8 0f00 	cmp.w	r8, #0
 800c1d4:	d05b      	beq.n	800c28e <_dtoa_r+0xa5e>
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f000 f923 	bl	800c424 <_Balloc>
 800c1de:	4605      	mov	r5, r0
 800c1e0:	b928      	cbnz	r0, 800c1ee <_dtoa_r+0x9be>
 800c1e2:	4b87      	ldr	r3, [pc, #540]	; (800c400 <_dtoa_r+0xbd0>)
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1ea:	f7ff bb3b 	b.w	800b864 <_dtoa_r+0x34>
 800c1ee:	693a      	ldr	r2, [r7, #16]
 800c1f0:	3202      	adds	r2, #2
 800c1f2:	0092      	lsls	r2, r2, #2
 800c1f4:	f107 010c 	add.w	r1, r7, #12
 800c1f8:	300c      	adds	r0, #12
 800c1fa:	f7fe fdd9 	bl	800adb0 <memcpy>
 800c1fe:	2201      	movs	r2, #1
 800c200:	4629      	mov	r1, r5
 800c202:	4620      	mov	r0, r4
 800c204:	f000 fb20 	bl	800c848 <__lshift>
 800c208:	9b01      	ldr	r3, [sp, #4]
 800c20a:	f103 0901 	add.w	r9, r3, #1
 800c20e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c212:	4413      	add	r3, r2
 800c214:	9305      	str	r3, [sp, #20]
 800c216:	f00a 0301 	and.w	r3, sl, #1
 800c21a:	46b8      	mov	r8, r7
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	4607      	mov	r7, r0
 800c220:	4631      	mov	r1, r6
 800c222:	ee18 0a10 	vmov	r0, s16
 800c226:	f7ff fa76 	bl	800b716 <quorem>
 800c22a:	4641      	mov	r1, r8
 800c22c:	9002      	str	r0, [sp, #8]
 800c22e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c232:	ee18 0a10 	vmov	r0, s16
 800c236:	f000 fb77 	bl	800c928 <__mcmp>
 800c23a:	463a      	mov	r2, r7
 800c23c:	9003      	str	r0, [sp, #12]
 800c23e:	4631      	mov	r1, r6
 800c240:	4620      	mov	r0, r4
 800c242:	f000 fb8d 	bl	800c960 <__mdiff>
 800c246:	68c2      	ldr	r2, [r0, #12]
 800c248:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c24c:	4605      	mov	r5, r0
 800c24e:	bb02      	cbnz	r2, 800c292 <_dtoa_r+0xa62>
 800c250:	4601      	mov	r1, r0
 800c252:	ee18 0a10 	vmov	r0, s16
 800c256:	f000 fb67 	bl	800c928 <__mcmp>
 800c25a:	4602      	mov	r2, r0
 800c25c:	4629      	mov	r1, r5
 800c25e:	4620      	mov	r0, r4
 800c260:	9207      	str	r2, [sp, #28]
 800c262:	f000 f91f 	bl	800c4a4 <_Bfree>
 800c266:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c26a:	ea43 0102 	orr.w	r1, r3, r2
 800c26e:	9b04      	ldr	r3, [sp, #16]
 800c270:	430b      	orrs	r3, r1
 800c272:	464d      	mov	r5, r9
 800c274:	d10f      	bne.n	800c296 <_dtoa_r+0xa66>
 800c276:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c27a:	d02a      	beq.n	800c2d2 <_dtoa_r+0xaa2>
 800c27c:	9b03      	ldr	r3, [sp, #12]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	dd02      	ble.n	800c288 <_dtoa_r+0xa58>
 800c282:	9b02      	ldr	r3, [sp, #8]
 800c284:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c288:	f88b a000 	strb.w	sl, [fp]
 800c28c:	e775      	b.n	800c17a <_dtoa_r+0x94a>
 800c28e:	4638      	mov	r0, r7
 800c290:	e7ba      	b.n	800c208 <_dtoa_r+0x9d8>
 800c292:	2201      	movs	r2, #1
 800c294:	e7e2      	b.n	800c25c <_dtoa_r+0xa2c>
 800c296:	9b03      	ldr	r3, [sp, #12]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	db04      	blt.n	800c2a6 <_dtoa_r+0xa76>
 800c29c:	9906      	ldr	r1, [sp, #24]
 800c29e:	430b      	orrs	r3, r1
 800c2a0:	9904      	ldr	r1, [sp, #16]
 800c2a2:	430b      	orrs	r3, r1
 800c2a4:	d122      	bne.n	800c2ec <_dtoa_r+0xabc>
 800c2a6:	2a00      	cmp	r2, #0
 800c2a8:	ddee      	ble.n	800c288 <_dtoa_r+0xa58>
 800c2aa:	ee18 1a10 	vmov	r1, s16
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f000 fac9 	bl	800c848 <__lshift>
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	ee08 0a10 	vmov	s16, r0
 800c2bc:	f000 fb34 	bl	800c928 <__mcmp>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	dc03      	bgt.n	800c2cc <_dtoa_r+0xa9c>
 800c2c4:	d1e0      	bne.n	800c288 <_dtoa_r+0xa58>
 800c2c6:	f01a 0f01 	tst.w	sl, #1
 800c2ca:	d0dd      	beq.n	800c288 <_dtoa_r+0xa58>
 800c2cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2d0:	d1d7      	bne.n	800c282 <_dtoa_r+0xa52>
 800c2d2:	2339      	movs	r3, #57	; 0x39
 800c2d4:	f88b 3000 	strb.w	r3, [fp]
 800c2d8:	462b      	mov	r3, r5
 800c2da:	461d      	mov	r5, r3
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2e2:	2a39      	cmp	r2, #57	; 0x39
 800c2e4:	d071      	beq.n	800c3ca <_dtoa_r+0xb9a>
 800c2e6:	3201      	adds	r2, #1
 800c2e8:	701a      	strb	r2, [r3, #0]
 800c2ea:	e746      	b.n	800c17a <_dtoa_r+0x94a>
 800c2ec:	2a00      	cmp	r2, #0
 800c2ee:	dd07      	ble.n	800c300 <_dtoa_r+0xad0>
 800c2f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2f4:	d0ed      	beq.n	800c2d2 <_dtoa_r+0xaa2>
 800c2f6:	f10a 0301 	add.w	r3, sl, #1
 800c2fa:	f88b 3000 	strb.w	r3, [fp]
 800c2fe:	e73c      	b.n	800c17a <_dtoa_r+0x94a>
 800c300:	9b05      	ldr	r3, [sp, #20]
 800c302:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c306:	4599      	cmp	r9, r3
 800c308:	d047      	beq.n	800c39a <_dtoa_r+0xb6a>
 800c30a:	ee18 1a10 	vmov	r1, s16
 800c30e:	2300      	movs	r3, #0
 800c310:	220a      	movs	r2, #10
 800c312:	4620      	mov	r0, r4
 800c314:	f000 f8e8 	bl	800c4e8 <__multadd>
 800c318:	45b8      	cmp	r8, r7
 800c31a:	ee08 0a10 	vmov	s16, r0
 800c31e:	f04f 0300 	mov.w	r3, #0
 800c322:	f04f 020a 	mov.w	r2, #10
 800c326:	4641      	mov	r1, r8
 800c328:	4620      	mov	r0, r4
 800c32a:	d106      	bne.n	800c33a <_dtoa_r+0xb0a>
 800c32c:	f000 f8dc 	bl	800c4e8 <__multadd>
 800c330:	4680      	mov	r8, r0
 800c332:	4607      	mov	r7, r0
 800c334:	f109 0901 	add.w	r9, r9, #1
 800c338:	e772      	b.n	800c220 <_dtoa_r+0x9f0>
 800c33a:	f000 f8d5 	bl	800c4e8 <__multadd>
 800c33e:	4639      	mov	r1, r7
 800c340:	4680      	mov	r8, r0
 800c342:	2300      	movs	r3, #0
 800c344:	220a      	movs	r2, #10
 800c346:	4620      	mov	r0, r4
 800c348:	f000 f8ce 	bl	800c4e8 <__multadd>
 800c34c:	4607      	mov	r7, r0
 800c34e:	e7f1      	b.n	800c334 <_dtoa_r+0xb04>
 800c350:	9b03      	ldr	r3, [sp, #12]
 800c352:	9302      	str	r3, [sp, #8]
 800c354:	9d01      	ldr	r5, [sp, #4]
 800c356:	ee18 0a10 	vmov	r0, s16
 800c35a:	4631      	mov	r1, r6
 800c35c:	f7ff f9db 	bl	800b716 <quorem>
 800c360:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c364:	9b01      	ldr	r3, [sp, #4]
 800c366:	f805 ab01 	strb.w	sl, [r5], #1
 800c36a:	1aea      	subs	r2, r5, r3
 800c36c:	9b02      	ldr	r3, [sp, #8]
 800c36e:	4293      	cmp	r3, r2
 800c370:	dd09      	ble.n	800c386 <_dtoa_r+0xb56>
 800c372:	ee18 1a10 	vmov	r1, s16
 800c376:	2300      	movs	r3, #0
 800c378:	220a      	movs	r2, #10
 800c37a:	4620      	mov	r0, r4
 800c37c:	f000 f8b4 	bl	800c4e8 <__multadd>
 800c380:	ee08 0a10 	vmov	s16, r0
 800c384:	e7e7      	b.n	800c356 <_dtoa_r+0xb26>
 800c386:	9b02      	ldr	r3, [sp, #8]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	bfc8      	it	gt
 800c38c:	461d      	movgt	r5, r3
 800c38e:	9b01      	ldr	r3, [sp, #4]
 800c390:	bfd8      	it	le
 800c392:	2501      	movle	r5, #1
 800c394:	441d      	add	r5, r3
 800c396:	f04f 0800 	mov.w	r8, #0
 800c39a:	ee18 1a10 	vmov	r1, s16
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f000 fa51 	bl	800c848 <__lshift>
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	ee08 0a10 	vmov	s16, r0
 800c3ac:	f000 fabc 	bl	800c928 <__mcmp>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	dc91      	bgt.n	800c2d8 <_dtoa_r+0xaa8>
 800c3b4:	d102      	bne.n	800c3bc <_dtoa_r+0xb8c>
 800c3b6:	f01a 0f01 	tst.w	sl, #1
 800c3ba:	d18d      	bne.n	800c2d8 <_dtoa_r+0xaa8>
 800c3bc:	462b      	mov	r3, r5
 800c3be:	461d      	mov	r5, r3
 800c3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3c4:	2a30      	cmp	r2, #48	; 0x30
 800c3c6:	d0fa      	beq.n	800c3be <_dtoa_r+0xb8e>
 800c3c8:	e6d7      	b.n	800c17a <_dtoa_r+0x94a>
 800c3ca:	9a01      	ldr	r2, [sp, #4]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d184      	bne.n	800c2da <_dtoa_r+0xaaa>
 800c3d0:	9b00      	ldr	r3, [sp, #0]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	2331      	movs	r3, #49	; 0x31
 800c3d8:	7013      	strb	r3, [r2, #0]
 800c3da:	e6ce      	b.n	800c17a <_dtoa_r+0x94a>
 800c3dc:	4b09      	ldr	r3, [pc, #36]	; (800c404 <_dtoa_r+0xbd4>)
 800c3de:	f7ff ba95 	b.w	800b90c <_dtoa_r+0xdc>
 800c3e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f47f aa6e 	bne.w	800b8c6 <_dtoa_r+0x96>
 800c3ea:	4b07      	ldr	r3, [pc, #28]	; (800c408 <_dtoa_r+0xbd8>)
 800c3ec:	f7ff ba8e 	b.w	800b90c <_dtoa_r+0xdc>
 800c3f0:	9b02      	ldr	r3, [sp, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	dcae      	bgt.n	800c354 <_dtoa_r+0xb24>
 800c3f6:	9b06      	ldr	r3, [sp, #24]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	f73f aea8 	bgt.w	800c14e <_dtoa_r+0x91e>
 800c3fe:	e7a9      	b.n	800c354 <_dtoa_r+0xb24>
 800c400:	0801061f 	.word	0x0801061f
 800c404:	0801057c 	.word	0x0801057c
 800c408:	080105a0 	.word	0x080105a0

0800c40c <_localeconv_r>:
 800c40c:	4800      	ldr	r0, [pc, #0]	; (800c410 <_localeconv_r+0x4>)
 800c40e:	4770      	bx	lr
 800c410:	200001b4 	.word	0x200001b4

0800c414 <malloc>:
 800c414:	4b02      	ldr	r3, [pc, #8]	; (800c420 <malloc+0xc>)
 800c416:	4601      	mov	r1, r0
 800c418:	6818      	ldr	r0, [r3, #0]
 800c41a:	f000 bc09 	b.w	800cc30 <_malloc_r>
 800c41e:	bf00      	nop
 800c420:	20000060 	.word	0x20000060

0800c424 <_Balloc>:
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c428:	4604      	mov	r4, r0
 800c42a:	460d      	mov	r5, r1
 800c42c:	b976      	cbnz	r6, 800c44c <_Balloc+0x28>
 800c42e:	2010      	movs	r0, #16
 800c430:	f7ff fff0 	bl	800c414 <malloc>
 800c434:	4602      	mov	r2, r0
 800c436:	6260      	str	r0, [r4, #36]	; 0x24
 800c438:	b920      	cbnz	r0, 800c444 <_Balloc+0x20>
 800c43a:	4b18      	ldr	r3, [pc, #96]	; (800c49c <_Balloc+0x78>)
 800c43c:	4818      	ldr	r0, [pc, #96]	; (800c4a0 <_Balloc+0x7c>)
 800c43e:	2166      	movs	r1, #102	; 0x66
 800c440:	f000 fdd6 	bl	800cff0 <__assert_func>
 800c444:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c448:	6006      	str	r6, [r0, #0]
 800c44a:	60c6      	str	r6, [r0, #12]
 800c44c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c44e:	68f3      	ldr	r3, [r6, #12]
 800c450:	b183      	cbz	r3, 800c474 <_Balloc+0x50>
 800c452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c45a:	b9b8      	cbnz	r0, 800c48c <_Balloc+0x68>
 800c45c:	2101      	movs	r1, #1
 800c45e:	fa01 f605 	lsl.w	r6, r1, r5
 800c462:	1d72      	adds	r2, r6, #5
 800c464:	0092      	lsls	r2, r2, #2
 800c466:	4620      	mov	r0, r4
 800c468:	f000 fb60 	bl	800cb2c <_calloc_r>
 800c46c:	b160      	cbz	r0, 800c488 <_Balloc+0x64>
 800c46e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c472:	e00e      	b.n	800c492 <_Balloc+0x6e>
 800c474:	2221      	movs	r2, #33	; 0x21
 800c476:	2104      	movs	r1, #4
 800c478:	4620      	mov	r0, r4
 800c47a:	f000 fb57 	bl	800cb2c <_calloc_r>
 800c47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c480:	60f0      	str	r0, [r6, #12]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e4      	bne.n	800c452 <_Balloc+0x2e>
 800c488:	2000      	movs	r0, #0
 800c48a:	bd70      	pop	{r4, r5, r6, pc}
 800c48c:	6802      	ldr	r2, [r0, #0]
 800c48e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c492:	2300      	movs	r3, #0
 800c494:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c498:	e7f7      	b.n	800c48a <_Balloc+0x66>
 800c49a:	bf00      	nop
 800c49c:	080105ad 	.word	0x080105ad
 800c4a0:	08010630 	.word	0x08010630

0800c4a4 <_Bfree>:
 800c4a4:	b570      	push	{r4, r5, r6, lr}
 800c4a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4a8:	4605      	mov	r5, r0
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	b976      	cbnz	r6, 800c4cc <_Bfree+0x28>
 800c4ae:	2010      	movs	r0, #16
 800c4b0:	f7ff ffb0 	bl	800c414 <malloc>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	6268      	str	r0, [r5, #36]	; 0x24
 800c4b8:	b920      	cbnz	r0, 800c4c4 <_Bfree+0x20>
 800c4ba:	4b09      	ldr	r3, [pc, #36]	; (800c4e0 <_Bfree+0x3c>)
 800c4bc:	4809      	ldr	r0, [pc, #36]	; (800c4e4 <_Bfree+0x40>)
 800c4be:	218a      	movs	r1, #138	; 0x8a
 800c4c0:	f000 fd96 	bl	800cff0 <__assert_func>
 800c4c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4c8:	6006      	str	r6, [r0, #0]
 800c4ca:	60c6      	str	r6, [r0, #12]
 800c4cc:	b13c      	cbz	r4, 800c4de <_Bfree+0x3a>
 800c4ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4d0:	6862      	ldr	r2, [r4, #4]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4d8:	6021      	str	r1, [r4, #0]
 800c4da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	080105ad 	.word	0x080105ad
 800c4e4:	08010630 	.word	0x08010630

0800c4e8 <__multadd>:
 800c4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ec:	690d      	ldr	r5, [r1, #16]
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	460c      	mov	r4, r1
 800c4f2:	461e      	mov	r6, r3
 800c4f4:	f101 0c14 	add.w	ip, r1, #20
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	f8dc 3000 	ldr.w	r3, [ip]
 800c4fe:	b299      	uxth	r1, r3
 800c500:	fb02 6101 	mla	r1, r2, r1, r6
 800c504:	0c1e      	lsrs	r6, r3, #16
 800c506:	0c0b      	lsrs	r3, r1, #16
 800c508:	fb02 3306 	mla	r3, r2, r6, r3
 800c50c:	b289      	uxth	r1, r1
 800c50e:	3001      	adds	r0, #1
 800c510:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c514:	4285      	cmp	r5, r0
 800c516:	f84c 1b04 	str.w	r1, [ip], #4
 800c51a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c51e:	dcec      	bgt.n	800c4fa <__multadd+0x12>
 800c520:	b30e      	cbz	r6, 800c566 <__multadd+0x7e>
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	42ab      	cmp	r3, r5
 800c526:	dc19      	bgt.n	800c55c <__multadd+0x74>
 800c528:	6861      	ldr	r1, [r4, #4]
 800c52a:	4638      	mov	r0, r7
 800c52c:	3101      	adds	r1, #1
 800c52e:	f7ff ff79 	bl	800c424 <_Balloc>
 800c532:	4680      	mov	r8, r0
 800c534:	b928      	cbnz	r0, 800c542 <__multadd+0x5a>
 800c536:	4602      	mov	r2, r0
 800c538:	4b0c      	ldr	r3, [pc, #48]	; (800c56c <__multadd+0x84>)
 800c53a:	480d      	ldr	r0, [pc, #52]	; (800c570 <__multadd+0x88>)
 800c53c:	21b5      	movs	r1, #181	; 0xb5
 800c53e:	f000 fd57 	bl	800cff0 <__assert_func>
 800c542:	6922      	ldr	r2, [r4, #16]
 800c544:	3202      	adds	r2, #2
 800c546:	f104 010c 	add.w	r1, r4, #12
 800c54a:	0092      	lsls	r2, r2, #2
 800c54c:	300c      	adds	r0, #12
 800c54e:	f7fe fc2f 	bl	800adb0 <memcpy>
 800c552:	4621      	mov	r1, r4
 800c554:	4638      	mov	r0, r7
 800c556:	f7ff ffa5 	bl	800c4a4 <_Bfree>
 800c55a:	4644      	mov	r4, r8
 800c55c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c560:	3501      	adds	r5, #1
 800c562:	615e      	str	r6, [r3, #20]
 800c564:	6125      	str	r5, [r4, #16]
 800c566:	4620      	mov	r0, r4
 800c568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c56c:	0801061f 	.word	0x0801061f
 800c570:	08010630 	.word	0x08010630

0800c574 <__hi0bits>:
 800c574:	0c03      	lsrs	r3, r0, #16
 800c576:	041b      	lsls	r3, r3, #16
 800c578:	b9d3      	cbnz	r3, 800c5b0 <__hi0bits+0x3c>
 800c57a:	0400      	lsls	r0, r0, #16
 800c57c:	2310      	movs	r3, #16
 800c57e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c582:	bf04      	itt	eq
 800c584:	0200      	lsleq	r0, r0, #8
 800c586:	3308      	addeq	r3, #8
 800c588:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c58c:	bf04      	itt	eq
 800c58e:	0100      	lsleq	r0, r0, #4
 800c590:	3304      	addeq	r3, #4
 800c592:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c596:	bf04      	itt	eq
 800c598:	0080      	lsleq	r0, r0, #2
 800c59a:	3302      	addeq	r3, #2
 800c59c:	2800      	cmp	r0, #0
 800c59e:	db05      	blt.n	800c5ac <__hi0bits+0x38>
 800c5a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5a4:	f103 0301 	add.w	r3, r3, #1
 800c5a8:	bf08      	it	eq
 800c5aa:	2320      	moveq	r3, #32
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	4770      	bx	lr
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	e7e4      	b.n	800c57e <__hi0bits+0xa>

0800c5b4 <__lo0bits>:
 800c5b4:	6803      	ldr	r3, [r0, #0]
 800c5b6:	f013 0207 	ands.w	r2, r3, #7
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	d00b      	beq.n	800c5d6 <__lo0bits+0x22>
 800c5be:	07da      	lsls	r2, r3, #31
 800c5c0:	d423      	bmi.n	800c60a <__lo0bits+0x56>
 800c5c2:	0798      	lsls	r0, r3, #30
 800c5c4:	bf49      	itett	mi
 800c5c6:	085b      	lsrmi	r3, r3, #1
 800c5c8:	089b      	lsrpl	r3, r3, #2
 800c5ca:	2001      	movmi	r0, #1
 800c5cc:	600b      	strmi	r3, [r1, #0]
 800c5ce:	bf5c      	itt	pl
 800c5d0:	600b      	strpl	r3, [r1, #0]
 800c5d2:	2002      	movpl	r0, #2
 800c5d4:	4770      	bx	lr
 800c5d6:	b298      	uxth	r0, r3
 800c5d8:	b9a8      	cbnz	r0, 800c606 <__lo0bits+0x52>
 800c5da:	0c1b      	lsrs	r3, r3, #16
 800c5dc:	2010      	movs	r0, #16
 800c5de:	b2da      	uxtb	r2, r3
 800c5e0:	b90a      	cbnz	r2, 800c5e6 <__lo0bits+0x32>
 800c5e2:	3008      	adds	r0, #8
 800c5e4:	0a1b      	lsrs	r3, r3, #8
 800c5e6:	071a      	lsls	r2, r3, #28
 800c5e8:	bf04      	itt	eq
 800c5ea:	091b      	lsreq	r3, r3, #4
 800c5ec:	3004      	addeq	r0, #4
 800c5ee:	079a      	lsls	r2, r3, #30
 800c5f0:	bf04      	itt	eq
 800c5f2:	089b      	lsreq	r3, r3, #2
 800c5f4:	3002      	addeq	r0, #2
 800c5f6:	07da      	lsls	r2, r3, #31
 800c5f8:	d403      	bmi.n	800c602 <__lo0bits+0x4e>
 800c5fa:	085b      	lsrs	r3, r3, #1
 800c5fc:	f100 0001 	add.w	r0, r0, #1
 800c600:	d005      	beq.n	800c60e <__lo0bits+0x5a>
 800c602:	600b      	str	r3, [r1, #0]
 800c604:	4770      	bx	lr
 800c606:	4610      	mov	r0, r2
 800c608:	e7e9      	b.n	800c5de <__lo0bits+0x2a>
 800c60a:	2000      	movs	r0, #0
 800c60c:	4770      	bx	lr
 800c60e:	2020      	movs	r0, #32
 800c610:	4770      	bx	lr
	...

0800c614 <__i2b>:
 800c614:	b510      	push	{r4, lr}
 800c616:	460c      	mov	r4, r1
 800c618:	2101      	movs	r1, #1
 800c61a:	f7ff ff03 	bl	800c424 <_Balloc>
 800c61e:	4602      	mov	r2, r0
 800c620:	b928      	cbnz	r0, 800c62e <__i2b+0x1a>
 800c622:	4b05      	ldr	r3, [pc, #20]	; (800c638 <__i2b+0x24>)
 800c624:	4805      	ldr	r0, [pc, #20]	; (800c63c <__i2b+0x28>)
 800c626:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c62a:	f000 fce1 	bl	800cff0 <__assert_func>
 800c62e:	2301      	movs	r3, #1
 800c630:	6144      	str	r4, [r0, #20]
 800c632:	6103      	str	r3, [r0, #16]
 800c634:	bd10      	pop	{r4, pc}
 800c636:	bf00      	nop
 800c638:	0801061f 	.word	0x0801061f
 800c63c:	08010630 	.word	0x08010630

0800c640 <__multiply>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	4691      	mov	r9, r2
 800c646:	690a      	ldr	r2, [r1, #16]
 800c648:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	bfb8      	it	lt
 800c650:	460b      	movlt	r3, r1
 800c652:	460c      	mov	r4, r1
 800c654:	bfbc      	itt	lt
 800c656:	464c      	movlt	r4, r9
 800c658:	4699      	movlt	r9, r3
 800c65a:	6927      	ldr	r7, [r4, #16]
 800c65c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c660:	68a3      	ldr	r3, [r4, #8]
 800c662:	6861      	ldr	r1, [r4, #4]
 800c664:	eb07 060a 	add.w	r6, r7, sl
 800c668:	42b3      	cmp	r3, r6
 800c66a:	b085      	sub	sp, #20
 800c66c:	bfb8      	it	lt
 800c66e:	3101      	addlt	r1, #1
 800c670:	f7ff fed8 	bl	800c424 <_Balloc>
 800c674:	b930      	cbnz	r0, 800c684 <__multiply+0x44>
 800c676:	4602      	mov	r2, r0
 800c678:	4b44      	ldr	r3, [pc, #272]	; (800c78c <__multiply+0x14c>)
 800c67a:	4845      	ldr	r0, [pc, #276]	; (800c790 <__multiply+0x150>)
 800c67c:	f240 115d 	movw	r1, #349	; 0x15d
 800c680:	f000 fcb6 	bl	800cff0 <__assert_func>
 800c684:	f100 0514 	add.w	r5, r0, #20
 800c688:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c68c:	462b      	mov	r3, r5
 800c68e:	2200      	movs	r2, #0
 800c690:	4543      	cmp	r3, r8
 800c692:	d321      	bcc.n	800c6d8 <__multiply+0x98>
 800c694:	f104 0314 	add.w	r3, r4, #20
 800c698:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c69c:	f109 0314 	add.w	r3, r9, #20
 800c6a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6a4:	9202      	str	r2, [sp, #8]
 800c6a6:	1b3a      	subs	r2, r7, r4
 800c6a8:	3a15      	subs	r2, #21
 800c6aa:	f022 0203 	bic.w	r2, r2, #3
 800c6ae:	3204      	adds	r2, #4
 800c6b0:	f104 0115 	add.w	r1, r4, #21
 800c6b4:	428f      	cmp	r7, r1
 800c6b6:	bf38      	it	cc
 800c6b8:	2204      	movcc	r2, #4
 800c6ba:	9201      	str	r2, [sp, #4]
 800c6bc:	9a02      	ldr	r2, [sp, #8]
 800c6be:	9303      	str	r3, [sp, #12]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d80c      	bhi.n	800c6de <__multiply+0x9e>
 800c6c4:	2e00      	cmp	r6, #0
 800c6c6:	dd03      	ble.n	800c6d0 <__multiply+0x90>
 800c6c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d05a      	beq.n	800c786 <__multiply+0x146>
 800c6d0:	6106      	str	r6, [r0, #16]
 800c6d2:	b005      	add	sp, #20
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	f843 2b04 	str.w	r2, [r3], #4
 800c6dc:	e7d8      	b.n	800c690 <__multiply+0x50>
 800c6de:	f8b3 a000 	ldrh.w	sl, [r3]
 800c6e2:	f1ba 0f00 	cmp.w	sl, #0
 800c6e6:	d024      	beq.n	800c732 <__multiply+0xf2>
 800c6e8:	f104 0e14 	add.w	lr, r4, #20
 800c6ec:	46a9      	mov	r9, r5
 800c6ee:	f04f 0c00 	mov.w	ip, #0
 800c6f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c6f6:	f8d9 1000 	ldr.w	r1, [r9]
 800c6fa:	fa1f fb82 	uxth.w	fp, r2
 800c6fe:	b289      	uxth	r1, r1
 800c700:	fb0a 110b 	mla	r1, sl, fp, r1
 800c704:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c708:	f8d9 2000 	ldr.w	r2, [r9]
 800c70c:	4461      	add	r1, ip
 800c70e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c712:	fb0a c20b 	mla	r2, sl, fp, ip
 800c716:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c71a:	b289      	uxth	r1, r1
 800c71c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c720:	4577      	cmp	r7, lr
 800c722:	f849 1b04 	str.w	r1, [r9], #4
 800c726:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c72a:	d8e2      	bhi.n	800c6f2 <__multiply+0xb2>
 800c72c:	9a01      	ldr	r2, [sp, #4]
 800c72e:	f845 c002 	str.w	ip, [r5, r2]
 800c732:	9a03      	ldr	r2, [sp, #12]
 800c734:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c738:	3304      	adds	r3, #4
 800c73a:	f1b9 0f00 	cmp.w	r9, #0
 800c73e:	d020      	beq.n	800c782 <__multiply+0x142>
 800c740:	6829      	ldr	r1, [r5, #0]
 800c742:	f104 0c14 	add.w	ip, r4, #20
 800c746:	46ae      	mov	lr, r5
 800c748:	f04f 0a00 	mov.w	sl, #0
 800c74c:	f8bc b000 	ldrh.w	fp, [ip]
 800c750:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c754:	fb09 220b 	mla	r2, r9, fp, r2
 800c758:	4492      	add	sl, r2
 800c75a:	b289      	uxth	r1, r1
 800c75c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c760:	f84e 1b04 	str.w	r1, [lr], #4
 800c764:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c768:	f8be 1000 	ldrh.w	r1, [lr]
 800c76c:	0c12      	lsrs	r2, r2, #16
 800c76e:	fb09 1102 	mla	r1, r9, r2, r1
 800c772:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c776:	4567      	cmp	r7, ip
 800c778:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c77c:	d8e6      	bhi.n	800c74c <__multiply+0x10c>
 800c77e:	9a01      	ldr	r2, [sp, #4]
 800c780:	50a9      	str	r1, [r5, r2]
 800c782:	3504      	adds	r5, #4
 800c784:	e79a      	b.n	800c6bc <__multiply+0x7c>
 800c786:	3e01      	subs	r6, #1
 800c788:	e79c      	b.n	800c6c4 <__multiply+0x84>
 800c78a:	bf00      	nop
 800c78c:	0801061f 	.word	0x0801061f
 800c790:	08010630 	.word	0x08010630

0800c794 <__pow5mult>:
 800c794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c798:	4615      	mov	r5, r2
 800c79a:	f012 0203 	ands.w	r2, r2, #3
 800c79e:	4606      	mov	r6, r0
 800c7a0:	460f      	mov	r7, r1
 800c7a2:	d007      	beq.n	800c7b4 <__pow5mult+0x20>
 800c7a4:	4c25      	ldr	r4, [pc, #148]	; (800c83c <__pow5mult+0xa8>)
 800c7a6:	3a01      	subs	r2, #1
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7ae:	f7ff fe9b 	bl	800c4e8 <__multadd>
 800c7b2:	4607      	mov	r7, r0
 800c7b4:	10ad      	asrs	r5, r5, #2
 800c7b6:	d03d      	beq.n	800c834 <__pow5mult+0xa0>
 800c7b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7ba:	b97c      	cbnz	r4, 800c7dc <__pow5mult+0x48>
 800c7bc:	2010      	movs	r0, #16
 800c7be:	f7ff fe29 	bl	800c414 <malloc>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	6270      	str	r0, [r6, #36]	; 0x24
 800c7c6:	b928      	cbnz	r0, 800c7d4 <__pow5mult+0x40>
 800c7c8:	4b1d      	ldr	r3, [pc, #116]	; (800c840 <__pow5mult+0xac>)
 800c7ca:	481e      	ldr	r0, [pc, #120]	; (800c844 <__pow5mult+0xb0>)
 800c7cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c7d0:	f000 fc0e 	bl	800cff0 <__assert_func>
 800c7d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7d8:	6004      	str	r4, [r0, #0]
 800c7da:	60c4      	str	r4, [r0, #12]
 800c7dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7e4:	b94c      	cbnz	r4, 800c7fa <__pow5mult+0x66>
 800c7e6:	f240 2171 	movw	r1, #625	; 0x271
 800c7ea:	4630      	mov	r0, r6
 800c7ec:	f7ff ff12 	bl	800c614 <__i2b>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	6003      	str	r3, [r0, #0]
 800c7fa:	f04f 0900 	mov.w	r9, #0
 800c7fe:	07eb      	lsls	r3, r5, #31
 800c800:	d50a      	bpl.n	800c818 <__pow5mult+0x84>
 800c802:	4639      	mov	r1, r7
 800c804:	4622      	mov	r2, r4
 800c806:	4630      	mov	r0, r6
 800c808:	f7ff ff1a 	bl	800c640 <__multiply>
 800c80c:	4639      	mov	r1, r7
 800c80e:	4680      	mov	r8, r0
 800c810:	4630      	mov	r0, r6
 800c812:	f7ff fe47 	bl	800c4a4 <_Bfree>
 800c816:	4647      	mov	r7, r8
 800c818:	106d      	asrs	r5, r5, #1
 800c81a:	d00b      	beq.n	800c834 <__pow5mult+0xa0>
 800c81c:	6820      	ldr	r0, [r4, #0]
 800c81e:	b938      	cbnz	r0, 800c830 <__pow5mult+0x9c>
 800c820:	4622      	mov	r2, r4
 800c822:	4621      	mov	r1, r4
 800c824:	4630      	mov	r0, r6
 800c826:	f7ff ff0b 	bl	800c640 <__multiply>
 800c82a:	6020      	str	r0, [r4, #0]
 800c82c:	f8c0 9000 	str.w	r9, [r0]
 800c830:	4604      	mov	r4, r0
 800c832:	e7e4      	b.n	800c7fe <__pow5mult+0x6a>
 800c834:	4638      	mov	r0, r7
 800c836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c83a:	bf00      	nop
 800c83c:	08010780 	.word	0x08010780
 800c840:	080105ad 	.word	0x080105ad
 800c844:	08010630 	.word	0x08010630

0800c848 <__lshift>:
 800c848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c84c:	460c      	mov	r4, r1
 800c84e:	6849      	ldr	r1, [r1, #4]
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	4607      	mov	r7, r0
 800c85a:	4691      	mov	r9, r2
 800c85c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c860:	f108 0601 	add.w	r6, r8, #1
 800c864:	42b3      	cmp	r3, r6
 800c866:	db0b      	blt.n	800c880 <__lshift+0x38>
 800c868:	4638      	mov	r0, r7
 800c86a:	f7ff fddb 	bl	800c424 <_Balloc>
 800c86e:	4605      	mov	r5, r0
 800c870:	b948      	cbnz	r0, 800c886 <__lshift+0x3e>
 800c872:	4602      	mov	r2, r0
 800c874:	4b2a      	ldr	r3, [pc, #168]	; (800c920 <__lshift+0xd8>)
 800c876:	482b      	ldr	r0, [pc, #172]	; (800c924 <__lshift+0xdc>)
 800c878:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c87c:	f000 fbb8 	bl	800cff0 <__assert_func>
 800c880:	3101      	adds	r1, #1
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	e7ee      	b.n	800c864 <__lshift+0x1c>
 800c886:	2300      	movs	r3, #0
 800c888:	f100 0114 	add.w	r1, r0, #20
 800c88c:	f100 0210 	add.w	r2, r0, #16
 800c890:	4618      	mov	r0, r3
 800c892:	4553      	cmp	r3, sl
 800c894:	db37      	blt.n	800c906 <__lshift+0xbe>
 800c896:	6920      	ldr	r0, [r4, #16]
 800c898:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c89c:	f104 0314 	add.w	r3, r4, #20
 800c8a0:	f019 091f 	ands.w	r9, r9, #31
 800c8a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c8ac:	d02f      	beq.n	800c90e <__lshift+0xc6>
 800c8ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c8b2:	468a      	mov	sl, r1
 800c8b4:	f04f 0c00 	mov.w	ip, #0
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	fa02 f209 	lsl.w	r2, r2, r9
 800c8be:	ea42 020c 	orr.w	r2, r2, ip
 800c8c2:	f84a 2b04 	str.w	r2, [sl], #4
 800c8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ca:	4298      	cmp	r0, r3
 800c8cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c8d0:	d8f2      	bhi.n	800c8b8 <__lshift+0x70>
 800c8d2:	1b03      	subs	r3, r0, r4
 800c8d4:	3b15      	subs	r3, #21
 800c8d6:	f023 0303 	bic.w	r3, r3, #3
 800c8da:	3304      	adds	r3, #4
 800c8dc:	f104 0215 	add.w	r2, r4, #21
 800c8e0:	4290      	cmp	r0, r2
 800c8e2:	bf38      	it	cc
 800c8e4:	2304      	movcc	r3, #4
 800c8e6:	f841 c003 	str.w	ip, [r1, r3]
 800c8ea:	f1bc 0f00 	cmp.w	ip, #0
 800c8ee:	d001      	beq.n	800c8f4 <__lshift+0xac>
 800c8f0:	f108 0602 	add.w	r6, r8, #2
 800c8f4:	3e01      	subs	r6, #1
 800c8f6:	4638      	mov	r0, r7
 800c8f8:	612e      	str	r6, [r5, #16]
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	f7ff fdd2 	bl	800c4a4 <_Bfree>
 800c900:	4628      	mov	r0, r5
 800c902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c906:	f842 0f04 	str.w	r0, [r2, #4]!
 800c90a:	3301      	adds	r3, #1
 800c90c:	e7c1      	b.n	800c892 <__lshift+0x4a>
 800c90e:	3904      	subs	r1, #4
 800c910:	f853 2b04 	ldr.w	r2, [r3], #4
 800c914:	f841 2f04 	str.w	r2, [r1, #4]!
 800c918:	4298      	cmp	r0, r3
 800c91a:	d8f9      	bhi.n	800c910 <__lshift+0xc8>
 800c91c:	e7ea      	b.n	800c8f4 <__lshift+0xac>
 800c91e:	bf00      	nop
 800c920:	0801061f 	.word	0x0801061f
 800c924:	08010630 	.word	0x08010630

0800c928 <__mcmp>:
 800c928:	b530      	push	{r4, r5, lr}
 800c92a:	6902      	ldr	r2, [r0, #16]
 800c92c:	690c      	ldr	r4, [r1, #16]
 800c92e:	1b12      	subs	r2, r2, r4
 800c930:	d10e      	bne.n	800c950 <__mcmp+0x28>
 800c932:	f100 0314 	add.w	r3, r0, #20
 800c936:	3114      	adds	r1, #20
 800c938:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c93c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c940:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c944:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c948:	42a5      	cmp	r5, r4
 800c94a:	d003      	beq.n	800c954 <__mcmp+0x2c>
 800c94c:	d305      	bcc.n	800c95a <__mcmp+0x32>
 800c94e:	2201      	movs	r2, #1
 800c950:	4610      	mov	r0, r2
 800c952:	bd30      	pop	{r4, r5, pc}
 800c954:	4283      	cmp	r3, r0
 800c956:	d3f3      	bcc.n	800c940 <__mcmp+0x18>
 800c958:	e7fa      	b.n	800c950 <__mcmp+0x28>
 800c95a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c95e:	e7f7      	b.n	800c950 <__mcmp+0x28>

0800c960 <__mdiff>:
 800c960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	460c      	mov	r4, r1
 800c966:	4606      	mov	r6, r0
 800c968:	4611      	mov	r1, r2
 800c96a:	4620      	mov	r0, r4
 800c96c:	4690      	mov	r8, r2
 800c96e:	f7ff ffdb 	bl	800c928 <__mcmp>
 800c972:	1e05      	subs	r5, r0, #0
 800c974:	d110      	bne.n	800c998 <__mdiff+0x38>
 800c976:	4629      	mov	r1, r5
 800c978:	4630      	mov	r0, r6
 800c97a:	f7ff fd53 	bl	800c424 <_Balloc>
 800c97e:	b930      	cbnz	r0, 800c98e <__mdiff+0x2e>
 800c980:	4b3a      	ldr	r3, [pc, #232]	; (800ca6c <__mdiff+0x10c>)
 800c982:	4602      	mov	r2, r0
 800c984:	f240 2132 	movw	r1, #562	; 0x232
 800c988:	4839      	ldr	r0, [pc, #228]	; (800ca70 <__mdiff+0x110>)
 800c98a:	f000 fb31 	bl	800cff0 <__assert_func>
 800c98e:	2301      	movs	r3, #1
 800c990:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c998:	bfa4      	itt	ge
 800c99a:	4643      	movge	r3, r8
 800c99c:	46a0      	movge	r8, r4
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9a4:	bfa6      	itte	ge
 800c9a6:	461c      	movge	r4, r3
 800c9a8:	2500      	movge	r5, #0
 800c9aa:	2501      	movlt	r5, #1
 800c9ac:	f7ff fd3a 	bl	800c424 <_Balloc>
 800c9b0:	b920      	cbnz	r0, 800c9bc <__mdiff+0x5c>
 800c9b2:	4b2e      	ldr	r3, [pc, #184]	; (800ca6c <__mdiff+0x10c>)
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c9ba:	e7e5      	b.n	800c988 <__mdiff+0x28>
 800c9bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9c0:	6926      	ldr	r6, [r4, #16]
 800c9c2:	60c5      	str	r5, [r0, #12]
 800c9c4:	f104 0914 	add.w	r9, r4, #20
 800c9c8:	f108 0514 	add.w	r5, r8, #20
 800c9cc:	f100 0e14 	add.w	lr, r0, #20
 800c9d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c9d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c9d8:	f108 0210 	add.w	r2, r8, #16
 800c9dc:	46f2      	mov	sl, lr
 800c9de:	2100      	movs	r1, #0
 800c9e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c9e8:	fa1f f883 	uxth.w	r8, r3
 800c9ec:	fa11 f18b 	uxtah	r1, r1, fp
 800c9f0:	0c1b      	lsrs	r3, r3, #16
 800c9f2:	eba1 0808 	sub.w	r8, r1, r8
 800c9f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c9fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c9fe:	fa1f f888 	uxth.w	r8, r8
 800ca02:	1419      	asrs	r1, r3, #16
 800ca04:	454e      	cmp	r6, r9
 800ca06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca0a:	f84a 3b04 	str.w	r3, [sl], #4
 800ca0e:	d8e7      	bhi.n	800c9e0 <__mdiff+0x80>
 800ca10:	1b33      	subs	r3, r6, r4
 800ca12:	3b15      	subs	r3, #21
 800ca14:	f023 0303 	bic.w	r3, r3, #3
 800ca18:	3304      	adds	r3, #4
 800ca1a:	3415      	adds	r4, #21
 800ca1c:	42a6      	cmp	r6, r4
 800ca1e:	bf38      	it	cc
 800ca20:	2304      	movcc	r3, #4
 800ca22:	441d      	add	r5, r3
 800ca24:	4473      	add	r3, lr
 800ca26:	469e      	mov	lr, r3
 800ca28:	462e      	mov	r6, r5
 800ca2a:	4566      	cmp	r6, ip
 800ca2c:	d30e      	bcc.n	800ca4c <__mdiff+0xec>
 800ca2e:	f10c 0203 	add.w	r2, ip, #3
 800ca32:	1b52      	subs	r2, r2, r5
 800ca34:	f022 0203 	bic.w	r2, r2, #3
 800ca38:	3d03      	subs	r5, #3
 800ca3a:	45ac      	cmp	ip, r5
 800ca3c:	bf38      	it	cc
 800ca3e:	2200      	movcc	r2, #0
 800ca40:	441a      	add	r2, r3
 800ca42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ca46:	b17b      	cbz	r3, 800ca68 <__mdiff+0x108>
 800ca48:	6107      	str	r7, [r0, #16]
 800ca4a:	e7a3      	b.n	800c994 <__mdiff+0x34>
 800ca4c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca50:	fa11 f288 	uxtah	r2, r1, r8
 800ca54:	1414      	asrs	r4, r2, #16
 800ca56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca5a:	b292      	uxth	r2, r2
 800ca5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca60:	f84e 2b04 	str.w	r2, [lr], #4
 800ca64:	1421      	asrs	r1, r4, #16
 800ca66:	e7e0      	b.n	800ca2a <__mdiff+0xca>
 800ca68:	3f01      	subs	r7, #1
 800ca6a:	e7ea      	b.n	800ca42 <__mdiff+0xe2>
 800ca6c:	0801061f 	.word	0x0801061f
 800ca70:	08010630 	.word	0x08010630

0800ca74 <__d2b>:
 800ca74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca78:	4689      	mov	r9, r1
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	ec57 6b10 	vmov	r6, r7, d0
 800ca80:	4690      	mov	r8, r2
 800ca82:	f7ff fccf 	bl	800c424 <_Balloc>
 800ca86:	4604      	mov	r4, r0
 800ca88:	b930      	cbnz	r0, 800ca98 <__d2b+0x24>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b25      	ldr	r3, [pc, #148]	; (800cb24 <__d2b+0xb0>)
 800ca8e:	4826      	ldr	r0, [pc, #152]	; (800cb28 <__d2b+0xb4>)
 800ca90:	f240 310a 	movw	r1, #778	; 0x30a
 800ca94:	f000 faac 	bl	800cff0 <__assert_func>
 800ca98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800caa0:	bb35      	cbnz	r5, 800caf0 <__d2b+0x7c>
 800caa2:	2e00      	cmp	r6, #0
 800caa4:	9301      	str	r3, [sp, #4]
 800caa6:	d028      	beq.n	800cafa <__d2b+0x86>
 800caa8:	4668      	mov	r0, sp
 800caaa:	9600      	str	r6, [sp, #0]
 800caac:	f7ff fd82 	bl	800c5b4 <__lo0bits>
 800cab0:	9900      	ldr	r1, [sp, #0]
 800cab2:	b300      	cbz	r0, 800caf6 <__d2b+0x82>
 800cab4:	9a01      	ldr	r2, [sp, #4]
 800cab6:	f1c0 0320 	rsb	r3, r0, #32
 800caba:	fa02 f303 	lsl.w	r3, r2, r3
 800cabe:	430b      	orrs	r3, r1
 800cac0:	40c2      	lsrs	r2, r0
 800cac2:	6163      	str	r3, [r4, #20]
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	61a3      	str	r3, [r4, #24]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	bf14      	ite	ne
 800cace:	2202      	movne	r2, #2
 800cad0:	2201      	moveq	r2, #1
 800cad2:	6122      	str	r2, [r4, #16]
 800cad4:	b1d5      	cbz	r5, 800cb0c <__d2b+0x98>
 800cad6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cada:	4405      	add	r5, r0
 800cadc:	f8c9 5000 	str.w	r5, [r9]
 800cae0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cae4:	f8c8 0000 	str.w	r0, [r8]
 800cae8:	4620      	mov	r0, r4
 800caea:	b003      	add	sp, #12
 800caec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caf4:	e7d5      	b.n	800caa2 <__d2b+0x2e>
 800caf6:	6161      	str	r1, [r4, #20]
 800caf8:	e7e5      	b.n	800cac6 <__d2b+0x52>
 800cafa:	a801      	add	r0, sp, #4
 800cafc:	f7ff fd5a 	bl	800c5b4 <__lo0bits>
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	6163      	str	r3, [r4, #20]
 800cb04:	2201      	movs	r2, #1
 800cb06:	6122      	str	r2, [r4, #16]
 800cb08:	3020      	adds	r0, #32
 800cb0a:	e7e3      	b.n	800cad4 <__d2b+0x60>
 800cb0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb14:	f8c9 0000 	str.w	r0, [r9]
 800cb18:	6918      	ldr	r0, [r3, #16]
 800cb1a:	f7ff fd2b 	bl	800c574 <__hi0bits>
 800cb1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb22:	e7df      	b.n	800cae4 <__d2b+0x70>
 800cb24:	0801061f 	.word	0x0801061f
 800cb28:	08010630 	.word	0x08010630

0800cb2c <_calloc_r>:
 800cb2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb2e:	fba1 2402 	umull	r2, r4, r1, r2
 800cb32:	b94c      	cbnz	r4, 800cb48 <_calloc_r+0x1c>
 800cb34:	4611      	mov	r1, r2
 800cb36:	9201      	str	r2, [sp, #4]
 800cb38:	f000 f87a 	bl	800cc30 <_malloc_r>
 800cb3c:	9a01      	ldr	r2, [sp, #4]
 800cb3e:	4605      	mov	r5, r0
 800cb40:	b930      	cbnz	r0, 800cb50 <_calloc_r+0x24>
 800cb42:	4628      	mov	r0, r5
 800cb44:	b003      	add	sp, #12
 800cb46:	bd30      	pop	{r4, r5, pc}
 800cb48:	220c      	movs	r2, #12
 800cb4a:	6002      	str	r2, [r0, #0]
 800cb4c:	2500      	movs	r5, #0
 800cb4e:	e7f8      	b.n	800cb42 <_calloc_r+0x16>
 800cb50:	4621      	mov	r1, r4
 800cb52:	f7fe f93b 	bl	800adcc <memset>
 800cb56:	e7f4      	b.n	800cb42 <_calloc_r+0x16>

0800cb58 <_free_r>:
 800cb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb5a:	2900      	cmp	r1, #0
 800cb5c:	d044      	beq.n	800cbe8 <_free_r+0x90>
 800cb5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb62:	9001      	str	r0, [sp, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f1a1 0404 	sub.w	r4, r1, #4
 800cb6a:	bfb8      	it	lt
 800cb6c:	18e4      	addlt	r4, r4, r3
 800cb6e:	f000 fa9b 	bl	800d0a8 <__malloc_lock>
 800cb72:	4a1e      	ldr	r2, [pc, #120]	; (800cbec <_free_r+0x94>)
 800cb74:	9801      	ldr	r0, [sp, #4]
 800cb76:	6813      	ldr	r3, [r2, #0]
 800cb78:	b933      	cbnz	r3, 800cb88 <_free_r+0x30>
 800cb7a:	6063      	str	r3, [r4, #4]
 800cb7c:	6014      	str	r4, [r2, #0]
 800cb7e:	b003      	add	sp, #12
 800cb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb84:	f000 ba96 	b.w	800d0b4 <__malloc_unlock>
 800cb88:	42a3      	cmp	r3, r4
 800cb8a:	d908      	bls.n	800cb9e <_free_r+0x46>
 800cb8c:	6825      	ldr	r5, [r4, #0]
 800cb8e:	1961      	adds	r1, r4, r5
 800cb90:	428b      	cmp	r3, r1
 800cb92:	bf01      	itttt	eq
 800cb94:	6819      	ldreq	r1, [r3, #0]
 800cb96:	685b      	ldreq	r3, [r3, #4]
 800cb98:	1949      	addeq	r1, r1, r5
 800cb9a:	6021      	streq	r1, [r4, #0]
 800cb9c:	e7ed      	b.n	800cb7a <_free_r+0x22>
 800cb9e:	461a      	mov	r2, r3
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	b10b      	cbz	r3, 800cba8 <_free_r+0x50>
 800cba4:	42a3      	cmp	r3, r4
 800cba6:	d9fa      	bls.n	800cb9e <_free_r+0x46>
 800cba8:	6811      	ldr	r1, [r2, #0]
 800cbaa:	1855      	adds	r5, r2, r1
 800cbac:	42a5      	cmp	r5, r4
 800cbae:	d10b      	bne.n	800cbc8 <_free_r+0x70>
 800cbb0:	6824      	ldr	r4, [r4, #0]
 800cbb2:	4421      	add	r1, r4
 800cbb4:	1854      	adds	r4, r2, r1
 800cbb6:	42a3      	cmp	r3, r4
 800cbb8:	6011      	str	r1, [r2, #0]
 800cbba:	d1e0      	bne.n	800cb7e <_free_r+0x26>
 800cbbc:	681c      	ldr	r4, [r3, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	6053      	str	r3, [r2, #4]
 800cbc2:	4421      	add	r1, r4
 800cbc4:	6011      	str	r1, [r2, #0]
 800cbc6:	e7da      	b.n	800cb7e <_free_r+0x26>
 800cbc8:	d902      	bls.n	800cbd0 <_free_r+0x78>
 800cbca:	230c      	movs	r3, #12
 800cbcc:	6003      	str	r3, [r0, #0]
 800cbce:	e7d6      	b.n	800cb7e <_free_r+0x26>
 800cbd0:	6825      	ldr	r5, [r4, #0]
 800cbd2:	1961      	adds	r1, r4, r5
 800cbd4:	428b      	cmp	r3, r1
 800cbd6:	bf04      	itt	eq
 800cbd8:	6819      	ldreq	r1, [r3, #0]
 800cbda:	685b      	ldreq	r3, [r3, #4]
 800cbdc:	6063      	str	r3, [r4, #4]
 800cbde:	bf04      	itt	eq
 800cbe0:	1949      	addeq	r1, r1, r5
 800cbe2:	6021      	streq	r1, [r4, #0]
 800cbe4:	6054      	str	r4, [r2, #4]
 800cbe6:	e7ca      	b.n	800cb7e <_free_r+0x26>
 800cbe8:	b003      	add	sp, #12
 800cbea:	bd30      	pop	{r4, r5, pc}
 800cbec:	20000fbc 	.word	0x20000fbc

0800cbf0 <sbrk_aligned>:
 800cbf0:	b570      	push	{r4, r5, r6, lr}
 800cbf2:	4e0e      	ldr	r6, [pc, #56]	; (800cc2c <sbrk_aligned+0x3c>)
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	6831      	ldr	r1, [r6, #0]
 800cbf8:	4605      	mov	r5, r0
 800cbfa:	b911      	cbnz	r1, 800cc02 <sbrk_aligned+0x12>
 800cbfc:	f000 f9e8 	bl	800cfd0 <_sbrk_r>
 800cc00:	6030      	str	r0, [r6, #0]
 800cc02:	4621      	mov	r1, r4
 800cc04:	4628      	mov	r0, r5
 800cc06:	f000 f9e3 	bl	800cfd0 <_sbrk_r>
 800cc0a:	1c43      	adds	r3, r0, #1
 800cc0c:	d00a      	beq.n	800cc24 <sbrk_aligned+0x34>
 800cc0e:	1cc4      	adds	r4, r0, #3
 800cc10:	f024 0403 	bic.w	r4, r4, #3
 800cc14:	42a0      	cmp	r0, r4
 800cc16:	d007      	beq.n	800cc28 <sbrk_aligned+0x38>
 800cc18:	1a21      	subs	r1, r4, r0
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	f000 f9d8 	bl	800cfd0 <_sbrk_r>
 800cc20:	3001      	adds	r0, #1
 800cc22:	d101      	bne.n	800cc28 <sbrk_aligned+0x38>
 800cc24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cc28:	4620      	mov	r0, r4
 800cc2a:	bd70      	pop	{r4, r5, r6, pc}
 800cc2c:	20000fc0 	.word	0x20000fc0

0800cc30 <_malloc_r>:
 800cc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc34:	1ccd      	adds	r5, r1, #3
 800cc36:	f025 0503 	bic.w	r5, r5, #3
 800cc3a:	3508      	adds	r5, #8
 800cc3c:	2d0c      	cmp	r5, #12
 800cc3e:	bf38      	it	cc
 800cc40:	250c      	movcc	r5, #12
 800cc42:	2d00      	cmp	r5, #0
 800cc44:	4607      	mov	r7, r0
 800cc46:	db01      	blt.n	800cc4c <_malloc_r+0x1c>
 800cc48:	42a9      	cmp	r1, r5
 800cc4a:	d905      	bls.n	800cc58 <_malloc_r+0x28>
 800cc4c:	230c      	movs	r3, #12
 800cc4e:	603b      	str	r3, [r7, #0]
 800cc50:	2600      	movs	r6, #0
 800cc52:	4630      	mov	r0, r6
 800cc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc58:	4e2e      	ldr	r6, [pc, #184]	; (800cd14 <_malloc_r+0xe4>)
 800cc5a:	f000 fa25 	bl	800d0a8 <__malloc_lock>
 800cc5e:	6833      	ldr	r3, [r6, #0]
 800cc60:	461c      	mov	r4, r3
 800cc62:	bb34      	cbnz	r4, 800ccb2 <_malloc_r+0x82>
 800cc64:	4629      	mov	r1, r5
 800cc66:	4638      	mov	r0, r7
 800cc68:	f7ff ffc2 	bl	800cbf0 <sbrk_aligned>
 800cc6c:	1c43      	adds	r3, r0, #1
 800cc6e:	4604      	mov	r4, r0
 800cc70:	d14d      	bne.n	800cd0e <_malloc_r+0xde>
 800cc72:	6834      	ldr	r4, [r6, #0]
 800cc74:	4626      	mov	r6, r4
 800cc76:	2e00      	cmp	r6, #0
 800cc78:	d140      	bne.n	800ccfc <_malloc_r+0xcc>
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	4631      	mov	r1, r6
 800cc7e:	4638      	mov	r0, r7
 800cc80:	eb04 0803 	add.w	r8, r4, r3
 800cc84:	f000 f9a4 	bl	800cfd0 <_sbrk_r>
 800cc88:	4580      	cmp	r8, r0
 800cc8a:	d13a      	bne.n	800cd02 <_malloc_r+0xd2>
 800cc8c:	6821      	ldr	r1, [r4, #0]
 800cc8e:	3503      	adds	r5, #3
 800cc90:	1a6d      	subs	r5, r5, r1
 800cc92:	f025 0503 	bic.w	r5, r5, #3
 800cc96:	3508      	adds	r5, #8
 800cc98:	2d0c      	cmp	r5, #12
 800cc9a:	bf38      	it	cc
 800cc9c:	250c      	movcc	r5, #12
 800cc9e:	4629      	mov	r1, r5
 800cca0:	4638      	mov	r0, r7
 800cca2:	f7ff ffa5 	bl	800cbf0 <sbrk_aligned>
 800cca6:	3001      	adds	r0, #1
 800cca8:	d02b      	beq.n	800cd02 <_malloc_r+0xd2>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	442b      	add	r3, r5
 800ccae:	6023      	str	r3, [r4, #0]
 800ccb0:	e00e      	b.n	800ccd0 <_malloc_r+0xa0>
 800ccb2:	6822      	ldr	r2, [r4, #0]
 800ccb4:	1b52      	subs	r2, r2, r5
 800ccb6:	d41e      	bmi.n	800ccf6 <_malloc_r+0xc6>
 800ccb8:	2a0b      	cmp	r2, #11
 800ccba:	d916      	bls.n	800ccea <_malloc_r+0xba>
 800ccbc:	1961      	adds	r1, r4, r5
 800ccbe:	42a3      	cmp	r3, r4
 800ccc0:	6025      	str	r5, [r4, #0]
 800ccc2:	bf18      	it	ne
 800ccc4:	6059      	strne	r1, [r3, #4]
 800ccc6:	6863      	ldr	r3, [r4, #4]
 800ccc8:	bf08      	it	eq
 800ccca:	6031      	streq	r1, [r6, #0]
 800cccc:	5162      	str	r2, [r4, r5]
 800ccce:	604b      	str	r3, [r1, #4]
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	f104 060b 	add.w	r6, r4, #11
 800ccd6:	f000 f9ed 	bl	800d0b4 <__malloc_unlock>
 800ccda:	f026 0607 	bic.w	r6, r6, #7
 800ccde:	1d23      	adds	r3, r4, #4
 800cce0:	1af2      	subs	r2, r6, r3
 800cce2:	d0b6      	beq.n	800cc52 <_malloc_r+0x22>
 800cce4:	1b9b      	subs	r3, r3, r6
 800cce6:	50a3      	str	r3, [r4, r2]
 800cce8:	e7b3      	b.n	800cc52 <_malloc_r+0x22>
 800ccea:	6862      	ldr	r2, [r4, #4]
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	bf0c      	ite	eq
 800ccf0:	6032      	streq	r2, [r6, #0]
 800ccf2:	605a      	strne	r2, [r3, #4]
 800ccf4:	e7ec      	b.n	800ccd0 <_malloc_r+0xa0>
 800ccf6:	4623      	mov	r3, r4
 800ccf8:	6864      	ldr	r4, [r4, #4]
 800ccfa:	e7b2      	b.n	800cc62 <_malloc_r+0x32>
 800ccfc:	4634      	mov	r4, r6
 800ccfe:	6876      	ldr	r6, [r6, #4]
 800cd00:	e7b9      	b.n	800cc76 <_malloc_r+0x46>
 800cd02:	230c      	movs	r3, #12
 800cd04:	603b      	str	r3, [r7, #0]
 800cd06:	4638      	mov	r0, r7
 800cd08:	f000 f9d4 	bl	800d0b4 <__malloc_unlock>
 800cd0c:	e7a1      	b.n	800cc52 <_malloc_r+0x22>
 800cd0e:	6025      	str	r5, [r4, #0]
 800cd10:	e7de      	b.n	800ccd0 <_malloc_r+0xa0>
 800cd12:	bf00      	nop
 800cd14:	20000fbc 	.word	0x20000fbc

0800cd18 <__ssputs_r>:
 800cd18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd1c:	688e      	ldr	r6, [r1, #8]
 800cd1e:	429e      	cmp	r6, r3
 800cd20:	4682      	mov	sl, r0
 800cd22:	460c      	mov	r4, r1
 800cd24:	4690      	mov	r8, r2
 800cd26:	461f      	mov	r7, r3
 800cd28:	d838      	bhi.n	800cd9c <__ssputs_r+0x84>
 800cd2a:	898a      	ldrh	r2, [r1, #12]
 800cd2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd30:	d032      	beq.n	800cd98 <__ssputs_r+0x80>
 800cd32:	6825      	ldr	r5, [r4, #0]
 800cd34:	6909      	ldr	r1, [r1, #16]
 800cd36:	eba5 0901 	sub.w	r9, r5, r1
 800cd3a:	6965      	ldr	r5, [r4, #20]
 800cd3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd44:	3301      	adds	r3, #1
 800cd46:	444b      	add	r3, r9
 800cd48:	106d      	asrs	r5, r5, #1
 800cd4a:	429d      	cmp	r5, r3
 800cd4c:	bf38      	it	cc
 800cd4e:	461d      	movcc	r5, r3
 800cd50:	0553      	lsls	r3, r2, #21
 800cd52:	d531      	bpl.n	800cdb8 <__ssputs_r+0xa0>
 800cd54:	4629      	mov	r1, r5
 800cd56:	f7ff ff6b 	bl	800cc30 <_malloc_r>
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	b950      	cbnz	r0, 800cd74 <__ssputs_r+0x5c>
 800cd5e:	230c      	movs	r3, #12
 800cd60:	f8ca 3000 	str.w	r3, [sl]
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd74:	6921      	ldr	r1, [r4, #16]
 800cd76:	464a      	mov	r2, r9
 800cd78:	f7fe f81a 	bl	800adb0 <memcpy>
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd86:	81a3      	strh	r3, [r4, #12]
 800cd88:	6126      	str	r6, [r4, #16]
 800cd8a:	6165      	str	r5, [r4, #20]
 800cd8c:	444e      	add	r6, r9
 800cd8e:	eba5 0509 	sub.w	r5, r5, r9
 800cd92:	6026      	str	r6, [r4, #0]
 800cd94:	60a5      	str	r5, [r4, #8]
 800cd96:	463e      	mov	r6, r7
 800cd98:	42be      	cmp	r6, r7
 800cd9a:	d900      	bls.n	800cd9e <__ssputs_r+0x86>
 800cd9c:	463e      	mov	r6, r7
 800cd9e:	6820      	ldr	r0, [r4, #0]
 800cda0:	4632      	mov	r2, r6
 800cda2:	4641      	mov	r1, r8
 800cda4:	f000 f966 	bl	800d074 <memmove>
 800cda8:	68a3      	ldr	r3, [r4, #8]
 800cdaa:	1b9b      	subs	r3, r3, r6
 800cdac:	60a3      	str	r3, [r4, #8]
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	4433      	add	r3, r6
 800cdb2:	6023      	str	r3, [r4, #0]
 800cdb4:	2000      	movs	r0, #0
 800cdb6:	e7db      	b.n	800cd70 <__ssputs_r+0x58>
 800cdb8:	462a      	mov	r2, r5
 800cdba:	f000 f981 	bl	800d0c0 <_realloc_r>
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	d1e1      	bne.n	800cd88 <__ssputs_r+0x70>
 800cdc4:	6921      	ldr	r1, [r4, #16]
 800cdc6:	4650      	mov	r0, sl
 800cdc8:	f7ff fec6 	bl	800cb58 <_free_r>
 800cdcc:	e7c7      	b.n	800cd5e <__ssputs_r+0x46>
	...

0800cdd0 <_svfiprintf_r>:
 800cdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd4:	4698      	mov	r8, r3
 800cdd6:	898b      	ldrh	r3, [r1, #12]
 800cdd8:	061b      	lsls	r3, r3, #24
 800cdda:	b09d      	sub	sp, #116	; 0x74
 800cddc:	4607      	mov	r7, r0
 800cdde:	460d      	mov	r5, r1
 800cde0:	4614      	mov	r4, r2
 800cde2:	d50e      	bpl.n	800ce02 <_svfiprintf_r+0x32>
 800cde4:	690b      	ldr	r3, [r1, #16]
 800cde6:	b963      	cbnz	r3, 800ce02 <_svfiprintf_r+0x32>
 800cde8:	2140      	movs	r1, #64	; 0x40
 800cdea:	f7ff ff21 	bl	800cc30 <_malloc_r>
 800cdee:	6028      	str	r0, [r5, #0]
 800cdf0:	6128      	str	r0, [r5, #16]
 800cdf2:	b920      	cbnz	r0, 800cdfe <_svfiprintf_r+0x2e>
 800cdf4:	230c      	movs	r3, #12
 800cdf6:	603b      	str	r3, [r7, #0]
 800cdf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdfc:	e0d1      	b.n	800cfa2 <_svfiprintf_r+0x1d2>
 800cdfe:	2340      	movs	r3, #64	; 0x40
 800ce00:	616b      	str	r3, [r5, #20]
 800ce02:	2300      	movs	r3, #0
 800ce04:	9309      	str	r3, [sp, #36]	; 0x24
 800ce06:	2320      	movs	r3, #32
 800ce08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce10:	2330      	movs	r3, #48	; 0x30
 800ce12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cfbc <_svfiprintf_r+0x1ec>
 800ce16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce1a:	f04f 0901 	mov.w	r9, #1
 800ce1e:	4623      	mov	r3, r4
 800ce20:	469a      	mov	sl, r3
 800ce22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce26:	b10a      	cbz	r2, 800ce2c <_svfiprintf_r+0x5c>
 800ce28:	2a25      	cmp	r2, #37	; 0x25
 800ce2a:	d1f9      	bne.n	800ce20 <_svfiprintf_r+0x50>
 800ce2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce30:	d00b      	beq.n	800ce4a <_svfiprintf_r+0x7a>
 800ce32:	465b      	mov	r3, fp
 800ce34:	4622      	mov	r2, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7ff ff6d 	bl	800cd18 <__ssputs_r>
 800ce3e:	3001      	adds	r0, #1
 800ce40:	f000 80aa 	beq.w	800cf98 <_svfiprintf_r+0x1c8>
 800ce44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce46:	445a      	add	r2, fp
 800ce48:	9209      	str	r2, [sp, #36]	; 0x24
 800ce4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 80a2 	beq.w	800cf98 <_svfiprintf_r+0x1c8>
 800ce54:	2300      	movs	r3, #0
 800ce56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce5e:	f10a 0a01 	add.w	sl, sl, #1
 800ce62:	9304      	str	r3, [sp, #16]
 800ce64:	9307      	str	r3, [sp, #28]
 800ce66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce6a:	931a      	str	r3, [sp, #104]	; 0x68
 800ce6c:	4654      	mov	r4, sl
 800ce6e:	2205      	movs	r2, #5
 800ce70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce74:	4851      	ldr	r0, [pc, #324]	; (800cfbc <_svfiprintf_r+0x1ec>)
 800ce76:	f7f3 f9b3 	bl	80001e0 <memchr>
 800ce7a:	9a04      	ldr	r2, [sp, #16]
 800ce7c:	b9d8      	cbnz	r0, 800ceb6 <_svfiprintf_r+0xe6>
 800ce7e:	06d0      	lsls	r0, r2, #27
 800ce80:	bf44      	itt	mi
 800ce82:	2320      	movmi	r3, #32
 800ce84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce88:	0711      	lsls	r1, r2, #28
 800ce8a:	bf44      	itt	mi
 800ce8c:	232b      	movmi	r3, #43	; 0x2b
 800ce8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce92:	f89a 3000 	ldrb.w	r3, [sl]
 800ce96:	2b2a      	cmp	r3, #42	; 0x2a
 800ce98:	d015      	beq.n	800cec6 <_svfiprintf_r+0xf6>
 800ce9a:	9a07      	ldr	r2, [sp, #28]
 800ce9c:	4654      	mov	r4, sl
 800ce9e:	2000      	movs	r0, #0
 800cea0:	f04f 0c0a 	mov.w	ip, #10
 800cea4:	4621      	mov	r1, r4
 800cea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceaa:	3b30      	subs	r3, #48	; 0x30
 800ceac:	2b09      	cmp	r3, #9
 800ceae:	d94e      	bls.n	800cf4e <_svfiprintf_r+0x17e>
 800ceb0:	b1b0      	cbz	r0, 800cee0 <_svfiprintf_r+0x110>
 800ceb2:	9207      	str	r2, [sp, #28]
 800ceb4:	e014      	b.n	800cee0 <_svfiprintf_r+0x110>
 800ceb6:	eba0 0308 	sub.w	r3, r0, r8
 800ceba:	fa09 f303 	lsl.w	r3, r9, r3
 800cebe:	4313      	orrs	r3, r2
 800cec0:	9304      	str	r3, [sp, #16]
 800cec2:	46a2      	mov	sl, r4
 800cec4:	e7d2      	b.n	800ce6c <_svfiprintf_r+0x9c>
 800cec6:	9b03      	ldr	r3, [sp, #12]
 800cec8:	1d19      	adds	r1, r3, #4
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	9103      	str	r1, [sp, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	bfbb      	ittet	lt
 800ced2:	425b      	neglt	r3, r3
 800ced4:	f042 0202 	orrlt.w	r2, r2, #2
 800ced8:	9307      	strge	r3, [sp, #28]
 800ceda:	9307      	strlt	r3, [sp, #28]
 800cedc:	bfb8      	it	lt
 800cede:	9204      	strlt	r2, [sp, #16]
 800cee0:	7823      	ldrb	r3, [r4, #0]
 800cee2:	2b2e      	cmp	r3, #46	; 0x2e
 800cee4:	d10c      	bne.n	800cf00 <_svfiprintf_r+0x130>
 800cee6:	7863      	ldrb	r3, [r4, #1]
 800cee8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceea:	d135      	bne.n	800cf58 <_svfiprintf_r+0x188>
 800ceec:	9b03      	ldr	r3, [sp, #12]
 800ceee:	1d1a      	adds	r2, r3, #4
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	9203      	str	r2, [sp, #12]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	bfb8      	it	lt
 800cef8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cefc:	3402      	adds	r4, #2
 800cefe:	9305      	str	r3, [sp, #20]
 800cf00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cfcc <_svfiprintf_r+0x1fc>
 800cf04:	7821      	ldrb	r1, [r4, #0]
 800cf06:	2203      	movs	r2, #3
 800cf08:	4650      	mov	r0, sl
 800cf0a:	f7f3 f969 	bl	80001e0 <memchr>
 800cf0e:	b140      	cbz	r0, 800cf22 <_svfiprintf_r+0x152>
 800cf10:	2340      	movs	r3, #64	; 0x40
 800cf12:	eba0 000a 	sub.w	r0, r0, sl
 800cf16:	fa03 f000 	lsl.w	r0, r3, r0
 800cf1a:	9b04      	ldr	r3, [sp, #16]
 800cf1c:	4303      	orrs	r3, r0
 800cf1e:	3401      	adds	r4, #1
 800cf20:	9304      	str	r3, [sp, #16]
 800cf22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf26:	4826      	ldr	r0, [pc, #152]	; (800cfc0 <_svfiprintf_r+0x1f0>)
 800cf28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf2c:	2206      	movs	r2, #6
 800cf2e:	f7f3 f957 	bl	80001e0 <memchr>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d038      	beq.n	800cfa8 <_svfiprintf_r+0x1d8>
 800cf36:	4b23      	ldr	r3, [pc, #140]	; (800cfc4 <_svfiprintf_r+0x1f4>)
 800cf38:	bb1b      	cbnz	r3, 800cf82 <_svfiprintf_r+0x1b2>
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	3307      	adds	r3, #7
 800cf3e:	f023 0307 	bic.w	r3, r3, #7
 800cf42:	3308      	adds	r3, #8
 800cf44:	9303      	str	r3, [sp, #12]
 800cf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf48:	4433      	add	r3, r6
 800cf4a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf4c:	e767      	b.n	800ce1e <_svfiprintf_r+0x4e>
 800cf4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf52:	460c      	mov	r4, r1
 800cf54:	2001      	movs	r0, #1
 800cf56:	e7a5      	b.n	800cea4 <_svfiprintf_r+0xd4>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	3401      	adds	r4, #1
 800cf5c:	9305      	str	r3, [sp, #20]
 800cf5e:	4619      	mov	r1, r3
 800cf60:	f04f 0c0a 	mov.w	ip, #10
 800cf64:	4620      	mov	r0, r4
 800cf66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf6a:	3a30      	subs	r2, #48	; 0x30
 800cf6c:	2a09      	cmp	r2, #9
 800cf6e:	d903      	bls.n	800cf78 <_svfiprintf_r+0x1a8>
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d0c5      	beq.n	800cf00 <_svfiprintf_r+0x130>
 800cf74:	9105      	str	r1, [sp, #20]
 800cf76:	e7c3      	b.n	800cf00 <_svfiprintf_r+0x130>
 800cf78:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf7c:	4604      	mov	r4, r0
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e7f0      	b.n	800cf64 <_svfiprintf_r+0x194>
 800cf82:	ab03      	add	r3, sp, #12
 800cf84:	9300      	str	r3, [sp, #0]
 800cf86:	462a      	mov	r2, r5
 800cf88:	4b0f      	ldr	r3, [pc, #60]	; (800cfc8 <_svfiprintf_r+0x1f8>)
 800cf8a:	a904      	add	r1, sp, #16
 800cf8c:	4638      	mov	r0, r7
 800cf8e:	f7fd ffc5 	bl	800af1c <_printf_float>
 800cf92:	1c42      	adds	r2, r0, #1
 800cf94:	4606      	mov	r6, r0
 800cf96:	d1d6      	bne.n	800cf46 <_svfiprintf_r+0x176>
 800cf98:	89ab      	ldrh	r3, [r5, #12]
 800cf9a:	065b      	lsls	r3, r3, #25
 800cf9c:	f53f af2c 	bmi.w	800cdf8 <_svfiprintf_r+0x28>
 800cfa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfa2:	b01d      	add	sp, #116	; 0x74
 800cfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa8:	ab03      	add	r3, sp, #12
 800cfaa:	9300      	str	r3, [sp, #0]
 800cfac:	462a      	mov	r2, r5
 800cfae:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <_svfiprintf_r+0x1f8>)
 800cfb0:	a904      	add	r1, sp, #16
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	f7fe fa56 	bl	800b464 <_printf_i>
 800cfb8:	e7eb      	b.n	800cf92 <_svfiprintf_r+0x1c2>
 800cfba:	bf00      	nop
 800cfbc:	0801078c 	.word	0x0801078c
 800cfc0:	08010796 	.word	0x08010796
 800cfc4:	0800af1d 	.word	0x0800af1d
 800cfc8:	0800cd19 	.word	0x0800cd19
 800cfcc:	08010792 	.word	0x08010792

0800cfd0 <_sbrk_r>:
 800cfd0:	b538      	push	{r3, r4, r5, lr}
 800cfd2:	4d06      	ldr	r5, [pc, #24]	; (800cfec <_sbrk_r+0x1c>)
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	4608      	mov	r0, r1
 800cfda:	602b      	str	r3, [r5, #0]
 800cfdc:	f7f9 fca2 	bl	8006924 <_sbrk>
 800cfe0:	1c43      	adds	r3, r0, #1
 800cfe2:	d102      	bne.n	800cfea <_sbrk_r+0x1a>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	b103      	cbz	r3, 800cfea <_sbrk_r+0x1a>
 800cfe8:	6023      	str	r3, [r4, #0]
 800cfea:	bd38      	pop	{r3, r4, r5, pc}
 800cfec:	20000fc4 	.word	0x20000fc4

0800cff0 <__assert_func>:
 800cff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cff2:	4614      	mov	r4, r2
 800cff4:	461a      	mov	r2, r3
 800cff6:	4b09      	ldr	r3, [pc, #36]	; (800d01c <__assert_func+0x2c>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4605      	mov	r5, r0
 800cffc:	68d8      	ldr	r0, [r3, #12]
 800cffe:	b14c      	cbz	r4, 800d014 <__assert_func+0x24>
 800d000:	4b07      	ldr	r3, [pc, #28]	; (800d020 <__assert_func+0x30>)
 800d002:	9100      	str	r1, [sp, #0]
 800d004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d008:	4906      	ldr	r1, [pc, #24]	; (800d024 <__assert_func+0x34>)
 800d00a:	462b      	mov	r3, r5
 800d00c:	f000 f80e 	bl	800d02c <fiprintf>
 800d010:	f000 faac 	bl	800d56c <abort>
 800d014:	4b04      	ldr	r3, [pc, #16]	; (800d028 <__assert_func+0x38>)
 800d016:	461c      	mov	r4, r3
 800d018:	e7f3      	b.n	800d002 <__assert_func+0x12>
 800d01a:	bf00      	nop
 800d01c:	20000060 	.word	0x20000060
 800d020:	0801079d 	.word	0x0801079d
 800d024:	080107aa 	.word	0x080107aa
 800d028:	080107d8 	.word	0x080107d8

0800d02c <fiprintf>:
 800d02c:	b40e      	push	{r1, r2, r3}
 800d02e:	b503      	push	{r0, r1, lr}
 800d030:	4601      	mov	r1, r0
 800d032:	ab03      	add	r3, sp, #12
 800d034:	4805      	ldr	r0, [pc, #20]	; (800d04c <fiprintf+0x20>)
 800d036:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03a:	6800      	ldr	r0, [r0, #0]
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	f000 f897 	bl	800d170 <_vfiprintf_r>
 800d042:	b002      	add	sp, #8
 800d044:	f85d eb04 	ldr.w	lr, [sp], #4
 800d048:	b003      	add	sp, #12
 800d04a:	4770      	bx	lr
 800d04c:	20000060 	.word	0x20000060

0800d050 <__ascii_mbtowc>:
 800d050:	b082      	sub	sp, #8
 800d052:	b901      	cbnz	r1, 800d056 <__ascii_mbtowc+0x6>
 800d054:	a901      	add	r1, sp, #4
 800d056:	b142      	cbz	r2, 800d06a <__ascii_mbtowc+0x1a>
 800d058:	b14b      	cbz	r3, 800d06e <__ascii_mbtowc+0x1e>
 800d05a:	7813      	ldrb	r3, [r2, #0]
 800d05c:	600b      	str	r3, [r1, #0]
 800d05e:	7812      	ldrb	r2, [r2, #0]
 800d060:	1e10      	subs	r0, r2, #0
 800d062:	bf18      	it	ne
 800d064:	2001      	movne	r0, #1
 800d066:	b002      	add	sp, #8
 800d068:	4770      	bx	lr
 800d06a:	4610      	mov	r0, r2
 800d06c:	e7fb      	b.n	800d066 <__ascii_mbtowc+0x16>
 800d06e:	f06f 0001 	mvn.w	r0, #1
 800d072:	e7f8      	b.n	800d066 <__ascii_mbtowc+0x16>

0800d074 <memmove>:
 800d074:	4288      	cmp	r0, r1
 800d076:	b510      	push	{r4, lr}
 800d078:	eb01 0402 	add.w	r4, r1, r2
 800d07c:	d902      	bls.n	800d084 <memmove+0x10>
 800d07e:	4284      	cmp	r4, r0
 800d080:	4623      	mov	r3, r4
 800d082:	d807      	bhi.n	800d094 <memmove+0x20>
 800d084:	1e43      	subs	r3, r0, #1
 800d086:	42a1      	cmp	r1, r4
 800d088:	d008      	beq.n	800d09c <memmove+0x28>
 800d08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d092:	e7f8      	b.n	800d086 <memmove+0x12>
 800d094:	4402      	add	r2, r0
 800d096:	4601      	mov	r1, r0
 800d098:	428a      	cmp	r2, r1
 800d09a:	d100      	bne.n	800d09e <memmove+0x2a>
 800d09c:	bd10      	pop	{r4, pc}
 800d09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0a6:	e7f7      	b.n	800d098 <memmove+0x24>

0800d0a8 <__malloc_lock>:
 800d0a8:	4801      	ldr	r0, [pc, #4]	; (800d0b0 <__malloc_lock+0x8>)
 800d0aa:	f000 bc1f 	b.w	800d8ec <__retarget_lock_acquire_recursive>
 800d0ae:	bf00      	nop
 800d0b0:	20000fc8 	.word	0x20000fc8

0800d0b4 <__malloc_unlock>:
 800d0b4:	4801      	ldr	r0, [pc, #4]	; (800d0bc <__malloc_unlock+0x8>)
 800d0b6:	f000 bc1a 	b.w	800d8ee <__retarget_lock_release_recursive>
 800d0ba:	bf00      	nop
 800d0bc:	20000fc8 	.word	0x20000fc8

0800d0c0 <_realloc_r>:
 800d0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c4:	4680      	mov	r8, r0
 800d0c6:	4614      	mov	r4, r2
 800d0c8:	460e      	mov	r6, r1
 800d0ca:	b921      	cbnz	r1, 800d0d6 <_realloc_r+0x16>
 800d0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	f7ff bdad 	b.w	800cc30 <_malloc_r>
 800d0d6:	b92a      	cbnz	r2, 800d0e4 <_realloc_r+0x24>
 800d0d8:	f7ff fd3e 	bl	800cb58 <_free_r>
 800d0dc:	4625      	mov	r5, r4
 800d0de:	4628      	mov	r0, r5
 800d0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e4:	f000 fc6a 	bl	800d9bc <_malloc_usable_size_r>
 800d0e8:	4284      	cmp	r4, r0
 800d0ea:	4607      	mov	r7, r0
 800d0ec:	d802      	bhi.n	800d0f4 <_realloc_r+0x34>
 800d0ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0f2:	d812      	bhi.n	800d11a <_realloc_r+0x5a>
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	4640      	mov	r0, r8
 800d0f8:	f7ff fd9a 	bl	800cc30 <_malloc_r>
 800d0fc:	4605      	mov	r5, r0
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d0ed      	beq.n	800d0de <_realloc_r+0x1e>
 800d102:	42bc      	cmp	r4, r7
 800d104:	4622      	mov	r2, r4
 800d106:	4631      	mov	r1, r6
 800d108:	bf28      	it	cs
 800d10a:	463a      	movcs	r2, r7
 800d10c:	f7fd fe50 	bl	800adb0 <memcpy>
 800d110:	4631      	mov	r1, r6
 800d112:	4640      	mov	r0, r8
 800d114:	f7ff fd20 	bl	800cb58 <_free_r>
 800d118:	e7e1      	b.n	800d0de <_realloc_r+0x1e>
 800d11a:	4635      	mov	r5, r6
 800d11c:	e7df      	b.n	800d0de <_realloc_r+0x1e>

0800d11e <__sfputc_r>:
 800d11e:	6893      	ldr	r3, [r2, #8]
 800d120:	3b01      	subs	r3, #1
 800d122:	2b00      	cmp	r3, #0
 800d124:	b410      	push	{r4}
 800d126:	6093      	str	r3, [r2, #8]
 800d128:	da08      	bge.n	800d13c <__sfputc_r+0x1e>
 800d12a:	6994      	ldr	r4, [r2, #24]
 800d12c:	42a3      	cmp	r3, r4
 800d12e:	db01      	blt.n	800d134 <__sfputc_r+0x16>
 800d130:	290a      	cmp	r1, #10
 800d132:	d103      	bne.n	800d13c <__sfputc_r+0x1e>
 800d134:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d138:	f000 b94a 	b.w	800d3d0 <__swbuf_r>
 800d13c:	6813      	ldr	r3, [r2, #0]
 800d13e:	1c58      	adds	r0, r3, #1
 800d140:	6010      	str	r0, [r2, #0]
 800d142:	7019      	strb	r1, [r3, #0]
 800d144:	4608      	mov	r0, r1
 800d146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <__sfputs_r>:
 800d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14e:	4606      	mov	r6, r0
 800d150:	460f      	mov	r7, r1
 800d152:	4614      	mov	r4, r2
 800d154:	18d5      	adds	r5, r2, r3
 800d156:	42ac      	cmp	r4, r5
 800d158:	d101      	bne.n	800d15e <__sfputs_r+0x12>
 800d15a:	2000      	movs	r0, #0
 800d15c:	e007      	b.n	800d16e <__sfputs_r+0x22>
 800d15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d162:	463a      	mov	r2, r7
 800d164:	4630      	mov	r0, r6
 800d166:	f7ff ffda 	bl	800d11e <__sfputc_r>
 800d16a:	1c43      	adds	r3, r0, #1
 800d16c:	d1f3      	bne.n	800d156 <__sfputs_r+0xa>
 800d16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d170 <_vfiprintf_r>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	460d      	mov	r5, r1
 800d176:	b09d      	sub	sp, #116	; 0x74
 800d178:	4614      	mov	r4, r2
 800d17a:	4698      	mov	r8, r3
 800d17c:	4606      	mov	r6, r0
 800d17e:	b118      	cbz	r0, 800d188 <_vfiprintf_r+0x18>
 800d180:	6983      	ldr	r3, [r0, #24]
 800d182:	b90b      	cbnz	r3, 800d188 <_vfiprintf_r+0x18>
 800d184:	f000 fb14 	bl	800d7b0 <__sinit>
 800d188:	4b89      	ldr	r3, [pc, #548]	; (800d3b0 <_vfiprintf_r+0x240>)
 800d18a:	429d      	cmp	r5, r3
 800d18c:	d11b      	bne.n	800d1c6 <_vfiprintf_r+0x56>
 800d18e:	6875      	ldr	r5, [r6, #4]
 800d190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d192:	07d9      	lsls	r1, r3, #31
 800d194:	d405      	bmi.n	800d1a2 <_vfiprintf_r+0x32>
 800d196:	89ab      	ldrh	r3, [r5, #12]
 800d198:	059a      	lsls	r2, r3, #22
 800d19a:	d402      	bmi.n	800d1a2 <_vfiprintf_r+0x32>
 800d19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d19e:	f000 fba5 	bl	800d8ec <__retarget_lock_acquire_recursive>
 800d1a2:	89ab      	ldrh	r3, [r5, #12]
 800d1a4:	071b      	lsls	r3, r3, #28
 800d1a6:	d501      	bpl.n	800d1ac <_vfiprintf_r+0x3c>
 800d1a8:	692b      	ldr	r3, [r5, #16]
 800d1aa:	b9eb      	cbnz	r3, 800d1e8 <_vfiprintf_r+0x78>
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f000 f96e 	bl	800d490 <__swsetup_r>
 800d1b4:	b1c0      	cbz	r0, 800d1e8 <_vfiprintf_r+0x78>
 800d1b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1b8:	07dc      	lsls	r4, r3, #31
 800d1ba:	d50e      	bpl.n	800d1da <_vfiprintf_r+0x6a>
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1c0:	b01d      	add	sp, #116	; 0x74
 800d1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1c6:	4b7b      	ldr	r3, [pc, #492]	; (800d3b4 <_vfiprintf_r+0x244>)
 800d1c8:	429d      	cmp	r5, r3
 800d1ca:	d101      	bne.n	800d1d0 <_vfiprintf_r+0x60>
 800d1cc:	68b5      	ldr	r5, [r6, #8]
 800d1ce:	e7df      	b.n	800d190 <_vfiprintf_r+0x20>
 800d1d0:	4b79      	ldr	r3, [pc, #484]	; (800d3b8 <_vfiprintf_r+0x248>)
 800d1d2:	429d      	cmp	r5, r3
 800d1d4:	bf08      	it	eq
 800d1d6:	68f5      	ldreq	r5, [r6, #12]
 800d1d8:	e7da      	b.n	800d190 <_vfiprintf_r+0x20>
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	0598      	lsls	r0, r3, #22
 800d1de:	d4ed      	bmi.n	800d1bc <_vfiprintf_r+0x4c>
 800d1e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e2:	f000 fb84 	bl	800d8ee <__retarget_lock_release_recursive>
 800d1e6:	e7e9      	b.n	800d1bc <_vfiprintf_r+0x4c>
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1f6:	2330      	movs	r3, #48	; 0x30
 800d1f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3bc <_vfiprintf_r+0x24c>
 800d1fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d200:	f04f 0901 	mov.w	r9, #1
 800d204:	4623      	mov	r3, r4
 800d206:	469a      	mov	sl, r3
 800d208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20c:	b10a      	cbz	r2, 800d212 <_vfiprintf_r+0xa2>
 800d20e:	2a25      	cmp	r2, #37	; 0x25
 800d210:	d1f9      	bne.n	800d206 <_vfiprintf_r+0x96>
 800d212:	ebba 0b04 	subs.w	fp, sl, r4
 800d216:	d00b      	beq.n	800d230 <_vfiprintf_r+0xc0>
 800d218:	465b      	mov	r3, fp
 800d21a:	4622      	mov	r2, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	4630      	mov	r0, r6
 800d220:	f7ff ff94 	bl	800d14c <__sfputs_r>
 800d224:	3001      	adds	r0, #1
 800d226:	f000 80aa 	beq.w	800d37e <_vfiprintf_r+0x20e>
 800d22a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d22c:	445a      	add	r2, fp
 800d22e:	9209      	str	r2, [sp, #36]	; 0x24
 800d230:	f89a 3000 	ldrb.w	r3, [sl]
 800d234:	2b00      	cmp	r3, #0
 800d236:	f000 80a2 	beq.w	800d37e <_vfiprintf_r+0x20e>
 800d23a:	2300      	movs	r3, #0
 800d23c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d244:	f10a 0a01 	add.w	sl, sl, #1
 800d248:	9304      	str	r3, [sp, #16]
 800d24a:	9307      	str	r3, [sp, #28]
 800d24c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d250:	931a      	str	r3, [sp, #104]	; 0x68
 800d252:	4654      	mov	r4, sl
 800d254:	2205      	movs	r2, #5
 800d256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25a:	4858      	ldr	r0, [pc, #352]	; (800d3bc <_vfiprintf_r+0x24c>)
 800d25c:	f7f2 ffc0 	bl	80001e0 <memchr>
 800d260:	9a04      	ldr	r2, [sp, #16]
 800d262:	b9d8      	cbnz	r0, 800d29c <_vfiprintf_r+0x12c>
 800d264:	06d1      	lsls	r1, r2, #27
 800d266:	bf44      	itt	mi
 800d268:	2320      	movmi	r3, #32
 800d26a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d26e:	0713      	lsls	r3, r2, #28
 800d270:	bf44      	itt	mi
 800d272:	232b      	movmi	r3, #43	; 0x2b
 800d274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d278:	f89a 3000 	ldrb.w	r3, [sl]
 800d27c:	2b2a      	cmp	r3, #42	; 0x2a
 800d27e:	d015      	beq.n	800d2ac <_vfiprintf_r+0x13c>
 800d280:	9a07      	ldr	r2, [sp, #28]
 800d282:	4654      	mov	r4, sl
 800d284:	2000      	movs	r0, #0
 800d286:	f04f 0c0a 	mov.w	ip, #10
 800d28a:	4621      	mov	r1, r4
 800d28c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d290:	3b30      	subs	r3, #48	; 0x30
 800d292:	2b09      	cmp	r3, #9
 800d294:	d94e      	bls.n	800d334 <_vfiprintf_r+0x1c4>
 800d296:	b1b0      	cbz	r0, 800d2c6 <_vfiprintf_r+0x156>
 800d298:	9207      	str	r2, [sp, #28]
 800d29a:	e014      	b.n	800d2c6 <_vfiprintf_r+0x156>
 800d29c:	eba0 0308 	sub.w	r3, r0, r8
 800d2a0:	fa09 f303 	lsl.w	r3, r9, r3
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	46a2      	mov	sl, r4
 800d2aa:	e7d2      	b.n	800d252 <_vfiprintf_r+0xe2>
 800d2ac:	9b03      	ldr	r3, [sp, #12]
 800d2ae:	1d19      	adds	r1, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	9103      	str	r1, [sp, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	bfbb      	ittet	lt
 800d2b8:	425b      	neglt	r3, r3
 800d2ba:	f042 0202 	orrlt.w	r2, r2, #2
 800d2be:	9307      	strge	r3, [sp, #28]
 800d2c0:	9307      	strlt	r3, [sp, #28]
 800d2c2:	bfb8      	it	lt
 800d2c4:	9204      	strlt	r2, [sp, #16]
 800d2c6:	7823      	ldrb	r3, [r4, #0]
 800d2c8:	2b2e      	cmp	r3, #46	; 0x2e
 800d2ca:	d10c      	bne.n	800d2e6 <_vfiprintf_r+0x176>
 800d2cc:	7863      	ldrb	r3, [r4, #1]
 800d2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d2d0:	d135      	bne.n	800d33e <_vfiprintf_r+0x1ce>
 800d2d2:	9b03      	ldr	r3, [sp, #12]
 800d2d4:	1d1a      	adds	r2, r3, #4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	9203      	str	r2, [sp, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	bfb8      	it	lt
 800d2de:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d2e2:	3402      	adds	r4, #2
 800d2e4:	9305      	str	r3, [sp, #20]
 800d2e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3cc <_vfiprintf_r+0x25c>
 800d2ea:	7821      	ldrb	r1, [r4, #0]
 800d2ec:	2203      	movs	r2, #3
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	f7f2 ff76 	bl	80001e0 <memchr>
 800d2f4:	b140      	cbz	r0, 800d308 <_vfiprintf_r+0x198>
 800d2f6:	2340      	movs	r3, #64	; 0x40
 800d2f8:	eba0 000a 	sub.w	r0, r0, sl
 800d2fc:	fa03 f000 	lsl.w	r0, r3, r0
 800d300:	9b04      	ldr	r3, [sp, #16]
 800d302:	4303      	orrs	r3, r0
 800d304:	3401      	adds	r4, #1
 800d306:	9304      	str	r3, [sp, #16]
 800d308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30c:	482c      	ldr	r0, [pc, #176]	; (800d3c0 <_vfiprintf_r+0x250>)
 800d30e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d312:	2206      	movs	r2, #6
 800d314:	f7f2 ff64 	bl	80001e0 <memchr>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d03f      	beq.n	800d39c <_vfiprintf_r+0x22c>
 800d31c:	4b29      	ldr	r3, [pc, #164]	; (800d3c4 <_vfiprintf_r+0x254>)
 800d31e:	bb1b      	cbnz	r3, 800d368 <_vfiprintf_r+0x1f8>
 800d320:	9b03      	ldr	r3, [sp, #12]
 800d322:	3307      	adds	r3, #7
 800d324:	f023 0307 	bic.w	r3, r3, #7
 800d328:	3308      	adds	r3, #8
 800d32a:	9303      	str	r3, [sp, #12]
 800d32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d32e:	443b      	add	r3, r7
 800d330:	9309      	str	r3, [sp, #36]	; 0x24
 800d332:	e767      	b.n	800d204 <_vfiprintf_r+0x94>
 800d334:	fb0c 3202 	mla	r2, ip, r2, r3
 800d338:	460c      	mov	r4, r1
 800d33a:	2001      	movs	r0, #1
 800d33c:	e7a5      	b.n	800d28a <_vfiprintf_r+0x11a>
 800d33e:	2300      	movs	r3, #0
 800d340:	3401      	adds	r4, #1
 800d342:	9305      	str	r3, [sp, #20]
 800d344:	4619      	mov	r1, r3
 800d346:	f04f 0c0a 	mov.w	ip, #10
 800d34a:	4620      	mov	r0, r4
 800d34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d350:	3a30      	subs	r2, #48	; 0x30
 800d352:	2a09      	cmp	r2, #9
 800d354:	d903      	bls.n	800d35e <_vfiprintf_r+0x1ee>
 800d356:	2b00      	cmp	r3, #0
 800d358:	d0c5      	beq.n	800d2e6 <_vfiprintf_r+0x176>
 800d35a:	9105      	str	r1, [sp, #20]
 800d35c:	e7c3      	b.n	800d2e6 <_vfiprintf_r+0x176>
 800d35e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d362:	4604      	mov	r4, r0
 800d364:	2301      	movs	r3, #1
 800d366:	e7f0      	b.n	800d34a <_vfiprintf_r+0x1da>
 800d368:	ab03      	add	r3, sp, #12
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	462a      	mov	r2, r5
 800d36e:	4b16      	ldr	r3, [pc, #88]	; (800d3c8 <_vfiprintf_r+0x258>)
 800d370:	a904      	add	r1, sp, #16
 800d372:	4630      	mov	r0, r6
 800d374:	f7fd fdd2 	bl	800af1c <_printf_float>
 800d378:	4607      	mov	r7, r0
 800d37a:	1c78      	adds	r0, r7, #1
 800d37c:	d1d6      	bne.n	800d32c <_vfiprintf_r+0x1bc>
 800d37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d380:	07d9      	lsls	r1, r3, #31
 800d382:	d405      	bmi.n	800d390 <_vfiprintf_r+0x220>
 800d384:	89ab      	ldrh	r3, [r5, #12]
 800d386:	059a      	lsls	r2, r3, #22
 800d388:	d402      	bmi.n	800d390 <_vfiprintf_r+0x220>
 800d38a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d38c:	f000 faaf 	bl	800d8ee <__retarget_lock_release_recursive>
 800d390:	89ab      	ldrh	r3, [r5, #12]
 800d392:	065b      	lsls	r3, r3, #25
 800d394:	f53f af12 	bmi.w	800d1bc <_vfiprintf_r+0x4c>
 800d398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d39a:	e711      	b.n	800d1c0 <_vfiprintf_r+0x50>
 800d39c:	ab03      	add	r3, sp, #12
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	4b09      	ldr	r3, [pc, #36]	; (800d3c8 <_vfiprintf_r+0x258>)
 800d3a4:	a904      	add	r1, sp, #16
 800d3a6:	4630      	mov	r0, r6
 800d3a8:	f7fe f85c 	bl	800b464 <_printf_i>
 800d3ac:	e7e4      	b.n	800d378 <_vfiprintf_r+0x208>
 800d3ae:	bf00      	nop
 800d3b0:	08010904 	.word	0x08010904
 800d3b4:	08010924 	.word	0x08010924
 800d3b8:	080108e4 	.word	0x080108e4
 800d3bc:	0801078c 	.word	0x0801078c
 800d3c0:	08010796 	.word	0x08010796
 800d3c4:	0800af1d 	.word	0x0800af1d
 800d3c8:	0800d14d 	.word	0x0800d14d
 800d3cc:	08010792 	.word	0x08010792

0800d3d0 <__swbuf_r>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	460e      	mov	r6, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	b118      	cbz	r0, 800d3e2 <__swbuf_r+0x12>
 800d3da:	6983      	ldr	r3, [r0, #24]
 800d3dc:	b90b      	cbnz	r3, 800d3e2 <__swbuf_r+0x12>
 800d3de:	f000 f9e7 	bl	800d7b0 <__sinit>
 800d3e2:	4b21      	ldr	r3, [pc, #132]	; (800d468 <__swbuf_r+0x98>)
 800d3e4:	429c      	cmp	r4, r3
 800d3e6:	d12b      	bne.n	800d440 <__swbuf_r+0x70>
 800d3e8:	686c      	ldr	r4, [r5, #4]
 800d3ea:	69a3      	ldr	r3, [r4, #24]
 800d3ec:	60a3      	str	r3, [r4, #8]
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	071a      	lsls	r2, r3, #28
 800d3f2:	d52f      	bpl.n	800d454 <__swbuf_r+0x84>
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	b36b      	cbz	r3, 800d454 <__swbuf_r+0x84>
 800d3f8:	6923      	ldr	r3, [r4, #16]
 800d3fa:	6820      	ldr	r0, [r4, #0]
 800d3fc:	1ac0      	subs	r0, r0, r3
 800d3fe:	6963      	ldr	r3, [r4, #20]
 800d400:	b2f6      	uxtb	r6, r6
 800d402:	4283      	cmp	r3, r0
 800d404:	4637      	mov	r7, r6
 800d406:	dc04      	bgt.n	800d412 <__swbuf_r+0x42>
 800d408:	4621      	mov	r1, r4
 800d40a:	4628      	mov	r0, r5
 800d40c:	f000 f93c 	bl	800d688 <_fflush_r>
 800d410:	bb30      	cbnz	r0, 800d460 <__swbuf_r+0x90>
 800d412:	68a3      	ldr	r3, [r4, #8]
 800d414:	3b01      	subs	r3, #1
 800d416:	60a3      	str	r3, [r4, #8]
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	6022      	str	r2, [r4, #0]
 800d41e:	701e      	strb	r6, [r3, #0]
 800d420:	6963      	ldr	r3, [r4, #20]
 800d422:	3001      	adds	r0, #1
 800d424:	4283      	cmp	r3, r0
 800d426:	d004      	beq.n	800d432 <__swbuf_r+0x62>
 800d428:	89a3      	ldrh	r3, [r4, #12]
 800d42a:	07db      	lsls	r3, r3, #31
 800d42c:	d506      	bpl.n	800d43c <__swbuf_r+0x6c>
 800d42e:	2e0a      	cmp	r6, #10
 800d430:	d104      	bne.n	800d43c <__swbuf_r+0x6c>
 800d432:	4621      	mov	r1, r4
 800d434:	4628      	mov	r0, r5
 800d436:	f000 f927 	bl	800d688 <_fflush_r>
 800d43a:	b988      	cbnz	r0, 800d460 <__swbuf_r+0x90>
 800d43c:	4638      	mov	r0, r7
 800d43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d440:	4b0a      	ldr	r3, [pc, #40]	; (800d46c <__swbuf_r+0x9c>)
 800d442:	429c      	cmp	r4, r3
 800d444:	d101      	bne.n	800d44a <__swbuf_r+0x7a>
 800d446:	68ac      	ldr	r4, [r5, #8]
 800d448:	e7cf      	b.n	800d3ea <__swbuf_r+0x1a>
 800d44a:	4b09      	ldr	r3, [pc, #36]	; (800d470 <__swbuf_r+0xa0>)
 800d44c:	429c      	cmp	r4, r3
 800d44e:	bf08      	it	eq
 800d450:	68ec      	ldreq	r4, [r5, #12]
 800d452:	e7ca      	b.n	800d3ea <__swbuf_r+0x1a>
 800d454:	4621      	mov	r1, r4
 800d456:	4628      	mov	r0, r5
 800d458:	f000 f81a 	bl	800d490 <__swsetup_r>
 800d45c:	2800      	cmp	r0, #0
 800d45e:	d0cb      	beq.n	800d3f8 <__swbuf_r+0x28>
 800d460:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d464:	e7ea      	b.n	800d43c <__swbuf_r+0x6c>
 800d466:	bf00      	nop
 800d468:	08010904 	.word	0x08010904
 800d46c:	08010924 	.word	0x08010924
 800d470:	080108e4 	.word	0x080108e4

0800d474 <__ascii_wctomb>:
 800d474:	b149      	cbz	r1, 800d48a <__ascii_wctomb+0x16>
 800d476:	2aff      	cmp	r2, #255	; 0xff
 800d478:	bf85      	ittet	hi
 800d47a:	238a      	movhi	r3, #138	; 0x8a
 800d47c:	6003      	strhi	r3, [r0, #0]
 800d47e:	700a      	strbls	r2, [r1, #0]
 800d480:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d484:	bf98      	it	ls
 800d486:	2001      	movls	r0, #1
 800d488:	4770      	bx	lr
 800d48a:	4608      	mov	r0, r1
 800d48c:	4770      	bx	lr
	...

0800d490 <__swsetup_r>:
 800d490:	4b32      	ldr	r3, [pc, #200]	; (800d55c <__swsetup_r+0xcc>)
 800d492:	b570      	push	{r4, r5, r6, lr}
 800d494:	681d      	ldr	r5, [r3, #0]
 800d496:	4606      	mov	r6, r0
 800d498:	460c      	mov	r4, r1
 800d49a:	b125      	cbz	r5, 800d4a6 <__swsetup_r+0x16>
 800d49c:	69ab      	ldr	r3, [r5, #24]
 800d49e:	b913      	cbnz	r3, 800d4a6 <__swsetup_r+0x16>
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f000 f985 	bl	800d7b0 <__sinit>
 800d4a6:	4b2e      	ldr	r3, [pc, #184]	; (800d560 <__swsetup_r+0xd0>)
 800d4a8:	429c      	cmp	r4, r3
 800d4aa:	d10f      	bne.n	800d4cc <__swsetup_r+0x3c>
 800d4ac:	686c      	ldr	r4, [r5, #4]
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4b4:	0719      	lsls	r1, r3, #28
 800d4b6:	d42c      	bmi.n	800d512 <__swsetup_r+0x82>
 800d4b8:	06dd      	lsls	r5, r3, #27
 800d4ba:	d411      	bmi.n	800d4e0 <__swsetup_r+0x50>
 800d4bc:	2309      	movs	r3, #9
 800d4be:	6033      	str	r3, [r6, #0]
 800d4c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4ca:	e03e      	b.n	800d54a <__swsetup_r+0xba>
 800d4cc:	4b25      	ldr	r3, [pc, #148]	; (800d564 <__swsetup_r+0xd4>)
 800d4ce:	429c      	cmp	r4, r3
 800d4d0:	d101      	bne.n	800d4d6 <__swsetup_r+0x46>
 800d4d2:	68ac      	ldr	r4, [r5, #8]
 800d4d4:	e7eb      	b.n	800d4ae <__swsetup_r+0x1e>
 800d4d6:	4b24      	ldr	r3, [pc, #144]	; (800d568 <__swsetup_r+0xd8>)
 800d4d8:	429c      	cmp	r4, r3
 800d4da:	bf08      	it	eq
 800d4dc:	68ec      	ldreq	r4, [r5, #12]
 800d4de:	e7e6      	b.n	800d4ae <__swsetup_r+0x1e>
 800d4e0:	0758      	lsls	r0, r3, #29
 800d4e2:	d512      	bpl.n	800d50a <__swsetup_r+0x7a>
 800d4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4e6:	b141      	cbz	r1, 800d4fa <__swsetup_r+0x6a>
 800d4e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4ec:	4299      	cmp	r1, r3
 800d4ee:	d002      	beq.n	800d4f6 <__swsetup_r+0x66>
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f7ff fb31 	bl	800cb58 <_free_r>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6363      	str	r3, [r4, #52]	; 0x34
 800d4fa:	89a3      	ldrh	r3, [r4, #12]
 800d4fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d500:	81a3      	strh	r3, [r4, #12]
 800d502:	2300      	movs	r3, #0
 800d504:	6063      	str	r3, [r4, #4]
 800d506:	6923      	ldr	r3, [r4, #16]
 800d508:	6023      	str	r3, [r4, #0]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f043 0308 	orr.w	r3, r3, #8
 800d510:	81a3      	strh	r3, [r4, #12]
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	b94b      	cbnz	r3, 800d52a <__swsetup_r+0x9a>
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d51c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d520:	d003      	beq.n	800d52a <__swsetup_r+0x9a>
 800d522:	4621      	mov	r1, r4
 800d524:	4630      	mov	r0, r6
 800d526:	f000 fa09 	bl	800d93c <__smakebuf_r>
 800d52a:	89a0      	ldrh	r0, [r4, #12]
 800d52c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d530:	f010 0301 	ands.w	r3, r0, #1
 800d534:	d00a      	beq.n	800d54c <__swsetup_r+0xbc>
 800d536:	2300      	movs	r3, #0
 800d538:	60a3      	str	r3, [r4, #8]
 800d53a:	6963      	ldr	r3, [r4, #20]
 800d53c:	425b      	negs	r3, r3
 800d53e:	61a3      	str	r3, [r4, #24]
 800d540:	6923      	ldr	r3, [r4, #16]
 800d542:	b943      	cbnz	r3, 800d556 <__swsetup_r+0xc6>
 800d544:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d548:	d1ba      	bne.n	800d4c0 <__swsetup_r+0x30>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	0781      	lsls	r1, r0, #30
 800d54e:	bf58      	it	pl
 800d550:	6963      	ldrpl	r3, [r4, #20]
 800d552:	60a3      	str	r3, [r4, #8]
 800d554:	e7f4      	b.n	800d540 <__swsetup_r+0xb0>
 800d556:	2000      	movs	r0, #0
 800d558:	e7f7      	b.n	800d54a <__swsetup_r+0xba>
 800d55a:	bf00      	nop
 800d55c:	20000060 	.word	0x20000060
 800d560:	08010904 	.word	0x08010904
 800d564:	08010924 	.word	0x08010924
 800d568:	080108e4 	.word	0x080108e4

0800d56c <abort>:
 800d56c:	b508      	push	{r3, lr}
 800d56e:	2006      	movs	r0, #6
 800d570:	f000 fa54 	bl	800da1c <raise>
 800d574:	2001      	movs	r0, #1
 800d576:	f7f9 f95d 	bl	8006834 <_exit>
	...

0800d57c <__sflush_r>:
 800d57c:	898a      	ldrh	r2, [r1, #12]
 800d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	4605      	mov	r5, r0
 800d584:	0710      	lsls	r0, r2, #28
 800d586:	460c      	mov	r4, r1
 800d588:	d458      	bmi.n	800d63c <__sflush_r+0xc0>
 800d58a:	684b      	ldr	r3, [r1, #4]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	dc05      	bgt.n	800d59c <__sflush_r+0x20>
 800d590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d592:	2b00      	cmp	r3, #0
 800d594:	dc02      	bgt.n	800d59c <__sflush_r+0x20>
 800d596:	2000      	movs	r0, #0
 800d598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d59c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d59e:	2e00      	cmp	r6, #0
 800d5a0:	d0f9      	beq.n	800d596 <__sflush_r+0x1a>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5a8:	682f      	ldr	r7, [r5, #0]
 800d5aa:	602b      	str	r3, [r5, #0]
 800d5ac:	d032      	beq.n	800d614 <__sflush_r+0x98>
 800d5ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	075a      	lsls	r2, r3, #29
 800d5b4:	d505      	bpl.n	800d5c2 <__sflush_r+0x46>
 800d5b6:	6863      	ldr	r3, [r4, #4]
 800d5b8:	1ac0      	subs	r0, r0, r3
 800d5ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5bc:	b10b      	cbz	r3, 800d5c2 <__sflush_r+0x46>
 800d5be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5c0:	1ac0      	subs	r0, r0, r3
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5c8:	6a21      	ldr	r1, [r4, #32]
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	47b0      	blx	r6
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	89a3      	ldrh	r3, [r4, #12]
 800d5d2:	d106      	bne.n	800d5e2 <__sflush_r+0x66>
 800d5d4:	6829      	ldr	r1, [r5, #0]
 800d5d6:	291d      	cmp	r1, #29
 800d5d8:	d82c      	bhi.n	800d634 <__sflush_r+0xb8>
 800d5da:	4a2a      	ldr	r2, [pc, #168]	; (800d684 <__sflush_r+0x108>)
 800d5dc:	40ca      	lsrs	r2, r1
 800d5de:	07d6      	lsls	r6, r2, #31
 800d5e0:	d528      	bpl.n	800d634 <__sflush_r+0xb8>
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	6062      	str	r2, [r4, #4]
 800d5e6:	04d9      	lsls	r1, r3, #19
 800d5e8:	6922      	ldr	r2, [r4, #16]
 800d5ea:	6022      	str	r2, [r4, #0]
 800d5ec:	d504      	bpl.n	800d5f8 <__sflush_r+0x7c>
 800d5ee:	1c42      	adds	r2, r0, #1
 800d5f0:	d101      	bne.n	800d5f6 <__sflush_r+0x7a>
 800d5f2:	682b      	ldr	r3, [r5, #0]
 800d5f4:	b903      	cbnz	r3, 800d5f8 <__sflush_r+0x7c>
 800d5f6:	6560      	str	r0, [r4, #84]	; 0x54
 800d5f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5fa:	602f      	str	r7, [r5, #0]
 800d5fc:	2900      	cmp	r1, #0
 800d5fe:	d0ca      	beq.n	800d596 <__sflush_r+0x1a>
 800d600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d604:	4299      	cmp	r1, r3
 800d606:	d002      	beq.n	800d60e <__sflush_r+0x92>
 800d608:	4628      	mov	r0, r5
 800d60a:	f7ff faa5 	bl	800cb58 <_free_r>
 800d60e:	2000      	movs	r0, #0
 800d610:	6360      	str	r0, [r4, #52]	; 0x34
 800d612:	e7c1      	b.n	800d598 <__sflush_r+0x1c>
 800d614:	6a21      	ldr	r1, [r4, #32]
 800d616:	2301      	movs	r3, #1
 800d618:	4628      	mov	r0, r5
 800d61a:	47b0      	blx	r6
 800d61c:	1c41      	adds	r1, r0, #1
 800d61e:	d1c7      	bne.n	800d5b0 <__sflush_r+0x34>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0c4      	beq.n	800d5b0 <__sflush_r+0x34>
 800d626:	2b1d      	cmp	r3, #29
 800d628:	d001      	beq.n	800d62e <__sflush_r+0xb2>
 800d62a:	2b16      	cmp	r3, #22
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0xb6>
 800d62e:	602f      	str	r7, [r5, #0]
 800d630:	e7b1      	b.n	800d596 <__sflush_r+0x1a>
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d638:	81a3      	strh	r3, [r4, #12]
 800d63a:	e7ad      	b.n	800d598 <__sflush_r+0x1c>
 800d63c:	690f      	ldr	r7, [r1, #16]
 800d63e:	2f00      	cmp	r7, #0
 800d640:	d0a9      	beq.n	800d596 <__sflush_r+0x1a>
 800d642:	0793      	lsls	r3, r2, #30
 800d644:	680e      	ldr	r6, [r1, #0]
 800d646:	bf08      	it	eq
 800d648:	694b      	ldreq	r3, [r1, #20]
 800d64a:	600f      	str	r7, [r1, #0]
 800d64c:	bf18      	it	ne
 800d64e:	2300      	movne	r3, #0
 800d650:	eba6 0807 	sub.w	r8, r6, r7
 800d654:	608b      	str	r3, [r1, #8]
 800d656:	f1b8 0f00 	cmp.w	r8, #0
 800d65a:	dd9c      	ble.n	800d596 <__sflush_r+0x1a>
 800d65c:	6a21      	ldr	r1, [r4, #32]
 800d65e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d660:	4643      	mov	r3, r8
 800d662:	463a      	mov	r2, r7
 800d664:	4628      	mov	r0, r5
 800d666:	47b0      	blx	r6
 800d668:	2800      	cmp	r0, #0
 800d66a:	dc06      	bgt.n	800d67a <__sflush_r+0xfe>
 800d66c:	89a3      	ldrh	r3, [r4, #12]
 800d66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d672:	81a3      	strh	r3, [r4, #12]
 800d674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d678:	e78e      	b.n	800d598 <__sflush_r+0x1c>
 800d67a:	4407      	add	r7, r0
 800d67c:	eba8 0800 	sub.w	r8, r8, r0
 800d680:	e7e9      	b.n	800d656 <__sflush_r+0xda>
 800d682:	bf00      	nop
 800d684:	20400001 	.word	0x20400001

0800d688 <_fflush_r>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	690b      	ldr	r3, [r1, #16]
 800d68c:	4605      	mov	r5, r0
 800d68e:	460c      	mov	r4, r1
 800d690:	b913      	cbnz	r3, 800d698 <_fflush_r+0x10>
 800d692:	2500      	movs	r5, #0
 800d694:	4628      	mov	r0, r5
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	b118      	cbz	r0, 800d6a2 <_fflush_r+0x1a>
 800d69a:	6983      	ldr	r3, [r0, #24]
 800d69c:	b90b      	cbnz	r3, 800d6a2 <_fflush_r+0x1a>
 800d69e:	f000 f887 	bl	800d7b0 <__sinit>
 800d6a2:	4b14      	ldr	r3, [pc, #80]	; (800d6f4 <_fflush_r+0x6c>)
 800d6a4:	429c      	cmp	r4, r3
 800d6a6:	d11b      	bne.n	800d6e0 <_fflush_r+0x58>
 800d6a8:	686c      	ldr	r4, [r5, #4]
 800d6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0ef      	beq.n	800d692 <_fflush_r+0xa>
 800d6b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6b4:	07d0      	lsls	r0, r2, #31
 800d6b6:	d404      	bmi.n	800d6c2 <_fflush_r+0x3a>
 800d6b8:	0599      	lsls	r1, r3, #22
 800d6ba:	d402      	bmi.n	800d6c2 <_fflush_r+0x3a>
 800d6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6be:	f000 f915 	bl	800d8ec <__retarget_lock_acquire_recursive>
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	f7ff ff59 	bl	800d57c <__sflush_r>
 800d6ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6cc:	07da      	lsls	r2, r3, #31
 800d6ce:	4605      	mov	r5, r0
 800d6d0:	d4e0      	bmi.n	800d694 <_fflush_r+0xc>
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	059b      	lsls	r3, r3, #22
 800d6d6:	d4dd      	bmi.n	800d694 <_fflush_r+0xc>
 800d6d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6da:	f000 f908 	bl	800d8ee <__retarget_lock_release_recursive>
 800d6de:	e7d9      	b.n	800d694 <_fflush_r+0xc>
 800d6e0:	4b05      	ldr	r3, [pc, #20]	; (800d6f8 <_fflush_r+0x70>)
 800d6e2:	429c      	cmp	r4, r3
 800d6e4:	d101      	bne.n	800d6ea <_fflush_r+0x62>
 800d6e6:	68ac      	ldr	r4, [r5, #8]
 800d6e8:	e7df      	b.n	800d6aa <_fflush_r+0x22>
 800d6ea:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <_fflush_r+0x74>)
 800d6ec:	429c      	cmp	r4, r3
 800d6ee:	bf08      	it	eq
 800d6f0:	68ec      	ldreq	r4, [r5, #12]
 800d6f2:	e7da      	b.n	800d6aa <_fflush_r+0x22>
 800d6f4:	08010904 	.word	0x08010904
 800d6f8:	08010924 	.word	0x08010924
 800d6fc:	080108e4 	.word	0x080108e4

0800d700 <std>:
 800d700:	2300      	movs	r3, #0
 800d702:	b510      	push	{r4, lr}
 800d704:	4604      	mov	r4, r0
 800d706:	e9c0 3300 	strd	r3, r3, [r0]
 800d70a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d70e:	6083      	str	r3, [r0, #8]
 800d710:	8181      	strh	r1, [r0, #12]
 800d712:	6643      	str	r3, [r0, #100]	; 0x64
 800d714:	81c2      	strh	r2, [r0, #14]
 800d716:	6183      	str	r3, [r0, #24]
 800d718:	4619      	mov	r1, r3
 800d71a:	2208      	movs	r2, #8
 800d71c:	305c      	adds	r0, #92	; 0x5c
 800d71e:	f7fd fb55 	bl	800adcc <memset>
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <std+0x38>)
 800d724:	6263      	str	r3, [r4, #36]	; 0x24
 800d726:	4b05      	ldr	r3, [pc, #20]	; (800d73c <std+0x3c>)
 800d728:	62a3      	str	r3, [r4, #40]	; 0x28
 800d72a:	4b05      	ldr	r3, [pc, #20]	; (800d740 <std+0x40>)
 800d72c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d72e:	4b05      	ldr	r3, [pc, #20]	; (800d744 <std+0x44>)
 800d730:	6224      	str	r4, [r4, #32]
 800d732:	6323      	str	r3, [r4, #48]	; 0x30
 800d734:	bd10      	pop	{r4, pc}
 800d736:	bf00      	nop
 800d738:	0800da55 	.word	0x0800da55
 800d73c:	0800da77 	.word	0x0800da77
 800d740:	0800daaf 	.word	0x0800daaf
 800d744:	0800dad3 	.word	0x0800dad3

0800d748 <_cleanup_r>:
 800d748:	4901      	ldr	r1, [pc, #4]	; (800d750 <_cleanup_r+0x8>)
 800d74a:	f000 b8af 	b.w	800d8ac <_fwalk_reent>
 800d74e:	bf00      	nop
 800d750:	0800d689 	.word	0x0800d689

0800d754 <__sfmoreglue>:
 800d754:	b570      	push	{r4, r5, r6, lr}
 800d756:	2268      	movs	r2, #104	; 0x68
 800d758:	1e4d      	subs	r5, r1, #1
 800d75a:	4355      	muls	r5, r2
 800d75c:	460e      	mov	r6, r1
 800d75e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d762:	f7ff fa65 	bl	800cc30 <_malloc_r>
 800d766:	4604      	mov	r4, r0
 800d768:	b140      	cbz	r0, 800d77c <__sfmoreglue+0x28>
 800d76a:	2100      	movs	r1, #0
 800d76c:	e9c0 1600 	strd	r1, r6, [r0]
 800d770:	300c      	adds	r0, #12
 800d772:	60a0      	str	r0, [r4, #8]
 800d774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d778:	f7fd fb28 	bl	800adcc <memset>
 800d77c:	4620      	mov	r0, r4
 800d77e:	bd70      	pop	{r4, r5, r6, pc}

0800d780 <__sfp_lock_acquire>:
 800d780:	4801      	ldr	r0, [pc, #4]	; (800d788 <__sfp_lock_acquire+0x8>)
 800d782:	f000 b8b3 	b.w	800d8ec <__retarget_lock_acquire_recursive>
 800d786:	bf00      	nop
 800d788:	20000fc9 	.word	0x20000fc9

0800d78c <__sfp_lock_release>:
 800d78c:	4801      	ldr	r0, [pc, #4]	; (800d794 <__sfp_lock_release+0x8>)
 800d78e:	f000 b8ae 	b.w	800d8ee <__retarget_lock_release_recursive>
 800d792:	bf00      	nop
 800d794:	20000fc9 	.word	0x20000fc9

0800d798 <__sinit_lock_acquire>:
 800d798:	4801      	ldr	r0, [pc, #4]	; (800d7a0 <__sinit_lock_acquire+0x8>)
 800d79a:	f000 b8a7 	b.w	800d8ec <__retarget_lock_acquire_recursive>
 800d79e:	bf00      	nop
 800d7a0:	20000fca 	.word	0x20000fca

0800d7a4 <__sinit_lock_release>:
 800d7a4:	4801      	ldr	r0, [pc, #4]	; (800d7ac <__sinit_lock_release+0x8>)
 800d7a6:	f000 b8a2 	b.w	800d8ee <__retarget_lock_release_recursive>
 800d7aa:	bf00      	nop
 800d7ac:	20000fca 	.word	0x20000fca

0800d7b0 <__sinit>:
 800d7b0:	b510      	push	{r4, lr}
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	f7ff fff0 	bl	800d798 <__sinit_lock_acquire>
 800d7b8:	69a3      	ldr	r3, [r4, #24]
 800d7ba:	b11b      	cbz	r3, 800d7c4 <__sinit+0x14>
 800d7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7c0:	f7ff bff0 	b.w	800d7a4 <__sinit_lock_release>
 800d7c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7c8:	6523      	str	r3, [r4, #80]	; 0x50
 800d7ca:	4b13      	ldr	r3, [pc, #76]	; (800d818 <__sinit+0x68>)
 800d7cc:	4a13      	ldr	r2, [pc, #76]	; (800d81c <__sinit+0x6c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7d2:	42a3      	cmp	r3, r4
 800d7d4:	bf04      	itt	eq
 800d7d6:	2301      	moveq	r3, #1
 800d7d8:	61a3      	streq	r3, [r4, #24]
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f000 f820 	bl	800d820 <__sfp>
 800d7e0:	6060      	str	r0, [r4, #4]
 800d7e2:	4620      	mov	r0, r4
 800d7e4:	f000 f81c 	bl	800d820 <__sfp>
 800d7e8:	60a0      	str	r0, [r4, #8]
 800d7ea:	4620      	mov	r0, r4
 800d7ec:	f000 f818 	bl	800d820 <__sfp>
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	60e0      	str	r0, [r4, #12]
 800d7f4:	2104      	movs	r1, #4
 800d7f6:	6860      	ldr	r0, [r4, #4]
 800d7f8:	f7ff ff82 	bl	800d700 <std>
 800d7fc:	68a0      	ldr	r0, [r4, #8]
 800d7fe:	2201      	movs	r2, #1
 800d800:	2109      	movs	r1, #9
 800d802:	f7ff ff7d 	bl	800d700 <std>
 800d806:	68e0      	ldr	r0, [r4, #12]
 800d808:	2202      	movs	r2, #2
 800d80a:	2112      	movs	r1, #18
 800d80c:	f7ff ff78 	bl	800d700 <std>
 800d810:	2301      	movs	r3, #1
 800d812:	61a3      	str	r3, [r4, #24]
 800d814:	e7d2      	b.n	800d7bc <__sinit+0xc>
 800d816:	bf00      	nop
 800d818:	08010568 	.word	0x08010568
 800d81c:	0800d749 	.word	0x0800d749

0800d820 <__sfp>:
 800d820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d822:	4607      	mov	r7, r0
 800d824:	f7ff ffac 	bl	800d780 <__sfp_lock_acquire>
 800d828:	4b1e      	ldr	r3, [pc, #120]	; (800d8a4 <__sfp+0x84>)
 800d82a:	681e      	ldr	r6, [r3, #0]
 800d82c:	69b3      	ldr	r3, [r6, #24]
 800d82e:	b913      	cbnz	r3, 800d836 <__sfp+0x16>
 800d830:	4630      	mov	r0, r6
 800d832:	f7ff ffbd 	bl	800d7b0 <__sinit>
 800d836:	3648      	adds	r6, #72	; 0x48
 800d838:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d83c:	3b01      	subs	r3, #1
 800d83e:	d503      	bpl.n	800d848 <__sfp+0x28>
 800d840:	6833      	ldr	r3, [r6, #0]
 800d842:	b30b      	cbz	r3, 800d888 <__sfp+0x68>
 800d844:	6836      	ldr	r6, [r6, #0]
 800d846:	e7f7      	b.n	800d838 <__sfp+0x18>
 800d848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d84c:	b9d5      	cbnz	r5, 800d884 <__sfp+0x64>
 800d84e:	4b16      	ldr	r3, [pc, #88]	; (800d8a8 <__sfp+0x88>)
 800d850:	60e3      	str	r3, [r4, #12]
 800d852:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d856:	6665      	str	r5, [r4, #100]	; 0x64
 800d858:	f000 f847 	bl	800d8ea <__retarget_lock_init_recursive>
 800d85c:	f7ff ff96 	bl	800d78c <__sfp_lock_release>
 800d860:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d864:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d868:	6025      	str	r5, [r4, #0]
 800d86a:	61a5      	str	r5, [r4, #24]
 800d86c:	2208      	movs	r2, #8
 800d86e:	4629      	mov	r1, r5
 800d870:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d874:	f7fd faaa 	bl	800adcc <memset>
 800d878:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d87c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d880:	4620      	mov	r0, r4
 800d882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d884:	3468      	adds	r4, #104	; 0x68
 800d886:	e7d9      	b.n	800d83c <__sfp+0x1c>
 800d888:	2104      	movs	r1, #4
 800d88a:	4638      	mov	r0, r7
 800d88c:	f7ff ff62 	bl	800d754 <__sfmoreglue>
 800d890:	4604      	mov	r4, r0
 800d892:	6030      	str	r0, [r6, #0]
 800d894:	2800      	cmp	r0, #0
 800d896:	d1d5      	bne.n	800d844 <__sfp+0x24>
 800d898:	f7ff ff78 	bl	800d78c <__sfp_lock_release>
 800d89c:	230c      	movs	r3, #12
 800d89e:	603b      	str	r3, [r7, #0]
 800d8a0:	e7ee      	b.n	800d880 <__sfp+0x60>
 800d8a2:	bf00      	nop
 800d8a4:	08010568 	.word	0x08010568
 800d8a8:	ffff0001 	.word	0xffff0001

0800d8ac <_fwalk_reent>:
 800d8ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8b0:	4606      	mov	r6, r0
 800d8b2:	4688      	mov	r8, r1
 800d8b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8b8:	2700      	movs	r7, #0
 800d8ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8be:	f1b9 0901 	subs.w	r9, r9, #1
 800d8c2:	d505      	bpl.n	800d8d0 <_fwalk_reent+0x24>
 800d8c4:	6824      	ldr	r4, [r4, #0]
 800d8c6:	2c00      	cmp	r4, #0
 800d8c8:	d1f7      	bne.n	800d8ba <_fwalk_reent+0xe>
 800d8ca:	4638      	mov	r0, r7
 800d8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d0:	89ab      	ldrh	r3, [r5, #12]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d907      	bls.n	800d8e6 <_fwalk_reent+0x3a>
 800d8d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	d003      	beq.n	800d8e6 <_fwalk_reent+0x3a>
 800d8de:	4629      	mov	r1, r5
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	47c0      	blx	r8
 800d8e4:	4307      	orrs	r7, r0
 800d8e6:	3568      	adds	r5, #104	; 0x68
 800d8e8:	e7e9      	b.n	800d8be <_fwalk_reent+0x12>

0800d8ea <__retarget_lock_init_recursive>:
 800d8ea:	4770      	bx	lr

0800d8ec <__retarget_lock_acquire_recursive>:
 800d8ec:	4770      	bx	lr

0800d8ee <__retarget_lock_release_recursive>:
 800d8ee:	4770      	bx	lr

0800d8f0 <__swhatbuf_r>:
 800d8f0:	b570      	push	{r4, r5, r6, lr}
 800d8f2:	460e      	mov	r6, r1
 800d8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f8:	2900      	cmp	r1, #0
 800d8fa:	b096      	sub	sp, #88	; 0x58
 800d8fc:	4614      	mov	r4, r2
 800d8fe:	461d      	mov	r5, r3
 800d900:	da08      	bge.n	800d914 <__swhatbuf_r+0x24>
 800d902:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	602a      	str	r2, [r5, #0]
 800d90a:	061a      	lsls	r2, r3, #24
 800d90c:	d410      	bmi.n	800d930 <__swhatbuf_r+0x40>
 800d90e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d912:	e00e      	b.n	800d932 <__swhatbuf_r+0x42>
 800d914:	466a      	mov	r2, sp
 800d916:	f000 f903 	bl	800db20 <_fstat_r>
 800d91a:	2800      	cmp	r0, #0
 800d91c:	dbf1      	blt.n	800d902 <__swhatbuf_r+0x12>
 800d91e:	9a01      	ldr	r2, [sp, #4]
 800d920:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d924:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d928:	425a      	negs	r2, r3
 800d92a:	415a      	adcs	r2, r3
 800d92c:	602a      	str	r2, [r5, #0]
 800d92e:	e7ee      	b.n	800d90e <__swhatbuf_r+0x1e>
 800d930:	2340      	movs	r3, #64	; 0x40
 800d932:	2000      	movs	r0, #0
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	b016      	add	sp, #88	; 0x58
 800d938:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d93c <__smakebuf_r>:
 800d93c:	898b      	ldrh	r3, [r1, #12]
 800d93e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d940:	079d      	lsls	r5, r3, #30
 800d942:	4606      	mov	r6, r0
 800d944:	460c      	mov	r4, r1
 800d946:	d507      	bpl.n	800d958 <__smakebuf_r+0x1c>
 800d948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d94c:	6023      	str	r3, [r4, #0]
 800d94e:	6123      	str	r3, [r4, #16]
 800d950:	2301      	movs	r3, #1
 800d952:	6163      	str	r3, [r4, #20]
 800d954:	b002      	add	sp, #8
 800d956:	bd70      	pop	{r4, r5, r6, pc}
 800d958:	ab01      	add	r3, sp, #4
 800d95a:	466a      	mov	r2, sp
 800d95c:	f7ff ffc8 	bl	800d8f0 <__swhatbuf_r>
 800d960:	9900      	ldr	r1, [sp, #0]
 800d962:	4605      	mov	r5, r0
 800d964:	4630      	mov	r0, r6
 800d966:	f7ff f963 	bl	800cc30 <_malloc_r>
 800d96a:	b948      	cbnz	r0, 800d980 <__smakebuf_r+0x44>
 800d96c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d970:	059a      	lsls	r2, r3, #22
 800d972:	d4ef      	bmi.n	800d954 <__smakebuf_r+0x18>
 800d974:	f023 0303 	bic.w	r3, r3, #3
 800d978:	f043 0302 	orr.w	r3, r3, #2
 800d97c:	81a3      	strh	r3, [r4, #12]
 800d97e:	e7e3      	b.n	800d948 <__smakebuf_r+0xc>
 800d980:	4b0d      	ldr	r3, [pc, #52]	; (800d9b8 <__smakebuf_r+0x7c>)
 800d982:	62b3      	str	r3, [r6, #40]	; 0x28
 800d984:	89a3      	ldrh	r3, [r4, #12]
 800d986:	6020      	str	r0, [r4, #0]
 800d988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d98c:	81a3      	strh	r3, [r4, #12]
 800d98e:	9b00      	ldr	r3, [sp, #0]
 800d990:	6163      	str	r3, [r4, #20]
 800d992:	9b01      	ldr	r3, [sp, #4]
 800d994:	6120      	str	r0, [r4, #16]
 800d996:	b15b      	cbz	r3, 800d9b0 <__smakebuf_r+0x74>
 800d998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d99c:	4630      	mov	r0, r6
 800d99e:	f000 f8d1 	bl	800db44 <_isatty_r>
 800d9a2:	b128      	cbz	r0, 800d9b0 <__smakebuf_r+0x74>
 800d9a4:	89a3      	ldrh	r3, [r4, #12]
 800d9a6:	f023 0303 	bic.w	r3, r3, #3
 800d9aa:	f043 0301 	orr.w	r3, r3, #1
 800d9ae:	81a3      	strh	r3, [r4, #12]
 800d9b0:	89a0      	ldrh	r0, [r4, #12]
 800d9b2:	4305      	orrs	r5, r0
 800d9b4:	81a5      	strh	r5, [r4, #12]
 800d9b6:	e7cd      	b.n	800d954 <__smakebuf_r+0x18>
 800d9b8:	0800d749 	.word	0x0800d749

0800d9bc <_malloc_usable_size_r>:
 800d9bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9c0:	1f18      	subs	r0, r3, #4
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	bfbc      	itt	lt
 800d9c6:	580b      	ldrlt	r3, [r1, r0]
 800d9c8:	18c0      	addlt	r0, r0, r3
 800d9ca:	4770      	bx	lr

0800d9cc <_raise_r>:
 800d9cc:	291f      	cmp	r1, #31
 800d9ce:	b538      	push	{r3, r4, r5, lr}
 800d9d0:	4604      	mov	r4, r0
 800d9d2:	460d      	mov	r5, r1
 800d9d4:	d904      	bls.n	800d9e0 <_raise_r+0x14>
 800d9d6:	2316      	movs	r3, #22
 800d9d8:	6003      	str	r3, [r0, #0]
 800d9da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9de:	bd38      	pop	{r3, r4, r5, pc}
 800d9e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9e2:	b112      	cbz	r2, 800d9ea <_raise_r+0x1e>
 800d9e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9e8:	b94b      	cbnz	r3, 800d9fe <_raise_r+0x32>
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	f000 f830 	bl	800da50 <_getpid_r>
 800d9f0:	462a      	mov	r2, r5
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9fa:	f000 b817 	b.w	800da2c <_kill_r>
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d00a      	beq.n	800da18 <_raise_r+0x4c>
 800da02:	1c59      	adds	r1, r3, #1
 800da04:	d103      	bne.n	800da0e <_raise_r+0x42>
 800da06:	2316      	movs	r3, #22
 800da08:	6003      	str	r3, [r0, #0]
 800da0a:	2001      	movs	r0, #1
 800da0c:	e7e7      	b.n	800d9de <_raise_r+0x12>
 800da0e:	2400      	movs	r4, #0
 800da10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da14:	4628      	mov	r0, r5
 800da16:	4798      	blx	r3
 800da18:	2000      	movs	r0, #0
 800da1a:	e7e0      	b.n	800d9de <_raise_r+0x12>

0800da1c <raise>:
 800da1c:	4b02      	ldr	r3, [pc, #8]	; (800da28 <raise+0xc>)
 800da1e:	4601      	mov	r1, r0
 800da20:	6818      	ldr	r0, [r3, #0]
 800da22:	f7ff bfd3 	b.w	800d9cc <_raise_r>
 800da26:	bf00      	nop
 800da28:	20000060 	.word	0x20000060

0800da2c <_kill_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4d07      	ldr	r5, [pc, #28]	; (800da4c <_kill_r+0x20>)
 800da30:	2300      	movs	r3, #0
 800da32:	4604      	mov	r4, r0
 800da34:	4608      	mov	r0, r1
 800da36:	4611      	mov	r1, r2
 800da38:	602b      	str	r3, [r5, #0]
 800da3a:	f7f8 feeb 	bl	8006814 <_kill>
 800da3e:	1c43      	adds	r3, r0, #1
 800da40:	d102      	bne.n	800da48 <_kill_r+0x1c>
 800da42:	682b      	ldr	r3, [r5, #0]
 800da44:	b103      	cbz	r3, 800da48 <_kill_r+0x1c>
 800da46:	6023      	str	r3, [r4, #0]
 800da48:	bd38      	pop	{r3, r4, r5, pc}
 800da4a:	bf00      	nop
 800da4c:	20000fc4 	.word	0x20000fc4

0800da50 <_getpid_r>:
 800da50:	f7f8 bed8 	b.w	8006804 <_getpid>

0800da54 <__sread>:
 800da54:	b510      	push	{r4, lr}
 800da56:	460c      	mov	r4, r1
 800da58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da5c:	f000 f894 	bl	800db88 <_read_r>
 800da60:	2800      	cmp	r0, #0
 800da62:	bfab      	itete	ge
 800da64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da66:	89a3      	ldrhlt	r3, [r4, #12]
 800da68:	181b      	addge	r3, r3, r0
 800da6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da6e:	bfac      	ite	ge
 800da70:	6563      	strge	r3, [r4, #84]	; 0x54
 800da72:	81a3      	strhlt	r3, [r4, #12]
 800da74:	bd10      	pop	{r4, pc}

0800da76 <__swrite>:
 800da76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7a:	461f      	mov	r7, r3
 800da7c:	898b      	ldrh	r3, [r1, #12]
 800da7e:	05db      	lsls	r3, r3, #23
 800da80:	4605      	mov	r5, r0
 800da82:	460c      	mov	r4, r1
 800da84:	4616      	mov	r6, r2
 800da86:	d505      	bpl.n	800da94 <__swrite+0x1e>
 800da88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8c:	2302      	movs	r3, #2
 800da8e:	2200      	movs	r2, #0
 800da90:	f000 f868 	bl	800db64 <_lseek_r>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da9e:	81a3      	strh	r3, [r4, #12]
 800daa0:	4632      	mov	r2, r6
 800daa2:	463b      	mov	r3, r7
 800daa4:	4628      	mov	r0, r5
 800daa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daaa:	f000 b817 	b.w	800dadc <_write_r>

0800daae <__sseek>:
 800daae:	b510      	push	{r4, lr}
 800dab0:	460c      	mov	r4, r1
 800dab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab6:	f000 f855 	bl	800db64 <_lseek_r>
 800daba:	1c43      	adds	r3, r0, #1
 800dabc:	89a3      	ldrh	r3, [r4, #12]
 800dabe:	bf15      	itete	ne
 800dac0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800daca:	81a3      	strheq	r3, [r4, #12]
 800dacc:	bf18      	it	ne
 800dace:	81a3      	strhne	r3, [r4, #12]
 800dad0:	bd10      	pop	{r4, pc}

0800dad2 <__sclose>:
 800dad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad6:	f000 b813 	b.w	800db00 <_close_r>
	...

0800dadc <_write_r>:
 800dadc:	b538      	push	{r3, r4, r5, lr}
 800dade:	4d07      	ldr	r5, [pc, #28]	; (800dafc <_write_r+0x20>)
 800dae0:	4604      	mov	r4, r0
 800dae2:	4608      	mov	r0, r1
 800dae4:	4611      	mov	r1, r2
 800dae6:	2200      	movs	r2, #0
 800dae8:	602a      	str	r2, [r5, #0]
 800daea:	461a      	mov	r2, r3
 800daec:	f7f8 fec9 	bl	8006882 <_write>
 800daf0:	1c43      	adds	r3, r0, #1
 800daf2:	d102      	bne.n	800dafa <_write_r+0x1e>
 800daf4:	682b      	ldr	r3, [r5, #0]
 800daf6:	b103      	cbz	r3, 800dafa <_write_r+0x1e>
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	bd38      	pop	{r3, r4, r5, pc}
 800dafc:	20000fc4 	.word	0x20000fc4

0800db00 <_close_r>:
 800db00:	b538      	push	{r3, r4, r5, lr}
 800db02:	4d06      	ldr	r5, [pc, #24]	; (800db1c <_close_r+0x1c>)
 800db04:	2300      	movs	r3, #0
 800db06:	4604      	mov	r4, r0
 800db08:	4608      	mov	r0, r1
 800db0a:	602b      	str	r3, [r5, #0]
 800db0c:	f7f8 fed5 	bl	80068ba <_close>
 800db10:	1c43      	adds	r3, r0, #1
 800db12:	d102      	bne.n	800db1a <_close_r+0x1a>
 800db14:	682b      	ldr	r3, [r5, #0]
 800db16:	b103      	cbz	r3, 800db1a <_close_r+0x1a>
 800db18:	6023      	str	r3, [r4, #0]
 800db1a:	bd38      	pop	{r3, r4, r5, pc}
 800db1c:	20000fc4 	.word	0x20000fc4

0800db20 <_fstat_r>:
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4d07      	ldr	r5, [pc, #28]	; (800db40 <_fstat_r+0x20>)
 800db24:	2300      	movs	r3, #0
 800db26:	4604      	mov	r4, r0
 800db28:	4608      	mov	r0, r1
 800db2a:	4611      	mov	r1, r2
 800db2c:	602b      	str	r3, [r5, #0]
 800db2e:	f7f8 fed0 	bl	80068d2 <_fstat>
 800db32:	1c43      	adds	r3, r0, #1
 800db34:	d102      	bne.n	800db3c <_fstat_r+0x1c>
 800db36:	682b      	ldr	r3, [r5, #0]
 800db38:	b103      	cbz	r3, 800db3c <_fstat_r+0x1c>
 800db3a:	6023      	str	r3, [r4, #0]
 800db3c:	bd38      	pop	{r3, r4, r5, pc}
 800db3e:	bf00      	nop
 800db40:	20000fc4 	.word	0x20000fc4

0800db44 <_isatty_r>:
 800db44:	b538      	push	{r3, r4, r5, lr}
 800db46:	4d06      	ldr	r5, [pc, #24]	; (800db60 <_isatty_r+0x1c>)
 800db48:	2300      	movs	r3, #0
 800db4a:	4604      	mov	r4, r0
 800db4c:	4608      	mov	r0, r1
 800db4e:	602b      	str	r3, [r5, #0]
 800db50:	f7f8 fecf 	bl	80068f2 <_isatty>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	d102      	bne.n	800db5e <_isatty_r+0x1a>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	b103      	cbz	r3, 800db5e <_isatty_r+0x1a>
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	20000fc4 	.word	0x20000fc4

0800db64 <_lseek_r>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	4d07      	ldr	r5, [pc, #28]	; (800db84 <_lseek_r+0x20>)
 800db68:	4604      	mov	r4, r0
 800db6a:	4608      	mov	r0, r1
 800db6c:	4611      	mov	r1, r2
 800db6e:	2200      	movs	r2, #0
 800db70:	602a      	str	r2, [r5, #0]
 800db72:	461a      	mov	r2, r3
 800db74:	f7f8 fec8 	bl	8006908 <_lseek>
 800db78:	1c43      	adds	r3, r0, #1
 800db7a:	d102      	bne.n	800db82 <_lseek_r+0x1e>
 800db7c:	682b      	ldr	r3, [r5, #0]
 800db7e:	b103      	cbz	r3, 800db82 <_lseek_r+0x1e>
 800db80:	6023      	str	r3, [r4, #0]
 800db82:	bd38      	pop	{r3, r4, r5, pc}
 800db84:	20000fc4 	.word	0x20000fc4

0800db88 <_read_r>:
 800db88:	b538      	push	{r3, r4, r5, lr}
 800db8a:	4d07      	ldr	r5, [pc, #28]	; (800dba8 <_read_r+0x20>)
 800db8c:	4604      	mov	r4, r0
 800db8e:	4608      	mov	r0, r1
 800db90:	4611      	mov	r1, r2
 800db92:	2200      	movs	r2, #0
 800db94:	602a      	str	r2, [r5, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	f7f8 fe56 	bl	8006848 <_read>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d102      	bne.n	800dba6 <_read_r+0x1e>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	b103      	cbz	r3, 800dba6 <_read_r+0x1e>
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	20000fc4 	.word	0x20000fc4
 800dbac:	00000000 	.word	0x00000000

0800dbb0 <cos>:
 800dbb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbb2:	ec53 2b10 	vmov	r2, r3, d0
 800dbb6:	4826      	ldr	r0, [pc, #152]	; (800dc50 <cos+0xa0>)
 800dbb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dbbc:	4281      	cmp	r1, r0
 800dbbe:	dc06      	bgt.n	800dbce <cos+0x1e>
 800dbc0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800dc48 <cos+0x98>
 800dbc4:	b005      	add	sp, #20
 800dbc6:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbca:	f000 bee9 	b.w	800e9a0 <__kernel_cos>
 800dbce:	4821      	ldr	r0, [pc, #132]	; (800dc54 <cos+0xa4>)
 800dbd0:	4281      	cmp	r1, r0
 800dbd2:	dd09      	ble.n	800dbe8 <cos+0x38>
 800dbd4:	ee10 0a10 	vmov	r0, s0
 800dbd8:	4619      	mov	r1, r3
 800dbda:	f7f2 fb55 	bl	8000288 <__aeabi_dsub>
 800dbde:	ec41 0b10 	vmov	d0, r0, r1
 800dbe2:	b005      	add	sp, #20
 800dbe4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dbe8:	4668      	mov	r0, sp
 800dbea:	f000 fc19 	bl	800e420 <__ieee754_rem_pio2>
 800dbee:	f000 0003 	and.w	r0, r0, #3
 800dbf2:	2801      	cmp	r0, #1
 800dbf4:	d00b      	beq.n	800dc0e <cos+0x5e>
 800dbf6:	2802      	cmp	r0, #2
 800dbf8:	d016      	beq.n	800dc28 <cos+0x78>
 800dbfa:	b9e0      	cbnz	r0, 800dc36 <cos+0x86>
 800dbfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc00:	ed9d 0b00 	vldr	d0, [sp]
 800dc04:	f000 fecc 	bl	800e9a0 <__kernel_cos>
 800dc08:	ec51 0b10 	vmov	r0, r1, d0
 800dc0c:	e7e7      	b.n	800dbde <cos+0x2e>
 800dc0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc12:	ed9d 0b00 	vldr	d0, [sp]
 800dc16:	f001 fadb 	bl	800f1d0 <__kernel_sin>
 800dc1a:	ec53 2b10 	vmov	r2, r3, d0
 800dc1e:	ee10 0a10 	vmov	r0, s0
 800dc22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dc26:	e7da      	b.n	800dbde <cos+0x2e>
 800dc28:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc2c:	ed9d 0b00 	vldr	d0, [sp]
 800dc30:	f000 feb6 	bl	800e9a0 <__kernel_cos>
 800dc34:	e7f1      	b.n	800dc1a <cos+0x6a>
 800dc36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc3a:	ed9d 0b00 	vldr	d0, [sp]
 800dc3e:	2001      	movs	r0, #1
 800dc40:	f001 fac6 	bl	800f1d0 <__kernel_sin>
 800dc44:	e7e0      	b.n	800dc08 <cos+0x58>
 800dc46:	bf00      	nop
	...
 800dc50:	3fe921fb 	.word	0x3fe921fb
 800dc54:	7fefffff 	.word	0x7fefffff

0800dc58 <round>:
 800dc58:	ec51 0b10 	vmov	r0, r1, d0
 800dc5c:	b570      	push	{r4, r5, r6, lr}
 800dc5e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800dc62:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800dc66:	2c13      	cmp	r4, #19
 800dc68:	ee10 2a10 	vmov	r2, s0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	dc19      	bgt.n	800dca4 <round+0x4c>
 800dc70:	2c00      	cmp	r4, #0
 800dc72:	da09      	bge.n	800dc88 <round+0x30>
 800dc74:	3401      	adds	r4, #1
 800dc76:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dc7a:	d103      	bne.n	800dc84 <round+0x2c>
 800dc7c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dc80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc84:	2200      	movs	r2, #0
 800dc86:	e028      	b.n	800dcda <round+0x82>
 800dc88:	4d15      	ldr	r5, [pc, #84]	; (800dce0 <round+0x88>)
 800dc8a:	4125      	asrs	r5, r4
 800dc8c:	ea01 0605 	and.w	r6, r1, r5
 800dc90:	4332      	orrs	r2, r6
 800dc92:	d00e      	beq.n	800dcb2 <round+0x5a>
 800dc94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dc98:	fa42 f404 	asr.w	r4, r2, r4
 800dc9c:	4423      	add	r3, r4
 800dc9e:	ea23 0305 	bic.w	r3, r3, r5
 800dca2:	e7ef      	b.n	800dc84 <round+0x2c>
 800dca4:	2c33      	cmp	r4, #51	; 0x33
 800dca6:	dd07      	ble.n	800dcb8 <round+0x60>
 800dca8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dcac:	d101      	bne.n	800dcb2 <round+0x5a>
 800dcae:	f7f2 faed 	bl	800028c <__adddf3>
 800dcb2:	ec41 0b10 	vmov	d0, r0, r1
 800dcb6:	bd70      	pop	{r4, r5, r6, pc}
 800dcb8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800dcbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dcc0:	40f5      	lsrs	r5, r6
 800dcc2:	4228      	tst	r0, r5
 800dcc4:	d0f5      	beq.n	800dcb2 <round+0x5a>
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800dccc:	fa01 f404 	lsl.w	r4, r1, r4
 800dcd0:	1912      	adds	r2, r2, r4
 800dcd2:	bf28      	it	cs
 800dcd4:	185b      	addcs	r3, r3, r1
 800dcd6:	ea22 0205 	bic.w	r2, r2, r5
 800dcda:	4619      	mov	r1, r3
 800dcdc:	4610      	mov	r0, r2
 800dcde:	e7e8      	b.n	800dcb2 <round+0x5a>
 800dce0:	000fffff 	.word	0x000fffff
 800dce4:	00000000 	.word	0x00000000

0800dce8 <sin>:
 800dce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dcea:	ec53 2b10 	vmov	r2, r3, d0
 800dcee:	4828      	ldr	r0, [pc, #160]	; (800dd90 <sin+0xa8>)
 800dcf0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dcf4:	4281      	cmp	r1, r0
 800dcf6:	dc07      	bgt.n	800dd08 <sin+0x20>
 800dcf8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800dd88 <sin+0xa0>
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	b005      	add	sp, #20
 800dd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd04:	f001 ba64 	b.w	800f1d0 <__kernel_sin>
 800dd08:	4822      	ldr	r0, [pc, #136]	; (800dd94 <sin+0xac>)
 800dd0a:	4281      	cmp	r1, r0
 800dd0c:	dd09      	ble.n	800dd22 <sin+0x3a>
 800dd0e:	ee10 0a10 	vmov	r0, s0
 800dd12:	4619      	mov	r1, r3
 800dd14:	f7f2 fab8 	bl	8000288 <__aeabi_dsub>
 800dd18:	ec41 0b10 	vmov	d0, r0, r1
 800dd1c:	b005      	add	sp, #20
 800dd1e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd22:	4668      	mov	r0, sp
 800dd24:	f000 fb7c 	bl	800e420 <__ieee754_rem_pio2>
 800dd28:	f000 0003 	and.w	r0, r0, #3
 800dd2c:	2801      	cmp	r0, #1
 800dd2e:	d00c      	beq.n	800dd4a <sin+0x62>
 800dd30:	2802      	cmp	r0, #2
 800dd32:	d011      	beq.n	800dd58 <sin+0x70>
 800dd34:	b9f0      	cbnz	r0, 800dd74 <sin+0x8c>
 800dd36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd3a:	ed9d 0b00 	vldr	d0, [sp]
 800dd3e:	2001      	movs	r0, #1
 800dd40:	f001 fa46 	bl	800f1d0 <__kernel_sin>
 800dd44:	ec51 0b10 	vmov	r0, r1, d0
 800dd48:	e7e6      	b.n	800dd18 <sin+0x30>
 800dd4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd4e:	ed9d 0b00 	vldr	d0, [sp]
 800dd52:	f000 fe25 	bl	800e9a0 <__kernel_cos>
 800dd56:	e7f5      	b.n	800dd44 <sin+0x5c>
 800dd58:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd5c:	ed9d 0b00 	vldr	d0, [sp]
 800dd60:	2001      	movs	r0, #1
 800dd62:	f001 fa35 	bl	800f1d0 <__kernel_sin>
 800dd66:	ec53 2b10 	vmov	r2, r3, d0
 800dd6a:	ee10 0a10 	vmov	r0, s0
 800dd6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dd72:	e7d1      	b.n	800dd18 <sin+0x30>
 800dd74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd78:	ed9d 0b00 	vldr	d0, [sp]
 800dd7c:	f000 fe10 	bl	800e9a0 <__kernel_cos>
 800dd80:	e7f1      	b.n	800dd66 <sin+0x7e>
 800dd82:	bf00      	nop
 800dd84:	f3af 8000 	nop.w
	...
 800dd90:	3fe921fb 	.word	0x3fe921fb
 800dd94:	7fefffff 	.word	0x7fefffff

0800dd98 <asin>:
 800dd98:	b538      	push	{r3, r4, r5, lr}
 800dd9a:	ed2d 8b02 	vpush	{d8}
 800dd9e:	ec55 4b10 	vmov	r4, r5, d0
 800dda2:	f000 f85d 	bl	800de60 <__ieee754_asin>
 800dda6:	4622      	mov	r2, r4
 800dda8:	462b      	mov	r3, r5
 800ddaa:	4620      	mov	r0, r4
 800ddac:	4629      	mov	r1, r5
 800ddae:	eeb0 8a40 	vmov.f32	s16, s0
 800ddb2:	eef0 8a60 	vmov.f32	s17, s1
 800ddb6:	f7f2 feb9 	bl	8000b2c <__aeabi_dcmpun>
 800ddba:	b9a8      	cbnz	r0, 800dde8 <asin+0x50>
 800ddbc:	ec45 4b10 	vmov	d0, r4, r5
 800ddc0:	f001 fc66 	bl	800f690 <fabs>
 800ddc4:	4b0c      	ldr	r3, [pc, #48]	; (800ddf8 <asin+0x60>)
 800ddc6:	ec51 0b10 	vmov	r0, r1, d0
 800ddca:	2200      	movs	r2, #0
 800ddcc:	f7f2 fea4 	bl	8000b18 <__aeabi_dcmpgt>
 800ddd0:	b150      	cbz	r0, 800dde8 <asin+0x50>
 800ddd2:	f7fc ffc3 	bl	800ad5c <__errno>
 800ddd6:	ecbd 8b02 	vpop	{d8}
 800ddda:	2321      	movs	r3, #33	; 0x21
 800dddc:	6003      	str	r3, [r0, #0]
 800ddde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dde2:	4806      	ldr	r0, [pc, #24]	; (800ddfc <asin+0x64>)
 800dde4:	f001 bce0 	b.w	800f7a8 <nan>
 800dde8:	eeb0 0a48 	vmov.f32	s0, s16
 800ddec:	eef0 0a68 	vmov.f32	s1, s17
 800ddf0:	ecbd 8b02 	vpop	{d8}
 800ddf4:	bd38      	pop	{r3, r4, r5, pc}
 800ddf6:	bf00      	nop
 800ddf8:	3ff00000 	.word	0x3ff00000
 800ddfc:	080107d8 	.word	0x080107d8

0800de00 <atan2>:
 800de00:	f000 ba42 	b.w	800e288 <__ieee754_atan2>

0800de04 <sqrt>:
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	ed2d 8b02 	vpush	{d8}
 800de0a:	ec55 4b10 	vmov	r4, r5, d0
 800de0e:	f000 fd13 	bl	800e838 <__ieee754_sqrt>
 800de12:	4622      	mov	r2, r4
 800de14:	462b      	mov	r3, r5
 800de16:	4620      	mov	r0, r4
 800de18:	4629      	mov	r1, r5
 800de1a:	eeb0 8a40 	vmov.f32	s16, s0
 800de1e:	eef0 8a60 	vmov.f32	s17, s1
 800de22:	f7f2 fe83 	bl	8000b2c <__aeabi_dcmpun>
 800de26:	b990      	cbnz	r0, 800de4e <sqrt+0x4a>
 800de28:	2200      	movs	r2, #0
 800de2a:	2300      	movs	r3, #0
 800de2c:	4620      	mov	r0, r4
 800de2e:	4629      	mov	r1, r5
 800de30:	f7f2 fe54 	bl	8000adc <__aeabi_dcmplt>
 800de34:	b158      	cbz	r0, 800de4e <sqrt+0x4a>
 800de36:	f7fc ff91 	bl	800ad5c <__errno>
 800de3a:	2321      	movs	r3, #33	; 0x21
 800de3c:	6003      	str	r3, [r0, #0]
 800de3e:	2200      	movs	r2, #0
 800de40:	2300      	movs	r3, #0
 800de42:	4610      	mov	r0, r2
 800de44:	4619      	mov	r1, r3
 800de46:	f7f2 fd01 	bl	800084c <__aeabi_ddiv>
 800de4a:	ec41 0b18 	vmov	d8, r0, r1
 800de4e:	eeb0 0a48 	vmov.f32	s0, s16
 800de52:	eef0 0a68 	vmov.f32	s1, s17
 800de56:	ecbd 8b02 	vpop	{d8}
 800de5a:	bd38      	pop	{r3, r4, r5, pc}
 800de5c:	0000      	movs	r0, r0
	...

0800de60 <__ieee754_asin>:
 800de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	ed2d 8b04 	vpush	{d8-d9}
 800de68:	ec55 4b10 	vmov	r4, r5, d0
 800de6c:	4bcc      	ldr	r3, [pc, #816]	; (800e1a0 <__ieee754_asin+0x340>)
 800de6e:	b083      	sub	sp, #12
 800de70:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800de74:	4598      	cmp	r8, r3
 800de76:	9501      	str	r5, [sp, #4]
 800de78:	dd35      	ble.n	800dee6 <__ieee754_asin+0x86>
 800de7a:	ee10 3a10 	vmov	r3, s0
 800de7e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800de82:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800de86:	ea58 0303 	orrs.w	r3, r8, r3
 800de8a:	d117      	bne.n	800debc <__ieee754_asin+0x5c>
 800de8c:	a3aa      	add	r3, pc, #680	; (adr r3, 800e138 <__ieee754_asin+0x2d8>)
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	ee10 0a10 	vmov	r0, s0
 800de96:	4629      	mov	r1, r5
 800de98:	f7f2 fbae 	bl	80005f8 <__aeabi_dmul>
 800de9c:	a3a8      	add	r3, pc, #672	; (adr r3, 800e140 <__ieee754_asin+0x2e0>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	4606      	mov	r6, r0
 800dea4:	460f      	mov	r7, r1
 800dea6:	4620      	mov	r0, r4
 800dea8:	4629      	mov	r1, r5
 800deaa:	f7f2 fba5 	bl	80005f8 <__aeabi_dmul>
 800deae:	4602      	mov	r2, r0
 800deb0:	460b      	mov	r3, r1
 800deb2:	4630      	mov	r0, r6
 800deb4:	4639      	mov	r1, r7
 800deb6:	f7f2 f9e9 	bl	800028c <__adddf3>
 800deba:	e00b      	b.n	800ded4 <__ieee754_asin+0x74>
 800debc:	ee10 2a10 	vmov	r2, s0
 800dec0:	462b      	mov	r3, r5
 800dec2:	ee10 0a10 	vmov	r0, s0
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 f9de 	bl	8000288 <__aeabi_dsub>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	f7f2 fcbc 	bl	800084c <__aeabi_ddiv>
 800ded4:	4604      	mov	r4, r0
 800ded6:	460d      	mov	r5, r1
 800ded8:	ec45 4b10 	vmov	d0, r4, r5
 800dedc:	b003      	add	sp, #12
 800dede:	ecbd 8b04 	vpop	{d8-d9}
 800dee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dee6:	4baf      	ldr	r3, [pc, #700]	; (800e1a4 <__ieee754_asin+0x344>)
 800dee8:	4598      	cmp	r8, r3
 800deea:	dc11      	bgt.n	800df10 <__ieee754_asin+0xb0>
 800deec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800def0:	f280 80ae 	bge.w	800e050 <__ieee754_asin+0x1f0>
 800def4:	a394      	add	r3, pc, #592	; (adr r3, 800e148 <__ieee754_asin+0x2e8>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	ee10 0a10 	vmov	r0, s0
 800defe:	4629      	mov	r1, r5
 800df00:	f7f2 f9c4 	bl	800028c <__adddf3>
 800df04:	4ba8      	ldr	r3, [pc, #672]	; (800e1a8 <__ieee754_asin+0x348>)
 800df06:	2200      	movs	r2, #0
 800df08:	f7f2 fe06 	bl	8000b18 <__aeabi_dcmpgt>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d1e3      	bne.n	800ded8 <__ieee754_asin+0x78>
 800df10:	ec45 4b10 	vmov	d0, r4, r5
 800df14:	f001 fbbc 	bl	800f690 <fabs>
 800df18:	49a3      	ldr	r1, [pc, #652]	; (800e1a8 <__ieee754_asin+0x348>)
 800df1a:	ec53 2b10 	vmov	r2, r3, d0
 800df1e:	2000      	movs	r0, #0
 800df20:	f7f2 f9b2 	bl	8000288 <__aeabi_dsub>
 800df24:	4ba1      	ldr	r3, [pc, #644]	; (800e1ac <__ieee754_asin+0x34c>)
 800df26:	2200      	movs	r2, #0
 800df28:	f7f2 fb66 	bl	80005f8 <__aeabi_dmul>
 800df2c:	a388      	add	r3, pc, #544	; (adr r3, 800e150 <__ieee754_asin+0x2f0>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	4604      	mov	r4, r0
 800df34:	460d      	mov	r5, r1
 800df36:	f7f2 fb5f 	bl	80005f8 <__aeabi_dmul>
 800df3a:	a387      	add	r3, pc, #540	; (adr r3, 800e158 <__ieee754_asin+0x2f8>)
 800df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df40:	f7f2 f9a4 	bl	800028c <__adddf3>
 800df44:	4622      	mov	r2, r4
 800df46:	462b      	mov	r3, r5
 800df48:	f7f2 fb56 	bl	80005f8 <__aeabi_dmul>
 800df4c:	a384      	add	r3, pc, #528	; (adr r3, 800e160 <__ieee754_asin+0x300>)
 800df4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df52:	f7f2 f999 	bl	8000288 <__aeabi_dsub>
 800df56:	4622      	mov	r2, r4
 800df58:	462b      	mov	r3, r5
 800df5a:	f7f2 fb4d 	bl	80005f8 <__aeabi_dmul>
 800df5e:	a382      	add	r3, pc, #520	; (adr r3, 800e168 <__ieee754_asin+0x308>)
 800df60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df64:	f7f2 f992 	bl	800028c <__adddf3>
 800df68:	4622      	mov	r2, r4
 800df6a:	462b      	mov	r3, r5
 800df6c:	f7f2 fb44 	bl	80005f8 <__aeabi_dmul>
 800df70:	a37f      	add	r3, pc, #508	; (adr r3, 800e170 <__ieee754_asin+0x310>)
 800df72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df76:	f7f2 f987 	bl	8000288 <__aeabi_dsub>
 800df7a:	4622      	mov	r2, r4
 800df7c:	462b      	mov	r3, r5
 800df7e:	f7f2 fb3b 	bl	80005f8 <__aeabi_dmul>
 800df82:	a37d      	add	r3, pc, #500	; (adr r3, 800e178 <__ieee754_asin+0x318>)
 800df84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df88:	f7f2 f980 	bl	800028c <__adddf3>
 800df8c:	4622      	mov	r2, r4
 800df8e:	462b      	mov	r3, r5
 800df90:	f7f2 fb32 	bl	80005f8 <__aeabi_dmul>
 800df94:	a37a      	add	r3, pc, #488	; (adr r3, 800e180 <__ieee754_asin+0x320>)
 800df96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9a:	ec41 0b18 	vmov	d8, r0, r1
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	f7f2 fb29 	bl	80005f8 <__aeabi_dmul>
 800dfa6:	a378      	add	r3, pc, #480	; (adr r3, 800e188 <__ieee754_asin+0x328>)
 800dfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfac:	f7f2 f96c 	bl	8000288 <__aeabi_dsub>
 800dfb0:	4622      	mov	r2, r4
 800dfb2:	462b      	mov	r3, r5
 800dfb4:	f7f2 fb20 	bl	80005f8 <__aeabi_dmul>
 800dfb8:	a375      	add	r3, pc, #468	; (adr r3, 800e190 <__ieee754_asin+0x330>)
 800dfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfbe:	f7f2 f965 	bl	800028c <__adddf3>
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	462b      	mov	r3, r5
 800dfc6:	f7f2 fb17 	bl	80005f8 <__aeabi_dmul>
 800dfca:	a373      	add	r3, pc, #460	; (adr r3, 800e198 <__ieee754_asin+0x338>)
 800dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd0:	f7f2 f95a 	bl	8000288 <__aeabi_dsub>
 800dfd4:	4622      	mov	r2, r4
 800dfd6:	462b      	mov	r3, r5
 800dfd8:	f7f2 fb0e 	bl	80005f8 <__aeabi_dmul>
 800dfdc:	4b72      	ldr	r3, [pc, #456]	; (800e1a8 <__ieee754_asin+0x348>)
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f7f2 f954 	bl	800028c <__adddf3>
 800dfe4:	ec45 4b10 	vmov	d0, r4, r5
 800dfe8:	4606      	mov	r6, r0
 800dfea:	460f      	mov	r7, r1
 800dfec:	f000 fc24 	bl	800e838 <__ieee754_sqrt>
 800dff0:	4b6f      	ldr	r3, [pc, #444]	; (800e1b0 <__ieee754_asin+0x350>)
 800dff2:	4598      	cmp	r8, r3
 800dff4:	ec5b ab10 	vmov	sl, fp, d0
 800dff8:	f340 80dc 	ble.w	800e1b4 <__ieee754_asin+0x354>
 800dffc:	4632      	mov	r2, r6
 800dffe:	463b      	mov	r3, r7
 800e000:	ec51 0b18 	vmov	r0, r1, d8
 800e004:	f7f2 fc22 	bl	800084c <__aeabi_ddiv>
 800e008:	4652      	mov	r2, sl
 800e00a:	465b      	mov	r3, fp
 800e00c:	f7f2 faf4 	bl	80005f8 <__aeabi_dmul>
 800e010:	4652      	mov	r2, sl
 800e012:	465b      	mov	r3, fp
 800e014:	f7f2 f93a 	bl	800028c <__adddf3>
 800e018:	4602      	mov	r2, r0
 800e01a:	460b      	mov	r3, r1
 800e01c:	f7f2 f936 	bl	800028c <__adddf3>
 800e020:	a347      	add	r3, pc, #284	; (adr r3, 800e140 <__ieee754_asin+0x2e0>)
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	f7f2 f92f 	bl	8000288 <__aeabi_dsub>
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	a142      	add	r1, pc, #264	; (adr r1, 800e138 <__ieee754_asin+0x2d8>)
 800e030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e034:	f7f2 f928 	bl	8000288 <__aeabi_dsub>
 800e038:	9b01      	ldr	r3, [sp, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	bfdc      	itt	le
 800e03e:	4602      	movle	r2, r0
 800e040:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800e044:	4604      	mov	r4, r0
 800e046:	460d      	mov	r5, r1
 800e048:	bfdc      	itt	le
 800e04a:	4614      	movle	r4, r2
 800e04c:	461d      	movle	r5, r3
 800e04e:	e743      	b.n	800ded8 <__ieee754_asin+0x78>
 800e050:	ee10 2a10 	vmov	r2, s0
 800e054:	ee10 0a10 	vmov	r0, s0
 800e058:	462b      	mov	r3, r5
 800e05a:	4629      	mov	r1, r5
 800e05c:	f7f2 facc 	bl	80005f8 <__aeabi_dmul>
 800e060:	a33b      	add	r3, pc, #236	; (adr r3, 800e150 <__ieee754_asin+0x2f0>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	4606      	mov	r6, r0
 800e068:	460f      	mov	r7, r1
 800e06a:	f7f2 fac5 	bl	80005f8 <__aeabi_dmul>
 800e06e:	a33a      	add	r3, pc, #232	; (adr r3, 800e158 <__ieee754_asin+0x2f8>)
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	f7f2 f90a 	bl	800028c <__adddf3>
 800e078:	4632      	mov	r2, r6
 800e07a:	463b      	mov	r3, r7
 800e07c:	f7f2 fabc 	bl	80005f8 <__aeabi_dmul>
 800e080:	a337      	add	r3, pc, #220	; (adr r3, 800e160 <__ieee754_asin+0x300>)
 800e082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e086:	f7f2 f8ff 	bl	8000288 <__aeabi_dsub>
 800e08a:	4632      	mov	r2, r6
 800e08c:	463b      	mov	r3, r7
 800e08e:	f7f2 fab3 	bl	80005f8 <__aeabi_dmul>
 800e092:	a335      	add	r3, pc, #212	; (adr r3, 800e168 <__ieee754_asin+0x308>)
 800e094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e098:	f7f2 f8f8 	bl	800028c <__adddf3>
 800e09c:	4632      	mov	r2, r6
 800e09e:	463b      	mov	r3, r7
 800e0a0:	f7f2 faaa 	bl	80005f8 <__aeabi_dmul>
 800e0a4:	a332      	add	r3, pc, #200	; (adr r3, 800e170 <__ieee754_asin+0x310>)
 800e0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0aa:	f7f2 f8ed 	bl	8000288 <__aeabi_dsub>
 800e0ae:	4632      	mov	r2, r6
 800e0b0:	463b      	mov	r3, r7
 800e0b2:	f7f2 faa1 	bl	80005f8 <__aeabi_dmul>
 800e0b6:	a330      	add	r3, pc, #192	; (adr r3, 800e178 <__ieee754_asin+0x318>)
 800e0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0bc:	f7f2 f8e6 	bl	800028c <__adddf3>
 800e0c0:	4632      	mov	r2, r6
 800e0c2:	463b      	mov	r3, r7
 800e0c4:	f7f2 fa98 	bl	80005f8 <__aeabi_dmul>
 800e0c8:	a32d      	add	r3, pc, #180	; (adr r3, 800e180 <__ieee754_asin+0x320>)
 800e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ce:	4680      	mov	r8, r0
 800e0d0:	4689      	mov	r9, r1
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	f7f2 fa8f 	bl	80005f8 <__aeabi_dmul>
 800e0da:	a32b      	add	r3, pc, #172	; (adr r3, 800e188 <__ieee754_asin+0x328>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f7f2 f8d2 	bl	8000288 <__aeabi_dsub>
 800e0e4:	4632      	mov	r2, r6
 800e0e6:	463b      	mov	r3, r7
 800e0e8:	f7f2 fa86 	bl	80005f8 <__aeabi_dmul>
 800e0ec:	a328      	add	r3, pc, #160	; (adr r3, 800e190 <__ieee754_asin+0x330>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	f7f2 f8cb 	bl	800028c <__adddf3>
 800e0f6:	4632      	mov	r2, r6
 800e0f8:	463b      	mov	r3, r7
 800e0fa:	f7f2 fa7d 	bl	80005f8 <__aeabi_dmul>
 800e0fe:	a326      	add	r3, pc, #152	; (adr r3, 800e198 <__ieee754_asin+0x338>)
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	f7f2 f8c0 	bl	8000288 <__aeabi_dsub>
 800e108:	4632      	mov	r2, r6
 800e10a:	463b      	mov	r3, r7
 800e10c:	f7f2 fa74 	bl	80005f8 <__aeabi_dmul>
 800e110:	4b25      	ldr	r3, [pc, #148]	; (800e1a8 <__ieee754_asin+0x348>)
 800e112:	2200      	movs	r2, #0
 800e114:	f7f2 f8ba 	bl	800028c <__adddf3>
 800e118:	4602      	mov	r2, r0
 800e11a:	460b      	mov	r3, r1
 800e11c:	4640      	mov	r0, r8
 800e11e:	4649      	mov	r1, r9
 800e120:	f7f2 fb94 	bl	800084c <__aeabi_ddiv>
 800e124:	4622      	mov	r2, r4
 800e126:	462b      	mov	r3, r5
 800e128:	f7f2 fa66 	bl	80005f8 <__aeabi_dmul>
 800e12c:	4602      	mov	r2, r0
 800e12e:	460b      	mov	r3, r1
 800e130:	4620      	mov	r0, r4
 800e132:	4629      	mov	r1, r5
 800e134:	e6bf      	b.n	800deb6 <__ieee754_asin+0x56>
 800e136:	bf00      	nop
 800e138:	54442d18 	.word	0x54442d18
 800e13c:	3ff921fb 	.word	0x3ff921fb
 800e140:	33145c07 	.word	0x33145c07
 800e144:	3c91a626 	.word	0x3c91a626
 800e148:	8800759c 	.word	0x8800759c
 800e14c:	7e37e43c 	.word	0x7e37e43c
 800e150:	0dfdf709 	.word	0x0dfdf709
 800e154:	3f023de1 	.word	0x3f023de1
 800e158:	7501b288 	.word	0x7501b288
 800e15c:	3f49efe0 	.word	0x3f49efe0
 800e160:	b5688f3b 	.word	0xb5688f3b
 800e164:	3fa48228 	.word	0x3fa48228
 800e168:	0e884455 	.word	0x0e884455
 800e16c:	3fc9c155 	.word	0x3fc9c155
 800e170:	03eb6f7d 	.word	0x03eb6f7d
 800e174:	3fd4d612 	.word	0x3fd4d612
 800e178:	55555555 	.word	0x55555555
 800e17c:	3fc55555 	.word	0x3fc55555
 800e180:	b12e9282 	.word	0xb12e9282
 800e184:	3fb3b8c5 	.word	0x3fb3b8c5
 800e188:	1b8d0159 	.word	0x1b8d0159
 800e18c:	3fe6066c 	.word	0x3fe6066c
 800e190:	9c598ac8 	.word	0x9c598ac8
 800e194:	40002ae5 	.word	0x40002ae5
 800e198:	1c8a2d4b 	.word	0x1c8a2d4b
 800e19c:	40033a27 	.word	0x40033a27
 800e1a0:	3fefffff 	.word	0x3fefffff
 800e1a4:	3fdfffff 	.word	0x3fdfffff
 800e1a8:	3ff00000 	.word	0x3ff00000
 800e1ac:	3fe00000 	.word	0x3fe00000
 800e1b0:	3fef3332 	.word	0x3fef3332
 800e1b4:	ee10 2a10 	vmov	r2, s0
 800e1b8:	ee10 0a10 	vmov	r0, s0
 800e1bc:	465b      	mov	r3, fp
 800e1be:	4659      	mov	r1, fp
 800e1c0:	f7f2 f864 	bl	800028c <__adddf3>
 800e1c4:	4632      	mov	r2, r6
 800e1c6:	463b      	mov	r3, r7
 800e1c8:	ec41 0b19 	vmov	d9, r0, r1
 800e1cc:	ec51 0b18 	vmov	r0, r1, d8
 800e1d0:	f7f2 fb3c 	bl	800084c <__aeabi_ddiv>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	ec51 0b19 	vmov	r0, r1, d9
 800e1dc:	f7f2 fa0c 	bl	80005f8 <__aeabi_dmul>
 800e1e0:	f04f 0800 	mov.w	r8, #0
 800e1e4:	4606      	mov	r6, r0
 800e1e6:	460f      	mov	r7, r1
 800e1e8:	4642      	mov	r2, r8
 800e1ea:	465b      	mov	r3, fp
 800e1ec:	4640      	mov	r0, r8
 800e1ee:	4659      	mov	r1, fp
 800e1f0:	f7f2 fa02 	bl	80005f8 <__aeabi_dmul>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	4620      	mov	r0, r4
 800e1fa:	4629      	mov	r1, r5
 800e1fc:	f7f2 f844 	bl	8000288 <__aeabi_dsub>
 800e200:	4642      	mov	r2, r8
 800e202:	4604      	mov	r4, r0
 800e204:	460d      	mov	r5, r1
 800e206:	465b      	mov	r3, fp
 800e208:	4650      	mov	r0, sl
 800e20a:	4659      	mov	r1, fp
 800e20c:	f7f2 f83e 	bl	800028c <__adddf3>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	4620      	mov	r0, r4
 800e216:	4629      	mov	r1, r5
 800e218:	f7f2 fb18 	bl	800084c <__aeabi_ddiv>
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	f7f2 f834 	bl	800028c <__adddf3>
 800e224:	4602      	mov	r2, r0
 800e226:	460b      	mov	r3, r1
 800e228:	a113      	add	r1, pc, #76	; (adr r1, 800e278 <__ieee754_asin+0x418>)
 800e22a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e22e:	f7f2 f82b 	bl	8000288 <__aeabi_dsub>
 800e232:	4602      	mov	r2, r0
 800e234:	460b      	mov	r3, r1
 800e236:	4630      	mov	r0, r6
 800e238:	4639      	mov	r1, r7
 800e23a:	f7f2 f825 	bl	8000288 <__aeabi_dsub>
 800e23e:	4642      	mov	r2, r8
 800e240:	4604      	mov	r4, r0
 800e242:	460d      	mov	r5, r1
 800e244:	465b      	mov	r3, fp
 800e246:	4640      	mov	r0, r8
 800e248:	4659      	mov	r1, fp
 800e24a:	f7f2 f81f 	bl	800028c <__adddf3>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	a10b      	add	r1, pc, #44	; (adr r1, 800e280 <__ieee754_asin+0x420>)
 800e254:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e258:	f7f2 f816 	bl	8000288 <__aeabi_dsub>
 800e25c:	4602      	mov	r2, r0
 800e25e:	460b      	mov	r3, r1
 800e260:	4620      	mov	r0, r4
 800e262:	4629      	mov	r1, r5
 800e264:	f7f2 f810 	bl	8000288 <__aeabi_dsub>
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	a104      	add	r1, pc, #16	; (adr r1, 800e280 <__ieee754_asin+0x420>)
 800e26e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e272:	e6df      	b.n	800e034 <__ieee754_asin+0x1d4>
 800e274:	f3af 8000 	nop.w
 800e278:	33145c07 	.word	0x33145c07
 800e27c:	3c91a626 	.word	0x3c91a626
 800e280:	54442d18 	.word	0x54442d18
 800e284:	3fe921fb 	.word	0x3fe921fb

0800e288 <__ieee754_atan2>:
 800e288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e28c:	ec57 6b11 	vmov	r6, r7, d1
 800e290:	4273      	negs	r3, r6
 800e292:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e418 <__ieee754_atan2+0x190>
 800e296:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e29a:	4333      	orrs	r3, r6
 800e29c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e2a0:	4573      	cmp	r3, lr
 800e2a2:	ec51 0b10 	vmov	r0, r1, d0
 800e2a6:	ee11 8a10 	vmov	r8, s2
 800e2aa:	d80a      	bhi.n	800e2c2 <__ieee754_atan2+0x3a>
 800e2ac:	4244      	negs	r4, r0
 800e2ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e2b2:	4304      	orrs	r4, r0
 800e2b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e2b8:	4574      	cmp	r4, lr
 800e2ba:	ee10 9a10 	vmov	r9, s0
 800e2be:	468c      	mov	ip, r1
 800e2c0:	d907      	bls.n	800e2d2 <__ieee754_atan2+0x4a>
 800e2c2:	4632      	mov	r2, r6
 800e2c4:	463b      	mov	r3, r7
 800e2c6:	f7f1 ffe1 	bl	800028c <__adddf3>
 800e2ca:	ec41 0b10 	vmov	d0, r0, r1
 800e2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e2d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e2da:	4334      	orrs	r4, r6
 800e2dc:	d103      	bne.n	800e2e6 <__ieee754_atan2+0x5e>
 800e2de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2e2:	f001 b835 	b.w	800f350 <atan>
 800e2e6:	17bc      	asrs	r4, r7, #30
 800e2e8:	f004 0402 	and.w	r4, r4, #2
 800e2ec:	ea53 0909 	orrs.w	r9, r3, r9
 800e2f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e2f4:	d107      	bne.n	800e306 <__ieee754_atan2+0x7e>
 800e2f6:	2c02      	cmp	r4, #2
 800e2f8:	d060      	beq.n	800e3bc <__ieee754_atan2+0x134>
 800e2fa:	2c03      	cmp	r4, #3
 800e2fc:	d1e5      	bne.n	800e2ca <__ieee754_atan2+0x42>
 800e2fe:	a142      	add	r1, pc, #264	; (adr r1, 800e408 <__ieee754_atan2+0x180>)
 800e300:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e304:	e7e1      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e306:	ea52 0808 	orrs.w	r8, r2, r8
 800e30a:	d106      	bne.n	800e31a <__ieee754_atan2+0x92>
 800e30c:	f1bc 0f00 	cmp.w	ip, #0
 800e310:	da5f      	bge.n	800e3d2 <__ieee754_atan2+0x14a>
 800e312:	a13f      	add	r1, pc, #252	; (adr r1, 800e410 <__ieee754_atan2+0x188>)
 800e314:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e318:	e7d7      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e31a:	4572      	cmp	r2, lr
 800e31c:	d10f      	bne.n	800e33e <__ieee754_atan2+0xb6>
 800e31e:	4293      	cmp	r3, r2
 800e320:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e324:	d107      	bne.n	800e336 <__ieee754_atan2+0xae>
 800e326:	2c02      	cmp	r4, #2
 800e328:	d84c      	bhi.n	800e3c4 <__ieee754_atan2+0x13c>
 800e32a:	4b35      	ldr	r3, [pc, #212]	; (800e400 <__ieee754_atan2+0x178>)
 800e32c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e330:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e334:	e7c9      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e336:	2c02      	cmp	r4, #2
 800e338:	d848      	bhi.n	800e3cc <__ieee754_atan2+0x144>
 800e33a:	4b32      	ldr	r3, [pc, #200]	; (800e404 <__ieee754_atan2+0x17c>)
 800e33c:	e7f6      	b.n	800e32c <__ieee754_atan2+0xa4>
 800e33e:	4573      	cmp	r3, lr
 800e340:	d0e4      	beq.n	800e30c <__ieee754_atan2+0x84>
 800e342:	1a9b      	subs	r3, r3, r2
 800e344:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e348:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e34c:	da1e      	bge.n	800e38c <__ieee754_atan2+0x104>
 800e34e:	2f00      	cmp	r7, #0
 800e350:	da01      	bge.n	800e356 <__ieee754_atan2+0xce>
 800e352:	323c      	adds	r2, #60	; 0x3c
 800e354:	db1e      	blt.n	800e394 <__ieee754_atan2+0x10c>
 800e356:	4632      	mov	r2, r6
 800e358:	463b      	mov	r3, r7
 800e35a:	f7f2 fa77 	bl	800084c <__aeabi_ddiv>
 800e35e:	ec41 0b10 	vmov	d0, r0, r1
 800e362:	f001 f995 	bl	800f690 <fabs>
 800e366:	f000 fff3 	bl	800f350 <atan>
 800e36a:	ec51 0b10 	vmov	r0, r1, d0
 800e36e:	2c01      	cmp	r4, #1
 800e370:	d013      	beq.n	800e39a <__ieee754_atan2+0x112>
 800e372:	2c02      	cmp	r4, #2
 800e374:	d015      	beq.n	800e3a2 <__ieee754_atan2+0x11a>
 800e376:	2c00      	cmp	r4, #0
 800e378:	d0a7      	beq.n	800e2ca <__ieee754_atan2+0x42>
 800e37a:	a319      	add	r3, pc, #100	; (adr r3, 800e3e0 <__ieee754_atan2+0x158>)
 800e37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e380:	f7f1 ff82 	bl	8000288 <__aeabi_dsub>
 800e384:	a318      	add	r3, pc, #96	; (adr r3, 800e3e8 <__ieee754_atan2+0x160>)
 800e386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38a:	e014      	b.n	800e3b6 <__ieee754_atan2+0x12e>
 800e38c:	a118      	add	r1, pc, #96	; (adr r1, 800e3f0 <__ieee754_atan2+0x168>)
 800e38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e392:	e7ec      	b.n	800e36e <__ieee754_atan2+0xe6>
 800e394:	2000      	movs	r0, #0
 800e396:	2100      	movs	r1, #0
 800e398:	e7e9      	b.n	800e36e <__ieee754_atan2+0xe6>
 800e39a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e39e:	4619      	mov	r1, r3
 800e3a0:	e793      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e3a2:	a30f      	add	r3, pc, #60	; (adr r3, 800e3e0 <__ieee754_atan2+0x158>)
 800e3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a8:	f7f1 ff6e 	bl	8000288 <__aeabi_dsub>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	460b      	mov	r3, r1
 800e3b0:	a10d      	add	r1, pc, #52	; (adr r1, 800e3e8 <__ieee754_atan2+0x160>)
 800e3b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3b6:	f7f1 ff67 	bl	8000288 <__aeabi_dsub>
 800e3ba:	e786      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e3bc:	a10a      	add	r1, pc, #40	; (adr r1, 800e3e8 <__ieee754_atan2+0x160>)
 800e3be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3c2:	e782      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e3c4:	a10c      	add	r1, pc, #48	; (adr r1, 800e3f8 <__ieee754_atan2+0x170>)
 800e3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3ca:	e77e      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	e77b      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e3d2:	a107      	add	r1, pc, #28	; (adr r1, 800e3f0 <__ieee754_atan2+0x168>)
 800e3d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3d8:	e777      	b.n	800e2ca <__ieee754_atan2+0x42>
 800e3da:	bf00      	nop
 800e3dc:	f3af 8000 	nop.w
 800e3e0:	33145c07 	.word	0x33145c07
 800e3e4:	3ca1a626 	.word	0x3ca1a626
 800e3e8:	54442d18 	.word	0x54442d18
 800e3ec:	400921fb 	.word	0x400921fb
 800e3f0:	54442d18 	.word	0x54442d18
 800e3f4:	3ff921fb 	.word	0x3ff921fb
 800e3f8:	54442d18 	.word	0x54442d18
 800e3fc:	3fe921fb 	.word	0x3fe921fb
 800e400:	08010948 	.word	0x08010948
 800e404:	08010960 	.word	0x08010960
 800e408:	54442d18 	.word	0x54442d18
 800e40c:	c00921fb 	.word	0xc00921fb
 800e410:	54442d18 	.word	0x54442d18
 800e414:	bff921fb 	.word	0xbff921fb
 800e418:	7ff00000 	.word	0x7ff00000
 800e41c:	00000000 	.word	0x00000000

0800e420 <__ieee754_rem_pio2>:
 800e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	ed2d 8b02 	vpush	{d8}
 800e428:	ec55 4b10 	vmov	r4, r5, d0
 800e42c:	4bca      	ldr	r3, [pc, #808]	; (800e758 <__ieee754_rem_pio2+0x338>)
 800e42e:	b08b      	sub	sp, #44	; 0x2c
 800e430:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e434:	4598      	cmp	r8, r3
 800e436:	4682      	mov	sl, r0
 800e438:	9502      	str	r5, [sp, #8]
 800e43a:	dc08      	bgt.n	800e44e <__ieee754_rem_pio2+0x2e>
 800e43c:	2200      	movs	r2, #0
 800e43e:	2300      	movs	r3, #0
 800e440:	ed80 0b00 	vstr	d0, [r0]
 800e444:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e448:	f04f 0b00 	mov.w	fp, #0
 800e44c:	e028      	b.n	800e4a0 <__ieee754_rem_pio2+0x80>
 800e44e:	4bc3      	ldr	r3, [pc, #780]	; (800e75c <__ieee754_rem_pio2+0x33c>)
 800e450:	4598      	cmp	r8, r3
 800e452:	dc78      	bgt.n	800e546 <__ieee754_rem_pio2+0x126>
 800e454:	9b02      	ldr	r3, [sp, #8]
 800e456:	4ec2      	ldr	r6, [pc, #776]	; (800e760 <__ieee754_rem_pio2+0x340>)
 800e458:	2b00      	cmp	r3, #0
 800e45a:	ee10 0a10 	vmov	r0, s0
 800e45e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e720 <__ieee754_rem_pio2+0x300>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	4629      	mov	r1, r5
 800e466:	dd39      	ble.n	800e4dc <__ieee754_rem_pio2+0xbc>
 800e468:	f7f1 ff0e 	bl	8000288 <__aeabi_dsub>
 800e46c:	45b0      	cmp	r8, r6
 800e46e:	4604      	mov	r4, r0
 800e470:	460d      	mov	r5, r1
 800e472:	d01b      	beq.n	800e4ac <__ieee754_rem_pio2+0x8c>
 800e474:	a3ac      	add	r3, pc, #688	; (adr r3, 800e728 <__ieee754_rem_pio2+0x308>)
 800e476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47a:	f7f1 ff05 	bl	8000288 <__aeabi_dsub>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	e9ca 2300 	strd	r2, r3, [sl]
 800e486:	4620      	mov	r0, r4
 800e488:	4629      	mov	r1, r5
 800e48a:	f7f1 fefd 	bl	8000288 <__aeabi_dsub>
 800e48e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e728 <__ieee754_rem_pio2+0x308>)
 800e490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e494:	f7f1 fef8 	bl	8000288 <__aeabi_dsub>
 800e498:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e49c:	f04f 0b01 	mov.w	fp, #1
 800e4a0:	4658      	mov	r0, fp
 800e4a2:	b00b      	add	sp, #44	; 0x2c
 800e4a4:	ecbd 8b02 	vpop	{d8}
 800e4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ac:	a3a0      	add	r3, pc, #640	; (adr r3, 800e730 <__ieee754_rem_pio2+0x310>)
 800e4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b2:	f7f1 fee9 	bl	8000288 <__aeabi_dsub>
 800e4b6:	a3a0      	add	r3, pc, #640	; (adr r3, 800e738 <__ieee754_rem_pio2+0x318>)
 800e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4bc:	4604      	mov	r4, r0
 800e4be:	460d      	mov	r5, r1
 800e4c0:	f7f1 fee2 	bl	8000288 <__aeabi_dsub>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	e9ca 2300 	strd	r2, r3, [sl]
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	f7f1 feda 	bl	8000288 <__aeabi_dsub>
 800e4d4:	a398      	add	r3, pc, #608	; (adr r3, 800e738 <__ieee754_rem_pio2+0x318>)
 800e4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4da:	e7db      	b.n	800e494 <__ieee754_rem_pio2+0x74>
 800e4dc:	f7f1 fed6 	bl	800028c <__adddf3>
 800e4e0:	45b0      	cmp	r8, r6
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	460d      	mov	r5, r1
 800e4e6:	d016      	beq.n	800e516 <__ieee754_rem_pio2+0xf6>
 800e4e8:	a38f      	add	r3, pc, #572	; (adr r3, 800e728 <__ieee754_rem_pio2+0x308>)
 800e4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ee:	f7f1 fecd 	bl	800028c <__adddf3>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	e9ca 2300 	strd	r2, r3, [sl]
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	4629      	mov	r1, r5
 800e4fe:	f7f1 fec3 	bl	8000288 <__aeabi_dsub>
 800e502:	a389      	add	r3, pc, #548	; (adr r3, 800e728 <__ieee754_rem_pio2+0x308>)
 800e504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e508:	f7f1 fec0 	bl	800028c <__adddf3>
 800e50c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e510:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e514:	e7c4      	b.n	800e4a0 <__ieee754_rem_pio2+0x80>
 800e516:	a386      	add	r3, pc, #536	; (adr r3, 800e730 <__ieee754_rem_pio2+0x310>)
 800e518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e51c:	f7f1 feb6 	bl	800028c <__adddf3>
 800e520:	a385      	add	r3, pc, #532	; (adr r3, 800e738 <__ieee754_rem_pio2+0x318>)
 800e522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e526:	4604      	mov	r4, r0
 800e528:	460d      	mov	r5, r1
 800e52a:	f7f1 feaf 	bl	800028c <__adddf3>
 800e52e:	4602      	mov	r2, r0
 800e530:	460b      	mov	r3, r1
 800e532:	e9ca 2300 	strd	r2, r3, [sl]
 800e536:	4620      	mov	r0, r4
 800e538:	4629      	mov	r1, r5
 800e53a:	f7f1 fea5 	bl	8000288 <__aeabi_dsub>
 800e53e:	a37e      	add	r3, pc, #504	; (adr r3, 800e738 <__ieee754_rem_pio2+0x318>)
 800e540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e544:	e7e0      	b.n	800e508 <__ieee754_rem_pio2+0xe8>
 800e546:	4b87      	ldr	r3, [pc, #540]	; (800e764 <__ieee754_rem_pio2+0x344>)
 800e548:	4598      	cmp	r8, r3
 800e54a:	f300 80d9 	bgt.w	800e700 <__ieee754_rem_pio2+0x2e0>
 800e54e:	f001 f89f 	bl	800f690 <fabs>
 800e552:	ec55 4b10 	vmov	r4, r5, d0
 800e556:	ee10 0a10 	vmov	r0, s0
 800e55a:	a379      	add	r3, pc, #484	; (adr r3, 800e740 <__ieee754_rem_pio2+0x320>)
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	4629      	mov	r1, r5
 800e562:	f7f2 f849 	bl	80005f8 <__aeabi_dmul>
 800e566:	4b80      	ldr	r3, [pc, #512]	; (800e768 <__ieee754_rem_pio2+0x348>)
 800e568:	2200      	movs	r2, #0
 800e56a:	f7f1 fe8f 	bl	800028c <__adddf3>
 800e56e:	f7f2 faf3 	bl	8000b58 <__aeabi_d2iz>
 800e572:	4683      	mov	fp, r0
 800e574:	f7f1 ffd6 	bl	8000524 <__aeabi_i2d>
 800e578:	4602      	mov	r2, r0
 800e57a:	460b      	mov	r3, r1
 800e57c:	ec43 2b18 	vmov	d8, r2, r3
 800e580:	a367      	add	r3, pc, #412	; (adr r3, 800e720 <__ieee754_rem_pio2+0x300>)
 800e582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e586:	f7f2 f837 	bl	80005f8 <__aeabi_dmul>
 800e58a:	4602      	mov	r2, r0
 800e58c:	460b      	mov	r3, r1
 800e58e:	4620      	mov	r0, r4
 800e590:	4629      	mov	r1, r5
 800e592:	f7f1 fe79 	bl	8000288 <__aeabi_dsub>
 800e596:	a364      	add	r3, pc, #400	; (adr r3, 800e728 <__ieee754_rem_pio2+0x308>)
 800e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e59c:	4606      	mov	r6, r0
 800e59e:	460f      	mov	r7, r1
 800e5a0:	ec51 0b18 	vmov	r0, r1, d8
 800e5a4:	f7f2 f828 	bl	80005f8 <__aeabi_dmul>
 800e5a8:	f1bb 0f1f 	cmp.w	fp, #31
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	dc0d      	bgt.n	800e5ce <__ieee754_rem_pio2+0x1ae>
 800e5b2:	4b6e      	ldr	r3, [pc, #440]	; (800e76c <__ieee754_rem_pio2+0x34c>)
 800e5b4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5bc:	4543      	cmp	r3, r8
 800e5be:	d006      	beq.n	800e5ce <__ieee754_rem_pio2+0x1ae>
 800e5c0:	4622      	mov	r2, r4
 800e5c2:	462b      	mov	r3, r5
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	f7f1 fe5e 	bl	8000288 <__aeabi_dsub>
 800e5cc:	e00f      	b.n	800e5ee <__ieee754_rem_pio2+0x1ce>
 800e5ce:	462b      	mov	r3, r5
 800e5d0:	4622      	mov	r2, r4
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	4639      	mov	r1, r7
 800e5d6:	f7f1 fe57 	bl	8000288 <__aeabi_dsub>
 800e5da:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e5de:	9303      	str	r3, [sp, #12]
 800e5e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e5e8:	f1b8 0f10 	cmp.w	r8, #16
 800e5ec:	dc02      	bgt.n	800e5f4 <__ieee754_rem_pio2+0x1d4>
 800e5ee:	e9ca 0100 	strd	r0, r1, [sl]
 800e5f2:	e039      	b.n	800e668 <__ieee754_rem_pio2+0x248>
 800e5f4:	a34e      	add	r3, pc, #312	; (adr r3, 800e730 <__ieee754_rem_pio2+0x310>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	ec51 0b18 	vmov	r0, r1, d8
 800e5fe:	f7f1 fffb 	bl	80005f8 <__aeabi_dmul>
 800e602:	4604      	mov	r4, r0
 800e604:	460d      	mov	r5, r1
 800e606:	4602      	mov	r2, r0
 800e608:	460b      	mov	r3, r1
 800e60a:	4630      	mov	r0, r6
 800e60c:	4639      	mov	r1, r7
 800e60e:	f7f1 fe3b 	bl	8000288 <__aeabi_dsub>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	4680      	mov	r8, r0
 800e618:	4689      	mov	r9, r1
 800e61a:	4630      	mov	r0, r6
 800e61c:	4639      	mov	r1, r7
 800e61e:	f7f1 fe33 	bl	8000288 <__aeabi_dsub>
 800e622:	4622      	mov	r2, r4
 800e624:	462b      	mov	r3, r5
 800e626:	f7f1 fe2f 	bl	8000288 <__aeabi_dsub>
 800e62a:	a343      	add	r3, pc, #268	; (adr r3, 800e738 <__ieee754_rem_pio2+0x318>)
 800e62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e630:	4604      	mov	r4, r0
 800e632:	460d      	mov	r5, r1
 800e634:	ec51 0b18 	vmov	r0, r1, d8
 800e638:	f7f1 ffde 	bl	80005f8 <__aeabi_dmul>
 800e63c:	4622      	mov	r2, r4
 800e63e:	462b      	mov	r3, r5
 800e640:	f7f1 fe22 	bl	8000288 <__aeabi_dsub>
 800e644:	4602      	mov	r2, r0
 800e646:	460b      	mov	r3, r1
 800e648:	4604      	mov	r4, r0
 800e64a:	460d      	mov	r5, r1
 800e64c:	4640      	mov	r0, r8
 800e64e:	4649      	mov	r1, r9
 800e650:	f7f1 fe1a 	bl	8000288 <__aeabi_dsub>
 800e654:	9a03      	ldr	r2, [sp, #12]
 800e656:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e65a:	1ad3      	subs	r3, r2, r3
 800e65c:	2b31      	cmp	r3, #49	; 0x31
 800e65e:	dc24      	bgt.n	800e6aa <__ieee754_rem_pio2+0x28a>
 800e660:	e9ca 0100 	strd	r0, r1, [sl]
 800e664:	4646      	mov	r6, r8
 800e666:	464f      	mov	r7, r9
 800e668:	e9da 8900 	ldrd	r8, r9, [sl]
 800e66c:	4630      	mov	r0, r6
 800e66e:	4642      	mov	r2, r8
 800e670:	464b      	mov	r3, r9
 800e672:	4639      	mov	r1, r7
 800e674:	f7f1 fe08 	bl	8000288 <__aeabi_dsub>
 800e678:	462b      	mov	r3, r5
 800e67a:	4622      	mov	r2, r4
 800e67c:	f7f1 fe04 	bl	8000288 <__aeabi_dsub>
 800e680:	9b02      	ldr	r3, [sp, #8]
 800e682:	2b00      	cmp	r3, #0
 800e684:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e688:	f6bf af0a 	bge.w	800e4a0 <__ieee754_rem_pio2+0x80>
 800e68c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e690:	f8ca 3004 	str.w	r3, [sl, #4]
 800e694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e698:	f8ca 8000 	str.w	r8, [sl]
 800e69c:	f8ca 0008 	str.w	r0, [sl, #8]
 800e6a0:	f8ca 300c 	str.w	r3, [sl, #12]
 800e6a4:	f1cb 0b00 	rsb	fp, fp, #0
 800e6a8:	e6fa      	b.n	800e4a0 <__ieee754_rem_pio2+0x80>
 800e6aa:	a327      	add	r3, pc, #156	; (adr r3, 800e748 <__ieee754_rem_pio2+0x328>)
 800e6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b0:	ec51 0b18 	vmov	r0, r1, d8
 800e6b4:	f7f1 ffa0 	bl	80005f8 <__aeabi_dmul>
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	460d      	mov	r5, r1
 800e6bc:	4602      	mov	r2, r0
 800e6be:	460b      	mov	r3, r1
 800e6c0:	4640      	mov	r0, r8
 800e6c2:	4649      	mov	r1, r9
 800e6c4:	f7f1 fde0 	bl	8000288 <__aeabi_dsub>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	4606      	mov	r6, r0
 800e6ce:	460f      	mov	r7, r1
 800e6d0:	4640      	mov	r0, r8
 800e6d2:	4649      	mov	r1, r9
 800e6d4:	f7f1 fdd8 	bl	8000288 <__aeabi_dsub>
 800e6d8:	4622      	mov	r2, r4
 800e6da:	462b      	mov	r3, r5
 800e6dc:	f7f1 fdd4 	bl	8000288 <__aeabi_dsub>
 800e6e0:	a31b      	add	r3, pc, #108	; (adr r3, 800e750 <__ieee754_rem_pio2+0x330>)
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	4604      	mov	r4, r0
 800e6e8:	460d      	mov	r5, r1
 800e6ea:	ec51 0b18 	vmov	r0, r1, d8
 800e6ee:	f7f1 ff83 	bl	80005f8 <__aeabi_dmul>
 800e6f2:	4622      	mov	r2, r4
 800e6f4:	462b      	mov	r3, r5
 800e6f6:	f7f1 fdc7 	bl	8000288 <__aeabi_dsub>
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	460d      	mov	r5, r1
 800e6fe:	e75f      	b.n	800e5c0 <__ieee754_rem_pio2+0x1a0>
 800e700:	4b1b      	ldr	r3, [pc, #108]	; (800e770 <__ieee754_rem_pio2+0x350>)
 800e702:	4598      	cmp	r8, r3
 800e704:	dd36      	ble.n	800e774 <__ieee754_rem_pio2+0x354>
 800e706:	ee10 2a10 	vmov	r2, s0
 800e70a:	462b      	mov	r3, r5
 800e70c:	4620      	mov	r0, r4
 800e70e:	4629      	mov	r1, r5
 800e710:	f7f1 fdba 	bl	8000288 <__aeabi_dsub>
 800e714:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e718:	e9ca 0100 	strd	r0, r1, [sl]
 800e71c:	e694      	b.n	800e448 <__ieee754_rem_pio2+0x28>
 800e71e:	bf00      	nop
 800e720:	54400000 	.word	0x54400000
 800e724:	3ff921fb 	.word	0x3ff921fb
 800e728:	1a626331 	.word	0x1a626331
 800e72c:	3dd0b461 	.word	0x3dd0b461
 800e730:	1a600000 	.word	0x1a600000
 800e734:	3dd0b461 	.word	0x3dd0b461
 800e738:	2e037073 	.word	0x2e037073
 800e73c:	3ba3198a 	.word	0x3ba3198a
 800e740:	6dc9c883 	.word	0x6dc9c883
 800e744:	3fe45f30 	.word	0x3fe45f30
 800e748:	2e000000 	.word	0x2e000000
 800e74c:	3ba3198a 	.word	0x3ba3198a
 800e750:	252049c1 	.word	0x252049c1
 800e754:	397b839a 	.word	0x397b839a
 800e758:	3fe921fb 	.word	0x3fe921fb
 800e75c:	4002d97b 	.word	0x4002d97b
 800e760:	3ff921fb 	.word	0x3ff921fb
 800e764:	413921fb 	.word	0x413921fb
 800e768:	3fe00000 	.word	0x3fe00000
 800e76c:	08010978 	.word	0x08010978
 800e770:	7fefffff 	.word	0x7fefffff
 800e774:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e778:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e77c:	ee10 0a10 	vmov	r0, s0
 800e780:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e784:	ee10 6a10 	vmov	r6, s0
 800e788:	460f      	mov	r7, r1
 800e78a:	f7f2 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800e78e:	f7f1 fec9 	bl	8000524 <__aeabi_i2d>
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	4630      	mov	r0, r6
 800e798:	4639      	mov	r1, r7
 800e79a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e79e:	f7f1 fd73 	bl	8000288 <__aeabi_dsub>
 800e7a2:	4b23      	ldr	r3, [pc, #140]	; (800e830 <__ieee754_rem_pio2+0x410>)
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f7f1 ff27 	bl	80005f8 <__aeabi_dmul>
 800e7aa:	460f      	mov	r7, r1
 800e7ac:	4606      	mov	r6, r0
 800e7ae:	f7f2 f9d3 	bl	8000b58 <__aeabi_d2iz>
 800e7b2:	f7f1 feb7 	bl	8000524 <__aeabi_i2d>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	4639      	mov	r1, r7
 800e7be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e7c2:	f7f1 fd61 	bl	8000288 <__aeabi_dsub>
 800e7c6:	4b1a      	ldr	r3, [pc, #104]	; (800e830 <__ieee754_rem_pio2+0x410>)
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f7f1 ff15 	bl	80005f8 <__aeabi_dmul>
 800e7ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7d2:	ad04      	add	r5, sp, #16
 800e7d4:	f04f 0803 	mov.w	r8, #3
 800e7d8:	46a9      	mov	r9, r5
 800e7da:	2600      	movs	r6, #0
 800e7dc:	2700      	movs	r7, #0
 800e7de:	4632      	mov	r2, r6
 800e7e0:	463b      	mov	r3, r7
 800e7e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e7e6:	46c3      	mov	fp, r8
 800e7e8:	3d08      	subs	r5, #8
 800e7ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e7ee:	f7f2 f96b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d1f3      	bne.n	800e7de <__ieee754_rem_pio2+0x3be>
 800e7f6:	4b0f      	ldr	r3, [pc, #60]	; (800e834 <__ieee754_rem_pio2+0x414>)
 800e7f8:	9301      	str	r3, [sp, #4]
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	9300      	str	r3, [sp, #0]
 800e7fe:	4622      	mov	r2, r4
 800e800:	465b      	mov	r3, fp
 800e802:	4651      	mov	r1, sl
 800e804:	4648      	mov	r0, r9
 800e806:	f000 f993 	bl	800eb30 <__kernel_rem_pio2>
 800e80a:	9b02      	ldr	r3, [sp, #8]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	4683      	mov	fp, r0
 800e810:	f6bf ae46 	bge.w	800e4a0 <__ieee754_rem_pio2+0x80>
 800e814:	e9da 2100 	ldrd	r2, r1, [sl]
 800e818:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e81c:	e9ca 2300 	strd	r2, r3, [sl]
 800e820:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e824:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e828:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e82c:	e73a      	b.n	800e6a4 <__ieee754_rem_pio2+0x284>
 800e82e:	bf00      	nop
 800e830:	41700000 	.word	0x41700000
 800e834:	080109f8 	.word	0x080109f8

0800e838 <__ieee754_sqrt>:
 800e838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e83c:	ec55 4b10 	vmov	r4, r5, d0
 800e840:	4e55      	ldr	r6, [pc, #340]	; (800e998 <__ieee754_sqrt+0x160>)
 800e842:	43ae      	bics	r6, r5
 800e844:	ee10 0a10 	vmov	r0, s0
 800e848:	ee10 3a10 	vmov	r3, s0
 800e84c:	462a      	mov	r2, r5
 800e84e:	4629      	mov	r1, r5
 800e850:	d110      	bne.n	800e874 <__ieee754_sqrt+0x3c>
 800e852:	ee10 2a10 	vmov	r2, s0
 800e856:	462b      	mov	r3, r5
 800e858:	f7f1 fece 	bl	80005f8 <__aeabi_dmul>
 800e85c:	4602      	mov	r2, r0
 800e85e:	460b      	mov	r3, r1
 800e860:	4620      	mov	r0, r4
 800e862:	4629      	mov	r1, r5
 800e864:	f7f1 fd12 	bl	800028c <__adddf3>
 800e868:	4604      	mov	r4, r0
 800e86a:	460d      	mov	r5, r1
 800e86c:	ec45 4b10 	vmov	d0, r4, r5
 800e870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e874:	2d00      	cmp	r5, #0
 800e876:	dc10      	bgt.n	800e89a <__ieee754_sqrt+0x62>
 800e878:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e87c:	4330      	orrs	r0, r6
 800e87e:	d0f5      	beq.n	800e86c <__ieee754_sqrt+0x34>
 800e880:	b15d      	cbz	r5, 800e89a <__ieee754_sqrt+0x62>
 800e882:	ee10 2a10 	vmov	r2, s0
 800e886:	462b      	mov	r3, r5
 800e888:	ee10 0a10 	vmov	r0, s0
 800e88c:	f7f1 fcfc 	bl	8000288 <__aeabi_dsub>
 800e890:	4602      	mov	r2, r0
 800e892:	460b      	mov	r3, r1
 800e894:	f7f1 ffda 	bl	800084c <__aeabi_ddiv>
 800e898:	e7e6      	b.n	800e868 <__ieee754_sqrt+0x30>
 800e89a:	1512      	asrs	r2, r2, #20
 800e89c:	d074      	beq.n	800e988 <__ieee754_sqrt+0x150>
 800e89e:	07d4      	lsls	r4, r2, #31
 800e8a0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e8a4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e8a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e8ac:	bf5e      	ittt	pl
 800e8ae:	0fda      	lsrpl	r2, r3, #31
 800e8b0:	005b      	lslpl	r3, r3, #1
 800e8b2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e8b6:	2400      	movs	r4, #0
 800e8b8:	0fda      	lsrs	r2, r3, #31
 800e8ba:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e8be:	107f      	asrs	r7, r7, #1
 800e8c0:	005b      	lsls	r3, r3, #1
 800e8c2:	2516      	movs	r5, #22
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e8ca:	1886      	adds	r6, r0, r2
 800e8cc:	428e      	cmp	r6, r1
 800e8ce:	bfde      	ittt	le
 800e8d0:	1b89      	suble	r1, r1, r6
 800e8d2:	18b0      	addle	r0, r6, r2
 800e8d4:	18a4      	addle	r4, r4, r2
 800e8d6:	0049      	lsls	r1, r1, #1
 800e8d8:	3d01      	subs	r5, #1
 800e8da:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e8de:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e8e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e8e6:	d1f0      	bne.n	800e8ca <__ieee754_sqrt+0x92>
 800e8e8:	462a      	mov	r2, r5
 800e8ea:	f04f 0e20 	mov.w	lr, #32
 800e8ee:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e8f2:	4281      	cmp	r1, r0
 800e8f4:	eb06 0c05 	add.w	ip, r6, r5
 800e8f8:	dc02      	bgt.n	800e900 <__ieee754_sqrt+0xc8>
 800e8fa:	d113      	bne.n	800e924 <__ieee754_sqrt+0xec>
 800e8fc:	459c      	cmp	ip, r3
 800e8fe:	d811      	bhi.n	800e924 <__ieee754_sqrt+0xec>
 800e900:	f1bc 0f00 	cmp.w	ip, #0
 800e904:	eb0c 0506 	add.w	r5, ip, r6
 800e908:	da43      	bge.n	800e992 <__ieee754_sqrt+0x15a>
 800e90a:	2d00      	cmp	r5, #0
 800e90c:	db41      	blt.n	800e992 <__ieee754_sqrt+0x15a>
 800e90e:	f100 0801 	add.w	r8, r0, #1
 800e912:	1a09      	subs	r1, r1, r0
 800e914:	459c      	cmp	ip, r3
 800e916:	bf88      	it	hi
 800e918:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800e91c:	eba3 030c 	sub.w	r3, r3, ip
 800e920:	4432      	add	r2, r6
 800e922:	4640      	mov	r0, r8
 800e924:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e928:	f1be 0e01 	subs.w	lr, lr, #1
 800e92c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e930:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e934:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e938:	d1db      	bne.n	800e8f2 <__ieee754_sqrt+0xba>
 800e93a:	430b      	orrs	r3, r1
 800e93c:	d006      	beq.n	800e94c <__ieee754_sqrt+0x114>
 800e93e:	1c50      	adds	r0, r2, #1
 800e940:	bf13      	iteet	ne
 800e942:	3201      	addne	r2, #1
 800e944:	3401      	addeq	r4, #1
 800e946:	4672      	moveq	r2, lr
 800e948:	f022 0201 	bicne.w	r2, r2, #1
 800e94c:	1063      	asrs	r3, r4, #1
 800e94e:	0852      	lsrs	r2, r2, #1
 800e950:	07e1      	lsls	r1, r4, #31
 800e952:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e956:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e95a:	bf48      	it	mi
 800e95c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e960:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e964:	4614      	mov	r4, r2
 800e966:	e781      	b.n	800e86c <__ieee754_sqrt+0x34>
 800e968:	0ad9      	lsrs	r1, r3, #11
 800e96a:	3815      	subs	r0, #21
 800e96c:	055b      	lsls	r3, r3, #21
 800e96e:	2900      	cmp	r1, #0
 800e970:	d0fa      	beq.n	800e968 <__ieee754_sqrt+0x130>
 800e972:	02cd      	lsls	r5, r1, #11
 800e974:	d50a      	bpl.n	800e98c <__ieee754_sqrt+0x154>
 800e976:	f1c2 0420 	rsb	r4, r2, #32
 800e97a:	fa23 f404 	lsr.w	r4, r3, r4
 800e97e:	1e55      	subs	r5, r2, #1
 800e980:	4093      	lsls	r3, r2
 800e982:	4321      	orrs	r1, r4
 800e984:	1b42      	subs	r2, r0, r5
 800e986:	e78a      	b.n	800e89e <__ieee754_sqrt+0x66>
 800e988:	4610      	mov	r0, r2
 800e98a:	e7f0      	b.n	800e96e <__ieee754_sqrt+0x136>
 800e98c:	0049      	lsls	r1, r1, #1
 800e98e:	3201      	adds	r2, #1
 800e990:	e7ef      	b.n	800e972 <__ieee754_sqrt+0x13a>
 800e992:	4680      	mov	r8, r0
 800e994:	e7bd      	b.n	800e912 <__ieee754_sqrt+0xda>
 800e996:	bf00      	nop
 800e998:	7ff00000 	.word	0x7ff00000
 800e99c:	00000000 	.word	0x00000000

0800e9a0 <__kernel_cos>:
 800e9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a4:	ec57 6b10 	vmov	r6, r7, d0
 800e9a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e9ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e9b0:	ed8d 1b00 	vstr	d1, [sp]
 800e9b4:	da07      	bge.n	800e9c6 <__kernel_cos+0x26>
 800e9b6:	ee10 0a10 	vmov	r0, s0
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	f7f2 f8cc 	bl	8000b58 <__aeabi_d2iz>
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	f000 8088 	beq.w	800ead6 <__kernel_cos+0x136>
 800e9c6:	4632      	mov	r2, r6
 800e9c8:	463b      	mov	r3, r7
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	4639      	mov	r1, r7
 800e9ce:	f7f1 fe13 	bl	80005f8 <__aeabi_dmul>
 800e9d2:	4b51      	ldr	r3, [pc, #324]	; (800eb18 <__kernel_cos+0x178>)
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	4604      	mov	r4, r0
 800e9d8:	460d      	mov	r5, r1
 800e9da:	f7f1 fe0d 	bl	80005f8 <__aeabi_dmul>
 800e9de:	a340      	add	r3, pc, #256	; (adr r3, 800eae0 <__kernel_cos+0x140>)
 800e9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e4:	4682      	mov	sl, r0
 800e9e6:	468b      	mov	fp, r1
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	f7f1 fe04 	bl	80005f8 <__aeabi_dmul>
 800e9f0:	a33d      	add	r3, pc, #244	; (adr r3, 800eae8 <__kernel_cos+0x148>)
 800e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f6:	f7f1 fc49 	bl	800028c <__adddf3>
 800e9fa:	4622      	mov	r2, r4
 800e9fc:	462b      	mov	r3, r5
 800e9fe:	f7f1 fdfb 	bl	80005f8 <__aeabi_dmul>
 800ea02:	a33b      	add	r3, pc, #236	; (adr r3, 800eaf0 <__kernel_cos+0x150>)
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	f7f1 fc3e 	bl	8000288 <__aeabi_dsub>
 800ea0c:	4622      	mov	r2, r4
 800ea0e:	462b      	mov	r3, r5
 800ea10:	f7f1 fdf2 	bl	80005f8 <__aeabi_dmul>
 800ea14:	a338      	add	r3, pc, #224	; (adr r3, 800eaf8 <__kernel_cos+0x158>)
 800ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1a:	f7f1 fc37 	bl	800028c <__adddf3>
 800ea1e:	4622      	mov	r2, r4
 800ea20:	462b      	mov	r3, r5
 800ea22:	f7f1 fde9 	bl	80005f8 <__aeabi_dmul>
 800ea26:	a336      	add	r3, pc, #216	; (adr r3, 800eb00 <__kernel_cos+0x160>)
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	f7f1 fc2c 	bl	8000288 <__aeabi_dsub>
 800ea30:	4622      	mov	r2, r4
 800ea32:	462b      	mov	r3, r5
 800ea34:	f7f1 fde0 	bl	80005f8 <__aeabi_dmul>
 800ea38:	a333      	add	r3, pc, #204	; (adr r3, 800eb08 <__kernel_cos+0x168>)
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	f7f1 fc25 	bl	800028c <__adddf3>
 800ea42:	4622      	mov	r2, r4
 800ea44:	462b      	mov	r3, r5
 800ea46:	f7f1 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ea4a:	4622      	mov	r2, r4
 800ea4c:	462b      	mov	r3, r5
 800ea4e:	f7f1 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ea52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea56:	4604      	mov	r4, r0
 800ea58:	460d      	mov	r5, r1
 800ea5a:	4630      	mov	r0, r6
 800ea5c:	4639      	mov	r1, r7
 800ea5e:	f7f1 fdcb 	bl	80005f8 <__aeabi_dmul>
 800ea62:	460b      	mov	r3, r1
 800ea64:	4602      	mov	r2, r0
 800ea66:	4629      	mov	r1, r5
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f7f1 fc0d 	bl	8000288 <__aeabi_dsub>
 800ea6e:	4b2b      	ldr	r3, [pc, #172]	; (800eb1c <__kernel_cos+0x17c>)
 800ea70:	4598      	cmp	r8, r3
 800ea72:	4606      	mov	r6, r0
 800ea74:	460f      	mov	r7, r1
 800ea76:	dc10      	bgt.n	800ea9a <__kernel_cos+0xfa>
 800ea78:	4602      	mov	r2, r0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4650      	mov	r0, sl
 800ea7e:	4659      	mov	r1, fp
 800ea80:	f7f1 fc02 	bl	8000288 <__aeabi_dsub>
 800ea84:	460b      	mov	r3, r1
 800ea86:	4926      	ldr	r1, [pc, #152]	; (800eb20 <__kernel_cos+0x180>)
 800ea88:	4602      	mov	r2, r0
 800ea8a:	2000      	movs	r0, #0
 800ea8c:	f7f1 fbfc 	bl	8000288 <__aeabi_dsub>
 800ea90:	ec41 0b10 	vmov	d0, r0, r1
 800ea94:	b003      	add	sp, #12
 800ea96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea9a:	4b22      	ldr	r3, [pc, #136]	; (800eb24 <__kernel_cos+0x184>)
 800ea9c:	4920      	ldr	r1, [pc, #128]	; (800eb20 <__kernel_cos+0x180>)
 800ea9e:	4598      	cmp	r8, r3
 800eaa0:	bfcc      	ite	gt
 800eaa2:	4d21      	ldrgt	r5, [pc, #132]	; (800eb28 <__kernel_cos+0x188>)
 800eaa4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800eaa8:	2400      	movs	r4, #0
 800eaaa:	4622      	mov	r2, r4
 800eaac:	462b      	mov	r3, r5
 800eaae:	2000      	movs	r0, #0
 800eab0:	f7f1 fbea 	bl	8000288 <__aeabi_dsub>
 800eab4:	4622      	mov	r2, r4
 800eab6:	4680      	mov	r8, r0
 800eab8:	4689      	mov	r9, r1
 800eaba:	462b      	mov	r3, r5
 800eabc:	4650      	mov	r0, sl
 800eabe:	4659      	mov	r1, fp
 800eac0:	f7f1 fbe2 	bl	8000288 <__aeabi_dsub>
 800eac4:	4632      	mov	r2, r6
 800eac6:	463b      	mov	r3, r7
 800eac8:	f7f1 fbde 	bl	8000288 <__aeabi_dsub>
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	4640      	mov	r0, r8
 800ead2:	4649      	mov	r1, r9
 800ead4:	e7da      	b.n	800ea8c <__kernel_cos+0xec>
 800ead6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800eb10 <__kernel_cos+0x170>
 800eada:	e7db      	b.n	800ea94 <__kernel_cos+0xf4>
 800eadc:	f3af 8000 	nop.w
 800eae0:	be8838d4 	.word	0xbe8838d4
 800eae4:	bda8fae9 	.word	0xbda8fae9
 800eae8:	bdb4b1c4 	.word	0xbdb4b1c4
 800eaec:	3e21ee9e 	.word	0x3e21ee9e
 800eaf0:	809c52ad 	.word	0x809c52ad
 800eaf4:	3e927e4f 	.word	0x3e927e4f
 800eaf8:	19cb1590 	.word	0x19cb1590
 800eafc:	3efa01a0 	.word	0x3efa01a0
 800eb00:	16c15177 	.word	0x16c15177
 800eb04:	3f56c16c 	.word	0x3f56c16c
 800eb08:	5555554c 	.word	0x5555554c
 800eb0c:	3fa55555 	.word	0x3fa55555
 800eb10:	00000000 	.word	0x00000000
 800eb14:	3ff00000 	.word	0x3ff00000
 800eb18:	3fe00000 	.word	0x3fe00000
 800eb1c:	3fd33332 	.word	0x3fd33332
 800eb20:	3ff00000 	.word	0x3ff00000
 800eb24:	3fe90000 	.word	0x3fe90000
 800eb28:	3fd20000 	.word	0x3fd20000
 800eb2c:	00000000 	.word	0x00000000

0800eb30 <__kernel_rem_pio2>:
 800eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb34:	ed2d 8b02 	vpush	{d8}
 800eb38:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800eb3c:	f112 0f14 	cmn.w	r2, #20
 800eb40:	9308      	str	r3, [sp, #32]
 800eb42:	9101      	str	r1, [sp, #4]
 800eb44:	4bc4      	ldr	r3, [pc, #784]	; (800ee58 <__kernel_rem_pio2+0x328>)
 800eb46:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800eb48:	900b      	str	r0, [sp, #44]	; 0x2c
 800eb4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb4e:	9302      	str	r3, [sp, #8]
 800eb50:	9b08      	ldr	r3, [sp, #32]
 800eb52:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800eb56:	bfa8      	it	ge
 800eb58:	1ed4      	subge	r4, r2, #3
 800eb5a:	9306      	str	r3, [sp, #24]
 800eb5c:	bfb2      	itee	lt
 800eb5e:	2400      	movlt	r4, #0
 800eb60:	2318      	movge	r3, #24
 800eb62:	fb94 f4f3 	sdivge	r4, r4, r3
 800eb66:	f06f 0317 	mvn.w	r3, #23
 800eb6a:	fb04 3303 	mla	r3, r4, r3, r3
 800eb6e:	eb03 0a02 	add.w	sl, r3, r2
 800eb72:	9b02      	ldr	r3, [sp, #8]
 800eb74:	9a06      	ldr	r2, [sp, #24]
 800eb76:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ee48 <__kernel_rem_pio2+0x318>
 800eb7a:	eb03 0802 	add.w	r8, r3, r2
 800eb7e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800eb80:	1aa7      	subs	r7, r4, r2
 800eb82:	ae22      	add	r6, sp, #136	; 0x88
 800eb84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eb88:	2500      	movs	r5, #0
 800eb8a:	4545      	cmp	r5, r8
 800eb8c:	dd13      	ble.n	800ebb6 <__kernel_rem_pio2+0x86>
 800eb8e:	9b08      	ldr	r3, [sp, #32]
 800eb90:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ee48 <__kernel_rem_pio2+0x318>
 800eb94:	aa22      	add	r2, sp, #136	; 0x88
 800eb96:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800eb9a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800eb9e:	f04f 0800 	mov.w	r8, #0
 800eba2:	9b02      	ldr	r3, [sp, #8]
 800eba4:	4598      	cmp	r8, r3
 800eba6:	dc2f      	bgt.n	800ec08 <__kernel_rem_pio2+0xd8>
 800eba8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ebac:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ebb0:	462f      	mov	r7, r5
 800ebb2:	2600      	movs	r6, #0
 800ebb4:	e01b      	b.n	800ebee <__kernel_rem_pio2+0xbe>
 800ebb6:	42ef      	cmn	r7, r5
 800ebb8:	d407      	bmi.n	800ebca <__kernel_rem_pio2+0x9a>
 800ebba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ebbe:	f7f1 fcb1 	bl	8000524 <__aeabi_i2d>
 800ebc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ebc6:	3501      	adds	r5, #1
 800ebc8:	e7df      	b.n	800eb8a <__kernel_rem_pio2+0x5a>
 800ebca:	ec51 0b18 	vmov	r0, r1, d8
 800ebce:	e7f8      	b.n	800ebc2 <__kernel_rem_pio2+0x92>
 800ebd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ebd8:	f7f1 fd0e 	bl	80005f8 <__aeabi_dmul>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	460b      	mov	r3, r1
 800ebe0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebe4:	f7f1 fb52 	bl	800028c <__adddf3>
 800ebe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebec:	3601      	adds	r6, #1
 800ebee:	9b06      	ldr	r3, [sp, #24]
 800ebf0:	429e      	cmp	r6, r3
 800ebf2:	f1a7 0708 	sub.w	r7, r7, #8
 800ebf6:	ddeb      	ble.n	800ebd0 <__kernel_rem_pio2+0xa0>
 800ebf8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ebfc:	f108 0801 	add.w	r8, r8, #1
 800ec00:	ecab 7b02 	vstmia	fp!, {d7}
 800ec04:	3508      	adds	r5, #8
 800ec06:	e7cc      	b.n	800eba2 <__kernel_rem_pio2+0x72>
 800ec08:	9b02      	ldr	r3, [sp, #8]
 800ec0a:	aa0e      	add	r2, sp, #56	; 0x38
 800ec0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec10:	930d      	str	r3, [sp, #52]	; 0x34
 800ec12:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ec14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ec18:	9c02      	ldr	r4, [sp, #8]
 800ec1a:	930c      	str	r3, [sp, #48]	; 0x30
 800ec1c:	00e3      	lsls	r3, r4, #3
 800ec1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec20:	ab9a      	add	r3, sp, #616	; 0x268
 800ec22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec26:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ec2a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ec2e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ec30:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ec34:	46c3      	mov	fp, r8
 800ec36:	46a1      	mov	r9, r4
 800ec38:	f1b9 0f00 	cmp.w	r9, #0
 800ec3c:	f1a5 0508 	sub.w	r5, r5, #8
 800ec40:	dc77      	bgt.n	800ed32 <__kernel_rem_pio2+0x202>
 800ec42:	ec47 6b10 	vmov	d0, r6, r7
 800ec46:	4650      	mov	r0, sl
 800ec48:	f000 fdb6 	bl	800f7b8 <scalbn>
 800ec4c:	ec57 6b10 	vmov	r6, r7, d0
 800ec50:	2200      	movs	r2, #0
 800ec52:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ec56:	ee10 0a10 	vmov	r0, s0
 800ec5a:	4639      	mov	r1, r7
 800ec5c:	f7f1 fccc 	bl	80005f8 <__aeabi_dmul>
 800ec60:	ec41 0b10 	vmov	d0, r0, r1
 800ec64:	f000 fd20 	bl	800f6a8 <floor>
 800ec68:	4b7c      	ldr	r3, [pc, #496]	; (800ee5c <__kernel_rem_pio2+0x32c>)
 800ec6a:	ec51 0b10 	vmov	r0, r1, d0
 800ec6e:	2200      	movs	r2, #0
 800ec70:	f7f1 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ec74:	4602      	mov	r2, r0
 800ec76:	460b      	mov	r3, r1
 800ec78:	4630      	mov	r0, r6
 800ec7a:	4639      	mov	r1, r7
 800ec7c:	f7f1 fb04 	bl	8000288 <__aeabi_dsub>
 800ec80:	460f      	mov	r7, r1
 800ec82:	4606      	mov	r6, r0
 800ec84:	f7f1 ff68 	bl	8000b58 <__aeabi_d2iz>
 800ec88:	9004      	str	r0, [sp, #16]
 800ec8a:	f7f1 fc4b 	bl	8000524 <__aeabi_i2d>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	4630      	mov	r0, r6
 800ec94:	4639      	mov	r1, r7
 800ec96:	f7f1 faf7 	bl	8000288 <__aeabi_dsub>
 800ec9a:	f1ba 0f00 	cmp.w	sl, #0
 800ec9e:	4606      	mov	r6, r0
 800eca0:	460f      	mov	r7, r1
 800eca2:	dd6d      	ble.n	800ed80 <__kernel_rem_pio2+0x250>
 800eca4:	1e62      	subs	r2, r4, #1
 800eca6:	ab0e      	add	r3, sp, #56	; 0x38
 800eca8:	9d04      	ldr	r5, [sp, #16]
 800ecaa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ecae:	f1ca 0118 	rsb	r1, sl, #24
 800ecb2:	fa40 f301 	asr.w	r3, r0, r1
 800ecb6:	441d      	add	r5, r3
 800ecb8:	408b      	lsls	r3, r1
 800ecba:	1ac0      	subs	r0, r0, r3
 800ecbc:	ab0e      	add	r3, sp, #56	; 0x38
 800ecbe:	9504      	str	r5, [sp, #16]
 800ecc0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ecc4:	f1ca 0317 	rsb	r3, sl, #23
 800ecc8:	fa40 fb03 	asr.w	fp, r0, r3
 800eccc:	f1bb 0f00 	cmp.w	fp, #0
 800ecd0:	dd65      	ble.n	800ed9e <__kernel_rem_pio2+0x26e>
 800ecd2:	9b04      	ldr	r3, [sp, #16]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	9304      	str	r3, [sp, #16]
 800ecda:	4615      	mov	r5, r2
 800ecdc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ece0:	4294      	cmp	r4, r2
 800ece2:	f300 809c 	bgt.w	800ee1e <__kernel_rem_pio2+0x2ee>
 800ece6:	f1ba 0f00 	cmp.w	sl, #0
 800ecea:	dd07      	ble.n	800ecfc <__kernel_rem_pio2+0x1cc>
 800ecec:	f1ba 0f01 	cmp.w	sl, #1
 800ecf0:	f000 80c0 	beq.w	800ee74 <__kernel_rem_pio2+0x344>
 800ecf4:	f1ba 0f02 	cmp.w	sl, #2
 800ecf8:	f000 80c6 	beq.w	800ee88 <__kernel_rem_pio2+0x358>
 800ecfc:	f1bb 0f02 	cmp.w	fp, #2
 800ed00:	d14d      	bne.n	800ed9e <__kernel_rem_pio2+0x26e>
 800ed02:	4632      	mov	r2, r6
 800ed04:	463b      	mov	r3, r7
 800ed06:	4956      	ldr	r1, [pc, #344]	; (800ee60 <__kernel_rem_pio2+0x330>)
 800ed08:	2000      	movs	r0, #0
 800ed0a:	f7f1 fabd 	bl	8000288 <__aeabi_dsub>
 800ed0e:	4606      	mov	r6, r0
 800ed10:	460f      	mov	r7, r1
 800ed12:	2d00      	cmp	r5, #0
 800ed14:	d043      	beq.n	800ed9e <__kernel_rem_pio2+0x26e>
 800ed16:	4650      	mov	r0, sl
 800ed18:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ee50 <__kernel_rem_pio2+0x320>
 800ed1c:	f000 fd4c 	bl	800f7b8 <scalbn>
 800ed20:	4630      	mov	r0, r6
 800ed22:	4639      	mov	r1, r7
 800ed24:	ec53 2b10 	vmov	r2, r3, d0
 800ed28:	f7f1 faae 	bl	8000288 <__aeabi_dsub>
 800ed2c:	4606      	mov	r6, r0
 800ed2e:	460f      	mov	r7, r1
 800ed30:	e035      	b.n	800ed9e <__kernel_rem_pio2+0x26e>
 800ed32:	4b4c      	ldr	r3, [pc, #304]	; (800ee64 <__kernel_rem_pio2+0x334>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	4630      	mov	r0, r6
 800ed38:	4639      	mov	r1, r7
 800ed3a:	f7f1 fc5d 	bl	80005f8 <__aeabi_dmul>
 800ed3e:	f7f1 ff0b 	bl	8000b58 <__aeabi_d2iz>
 800ed42:	f7f1 fbef 	bl	8000524 <__aeabi_i2d>
 800ed46:	4602      	mov	r2, r0
 800ed48:	460b      	mov	r3, r1
 800ed4a:	ec43 2b18 	vmov	d8, r2, r3
 800ed4e:	4b46      	ldr	r3, [pc, #280]	; (800ee68 <__kernel_rem_pio2+0x338>)
 800ed50:	2200      	movs	r2, #0
 800ed52:	f7f1 fc51 	bl	80005f8 <__aeabi_dmul>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	4639      	mov	r1, r7
 800ed5e:	f7f1 fa93 	bl	8000288 <__aeabi_dsub>
 800ed62:	f7f1 fef9 	bl	8000b58 <__aeabi_d2iz>
 800ed66:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed6a:	f84b 0b04 	str.w	r0, [fp], #4
 800ed6e:	ec51 0b18 	vmov	r0, r1, d8
 800ed72:	f7f1 fa8b 	bl	800028c <__adddf3>
 800ed76:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460f      	mov	r7, r1
 800ed7e:	e75b      	b.n	800ec38 <__kernel_rem_pio2+0x108>
 800ed80:	d106      	bne.n	800ed90 <__kernel_rem_pio2+0x260>
 800ed82:	1e63      	subs	r3, r4, #1
 800ed84:	aa0e      	add	r2, sp, #56	; 0x38
 800ed86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ed8a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ed8e:	e79d      	b.n	800eccc <__kernel_rem_pio2+0x19c>
 800ed90:	4b36      	ldr	r3, [pc, #216]	; (800ee6c <__kernel_rem_pio2+0x33c>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	f7f1 feb6 	bl	8000b04 <__aeabi_dcmpge>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	d13d      	bne.n	800ee18 <__kernel_rem_pio2+0x2e8>
 800ed9c:	4683      	mov	fp, r0
 800ed9e:	2200      	movs	r2, #0
 800eda0:	2300      	movs	r3, #0
 800eda2:	4630      	mov	r0, r6
 800eda4:	4639      	mov	r1, r7
 800eda6:	f7f1 fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800edaa:	2800      	cmp	r0, #0
 800edac:	f000 80c0 	beq.w	800ef30 <__kernel_rem_pio2+0x400>
 800edb0:	1e65      	subs	r5, r4, #1
 800edb2:	462b      	mov	r3, r5
 800edb4:	2200      	movs	r2, #0
 800edb6:	9902      	ldr	r1, [sp, #8]
 800edb8:	428b      	cmp	r3, r1
 800edba:	da6c      	bge.n	800ee96 <__kernel_rem_pio2+0x366>
 800edbc:	2a00      	cmp	r2, #0
 800edbe:	f000 8089 	beq.w	800eed4 <__kernel_rem_pio2+0x3a4>
 800edc2:	ab0e      	add	r3, sp, #56	; 0x38
 800edc4:	f1aa 0a18 	sub.w	sl, sl, #24
 800edc8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f000 80ad 	beq.w	800ef2c <__kernel_rem_pio2+0x3fc>
 800edd2:	4650      	mov	r0, sl
 800edd4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ee50 <__kernel_rem_pio2+0x320>
 800edd8:	f000 fcee 	bl	800f7b8 <scalbn>
 800eddc:	ab9a      	add	r3, sp, #616	; 0x268
 800edde:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ede2:	ec57 6b10 	vmov	r6, r7, d0
 800ede6:	00ec      	lsls	r4, r5, #3
 800ede8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800edec:	46aa      	mov	sl, r5
 800edee:	f1ba 0f00 	cmp.w	sl, #0
 800edf2:	f280 80d6 	bge.w	800efa2 <__kernel_rem_pio2+0x472>
 800edf6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ee48 <__kernel_rem_pio2+0x318>
 800edfa:	462e      	mov	r6, r5
 800edfc:	2e00      	cmp	r6, #0
 800edfe:	f2c0 8104 	blt.w	800f00a <__kernel_rem_pio2+0x4da>
 800ee02:	ab72      	add	r3, sp, #456	; 0x1c8
 800ee04:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ee08:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ee70 <__kernel_rem_pio2+0x340>
 800ee0c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ee10:	f04f 0800 	mov.w	r8, #0
 800ee14:	1baf      	subs	r7, r5, r6
 800ee16:	e0ea      	b.n	800efee <__kernel_rem_pio2+0x4be>
 800ee18:	f04f 0b02 	mov.w	fp, #2
 800ee1c:	e759      	b.n	800ecd2 <__kernel_rem_pio2+0x1a2>
 800ee1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ee22:	b955      	cbnz	r5, 800ee3a <__kernel_rem_pio2+0x30a>
 800ee24:	b123      	cbz	r3, 800ee30 <__kernel_rem_pio2+0x300>
 800ee26:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ee2a:	f8c8 3000 	str.w	r3, [r8]
 800ee2e:	2301      	movs	r3, #1
 800ee30:	3201      	adds	r2, #1
 800ee32:	f108 0804 	add.w	r8, r8, #4
 800ee36:	461d      	mov	r5, r3
 800ee38:	e752      	b.n	800ece0 <__kernel_rem_pio2+0x1b0>
 800ee3a:	1acb      	subs	r3, r1, r3
 800ee3c:	f8c8 3000 	str.w	r3, [r8]
 800ee40:	462b      	mov	r3, r5
 800ee42:	e7f5      	b.n	800ee30 <__kernel_rem_pio2+0x300>
 800ee44:	f3af 8000 	nop.w
	...
 800ee54:	3ff00000 	.word	0x3ff00000
 800ee58:	08010b40 	.word	0x08010b40
 800ee5c:	40200000 	.word	0x40200000
 800ee60:	3ff00000 	.word	0x3ff00000
 800ee64:	3e700000 	.word	0x3e700000
 800ee68:	41700000 	.word	0x41700000
 800ee6c:	3fe00000 	.word	0x3fe00000
 800ee70:	08010b00 	.word	0x08010b00
 800ee74:	1e62      	subs	r2, r4, #1
 800ee76:	ab0e      	add	r3, sp, #56	; 0x38
 800ee78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee7c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ee80:	a90e      	add	r1, sp, #56	; 0x38
 800ee82:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ee86:	e739      	b.n	800ecfc <__kernel_rem_pio2+0x1cc>
 800ee88:	1e62      	subs	r2, r4, #1
 800ee8a:	ab0e      	add	r3, sp, #56	; 0x38
 800ee8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ee94:	e7f4      	b.n	800ee80 <__kernel_rem_pio2+0x350>
 800ee96:	a90e      	add	r1, sp, #56	; 0x38
 800ee98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ee9c:	3b01      	subs	r3, #1
 800ee9e:	430a      	orrs	r2, r1
 800eea0:	e789      	b.n	800edb6 <__kernel_rem_pio2+0x286>
 800eea2:	3301      	adds	r3, #1
 800eea4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eea8:	2900      	cmp	r1, #0
 800eeaa:	d0fa      	beq.n	800eea2 <__kernel_rem_pio2+0x372>
 800eeac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eeae:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800eeb2:	446a      	add	r2, sp
 800eeb4:	3a98      	subs	r2, #152	; 0x98
 800eeb6:	920a      	str	r2, [sp, #40]	; 0x28
 800eeb8:	9a08      	ldr	r2, [sp, #32]
 800eeba:	18e3      	adds	r3, r4, r3
 800eebc:	18a5      	adds	r5, r4, r2
 800eebe:	aa22      	add	r2, sp, #136	; 0x88
 800eec0:	f104 0801 	add.w	r8, r4, #1
 800eec4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800eec8:	9304      	str	r3, [sp, #16]
 800eeca:	9b04      	ldr	r3, [sp, #16]
 800eecc:	4543      	cmp	r3, r8
 800eece:	da04      	bge.n	800eeda <__kernel_rem_pio2+0x3aa>
 800eed0:	461c      	mov	r4, r3
 800eed2:	e6a3      	b.n	800ec1c <__kernel_rem_pio2+0xec>
 800eed4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eed6:	2301      	movs	r3, #1
 800eed8:	e7e4      	b.n	800eea4 <__kernel_rem_pio2+0x374>
 800eeda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eedc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800eee0:	f7f1 fb20 	bl	8000524 <__aeabi_i2d>
 800eee4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eeea:	46ab      	mov	fp, r5
 800eeec:	461c      	mov	r4, r3
 800eeee:	f04f 0900 	mov.w	r9, #0
 800eef2:	2600      	movs	r6, #0
 800eef4:	2700      	movs	r7, #0
 800eef6:	9b06      	ldr	r3, [sp, #24]
 800eef8:	4599      	cmp	r9, r3
 800eefa:	dd06      	ble.n	800ef0a <__kernel_rem_pio2+0x3da>
 800eefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eefe:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ef02:	f108 0801 	add.w	r8, r8, #1
 800ef06:	930a      	str	r3, [sp, #40]	; 0x28
 800ef08:	e7df      	b.n	800eeca <__kernel_rem_pio2+0x39a>
 800ef0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ef0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ef12:	f7f1 fb71 	bl	80005f8 <__aeabi_dmul>
 800ef16:	4602      	mov	r2, r0
 800ef18:	460b      	mov	r3, r1
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	4639      	mov	r1, r7
 800ef1e:	f7f1 f9b5 	bl	800028c <__adddf3>
 800ef22:	f109 0901 	add.w	r9, r9, #1
 800ef26:	4606      	mov	r6, r0
 800ef28:	460f      	mov	r7, r1
 800ef2a:	e7e4      	b.n	800eef6 <__kernel_rem_pio2+0x3c6>
 800ef2c:	3d01      	subs	r5, #1
 800ef2e:	e748      	b.n	800edc2 <__kernel_rem_pio2+0x292>
 800ef30:	ec47 6b10 	vmov	d0, r6, r7
 800ef34:	f1ca 0000 	rsb	r0, sl, #0
 800ef38:	f000 fc3e 	bl	800f7b8 <scalbn>
 800ef3c:	ec57 6b10 	vmov	r6, r7, d0
 800ef40:	4ba0      	ldr	r3, [pc, #640]	; (800f1c4 <__kernel_rem_pio2+0x694>)
 800ef42:	ee10 0a10 	vmov	r0, s0
 800ef46:	2200      	movs	r2, #0
 800ef48:	4639      	mov	r1, r7
 800ef4a:	f7f1 fddb 	bl	8000b04 <__aeabi_dcmpge>
 800ef4e:	b1f8      	cbz	r0, 800ef90 <__kernel_rem_pio2+0x460>
 800ef50:	4b9d      	ldr	r3, [pc, #628]	; (800f1c8 <__kernel_rem_pio2+0x698>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	4630      	mov	r0, r6
 800ef56:	4639      	mov	r1, r7
 800ef58:	f7f1 fb4e 	bl	80005f8 <__aeabi_dmul>
 800ef5c:	f7f1 fdfc 	bl	8000b58 <__aeabi_d2iz>
 800ef60:	4680      	mov	r8, r0
 800ef62:	f7f1 fadf 	bl	8000524 <__aeabi_i2d>
 800ef66:	4b97      	ldr	r3, [pc, #604]	; (800f1c4 <__kernel_rem_pio2+0x694>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	f7f1 fb45 	bl	80005f8 <__aeabi_dmul>
 800ef6e:	460b      	mov	r3, r1
 800ef70:	4602      	mov	r2, r0
 800ef72:	4639      	mov	r1, r7
 800ef74:	4630      	mov	r0, r6
 800ef76:	f7f1 f987 	bl	8000288 <__aeabi_dsub>
 800ef7a:	f7f1 fded 	bl	8000b58 <__aeabi_d2iz>
 800ef7e:	1c65      	adds	r5, r4, #1
 800ef80:	ab0e      	add	r3, sp, #56	; 0x38
 800ef82:	f10a 0a18 	add.w	sl, sl, #24
 800ef86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ef8a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ef8e:	e720      	b.n	800edd2 <__kernel_rem_pio2+0x2a2>
 800ef90:	4630      	mov	r0, r6
 800ef92:	4639      	mov	r1, r7
 800ef94:	f7f1 fde0 	bl	8000b58 <__aeabi_d2iz>
 800ef98:	ab0e      	add	r3, sp, #56	; 0x38
 800ef9a:	4625      	mov	r5, r4
 800ef9c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800efa0:	e717      	b.n	800edd2 <__kernel_rem_pio2+0x2a2>
 800efa2:	ab0e      	add	r3, sp, #56	; 0x38
 800efa4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800efa8:	f7f1 fabc 	bl	8000524 <__aeabi_i2d>
 800efac:	4632      	mov	r2, r6
 800efae:	463b      	mov	r3, r7
 800efb0:	f7f1 fb22 	bl	80005f8 <__aeabi_dmul>
 800efb4:	4b84      	ldr	r3, [pc, #528]	; (800f1c8 <__kernel_rem_pio2+0x698>)
 800efb6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800efba:	2200      	movs	r2, #0
 800efbc:	4630      	mov	r0, r6
 800efbe:	4639      	mov	r1, r7
 800efc0:	f7f1 fb1a 	bl	80005f8 <__aeabi_dmul>
 800efc4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800efc8:	4606      	mov	r6, r0
 800efca:	460f      	mov	r7, r1
 800efcc:	e70f      	b.n	800edee <__kernel_rem_pio2+0x2be>
 800efce:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800efd2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800efd6:	f7f1 fb0f 	bl	80005f8 <__aeabi_dmul>
 800efda:	4602      	mov	r2, r0
 800efdc:	460b      	mov	r3, r1
 800efde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800efe2:	f7f1 f953 	bl	800028c <__adddf3>
 800efe6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800efea:	f108 0801 	add.w	r8, r8, #1
 800efee:	9b02      	ldr	r3, [sp, #8]
 800eff0:	4598      	cmp	r8, r3
 800eff2:	dc01      	bgt.n	800eff8 <__kernel_rem_pio2+0x4c8>
 800eff4:	45b8      	cmp	r8, r7
 800eff6:	ddea      	ble.n	800efce <__kernel_rem_pio2+0x49e>
 800eff8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800effc:	ab4a      	add	r3, sp, #296	; 0x128
 800effe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f002:	ed87 7b00 	vstr	d7, [r7]
 800f006:	3e01      	subs	r6, #1
 800f008:	e6f8      	b.n	800edfc <__kernel_rem_pio2+0x2cc>
 800f00a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	dc0b      	bgt.n	800f028 <__kernel_rem_pio2+0x4f8>
 800f010:	2b00      	cmp	r3, #0
 800f012:	dc35      	bgt.n	800f080 <__kernel_rem_pio2+0x550>
 800f014:	d059      	beq.n	800f0ca <__kernel_rem_pio2+0x59a>
 800f016:	9b04      	ldr	r3, [sp, #16]
 800f018:	f003 0007 	and.w	r0, r3, #7
 800f01c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f020:	ecbd 8b02 	vpop	{d8}
 800f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f028:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f02a:	2b03      	cmp	r3, #3
 800f02c:	d1f3      	bne.n	800f016 <__kernel_rem_pio2+0x4e6>
 800f02e:	ab4a      	add	r3, sp, #296	; 0x128
 800f030:	4423      	add	r3, r4
 800f032:	9306      	str	r3, [sp, #24]
 800f034:	461c      	mov	r4, r3
 800f036:	469a      	mov	sl, r3
 800f038:	9502      	str	r5, [sp, #8]
 800f03a:	9b02      	ldr	r3, [sp, #8]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	f1aa 0a08 	sub.w	sl, sl, #8
 800f042:	dc6b      	bgt.n	800f11c <__kernel_rem_pio2+0x5ec>
 800f044:	46aa      	mov	sl, r5
 800f046:	f1ba 0f01 	cmp.w	sl, #1
 800f04a:	f1a4 0408 	sub.w	r4, r4, #8
 800f04e:	f300 8085 	bgt.w	800f15c <__kernel_rem_pio2+0x62c>
 800f052:	9c06      	ldr	r4, [sp, #24]
 800f054:	2000      	movs	r0, #0
 800f056:	3408      	adds	r4, #8
 800f058:	2100      	movs	r1, #0
 800f05a:	2d01      	cmp	r5, #1
 800f05c:	f300 809d 	bgt.w	800f19a <__kernel_rem_pio2+0x66a>
 800f060:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f064:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f068:	f1bb 0f00 	cmp.w	fp, #0
 800f06c:	f040 809b 	bne.w	800f1a6 <__kernel_rem_pio2+0x676>
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	e9c3 5600 	strd	r5, r6, [r3]
 800f076:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f07a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f07e:	e7ca      	b.n	800f016 <__kernel_rem_pio2+0x4e6>
 800f080:	3408      	adds	r4, #8
 800f082:	ab4a      	add	r3, sp, #296	; 0x128
 800f084:	441c      	add	r4, r3
 800f086:	462e      	mov	r6, r5
 800f088:	2000      	movs	r0, #0
 800f08a:	2100      	movs	r1, #0
 800f08c:	2e00      	cmp	r6, #0
 800f08e:	da36      	bge.n	800f0fe <__kernel_rem_pio2+0x5ce>
 800f090:	f1bb 0f00 	cmp.w	fp, #0
 800f094:	d039      	beq.n	800f10a <__kernel_rem_pio2+0x5da>
 800f096:	4602      	mov	r2, r0
 800f098:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f09c:	9c01      	ldr	r4, [sp, #4]
 800f09e:	e9c4 2300 	strd	r2, r3, [r4]
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	460b      	mov	r3, r1
 800f0a6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f0aa:	f7f1 f8ed 	bl	8000288 <__aeabi_dsub>
 800f0ae:	ae4c      	add	r6, sp, #304	; 0x130
 800f0b0:	2401      	movs	r4, #1
 800f0b2:	42a5      	cmp	r5, r4
 800f0b4:	da2c      	bge.n	800f110 <__kernel_rem_pio2+0x5e0>
 800f0b6:	f1bb 0f00 	cmp.w	fp, #0
 800f0ba:	d002      	beq.n	800f0c2 <__kernel_rem_pio2+0x592>
 800f0bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	9b01      	ldr	r3, [sp, #4]
 800f0c4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f0c8:	e7a5      	b.n	800f016 <__kernel_rem_pio2+0x4e6>
 800f0ca:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f0ce:	eb0d 0403 	add.w	r4, sp, r3
 800f0d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	2100      	movs	r1, #0
 800f0da:	2d00      	cmp	r5, #0
 800f0dc:	da09      	bge.n	800f0f2 <__kernel_rem_pio2+0x5c2>
 800f0de:	f1bb 0f00 	cmp.w	fp, #0
 800f0e2:	d002      	beq.n	800f0ea <__kernel_rem_pio2+0x5ba>
 800f0e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	9b01      	ldr	r3, [sp, #4]
 800f0ec:	e9c3 0100 	strd	r0, r1, [r3]
 800f0f0:	e791      	b.n	800f016 <__kernel_rem_pio2+0x4e6>
 800f0f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f0f6:	f7f1 f8c9 	bl	800028c <__adddf3>
 800f0fa:	3d01      	subs	r5, #1
 800f0fc:	e7ed      	b.n	800f0da <__kernel_rem_pio2+0x5aa>
 800f0fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f102:	f7f1 f8c3 	bl	800028c <__adddf3>
 800f106:	3e01      	subs	r6, #1
 800f108:	e7c0      	b.n	800f08c <__kernel_rem_pio2+0x55c>
 800f10a:	4602      	mov	r2, r0
 800f10c:	460b      	mov	r3, r1
 800f10e:	e7c5      	b.n	800f09c <__kernel_rem_pio2+0x56c>
 800f110:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f114:	f7f1 f8ba 	bl	800028c <__adddf3>
 800f118:	3401      	adds	r4, #1
 800f11a:	e7ca      	b.n	800f0b2 <__kernel_rem_pio2+0x582>
 800f11c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f120:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f124:	9b02      	ldr	r3, [sp, #8]
 800f126:	3b01      	subs	r3, #1
 800f128:	9302      	str	r3, [sp, #8]
 800f12a:	4632      	mov	r2, r6
 800f12c:	463b      	mov	r3, r7
 800f12e:	4640      	mov	r0, r8
 800f130:	4649      	mov	r1, r9
 800f132:	f7f1 f8ab 	bl	800028c <__adddf3>
 800f136:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f13a:	4602      	mov	r2, r0
 800f13c:	460b      	mov	r3, r1
 800f13e:	4640      	mov	r0, r8
 800f140:	4649      	mov	r1, r9
 800f142:	f7f1 f8a1 	bl	8000288 <__aeabi_dsub>
 800f146:	4632      	mov	r2, r6
 800f148:	463b      	mov	r3, r7
 800f14a:	f7f1 f89f 	bl	800028c <__adddf3>
 800f14e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f152:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f156:	ed8a 7b00 	vstr	d7, [sl]
 800f15a:	e76e      	b.n	800f03a <__kernel_rem_pio2+0x50a>
 800f15c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f160:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f164:	4640      	mov	r0, r8
 800f166:	4632      	mov	r2, r6
 800f168:	463b      	mov	r3, r7
 800f16a:	4649      	mov	r1, r9
 800f16c:	f7f1 f88e 	bl	800028c <__adddf3>
 800f170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f174:	4602      	mov	r2, r0
 800f176:	460b      	mov	r3, r1
 800f178:	4640      	mov	r0, r8
 800f17a:	4649      	mov	r1, r9
 800f17c:	f7f1 f884 	bl	8000288 <__aeabi_dsub>
 800f180:	4632      	mov	r2, r6
 800f182:	463b      	mov	r3, r7
 800f184:	f7f1 f882 	bl	800028c <__adddf3>
 800f188:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f18c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f190:	ed84 7b00 	vstr	d7, [r4]
 800f194:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f198:	e755      	b.n	800f046 <__kernel_rem_pio2+0x516>
 800f19a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f19e:	f7f1 f875 	bl	800028c <__adddf3>
 800f1a2:	3d01      	subs	r5, #1
 800f1a4:	e759      	b.n	800f05a <__kernel_rem_pio2+0x52a>
 800f1a6:	9b01      	ldr	r3, [sp, #4]
 800f1a8:	9a01      	ldr	r2, [sp, #4]
 800f1aa:	601d      	str	r5, [r3, #0]
 800f1ac:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f1b0:	605c      	str	r4, [r3, #4]
 800f1b2:	609f      	str	r7, [r3, #8]
 800f1b4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f1b8:	60d3      	str	r3, [r2, #12]
 800f1ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1be:	6110      	str	r0, [r2, #16]
 800f1c0:	6153      	str	r3, [r2, #20]
 800f1c2:	e728      	b.n	800f016 <__kernel_rem_pio2+0x4e6>
 800f1c4:	41700000 	.word	0x41700000
 800f1c8:	3e700000 	.word	0x3e700000
 800f1cc:	00000000 	.word	0x00000000

0800f1d0 <__kernel_sin>:
 800f1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d4:	ed2d 8b04 	vpush	{d8-d9}
 800f1d8:	eeb0 8a41 	vmov.f32	s16, s2
 800f1dc:	eef0 8a61 	vmov.f32	s17, s3
 800f1e0:	ec55 4b10 	vmov	r4, r5, d0
 800f1e4:	b083      	sub	sp, #12
 800f1e6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f1ea:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f1ee:	9001      	str	r0, [sp, #4]
 800f1f0:	da06      	bge.n	800f200 <__kernel_sin+0x30>
 800f1f2:	ee10 0a10 	vmov	r0, s0
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	f7f1 fcae 	bl	8000b58 <__aeabi_d2iz>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d051      	beq.n	800f2a4 <__kernel_sin+0xd4>
 800f200:	4622      	mov	r2, r4
 800f202:	462b      	mov	r3, r5
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f7f1 f9f6 	bl	80005f8 <__aeabi_dmul>
 800f20c:	4682      	mov	sl, r0
 800f20e:	468b      	mov	fp, r1
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	4620      	mov	r0, r4
 800f216:	4629      	mov	r1, r5
 800f218:	f7f1 f9ee 	bl	80005f8 <__aeabi_dmul>
 800f21c:	a341      	add	r3, pc, #260	; (adr r3, 800f324 <__kernel_sin+0x154>)
 800f21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f222:	4680      	mov	r8, r0
 800f224:	4689      	mov	r9, r1
 800f226:	4650      	mov	r0, sl
 800f228:	4659      	mov	r1, fp
 800f22a:	f7f1 f9e5 	bl	80005f8 <__aeabi_dmul>
 800f22e:	a33f      	add	r3, pc, #252	; (adr r3, 800f32c <__kernel_sin+0x15c>)
 800f230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f234:	f7f1 f828 	bl	8000288 <__aeabi_dsub>
 800f238:	4652      	mov	r2, sl
 800f23a:	465b      	mov	r3, fp
 800f23c:	f7f1 f9dc 	bl	80005f8 <__aeabi_dmul>
 800f240:	a33c      	add	r3, pc, #240	; (adr r3, 800f334 <__kernel_sin+0x164>)
 800f242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f246:	f7f1 f821 	bl	800028c <__adddf3>
 800f24a:	4652      	mov	r2, sl
 800f24c:	465b      	mov	r3, fp
 800f24e:	f7f1 f9d3 	bl	80005f8 <__aeabi_dmul>
 800f252:	a33a      	add	r3, pc, #232	; (adr r3, 800f33c <__kernel_sin+0x16c>)
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	f7f1 f816 	bl	8000288 <__aeabi_dsub>
 800f25c:	4652      	mov	r2, sl
 800f25e:	465b      	mov	r3, fp
 800f260:	f7f1 f9ca 	bl	80005f8 <__aeabi_dmul>
 800f264:	a337      	add	r3, pc, #220	; (adr r3, 800f344 <__kernel_sin+0x174>)
 800f266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26a:	f7f1 f80f 	bl	800028c <__adddf3>
 800f26e:	9b01      	ldr	r3, [sp, #4]
 800f270:	4606      	mov	r6, r0
 800f272:	460f      	mov	r7, r1
 800f274:	b9eb      	cbnz	r3, 800f2b2 <__kernel_sin+0xe2>
 800f276:	4602      	mov	r2, r0
 800f278:	460b      	mov	r3, r1
 800f27a:	4650      	mov	r0, sl
 800f27c:	4659      	mov	r1, fp
 800f27e:	f7f1 f9bb 	bl	80005f8 <__aeabi_dmul>
 800f282:	a325      	add	r3, pc, #148	; (adr r3, 800f318 <__kernel_sin+0x148>)
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	f7f0 fffe 	bl	8000288 <__aeabi_dsub>
 800f28c:	4642      	mov	r2, r8
 800f28e:	464b      	mov	r3, r9
 800f290:	f7f1 f9b2 	bl	80005f8 <__aeabi_dmul>
 800f294:	4602      	mov	r2, r0
 800f296:	460b      	mov	r3, r1
 800f298:	4620      	mov	r0, r4
 800f29a:	4629      	mov	r1, r5
 800f29c:	f7f0 fff6 	bl	800028c <__adddf3>
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	460d      	mov	r5, r1
 800f2a4:	ec45 4b10 	vmov	d0, r4, r5
 800f2a8:	b003      	add	sp, #12
 800f2aa:	ecbd 8b04 	vpop	{d8-d9}
 800f2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2b2:	4b1b      	ldr	r3, [pc, #108]	; (800f320 <__kernel_sin+0x150>)
 800f2b4:	ec51 0b18 	vmov	r0, r1, d8
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f7f1 f99d 	bl	80005f8 <__aeabi_dmul>
 800f2be:	4632      	mov	r2, r6
 800f2c0:	ec41 0b19 	vmov	d9, r0, r1
 800f2c4:	463b      	mov	r3, r7
 800f2c6:	4640      	mov	r0, r8
 800f2c8:	4649      	mov	r1, r9
 800f2ca:	f7f1 f995 	bl	80005f8 <__aeabi_dmul>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	ec51 0b19 	vmov	r0, r1, d9
 800f2d6:	f7f0 ffd7 	bl	8000288 <__aeabi_dsub>
 800f2da:	4652      	mov	r2, sl
 800f2dc:	465b      	mov	r3, fp
 800f2de:	f7f1 f98b 	bl	80005f8 <__aeabi_dmul>
 800f2e2:	ec53 2b18 	vmov	r2, r3, d8
 800f2e6:	f7f0 ffcf 	bl	8000288 <__aeabi_dsub>
 800f2ea:	a30b      	add	r3, pc, #44	; (adr r3, 800f318 <__kernel_sin+0x148>)
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	4606      	mov	r6, r0
 800f2f2:	460f      	mov	r7, r1
 800f2f4:	4640      	mov	r0, r8
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	f7f1 f97e 	bl	80005f8 <__aeabi_dmul>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	460b      	mov	r3, r1
 800f300:	4630      	mov	r0, r6
 800f302:	4639      	mov	r1, r7
 800f304:	f7f0 ffc2 	bl	800028c <__adddf3>
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	4620      	mov	r0, r4
 800f30e:	4629      	mov	r1, r5
 800f310:	f7f0 ffba 	bl	8000288 <__aeabi_dsub>
 800f314:	e7c4      	b.n	800f2a0 <__kernel_sin+0xd0>
 800f316:	bf00      	nop
 800f318:	55555549 	.word	0x55555549
 800f31c:	3fc55555 	.word	0x3fc55555
 800f320:	3fe00000 	.word	0x3fe00000
 800f324:	5acfd57c 	.word	0x5acfd57c
 800f328:	3de5d93a 	.word	0x3de5d93a
 800f32c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f330:	3e5ae5e6 	.word	0x3e5ae5e6
 800f334:	57b1fe7d 	.word	0x57b1fe7d
 800f338:	3ec71de3 	.word	0x3ec71de3
 800f33c:	19c161d5 	.word	0x19c161d5
 800f340:	3f2a01a0 	.word	0x3f2a01a0
 800f344:	1110f8a6 	.word	0x1110f8a6
 800f348:	3f811111 	.word	0x3f811111
 800f34c:	00000000 	.word	0x00000000

0800f350 <atan>:
 800f350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f354:	ec55 4b10 	vmov	r4, r5, d0
 800f358:	4bc3      	ldr	r3, [pc, #780]	; (800f668 <atan+0x318>)
 800f35a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f35e:	429e      	cmp	r6, r3
 800f360:	46ab      	mov	fp, r5
 800f362:	dd18      	ble.n	800f396 <atan+0x46>
 800f364:	4bc1      	ldr	r3, [pc, #772]	; (800f66c <atan+0x31c>)
 800f366:	429e      	cmp	r6, r3
 800f368:	dc01      	bgt.n	800f36e <atan+0x1e>
 800f36a:	d109      	bne.n	800f380 <atan+0x30>
 800f36c:	b144      	cbz	r4, 800f380 <atan+0x30>
 800f36e:	4622      	mov	r2, r4
 800f370:	462b      	mov	r3, r5
 800f372:	4620      	mov	r0, r4
 800f374:	4629      	mov	r1, r5
 800f376:	f7f0 ff89 	bl	800028c <__adddf3>
 800f37a:	4604      	mov	r4, r0
 800f37c:	460d      	mov	r5, r1
 800f37e:	e006      	b.n	800f38e <atan+0x3e>
 800f380:	f1bb 0f00 	cmp.w	fp, #0
 800f384:	f300 8131 	bgt.w	800f5ea <atan+0x29a>
 800f388:	a59b      	add	r5, pc, #620	; (adr r5, 800f5f8 <atan+0x2a8>)
 800f38a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f38e:	ec45 4b10 	vmov	d0, r4, r5
 800f392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f396:	4bb6      	ldr	r3, [pc, #728]	; (800f670 <atan+0x320>)
 800f398:	429e      	cmp	r6, r3
 800f39a:	dc14      	bgt.n	800f3c6 <atan+0x76>
 800f39c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f3a0:	429e      	cmp	r6, r3
 800f3a2:	dc0d      	bgt.n	800f3c0 <atan+0x70>
 800f3a4:	a396      	add	r3, pc, #600	; (adr r3, 800f600 <atan+0x2b0>)
 800f3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3aa:	ee10 0a10 	vmov	r0, s0
 800f3ae:	4629      	mov	r1, r5
 800f3b0:	f7f0 ff6c 	bl	800028c <__adddf3>
 800f3b4:	4baf      	ldr	r3, [pc, #700]	; (800f674 <atan+0x324>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f7f1 fbae 	bl	8000b18 <__aeabi_dcmpgt>
 800f3bc:	2800      	cmp	r0, #0
 800f3be:	d1e6      	bne.n	800f38e <atan+0x3e>
 800f3c0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f3c4:	e02b      	b.n	800f41e <atan+0xce>
 800f3c6:	f000 f963 	bl	800f690 <fabs>
 800f3ca:	4bab      	ldr	r3, [pc, #684]	; (800f678 <atan+0x328>)
 800f3cc:	429e      	cmp	r6, r3
 800f3ce:	ec55 4b10 	vmov	r4, r5, d0
 800f3d2:	f300 80bf 	bgt.w	800f554 <atan+0x204>
 800f3d6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f3da:	429e      	cmp	r6, r3
 800f3dc:	f300 80a0 	bgt.w	800f520 <atan+0x1d0>
 800f3e0:	ee10 2a10 	vmov	r2, s0
 800f3e4:	ee10 0a10 	vmov	r0, s0
 800f3e8:	462b      	mov	r3, r5
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	f7f0 ff4e 	bl	800028c <__adddf3>
 800f3f0:	4ba0      	ldr	r3, [pc, #640]	; (800f674 <atan+0x324>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f7f0 ff48 	bl	8000288 <__aeabi_dsub>
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	460f      	mov	r7, r1
 800f3fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f402:	4620      	mov	r0, r4
 800f404:	4629      	mov	r1, r5
 800f406:	f7f0 ff41 	bl	800028c <__adddf3>
 800f40a:	4602      	mov	r2, r0
 800f40c:	460b      	mov	r3, r1
 800f40e:	4630      	mov	r0, r6
 800f410:	4639      	mov	r1, r7
 800f412:	f7f1 fa1b 	bl	800084c <__aeabi_ddiv>
 800f416:	f04f 0a00 	mov.w	sl, #0
 800f41a:	4604      	mov	r4, r0
 800f41c:	460d      	mov	r5, r1
 800f41e:	4622      	mov	r2, r4
 800f420:	462b      	mov	r3, r5
 800f422:	4620      	mov	r0, r4
 800f424:	4629      	mov	r1, r5
 800f426:	f7f1 f8e7 	bl	80005f8 <__aeabi_dmul>
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	4680      	mov	r8, r0
 800f430:	4689      	mov	r9, r1
 800f432:	f7f1 f8e1 	bl	80005f8 <__aeabi_dmul>
 800f436:	a374      	add	r3, pc, #464	; (adr r3, 800f608 <atan+0x2b8>)
 800f438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43c:	4606      	mov	r6, r0
 800f43e:	460f      	mov	r7, r1
 800f440:	f7f1 f8da 	bl	80005f8 <__aeabi_dmul>
 800f444:	a372      	add	r3, pc, #456	; (adr r3, 800f610 <atan+0x2c0>)
 800f446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44a:	f7f0 ff1f 	bl	800028c <__adddf3>
 800f44e:	4632      	mov	r2, r6
 800f450:	463b      	mov	r3, r7
 800f452:	f7f1 f8d1 	bl	80005f8 <__aeabi_dmul>
 800f456:	a370      	add	r3, pc, #448	; (adr r3, 800f618 <atan+0x2c8>)
 800f458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45c:	f7f0 ff16 	bl	800028c <__adddf3>
 800f460:	4632      	mov	r2, r6
 800f462:	463b      	mov	r3, r7
 800f464:	f7f1 f8c8 	bl	80005f8 <__aeabi_dmul>
 800f468:	a36d      	add	r3, pc, #436	; (adr r3, 800f620 <atan+0x2d0>)
 800f46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46e:	f7f0 ff0d 	bl	800028c <__adddf3>
 800f472:	4632      	mov	r2, r6
 800f474:	463b      	mov	r3, r7
 800f476:	f7f1 f8bf 	bl	80005f8 <__aeabi_dmul>
 800f47a:	a36b      	add	r3, pc, #428	; (adr r3, 800f628 <atan+0x2d8>)
 800f47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f480:	f7f0 ff04 	bl	800028c <__adddf3>
 800f484:	4632      	mov	r2, r6
 800f486:	463b      	mov	r3, r7
 800f488:	f7f1 f8b6 	bl	80005f8 <__aeabi_dmul>
 800f48c:	a368      	add	r3, pc, #416	; (adr r3, 800f630 <atan+0x2e0>)
 800f48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f492:	f7f0 fefb 	bl	800028c <__adddf3>
 800f496:	4642      	mov	r2, r8
 800f498:	464b      	mov	r3, r9
 800f49a:	f7f1 f8ad 	bl	80005f8 <__aeabi_dmul>
 800f49e:	a366      	add	r3, pc, #408	; (adr r3, 800f638 <atan+0x2e8>)
 800f4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a4:	4680      	mov	r8, r0
 800f4a6:	4689      	mov	r9, r1
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	4639      	mov	r1, r7
 800f4ac:	f7f1 f8a4 	bl	80005f8 <__aeabi_dmul>
 800f4b0:	a363      	add	r3, pc, #396	; (adr r3, 800f640 <atan+0x2f0>)
 800f4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b6:	f7f0 fee7 	bl	8000288 <__aeabi_dsub>
 800f4ba:	4632      	mov	r2, r6
 800f4bc:	463b      	mov	r3, r7
 800f4be:	f7f1 f89b 	bl	80005f8 <__aeabi_dmul>
 800f4c2:	a361      	add	r3, pc, #388	; (adr r3, 800f648 <atan+0x2f8>)
 800f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c8:	f7f0 fede 	bl	8000288 <__aeabi_dsub>
 800f4cc:	4632      	mov	r2, r6
 800f4ce:	463b      	mov	r3, r7
 800f4d0:	f7f1 f892 	bl	80005f8 <__aeabi_dmul>
 800f4d4:	a35e      	add	r3, pc, #376	; (adr r3, 800f650 <atan+0x300>)
 800f4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4da:	f7f0 fed5 	bl	8000288 <__aeabi_dsub>
 800f4de:	4632      	mov	r2, r6
 800f4e0:	463b      	mov	r3, r7
 800f4e2:	f7f1 f889 	bl	80005f8 <__aeabi_dmul>
 800f4e6:	a35c      	add	r3, pc, #368	; (adr r3, 800f658 <atan+0x308>)
 800f4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ec:	f7f0 fecc 	bl	8000288 <__aeabi_dsub>
 800f4f0:	4632      	mov	r2, r6
 800f4f2:	463b      	mov	r3, r7
 800f4f4:	f7f1 f880 	bl	80005f8 <__aeabi_dmul>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	460b      	mov	r3, r1
 800f4fc:	4640      	mov	r0, r8
 800f4fe:	4649      	mov	r1, r9
 800f500:	f7f0 fec4 	bl	800028c <__adddf3>
 800f504:	4622      	mov	r2, r4
 800f506:	462b      	mov	r3, r5
 800f508:	f7f1 f876 	bl	80005f8 <__aeabi_dmul>
 800f50c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800f510:	4602      	mov	r2, r0
 800f512:	460b      	mov	r3, r1
 800f514:	d14b      	bne.n	800f5ae <atan+0x25e>
 800f516:	4620      	mov	r0, r4
 800f518:	4629      	mov	r1, r5
 800f51a:	f7f0 feb5 	bl	8000288 <__aeabi_dsub>
 800f51e:	e72c      	b.n	800f37a <atan+0x2a>
 800f520:	ee10 0a10 	vmov	r0, s0
 800f524:	4b53      	ldr	r3, [pc, #332]	; (800f674 <atan+0x324>)
 800f526:	2200      	movs	r2, #0
 800f528:	4629      	mov	r1, r5
 800f52a:	f7f0 fead 	bl	8000288 <__aeabi_dsub>
 800f52e:	4b51      	ldr	r3, [pc, #324]	; (800f674 <atan+0x324>)
 800f530:	4606      	mov	r6, r0
 800f532:	460f      	mov	r7, r1
 800f534:	2200      	movs	r2, #0
 800f536:	4620      	mov	r0, r4
 800f538:	4629      	mov	r1, r5
 800f53a:	f7f0 fea7 	bl	800028c <__adddf3>
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	4630      	mov	r0, r6
 800f544:	4639      	mov	r1, r7
 800f546:	f7f1 f981 	bl	800084c <__aeabi_ddiv>
 800f54a:	f04f 0a01 	mov.w	sl, #1
 800f54e:	4604      	mov	r4, r0
 800f550:	460d      	mov	r5, r1
 800f552:	e764      	b.n	800f41e <atan+0xce>
 800f554:	4b49      	ldr	r3, [pc, #292]	; (800f67c <atan+0x32c>)
 800f556:	429e      	cmp	r6, r3
 800f558:	da1d      	bge.n	800f596 <atan+0x246>
 800f55a:	ee10 0a10 	vmov	r0, s0
 800f55e:	4b48      	ldr	r3, [pc, #288]	; (800f680 <atan+0x330>)
 800f560:	2200      	movs	r2, #0
 800f562:	4629      	mov	r1, r5
 800f564:	f7f0 fe90 	bl	8000288 <__aeabi_dsub>
 800f568:	4b45      	ldr	r3, [pc, #276]	; (800f680 <atan+0x330>)
 800f56a:	4606      	mov	r6, r0
 800f56c:	460f      	mov	r7, r1
 800f56e:	2200      	movs	r2, #0
 800f570:	4620      	mov	r0, r4
 800f572:	4629      	mov	r1, r5
 800f574:	f7f1 f840 	bl	80005f8 <__aeabi_dmul>
 800f578:	4b3e      	ldr	r3, [pc, #248]	; (800f674 <atan+0x324>)
 800f57a:	2200      	movs	r2, #0
 800f57c:	f7f0 fe86 	bl	800028c <__adddf3>
 800f580:	4602      	mov	r2, r0
 800f582:	460b      	mov	r3, r1
 800f584:	4630      	mov	r0, r6
 800f586:	4639      	mov	r1, r7
 800f588:	f7f1 f960 	bl	800084c <__aeabi_ddiv>
 800f58c:	f04f 0a02 	mov.w	sl, #2
 800f590:	4604      	mov	r4, r0
 800f592:	460d      	mov	r5, r1
 800f594:	e743      	b.n	800f41e <atan+0xce>
 800f596:	462b      	mov	r3, r5
 800f598:	ee10 2a10 	vmov	r2, s0
 800f59c:	4939      	ldr	r1, [pc, #228]	; (800f684 <atan+0x334>)
 800f59e:	2000      	movs	r0, #0
 800f5a0:	f7f1 f954 	bl	800084c <__aeabi_ddiv>
 800f5a4:	f04f 0a03 	mov.w	sl, #3
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	460d      	mov	r5, r1
 800f5ac:	e737      	b.n	800f41e <atan+0xce>
 800f5ae:	4b36      	ldr	r3, [pc, #216]	; (800f688 <atan+0x338>)
 800f5b0:	4e36      	ldr	r6, [pc, #216]	; (800f68c <atan+0x33c>)
 800f5b2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f5b6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f5ba:	e9da 2300 	ldrd	r2, r3, [sl]
 800f5be:	f7f0 fe63 	bl	8000288 <__aeabi_dsub>
 800f5c2:	4622      	mov	r2, r4
 800f5c4:	462b      	mov	r3, r5
 800f5c6:	f7f0 fe5f 	bl	8000288 <__aeabi_dsub>
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f5d2:	f7f0 fe59 	bl	8000288 <__aeabi_dsub>
 800f5d6:	f1bb 0f00 	cmp.w	fp, #0
 800f5da:	4604      	mov	r4, r0
 800f5dc:	460d      	mov	r5, r1
 800f5de:	f6bf aed6 	bge.w	800f38e <atan+0x3e>
 800f5e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5e6:	461d      	mov	r5, r3
 800f5e8:	e6d1      	b.n	800f38e <atan+0x3e>
 800f5ea:	a51d      	add	r5, pc, #116	; (adr r5, 800f660 <atan+0x310>)
 800f5ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f5f0:	e6cd      	b.n	800f38e <atan+0x3e>
 800f5f2:	bf00      	nop
 800f5f4:	f3af 8000 	nop.w
 800f5f8:	54442d18 	.word	0x54442d18
 800f5fc:	bff921fb 	.word	0xbff921fb
 800f600:	8800759c 	.word	0x8800759c
 800f604:	7e37e43c 	.word	0x7e37e43c
 800f608:	e322da11 	.word	0xe322da11
 800f60c:	3f90ad3a 	.word	0x3f90ad3a
 800f610:	24760deb 	.word	0x24760deb
 800f614:	3fa97b4b 	.word	0x3fa97b4b
 800f618:	a0d03d51 	.word	0xa0d03d51
 800f61c:	3fb10d66 	.word	0x3fb10d66
 800f620:	c54c206e 	.word	0xc54c206e
 800f624:	3fb745cd 	.word	0x3fb745cd
 800f628:	920083ff 	.word	0x920083ff
 800f62c:	3fc24924 	.word	0x3fc24924
 800f630:	5555550d 	.word	0x5555550d
 800f634:	3fd55555 	.word	0x3fd55555
 800f638:	2c6a6c2f 	.word	0x2c6a6c2f
 800f63c:	bfa2b444 	.word	0xbfa2b444
 800f640:	52defd9a 	.word	0x52defd9a
 800f644:	3fadde2d 	.word	0x3fadde2d
 800f648:	af749a6d 	.word	0xaf749a6d
 800f64c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f650:	fe231671 	.word	0xfe231671
 800f654:	3fbc71c6 	.word	0x3fbc71c6
 800f658:	9998ebc4 	.word	0x9998ebc4
 800f65c:	3fc99999 	.word	0x3fc99999
 800f660:	54442d18 	.word	0x54442d18
 800f664:	3ff921fb 	.word	0x3ff921fb
 800f668:	440fffff 	.word	0x440fffff
 800f66c:	7ff00000 	.word	0x7ff00000
 800f670:	3fdbffff 	.word	0x3fdbffff
 800f674:	3ff00000 	.word	0x3ff00000
 800f678:	3ff2ffff 	.word	0x3ff2ffff
 800f67c:	40038000 	.word	0x40038000
 800f680:	3ff80000 	.word	0x3ff80000
 800f684:	bff00000 	.word	0xbff00000
 800f688:	08010b70 	.word	0x08010b70
 800f68c:	08010b50 	.word	0x08010b50

0800f690 <fabs>:
 800f690:	ec51 0b10 	vmov	r0, r1, d0
 800f694:	ee10 2a10 	vmov	r2, s0
 800f698:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f69c:	ec43 2b10 	vmov	d0, r2, r3
 800f6a0:	4770      	bx	lr
 800f6a2:	0000      	movs	r0, r0
 800f6a4:	0000      	movs	r0, r0
	...

0800f6a8 <floor>:
 800f6a8:	ec51 0b10 	vmov	r0, r1, d0
 800f6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f6b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f6b8:	2e13      	cmp	r6, #19
 800f6ba:	ee10 5a10 	vmov	r5, s0
 800f6be:	ee10 8a10 	vmov	r8, s0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	dc32      	bgt.n	800f72c <floor+0x84>
 800f6c6:	2e00      	cmp	r6, #0
 800f6c8:	da14      	bge.n	800f6f4 <floor+0x4c>
 800f6ca:	a333      	add	r3, pc, #204	; (adr r3, 800f798 <floor+0xf0>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	f7f0 fddc 	bl	800028c <__adddf3>
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	f7f1 fa1e 	bl	8000b18 <__aeabi_dcmpgt>
 800f6dc:	b138      	cbz	r0, 800f6ee <floor+0x46>
 800f6de:	2c00      	cmp	r4, #0
 800f6e0:	da57      	bge.n	800f792 <floor+0xea>
 800f6e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f6e6:	431d      	orrs	r5, r3
 800f6e8:	d001      	beq.n	800f6ee <floor+0x46>
 800f6ea:	4c2d      	ldr	r4, [pc, #180]	; (800f7a0 <floor+0xf8>)
 800f6ec:	2500      	movs	r5, #0
 800f6ee:	4621      	mov	r1, r4
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	e025      	b.n	800f740 <floor+0x98>
 800f6f4:	4f2b      	ldr	r7, [pc, #172]	; (800f7a4 <floor+0xfc>)
 800f6f6:	4137      	asrs	r7, r6
 800f6f8:	ea01 0307 	and.w	r3, r1, r7
 800f6fc:	4303      	orrs	r3, r0
 800f6fe:	d01f      	beq.n	800f740 <floor+0x98>
 800f700:	a325      	add	r3, pc, #148	; (adr r3, 800f798 <floor+0xf0>)
 800f702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f706:	f7f0 fdc1 	bl	800028c <__adddf3>
 800f70a:	2200      	movs	r2, #0
 800f70c:	2300      	movs	r3, #0
 800f70e:	f7f1 fa03 	bl	8000b18 <__aeabi_dcmpgt>
 800f712:	2800      	cmp	r0, #0
 800f714:	d0eb      	beq.n	800f6ee <floor+0x46>
 800f716:	2c00      	cmp	r4, #0
 800f718:	bfbe      	ittt	lt
 800f71a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f71e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f722:	19a4      	addlt	r4, r4, r6
 800f724:	ea24 0407 	bic.w	r4, r4, r7
 800f728:	2500      	movs	r5, #0
 800f72a:	e7e0      	b.n	800f6ee <floor+0x46>
 800f72c:	2e33      	cmp	r6, #51	; 0x33
 800f72e:	dd0b      	ble.n	800f748 <floor+0xa0>
 800f730:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f734:	d104      	bne.n	800f740 <floor+0x98>
 800f736:	ee10 2a10 	vmov	r2, s0
 800f73a:	460b      	mov	r3, r1
 800f73c:	f7f0 fda6 	bl	800028c <__adddf3>
 800f740:	ec41 0b10 	vmov	d0, r0, r1
 800f744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f748:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f74c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f750:	fa23 f707 	lsr.w	r7, r3, r7
 800f754:	4207      	tst	r7, r0
 800f756:	d0f3      	beq.n	800f740 <floor+0x98>
 800f758:	a30f      	add	r3, pc, #60	; (adr r3, 800f798 <floor+0xf0>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f0 fd95 	bl	800028c <__adddf3>
 800f762:	2200      	movs	r2, #0
 800f764:	2300      	movs	r3, #0
 800f766:	f7f1 f9d7 	bl	8000b18 <__aeabi_dcmpgt>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d0bf      	beq.n	800f6ee <floor+0x46>
 800f76e:	2c00      	cmp	r4, #0
 800f770:	da02      	bge.n	800f778 <floor+0xd0>
 800f772:	2e14      	cmp	r6, #20
 800f774:	d103      	bne.n	800f77e <floor+0xd6>
 800f776:	3401      	adds	r4, #1
 800f778:	ea25 0507 	bic.w	r5, r5, r7
 800f77c:	e7b7      	b.n	800f6ee <floor+0x46>
 800f77e:	2301      	movs	r3, #1
 800f780:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f784:	fa03 f606 	lsl.w	r6, r3, r6
 800f788:	4435      	add	r5, r6
 800f78a:	4545      	cmp	r5, r8
 800f78c:	bf38      	it	cc
 800f78e:	18e4      	addcc	r4, r4, r3
 800f790:	e7f2      	b.n	800f778 <floor+0xd0>
 800f792:	2500      	movs	r5, #0
 800f794:	462c      	mov	r4, r5
 800f796:	e7aa      	b.n	800f6ee <floor+0x46>
 800f798:	8800759c 	.word	0x8800759c
 800f79c:	7e37e43c 	.word	0x7e37e43c
 800f7a0:	bff00000 	.word	0xbff00000
 800f7a4:	000fffff 	.word	0x000fffff

0800f7a8 <nan>:
 800f7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f7b0 <nan+0x8>
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	00000000 	.word	0x00000000
 800f7b4:	7ff80000 	.word	0x7ff80000

0800f7b8 <scalbn>:
 800f7b8:	b570      	push	{r4, r5, r6, lr}
 800f7ba:	ec55 4b10 	vmov	r4, r5, d0
 800f7be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f7c2:	4606      	mov	r6, r0
 800f7c4:	462b      	mov	r3, r5
 800f7c6:	b99a      	cbnz	r2, 800f7f0 <scalbn+0x38>
 800f7c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f7cc:	4323      	orrs	r3, r4
 800f7ce:	d036      	beq.n	800f83e <scalbn+0x86>
 800f7d0:	4b39      	ldr	r3, [pc, #228]	; (800f8b8 <scalbn+0x100>)
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	ee10 0a10 	vmov	r0, s0
 800f7d8:	2200      	movs	r2, #0
 800f7da:	f7f0 ff0d 	bl	80005f8 <__aeabi_dmul>
 800f7de:	4b37      	ldr	r3, [pc, #220]	; (800f8bc <scalbn+0x104>)
 800f7e0:	429e      	cmp	r6, r3
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	460d      	mov	r5, r1
 800f7e6:	da10      	bge.n	800f80a <scalbn+0x52>
 800f7e8:	a32b      	add	r3, pc, #172	; (adr r3, 800f898 <scalbn+0xe0>)
 800f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ee:	e03a      	b.n	800f866 <scalbn+0xae>
 800f7f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f7f4:	428a      	cmp	r2, r1
 800f7f6:	d10c      	bne.n	800f812 <scalbn+0x5a>
 800f7f8:	ee10 2a10 	vmov	r2, s0
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	4629      	mov	r1, r5
 800f800:	f7f0 fd44 	bl	800028c <__adddf3>
 800f804:	4604      	mov	r4, r0
 800f806:	460d      	mov	r5, r1
 800f808:	e019      	b.n	800f83e <scalbn+0x86>
 800f80a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f80e:	460b      	mov	r3, r1
 800f810:	3a36      	subs	r2, #54	; 0x36
 800f812:	4432      	add	r2, r6
 800f814:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f818:	428a      	cmp	r2, r1
 800f81a:	dd08      	ble.n	800f82e <scalbn+0x76>
 800f81c:	2d00      	cmp	r5, #0
 800f81e:	a120      	add	r1, pc, #128	; (adr r1, 800f8a0 <scalbn+0xe8>)
 800f820:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f824:	da1c      	bge.n	800f860 <scalbn+0xa8>
 800f826:	a120      	add	r1, pc, #128	; (adr r1, 800f8a8 <scalbn+0xf0>)
 800f828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f82c:	e018      	b.n	800f860 <scalbn+0xa8>
 800f82e:	2a00      	cmp	r2, #0
 800f830:	dd08      	ble.n	800f844 <scalbn+0x8c>
 800f832:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f836:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f83a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f83e:	ec45 4b10 	vmov	d0, r4, r5
 800f842:	bd70      	pop	{r4, r5, r6, pc}
 800f844:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f848:	da19      	bge.n	800f87e <scalbn+0xc6>
 800f84a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f84e:	429e      	cmp	r6, r3
 800f850:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f854:	dd0a      	ble.n	800f86c <scalbn+0xb4>
 800f856:	a112      	add	r1, pc, #72	; (adr r1, 800f8a0 <scalbn+0xe8>)
 800f858:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d1e2      	bne.n	800f826 <scalbn+0x6e>
 800f860:	a30f      	add	r3, pc, #60	; (adr r3, 800f8a0 <scalbn+0xe8>)
 800f862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f866:	f7f0 fec7 	bl	80005f8 <__aeabi_dmul>
 800f86a:	e7cb      	b.n	800f804 <scalbn+0x4c>
 800f86c:	a10a      	add	r1, pc, #40	; (adr r1, 800f898 <scalbn+0xe0>)
 800f86e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d0b8      	beq.n	800f7e8 <scalbn+0x30>
 800f876:	a10e      	add	r1, pc, #56	; (adr r1, 800f8b0 <scalbn+0xf8>)
 800f878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f87c:	e7b4      	b.n	800f7e8 <scalbn+0x30>
 800f87e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f882:	3236      	adds	r2, #54	; 0x36
 800f884:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f888:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f88c:	4620      	mov	r0, r4
 800f88e:	4b0c      	ldr	r3, [pc, #48]	; (800f8c0 <scalbn+0x108>)
 800f890:	2200      	movs	r2, #0
 800f892:	e7e8      	b.n	800f866 <scalbn+0xae>
 800f894:	f3af 8000 	nop.w
 800f898:	c2f8f359 	.word	0xc2f8f359
 800f89c:	01a56e1f 	.word	0x01a56e1f
 800f8a0:	8800759c 	.word	0x8800759c
 800f8a4:	7e37e43c 	.word	0x7e37e43c
 800f8a8:	8800759c 	.word	0x8800759c
 800f8ac:	fe37e43c 	.word	0xfe37e43c
 800f8b0:	c2f8f359 	.word	0xc2f8f359
 800f8b4:	81a56e1f 	.word	0x81a56e1f
 800f8b8:	43500000 	.word	0x43500000
 800f8bc:	ffff3cb0 	.word	0xffff3cb0
 800f8c0:	3c900000 	.word	0x3c900000

0800f8c4 <_init>:
 800f8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c6:	bf00      	nop
 800f8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ca:	bc08      	pop	{r3}
 800f8cc:	469e      	mov	lr, r3
 800f8ce:	4770      	bx	lr

0800f8d0 <_fini>:
 800f8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d2:	bf00      	nop
 800f8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8d6:	bc08      	pop	{r3}
 800f8d8:	469e      	mov	lr, r3
 800f8da:	4770      	bx	lr
