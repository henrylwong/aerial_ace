
imu_adc_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008018  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080081a0  080081a0  000181a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082a8  080082a8  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080082a8  080082a8  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082a8  080082a8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082a8  080082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080082b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000002a8  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001179c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209b  00000000  00000000  00031864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00033900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000209d  00000000  00000000  000354e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109b5  00000000  00000000  00037585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b60f5  00000000  00000000  00047f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fe02f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004160  00000000  00000000  000fe080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008188 	.word	0x08008188

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008188 	.word	0x08008188

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <calculate_orientation>:

/*
 * Estimate orientation based on previous quaternion values. 
 * Runs Madgwick, Madgwick output quaternion to relative Euler angles, and remaps angles to gimbal potentiometer percentages.
 */
void calculate_orientation(float delta_time) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	ed87 0a01 	vstr	s0, [r7, #4]
	float sample_freq;
	#ifdef sampleFreq
	sample_freq = sampleFreq;
 8000b4a:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8000b4e:	60fb      	str	r3, [r7, #12]
	#else
	sample_freq = convert_period_to_freq(delta_time);
	#endif /* sampleFreq */

	MadgwickAHRSupdate(gyro.gyro.x, gyro.gyro.y, gyro.gyro.z, accel.acceleration.x, accel.acceleration.y, accel.acceleration.z, mag.magnetic.x, mag.magnetic.y, mag.magnetic.z, sample_freq); // gyro, accel, mag are sensors_type_t
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <calculate_orientation+0x78>)
 8000b52:	edd3 7a00 	vldr	s15, [r3]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <calculate_orientation+0x78>)
 8000b58:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <calculate_orientation+0x78>)
 8000b5e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <calculate_orientation+0x7c>)
 8000b64:	ed93 6a00 	vldr	s12, [r3]
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <calculate_orientation+0x7c>)
 8000b6a:	edd3 5a01 	vldr	s11, [r3, #4]
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <calculate_orientation+0x7c>)
 8000b70:	ed93 5a02 	vldr	s10, [r3, #8]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <calculate_orientation+0x80>)
 8000b76:	ed93 3a00 	vldr	s6, [r3]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <calculate_orientation+0x80>)
 8000b7c:	edd3 3a01 	vldr	s7, [r3, #4]
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <calculate_orientation+0x80>)
 8000b82:	ed93 4a02 	vldr	s8, [r3, #8]
 8000b86:	edd7 4a03 	vldr	s9, [r7, #12]
 8000b8a:	eef0 2a45 	vmov.f32	s5, s10
 8000b8e:	eeb0 2a65 	vmov.f32	s4, s11
 8000b92:	eef0 1a46 	vmov.f32	s3, s12
 8000b96:	eeb0 1a66 	vmov.f32	s2, s13
 8000b9a:	eef0 0a47 	vmov.f32	s1, s14
 8000b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba2:	f000 f9b9 	bl	8000f18 <MadgwickAHRSupdate>
	convert_quaternion_to_euler();
 8000ba6:	f000 f8a5 	bl	8000cf4 <convert_quaternion_to_euler>
	remap_angles_to_gimbals();
 8000baa:	f000 f80d 	bl	8000bc8 <remap_angles_to_gimbals>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200002e0 	.word	0x200002e0
 8000bbc:	200002ec 	.word	0x200002ec
 8000bc0:	200002f8 	.word	0x200002f8
 8000bc4:	00000000 	.word	0x00000000

08000bc8 <remap_angles_to_gimbals>:

/*
 * Remapping only consists of pitch and roll
 */
void remap_angles_to_gimbals() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	remapped_angle_x = (angle_x + atan2_offset) / (2 * M_PI);
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <remap_angles_to_gimbals+0xd0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fc5d 	bl	8000490 <__aeabi_f2d>
 8000bd6:	a32a      	add	r3, pc, #168	; (adr r3, 8000c80 <remap_angles_to_gimbals+0xb8>)
 8000bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bdc:	f7ff fafa 	bl	80001d4 <__adddf3>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4610      	mov	r0, r2
 8000be6:	4619      	mov	r1, r3
 8000be8:	a327      	add	r3, pc, #156	; (adr r3, 8000c88 <remap_angles_to_gimbals+0xc0>)
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	f7ff fdd1 	bl	8000794 <__aeabi_ddiv>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff ff51 	bl	8000aa0 <__aeabi_d2f>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a26      	ldr	r2, [pc, #152]	; (8000c9c <remap_angles_to_gimbals+0xd4>)
 8000c02:	6013      	str	r3, [r2, #0]
	remapped_angle_y = (angle_y + asin_offset) / (M_PI);
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <remap_angles_to_gimbals+0xd8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc41 	bl	8000490 <__aeabi_f2d>
 8000c0e:	a320      	add	r3, pc, #128	; (adr r3, 8000c90 <remap_angles_to_gimbals+0xc8>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff fade 	bl	80001d4 <__adddf3>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	a317      	add	r3, pc, #92	; (adr r3, 8000c80 <remap_angles_to_gimbals+0xb8>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff fdb5 	bl	8000794 <__aeabi_ddiv>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff ff35 	bl	8000aa0 <__aeabi_d2f>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <remap_angles_to_gimbals+0xdc>)
 8000c3a:	6013      	str	r3, [r2, #0]
	gimbal_roll = lerp(0, 1, remapped_angle_x);
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <remap_angles_to_gimbals+0xd4>)
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	eeb0 1a67 	vmov.f32	s2, s15
 8000c46:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c4a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000ca8 <remap_angles_to_gimbals+0xe0>
 8000c4e:	f003 f943 	bl	8003ed8 <lerp>
 8000c52:	eef0 7a40 	vmov.f32	s15, s0
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <remap_angles_to_gimbals+0xe4>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
	gimbal_pitch = lerp(0, 1, remapped_angle_y);
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <remap_angles_to_gimbals+0xdc>)
 8000c5e:	edd3 7a00 	vldr	s15, [r3]
 8000c62:	eeb0 1a67 	vmov.f32	s2, s15
 8000c66:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c6a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000ca8 <remap_angles_to_gimbals+0xe0>
 8000c6e:	f003 f933 	bl	8003ed8 <lerp>
 8000c72:	eef0 7a40 	vmov.f32	s15, s0
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <remap_angles_to_gimbals+0xe8>)
 8000c78:	edc3 7a00 	vstr	s15, [r3]
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	54442d18 	.word	0x54442d18
 8000c84:	400921fb 	.word	0x400921fb
 8000c88:	54442d18 	.word	0x54442d18
 8000c8c:	401921fb 	.word	0x401921fb
 8000c90:	54442d18 	.word	0x54442d18
 8000c94:	3ff921fb 	.word	0x3ff921fb
 8000c98:	200002d0 	.word	0x200002d0
 8000c9c:	200000b4 	.word	0x200000b4
 8000ca0:	200002d4 	.word	0x200002d4
 8000ca4:	200000b8 	.word	0x200000b8
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	200002d8 	.word	0x200002d8
 8000cb0:	200002dc 	.word	0x200002dc

08000cb4 <reset_aux_frame>:

/*
 * Reset aux frame (identity)
 */
void reset_aux_frame() {
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
	q0 = 1.0f;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <reset_aux_frame+0x30>)
 8000cba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000cbe:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <reset_aux_frame+0x34>)
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <reset_aux_frame+0x38>)
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <reset_aux_frame+0x3c>)
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000024 	.word	0x20000024
 8000ce8:	200002c4 	.word	0x200002c4
 8000cec:	200002c8 	.word	0x200002c8
 8000cf0:	200002cc 	.word	0x200002cc

08000cf4 <convert_quaternion_to_euler>:

/*
 * Convert quaternion to euler angles
 */
void convert_quaternion_to_euler() {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
	// angle_y = asin(2 * (q1 * q2 + q3 * q0));
	// angle_x = atan2(2 * (q.w * q.x + q.y * q.z), 1 - 2 * (q.x * q.x + q.y * q.y));
	// angle_x = atan2(2 * (q0 * q1 + q2 * q3), 1 - 2 * (q1 * q1 + q2 * q2));
	// angle_y = atan2(sqrt(1 + 2 * (q0 * q2 - q1 * q3)), sqrt(1 - 2 * (q0 * q2 - q0 * q3))) - M_PI / 2;
	
	double q2sqr = q2 * q2;
 8000cfa:	4b7f      	ldr	r3, [pc, #508]	; (8000ef8 <convert_quaternion_to_euler+0x204>)
 8000cfc:	ed93 7a00 	vldr	s14, [r3]
 8000d00:	4b7d      	ldr	r3, [pc, #500]	; (8000ef8 <convert_quaternion_to_euler+0x204>)
 8000d02:	edd3 7a00 	vldr	s15, [r3]
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	ee17 0a90 	vmov	r0, s15
 8000d0e:	f7ff fbbf 	bl	8000490 <__aeabi_f2d>
 8000d12:	4602      	mov	r2, r0
 8000d14:	460b      	mov	r3, r1
 8000d16:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double t0 = -2.0 * (q2sqr + q3 * q3) + 1.0;
 8000d1a:	4b78      	ldr	r3, [pc, #480]	; (8000efc <convert_quaternion_to_euler+0x208>)
 8000d1c:	ed93 7a00 	vldr	s14, [r3]
 8000d20:	4b76      	ldr	r3, [pc, #472]	; (8000efc <convert_quaternion_to_euler+0x208>)
 8000d22:	edd3 7a00 	vldr	s15, [r3]
 8000d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d2a:	ee17 0a90 	vmov	r0, s15
 8000d2e:	f7ff fbaf 	bl	8000490 <__aeabi_f2d>
 8000d32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000d36:	f7ff fa4d 	bl	80001d4 <__adddf3>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	f04f 0200 	mov.w	r2, #0
 8000d46:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000d4a:	f7ff fbf9 	bl	8000540 <__aeabi_dmul>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	460b      	mov	r3, r1
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 0200 	mov.w	r2, #0
 8000d5a:	4b69      	ldr	r3, [pc, #420]	; (8000f00 <convert_quaternion_to_euler+0x20c>)
 8000d5c:	f7ff fa3a 	bl	80001d4 <__adddf3>
 8000d60:	4602      	mov	r2, r0
 8000d62:	460b      	mov	r3, r1
 8000d64:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double t1 = +2.0 * (q1 * q2 + q0 * q3);
 8000d68:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <convert_quaternion_to_euler+0x210>)
 8000d6a:	ed93 7a00 	vldr	s14, [r3]
 8000d6e:	4b62      	ldr	r3, [pc, #392]	; (8000ef8 <convert_quaternion_to_euler+0x204>)
 8000d70:	edd3 7a00 	vldr	s15, [r3]
 8000d74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d78:	4b63      	ldr	r3, [pc, #396]	; (8000f08 <convert_quaternion_to_euler+0x214>)
 8000d7a:	edd3 6a00 	vldr	s13, [r3]
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <convert_quaternion_to_euler+0x208>)
 8000d80:	edd3 7a00 	vldr	s15, [r3]
 8000d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d8c:	ee17 0a90 	vmov	r0, s15
 8000d90:	f7ff fb7e 	bl	8000490 <__aeabi_f2d>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	f7ff fa1c 	bl	80001d4 <__adddf3>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double t2 = -2.0 * (q1 * q3 - q0 * q2);
 8000da4:	4b57      	ldr	r3, [pc, #348]	; (8000f04 <convert_quaternion_to_euler+0x210>)
 8000da6:	ed93 7a00 	vldr	s14, [r3]
 8000daa:	4b54      	ldr	r3, [pc, #336]	; (8000efc <convert_quaternion_to_euler+0x208>)
 8000dac:	edd3 7a00 	vldr	s15, [r3]
 8000db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <convert_quaternion_to_euler+0x214>)
 8000db6:	edd3 6a00 	vldr	s13, [r3]
 8000dba:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <convert_quaternion_to_euler+0x204>)
 8000dbc:	edd3 7a00 	vldr	s15, [r3]
 8000dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc8:	ee17 0a90 	vmov	r0, s15
 8000dcc:	f7ff fb60 	bl	8000490 <__aeabi_f2d>
 8000dd0:	f04f 0200 	mov.w	r2, #0
 8000dd4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000dd8:	f7ff fbb2 	bl	8000540 <__aeabi_dmul>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double t3 = +2.0 * (q2 * q3 + q0 * q1);
 8000de4:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <convert_quaternion_to_euler+0x204>)
 8000de6:	ed93 7a00 	vldr	s14, [r3]
 8000dea:	4b44      	ldr	r3, [pc, #272]	; (8000efc <convert_quaternion_to_euler+0x208>)
 8000dec:	edd3 7a00 	vldr	s15, [r3]
 8000df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df4:	4b44      	ldr	r3, [pc, #272]	; (8000f08 <convert_quaternion_to_euler+0x214>)
 8000df6:	edd3 6a00 	vldr	s13, [r3]
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <convert_quaternion_to_euler+0x210>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e08:	ee17 0a90 	vmov	r0, s15
 8000e0c:	f7ff fb40 	bl	8000490 <__aeabi_f2d>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	f7ff f9de 	bl	80001d4 <__adddf3>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double t4 = -2.0 * (q1 * q1 + q2sqr) + 1.0;
 8000e20:	4b38      	ldr	r3, [pc, #224]	; (8000f04 <convert_quaternion_to_euler+0x210>)
 8000e22:	ed93 7a00 	vldr	s14, [r3]
 8000e26:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <convert_quaternion_to_euler+0x210>)
 8000e28:	edd3 7a00 	vldr	s15, [r3]
 8000e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e30:	ee17 0a90 	vmov	r0, s15
 8000e34:	f7ff fb2c 	bl	8000490 <__aeabi_f2d>
 8000e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000e3c:	f7ff f9ca 	bl	80001d4 <__adddf3>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4610      	mov	r0, r2
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000e50:	f7ff fb76 	bl	8000540 <__aeabi_dmul>
 8000e54:	4602      	mov	r2, r0
 8000e56:	460b      	mov	r3, r1
 8000e58:	4610      	mov	r0, r2
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <convert_quaternion_to_euler+0x20c>)
 8000e62:	f7ff f9b7 	bl	80001d4 <__adddf3>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	e9c7 2300 	strd	r2, r3, [r7]

	t2 = t2 > 1.0 ? 1.0 : t2;
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <convert_quaternion_to_euler+0x20c>)
 8000e74:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e78:	f7ff fdf2 	bl	8000a60 <__aeabi_dcmpgt>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <convert_quaternion_to_euler+0x196>
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <convert_quaternion_to_euler+0x20c>)
 8000e88:	e001      	b.n	8000e8e <convert_quaternion_to_euler+0x19a>
 8000e8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t2 = t2 < -1.0 ? -1.0 : t2;
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <convert_quaternion_to_euler+0x218>)
 8000e98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000e9c:	f7ff fdc2 	bl	8000a24 <__aeabi_dcmplt>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <convert_quaternion_to_euler+0x1ba>
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <convert_quaternion_to_euler+0x218>)
 8000eac:	e001      	b.n	8000eb2 <convert_quaternion_to_euler+0x1be>
 8000eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000eb2:	e9c7 2304 	strd	r2, r3, [r7, #16]

	angle_y = asin(t2);
 8000eb6:	ed97 0b04 	vldr	d0, [r7, #16]
 8000eba:	f006 fbbd 	bl	8007638 <asin>
 8000ebe:	ec53 2b10 	vmov	r2, r3, d0
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fdeb 	bl	8000aa0 <__aeabi_d2f>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <convert_quaternion_to_euler+0x21c>)
 8000ece:	6013      	str	r3, [r2, #0]
	angle_x = atan2(t3, t4);
 8000ed0:	ed97 1b00 	vldr	d1, [r7]
 8000ed4:	ed97 0b02 	vldr	d0, [r7, #8]
 8000ed8:	f006 fbe2 	bl	80076a0 <atan2>
 8000edc:	ec53 2b10 	vmov	r2, r3, d0
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f7ff fddc 	bl	8000aa0 <__aeabi_d2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <convert_quaternion_to_euler+0x220>)
 8000eec:	6013      	str	r3, [r2, #0]
	// angle_z = atan2(t1, t0);
}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	; 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200002c8 	.word	0x200002c8
 8000efc:	200002cc 	.word	0x200002cc
 8000f00:	3ff00000 	.word	0x3ff00000
 8000f04:	200002c4 	.word	0x200002c4
 8000f08:	20000024 	.word	0x20000024
 8000f0c:	bff00000 	.word	0xbff00000
 8000f10:	200002d4 	.word	0x200002d4
 8000f14:	200002d0 	.word	0x200002d0

08000f18 <MadgwickAHRSupdate>:


//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float sample_freq) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b0ae      	sub	sp, #184	; 0xb8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000f22:	edc7 0a08 	vstr	s1, [r7, #32]
 8000f26:	ed87 1a07 	vstr	s2, [r7, #28]
 8000f2a:	edc7 1a06 	vstr	s3, [r7, #24]
 8000f2e:	ed87 2a05 	vstr	s4, [r7, #20]
 8000f32:	edc7 2a04 	vstr	s5, [r7, #16]
 8000f36:	ed87 3a03 	vstr	s6, [r7, #12]
 8000f3a:	edc7 3a02 	vstr	s7, [r7, #8]
 8000f3e:	ed87 4a01 	vstr	s8, [r7, #4]
 8000f42:	edc7 4a00 	vstr	s9, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f52:	d11f      	bne.n	8000f94 <MadgwickAHRSupdate+0x7c>
 8000f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	d118      	bne.n	8000f94 <MadgwickAHRSupdate+0x7c>
 8000f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6e:	d111      	bne.n	8000f94 <MadgwickAHRSupdate+0x7c>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az, sample_freq);
 8000f70:	ed97 3a00 	vldr	s6, [r7]
 8000f74:	edd7 2a04 	vldr	s5, [r7, #16]
 8000f78:	ed97 2a05 	vldr	s4, [r7, #20]
 8000f7c:	edd7 1a06 	vldr	s3, [r7, #24]
 8000f80:	ed97 1a07 	vldr	s2, [r7, #28]
 8000f84:	edd7 0a08 	vldr	s1, [r7, #32]
 8000f88:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000f8c:	f000 feec 	bl	8001d68 <MadgwickAHRSupdateIMU>
		return;
 8000f90:	f000 bedc 	b.w	8001d4c <MadgwickAHRSupdate+0xe34>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000f94:	4be4      	ldr	r3, [pc, #912]	; (8001328 <MadgwickAHRSupdate+0x410>)
 8000f96:	edd3 7a00 	vldr	s15, [r3]
 8000f9a:	eeb1 7a67 	vneg.f32	s14, s15
 8000f9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa6:	4be1      	ldr	r3, [pc, #900]	; (800132c <MadgwickAHRSupdate+0x414>)
 8000fa8:	edd3 6a00 	vldr	s13, [r3]
 8000fac:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb8:	4bdd      	ldr	r3, [pc, #884]	; (8001330 <MadgwickAHRSupdate+0x418>)
 8000fba:	edd3 6a00 	vldr	s13, [r3]
 8000fbe:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000fd6:	4bd7      	ldr	r3, [pc, #860]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 8000fd8:	ed93 7a00 	vldr	s14, [r3]
 8000fdc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fe4:	4bd1      	ldr	r3, [pc, #836]	; (800132c <MadgwickAHRSupdate+0x414>)
 8000fe6:	edd3 6a00 	vldr	s13, [r3]
 8000fea:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ff6:	4bce      	ldr	r3, [pc, #824]	; (8001330 <MadgwickAHRSupdate+0x418>)
 8000ff8:	edd3 6a00 	vldr	s13, [r3]
 8000ffc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001008:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800100c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001010:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001014:	4bc7      	ldr	r3, [pc, #796]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 8001016:	ed93 7a00 	vldr	s14, [r3]
 800101a:	edd7 7a08 	vldr	s15, [r7, #32]
 800101e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001022:	4bc1      	ldr	r3, [pc, #772]	; (8001328 <MadgwickAHRSupdate+0x410>)
 8001024:	edd3 6a00 	vldr	s13, [r3]
 8001028:	edd7 7a07 	vldr	s15, [r7, #28]
 800102c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001030:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001034:	4bbe      	ldr	r3, [pc, #760]	; (8001330 <MadgwickAHRSupdate+0x418>)
 8001036:	edd3 6a00 	vldr	s13, [r3]
 800103a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800103e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800104a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800104e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001052:	4bb8      	ldr	r3, [pc, #736]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 8001054:	ed93 7a00 	vldr	s14, [r3]
 8001058:	edd7 7a07 	vldr	s15, [r7, #28]
 800105c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001060:	4bb1      	ldr	r3, [pc, #708]	; (8001328 <MadgwickAHRSupdate+0x410>)
 8001062:	edd3 6a00 	vldr	s13, [r3]
 8001066:	edd7 7a08 	vldr	s15, [r7, #32]
 800106a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001072:	4bae      	ldr	r3, [pc, #696]	; (800132c <MadgwickAHRSupdate+0x414>)
 8001074:	edd3 6a00 	vldr	s13, [r3]
 8001078:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001084:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001090:	edd7 7a06 	vldr	s15, [r7, #24]
 8001094:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	d10e      	bne.n	80010bc <MadgwickAHRSupdate+0x1a4>
 800109e:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d107      	bne.n	80010bc <MadgwickAHRSupdate+0x1a4>
 80010ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	f000 85ac 	beq.w	8001c14 <MadgwickAHRSupdate+0xcfc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80010bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010c0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	f001 f976 	bl	80023d0 <invSqrt>
 80010e4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80010e8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80010f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80010fc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001104:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001108:	ed97 7a04 	vldr	s14, [r7, #16]
 800110c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001118:	edd7 7a03 	vldr	s15, [r7, #12]
 800111c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001120:	edd7 7a02 	vldr	s15, [r7, #8]
 8001124:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001130:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	eeb0 0a67 	vmov.f32	s0, s15
 800113c:	f001 f948 	bl	80023d0 <invSqrt>
 8001140:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001144:	ed97 7a03 	vldr	s14, [r7, #12]
 8001148:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800114c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001150:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001154:	ed97 7a02 	vldr	s14, [r7, #8]
 8001158:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800115c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001160:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001164:	ed97 7a01 	vldr	s14, [r7, #4]
 8001168:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800116c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001170:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800117e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001186:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001194:	ed97 7a02 	vldr	s14, [r7, #8]
 8001198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80011a0:	4b64      	ldr	r3, [pc, #400]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 80011b6:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <MadgwickAHRSupdate+0x410>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 80011cc:	4b59      	ldr	r3, [pc, #356]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <MadgwickAHRSupdate+0x410>)
 80011dc:	edd3 7a00 	vldr	s15, [r3]
 80011e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011e4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <MadgwickAHRSupdate+0x414>)
 80011ea:	edd3 7a00 	vldr	s15, [r3]
 80011ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80011f6:	4b4e      	ldr	r3, [pc, #312]	; (8001330 <MadgwickAHRSupdate+0x418>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001200:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <MadgwickAHRSupdate+0x414>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001218:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 800121c:	4b43      	ldr	r3, [pc, #268]	; (800132c <MadgwickAHRSupdate+0x414>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001226:	4b42      	ldr	r3, [pc, #264]	; (8001330 <MadgwickAHRSupdate+0x418>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001230:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001234:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001248:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 800124a:	ed93 7a00 	vldr	s14, [r3]
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <MadgwickAHRSupdate+0x410>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001258:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 800125c:	4b35      	ldr	r3, [pc, #212]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 800125e:	ed93 7a00 	vldr	s14, [r3]
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <MadgwickAHRSupdate+0x414>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <MadgwickAHRSupdate+0x41c>)
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <MadgwickAHRSupdate+0x418>)
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001280:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001284:	4b28      	ldr	r3, [pc, #160]	; (8001328 <MadgwickAHRSupdate+0x410>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <MadgwickAHRSupdate+0x410>)
 800128c:	edd3 7a00 	vldr	s15, [r3]
 8001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001294:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MadgwickAHRSupdate+0x410>)
 800129a:	ed93 7a00 	vldr	s14, [r3]
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <MadgwickAHRSupdate+0x414>)
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012a8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MadgwickAHRSupdate+0x410>)
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MadgwickAHRSupdate+0x418>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MadgwickAHRSupdate+0x414>)
 80012c2:	ed93 7a00 	vldr	s14, [r3]
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <MadgwickAHRSupdate+0x414>)
 80012c8:	edd3 7a00 	vldr	s15, [r3]
 80012cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <MadgwickAHRSupdate+0x414>)
 80012d6:	ed93 7a00 	vldr	s14, [r3]
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MadgwickAHRSupdate+0x418>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MadgwickAHRSupdate+0x418>)
 80012ea:	ed93 7a00 	vldr	s14, [r3]
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <MadgwickAHRSupdate+0x418>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80012fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001300:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001304:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MadgwickAHRSupdate+0x418>)
 800130a:	edd3 6a00 	vldr	s13, [r3]
 800130e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001312:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <MadgwickAHRSupdate+0x414>)
 800131c:	edd3 6a00 	vldr	s13, [r3]
 8001320:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001324:	e008      	b.n	8001338 <MadgwickAHRSupdate+0x420>
 8001326:	bf00      	nop
 8001328:	200002c4 	.word	0x200002c4
 800132c:	200002c8 	.word	0x200002c8
 8001330:	200002cc 	.word	0x200002cc
 8001334:	20000024 	.word	0x20000024
 8001338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001340:	edd7 6a03 	vldr	s13, [r7, #12]
 8001344:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800134c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001350:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001354:	edd7 7a02 	vldr	s15, [r7, #8]
 8001358:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800135c:	4bf5      	ldr	r3, [pc, #980]	; (8001734 <MadgwickAHRSupdate+0x81c>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800136a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800136e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001372:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001376:	4bf0      	ldr	r3, [pc, #960]	; (8001738 <MadgwickAHRSupdate+0x820>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001384:	edd7 6a03 	vldr	s13, [r7, #12]
 8001388:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800138c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001390:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001394:	edd7 6a03 	vldr	s13, [r7, #12]
 8001398:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80013a8:	4be3      	ldr	r3, [pc, #908]	; (8001738 <MadgwickAHRSupdate+0x820>)
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80013b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b6:	edd7 6a02 	vldr	s13, [r7, #8]
 80013ba:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80013be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c6:	4bdd      	ldr	r3, [pc, #884]	; (800173c <MadgwickAHRSupdate+0x824>)
 80013c8:	edd3 6a00 	vldr	s13, [r3]
 80013cc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80013d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d8:	4bd6      	ldr	r3, [pc, #856]	; (8001734 <MadgwickAHRSupdate+0x81c>)
 80013da:	edd3 6a00 	vldr	s13, [r3]
 80013de:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80013e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80013ee:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80013f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013fa:	edd7 6a02 	vldr	s13, [r7, #8]
 80013fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800140a:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800140e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001412:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001416:	4bc8      	ldr	r3, [pc, #800]	; (8001738 <MadgwickAHRSupdate+0x820>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001424:	edd7 6a02 	vldr	s13, [r7, #8]
 8001428:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800142c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001434:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001438:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800143c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001440:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001444:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	ee17 0a90 	vmov	r0, s15
 8001450:	f7ff f81e 	bl	8000490 <__aeabi_f2d>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	ec43 2b10 	vmov	d0, r2, r3
 800145c:	f006 f922 	bl	80076a4 <sqrt>
 8001460:	ec53 2b10 	vmov	r2, r3, d0
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fb1a 	bl	8000aa0 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001470:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001474:	eeb1 7a67 	vneg.f32	s14, s15
 8001478:	4bae      	ldr	r3, [pc, #696]	; (8001734 <MadgwickAHRSupdate+0x81c>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001482:	4bae      	ldr	r3, [pc, #696]	; (800173c <MadgwickAHRSupdate+0x824>)
 8001484:	edd3 6a00 	vldr	s13, [r3]
 8001488:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800148c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001494:	edd7 6a01 	vldr	s13, [r7, #4]
 8001498:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800149c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a4:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <MadgwickAHRSupdate+0x820>)
 80014a6:	edd3 6a00 	vldr	s13, [r3]
 80014aa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80014ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b6:	edd7 6a01 	vldr	s13, [r7, #4]
 80014ba:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80014be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014c6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80014ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80014ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014d2:	4b99      	ldr	r3, [pc, #612]	; (8001738 <MadgwickAHRSupdate+0x820>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e0:	edd7 6a01 	vldr	s13, [r7, #4]
 80014e4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014f0:	edd7 6a01 	vldr	s13, [r7, #4]
 80014f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001500:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001504:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001508:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800150c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 8001510:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001514:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001518:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800151c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001520:	eeb1 7a67 	vneg.f32	s14, s15
 8001524:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001528:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800152c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001530:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001534:	edd7 7a06 	vldr	s15, [r7, #24]
 8001538:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800153c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001540:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001544:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001548:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800154c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001550:	edd7 7a05 	vldr	s15, [r7, #20]
 8001554:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001558:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001560:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001564:	4b73      	ldr	r3, [pc, #460]	; (8001734 <MadgwickAHRSupdate+0x81c>)
 8001566:	edd3 6a00 	vldr	s13, [r3]
 800156a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800156e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001572:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001576:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800157a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800157e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001582:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001586:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800158a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800158e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001592:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001596:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800159a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800159e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015a2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015aa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015ba:	eef1 6a67 	vneg.f32	s13, s15
 80015be:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <MadgwickAHRSupdate+0x820>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015c8:	4b5c      	ldr	r3, [pc, #368]	; (800173c <MadgwickAHRSupdate+0x824>)
 80015ca:	ed93 6a00 	vldr	s12, [r3]
 80015ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80015d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80015da:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80015de:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80015e2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80015e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015ee:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80015f2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015f6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80015fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015fe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001602:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001606:	edd7 7a02 	vldr	s15, [r7, #8]
 800160a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800160e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001612:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <MadgwickAHRSupdate+0x81c>)
 8001618:	edd3 6a00 	vldr	s13, [r3]
 800161c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001620:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001624:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001628:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800162c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001630:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001634:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001638:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800163c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001640:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001644:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001648:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800164c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001650:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001654:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001658:	edd7 7a01 	vldr	s15, [r7, #4]
 800165c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001668:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800166c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001670:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001674:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001684:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800168c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001690:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001694:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001698:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800169c:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80016a4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <MadgwickAHRSupdate+0x824>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80016ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016be:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80016c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016c6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80016ca:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016d6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016da:	edd7 7a04 	vldr	s15, [r7, #16]
 80016de:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MadgwickAHRSupdate+0x820>)
 80016ec:	edd3 6a00 	vldr	s13, [r3]
 80016f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80016fc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001700:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001704:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001708:	ee36 6a67 	vsub.f32	s12, s12, s15
 800170c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001710:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001714:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001718:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800171c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001720:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001724:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001728:	ee36 6a27 	vadd.f32	s12, s12, s15
 800172c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001730:	e006      	b.n	8001740 <MadgwickAHRSupdate+0x828>
 8001732:	bf00      	nop
 8001734:	200002c8 	.word	0x200002c8
 8001738:	200002cc 	.word	0x200002cc
 800173c:	200002c4 	.word	0x200002c4
 8001740:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800174c:	4bf6      	ldr	r3, [pc, #984]	; (8001b28 <MadgwickAHRSupdate+0xc10>)
 800174e:	edd3 6a00 	vldr	s13, [r3]
 8001752:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001756:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800175a:	4bf4      	ldr	r3, [pc, #976]	; (8001b2c <MadgwickAHRSupdate+0xc14>)
 800175c:	ed93 6a00 	vldr	s12, [r3]
 8001760:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001764:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001768:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800176c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001770:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001774:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001778:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800177c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001780:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001784:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001788:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800178c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001790:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001794:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001798:	edd7 7a02 	vldr	s15, [r7, #8]
 800179c:	ee76 7a67 	vsub.f32	s15, s12, s15
 80017a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017a8:	4be1      	ldr	r3, [pc, #900]	; (8001b30 <MadgwickAHRSupdate+0xc18>)
 80017aa:	edd3 6a00 	vldr	s13, [r3]
 80017ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017b6:	4bdf      	ldr	r3, [pc, #892]	; (8001b34 <MadgwickAHRSupdate+0xc1c>)
 80017b8:	ed93 6a00 	vldr	s12, [r3]
 80017bc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80017c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017c8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80017cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80017d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017d8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80017dc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80017e0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017e4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80017e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017ec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80017f0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80017f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80017f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80017fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001800:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001810:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001814:	eeb1 7a67 	vneg.f32	s14, s15
 8001818:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800181c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001820:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001824:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001828:	edd7 7a06 	vldr	s15, [r7, #24]
 800182c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001830:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001834:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001838:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800183c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001840:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001844:	edd7 7a05 	vldr	s15, [r7, #20]
 8001848:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800184c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001858:	4bb3      	ldr	r3, [pc, #716]	; (8001b28 <MadgwickAHRSupdate+0xc10>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001862:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001866:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800186a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800186e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001872:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001876:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800187a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800187e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001882:	edd7 7a04 	vldr	s15, [r7, #16]
 8001886:	ee76 7a67 	vsub.f32	s15, s12, s15
 800188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001892:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001896:	eef1 6a67 	vneg.f32	s13, s15
 800189a:	4ba3      	ldr	r3, [pc, #652]	; (8001b28 <MadgwickAHRSupdate+0xc10>)
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018a4:	4ba1      	ldr	r3, [pc, #644]	; (8001b2c <MadgwickAHRSupdate+0xc14>)
 80018a6:	ed93 6a00 	vldr	s12, [r3]
 80018aa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018b6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80018ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018be:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018c6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018d2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80018d6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018da:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018de:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018e6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ee:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018fa:	4b8e      	ldr	r3, [pc, #568]	; (8001b34 <MadgwickAHRSupdate+0xc1c>)
 80018fc:	edd3 6a00 	vldr	s13, [r3]
 8001900:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001904:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001908:	4b89      	ldr	r3, [pc, #548]	; (8001b30 <MadgwickAHRSupdate+0xc18>)
 800190a:	ed93 6a00 	vldr	s12, [r3]
 800190e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001912:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001916:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800191a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800191e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001922:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001926:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800192a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800192e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001932:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001936:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800193a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800193e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001942:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001946:	edd7 7a02 	vldr	s15, [r7, #8]
 800194a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800194e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001952:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001956:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <MadgwickAHRSupdate+0xc14>)
 8001958:	edd3 6a00 	vldr	s13, [r3]
 800195c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001960:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001964:	4b70      	ldr	r3, [pc, #448]	; (8001b28 <MadgwickAHRSupdate+0xc10>)
 8001966:	ed93 6a00 	vldr	s12, [r3]
 800196a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800196e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001972:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001976:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 800197a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800197e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001982:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001986:	ee26 6a27 	vmul.f32	s12, s12, s15
 800198a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800198e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001992:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001996:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800199a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800199e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019a2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019a6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019be:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019c6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80019d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80019da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019de:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019e2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019e6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019f6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a02:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a06:	eef1 6a67 	vneg.f32	s13, s15
 8001a0a:	4b49      	ldr	r3, [pc, #292]	; (8001b30 <MadgwickAHRSupdate+0xc18>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <MadgwickAHRSupdate+0xc1c>)
 8001a16:	ed93 6a00 	vldr	s12, [r3]
 8001a1a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a22:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a26:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a2a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a2e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a32:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a36:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a42:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a46:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a4a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a4e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a56:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a5e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a6e:	eef1 6a67 	vneg.f32	s13, s15
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <MadgwickAHRSupdate+0xc14>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <MadgwickAHRSupdate+0xc10>)
 8001a7e:	ed93 6a00 	vldr	s12, [r3]
 8001a82:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a8a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a8e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a92:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001a96:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a9a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aa2:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001aa6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001aaa:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001aae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ab2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ab6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MadgwickAHRSupdate+0xc1c>)
 8001acc:	edd3 6a00 	vldr	s13, [r3]
 8001ad0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ad8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001adc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ae0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ae4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ae8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aec:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001af0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001af4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001af8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001afc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b00:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b04:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001b20:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b24:	e008      	b.n	8001b38 <MadgwickAHRSupdate+0xc20>
 8001b26:	bf00      	nop
 8001b28:	200002c8 	.word	0x200002c8
 8001b2c:	20000024 	.word	0x20000024
 8001b30:	200002cc 	.word	0x200002cc
 8001b34:	200002c4 	.word	0x200002c4
 8001b38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b3c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b40:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b48:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b54:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	f000 fc34 	bl	80023d0 <invSqrt>
 8001b68:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001b6c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001b70:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b78:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001b7c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001b80:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001b8c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b90:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001b9c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001ba0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001bac:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <MadgwickAHRSupdate+0xe3c>)
 8001bae:	ed93 7a00 	vldr	s14, [r3]
 8001bb2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <MadgwickAHRSupdate+0xe3c>)
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bdc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001be0:	4b5c      	ldr	r3, [pc, #368]	; (8001d54 <MadgwickAHRSupdate+0xe3c>)
 8001be2:	ed93 7a00 	vldr	s14, [r3]
 8001be6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bee:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <MadgwickAHRSupdate+0xe3c>)
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c08:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c10:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 8001c14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c18:	edd7 7a00 	vldr	s15, [r7]
 8001c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c20:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	4b4b      	ldr	r3, [pc, #300]	; (8001d58 <MadgwickAHRSupdate+0xe40>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	4b49      	ldr	r3, [pc, #292]	; (8001d58 <MadgwickAHRSupdate+0xe40>)
 8001c34:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 8001c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c3c:	edd7 7a00 	vldr	s15, [r7]
 8001c40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c44:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4c:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <MadgwickAHRSupdate+0xe44>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <MadgwickAHRSupdate+0xe44>)
 8001c58:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8001c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c60:	edd7 7a00 	vldr	s15, [r7]
 8001c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c68:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c70:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <MadgwickAHRSupdate+0xe48>)
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <MadgwickAHRSupdate+0xe48>)
 8001c7c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8001c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c84:	edd7 7a00 	vldr	s15, [r7]
 8001c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c8c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <MadgwickAHRSupdate+0xe4c>)
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <MadgwickAHRSupdate+0xe4c>)
 8001ca0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <MadgwickAHRSupdate+0xe40>)
 8001ca6:	ed93 7a00 	vldr	s14, [r3]
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MadgwickAHRSupdate+0xe40>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb4:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <MadgwickAHRSupdate+0xe44>)
 8001cb6:	edd3 6a00 	vldr	s13, [r3]
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <MadgwickAHRSupdate+0xe44>)
 8001cbc:	edd3 7a00 	vldr	s15, [r3]
 8001cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc8:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <MadgwickAHRSupdate+0xe48>)
 8001cca:	edd3 6a00 	vldr	s13, [r3]
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <MadgwickAHRSupdate+0xe48>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cdc:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <MadgwickAHRSupdate+0xe4c>)
 8001cde:	edd3 6a00 	vldr	s13, [r3]
 8001ce2:	4b20      	ldr	r3, [pc, #128]	; (8001d64 <MadgwickAHRSupdate+0xe4c>)
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf4:	f000 fb6c 	bl	80023d0 <invSqrt>
 8001cf8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <MadgwickAHRSupdate+0xe40>)
 8001cfe:	ed93 7a00 	vldr	s14, [r3]
 8001d02:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MadgwickAHRSupdate+0xe40>)
 8001d0c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MadgwickAHRSupdate+0xe44>)
 8001d12:	ed93 7a00 	vldr	s14, [r3]
 8001d16:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MadgwickAHRSupdate+0xe44>)
 8001d20:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MadgwickAHRSupdate+0xe48>)
 8001d26:	ed93 7a00 	vldr	s14, [r3]
 8001d2a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MadgwickAHRSupdate+0xe48>)
 8001d34:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <MadgwickAHRSupdate+0xe4c>)
 8001d3a:	ed93 7a00 	vldr	s14, [r3]
 8001d3e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <MadgwickAHRSupdate+0xe4c>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
}
 8001d4c:	37b8      	adds	r7, #184	; 0xb8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000024 	.word	0x20000024
 8001d5c:	200002c4 	.word	0x200002c4
 8001d60:	200002c8 	.word	0x200002c8
 8001d64:	200002cc 	.word	0x200002cc

08001d68 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sample_freq) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b09e      	sub	sp, #120	; 0x78
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	ed87 0a07 	vstr	s0, [r7, #28]
 8001d72:	edc7 0a06 	vstr	s1, [r7, #24]
 8001d76:	ed87 1a05 	vstr	s2, [r7, #20]
 8001d7a:	edc7 1a04 	vstr	s3, [r7, #16]
 8001d7e:	ed87 2a03 	vstr	s4, [r7, #12]
 8001d82:	edc7 2a02 	vstr	s5, [r7, #8]
 8001d86:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001d8a:	4bec      	ldr	r3, [pc, #944]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eeb1 7a67 	vneg.f32	s14, s15
 8001d94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d9c:	4be8      	ldr	r3, [pc, #928]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 8001d9e:	edd3 6a00 	vldr	s13, [r3]
 8001da2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dae:	4be5      	ldr	r3, [pc, #916]	; (8002144 <MadgwickAHRSupdateIMU+0x3dc>)
 8001db0:	edd3 6a00 	vldr	s13, [r3]
 8001db4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001db8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001dcc:	4bde      	ldr	r3, [pc, #888]	; (8002148 <MadgwickAHRSupdateIMU+0x3e0>)
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dda:	4bd9      	ldr	r3, [pc, #868]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 8001ddc:	edd3 6a00 	vldr	s13, [r3]
 8001de0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dec:	4bd5      	ldr	r3, [pc, #852]	; (8002144 <MadgwickAHRSupdateIMU+0x3dc>)
 8001dee:	edd3 6a00 	vldr	s13, [r3]
 8001df2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e06:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001e0a:	4bcf      	ldr	r3, [pc, #828]	; (8002148 <MadgwickAHRSupdateIMU+0x3e0>)
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e18:	4bc8      	ldr	r3, [pc, #800]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 8001e1a:	edd3 6a00 	vldr	s13, [r3]
 8001e1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e2a:	4bc6      	ldr	r3, [pc, #792]	; (8002144 <MadgwickAHRSupdateIMU+0x3dc>)
 8001e2c:	edd3 6a00 	vldr	s13, [r3]
 8001e30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e44:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001e48:	4bbf      	ldr	r3, [pc, #764]	; (8002148 <MadgwickAHRSupdateIMU+0x3e0>)
 8001e4a:	ed93 7a00 	vldr	s14, [r3]
 8001e4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e56:	4bb9      	ldr	r3, [pc, #740]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 8001e58:	edd3 6a00 	vldr	s13, [r3]
 8001e5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e68:	4bb5      	ldr	r3, [pc, #724]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 8001e6a:	edd3 6a00 	vldr	s13, [r3]
 8001e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e82:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001e86:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	d10e      	bne.n	8001eb2 <MadgwickAHRSupdateIMU+0x14a>
 8001e94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d107      	bne.n	8001eb2 <MadgwickAHRSupdateIMU+0x14a>
 8001ea2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ea6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	f000 81e5 	beq.w	800227c <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001eb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001eba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed6:	f000 fa7b 	bl	80023d0 <invSqrt>
 8001eda:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 8001ede:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ee2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eea:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 8001eee:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ef2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;   
 8001efe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f02:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001f0e:	4b8e      	ldr	r3, [pc, #568]	; (8002148 <MadgwickAHRSupdateIMU+0x3e0>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f18:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8001f1c:	4b87      	ldr	r3, [pc, #540]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f26:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 8001f2a:	4b85      	ldr	r3, [pc, #532]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f34:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8001f38:	4b82      	ldr	r3, [pc, #520]	; (8002144 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f42:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8001f46:	4b80      	ldr	r3, [pc, #512]	; (8002148 <MadgwickAHRSupdateIMU+0x3e0>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f54:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8001f58:	4b78      	ldr	r3, [pc, #480]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8001f6a:	4b75      	ldr	r3, [pc, #468]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f78:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 8001f7c:	4b6f      	ldr	r3, [pc, #444]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 8001f8e:	4b6c      	ldr	r3, [pc, #432]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 8001fa0:	4b69      	ldr	r3, [pc, #420]	; (8002148 <MadgwickAHRSupdateIMU+0x3e0>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	4b68      	ldr	r3, [pc, #416]	; (8002148 <MadgwickAHRSupdateIMU+0x3e0>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 8001fb4:	4b61      	ldr	r3, [pc, #388]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	4b60      	ldr	r3, [pc, #384]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 8001fc8:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b5c      	ldr	r3, [pc, #368]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <MadgwickAHRSupdateIMU+0x3dc>)
 8001fde:	ed93 7a00 	vldr	s14, [r3]
 8001fe2:	4b58      	ldr	r3, [pc, #352]	; (8002144 <MadgwickAHRSupdateIMU+0x3dc>)
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fec:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001ff0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001ff4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002000:	edd7 7a04 	vldr	s15, [r7, #16]
 8002004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002008:	ee37 7a27 	vadd.f32	s14, s14, s15
 800200c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002010:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002018:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002020:	edd7 7a03 	vldr	s15, [r7, #12]
 8002024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002030:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002034:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800203c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002040:	edd7 7a04 	vldr	s15, [r7, #16]
 8002044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002048:	ee37 7a67 	vsub.f32	s14, s14, s15
 800204c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002050:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002054:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002058:	4b38      	ldr	r3, [pc, #224]	; (800213c <MadgwickAHRSupdateIMU+0x3d4>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002066:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800206a:	edd7 7a03 	vldr	s15, [r7, #12]
 800206e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002072:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002076:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800207a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800207e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002082:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002086:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800208e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002092:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800209e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80020a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80020a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80020b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020b6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80020ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <MadgwickAHRSupdateIMU+0x3d8>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80020cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80020d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020d8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80020dc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80020ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020f8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80020fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002100:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002104:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002110:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002114:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002120:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002124:	edd7 7a02 	vldr	s15, [r7, #8]
 8002128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002130:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002134:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002138:	e008      	b.n	800214c <MadgwickAHRSupdateIMU+0x3e4>
 800213a:	bf00      	nop
 800213c:	200002c4 	.word	0x200002c4
 8002140:	200002c8 	.word	0x200002c8
 8002144:	200002cc 	.word	0x200002cc
 8002148:	20000024 	.word	0x20000024
 800214c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002150:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002154:	4b99      	ldr	r3, [pc, #612]	; (80023bc <MadgwickAHRSupdateIMU+0x654>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002162:	edd7 7a04 	vldr	s15, [r7, #16]
 8002166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800216e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002172:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002176:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800217a:	4b90      	ldr	r3, [pc, #576]	; (80023bc <MadgwickAHRSupdateIMU+0x654>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002188:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800218c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002198:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800219c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80021a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80021c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c8:	eeb0 0a67 	vmov.f32	s0, s15
 80021cc:	f000 f900 	bl	80023d0 <invSqrt>
 80021d0:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 80021d4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80021d8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 80021e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80021e8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80021ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 80021f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80021f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80021fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002200:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 8002204:	ed97 7a08 	vldr	s14, [r7, #32]
 8002208:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800220c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002210:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002214:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <MadgwickAHRSupdateIMU+0x658>)
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 800222e:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <MadgwickAHRSupdateIMU+0x658>)
 8002230:	ed93 7a00 	vldr	s14, [r3]
 8002234:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002244:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 8002248:	4b5d      	ldr	r3, [pc, #372]	; (80023c0 <MadgwickAHRSupdateIMU+0x658>)
 800224a:	ed93 7a00 	vldr	s14, [r3]
 800224e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002256:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800225a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <MadgwickAHRSupdateIMU+0x658>)
 8002264:	ed93 7a00 	vldr	s14, [r3]
 8002268:	edd7 7a08 	vldr	s15, [r7, #32]
 800226c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002270:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002278:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 800227c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002280:	edd7 7a01 	vldr	s15, [r7, #4]
 8002284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002288:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800228c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002290:	4b4c      	ldr	r3, [pc, #304]	; (80023c4 <MadgwickAHRSupdateIMU+0x65c>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <MadgwickAHRSupdateIMU+0x65c>)
 800229c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 80022a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80022a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ac:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80022b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b4:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <MadgwickAHRSupdateIMU+0x660>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <MadgwickAHRSupdateIMU+0x660>)
 80022c0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 80022c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022d0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80022d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d8:	4b3c      	ldr	r3, [pc, #240]	; (80023cc <MadgwickAHRSupdateIMU+0x664>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e2:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <MadgwickAHRSupdateIMU+0x664>)
 80022e4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 80022e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022f4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80022f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022fc:	4b2f      	ldr	r3, [pc, #188]	; (80023bc <MadgwickAHRSupdateIMU+0x654>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <MadgwickAHRSupdateIMU+0x654>)
 8002308:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800230c:	4b2d      	ldr	r3, [pc, #180]	; (80023c4 <MadgwickAHRSupdateIMU+0x65c>)
 800230e:	ed93 7a00 	vldr	s14, [r3]
 8002312:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <MadgwickAHRSupdateIMU+0x65c>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800231c:	4b2a      	ldr	r3, [pc, #168]	; (80023c8 <MadgwickAHRSupdateIMU+0x660>)
 800231e:	edd3 6a00 	vldr	s13, [r3]
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <MadgwickAHRSupdateIMU+0x660>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <MadgwickAHRSupdateIMU+0x664>)
 8002332:	edd3 6a00 	vldr	s13, [r3]
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <MadgwickAHRSupdateIMU+0x664>)
 8002338:	edd3 7a00 	vldr	s15, [r3]
 800233c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002344:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <MadgwickAHRSupdateIMU+0x654>)
 8002346:	edd3 6a00 	vldr	s13, [r3]
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <MadgwickAHRSupdateIMU+0x654>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002358:	eeb0 0a67 	vmov.f32	s0, s15
 800235c:	f000 f838 	bl	80023d0 <invSqrt>
 8002360:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <MadgwickAHRSupdateIMU+0x65c>)
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800236e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MadgwickAHRSupdateIMU+0x65c>)
 8002374:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <MadgwickAHRSupdateIMU+0x660>)
 800237a:	ed93 7a00 	vldr	s14, [r3]
 800237e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MadgwickAHRSupdateIMU+0x660>)
 8002388:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800238c:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <MadgwickAHRSupdateIMU+0x664>)
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239a:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MadgwickAHRSupdateIMU+0x664>)
 800239c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <MadgwickAHRSupdateIMU+0x654>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ae:	4b03      	ldr	r3, [pc, #12]	; (80023bc <MadgwickAHRSupdateIMU+0x654>)
 80023b0:	edc3 7a00 	vstr	s15, [r3]
}
 80023b4:	bf00      	nop
 80023b6:	3778      	adds	r7, #120	; 0x78
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200002cc 	.word	0x200002cc
 80023c0:	20000000 	.word	0x20000000
 80023c4:	20000024 	.word	0x20000024
 80023c8:	200002c4 	.word	0x200002c4
 80023cc:	200002c8 	.word	0x200002c8

080023d0 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80023da:	edd7 7a01 	vldr	s15, [r7, #4]
 80023de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80023ee:	f107 0310 	add.w	r3, r7, #16
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	105a      	asrs	r2, r3, #1
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <invSqrt+0x74>)
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002408:	ed97 7a04 	vldr	s14, [r7, #16]
 800240c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002414:	edd7 7a04 	vldr	s15, [r7, #16]
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002424:	edd7 7a04 	vldr	s15, [r7, #16]
 8002428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	ee07 3a90 	vmov	s15, r3
}
 8002436:	eeb0 0a67 	vmov.f32	s0, s15
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	5f3759df 	.word	0x5f3759df

08002448 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	461a      	mov	r2, r3
 8002454:	460b      	mov	r3, r1
 8002456:	72fb      	strb	r3, [r7, #11]
 8002458:	4613      	mov	r3, r2
 800245a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685c      	ldr	r4, [r3, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	68d8      	ldr	r0, [r3, #12]
 8002464:	893b      	ldrh	r3, [r7, #8]
 8002466:	7af9      	ldrb	r1, [r7, #11]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	47a0      	blx	r4
 800246c:	6178      	str	r0, [r7, #20]

  return ret;
 800246e:	697b      	ldr	r3, [r7, #20]
}
 8002470:	4618      	mov	r0, r3
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}

08002478 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	461a      	mov	r2, r3
 8002484:	460b      	mov	r3, r1
 8002486:	72fb      	strb	r3, [r7, #11]
 8002488:	4613      	mov	r3, r2
 800248a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681c      	ldr	r4, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	68d8      	ldr	r0, [r3, #12]
 8002494:	893b      	ldrh	r3, [r7, #8]
 8002496:	7af9      	ldrb	r1, [r7, #11]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	47a0      	blx	r4
 800249c:	6178      	str	r0, [r7, #20]

  return ret;
 800249e:	697b      	ldr	r3, [r7, #20]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}

080024a8 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 80024b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024be:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80024d4 <lsm9ds1_from_fs4g_to_mg+0x2c>
 80024c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	3df9db23 	.word	0x3df9db23

080024d8 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80024e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002504 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 80024f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80024f6:	eeb0 0a67 	vmov.f32	s0, s15
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	428c0000 	.word	0x428c0000

08002508 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 8002512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002534 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8002522:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002526:	eeb0 0a67 	vmov.f32	s0, s15
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	3f147ae1 	.word	0x3f147ae1

08002538 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002544:	f107 0208 	add.w	r2, r7, #8
 8002548:	2301      	movs	r3, #1
 800254a:	2110      	movs	r1, #16
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff7b 	bl	8002448 <lsm9ds1_read_reg>
 8002552:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	b2da      	uxtb	r2, r3
 8002562:	7a3b      	ldrb	r3, [r7, #8]
 8002564:	f362 03c4 	bfi	r3, r2, #3, #2
 8002568:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800256a:	f107 0208 	add.w	r2, r7, #8
 800256e:	2301      	movs	r3, #1
 8002570:	2110      	movs	r1, #16
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ff80 	bl	8002478 <lsm9ds1_write_reg>
 8002578:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	460b      	mov	r3, r1
 800258e:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002590:	f107 0210 	add.w	r2, r7, #16
 8002594:	2301      	movs	r3, #1
 8002596:	2110      	movs	r1, #16
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff55 	bl	8002448 <lsm9ds1_read_reg>
 800259e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10f      	bne.n	80025c6 <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	7c3b      	ldrb	r3, [r7, #16]
 80025b0:	f362 1347 	bfi	r3, r2, #5, #3
 80025b4:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80025b6:	f107 0210 	add.w	r2, r7, #16
 80025ba:	2301      	movs	r3, #1
 80025bc:	2110      	movs	r1, #16
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ff5a 	bl	8002478 <lsm9ds1_write_reg>
 80025c4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80025cc:	f107 020c 	add.w	r2, r7, #12
 80025d0:	2301      	movs	r3, #1
 80025d2:	2120      	movs	r1, #32
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff37 	bl	8002448 <lsm9ds1_read_reg>
 80025da:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d110      	bne.n	8002604 <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	7b3b      	ldrb	r3, [r7, #12]
 80025ee:	f362 1347 	bfi	r3, r2, #5, #3
 80025f2:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80025f4:	f107 020c 	add.w	r2, r7, #12
 80025f8:	2301      	movs	r3, #1
 80025fa:	2120      	movs	r1, #32
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff3b 	bl	8002478 <lsm9ds1_write_reg>
 8002602:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d107      	bne.n	800261a <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800260a:	f107 0208 	add.w	r2, r7, #8
 800260e:	2301      	movs	r3, #1
 8002610:	2112      	movs	r1, #18
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff18 	bl	8002448 <lsm9ds1_read_reg>
 8002618:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d111      	bne.n	8002644 <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	09db      	lsrs	r3, r3, #7
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	b2da      	uxtb	r2, r3
 800262c:	7a3b      	ldrb	r3, [r7, #8]
 800262e:	f362 13c7 	bfi	r3, r2, #7, #1
 8002632:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002634:	f107 0208 	add.w	r2, r7, #8
 8002638:	2301      	movs	r3, #1
 800263a:	2112      	movs	r1, #18
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff1b 	bl	8002478 <lsm9ds1_write_reg>
 8002642:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8002644:	697b      	ldr	r3, [r7, #20]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800265a:	f107 0208 	add.w	r2, r7, #8
 800265e:	2301      	movs	r3, #1
 8002660:	2120      	movs	r1, #32
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fef0 	bl	8002448 <lsm9ds1_read_reg>
 8002668:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10f      	bne.n	8002690 <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	b2da      	uxtb	r2, r3
 8002678:	7a3b      	ldrb	r3, [r7, #8]
 800267a:	f362 03c4 	bfi	r3, r2, #3, #2
 800267e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002680:	f107 0208 	add.w	r2, r7, #8
 8002684:	2301      	movs	r3, #1
 8002686:	2120      	movs	r1, #32
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fef5 	bl	8002478 <lsm9ds1_write_reg>
 800268e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8002690:	68fb      	ldr	r3, [r7, #12]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b088      	sub	sp, #32
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	4613      	mov	r3, r2
 80026a6:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80026a8:	f107 0218 	add.w	r2, r7, #24
 80026ac:	2301      	movs	r3, #1
 80026ae:	2122      	movs	r1, #34	; 0x22
 80026b0:	68b8      	ldr	r0, [r7, #8]
 80026b2:	f7ff fec9 	bl	8002448 <lsm9ds1_read_reg>
 80026b6:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	7e3b      	ldrb	r3, [r7, #24]
 80026c8:	f362 1386 	bfi	r3, r2, #6, #1
 80026cc:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80026ce:	f107 0218 	add.w	r2, r7, #24
 80026d2:	2301      	movs	r3, #1
 80026d4:	2122      	movs	r1, #34	; 0x22
 80026d6:	68b8      	ldr	r0, [r7, #8]
 80026d8:	f7ff fece 	bl	8002478 <lsm9ds1_write_reg>
 80026dc:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d107      	bne.n	80026f4 <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 80026e4:	f107 0214 	add.w	r2, r7, #20
 80026e8:	2301      	movs	r3, #1
 80026ea:	2124      	movs	r1, #36	; 0x24
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff feab 	bl	8002448 <lsm9ds1_read_reg>
 80026f2:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d119      	bne.n	800272e <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	b2da      	uxtb	r2, r3
 8002706:	7d3b      	ldrb	r3, [r7, #20]
 8002708:	f362 13c7 	bfi	r3, r2, #7, #1
 800270c:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	b2da      	uxtb	r2, r3
 8002716:	7d3b      	ldrb	r3, [r7, #20]
 8002718:	f362 1386 	bfi	r3, r2, #6, #1
 800271c:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 800271e:	f107 0214 	add.w	r2, r7, #20
 8002722:	2301      	movs	r3, #1
 8002724:	2124      	movs	r1, #36	; 0x24
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f7ff fea6 	bl	8002478 <lsm9ds1_write_reg>
 800272c:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 800272e:	69fb      	ldr	r3, [r7, #28]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002744:	f107 0210 	add.w	r2, r7, #16
 8002748:	2301      	movs	r3, #1
 800274a:	2120      	movs	r1, #32
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff fe7b 	bl	8002448 <lsm9ds1_read_reg>
 8002752:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d125      	bne.n	80027a6 <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	08db      	lsrs	r3, r3, #3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b2da      	uxtb	r2, r3
 8002764:	7c3b      	ldrb	r3, [r7, #16]
 8002766:	f362 0341 	bfi	r3, r2, #1, #1
 800276a:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	b2da      	uxtb	r2, r3
 8002774:	7c3b      	ldrb	r3, [r7, #16]
 8002776:	f362 0384 	bfi	r3, r2, #2, #3
 800277a:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	091b      	lsrs	r3, r3, #4
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	b2da      	uxtb	r2, r3
 8002786:	7c3b      	ldrb	r3, [r7, #16]
 8002788:	f362 1346 	bfi	r3, r2, #5, #2
 800278c:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 800278e:	7c3b      	ldrb	r3, [r7, #16]
 8002790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002794:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002796:	f107 0210 	add.w	r2, r7, #16
 800279a:	2301      	movs	r3, #1
 800279c:	2120      	movs	r1, #32
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff fe6a 	bl	8002478 <lsm9ds1_write_reg>
 80027a4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 80027ac:	f107 020c 	add.w	r2, r7, #12
 80027b0:	2301      	movs	r3, #1
 80027b2:	2122      	movs	r1, #34	; 0x22
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff fe47 	bl	8002448 <lsm9ds1_read_reg>
 80027ba:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d111      	bne.n	80027e6 <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	7b3b      	ldrb	r3, [r7, #12]
 80027d0:	f362 0301 	bfi	r3, r2, #0, #2
 80027d4:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 80027d6:	f107 020c 	add.w	r2, r7, #12
 80027da:	2301      	movs	r3, #1
 80027dc:	2122      	movs	r1, #34	; 0x22
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff fe4a 	bl	8002478 <lsm9ds1_write_reg>
 80027e4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 80027ec:	f107 0208 	add.w	r2, r7, #8
 80027f0:	2301      	movs	r3, #1
 80027f2:	2123      	movs	r1, #35	; 0x23
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fe27 	bl	8002448 <lsm9ds1_read_reg>
 80027fa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d110      	bne.n	8002824 <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	b2da      	uxtb	r2, r3
 800280c:	7a3b      	ldrb	r3, [r7, #8]
 800280e:	f362 0383 	bfi	r3, r2, #2, #2
 8002812:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8002814:	f107 0208 	add.w	r2, r7, #8
 8002818:	2301      	movs	r3, #1
 800281a:	2123      	movs	r1, #35	; 0x23
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff fe2b 	bl	8002478 <lsm9ds1_write_reg>
 8002822:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 8002824:	697b      	ldr	r3, [r7, #20]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 800283a:	f107 0208 	add.w	r2, r7, #8
 800283e:	2301      	movs	r3, #1
 8002840:	2121      	movs	r1, #33	; 0x21
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff fe00 	bl	8002448 <lsm9ds1_read_reg>
 8002848:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	b2da      	uxtb	r2, r3
 8002858:	7a3b      	ldrb	r3, [r7, #8]
 800285a:	f362 1346 	bfi	r3, r2, #5, #2
 800285e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8002860:	f107 0208 	add.w	r2, r7, #8
 8002864:	2301      	movs	r3, #1
 8002866:	2121      	movs	r1, #33	; 0x21
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff fe05 	bl	8002478 <lsm9ds1_write_reg>
 800286e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b086      	sub	sp, #24
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8002884:	f107 020c 	add.w	r2, r7, #12
 8002888:	2306      	movs	r3, #6
 800288a:	2118      	movs	r1, #24
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fddb 	bl	8002448 <lsm9ds1_read_reg>
 8002892:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002894:	7b7b      	ldrb	r3, [r7, #13]
 8002896:	b21a      	sxth	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	7b3b      	ldrb	r3, [r7, #12]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b21a      	sxth	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80028b6:	7bfa      	ldrb	r2, [r7, #15]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3302      	adds	r3, #2
 80028bc:	b212      	sxth	r2, r2
 80028be:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	3302      	adds	r3, #2
 80028c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	7bbb      	ldrb	r3, [r7, #14]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3302      	adds	r3, #2
 80028da:	b212      	sxth	r2, r2
 80028dc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80028de:	7c7a      	ldrb	r2, [r7, #17]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	3304      	adds	r3, #4
 80028e4:	b212      	sxth	r2, r2
 80028e6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	3304      	adds	r3, #4
 80028ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	7c3b      	ldrb	r3, [r7, #16]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3304      	adds	r3, #4
 8002902:	b212      	sxth	r2, r2
 8002904:	801a      	strh	r2, [r3, #0]

  return ret;
 8002906:	697b      	ldr	r3, [r7, #20]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 800291a:	f107 020c 	add.w	r2, r7, #12
 800291e:	2306      	movs	r3, #6
 8002920:	2128      	movs	r1, #40	; 0x28
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fd90 	bl	8002448 <lsm9ds1_read_reg>
 8002928:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	b21a      	sxth	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002938:	b29b      	uxth	r3, r3
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	b29a      	uxth	r2, r3
 800293e:	7b3b      	ldrb	r3, [r7, #12]
 8002940:	b29b      	uxth	r3, r3
 8002942:	4413      	add	r3, r2
 8002944:	b29b      	uxth	r3, r3
 8002946:	b21a      	sxth	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3302      	adds	r3, #2
 8002952:	b212      	sxth	r2, r2
 8002954:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3302      	adds	r3, #2
 800295a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295e:	b29b      	uxth	r3, r3
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	b29a      	uxth	r2, r3
 8002964:	7bbb      	ldrb	r3, [r7, #14]
 8002966:	b29b      	uxth	r3, r3
 8002968:	4413      	add	r3, r2
 800296a:	b29a      	uxth	r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3302      	adds	r3, #2
 8002970:	b212      	sxth	r2, r2
 8002972:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002974:	7c7a      	ldrb	r2, [r7, #17]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	3304      	adds	r3, #4
 800297a:	b212      	sxth	r2, r2
 800297c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	3304      	adds	r3, #4
 8002982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002986:	b29b      	uxth	r3, r3
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	b29a      	uxth	r2, r3
 800298c:	7c3b      	ldrb	r3, [r7, #16]
 800298e:	b29b      	uxth	r3, r3
 8002990:	4413      	add	r3, r2
 8002992:	b29a      	uxth	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	3304      	adds	r3, #4
 8002998:	b212      	sxth	r2, r2
 800299a:	801a      	strh	r2, [r3, #0]

  return ret;
 800299c:	697b      	ldr	r3, [r7, #20]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 80029b0:	f107 020c 	add.w	r2, r7, #12
 80029b4:	2306      	movs	r3, #6
 80029b6:	2128      	movs	r1, #40	; 0x28
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fd45 	bl	8002448 <lsm9ds1_read_reg>
 80029be:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80029c0:	7b7b      	ldrb	r3, [r7, #13]
 80029c2:	b21a      	sxth	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	7b3b      	ldrb	r3, [r7, #12]
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4413      	add	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	b21a      	sxth	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	3302      	adds	r3, #2
 80029e8:	b212      	sxth	r2, r2
 80029ea:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3302      	adds	r3, #2
 80029f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	021b      	lsls	r3, r3, #8
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	7bbb      	ldrb	r3, [r7, #14]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	3302      	adds	r3, #2
 8002a06:	b212      	sxth	r2, r2
 8002a08:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002a0a:	7c7a      	ldrb	r2, [r7, #17]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	b212      	sxth	r2, r2
 8002a12:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	3304      	adds	r3, #4
 8002a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	7c3b      	ldrb	r3, [r7, #16]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	b212      	sxth	r2, r2
 8002a30:	801a      	strh	r2, [r3, #0]

  return ret;
 8002a32:	697b      	ldr	r3, [r7, #20]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	68b8      	ldr	r0, [r7, #8]
 8002a50:	f7ff fcfa 	bl	8002448 <lsm9ds1_read_reg>
 8002a54:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	2301      	movs	r3, #1
 8002a62:	210f      	movs	r1, #15
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff fcef 	bl	8002448 <lsm9ds1_read_reg>
 8002a6a:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8002a6c:	697b      	ldr	r3, [r7, #20]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8002a86:	2301      	movs	r3, #1
 8002a88:	2117      	movs	r1, #23
 8002a8a:	68b8      	ldr	r0, [r7, #8]
 8002a8c:	f7ff fcdc 	bl	8002448 <lsm9ds1_read_reg>
 8002a90:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8002a98:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	2127      	movs	r1, #39	; 0x27
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f7ff fcd2 	bl	8002448 <lsm9ds1_read_reg>
 8002aa4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002aa6:	697b      	ldr	r3, [r7, #20]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002abe:	f107 0214 	add.w	r2, r7, #20
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	2122      	movs	r1, #34	; 0x22
 8002ac6:	68b8      	ldr	r0, [r7, #8]
 8002ac8:	f7ff fcbe 	bl	8002448 <lsm9ds1_read_reg>
 8002acc:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	7d3b      	ldrb	r3, [r7, #20]
 8002ade:	f362 0300 	bfi	r3, r2, #0, #1
 8002ae2:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002ae4:	f107 0214 	add.w	r2, r7, #20
 8002ae8:	2301      	movs	r3, #1
 8002aea:	2122      	movs	r1, #34	; 0x22
 8002aec:	68b8      	ldr	r0, [r7, #8]
 8002aee:	f7ff fcc3 	bl	8002478 <lsm9ds1_write_reg>
 8002af2:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d107      	bne.n	8002b0a <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002afa:	f107 0218 	add.w	r2, r7, #24
 8002afe:	2301      	movs	r3, #1
 8002b00:	2121      	movs	r1, #33	; 0x21
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f7ff fca0 	bl	8002448 <lsm9ds1_read_reg>
 8002b08:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10f      	bne.n	8002b30 <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	7e3b      	ldrb	r3, [r7, #24]
 8002b1a:	f362 0382 	bfi	r3, r2, #2, #1
 8002b1e:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002b20:	f107 0218 	add.w	r2, r7, #24
 8002b24:	2301      	movs	r3, #1
 8002b26:	2121      	movs	r1, #33	; 0x21
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff fca5 	bl	8002478 <lsm9ds1_write_reg>
 8002b2e:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002b30:	69fb      	ldr	r3, [r7, #28]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b088      	sub	sp, #32
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002b46:	f107 0214 	add.w	r2, r7, #20
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	2122      	movs	r1, #34	; 0x22
 8002b4e:	68b8      	ldr	r0, [r7, #8]
 8002b50:	f7ff fc7a 	bl	8002448 <lsm9ds1_read_reg>
 8002b54:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d114      	bne.n	8002b86 <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002b5c:	f107 0218 	add.w	r2, r7, #24
 8002b60:	2301      	movs	r3, #1
 8002b62:	2121      	movs	r1, #33	; 0x21
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f7ff fc6f 	bl	8002448 <lsm9ds1_read_reg>
 8002b6a:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8002b6c:	7e3b      	ldrb	r3, [r7, #24]
 8002b6e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	7d3b      	ldrb	r3, [r7, #20]
 8002b76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002b86:	69fb      	ldr	r3, [r7, #28]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002b9c:	f107 0208 	add.w	r2, r7, #8
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	2110      	movs	r1, #16
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fc4f 	bl	8002448 <lsm9ds1_read_reg>
 8002baa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	7a3b      	ldrb	r3, [r7, #8]
 8002bbc:	f362 0301 	bfi	r3, r2, #0, #2
 8002bc0:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002bc2:	f107 0208 	add.w	r2, r7, #8
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	2110      	movs	r1, #16
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fc54 	bl	8002478 <lsm9ds1_write_reg>
 8002bd0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8002be8:	f107 0210 	add.w	r2, r7, #16
 8002bec:	2301      	movs	r3, #1
 8002bee:	2111      	movs	r1, #17
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fc29 	bl	8002448 <lsm9ds1_read_reg>
 8002bf6:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	7c3b      	ldrb	r3, [r7, #16]
 8002c08:	f362 0301 	bfi	r3, r2, #0, #2
 8002c0c:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8002c0e:	f107 0210 	add.w	r2, r7, #16
 8002c12:	2301      	movs	r3, #1
 8002c14:	2111      	movs	r1, #17
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fc2e 	bl	8002478 <lsm9ds1_write_reg>
 8002c1c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002c24:	f107 020c 	add.w	r2, r7, #12
 8002c28:	2301      	movs	r3, #1
 8002c2a:	2112      	movs	r1, #18
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff fc0b 	bl	8002448 <lsm9ds1_read_reg>
 8002c32:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d110      	bne.n	8002c5c <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 8002c3a:	78fb      	ldrb	r3, [r7, #3]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	7b3b      	ldrb	r3, [r7, #12]
 8002c46:	f362 1386 	bfi	r3, r2, #6, #1
 8002c4a:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002c4c:	f107 020c 	add.w	r2, r7, #12
 8002c50:	2301      	movs	r3, #1
 8002c52:	2112      	movs	r1, #18
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fc0f 	bl	8002478 <lsm9ds1_write_reg>
 8002c5a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8002c5c:	697b      	ldr	r3, [r7, #20]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002c72:	f107 0208 	add.w	r2, r7, #8
 8002c76:	2301      	movs	r3, #1
 8002c78:	2112      	movs	r1, #18
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fbe4 	bl	8002448 <lsm9ds1_read_reg>
 8002c80:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10f      	bne.n	8002ca8 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	7a3b      	ldrb	r3, [r7, #8]
 8002c92:	f362 0303 	bfi	r3, r2, #0, #4
 8002c96:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002c98:	f107 0208 	add.w	r2, r7, #8
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	2112      	movs	r1, #18
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fbe9 	bl	8002478 <lsm9ds1_write_reg>
 8002ca6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002cbe:	f107 0208 	add.w	r2, r7, #8
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fbbe 	bl	8002448 <lsm9ds1_read_reg>
 8002ccc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d118      	bne.n	8002d06 <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	7a3b      	ldrb	r3, [r7, #8]
 8002cde:	f362 0301 	bfi	r3, r2, #0, #2
 8002ce2:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	7a3b      	ldrb	r3, [r7, #8]
 8002cf0:	f362 0382 	bfi	r3, r2, #2, #1
 8002cf4:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002cf6:	f107 0208 	add.w	r2, r7, #8
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fbba 	bl	8002478 <lsm9ds1_write_reg>
 8002d04:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8002d1c:	f107 0208 	add.w	r2, r7, #8
 8002d20:	2301      	movs	r3, #1
 8002d22:	2121      	movs	r1, #33	; 0x21
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fb8f 	bl	8002448 <lsm9ds1_read_reg>
 8002d2a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10f      	bne.n	8002d52 <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	7a3b      	ldrb	r3, [r7, #8]
 8002d3c:	f362 0382 	bfi	r3, r2, #2, #1
 8002d40:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8002d42:	f107 0208 	add.w	r2, r7, #8
 8002d46:	2301      	movs	r3, #1
 8002d48:	2121      	movs	r1, #33	; 0x21
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff fb94 	bl	8002478 <lsm9ds1_write_reg>
 8002d50:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8002d52:	68fb      	ldr	r3, [r7, #12]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8002d68:	f107 0208 	add.w	r2, r7, #8
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	2121      	movs	r1, #33	; 0x21
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fb69 	bl	8002448 <lsm9ds1_read_reg>
 8002d76:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	7a3b      	ldrb	r3, [r7, #8]
 8002d8a:	f362 13c7 	bfi	r3, r2, #7, #1
 8002d8e:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	7a3b      	ldrb	r3, [r7, #8]
 8002d9a:	f362 1346 	bfi	r3, r2, #5, #2
 8002d9e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8002da0:	f107 0208 	add.w	r2, r7, #8
 8002da4:	2301      	movs	r3, #1
 8002da6:	2121      	movs	r1, #33	; 0x21
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fb65 	bl	8002478 <lsm9ds1_write_reg>
 8002dae:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8002db0:	68fb      	ldr	r3, [r7, #12]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <ADC_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void ADC_Read(void) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  	ADC1_val = ADC_GetVal(ADC1);
 8002dc0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002dc4:	f000 f85e 	bl	8002e84 <ADC_GetVal>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <ADC_Read+0x3c>)
 8002dcc:	6013      	str	r3, [r2, #0]
	  ADC2_val = ADC_GetVal(ADC2);
 8002dce:	480b      	ldr	r0, [pc, #44]	; (8002dfc <ADC_Read+0x40>)
 8002dd0:	f000 f858 	bl	8002e84 <ADC_GetVal>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <ADC_Read+0x44>)
 8002dd8:	6013      	str	r3, [r2, #0]
	  ADC3_val = ADC_GetVal(ADC3);
 8002dda:	480a      	ldr	r0, [pc, #40]	; (8002e04 <ADC_Read+0x48>)
 8002ddc:	f000 f852 	bl	8002e84 <ADC_GetVal>
 8002de0:	4603      	mov	r3, r0
 8002de2:	4a09      	ldr	r2, [pc, #36]	; (8002e08 <ADC_Read+0x4c>)
 8002de4:	6013      	str	r3, [r2, #0]
	  ADC4_val = ADC_GetVal(ADC4);
 8002de6:	4809      	ldr	r0, [pc, #36]	; (8002e0c <ADC_Read+0x50>)
 8002de8:	f000 f84c 	bl	8002e84 <ADC_GetVal>
 8002dec:	4603      	mov	r3, r0
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <ADC_Read+0x54>)
 8002df0:	6013      	str	r3, [r2, #0]
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000304 	.word	0x20000304
 8002dfc:	50000100 	.word	0x50000100
 8002e00:	20000308 	.word	0x20000308
 8002e04:	50000400 	.word	0x50000400
 8002e08:	2000030c 	.word	0x2000030c
 8002e0c:	50000500 	.word	0x50000500
 8002e10:	20000310 	.word	0x20000310

08002e14 <ADC_Calibrate>:

static void ADC_Calibrate(ADC_TypeDef* adc) {
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e22:	d00b      	beq.n	8002e3c <ADC_Calibrate+0x28>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a14      	ldr	r2, [pc, #80]	; (8002e78 <ADC_Calibrate+0x64>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <ADC_Calibrate+0x28>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <ADC_Calibrate+0x68>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d003      	beq.n	8002e3c <ADC_Calibrate+0x28>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <ADC_Calibrate+0x6c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d117      	bne.n	8002e6c <ADC_Calibrate+0x58>
	  return;
  }

  adc->CR &= ~ADC_CR_ADEN; // Disable ADC
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 0201 	bic.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCALDIF; // Calibration for Single-ended input mode
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCAL; // Start ADC calibration
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
  while (adc->CR & ADC_CR_ADCAL);
 8002e60:	bf00      	nop
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dbfb      	blt.n	8002e62 <ADC_Calibrate+0x4e>
 8002e6a:	e000      	b.n	8002e6e <ADC_Calibrate+0x5a>
	  return;
 8002e6c:	bf00      	nop
}
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	50000100 	.word	0x50000100
 8002e7c:	50000400 	.word	0x50000400
 8002e80:	50000500 	.word	0x50000500

08002e84 <ADC_GetVal>:

static int ADC_GetVal(ADC_TypeDef* adc) {
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e92:	d00d      	beq.n	8002eb0 <ADC_GetVal+0x2c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <ADC_GetVal+0x3c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <ADC_GetVal+0x2c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <ADC_GetVal+0x40>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d005      	beq.n	8002eb0 <ADC_GetVal+0x2c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <ADC_GetVal+0x44>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d001      	beq.n	8002eb0 <ADC_GetVal+0x2c>
		return 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	e001      	b.n	8002eb4 <ADC_GetVal+0x30>
	}
	return adc->DR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	50000100 	.word	0x50000100
 8002ec4:	50000400 	.word	0x50000400
 8002ec8:	50000500 	.word	0x50000500
 8002ecc:	00000000 	.word	0x00000000

08002ed0 <IMU_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void IMU_Read(void) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8002ed4:	4aa4      	ldr	r2, [pc, #656]	; (8003168 <IMU_Read+0x298>)
 8002ed6:	49a5      	ldr	r1, [pc, #660]	; (800316c <IMU_Read+0x29c>)
 8002ed8:	48a5      	ldr	r0, [pc, #660]	; (8003170 <IMU_Read+0x2a0>)
 8002eda:	f7ff fdcc 	bl	8002a76 <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 8002ede:	4ba2      	ldr	r3, [pc, #648]	; (8003168 <IMU_Read+0x298>)
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80ef 	beq.w	80030cc <IMU_Read+0x1fc>
 8002eee:	4b9e      	ldr	r3, [pc, #632]	; (8003168 <IMU_Read+0x298>)
 8002ef0:	785b      	ldrb	r3, [r3, #1]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80e7 	beq.w	80030cc <IMU_Read+0x1fc>
		/* Read accelerometer and gyroscope data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8002efe:	2206      	movs	r2, #6
 8002f00:	2100      	movs	r1, #0
 8002f02:	489c      	ldr	r0, [pc, #624]	; (8003174 <IMU_Read+0x2a4>)
 8002f04:	f004 fb90 	bl	8007628 <memset>
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002f08:	2206      	movs	r2, #6
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	489a      	ldr	r0, [pc, #616]	; (8003178 <IMU_Read+0x2a8>)
 8002f0e:	f004 fb8b 	bl	8007628 <memset>
		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration);
 8002f12:	4998      	ldr	r1, [pc, #608]	; (8003174 <IMU_Read+0x2a4>)
 8002f14:	4895      	ldr	r0, [pc, #596]	; (800316c <IMU_Read+0x29c>)
 8002f16:	f7ff fcfb 	bl	8002910 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate);
 8002f1a:	4997      	ldr	r1, [pc, #604]	; (8003178 <IMU_Read+0x2a8>)
 8002f1c:	4893      	ldr	r0, [pc, #588]	; (800316c <IMU_Read+0x29c>)
 8002f1e:	f7ff fcac 	bl	800287a <lsm9ds1_angular_rate_raw_get>
		 accel.acceleration.x = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[0]) * 9.807) / 1000;
 8002f22:	4b94      	ldr	r3, [pc, #592]	; (8003174 <IMU_Read+0x2a4>)
 8002f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fabd 	bl	80024a8 <lsm9ds1_from_fs4g_to_mg>
 8002f2e:	ee10 3a10 	vmov	r3, s0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd faac 	bl	8000490 <__aeabi_f2d>
 8002f38:	a385      	add	r3, pc, #532	; (adr r3, 8003150 <IMU_Read+0x280>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd faff 	bl	8000540 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <IMU_Read+0x2ac>)
 8002f50:	f7fd fc20 	bl	8000794 <__aeabi_ddiv>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f7fd fda0 	bl	8000aa0 <__aeabi_d2f>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4a87      	ldr	r2, [pc, #540]	; (8003180 <IMU_Read+0x2b0>)
 8002f64:	6013      	str	r3, [r2, #0]
		 accel.acceleration.y = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]) * 9.807) / 1000;
 8002f66:	4b83      	ldr	r3, [pc, #524]	; (8003174 <IMU_Read+0x2a4>)
 8002f68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fa9b 	bl	80024a8 <lsm9ds1_from_fs4g_to_mg>
 8002f72:	ee10 3a10 	vmov	r3, s0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd fa8a 	bl	8000490 <__aeabi_f2d>
 8002f7c:	a374      	add	r3, pc, #464	; (adr r3, 8003150 <IMU_Read+0x280>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd fadd 	bl	8000540 <__aeabi_dmul>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	4b7a      	ldr	r3, [pc, #488]	; (800317c <IMU_Read+0x2ac>)
 8002f94:	f7fd fbfe 	bl	8000794 <__aeabi_ddiv>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f7fd fd7e 	bl	8000aa0 <__aeabi_d2f>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4a76      	ldr	r2, [pc, #472]	; (8003180 <IMU_Read+0x2b0>)
 8002fa8:	6053      	str	r3, [r2, #4]
		 accel.acceleration.z = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]) * 9.807) / 1000;
 8002faa:	4b72      	ldr	r3, [pc, #456]	; (8003174 <IMU_Read+0x2a4>)
 8002fac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fa79 	bl	80024a8 <lsm9ds1_from_fs4g_to_mg>
 8002fb6:	ee10 3a10 	vmov	r3, s0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fa68 	bl	8000490 <__aeabi_f2d>
 8002fc0:	a363      	add	r3, pc, #396	; (adr r3, 8003150 <IMU_Read+0x280>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	f7fd fabb 	bl	8000540 <__aeabi_dmul>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	4b69      	ldr	r3, [pc, #420]	; (800317c <IMU_Read+0x2ac>)
 8002fd8:	f7fd fbdc 	bl	8000794 <__aeabi_ddiv>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fd fd5c 	bl	8000aa0 <__aeabi_d2f>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4a65      	ldr	r2, [pc, #404]	; (8003180 <IMU_Read+0x2b0>)
 8002fec:	6093      	str	r3, [r2, #8]
		 gyro.gyro.x = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) * 2 * M_PI)/360000;
 8002fee:	4b62      	ldr	r3, [pc, #392]	; (8003178 <IMU_Read+0x2a8>)
 8002ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fa6f 	bl	80024d8 <lsm9ds1_from_fs2000dps_to_mdps>
 8002ffa:	eef0 7a40 	vmov.f32	s15, s0
 8002ffe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003002:	ee17 0a90 	vmov	r0, s15
 8003006:	f7fd fa43 	bl	8000490 <__aeabi_f2d>
 800300a:	a353      	add	r3, pc, #332	; (adr r3, 8003158 <IMU_Read+0x288>)
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f7fd fa96 	bl	8000540 <__aeabi_dmul>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	a350      	add	r3, pc, #320	; (adr r3, 8003160 <IMU_Read+0x290>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd fbb7 	bl	8000794 <__aeabi_ddiv>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fd37 	bl	8000aa0 <__aeabi_d2f>
 8003032:	4603      	mov	r3, r0
 8003034:	4a53      	ldr	r2, [pc, #332]	; (8003184 <IMU_Read+0x2b4>)
 8003036:	6013      	str	r3, [r2, #0]
		 gyro.gyro.y = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) * 2 * M_PI)/360000;
 8003038:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <IMU_Read+0x2a8>)
 800303a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fa4a 	bl	80024d8 <lsm9ds1_from_fs2000dps_to_mdps>
 8003044:	eef0 7a40 	vmov.f32	s15, s0
 8003048:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800304c:	ee17 0a90 	vmov	r0, s15
 8003050:	f7fd fa1e 	bl	8000490 <__aeabi_f2d>
 8003054:	a340      	add	r3, pc, #256	; (adr r3, 8003158 <IMU_Read+0x288>)
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f7fd fa71 	bl	8000540 <__aeabi_dmul>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	a33e      	add	r3, pc, #248	; (adr r3, 8003160 <IMU_Read+0x290>)
 8003068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306c:	f7fd fb92 	bl	8000794 <__aeabi_ddiv>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f7fd fd12 	bl	8000aa0 <__aeabi_d2f>
 800307c:	4603      	mov	r3, r0
 800307e:	4a41      	ldr	r2, [pc, #260]	; (8003184 <IMU_Read+0x2b4>)
 8003080:	6053      	str	r3, [r2, #4]
		 gyro.gyro.z = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) * 2 * M_PI)/360000;
 8003082:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <IMU_Read+0x2a8>)
 8003084:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fa25 	bl	80024d8 <lsm9ds1_from_fs2000dps_to_mdps>
 800308e:	eef0 7a40 	vmov.f32	s15, s0
 8003092:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003096:	ee17 0a90 	vmov	r0, s15
 800309a:	f7fd f9f9 	bl	8000490 <__aeabi_f2d>
 800309e:	a32e      	add	r3, pc, #184	; (adr r3, 8003158 <IMU_Read+0x288>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd fa4c 	bl	8000540 <__aeabi_dmul>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	a32b      	add	r3, pc, #172	; (adr r3, 8003160 <IMU_Read+0x290>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f7fd fb6d 	bl	8000794 <__aeabi_ddiv>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4610      	mov	r0, r2
 80030c0:	4619      	mov	r1, r3
 80030c2:	f7fd fced 	bl	8000aa0 <__aeabi_d2f>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a2e      	ldr	r2, [pc, #184]	; (8003184 <IMU_Read+0x2b4>)
 80030ca:	6093      	str	r3, [r2, #8]
//		gyro.gyro.x = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
//		gyro.gyro.y = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
//		gyro.gyro.z = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}

	if (reg.status_mag.zyxda) {
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <IMU_Read+0x298>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d035      	beq.n	8003146 <IMU_Read+0x276>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 80030da:	2206      	movs	r2, #6
 80030dc:	2100      	movs	r1, #0
 80030de:	482a      	ldr	r0, [pc, #168]	; (8003188 <IMU_Read+0x2b8>)
 80030e0:	f004 faa2 	bl	8007628 <memset>
		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 80030e4:	4928      	ldr	r1, [pc, #160]	; (8003188 <IMU_Read+0x2b8>)
 80030e6:	4822      	ldr	r0, [pc, #136]	; (8003170 <IMU_Read+0x2a0>)
 80030e8:	f7ff fc5d 	bl	80029a6 <lsm9ds1_magnetic_raw_get>
		mag.magnetic.x = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[0]) / 10;
 80030ec:	4b26      	ldr	r3, [pc, #152]	; (8003188 <IMU_Read+0x2b8>)
 80030ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fa08 	bl	8002508 <lsm9ds1_from_fs16gauss_to_mG>
 80030f8:	eeb0 7a40 	vmov.f32	s14, s0
 80030fc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <IMU_Read+0x2bc>)
 8003106:	edc3 7a00 	vstr	s15, [r3]
		mag.magnetic.y = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[1]) / 10;
 800310a:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <IMU_Read+0x2b8>)
 800310c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff f9f9 	bl	8002508 <lsm9ds1_from_fs16gauss_to_mG>
 8003116:	eeb0 7a40 	vmov.f32	s14, s0
 800311a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800311e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <IMU_Read+0x2bc>)
 8003124:	edc3 7a01 	vstr	s15, [r3, #4]
		mag.magnetic.z = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[2]) / 10;
 8003128:	4b17      	ldr	r3, [pc, #92]	; (8003188 <IMU_Read+0x2b8>)
 800312a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f9ea 	bl	8002508 <lsm9ds1_from_fs16gauss_to_mG>
 8003134:	eeb0 7a40 	vmov.f32	s14, s0
 8003138:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800313c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003140:	4b12      	ldr	r3, [pc, #72]	; (800318c <IMU_Read+0x2bc>)
 8003142:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	f3af 8000 	nop.w
 8003150:	1a9fbe77 	.word	0x1a9fbe77
 8003154:	40239d2f 	.word	0x40239d2f
 8003158:	54442d18 	.word	0x54442d18
 800315c:	400921fb 	.word	0x400921fb
 8003160:	00000000 	.word	0x00000000
 8003164:	4115f900 	.word	0x4115f900
 8003168:	200000d8 	.word	0x200000d8
 800316c:	20000314 	.word	0x20000314
 8003170:	20000324 	.word	0x20000324
 8003174:	200000bc 	.word	0x200000bc
 8003178:	200000c4 	.word	0x200000c4
 800317c:	408f4000 	.word	0x408f4000
 8003180:	200002ec 	.word	0x200002ec
 8003184:	200002e0 	.word	0x200002e0
 8003188:	200000cc 	.word	0x200000cc
 800318c:	200002f8 	.word	0x200002f8

08003190 <IMU_Setup>:

static int IMU_Setup(void) {
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 8003194:	4b31      	ldr	r3, [pc, #196]	; (800325c <IMU_Setup+0xcc>)
 8003196:	4a32      	ldr	r2, [pc, #200]	; (8003260 <IMU_Setup+0xd0>)
 8003198:	601a      	str	r2, [r3, #0]
  dev_ctx_imu.read_reg = platform_read_imu;
 800319a:	4b30      	ldr	r3, [pc, #192]	; (800325c <IMU_Setup+0xcc>)
 800319c:	4a31      	ldr	r2, [pc, #196]	; (8003264 <IMU_Setup+0xd4>)
 800319e:	605a      	str	r2, [r3, #4]
  dev_ctx_imu.handle = (void *)&imu_bus;
 80031a0:	4b2e      	ldr	r3, [pc, #184]	; (800325c <IMU_Setup+0xcc>)
 80031a2:	4a31      	ldr	r2, [pc, #196]	; (8003268 <IMU_Setup+0xd8>)
 80031a4:	60da      	str	r2, [r3, #12]
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <IMU_Setup+0xdc>)
 80031a8:	4a31      	ldr	r2, [pc, #196]	; (8003270 <IMU_Setup+0xe0>)
 80031aa:	601a      	str	r2, [r3, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <IMU_Setup+0xdc>)
 80031ae:	4a31      	ldr	r2, [pc, #196]	; (8003274 <IMU_Setup+0xe4>)
 80031b0:	605a      	str	r2, [r3, #4]
  dev_ctx_mag.handle = (void *)&mag_bus;
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <IMU_Setup+0xdc>)
 80031b4:	4a30      	ldr	r2, [pc, #192]	; (8003278 <IMU_Setup+0xe8>)
 80031b6:	60da      	str	r2, [r3, #12]

  platform_delay(BOOT_TIME);
 80031b8:	2014      	movs	r0, #20
 80031ba:	f000 f8f3 	bl	80033a4 <platform_delay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 80031be:	4a2f      	ldr	r2, [pc, #188]	; (800327c <IMU_Setup+0xec>)
 80031c0:	4926      	ldr	r1, [pc, #152]	; (800325c <IMU_Setup+0xcc>)
 80031c2:	482a      	ldr	r0, [pc, #168]	; (800326c <IMU_Setup+0xdc>)
 80031c4:	f7ff fc3a 	bl	8002a3c <lsm9ds1_dev_id_get>

//  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
  if (whoamI.imu != LSM9DS1_IMU_ID) {
 80031c8:	4b2c      	ldr	r3, [pc, #176]	; (800327c <IMU_Setup+0xec>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b68      	cmp	r3, #104	; 0x68
 80031ce:	d002      	beq.n	80031d6 <IMU_Setup+0x46>
	  while (1) {
		  /* Device not found management */
		  return SETUP_FAIL;
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d4:	e03f      	b.n	8003256 <IMU_Setup+0xc6>
	  }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 80031d6:	2201      	movs	r2, #1
 80031d8:	4920      	ldr	r1, [pc, #128]	; (800325c <IMU_Setup+0xcc>)
 80031da:	4824      	ldr	r0, [pc, #144]	; (800326c <IMU_Setup+0xdc>)
 80031dc:	f7ff fc68 	bl	8002ab0 <lsm9ds1_dev_reset_set>

  do {
	  lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <IMU_Setup+0xf0>)
 80031e2:	491e      	ldr	r1, [pc, #120]	; (800325c <IMU_Setup+0xcc>)
 80031e4:	4821      	ldr	r0, [pc, #132]	; (800326c <IMU_Setup+0xdc>)
 80031e6:	f7ff fca8 	bl	8002b3a <lsm9ds1_dev_reset_get>
  } while (rst);
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <IMU_Setup+0xf0>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f6      	bne.n	80031e0 <IMU_Setup+0x50>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 80031f2:	2201      	movs	r2, #1
 80031f4:	4919      	ldr	r1, [pc, #100]	; (800325c <IMU_Setup+0xcc>)
 80031f6:	481d      	ldr	r0, [pc, #116]	; (800326c <IMU_Setup+0xdc>)
 80031f8:	f7ff fa4f 	bl	800269a <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 80031fc:	2102      	movs	r1, #2
 80031fe:	4817      	ldr	r0, [pc, #92]	; (800325c <IMU_Setup+0xcc>)
 8003200:	f7ff fa25 	bl	800264e <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8003204:	2103      	movs	r1, #3
 8003206:	4815      	ldr	r0, [pc, #84]	; (800325c <IMU_Setup+0xcc>)
 8003208:	f7ff f996 	bl	8002538 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 800320c:	2103      	movs	r1, #3
 800320e:	4817      	ldr	r0, [pc, #92]	; (800326c <IMU_Setup+0xdc>)
 8003210:	f7ff fb0d 	bl	800282e <lsm9ds1_mag_full_scale_set>
  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 8003214:	2100      	movs	r1, #0
 8003216:	4811      	ldr	r0, [pc, #68]	; (800325c <IMU_Setup+0xcc>)
 8003218:	f7ff fd4b 	bl	8002cb2 <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 800321c:	2110      	movs	r1, #16
 800321e:	480f      	ldr	r0, [pc, #60]	; (800325c <IMU_Setup+0xcc>)
 8003220:	f7ff fd9c 	bl	8002d5c <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 8003224:	2100      	movs	r1, #0
 8003226:	480d      	ldr	r0, [pc, #52]	; (800325c <IMU_Setup+0xcc>)
 8003228:	f7ff fd72 	bl	8002d10 <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 800322c:	2103      	movs	r1, #3
 800322e:	480b      	ldr	r0, [pc, #44]	; (800325c <IMU_Setup+0xcc>)
 8003230:	f7ff fcae 	bl	8002b90 <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 8003234:	2105      	movs	r1, #5
 8003236:	4809      	ldr	r0, [pc, #36]	; (800325c <IMU_Setup+0xcc>)
 8003238:	f7ff fd15 	bl	8002c66 <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 800323c:	2112      	movs	r1, #18
 800323e:	4807      	ldr	r0, [pc, #28]	; (800325c <IMU_Setup+0xcc>)
 8003240:	f7ff fccc 	bl	8002bdc <lsm9ds1_gy_filter_out_path_set>
  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 8003244:	2122      	movs	r1, #34	; 0x22
 8003246:	4805      	ldr	r0, [pc, #20]	; (800325c <IMU_Setup+0xcc>)
 8003248:	f7ff f99c 	bl	8002584 <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 800324c:	2134      	movs	r1, #52	; 0x34
 800324e:	4807      	ldr	r0, [pc, #28]	; (800326c <IMU_Setup+0xdc>)
 8003250:	f7ff fa72 	bl	8002738 <lsm9ds1_mag_data_rate_set>

  return SETUP_SUCCESS;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000314 	.word	0x20000314
 8003260:	08003285 	.word	0x08003285
 8003264:	08003315 	.word	0x08003315
 8003268:	20000014 	.word	0x20000014
 800326c:	20000324 	.word	0x20000324
 8003270:	080032c9 	.word	0x080032c9
 8003274:	08003359 	.word	0x08003359
 8003278:	20000004 	.word	0x20000004
 800327c:	200000d4 	.word	0x200000d4
 8003280:	200000da 	.word	0x200000da

08003284 <platform_write_imu>:

static int32_t platform_write_imu(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af04      	add	r7, sp, #16
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	461a      	mov	r2, r3
 8003290:	460b      	mov	r3, r1
 8003292:	72fb      	strb	r3, [r7, #11]
 8003294:	4613      	mov	r3, r2
 8003296:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	791b      	ldrb	r3, [r3, #4]
 80032a4:	b299      	uxth	r1, r3
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ae:	9302      	str	r3, [sp, #8]
 80032b0:	893b      	ldrh	r3, [r7, #8]
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2301      	movs	r3, #1
 80032ba:	f002 f81f 	bl	80052fc <HAL_I2C_Mem_Write>
  return 0;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <platform_write_mag>:

static int32_t platform_write_mag(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af04      	add	r7, sp, #16
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	461a      	mov	r2, r3
 80032d4:	460b      	mov	r3, r1
 80032d6:	72fb      	strb	r3, [r7, #11]
 80032d8:	4613      	mov	r3, r2
 80032da:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	617b      	str	r3, [r7, #20]
	reg |= 0x80;
 80032e0:	7afb      	ldrb	r3, [r7, #11]
 80032e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032e6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	b299      	uxth	r1, r3
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	893b      	ldrh	r3, [r7, #8]
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	2301      	movs	r3, #1
 8003306:	f001 fff9 	bl	80052fc <HAL_I2C_Mem_Write>
	  return 0;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <platform_read_imu>:

static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af04      	add	r7, sp, #16
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	461a      	mov	r2, r3
 8003320:	460b      	mov	r3, r1
 8003322:	72fb      	strb	r3, [r7, #11]
 8003324:	4613      	mov	r3, r2
 8003326:	813b      	strh	r3, [r7, #8]
	  sensbus_t *sensbus = (sensbus_t *)handle;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	617b      	str	r3, [r7, #20]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	6818      	ldr	r0, [r3, #0]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	791b      	ldrb	r3, [r3, #4]
 8003334:	b299      	uxth	r1, r3
 8003336:	7afb      	ldrb	r3, [r7, #11]
 8003338:	b29a      	uxth	r2, r3
 800333a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333e:	9302      	str	r3, [sp, #8]
 8003340:	893b      	ldrh	r3, [r7, #8]
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2301      	movs	r3, #1
 800334a:	f002 f8eb 	bl	8005524 <HAL_I2C_Mem_Read>
	  return 0;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <platform_read_mag>:

static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af04      	add	r7, sp, #16
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	461a      	mov	r2, r3
 8003364:	460b      	mov	r3, r1
 8003366:	72fb      	strb	r3, [r7, #11]
 8003368:	4613      	mov	r3, r2
 800336a:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	617b      	str	r3, [r7, #20]
	  reg |= 0x80;
 8003370:	7afb      	ldrb	r3, [r7, #11]
 8003372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003376:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	6818      	ldr	r0, [r3, #0]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	791b      	ldrb	r3, [r3, #4]
 8003380:	b299      	uxth	r1, r3
 8003382:	7afb      	ldrb	r3, [r7, #11]
 8003384:	b29a      	uxth	r2, r3
 8003386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800338a:	9302      	str	r3, [sp, #8]
 800338c:	893b      	ldrh	r3, [r7, #8]
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2301      	movs	r3, #1
 8003396:	f002 f8c5 	bl	8005524 <HAL_I2C_Mem_Read>
	  return 0;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fe41 	bl	8004034 <HAL_Delay>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033c0:	f000 fdd2 	bl	8003f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033c4:	f000 f822 	bl	800340c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c8:	f000 fb20 	bl	8003a0c <MX_GPIO_Init>
  MX_ADC1_Init();
 80033cc:	f000 f87c 	bl	80034c8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80033d0:	f000 f926 	bl	8003620 <MX_ADC2_Init>
  MX_ADC3_Init();
 80033d4:	f000 f9b0 	bl	8003738 <MX_ADC3_Init>
  MX_ADC4_Init();
 80033d8:	f000 fa4c 	bl	8003874 <MX_ADC4_Init>
  MX_I2C1_Init();
 80033dc:	f000 fad6 	bl	800398c <MX_I2C1_Init>
//  MX_I2C2_Init();

  /* USER CODE BEGIN 2 */
  if (IMU_Setup() != SETUP_SUCCESS) {
 80033e0:	f7ff fed6 	bl	8003190 <IMU_Setup>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <main+0x32>
    return 1;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e00a      	b.n	8003404 <main+0x48>
  }
//  MCP4728_Init(&hi2c2, output);
//  output.channelVref = 0x00;
//  output.channel_Gain = 0x00;

  reset_aux_frame();
 80033ee:	f7fd fc61 	bl	8000cb4 <reset_aux_frame>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	/* SENSOR READ BEGIN */
	ADC_Read();
 80033f2:	f7ff fce3 	bl	8002dbc <ADC_Read>
	IMU_Read();
 80033f6:	f7ff fd6b 	bl	8002ed0 <IMU_Read>

	/* SENSOR READ END */

	/* CALCULATIONS BEGIN */
	calculate_orientation(0.002); // @henry: change freq
 80033fa:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8003408 <main+0x4c>
 80033fe:	f7fd fb9f 	bl	8000b40 <calculate_orientation>
	ADC_Read();
 8003402:	e7f6      	b.n	80033f2 <main+0x36>
//	MCP4728_Write_AllChannels_Diff(&hi2c2, output);

	/* OUTPUT END */
  }
  /* USER CODE END 3 */
}
 8003404:	4618      	mov	r0, r3
 8003406:	bd80      	pop	{r7, pc}
 8003408:	3b03126f 	.word	0x3b03126f

0800340c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b09e      	sub	sp, #120	; 0x78
 8003410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003412:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003416:	2228      	movs	r2, #40	; 0x28
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f004 f904 	bl	8007628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003420:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003430:	463b      	mov	r3, r7
 8003432:	223c      	movs	r2, #60	; 0x3c
 8003434:	2100      	movs	r1, #0
 8003436:	4618      	mov	r0, r3
 8003438:	f004 f8f6 	bl	8007628 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800343c:	2302      	movs	r3, #2
 800343e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003440:	2301      	movs	r3, #1
 8003442:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003444:	2310      	movs	r3, #16
 8003446:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003448:	2302      	movs	r3, #2
 800344a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800344c:	2300      	movs	r3, #0
 800344e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003450:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003454:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003456:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800345a:	4618      	mov	r0, r3
 800345c:	f002 fce6 	bl	8005e2c <HAL_RCC_OscConfig>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003466:	f000 fb0d 	bl	8003a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800346a:	230f      	movs	r3, #15
 800346c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800346e:	2300      	movs	r3, #0
 8003470:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003472:	2300      	movs	r3, #0
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003476:	2300      	movs	r3, #0
 8003478:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800347a:	2300      	movs	r3, #0
 800347c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800347e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003482:	2100      	movs	r1, #0
 8003484:	4618      	mov	r0, r3
 8003486:	f003 fd0f 	bl	8006ea8 <HAL_RCC_ClockConfig>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003490:	f000 faf8 	bl	8003a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8003494:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003498:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800349a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80034a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034a4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ae:	463b      	mov	r3, r7
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fedf 	bl	8007274 <HAL_RCCEx_PeriphCLKConfig>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80034bc:	f000 fae2 	bl	8003a84 <Error_Handler>
  }
}
 80034c0:	bf00      	nop
 80034c2:	3778      	adds	r7, #120	; 0x78
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08a      	sub	sp, #40	; 0x28
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80034ce:	f107 031c 	add.w	r3, r7, #28
 80034d2:	2200      	movs	r2, #0
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	60da      	str	r2, [r3, #12]
 80034e6:	611a      	str	r2, [r3, #16]
 80034e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80034ea:	4b4c      	ldr	r3, [pc, #304]	; (800361c <MX_ADC1_Init+0x154>)
 80034ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80034f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80034f2:	4b4a      	ldr	r3, [pc, #296]	; (800361c <MX_ADC1_Init+0x154>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034f8:	4b48      	ldr	r3, [pc, #288]	; (800361c <MX_ADC1_Init+0x154>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <MX_ADC1_Init+0x154>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003504:	4b45      	ldr	r3, [pc, #276]	; (800361c <MX_ADC1_Init+0x154>)
 8003506:	2200      	movs	r2, #0
 8003508:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800350a:	4b44      	ldr	r3, [pc, #272]	; (800361c <MX_ADC1_Init+0x154>)
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003512:	4b42      	ldr	r3, [pc, #264]	; (800361c <MX_ADC1_Init+0x154>)
 8003514:	2200      	movs	r2, #0
 8003516:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003518:	4b40      	ldr	r3, [pc, #256]	; (800361c <MX_ADC1_Init+0x154>)
 800351a:	2201      	movs	r2, #1
 800351c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800351e:	4b3f      	ldr	r3, [pc, #252]	; (800361c <MX_ADC1_Init+0x154>)
 8003520:	2200      	movs	r2, #0
 8003522:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003524:	4b3d      	ldr	r3, [pc, #244]	; (800361c <MX_ADC1_Init+0x154>)
 8003526:	2201      	movs	r2, #1
 8003528:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800352a:	4b3c      	ldr	r3, [pc, #240]	; (800361c <MX_ADC1_Init+0x154>)
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <MX_ADC1_Init+0x154>)
 8003534:	2204      	movs	r2, #4
 8003536:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003538:	4b38      	ldr	r3, [pc, #224]	; (800361c <MX_ADC1_Init+0x154>)
 800353a:	2200      	movs	r2, #0
 800353c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800353e:	4b37      	ldr	r3, [pc, #220]	; (800361c <MX_ADC1_Init+0x154>)
 8003540:	2200      	movs	r2, #0
 8003542:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003544:	4835      	ldr	r0, [pc, #212]	; (800361c <MX_ADC1_Init+0x154>)
 8003546:	f000 fd99 	bl	800407c <HAL_ADC_Init>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003550:	f000 fa98 	bl	8003a84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	4619      	mov	r1, r3
 800355e:	482f      	ldr	r0, [pc, #188]	; (800361c <MX_ADC1_Init+0x154>)
 8003560:	f001 fa58 	bl	8004a14 <HAL_ADCEx_MultiModeConfigChannel>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800356a:	f000 fa8b 	bl	8003a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800356e:	2301      	movs	r3, #1
 8003570:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003572:	2301      	movs	r3, #1
 8003574:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4824      	ldr	r0, [pc, #144]	; (800361c <MX_ADC1_Init+0x154>)
 800358c:	f000 ff56 	bl	800443c <HAL_ADC_ConfigChannel>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8003596:	f000 fa75 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_Calibrate(ADC1);
 800359a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800359e:	f7ff fc39 	bl	8002e14 <ADC_Calibrate>

  ADC1->CR |= ADC_CR_ADEN; // Enable ADC
 80035a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6093      	str	r3, [r2, #8]
//  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC1->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 80035b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035c0:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR &= ~0xC; // 12-bit Resolution
 80035c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035cc:	f023 030c 	bic.w	r3, r3, #12
 80035d0:	60d3      	str	r3, [r2, #12]

  ADC1->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 80035d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035dc:	f023 030f 	bic.w	r3, r3, #15
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
  ADC1->SQR1 |= 0x1 << 6; // Channel 1 of ADC1
 80035e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 80035f2:	bf00      	nop
 80035f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f8      	beq.n	80035f4 <MX_ADC1_Init+0x12c>
  ADC1->CR |= ADC_CR_ADSTART; // Start the ADC
 8003602:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 8003612:	bf00      	nop
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	200000dc 	.word	0x200000dc

08003620 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003626:	463b      	mov	r3, r7
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
 8003634:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003636:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <MX_ADC2_Init+0x110>)
 8003638:	4a3e      	ldr	r2, [pc, #248]	; (8003734 <MX_ADC2_Init+0x114>)
 800363a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800363c:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <MX_ADC2_Init+0x110>)
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <MX_ADC2_Init+0x110>)
 8003644:	2200      	movs	r2, #0
 8003646:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003648:	4b39      	ldr	r3, [pc, #228]	; (8003730 <MX_ADC2_Init+0x110>)
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800364e:	4b38      	ldr	r3, [pc, #224]	; (8003730 <MX_ADC2_Init+0x110>)
 8003650:	2200      	movs	r2, #0
 8003652:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003654:	4b36      	ldr	r3, [pc, #216]	; (8003730 <MX_ADC2_Init+0x110>)
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800365c:	4b34      	ldr	r3, [pc, #208]	; (8003730 <MX_ADC2_Init+0x110>)
 800365e:	2200      	movs	r2, #0
 8003660:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003662:	4b33      	ldr	r3, [pc, #204]	; (8003730 <MX_ADC2_Init+0x110>)
 8003664:	2201      	movs	r2, #1
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003668:	4b31      	ldr	r3, [pc, #196]	; (8003730 <MX_ADC2_Init+0x110>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800366e:	4b30      	ldr	r3, [pc, #192]	; (8003730 <MX_ADC2_Init+0x110>)
 8003670:	2201      	movs	r2, #1
 8003672:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <MX_ADC2_Init+0x110>)
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800367c:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <MX_ADC2_Init+0x110>)
 800367e:	2204      	movs	r2, #4
 8003680:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003682:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <MX_ADC2_Init+0x110>)
 8003684:	2200      	movs	r2, #0
 8003686:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003688:	4b29      	ldr	r3, [pc, #164]	; (8003730 <MX_ADC2_Init+0x110>)
 800368a:	2200      	movs	r2, #0
 800368c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800368e:	4828      	ldr	r0, [pc, #160]	; (8003730 <MX_ADC2_Init+0x110>)
 8003690:	f000 fcf4 	bl	800407c <HAL_ADC_Init>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800369a:	f000 f9f3 	bl	8003a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800369e:	2303      	movs	r3, #3
 80036a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036a2:	2301      	movs	r3, #1
 80036a4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036b6:	463b      	mov	r3, r7
 80036b8:	4619      	mov	r1, r3
 80036ba:	481d      	ldr	r0, [pc, #116]	; (8003730 <MX_ADC2_Init+0x110>)
 80036bc:	f000 febe 	bl	800443c <HAL_ADC_ConfigChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80036c6:	f000 f9dd 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC_Calibrate(ADC2);
 80036ca:	481a      	ldr	r0, [pc, #104]	; (8003734 <MX_ADC2_Init+0x114>)
 80036cc:	f7ff fba2 	bl	8002e14 <ADC_Calibrate>

  ADC2->CR |= ADC_CR_ADEN; // Enable ADC
 80036d0:	4b18      	ldr	r3, [pc, #96]	; (8003734 <MX_ADC2_Init+0x114>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <MX_ADC2_Init+0x114>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6093      	str	r3, [r2, #8]
//  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC2->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 80036dc:	4b15      	ldr	r3, [pc, #84]	; (8003734 <MX_ADC2_Init+0x114>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <MX_ADC2_Init+0x114>)
 80036e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036e6:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~0xC; // 12-bit Resolution
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <MX_ADC2_Init+0x114>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a11      	ldr	r2, [pc, #68]	; (8003734 <MX_ADC2_Init+0x114>)
 80036ee:	f023 030c 	bic.w	r3, r3, #12
 80036f2:	60d3      	str	r3, [r2, #12]

  ADC2->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <MX_ADC2_Init+0x114>)
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <MX_ADC2_Init+0x114>)
 80036fa:	f023 030f 	bic.w	r3, r3, #15
 80036fe:	6313      	str	r3, [r2, #48]	; 0x30
  ADC2->SQR1 |= 0x3 << 6; // Channel 3 of ADC2
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <MX_ADC2_Init+0x114>)
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	4a0b      	ldr	r2, [pc, #44]	; (8003734 <MX_ADC2_Init+0x114>)
 8003706:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800370a:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 800370c:	bf00      	nop
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <MX_ADC2_Init+0x114>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f9      	beq.n	800370e <MX_ADC2_Init+0xee>
  ADC2->CR |= ADC_CR_ADSTART; // Start the ADC
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <MX_ADC2_Init+0x114>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <MX_ADC2_Init+0x114>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC2_Init 2 */

}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	2000012c 	.word	0x2000012c
 8003734:	50000100 	.word	0x50000100

08003738 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
 8003758:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800375a:	4b44      	ldr	r3, [pc, #272]	; (800386c <MX_ADC3_Init+0x134>)
 800375c:	4a44      	ldr	r2, [pc, #272]	; (8003870 <MX_ADC3_Init+0x138>)
 800375e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003760:	4b42      	ldr	r3, [pc, #264]	; (800386c <MX_ADC3_Init+0x134>)
 8003762:	2200      	movs	r2, #0
 8003764:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003766:	4b41      	ldr	r3, [pc, #260]	; (800386c <MX_ADC3_Init+0x134>)
 8003768:	2200      	movs	r2, #0
 800376a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800376c:	4b3f      	ldr	r3, [pc, #252]	; (800386c <MX_ADC3_Init+0x134>)
 800376e:	2200      	movs	r2, #0
 8003770:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003772:	4b3e      	ldr	r3, [pc, #248]	; (800386c <MX_ADC3_Init+0x134>)
 8003774:	2200      	movs	r2, #0
 8003776:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003778:	4b3c      	ldr	r3, [pc, #240]	; (800386c <MX_ADC3_Init+0x134>)
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003780:	4b3a      	ldr	r3, [pc, #232]	; (800386c <MX_ADC3_Init+0x134>)
 8003782:	2200      	movs	r2, #0
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003786:	4b39      	ldr	r3, [pc, #228]	; (800386c <MX_ADC3_Init+0x134>)
 8003788:	2201      	movs	r2, #1
 800378a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800378c:	4b37      	ldr	r3, [pc, #220]	; (800386c <MX_ADC3_Init+0x134>)
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003792:	4b36      	ldr	r3, [pc, #216]	; (800386c <MX_ADC3_Init+0x134>)
 8003794:	2201      	movs	r2, #1
 8003796:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003798:	4b34      	ldr	r3, [pc, #208]	; (800386c <MX_ADC3_Init+0x134>)
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037a0:	4b32      	ldr	r3, [pc, #200]	; (800386c <MX_ADC3_Init+0x134>)
 80037a2:	2204      	movs	r2, #4
 80037a4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80037a6:	4b31      	ldr	r3, [pc, #196]	; (800386c <MX_ADC3_Init+0x134>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80037ac:	4b2f      	ldr	r3, [pc, #188]	; (800386c <MX_ADC3_Init+0x134>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80037b2:	482e      	ldr	r0, [pc, #184]	; (800386c <MX_ADC3_Init+0x134>)
 80037b4:	f000 fc62 	bl	800407c <HAL_ADC_Init>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80037be:	f000 f961 	bl	8003a84 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80037c6:	f107 031c 	add.w	r3, r7, #28
 80037ca:	4619      	mov	r1, r3
 80037cc:	4827      	ldr	r0, [pc, #156]	; (800386c <MX_ADC3_Init+0x134>)
 80037ce:	f001 f921 	bl	8004a14 <HAL_ADCEx_MultiModeConfigChannel>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80037d8:	f000 f954 	bl	8003a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80037dc:	2301      	movs	r3, #1
 80037de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037e0:	2301      	movs	r3, #1
 80037e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80037f4:	1d3b      	adds	r3, r7, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	481c      	ldr	r0, [pc, #112]	; (800386c <MX_ADC3_Init+0x134>)
 80037fa:	f000 fe1f 	bl	800443c <HAL_ADC_ConfigChannel>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8003804:	f000 f93e 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  ADC_Calibrate(ADC3);
 8003808:	4819      	ldr	r0, [pc, #100]	; (8003870 <MX_ADC3_Init+0x138>)
 800380a:	f7ff fb03 	bl	8002e14 <ADC_Calibrate>

  ADC3->CR |= ADC_CR_ADEN; // Enable ADC
 800380e:	4b18      	ldr	r3, [pc, #96]	; (8003870 <MX_ADC3_Init+0x138>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4a17      	ldr	r2, [pc, #92]	; (8003870 <MX_ADC3_Init+0x138>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6093      	str	r3, [r2, #8]
//  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC3->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 800381a:	4b15      	ldr	r3, [pc, #84]	; (8003870 <MX_ADC3_Init+0x138>)
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	4a14      	ldr	r2, [pc, #80]	; (8003870 <MX_ADC3_Init+0x138>)
 8003820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003824:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~0xC; // 12-bit Resolution
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <MX_ADC3_Init+0x138>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a11      	ldr	r2, [pc, #68]	; (8003870 <MX_ADC3_Init+0x138>)
 800382c:	f023 030c 	bic.w	r3, r3, #12
 8003830:	60d3      	str	r3, [r2, #12]

  ADC3->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <MX_ADC3_Init+0x138>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <MX_ADC3_Init+0x138>)
 8003838:	f023 030f 	bic.w	r3, r3, #15
 800383c:	6313      	str	r3, [r2, #48]	; 0x30
  ADC3->SQR1 |= 0x1 << 6; // Channel 1 of ADC3
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <MX_ADC3_Init+0x138>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a0b      	ldr	r2, [pc, #44]	; (8003870 <MX_ADC3_Init+0x138>)
 8003844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003848:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 800384a:	bf00      	nop
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <MX_ADC3_Init+0x138>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f9      	beq.n	800384c <MX_ADC3_Init+0x114>
  ADC3->CR |= ADC_CR_ADSTART; // Start the ADC
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <MX_ADC3_Init+0x138>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a04      	ldr	r2, [pc, #16]	; (8003870 <MX_ADC3_Init+0x138>)
 800385e:	f043 0304 	orr.w	r3, r3, #4
 8003862:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC3_Init 2 */

}
 8003864:	bf00      	nop
 8003866:	3728      	adds	r7, #40	; 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	2000017c 	.word	0x2000017c
 8003870:	50000400 	.word	0x50000400

08003874 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800387a:	463b      	mov	r3, r7
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
 8003888:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800388a:	4b3e      	ldr	r3, [pc, #248]	; (8003984 <MX_ADC4_Init+0x110>)
 800388c:	4a3e      	ldr	r2, [pc, #248]	; (8003988 <MX_ADC4_Init+0x114>)
 800388e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003890:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <MX_ADC4_Init+0x110>)
 8003892:	2200      	movs	r2, #0
 8003894:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <MX_ADC4_Init+0x110>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <MX_ADC4_Init+0x110>)
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80038a2:	4b38      	ldr	r3, [pc, #224]	; (8003984 <MX_ADC4_Init+0x110>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80038a8:	4b36      	ldr	r3, [pc, #216]	; (8003984 <MX_ADC4_Init+0x110>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038b0:	4b34      	ldr	r3, [pc, #208]	; (8003984 <MX_ADC4_Init+0x110>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038b6:	4b33      	ldr	r3, [pc, #204]	; (8003984 <MX_ADC4_Init+0x110>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038bc:	4b31      	ldr	r3, [pc, #196]	; (8003984 <MX_ADC4_Init+0x110>)
 80038be:	2200      	movs	r2, #0
 80038c0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80038c2:	4b30      	ldr	r3, [pc, #192]	; (8003984 <MX_ADC4_Init+0x110>)
 80038c4:	2201      	movs	r2, #1
 80038c6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80038c8:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <MX_ADC4_Init+0x110>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038d0:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <MX_ADC4_Init+0x110>)
 80038d2:	2204      	movs	r2, #4
 80038d4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80038d6:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <MX_ADC4_Init+0x110>)
 80038d8:	2200      	movs	r2, #0
 80038da:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <MX_ADC4_Init+0x110>)
 80038de:	2200      	movs	r2, #0
 80038e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80038e2:	4828      	ldr	r0, [pc, #160]	; (8003984 <MX_ADC4_Init+0x110>)
 80038e4:	f000 fbca 	bl	800407c <HAL_ADC_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80038ee:	f000 f8c9 	bl	8003a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038f6:	2301      	movs	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800390a:	463b      	mov	r3, r7
 800390c:	4619      	mov	r1, r3
 800390e:	481d      	ldr	r0, [pc, #116]	; (8003984 <MX_ADC4_Init+0x110>)
 8003910:	f000 fd94 	bl	800443c <HAL_ADC_ConfigChannel>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 800391a:	f000 f8b3 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  ADC_Calibrate(ADC4);
 800391e:	481a      	ldr	r0, [pc, #104]	; (8003988 <MX_ADC4_Init+0x114>)
 8003920:	f7ff fa78 	bl	8002e14 <ADC_Calibrate>

  ADC4->CR |= ADC_CR_ADEN; // Enable ADC
 8003924:	4b18      	ldr	r3, [pc, #96]	; (8003988 <MX_ADC4_Init+0x114>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a17      	ldr	r2, [pc, #92]	; (8003988 <MX_ADC4_Init+0x114>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6093      	str	r3, [r2, #8]
//  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC4->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <MX_ADC4_Init+0x114>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4a14      	ldr	r2, [pc, #80]	; (8003988 <MX_ADC4_Init+0x114>)
 8003936:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800393a:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~0xC; // 12-bit Resolution
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <MX_ADC4_Init+0x114>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <MX_ADC4_Init+0x114>)
 8003942:	f023 030c 	bic.w	r3, r3, #12
 8003946:	60d3      	str	r3, [r2, #12]

  ADC4->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <MX_ADC4_Init+0x114>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <MX_ADC4_Init+0x114>)
 800394e:	f023 030f 	bic.w	r3, r3, #15
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
  ADC4->SQR1 |= 0x1 << 6; // Channel 1 of ADC4
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <MX_ADC4_Init+0x114>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <MX_ADC4_Init+0x114>)
 800395a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800395e:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003960:	bf00      	nop
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <MX_ADC4_Init+0x114>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f9      	beq.n	8003962 <MX_ADC4_Init+0xee>
  ADC4->CR |= ADC_CR_ADSTART; // Start the ADC
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <MX_ADC4_Init+0x114>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <MX_ADC4_Init+0x114>)
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC4_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200001cc 	.word	0x200001cc
 8003988:	50000500 	.word	0x50000500

0800398c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <MX_I2C1_Init+0x74>)
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <MX_I2C1_Init+0x78>)
 8003994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003996:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <MX_I2C1_Init+0x74>)
 8003998:	4a1b      	ldr	r2, [pc, #108]	; (8003a08 <MX_I2C1_Init+0x7c>)
 800399a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800399c:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <MX_I2C1_Init+0x74>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039a2:	4b17      	ldr	r3, [pc, #92]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039a8:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80039ae:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039c0:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039c6:	480e      	ldr	r0, [pc, #56]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039c8:	f001 fc08 	bl	80051dc <HAL_I2C_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80039d2:	f000 f857 	bl	8003a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039d6:	2100      	movs	r1, #0
 80039d8:	4809      	ldr	r0, [pc, #36]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039da:	f002 f98f 	bl	8005cfc <HAL_I2CEx_ConfigAnalogFilter>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80039e4:	f000 f84e 	bl	8003a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039e8:	2100      	movs	r1, #0
 80039ea:	4805      	ldr	r0, [pc, #20]	; (8003a00 <MX_I2C1_Init+0x74>)
 80039ec:	f002 f9d1 	bl	8005d92 <HAL_I2CEx_ConfigDigitalFilter>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039f6:	f000 f845 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2000021c 	.word	0x2000021c
 8003a04:	40005400 	.word	0x40005400
 8003a08:	2000090e 	.word	0x2000090e

08003a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4a1a      	ldr	r2, [pc, #104]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	6153      	str	r3, [r2, #20]
 8003a1e:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a34:	6153      	str	r3, [r2, #20]
 8003a36:	4b12      	ldr	r3, [pc, #72]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a4c:	6153      	str	r3, [r2, #20]
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a56:	607b      	str	r3, [r7, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a64:	6153      	str	r3, [r2, #20]
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <MX_GPIO_Init+0x74>)
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000

08003a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a88:	b672      	cpsid	i
}
 8003a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <Error_Handler+0x8>
	...

08003a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_MspInit+0x44>)
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	4a0e      	ldr	r2, [pc, #56]	; (8003ad4 <HAL_MspInit+0x44>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6193      	str	r3, [r2, #24]
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <HAL_MspInit+0x44>)
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <HAL_MspInit+0x44>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_MspInit+0x44>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	61d3      	str	r3, [r2, #28]
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_MspInit+0x44>)
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000

08003ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b090      	sub	sp, #64	; 0x40
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	60da      	str	r2, [r3, #12]
 8003aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af8:	d12e      	bne.n	8003b58 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003afa:	4b66      	ldr	r3, [pc, #408]	; (8003c94 <HAL_ADC_MspInit+0x1bc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3301      	adds	r3, #1
 8003b00:	4a64      	ldr	r2, [pc, #400]	; (8003c94 <HAL_ADC_MspInit+0x1bc>)
 8003b02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b04:	4b63      	ldr	r3, [pc, #396]	; (8003c94 <HAL_ADC_MspInit+0x1bc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d10b      	bne.n	8003b24 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b0c:	4b62      	ldr	r3, [pc, #392]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	4a61      	ldr	r2, [pc, #388]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b16:	6153      	str	r3, [r2, #20]
 8003b18:	4b5f      	ldr	r3, [pc, #380]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b24:	4b5c      	ldr	r3, [pc, #368]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	4a5b      	ldr	r2, [pc, #364]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2e:	6153      	str	r3, [r2, #20]
 8003b30:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b40:	2303      	movs	r3, #3
 8003b42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b52:	f001 f9c9 	bl	8004ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8003b56:	e099      	b.n	8003c8c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a4f      	ldr	r2, [pc, #316]	; (8003c9c <HAL_ADC_MspInit+0x1c4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d12e      	bne.n	8003bc0 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003b62:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_ADC_MspInit+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3301      	adds	r3, #1
 8003b68:	4a4a      	ldr	r2, [pc, #296]	; (8003c94 <HAL_ADC_MspInit+0x1bc>)
 8003b6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b6c:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <HAL_ADC_MspInit+0x1bc>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d10b      	bne.n	8003b8c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b74:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	4a47      	ldr	r2, [pc, #284]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6153      	str	r3, [r2, #20]
 8003b80:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b88:	623b      	str	r3, [r7, #32]
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8c:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	4a41      	ldr	r2, [pc, #260]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b96:	6153      	str	r3, [r2, #20]
 8003b98:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ba4:	2340      	movs	r3, #64	; 0x40
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bba:	f001 f995 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003bbe:	e065      	b.n	8003c8c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a36      	ldr	r2, [pc, #216]	; (8003ca0 <HAL_ADC_MspInit+0x1c8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d12d      	bne.n	8003c26 <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003bca:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <HAL_ADC_MspInit+0x1cc>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	4a34      	ldr	r2, [pc, #208]	; (8003ca4 <HAL_ADC_MspInit+0x1cc>)
 8003bd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003bd4:	4b33      	ldr	r3, [pc, #204]	; (8003ca4 <HAL_ADC_MspInit+0x1cc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10b      	bne.n	8003bf4 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8003bdc:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	4a2d      	ldr	r2, [pc, #180]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003be2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003be6:	6153      	str	r3, [r2, #20]
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf4:	4b28      	ldr	r3, [pc, #160]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003bf6:	695b      	ldr	r3, [r3, #20]
 8003bf8:	4a27      	ldr	r2, [pc, #156]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfe:	6153      	str	r3, [r2, #20]
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c10:	2303      	movs	r3, #3
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4822      	ldr	r0, [pc, #136]	; (8003ca8 <HAL_ADC_MspInit+0x1d0>)
 8003c20:	f001 f962 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003c24:	e032      	b.n	8003c8c <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC4)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_ADC_MspInit+0x1d4>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d12d      	bne.n	8003c8c <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003c30:	4b1c      	ldr	r3, [pc, #112]	; (8003ca4 <HAL_ADC_MspInit+0x1cc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	4a1b      	ldr	r2, [pc, #108]	; (8003ca4 <HAL_ADC_MspInit+0x1cc>)
 8003c38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003c3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ca4 <HAL_ADC_MspInit+0x1cc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10b      	bne.n	8003c5a <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003c48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c4c:	6153      	str	r3, [r2, #20]
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003c60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c64:	6153      	str	r3, [r2, #20]
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_ADC_MspInit+0x1c0>)
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003c72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c84:	4619      	mov	r1, r3
 8003c86:	480a      	ldr	r0, [pc, #40]	; (8003cb0 <HAL_ADC_MspInit+0x1d8>)
 8003c88:	f001 f92e 	bl	8004ee8 <HAL_GPIO_Init>
}
 8003c8c:	bf00      	nop
 8003c8e:	3740      	adds	r7, #64	; 0x40
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000334 	.word	0x20000334
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	50000100 	.word	0x50000100
 8003ca0:	50000400 	.word	0x50000400
 8003ca4:	20000338 	.word	0x20000338
 8003ca8:	48000400 	.word	0x48000400
 8003cac:	50000500 	.word	0x50000500
 8003cb0:	48001000 	.word	0x48001000

08003cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08e      	sub	sp, #56	; 0x38
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a54      	ldr	r2, [pc, #336]	; (8003e24 <HAL_I2C_MspInit+0x170>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d14e      	bne.n	8003d74 <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd6:	4b54      	ldr	r3, [pc, #336]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	4a53      	ldr	r2, [pc, #332]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce0:	6153      	str	r3, [r2, #20]
 8003ce2:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	4b4e      	ldr	r3, [pc, #312]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4a4d      	ldr	r2, [pc, #308]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cf8:	6153      	str	r3, [r2, #20]
 8003cfa:	4b4b      	ldr	r3, [pc, #300]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d0c:	2312      	movs	r3, #18
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d14:	2303      	movs	r3, #3
 8003d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d18:	2304      	movs	r3, #4
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d20:	4619      	mov	r1, r3
 8003d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d26:	f001 f8df 	bl	8004ee8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d2e:	2312      	movs	r3, #18
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d36:	2303      	movs	r3, #3
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d42:	4619      	mov	r1, r3
 8003d44:	4839      	ldr	r0, [pc, #228]	; (8003e2c <HAL_I2C_MspInit+0x178>)
 8003d46:	f001 f8cf 	bl	8004ee8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d4a:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4a36      	ldr	r2, [pc, #216]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003d50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d54:	61d3      	str	r3, [r2, #28]
 8003d56:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003d62:	2200      	movs	r2, #0
 8003d64:	2100      	movs	r1, #0
 8003d66:	201f      	movs	r0, #31
 8003d68:	f001 f887 	bl	8004e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003d6c:	201f      	movs	r0, #31
 8003d6e:	f001 f8a0 	bl	8004eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003d72:	e052      	b.n	8003e1a <HAL_I2C_MspInit+0x166>
  else if(hi2c->Instance==I2C2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <HAL_I2C_MspInit+0x17c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d14d      	bne.n	8003e1a <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7e:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	4a29      	ldr	r2, [pc, #164]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d88:	6153      	str	r3, [r2, #20]
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003da0:	6153      	str	r3, [r2, #20]
 8003da2:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db4:	2312      	movs	r3, #18
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dce:	f001 f88b 	bl	8004ee8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003dd2:	2340      	movs	r3, #64	; 0x40
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dd6:	2312      	movs	r3, #18
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dde:	2303      	movs	r3, #3
 8003de0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003de2:	2304      	movs	r3, #4
 8003de4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dea:	4619      	mov	r1, r3
 8003dec:	4811      	ldr	r0, [pc, #68]	; (8003e34 <HAL_I2C_MspInit+0x180>)
 8003dee:	f001 f87b 	bl	8004ee8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003df8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dfc:	61d3      	str	r3, [r2, #28]
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <HAL_I2C_MspInit+0x174>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	2021      	movs	r0, #33	; 0x21
 8003e10:	f001 f833 	bl	8004e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003e14:	2021      	movs	r0, #33	; 0x21
 8003e16:	f001 f84c 	bl	8004eb2 <HAL_NVIC_EnableIRQ>
}
 8003e1a:	bf00      	nop
 8003e1c:	3738      	adds	r7, #56	; 0x38
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40005400 	.word	0x40005400
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	48000400 	.word	0x48000400
 8003e30:	40005800 	.word	0x40005800
 8003e34:	48001400 	.word	0x48001400

08003e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <NMI_Handler+0x4>

08003e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <HardFault_Handler+0x4>

08003e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <MemManage_Handler+0x4>

08003e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e4e:	e7fe      	b.n	8003e4e <BusFault_Handler+0x4>

08003e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e54:	e7fe      	b.n	8003e54 <UsageFault_Handler+0x4>

08003e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e56:	b480      	push	{r7}
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e84:	f000 f8b6 	bl	8003ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e88:	bf00      	nop
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003e90:	4802      	ldr	r0, [pc, #8]	; (8003e9c <I2C1_EV_IRQHandler+0x10>)
 8003e92:	f001 fc61 	bl	8005758 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	2000021c 	.word	0x2000021c

08003ea0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003ea4:	4802      	ldr	r0, [pc, #8]	; (8003eb0 <I2C2_EV_IRQHandler+0x10>)
 8003ea6:	f001 fc57 	bl	8005758 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000270 	.word	0x20000270

08003eb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <SystemInit+0x20>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	4a05      	ldr	r2, [pc, #20]	; (8003ed4 <SystemInit+0x20>)
 8003ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <lerp>:
    }
    return val;
}

float lerp(float a, float b, float t)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ee2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ee6:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + (b - a) * t;
 8003eea:	ed97 7a02 	vldr	s14, [r7, #8]
 8003eee:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ef2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f02:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003f06:	eeb0 0a67 	vmov.f32	s0, s15
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f4c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f18:	f7ff ffcc 	bl	8003eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f1c:	480c      	ldr	r0, [pc, #48]	; (8003f50 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f1e:	490d      	ldr	r1, [pc, #52]	; (8003f54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f20:	4a0d      	ldr	r2, [pc, #52]	; (8003f58 <LoopForever+0xe>)
  movs r3, #0
 8003f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f24:	e002      	b.n	8003f2c <LoopCopyDataInit>

08003f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f2a:	3304      	adds	r3, #4

08003f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f30:	d3f9      	bcc.n	8003f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f32:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f34:	4c0a      	ldr	r4, [pc, #40]	; (8003f60 <LoopForever+0x16>)
  movs r3, #0
 8003f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f38:	e001      	b.n	8003f3e <LoopFillZerobss>

08003f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f3c:	3204      	adds	r2, #4

08003f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f40:	d3fb      	bcc.n	8003f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f42:	f003 fb4d 	bl	80075e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f46:	f7ff fa39 	bl	80033bc <main>

08003f4a <LoopForever>:

LoopForever:
    b LoopForever
 8003f4a:	e7fe      	b.n	8003f4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f4c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f54:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003f58:	080082b0 	.word	0x080082b0
  ldr r2, =_sbss
 8003f5c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003f60:	20000340 	.word	0x20000340

08003f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f64:	e7fe      	b.n	8003f64 <ADC1_2_IRQHandler>
	...

08003f68 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_Init+0x28>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <HAL_Init+0x28>)
 8003f72:	f043 0310 	orr.w	r3, r3, #16
 8003f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f78:	2003      	movs	r0, #3
 8003f7a:	f000 ff73 	bl	8004e64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f7e:	200f      	movs	r0, #15
 8003f80:	f000 f808 	bl	8003f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f84:	f7ff fd84 	bl	8003a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40022000 	.word	0x40022000

08003f94 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_InitTick+0x54>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_InitTick+0x58>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 ff8b 	bl	8004ece <HAL_SYSTICK_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e00e      	b.n	8003fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b0f      	cmp	r3, #15
 8003fc6:	d80a      	bhi.n	8003fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fd0:	f000 ff53 	bl	8004e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fd4:	4a06      	ldr	r2, [pc, #24]	; (8003ff0 <HAL_InitTick+0x5c>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000028 	.word	0x20000028
 8003fec:	20000030 	.word	0x20000030
 8003ff0:	2000002c 	.word	0x2000002c

08003ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <HAL_IncTick+0x20>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_IncTick+0x24>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4413      	add	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_IncTick+0x24>)
 8004006:	6013      	str	r3, [r2, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000030 	.word	0x20000030
 8004018:	2000033c 	.word	0x2000033c

0800401c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return uwTick;  
 8004020:	4b03      	ldr	r3, [pc, #12]	; (8004030 <HAL_GetTick+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	2000033c 	.word	0x2000033c

08004034 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff ffee 	bl	800401c <HAL_GetTick>
 8004040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800404c:	d005      	beq.n	800405a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <HAL_Delay+0x44>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800405a:	bf00      	nop
 800405c:	f7ff ffde 	bl	800401c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	429a      	cmp	r2, r3
 800406a:	d8f7      	bhi.n	800405c <HAL_Delay+0x28>
  {
  }
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	20000030 	.word	0x20000030

0800407c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b09a      	sub	sp, #104	; 0x68
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e1c9      	b.n	8004430 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 0310 	and.w	r3, r3, #16
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d176      	bne.n	800419c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d152      	bne.n	800415c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fd01 	bl	8003ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d13b      	bne.n	800415c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fd87 	bl	8004bf8 <ADC_Disable>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d12f      	bne.n	800415c <HAL_ADC_Init+0xe0>
 80040fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004100:	2b00      	cmp	r3, #0
 8004102:	d12b      	bne.n	800415c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800410c:	f023 0302 	bic.w	r3, r3, #2
 8004110:	f043 0202 	orr.w	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004126:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689a      	ldr	r2, [r3, #8]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004136:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004138:	4b86      	ldr	r3, [pc, #536]	; (8004354 <HAL_ADC_Init+0x2d8>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a86      	ldr	r2, [pc, #536]	; (8004358 <HAL_ADC_Init+0x2dc>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	0c9a      	lsrs	r2, r3, #18
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800414e:	e002      	b.n	8004156 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	3b01      	subs	r3, #1
 8004154:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1f9      	bne.n	8004150 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004174:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004178:	d110      	bne.n	800419c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f023 0312 	bic.w	r3, r3, #18
 8004182:	f043 0210 	orr.w	r2, r3, #16
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	f043 0201 	orr.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f040 8136 	bne.w	8004416 <HAL_ADC_Init+0x39a>
 80041aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f040 8131 	bne.w	8004416 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 8129 	bne.w	8004416 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80041cc:	f043 0202 	orr.w	r2, r3, #2
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041dc:	d004      	beq.n	80041e8 <HAL_ADC_Init+0x16c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a5e      	ldr	r2, [pc, #376]	; (800435c <HAL_ADC_Init+0x2e0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_Init+0x170>
 80041e8:	4b5d      	ldr	r3, [pc, #372]	; (8004360 <HAL_ADC_Init+0x2e4>)
 80041ea:	e000      	b.n	80041ee <HAL_ADC_Init+0x172>
 80041ec:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <HAL_ADC_Init+0x2e8>)
 80041ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041f8:	d102      	bne.n	8004200 <HAL_ADC_Init+0x184>
 80041fa:	4b58      	ldr	r3, [pc, #352]	; (800435c <HAL_ADC_Init+0x2e0>)
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	e01a      	b.n	8004236 <HAL_ADC_Init+0x1ba>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a55      	ldr	r2, [pc, #340]	; (800435c <HAL_ADC_Init+0x2e0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d103      	bne.n	8004212 <HAL_ADC_Init+0x196>
 800420a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e011      	b.n	8004236 <HAL_ADC_Init+0x1ba>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a54      	ldr	r2, [pc, #336]	; (8004368 <HAL_ADC_Init+0x2ec>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d102      	bne.n	8004222 <HAL_ADC_Init+0x1a6>
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_ADC_Init+0x2f0>)
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e009      	b.n	8004236 <HAL_ADC_Init+0x1ba>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a51      	ldr	r2, [pc, #324]	; (800436c <HAL_ADC_Init+0x2f0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d102      	bne.n	8004232 <HAL_ADC_Init+0x1b6>
 800422c:	4b4e      	ldr	r3, [pc, #312]	; (8004368 <HAL_ADC_Init+0x2ec>)
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e001      	b.n	8004236 <HAL_ADC_Init+0x1ba>
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b01      	cmp	r3, #1
 8004242:	d108      	bne.n	8004256 <HAL_ADC_Init+0x1da>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_ADC_Init+0x1da>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <HAL_ADC_Init+0x1dc>
 8004256:	2300      	movs	r3, #0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11c      	bne.n	8004296 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800425c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d107      	bne.n	800427e <HAL_ADC_Init+0x202>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_ADC_Init+0x202>
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_ADC_Init+0x204>
 800427e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	431a      	orrs	r2, r3
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7e5b      	ldrb	r3, [r3, #25]
 800429a:	035b      	lsls	r3, r3, #13
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042a0:	2a01      	cmp	r2, #1
 80042a2:	d002      	beq.n	80042aa <HAL_ADC_Init+0x22e>
 80042a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042a8:	e000      	b.n	80042ac <HAL_ADC_Init+0x230>
 80042aa:	2200      	movs	r2, #0
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042bc:	4313      	orrs	r3, r2
 80042be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d11b      	bne.n	8004302 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7e5b      	ldrb	r3, [r3, #25]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	3b01      	subs	r3, #1
 80042d8:	045a      	lsls	r2, r3, #17
 80042da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042dc:	4313      	orrs	r3, r2
 80042de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e2:	663b      	str	r3, [r7, #96]	; 0x60
 80042e4:	e00d      	b.n	8004302 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f043 0201 	orr.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	2b01      	cmp	r3, #1
 8004308:	d03a      	beq.n	8004380 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <HAL_ADC_Init+0x2ec>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_ADC_Init+0x2a2>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a14      	ldr	r2, [pc, #80]	; (800436c <HAL_ADC_Init+0x2f0>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d128      	bne.n	8004370 <HAL_ADC_Init+0x2f4>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004326:	d012      	beq.n	800434e <HAL_ADC_Init+0x2d2>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004330:	d00a      	beq.n	8004348 <HAL_ADC_Init+0x2cc>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800433a:	d002      	beq.n	8004342 <HAL_ADC_Init+0x2c6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	e018      	b.n	8004374 <HAL_ADC_Init+0x2f8>
 8004342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004346:	e015      	b.n	8004374 <HAL_ADC_Init+0x2f8>
 8004348:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800434c:	e012      	b.n	8004374 <HAL_ADC_Init+0x2f8>
 800434e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004352:	e00f      	b.n	8004374 <HAL_ADC_Init+0x2f8>
 8004354:	20000028 	.word	0x20000028
 8004358:	431bde83 	.word	0x431bde83
 800435c:	50000100 	.word	0x50000100
 8004360:	50000300 	.word	0x50000300
 8004364:	50000700 	.word	0x50000700
 8004368:	50000400 	.word	0x50000400
 800436c:	50000500 	.word	0x50000500
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004378:	4313      	orrs	r3, r2
 800437a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800437c:	4313      	orrs	r3, r2
 800437e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b00      	cmp	r3, #0
 800438c:	d114      	bne.n	80043b8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6812      	ldr	r2, [r2, #0]
 8004398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800439c:	f023 0302 	bic.w	r3, r3, #2
 80043a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	7e1b      	ldrb	r3, [r3, #24]
 80043a6:	039a      	lsls	r2, r3, #14
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4313      	orrs	r3, r2
 80043b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043b4:	4313      	orrs	r3, r2
 80043b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <HAL_ADC_Init+0x3bc>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80043c8:	430b      	orrs	r3, r1
 80043ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d10c      	bne.n	80043ee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	f023 010f 	bic.w	r1, r3, #15
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	1e5a      	subs	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
 80043ec:	e007      	b.n	80043fe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 020f 	bic.w	r2, r2, #15
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f023 0303 	bic.w	r3, r3, #3
 800440c:	f043 0201 	orr.w	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
 8004414:	e00a      	b.n	800442c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f023 0312 	bic.w	r3, r3, #18
 800441e:	f043 0210 	orr.w	r2, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004426:	2301      	movs	r3, #1
 8004428:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800442c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004430:	4618      	mov	r0, r3
 8004432:	3768      	adds	r7, #104	; 0x68
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	fff0c007 	.word	0xfff0c007

0800443c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b09b      	sub	sp, #108	; 0x6c
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_ADC_ConfigChannel+0x22>
 800445a:	2302      	movs	r3, #2
 800445c:	e2ca      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x5b8>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f040 82ae 	bne.w	80049d2 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b04      	cmp	r3, #4
 800447c:	d81c      	bhi.n	80044b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	461a      	mov	r2, r3
 8004492:	231f      	movs	r3, #31
 8004494:	4093      	lsls	r3, r2
 8004496:	43db      	mvns	r3, r3
 8004498:	4019      	ands	r1, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	fa00 f203 	lsl.w	r2, r0, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
 80044b6:	e063      	b.n	8004580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b09      	cmp	r3, #9
 80044be:	d81e      	bhi.n	80044fe <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	3b1e      	subs	r3, #30
 80044d4:	221f      	movs	r2, #31
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	4019      	ands	r1, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	3b1e      	subs	r3, #30
 80044f0:	fa00 f203 	lsl.w	r2, r0, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	635a      	str	r2, [r3, #52]	; 0x34
 80044fc:	e040      	b.n	8004580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b0e      	cmp	r3, #14
 8004504:	d81e      	bhi.n	8004544 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4413      	add	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	3b3c      	subs	r3, #60	; 0x3c
 800451a:	221f      	movs	r2, #31
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	43db      	mvns	r3, r3
 8004522:	4019      	ands	r1, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	3b3c      	subs	r3, #60	; 0x3c
 8004536:	fa00 f203 	lsl.w	r2, r0, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	639a      	str	r2, [r3, #56]	; 0x38
 8004542:	e01d      	b.n	8004580 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	4413      	add	r3, r2
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	3b5a      	subs	r3, #90	; 0x5a
 8004558:	221f      	movs	r2, #31
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	4019      	ands	r1, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	4413      	add	r3, r2
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	3b5a      	subs	r3, #90	; 0x5a
 8004574:	fa00 f203 	lsl.w	r2, r0, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 80e5 	bne.w	800475a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b09      	cmp	r3, #9
 8004596:	d91c      	bls.n	80045d2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6999      	ldr	r1, [r3, #24]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	3b1e      	subs	r3, #30
 80045aa:	2207      	movs	r2, #7
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	4019      	ands	r1, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6898      	ldr	r0, [r3, #8]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	3b1e      	subs	r3, #30
 80045c4:	fa00 f203 	lsl.w	r2, r0, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	619a      	str	r2, [r3, #24]
 80045d0:	e019      	b.n	8004606 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6959      	ldr	r1, [r3, #20]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	2207      	movs	r2, #7
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43db      	mvns	r3, r3
 80045ea:	4019      	ands	r1, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6898      	ldr	r0, [r3, #8]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4613      	mov	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	4413      	add	r3, r2
 80045fa:	fa00 f203 	lsl.w	r2, r0, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695a      	ldr	r2, [r3, #20]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	08db      	lsrs	r3, r3, #3
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	fa02 f303 	lsl.w	r3, r2, r3
 800461c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	3b01      	subs	r3, #1
 8004624:	2b03      	cmp	r3, #3
 8004626:	d84f      	bhi.n	80046c8 <HAL_ADC_ConfigChannel+0x28c>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_ADC_ConfigChannel+0x1f4>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	08004641 	.word	0x08004641
 8004634:	08004663 	.word	0x08004663
 8004638:	08004685 	.word	0x08004685
 800463c:	080046a7 	.word	0x080046a7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004646:	4b9a      	ldr	r3, [pc, #616]	; (80048b0 <HAL_ADC_ConfigChannel+0x474>)
 8004648:	4013      	ands	r3, r2
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	0691      	lsls	r1, r2, #26
 8004650:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004652:	430a      	orrs	r2, r1
 8004654:	431a      	orrs	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800465e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004660:	e07e      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004668:	4b91      	ldr	r3, [pc, #580]	; (80048b0 <HAL_ADC_ConfigChannel+0x474>)
 800466a:	4013      	ands	r3, r2
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	0691      	lsls	r1, r2, #26
 8004672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004674:	430a      	orrs	r2, r1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004680:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004682:	e06d      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800468a:	4b89      	ldr	r3, [pc, #548]	; (80048b0 <HAL_ADC_ConfigChannel+0x474>)
 800468c:	4013      	ands	r3, r2
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	0691      	lsls	r1, r2, #26
 8004694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004696:	430a      	orrs	r2, r1
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80046a2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80046a4:	e05c      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046ac:	4b80      	ldr	r3, [pc, #512]	; (80048b0 <HAL_ADC_ConfigChannel+0x474>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	0691      	lsls	r1, r2, #26
 80046b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046b8:	430a      	orrs	r2, r1
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80046c4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80046c6:	e04b      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	069b      	lsls	r3, r3, #26
 80046d8:	429a      	cmp	r2, r3
 80046da:	d107      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046ea:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	069b      	lsls	r3, r3, #26
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d107      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800470e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	069b      	lsls	r3, r3, #26
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004732:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	069b      	lsls	r3, r3, #26
 8004744:	429a      	cmp	r2, r3
 8004746:	d10a      	bne.n	800475e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004756:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004758:	e001      	b.n	800475e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <HAL_ADC_ConfigChannel+0x324>
      break;
 800475e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d108      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x344>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x344>
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <HAL_ADC_ConfigChannel+0x346>
 8004780:	2300      	movs	r3, #0
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 8130 	bne.w	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d00f      	beq.n	80047b0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2201      	movs	r2, #1
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43da      	mvns	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	400a      	ands	r2, r1
 80047aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80047ae:	e049      	b.n	8004844 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b09      	cmp	r3, #9
 80047d0:	d91c      	bls.n	800480c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6999      	ldr	r1, [r3, #24]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	4413      	add	r3, r2
 80047e2:	3b1b      	subs	r3, #27
 80047e4:	2207      	movs	r2, #7
 80047e6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ea:	43db      	mvns	r3, r3
 80047ec:	4019      	ands	r1, r3
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6898      	ldr	r0, [r3, #8]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	3b1b      	subs	r3, #27
 80047fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	619a      	str	r2, [r3, #24]
 800480a:	e01b      	b.n	8004844 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6959      	ldr	r1, [r3, #20]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	2207      	movs	r2, #7
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	4019      	ands	r1, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6898      	ldr	r0, [r3, #8]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	4613      	mov	r3, r2
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	4413      	add	r3, r2
 8004838:	fa00 f203 	lsl.w	r2, r0, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800484c:	d004      	beq.n	8004858 <HAL_ADC_ConfigChannel+0x41c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <HAL_ADC_ConfigChannel+0x478>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_ADC_ConfigChannel+0x420>
 8004858:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_ADC_ConfigChannel+0x47c>)
 800485a:	e000      	b.n	800485e <HAL_ADC_ConfigChannel+0x422>
 800485c:	4b17      	ldr	r3, [pc, #92]	; (80048bc <HAL_ADC_ConfigChannel+0x480>)
 800485e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b10      	cmp	r3, #16
 8004866:	d105      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004870:	2b00      	cmp	r3, #0
 8004872:	d015      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004878:	2b11      	cmp	r3, #17
 800487a:	d105      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800487c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800488c:	2b12      	cmp	r3, #18
 800488e:	f040 80ab 	bne.w	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 80a4 	bne.w	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048a8:	d10a      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x484>
 80048aa:	4b02      	ldr	r3, [pc, #8]	; (80048b4 <HAL_ADC_ConfigChannel+0x478>)
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e022      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4ba>
 80048b0:	83fff000 	.word	0x83fff000
 80048b4:	50000100 	.word	0x50000100
 80048b8:	50000300 	.word	0x50000300
 80048bc:	50000700 	.word	0x50000700
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a4e      	ldr	r2, [pc, #312]	; (8004a00 <HAL_ADC_ConfigChannel+0x5c4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d103      	bne.n	80048d2 <HAL_ADC_ConfigChannel+0x496>
 80048ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e011      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4ba>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <HAL_ADC_ConfigChannel+0x5c8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d102      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x4a6>
 80048dc:	4b4a      	ldr	r3, [pc, #296]	; (8004a08 <HAL_ADC_ConfigChannel+0x5cc>)
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e009      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4ba>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a48      	ldr	r2, [pc, #288]	; (8004a08 <HAL_ADC_ConfigChannel+0x5cc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d102      	bne.n	80048f2 <HAL_ADC_ConfigChannel+0x4b6>
 80048ec:	4b45      	ldr	r3, [pc, #276]	; (8004a04 <HAL_ADC_ConfigChannel+0x5c8>)
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	e001      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x4ba>
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0303 	and.w	r3, r3, #3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d108      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x4da>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x4da>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_ADC_ConfigChannel+0x4dc>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d150      	bne.n	80049be <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800491c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <HAL_ADC_ConfigChannel+0x502>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_ADC_ConfigChannel+0x502>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <HAL_ADC_ConfigChannel+0x504>
 800493e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004940:	2b00      	cmp	r3, #0
 8004942:	d13c      	bne.n	80049be <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b10      	cmp	r3, #16
 800494a:	d11d      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x54c>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004954:	d118      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800495e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004960:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004962:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <HAL_ADC_ConfigChannel+0x5d0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <HAL_ADC_ConfigChannel+0x5d4>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0c9a      	lsrs	r2, r3, #18
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004978:	e002      	b.n	8004980 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3b01      	subs	r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f9      	bne.n	800497a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004986:	e02e      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b11      	cmp	r3, #17
 800498e:	d10b      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x56c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004998:	d106      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800499a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80049a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80049a6:	e01e      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b12      	cmp	r3, #18
 80049ae:	d11a      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80049b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80049b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80049bc:	e013      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	f043 0220 	orr.w	r2, r3, #32
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80049d0:	e00a      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f043 0220 	orr.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80049e4:	e000      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80049e6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80049f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	376c      	adds	r7, #108	; 0x6c
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	50000100 	.word	0x50000100
 8004a04:	50000400 	.word	0x50000400
 8004a08:	50000500 	.word	0x50000500
 8004a0c:	20000028 	.word	0x20000028
 8004a10:	431bde83 	.word	0x431bde83

08004a14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b099      	sub	sp, #100	; 0x64
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a2c:	d102      	bne.n	8004a34 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004a2e:	4b6d      	ldr	r3, [pc, #436]	; (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	e01a      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a6a      	ldr	r2, [pc, #424]	; (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d103      	bne.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004a3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e011      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a67      	ldr	r2, [pc, #412]	; (8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d102      	bne.n	8004a56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a50:	4b66      	ldr	r3, [pc, #408]	; (8004bec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	e009      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a64      	ldr	r2, [pc, #400]	; (8004bec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d102      	bne.n	8004a66 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004a60:	4b61      	ldr	r3, [pc, #388]	; (8004be8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004a62:	60bb      	str	r3, [r7, #8]
 8004a64:	e001      	b.n	8004a6a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0b0      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0a9      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f040 808d 	bne.w	8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 0304 	and.w	r3, r3, #4
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 8086 	bne.w	8004bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ab0:	d004      	beq.n	8004abc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4b      	ldr	r2, [pc, #300]	; (8004be4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d101      	bne.n	8004ac0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004abc:	4b4c      	ldr	r3, [pc, #304]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004abe:	e000      	b.n	8004ac2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004ac0:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004ac2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d040      	beq.n	8004b4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004acc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6859      	ldr	r1, [r3, #4]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ade:	035b      	lsls	r3, r3, #13
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	431a      	orrs	r2, r3
 8004ae4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d108      	bne.n	8004b08 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004b04:	2301      	movs	r3, #1
 8004b06:	e000      	b.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d15c      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d107      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004b2a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d14b      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004b30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b38:	f023 030f 	bic.w	r3, r3, #15
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	6811      	ldr	r1, [r2, #0]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	6892      	ldr	r2, [r2, #8]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	431a      	orrs	r2, r3
 8004b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b4a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b4c:	e03c      	b.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d108      	bne.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d123      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d107      	bne.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e000      	b.n	8004b9e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004b9c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d112      	bne.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004baa:	f023 030f 	bic.w	r3, r3, #15
 8004bae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bb0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bb2:	e009      	b.n	8004bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004bc6:	e000      	b.n	8004bca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bc8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3764      	adds	r7, #100	; 0x64
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	50000100 	.word	0x50000100
 8004be8:	50000400 	.word	0x50000400
 8004bec:	50000500 	.word	0x50000500
 8004bf0:	50000300 	.word	0x50000300
 8004bf4:	50000700 	.word	0x50000700

08004bf8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d108      	bne.n	8004c24 <ADC_Disable+0x2c>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <ADC_Disable+0x2c>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <ADC_Disable+0x2e>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d047      	beq.n	8004cba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 030d 	and.w	r3, r3, #13
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10f      	bne.n	8004c58 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0202 	orr.w	r2, r2, #2
 8004c46:	609a      	str	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004c50:	f7ff f9e4 	bl	800401c <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c56:	e029      	b.n	8004cac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5c:	f043 0210 	orr.w	r2, r3, #16
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e023      	b.n	8004cbc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c74:	f7ff f9d2 	bl	800401c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d914      	bls.n	8004cac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d10d      	bne.n	8004cac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f043 0210 	orr.w	r2, r3, #16
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e007      	b.n	8004cbc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d0dc      	beq.n	8004c74 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cf6:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	60d3      	str	r3, [r2, #12]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <__NVIC_GetPriorityGrouping+0x18>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	0a1b      	lsrs	r3, r3, #8
 8004d16:	f003 0307 	and.w	r3, r3, #7
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	db0b      	blt.n	8004d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	f003 021f 	and.w	r2, r3, #31
 8004d40:	4907      	ldr	r1, [pc, #28]	; (8004d60 <__NVIC_EnableIRQ+0x38>)
 8004d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2001      	movs	r0, #1
 8004d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	e000e100 	.word	0xe000e100

08004d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	6039      	str	r1, [r7, #0]
 8004d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	db0a      	blt.n	8004d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	490c      	ldr	r1, [pc, #48]	; (8004db0 <__NVIC_SetPriority+0x4c>)
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	0112      	lsls	r2, r2, #4
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	440b      	add	r3, r1
 8004d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d8c:	e00a      	b.n	8004da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4908      	ldr	r1, [pc, #32]	; (8004db4 <__NVIC_SetPriority+0x50>)
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	3b04      	subs	r3, #4
 8004d9c:	0112      	lsls	r2, r2, #4
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	440b      	add	r3, r1
 8004da2:	761a      	strb	r2, [r3, #24]
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	e000e100 	.word	0xe000e100
 8004db4:	e000ed00 	.word	0xe000ed00

08004db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b089      	sub	sp, #36	; 0x24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	f1c3 0307 	rsb	r3, r3, #7
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	bf28      	it	cs
 8004dd6:	2304      	movcs	r3, #4
 8004dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	2b06      	cmp	r3, #6
 8004de0:	d902      	bls.n	8004de8 <NVIC_EncodePriority+0x30>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3b03      	subs	r3, #3
 8004de6:	e000      	b.n	8004dea <NVIC_EncodePriority+0x32>
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	fa02 f303 	lsl.w	r3, r2, r3
 8004df6:	43da      	mvns	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0a:	43d9      	mvns	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e10:	4313      	orrs	r3, r2
         );
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3724      	adds	r7, #36	; 0x24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e30:	d301      	bcc.n	8004e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e32:	2301      	movs	r3, #1
 8004e34:	e00f      	b.n	8004e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e36:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <SysTick_Config+0x40>)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e3e:	210f      	movs	r1, #15
 8004e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e44:	f7ff ff8e 	bl	8004d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <SysTick_Config+0x40>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e4e:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <SysTick_Config+0x40>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	e000e010 	.word	0xe000e010

08004e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ff29 	bl	8004cc4 <__NVIC_SetPriorityGrouping>
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	4603      	mov	r3, r0
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e8c:	f7ff ff3e 	bl	8004d0c <__NVIC_GetPriorityGrouping>
 8004e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	6978      	ldr	r0, [r7, #20]
 8004e98:	f7ff ff8e 	bl	8004db8 <NVIC_EncodePriority>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff ff5d 	bl	8004d64 <__NVIC_SetPriority>
}
 8004eaa:	bf00      	nop
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	4603      	mov	r3, r0
 8004eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff ff31 	bl	8004d28 <__NVIC_EnableIRQ>
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7ff ffa2 	bl	8004e20 <SysTick_Config>
 8004edc:	4603      	mov	r3, r0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ef6:	e154      	b.n	80051a2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2101      	movs	r1, #1
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	fa01 f303 	lsl.w	r3, r1, r3
 8004f04:	4013      	ands	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8146 	beq.w	800519c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d005      	beq.n	8004f28 <HAL_GPIO_Init+0x40>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 0303 	and.w	r3, r3, #3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d130      	bne.n	8004f8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	2203      	movs	r2, #3
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f5e:	2201      	movs	r2, #1
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	43db      	mvns	r3, r3
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	f003 0201 	and.w	r2, r3, #1
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d017      	beq.n	8004fc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4013      	ands	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d123      	bne.n	800501a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	08da      	lsrs	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3208      	adds	r2, #8
 8004fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	220f      	movs	r2, #15
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	08da      	lsrs	r2, r3, #3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3208      	adds	r2, #8
 8005014:	6939      	ldr	r1, [r7, #16]
 8005016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	2203      	movs	r2, #3
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43db      	mvns	r3, r3
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 0203 	and.w	r2, r3, #3
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80a0 	beq.w	800519c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505c:	4b58      	ldr	r3, [pc, #352]	; (80051c0 <HAL_GPIO_Init+0x2d8>)
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	4a57      	ldr	r2, [pc, #348]	; (80051c0 <HAL_GPIO_Init+0x2d8>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6193      	str	r3, [r2, #24]
 8005068:	4b55      	ldr	r3, [pc, #340]	; (80051c0 <HAL_GPIO_Init+0x2d8>)
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	60bb      	str	r3, [r7, #8]
 8005072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005074:	4a53      	ldr	r2, [pc, #332]	; (80051c4 <HAL_GPIO_Init+0x2dc>)
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	089b      	lsrs	r3, r3, #2
 800507a:	3302      	adds	r3, #2
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	220f      	movs	r2, #15
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4013      	ands	r3, r2
 8005096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800509e:	d019      	beq.n	80050d4 <HAL_GPIO_Init+0x1ec>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a49      	ldr	r2, [pc, #292]	; (80051c8 <HAL_GPIO_Init+0x2e0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d013      	beq.n	80050d0 <HAL_GPIO_Init+0x1e8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a48      	ldr	r2, [pc, #288]	; (80051cc <HAL_GPIO_Init+0x2e4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00d      	beq.n	80050cc <HAL_GPIO_Init+0x1e4>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a47      	ldr	r2, [pc, #284]	; (80051d0 <HAL_GPIO_Init+0x2e8>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <HAL_GPIO_Init+0x1e0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a46      	ldr	r2, [pc, #280]	; (80051d4 <HAL_GPIO_Init+0x2ec>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <HAL_GPIO_Init+0x1dc>
 80050c0:	2304      	movs	r3, #4
 80050c2:	e008      	b.n	80050d6 <HAL_GPIO_Init+0x1ee>
 80050c4:	2305      	movs	r3, #5
 80050c6:	e006      	b.n	80050d6 <HAL_GPIO_Init+0x1ee>
 80050c8:	2303      	movs	r3, #3
 80050ca:	e004      	b.n	80050d6 <HAL_GPIO_Init+0x1ee>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e002      	b.n	80050d6 <HAL_GPIO_Init+0x1ee>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <HAL_GPIO_Init+0x1ee>
 80050d4:	2300      	movs	r3, #0
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	f002 0203 	and.w	r2, r2, #3
 80050dc:	0092      	lsls	r2, r2, #2
 80050de:	4093      	lsls	r3, r2
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80050e6:	4937      	ldr	r1, [pc, #220]	; (80051c4 <HAL_GPIO_Init+0x2dc>)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	3302      	adds	r3, #2
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050f4:	4b38      	ldr	r3, [pc, #224]	; (80051d8 <HAL_GPIO_Init+0x2f0>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	4013      	ands	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005118:	4a2f      	ldr	r2, [pc, #188]	; (80051d8 <HAL_GPIO_Init+0x2f0>)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800511e:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <HAL_GPIO_Init+0x2f0>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	43db      	mvns	r3, r3
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4013      	ands	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005142:	4a25      	ldr	r2, [pc, #148]	; (80051d8 <HAL_GPIO_Init+0x2f0>)
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005148:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <HAL_GPIO_Init+0x2f0>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	43db      	mvns	r3, r3
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800516c:	4a1a      	ldr	r2, [pc, #104]	; (80051d8 <HAL_GPIO_Init+0x2f0>)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005172:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_GPIO_Init+0x2f0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	43db      	mvns	r3, r3
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <HAL_GPIO_Init+0x2f0>)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	3301      	adds	r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f47f aea3 	bne.w	8004ef8 <HAL_GPIO_Init+0x10>
  }
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	371c      	adds	r7, #28
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40010000 	.word	0x40010000
 80051c8:	48000400 	.word	0x48000400
 80051cc:	48000800 	.word	0x48000800
 80051d0:	48000c00 	.word	0x48000c00
 80051d4:	48001000 	.word	0x48001000
 80051d8:	40010400 	.word	0x40010400

080051dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e081      	b.n	80052f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fe fd56 	bl	8003cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2224      	movs	r2, #36	; 0x24
 800520c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800522c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800523c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d107      	bne.n	8005256 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005252:	609a      	str	r2, [r3, #8]
 8005254:	e006      	b.n	8005264 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005262:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b02      	cmp	r3, #2
 800526a:	d104      	bne.n	8005276 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005274:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005288:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005298:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	69d9      	ldr	r1, [r3, #28]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1a      	ldr	r2, [r3, #32]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4603      	mov	r3, r0
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	460b      	mov	r3, r1
 8005310:	813b      	strh	r3, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b20      	cmp	r3, #32
 8005320:	f040 80f9 	bne.w	8005516 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_I2C_Mem_Write+0x34>
 800532a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005336:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0ed      	b.n	8005518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_I2C_Mem_Write+0x4e>
 8005346:	2302      	movs	r3, #2
 8005348:	e0e6      	b.n	8005518 <HAL_I2C_Mem_Write+0x21c>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005352:	f7fe fe63 	bl	800401c <HAL_GetTick>
 8005356:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	2319      	movs	r3, #25
 800535e:	2201      	movs	r2, #1
 8005360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fadd 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0d1      	b.n	8005518 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2221      	movs	r2, #33	; 0x21
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2240      	movs	r2, #64	; 0x40
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800539c:	88f8      	ldrh	r0, [r7, #6]
 800539e:	893a      	ldrh	r2, [r7, #8]
 80053a0:	8979      	ldrh	r1, [r7, #10]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	4603      	mov	r3, r0
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f9ed 	bl	800578c <I2C_RequestMemoryWrite>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0a9      	b.n	8005518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2bff      	cmp	r3, #255	; 0xff
 80053cc:	d90e      	bls.n	80053ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	22ff      	movs	r2, #255	; 0xff
 80053d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053d8:	b2da      	uxtb	r2, r3
 80053da:	8979      	ldrh	r1, [r7, #10]
 80053dc:	2300      	movs	r3, #0
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 fc57 	bl	8005c98 <I2C_TransferConfig>
 80053ea:	e00f      	b.n	800540c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	8979      	ldrh	r1, [r7, #10]
 80053fe:	2300      	movs	r3, #0
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fc46 	bl	8005c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fad6 	bl	80059c2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e07b      	b.n	8005518 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d034      	beq.n	80054c4 <HAL_I2C_Mem_Write+0x1c8>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d130      	bne.n	80054c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	2200      	movs	r2, #0
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fa59 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e04d      	b.n	8005518 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2bff      	cmp	r3, #255	; 0xff
 8005484:	d90e      	bls.n	80054a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	22ff      	movs	r2, #255	; 0xff
 800548a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005490:	b2da      	uxtb	r2, r3
 8005492:	8979      	ldrh	r1, [r7, #10]
 8005494:	2300      	movs	r3, #0
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fbfb 	bl	8005c98 <I2C_TransferConfig>
 80054a2:	e00f      	b.n	80054c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	8979      	ldrh	r1, [r7, #10]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fbea 	bl	8005c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d19e      	bne.n	800540c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fabc 	bl	8005a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e01a      	b.n	8005518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2220      	movs	r2, #32
 80054e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6859      	ldr	r1, [r3, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <HAL_I2C_Mem_Write+0x224>)
 80054f6:	400b      	ands	r3, r1
 80054f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	e000      	b.n	8005518 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005516:	2302      	movs	r3, #2
  }
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	fe00e800 	.word	0xfe00e800

08005524 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	4608      	mov	r0, r1
 800552e:	4611      	mov	r1, r2
 8005530:	461a      	mov	r2, r3
 8005532:	4603      	mov	r3, r0
 8005534:	817b      	strh	r3, [r7, #10]
 8005536:	460b      	mov	r3, r1
 8005538:	813b      	strh	r3, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b20      	cmp	r3, #32
 8005548:	f040 80fd 	bne.w	8005746 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_I2C_Mem_Read+0x34>
 8005552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800555e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0f1      	b.n	8005748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <HAL_I2C_Mem_Read+0x4e>
 800556e:	2302      	movs	r3, #2
 8005570:	e0ea      	b.n	8005748 <HAL_I2C_Mem_Read+0x224>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800557a:	f7fe fd4f 	bl	800401c <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	2319      	movs	r3, #25
 8005586:	2201      	movs	r2, #1
 8005588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f9c9 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0d5      	b.n	8005748 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2222      	movs	r2, #34	; 0x22
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2240      	movs	r2, #64	; 0x40
 80055a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80055bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055c4:	88f8      	ldrh	r0, [r7, #6]
 80055c6:	893a      	ldrh	r2, [r7, #8]
 80055c8:	8979      	ldrh	r1, [r7, #10]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	9301      	str	r3, [sp, #4]
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	4603      	mov	r3, r0
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 f92d 	bl	8005834 <I2C_RequestMemoryRead>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0ad      	b.n	8005748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2bff      	cmp	r3, #255	; 0xff
 80055f4:	d90e      	bls.n	8005614 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	22ff      	movs	r2, #255	; 0xff
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005600:	b2da      	uxtb	r2, r3
 8005602:	8979      	ldrh	r1, [r7, #10]
 8005604:	4b52      	ldr	r3, [pc, #328]	; (8005750 <HAL_I2C_Mem_Read+0x22c>)
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fb43 	bl	8005c98 <I2C_TransferConfig>
 8005612:	e00f      	b.n	8005634 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005618:	b29a      	uxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005622:	b2da      	uxtb	r2, r3
 8005624:	8979      	ldrh	r1, [r7, #10]
 8005626:	4b4a      	ldr	r3, [pc, #296]	; (8005750 <HAL_I2C_Mem_Read+0x22c>)
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fb32 	bl	8005c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	2200      	movs	r2, #0
 800563c:	2104      	movs	r1, #4
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f970 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e07c      	b.n	8005748 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005684:	b29b      	uxth	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d034      	beq.n	80056f4 <HAL_I2C_Mem_Read+0x1d0>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d130      	bne.n	80056f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	2200      	movs	r2, #0
 800569a:	2180      	movs	r1, #128	; 0x80
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f941 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e04d      	b.n	8005748 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	2bff      	cmp	r3, #255	; 0xff
 80056b4:	d90e      	bls.n	80056d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	22ff      	movs	r2, #255	; 0xff
 80056ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	8979      	ldrh	r1, [r7, #10]
 80056c4:	2300      	movs	r3, #0
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 fae3 	bl	8005c98 <I2C_TransferConfig>
 80056d2:	e00f      	b.n	80056f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	8979      	ldrh	r1, [r7, #10]
 80056e6:	2300      	movs	r3, #0
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fad2 	bl	8005c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d19a      	bne.n	8005634 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 f9a4 	bl	8005a50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e01a      	b.n	8005748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2220      	movs	r2, #32
 8005718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	4b0b      	ldr	r3, [pc, #44]	; (8005754 <HAL_I2C_Mem_Read+0x230>)
 8005726:	400b      	ands	r3, r1
 8005728:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005746:	2302      	movs	r3, #2
  }
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	80002400 	.word	0x80002400
 8005754:	fe00e800 	.word	0xfe00e800

08005758 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
  }
}
 8005784:	bf00      	nop
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	4608      	mov	r0, r1
 8005796:	4611      	mov	r1, r2
 8005798:	461a      	mov	r2, r3
 800579a:	4603      	mov	r3, r0
 800579c:	817b      	strh	r3, [r7, #10]
 800579e:	460b      	mov	r3, r1
 80057a0:	813b      	strh	r3, [r7, #8]
 80057a2:	4613      	mov	r3, r2
 80057a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	8979      	ldrh	r1, [r7, #10]
 80057ac:	4b20      	ldr	r3, [pc, #128]	; (8005830 <I2C_RequestMemoryWrite+0xa4>)
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fa6f 	bl	8005c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f8ff 	bl	80059c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e02c      	b.n	8005828 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d105      	bne.n	80057e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057d4:	893b      	ldrh	r3, [r7, #8]
 80057d6:	b2da      	uxtb	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	629a      	str	r2, [r3, #40]	; 0x28
 80057de:	e015      	b.n	800580c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057e0:	893b      	ldrh	r3, [r7, #8]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	69b9      	ldr	r1, [r7, #24]
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f8e5 	bl	80059c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e012      	b.n	8005828 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005802:	893b      	ldrh	r3, [r7, #8]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2200      	movs	r2, #0
 8005814:	2180      	movs	r1, #128	; 0x80
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 f884 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	80002000 	.word	0x80002000

08005834 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	4608      	mov	r0, r1
 800583e:	4611      	mov	r1, r2
 8005840:	461a      	mov	r2, r3
 8005842:	4603      	mov	r3, r0
 8005844:	817b      	strh	r3, [r7, #10]
 8005846:	460b      	mov	r3, r1
 8005848:	813b      	strh	r3, [r7, #8]
 800584a:	4613      	mov	r3, r2
 800584c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	8979      	ldrh	r1, [r7, #10]
 8005854:	4b20      	ldr	r3, [pc, #128]	; (80058d8 <I2C_RequestMemoryRead+0xa4>)
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	2300      	movs	r3, #0
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fa1c 	bl	8005c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	69b9      	ldr	r1, [r7, #24]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f8ac 	bl	80059c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e02c      	b.n	80058ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d105      	bne.n	8005886 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800587a:	893b      	ldrh	r3, [r7, #8]
 800587c:	b2da      	uxtb	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	629a      	str	r2, [r3, #40]	; 0x28
 8005884:	e015      	b.n	80058b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005886:	893b      	ldrh	r3, [r7, #8]
 8005888:	0a1b      	lsrs	r3, r3, #8
 800588a:	b29b      	uxth	r3, r3
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f892 	bl	80059c2 <I2C_WaitOnTXISFlagUntilTimeout>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d001      	beq.n	80058a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e012      	b.n	80058ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80058a8:	893b      	ldrh	r3, [r7, #8]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2200      	movs	r2, #0
 80058ba:	2140      	movs	r1, #64	; 0x40
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f000 f831 	bl	8005924 <I2C_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	80002000 	.word	0x80002000

080058dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d103      	bne.n	80058fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2200      	movs	r2, #0
 80058f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d007      	beq.n	8005918 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	619a      	str	r2, [r3, #24]
  }
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	603b      	str	r3, [r7, #0]
 8005930:	4613      	mov	r3, r2
 8005932:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005934:	e031      	b.n	800599a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800593c:	d02d      	beq.n	800599a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800593e:	f7fe fb6d 	bl	800401c <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d122      	bne.n	800599a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	429a      	cmp	r2, r3
 8005970:	d113      	bne.n	800599a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	f043 0220 	orr.w	r2, r3, #32
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e00f      	b.n	80059ba <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4013      	ands	r3, r2
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	bf0c      	ite	eq
 80059aa:	2301      	moveq	r3, #1
 80059ac:	2300      	movne	r3, #0
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d0be      	beq.n	8005936 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059ce:	e033      	b.n	8005a38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f87f 	bl	8005ad8 <I2C_IsErrorOccurred>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e031      	b.n	8005a48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ea:	d025      	beq.n	8005a38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ec:	f7fe fb16 	bl	800401c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d11a      	bne.n	8005a38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d013      	beq.n	8005a38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e007      	b.n	8005a48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d1c4      	bne.n	80059d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a5c:	e02f      	b.n	8005abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f838 	bl	8005ad8 <I2C_IsErrorOccurred>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e02d      	b.n	8005ace <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a72:	f7fe fad3 	bl	800401c <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d302      	bcc.n	8005a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d11a      	bne.n	8005abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b20      	cmp	r3, #32
 8005a94:	d013      	beq.n	8005abe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a9a:	f043 0220 	orr.w	r2, r3, #32
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e007      	b.n	8005ace <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d1c8      	bne.n	8005a5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d068      	beq.n	8005bd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b0c:	e049      	b.n	8005ba2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b14:	d045      	beq.n	8005ba2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b16:	f7fe fa81 	bl	800401c <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d302      	bcc.n	8005b2c <I2C_IsErrorOccurred+0x54>
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d13a      	bne.n	8005ba2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4e:	d121      	bne.n	8005b94 <I2C_IsErrorOccurred+0xbc>
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b56:	d01d      	beq.n	8005b94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b58:	7cfb      	ldrb	r3, [r7, #19]
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d01a      	beq.n	8005b94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b6e:	f7fe fa55 	bl	800401c <HAL_GetTick>
 8005b72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b74:	e00e      	b.n	8005b94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b76:	f7fe fa51 	bl	800401c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b19      	cmp	r3, #25
 8005b82:	d907      	bls.n	8005b94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f043 0320 	orr.w	r3, r3, #32
 8005b8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005b92:	e006      	b.n	8005ba2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d1e9      	bne.n	8005b76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d003      	beq.n	8005bb8 <I2C_IsErrorOccurred+0xe0>
 8005bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0aa      	beq.n	8005b0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d103      	bne.n	8005bc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	f043 0304 	orr.w	r3, r3, #4
 8005bce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00b      	beq.n	8005c00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	f043 0308 	orr.w	r3, r3, #8
 8005c10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f043 0302 	orr.w	r3, r3, #2
 8005c32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01c      	beq.n	8005c86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7ff fe45 	bl	80058dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6859      	ldr	r1, [r3, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <I2C_IsErrorOccurred+0x1bc>)
 8005c5e:	400b      	ands	r3, r1
 8005c60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3728      	adds	r7, #40	; 0x28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	fe00e800 	.word	0xfe00e800

08005c98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	817b      	strh	r3, [r7, #10]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005caa:	897b      	ldrh	r3, [r7, #10]
 8005cac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cb0:	7a7b      	ldrb	r3, [r7, #9]
 8005cb2:	041b      	lsls	r3, r3, #16
 8005cb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	0d5b      	lsrs	r3, r3, #21
 8005cd2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <I2C_TransferConfig+0x60>)
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	ea02 0103 	and.w	r1, r2, r3
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	03ff63ff 	.word	0x03ff63ff

08005cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b20      	cmp	r3, #32
 8005d10:	d138      	bne.n	8005d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e032      	b.n	8005d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2224      	movs	r2, #36	; 0x24
 8005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6819      	ldr	r1, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2220      	movs	r2, #32
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d139      	bne.n	8005e1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d101      	bne.n	8005db6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e033      	b.n	8005e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2224      	movs	r2, #36	; 0x24
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005de4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e000      	b.n	8005e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005e1c:	2302      	movs	r3, #2
  }
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e3c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f001 b823 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 817d 	beq.w	8006162 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005e68:	4bbc      	ldr	r3, [pc, #752]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f003 030c 	and.w	r3, r3, #12
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d00c      	beq.n	8005e8e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e74:	4bb9      	ldr	r3, [pc, #740]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f003 030c 	and.w	r3, r3, #12
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d15c      	bne.n	8005f3a <HAL_RCC_OscConfig+0x10e>
 8005e80:	4bb6      	ldr	r3, [pc, #728]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8c:	d155      	bne.n	8005f3a <HAL_RCC_OscConfig+0x10e>
 8005e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e92:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005e9a:	fa93 f3a3 	rbit	r3, r3
 8005e9e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ea2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea6:	fab3 f383 	clz	r3, r3
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	f043 0301 	orr.w	r3, r3, #1
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d102      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x94>
 8005eba:	4ba8      	ldr	r3, [pc, #672]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	e015      	b.n	8005eec <HAL_RCC_OscConfig+0xc0>
 8005ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ec4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005ecc:	fa93 f3a3 	rbit	r3, r3
 8005ed0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ed8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005edc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005ee0:	fa93 f3a3 	rbit	r3, r3
 8005ee4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005ee8:	4b9c      	ldr	r3, [pc, #624]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ef0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005ef4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005ef8:	fa92 f2a2 	rbit	r2, r2
 8005efc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005f00:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005f04:	fab2 f282 	clz	r2, r2
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	f042 0220 	orr.w	r2, r2, #32
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	f002 021f 	and.w	r2, r2, #31
 8005f14:	2101      	movs	r1, #1
 8005f16:	fa01 f202 	lsl.w	r2, r1, r2
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 811f 	beq.w	8006160 <HAL_RCC_OscConfig+0x334>
 8005f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 8116 	bne.w	8006160 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	f000 bfaf 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4a:	d106      	bne.n	8005f5a <HAL_RCC_OscConfig+0x12e>
 8005f4c:	4b83      	ldr	r3, [pc, #524]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a82      	ldr	r2, [pc, #520]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	e036      	b.n	8005fc8 <HAL_RCC_OscConfig+0x19c>
 8005f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x158>
 8005f6a:	4b7c      	ldr	r3, [pc, #496]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a7b      	ldr	r2, [pc, #492]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	4b79      	ldr	r3, [pc, #484]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a78      	ldr	r2, [pc, #480]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e021      	b.n	8005fc8 <HAL_RCC_OscConfig+0x19c>
 8005f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f94:	d10c      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x184>
 8005f96:	4b71      	ldr	r3, [pc, #452]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a70      	ldr	r2, [pc, #448]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	4b6e      	ldr	r3, [pc, #440]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a6d      	ldr	r2, [pc, #436]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	e00b      	b.n	8005fc8 <HAL_RCC_OscConfig+0x19c>
 8005fb0:	4b6a      	ldr	r3, [pc, #424]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a69      	ldr	r2, [pc, #420]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	4b67      	ldr	r3, [pc, #412]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a66      	ldr	r2, [pc, #408]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005fc8:	4b64      	ldr	r3, [pc, #400]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	f023 020f 	bic.w	r2, r3, #15
 8005fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	495f      	ldr	r1, [pc, #380]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d059      	beq.n	80060a6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff2:	f7fe f813 	bl	800401c <HAL_GetTick>
 8005ff6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ffa:	e00a      	b.n	8006012 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ffc:	f7fe f80e 	bl	800401c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b64      	cmp	r3, #100	; 0x64
 800600a:	d902      	bls.n	8006012 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	f000 bf43 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>
 8006012:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006016:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800601e:	fa93 f3a3 	rbit	r3, r3
 8006022:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8006026:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602a:	fab3 f383 	clz	r3, r3
 800602e:	b2db      	uxtb	r3, r3
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f043 0301 	orr.w	r3, r3, #1
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	d102      	bne.n	8006044 <HAL_RCC_OscConfig+0x218>
 800603e:	4b47      	ldr	r3, [pc, #284]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	e015      	b.n	8006070 <HAL_RCC_OscConfig+0x244>
 8006044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006048:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800604c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006050:	fa93 f3a3 	rbit	r3, r3
 8006054:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800605c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006060:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006064:	fa93 f3a3 	rbit	r3, r3
 8006068:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800606c:	4b3b      	ldr	r3, [pc, #236]	; (800615c <HAL_RCC_OscConfig+0x330>)
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006074:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006078:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800607c:	fa92 f2a2 	rbit	r2, r2
 8006080:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006084:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006088:	fab2 f282 	clz	r2, r2
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	f042 0220 	orr.w	r2, r2, #32
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	f002 021f 	and.w	r2, r2, #31
 8006098:	2101      	movs	r1, #1
 800609a:	fa01 f202 	lsl.w	r2, r1, r2
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ab      	beq.n	8005ffc <HAL_RCC_OscConfig+0x1d0>
 80060a4:	e05d      	b.n	8006162 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a6:	f7fd ffb9 	bl	800401c <HAL_GetTick>
 80060aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ae:	e00a      	b.n	80060c6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b0:	f7fd ffb4 	bl	800401c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b64      	cmp	r3, #100	; 0x64
 80060be:	d902      	bls.n	80060c6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	f000 bee9 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>
 80060c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ce:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80060d2:	fa93 f3a3 	rbit	r3, r3
 80060d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80060da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060de:	fab3 f383 	clz	r3, r3
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d102      	bne.n	80060f8 <HAL_RCC_OscConfig+0x2cc>
 80060f2:	4b1a      	ldr	r3, [pc, #104]	; (800615c <HAL_RCC_OscConfig+0x330>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	e015      	b.n	8006124 <HAL_RCC_OscConfig+0x2f8>
 80060f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060fc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8006104:	fa93 f3a3 	rbit	r3, r3
 8006108:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800610c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006110:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006114:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8006118:	fa93 f3a3 	rbit	r3, r3
 800611c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8006120:	4b0e      	ldr	r3, [pc, #56]	; (800615c <HAL_RCC_OscConfig+0x330>)
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006128:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800612c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006130:	fa92 f2a2 	rbit	r2, r2
 8006134:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8006138:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800613c:	fab2 f282 	clz	r2, r2
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	f042 0220 	orr.w	r2, r2, #32
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	f002 021f 	and.w	r2, r2, #31
 800614c:	2101      	movs	r1, #1
 800614e:	fa01 f202 	lsl.w	r2, r1, r2
 8006152:	4013      	ands	r3, r2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ab      	bne.n	80060b0 <HAL_RCC_OscConfig+0x284>
 8006158:	e003      	b.n	8006162 <HAL_RCC_OscConfig+0x336>
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 817d 	beq.w	8006472 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006178:	4ba6      	ldr	r3, [pc, #664]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 030c 	and.w	r3, r3, #12
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00b      	beq.n	800619c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006184:	4ba3      	ldr	r3, [pc, #652]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 030c 	and.w	r3, r3, #12
 800618c:	2b08      	cmp	r3, #8
 800618e:	d172      	bne.n	8006276 <HAL_RCC_OscConfig+0x44a>
 8006190:	4ba0      	ldr	r3, [pc, #640]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d16c      	bne.n	8006276 <HAL_RCC_OscConfig+0x44a>
 800619c:	2302      	movs	r3, #2
 800619e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80061a6:	fa93 f3a3 	rbit	r3, r3
 80061aa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80061ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	095b      	lsrs	r3, r3, #5
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d102      	bne.n	80061cc <HAL_RCC_OscConfig+0x3a0>
 80061c6:	4b93      	ldr	r3, [pc, #588]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	e013      	b.n	80061f4 <HAL_RCC_OscConfig+0x3c8>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80061d6:	fa93 f3a3 	rbit	r3, r3
 80061da:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80061de:	2302      	movs	r3, #2
 80061e0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80061e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80061e8:	fa93 f3a3 	rbit	r3, r3
 80061ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80061f0:	4b88      	ldr	r3, [pc, #544]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2202      	movs	r2, #2
 80061f6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80061fa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80061fe:	fa92 f2a2 	rbit	r2, r2
 8006202:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8006206:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800620a:	fab2 f282 	clz	r2, r2
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	f042 0220 	orr.w	r2, r2, #32
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	f002 021f 	and.w	r2, r2, #31
 800621a:	2101      	movs	r1, #1
 800621c:	fa01 f202 	lsl.w	r2, r1, r2
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <HAL_RCC_OscConfig+0x410>
 8006226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800622a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d002      	beq.n	800623c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f000 be2e 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800623c:	4b75      	ldr	r3, [pc, #468]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006248:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	21f8      	movs	r1, #248	; 0xf8
 8006252:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006256:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800625a:	fa91 f1a1 	rbit	r1, r1
 800625e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8006262:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006266:	fab1 f181 	clz	r1, r1
 800626a:	b2c9      	uxtb	r1, r1
 800626c:	408b      	lsls	r3, r1
 800626e:	4969      	ldr	r1, [pc, #420]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 8006270:	4313      	orrs	r3, r2
 8006272:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006274:	e0fd      	b.n	8006472 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800627a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8088 	beq.w	8006398 <HAL_RCC_OscConfig+0x56c>
 8006288:	2301      	movs	r3, #1
 800628a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8006292:	fa93 f3a3 	rbit	r3, r3
 8006296:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800629a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800629e:	fab3 f383 	clz	r3, r3
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	461a      	mov	r2, r3
 80062b0:	2301      	movs	r3, #1
 80062b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b4:	f7fd feb2 	bl	800401c <HAL_GetTick>
 80062b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062bc:	e00a      	b.n	80062d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062be:	f7fd fead 	bl	800401c <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d902      	bls.n	80062d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	f000 bde2 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>
 80062d4:	2302      	movs	r3, #2
 80062d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80062de:	fa93 f3a3 	rbit	r3, r3
 80062e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80062e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ea:	fab3 f383 	clz	r3, r3
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d102      	bne.n	8006304 <HAL_RCC_OscConfig+0x4d8>
 80062fe:	4b45      	ldr	r3, [pc, #276]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	e013      	b.n	800632c <HAL_RCC_OscConfig+0x500>
 8006304:	2302      	movs	r3, #2
 8006306:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800630e:	fa93 f3a3 	rbit	r3, r3
 8006312:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006316:	2302      	movs	r3, #2
 8006318:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800631c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006320:	fa93 f3a3 	rbit	r3, r3
 8006324:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8006328:	4b3a      	ldr	r3, [pc, #232]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	2202      	movs	r2, #2
 800632e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8006332:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006336:	fa92 f2a2 	rbit	r2, r2
 800633a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800633e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006342:	fab2 f282 	clz	r2, r2
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	f042 0220 	orr.w	r2, r2, #32
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	f002 021f 	and.w	r2, r2, #31
 8006352:	2101      	movs	r1, #1
 8006354:	fa01 f202 	lsl.w	r2, r1, r2
 8006358:	4013      	ands	r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0af      	beq.n	80062be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635e:	4b2d      	ldr	r3, [pc, #180]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800636a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	21f8      	movs	r1, #248	; 0xf8
 8006374:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006378:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800637c:	fa91 f1a1 	rbit	r1, r1
 8006380:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006384:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006388:	fab1 f181 	clz	r1, r1
 800638c:	b2c9      	uxtb	r1, r1
 800638e:	408b      	lsls	r3, r1
 8006390:	4920      	ldr	r1, [pc, #128]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 8006392:	4313      	orrs	r3, r2
 8006394:	600b      	str	r3, [r1, #0]
 8006396:	e06c      	b.n	8006472 <HAL_RCC_OscConfig+0x646>
 8006398:	2301      	movs	r3, #1
 800639a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80063aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ae:	fab3 f383 	clz	r3, r3
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80063b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	461a      	mov	r2, r3
 80063c0:	2300      	movs	r3, #0
 80063c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c4:	f7fd fe2a 	bl	800401c <HAL_GetTick>
 80063c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063cc:	e00a      	b.n	80063e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ce:	f7fd fe25 	bl	800401c <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d902      	bls.n	80063e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	f000 bd5a 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>
 80063e4:	2302      	movs	r3, #2
 80063e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80063f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063fa:	fab3 f383 	clz	r3, r3
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	095b      	lsrs	r3, r3, #5
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f043 0301 	orr.w	r3, r3, #1
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	d104      	bne.n	8006418 <HAL_RCC_OscConfig+0x5ec>
 800640e:	4b01      	ldr	r3, [pc, #4]	; (8006414 <HAL_RCC_OscConfig+0x5e8>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	e015      	b.n	8006440 <HAL_RCC_OscConfig+0x614>
 8006414:	40021000 	.word	0x40021000
 8006418:	2302      	movs	r3, #2
 800641a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006422:	fa93 f3a3 	rbit	r3, r3
 8006426:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800642a:	2302      	movs	r3, #2
 800642c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006430:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006434:	fa93 f3a3 	rbit	r3, r3
 8006438:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800643c:	4bc8      	ldr	r3, [pc, #800]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2202      	movs	r2, #2
 8006442:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8006446:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800644a:	fa92 f2a2 	rbit	r2, r2
 800644e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8006452:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006456:	fab2 f282 	clz	r2, r2
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	f042 0220 	orr.w	r2, r2, #32
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	f002 021f 	and.w	r2, r2, #31
 8006466:	2101      	movs	r1, #1
 8006468:	fa01 f202 	lsl.w	r2, r1, r2
 800646c:	4013      	ands	r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1ad      	bne.n	80063ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 8110 	beq.w	80066a8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800648c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d079      	beq.n	800658c <HAL_RCC_OscConfig+0x760>
 8006498:	2301      	movs	r3, #1
 800649a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80064a2:	fa93 f3a3 	rbit	r3, r3
 80064a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80064aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064ae:	fab3 f383 	clz	r3, r3
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	461a      	mov	r2, r3
 80064b6:	4bab      	ldr	r3, [pc, #684]	; (8006764 <HAL_RCC_OscConfig+0x938>)
 80064b8:	4413      	add	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	461a      	mov	r2, r3
 80064be:	2301      	movs	r3, #1
 80064c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c2:	f7fd fdab 	bl	800401c <HAL_GetTick>
 80064c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ca:	e00a      	b.n	80064e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064cc:	f7fd fda6 	bl	800401c <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d902      	bls.n	80064e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	f000 bcdb 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>
 80064e2:	2302      	movs	r3, #2
 80064e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064ec:	fa93 f3a3 	rbit	r3, r3
 80064f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80064fc:	2202      	movs	r2, #2
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006504:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	fa93 f2a3 	rbit	r2, r3
 800650e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006512:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800651c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006520:	2202      	movs	r2, #2
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	fa93 f2a3 	rbit	r2, r3
 8006532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006536:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800653a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800653c:	4b88      	ldr	r3, [pc, #544]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 800653e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006544:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006548:	2102      	movs	r1, #2
 800654a:	6019      	str	r1, [r3, #0]
 800654c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006550:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	fa93 f1a3 	rbit	r1, r3
 800655a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800655e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006562:	6019      	str	r1, [r3, #0]
  return result;
 8006564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006568:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	fab3 f383 	clz	r3, r3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2101      	movs	r1, #1
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	4013      	ands	r3, r2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0a0      	beq.n	80064cc <HAL_RCC_OscConfig+0x6a0>
 800658a:	e08d      	b.n	80066a8 <HAL_RCC_OscConfig+0x87c>
 800658c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006590:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800659c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	fa93 f2a3 	rbit	r2, r3
 80065a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065ae:	601a      	str	r2, [r3, #0]
  return result;
 80065b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80065b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065ba:	fab3 f383 	clz	r3, r3
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	461a      	mov	r2, r3
 80065c2:	4b68      	ldr	r3, [pc, #416]	; (8006764 <HAL_RCC_OscConfig+0x938>)
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	461a      	mov	r2, r3
 80065ca:	2300      	movs	r3, #0
 80065cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ce:	f7fd fd25 	bl	800401c <HAL_GetTick>
 80065d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d6:	e00a      	b.n	80065ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d8:	f7fd fd20 	bl	800401c <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d902      	bls.n	80065ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	f000 bc55 	b.w	8006e98 <HAL_RCC_OscConfig+0x106c>
 80065ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80065f6:	2202      	movs	r2, #2
 80065f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	fa93 f2a3 	rbit	r2, r3
 8006608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800660c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006616:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800661a:	2202      	movs	r2, #2
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006622:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	fa93 f2a3 	rbit	r2, r3
 800662c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006630:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800663a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800663e:	2202      	movs	r2, #2
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	fa93 f2a3 	rbit	r2, r3
 8006650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006654:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006658:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800665a:	4b41      	ldr	r3, [pc, #260]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 800665c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800665e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006662:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006666:	2102      	movs	r1, #2
 8006668:	6019      	str	r1, [r3, #0]
 800666a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800666e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	fa93 f1a3 	rbit	r1, r3
 8006678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800667c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006680:	6019      	str	r1, [r3, #0]
  return result;
 8006682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006686:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	fab3 f383 	clz	r3, r3
 8006690:	b2db      	uxtb	r3, r3
 8006692:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f003 031f 	and.w	r3, r3, #31
 800669c:	2101      	movs	r1, #1
 800669e:	fa01 f303 	lsl.w	r3, r1, r3
 80066a2:	4013      	ands	r3, r2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d197      	bne.n	80065d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 81a1 	beq.w	8006a00 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066c4:	4b26      	ldr	r3, [pc, #152]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d116      	bne.n	80066fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d0:	4b23      	ldr	r3, [pc, #140]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	4a22      	ldr	r2, [pc, #136]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 80066d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066da:	61d3      	str	r3, [r2, #28]
 80066dc:	4b20      	ldr	r3, [pc, #128]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80066e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066e8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066f2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80066f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066fe:	4b1a      	ldr	r3, [pc, #104]	; (8006768 <HAL_RCC_OscConfig+0x93c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11a      	bne.n	8006740 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800670a:	4b17      	ldr	r3, [pc, #92]	; (8006768 <HAL_RCC_OscConfig+0x93c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a16      	ldr	r2, [pc, #88]	; (8006768 <HAL_RCC_OscConfig+0x93c>)
 8006710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006714:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006716:	f7fd fc81 	bl	800401c <HAL_GetTick>
 800671a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671e:	e009      	b.n	8006734 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006720:	f7fd fc7c 	bl	800401c <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b64      	cmp	r3, #100	; 0x64
 800672e:	d901      	bls.n	8006734 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e3b1      	b.n	8006e98 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <HAL_RCC_OscConfig+0x93c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0ef      	beq.n	8006720 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006744:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d10d      	bne.n	800676c <HAL_RCC_OscConfig+0x940>
 8006750:	4b03      	ldr	r3, [pc, #12]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	4a02      	ldr	r2, [pc, #8]	; (8006760 <HAL_RCC_OscConfig+0x934>)
 8006756:	f043 0301 	orr.w	r3, r3, #1
 800675a:	6213      	str	r3, [r2, #32]
 800675c:	e03c      	b.n	80067d8 <HAL_RCC_OscConfig+0x9ac>
 800675e:	bf00      	nop
 8006760:	40021000 	.word	0x40021000
 8006764:	10908120 	.word	0x10908120
 8006768:	40007000 	.word	0x40007000
 800676c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10c      	bne.n	8006796 <HAL_RCC_OscConfig+0x96a>
 800677c:	4bc1      	ldr	r3, [pc, #772]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	4ac0      	ldr	r2, [pc, #768]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 8006782:	f023 0301 	bic.w	r3, r3, #1
 8006786:	6213      	str	r3, [r2, #32]
 8006788:	4bbe      	ldr	r3, [pc, #760]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	4abd      	ldr	r2, [pc, #756]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 800678e:	f023 0304 	bic.w	r3, r3, #4
 8006792:	6213      	str	r3, [r2, #32]
 8006794:	e020      	b.n	80067d8 <HAL_RCC_OscConfig+0x9ac>
 8006796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800679a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0x994>
 80067a6:	4bb7      	ldr	r3, [pc, #732]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4ab6      	ldr	r2, [pc, #728]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80067ac:	f043 0304 	orr.w	r3, r3, #4
 80067b0:	6213      	str	r3, [r2, #32]
 80067b2:	4bb4      	ldr	r3, [pc, #720]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	4ab3      	ldr	r2, [pc, #716]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80067b8:	f043 0301 	orr.w	r3, r3, #1
 80067bc:	6213      	str	r3, [r2, #32]
 80067be:	e00b      	b.n	80067d8 <HAL_RCC_OscConfig+0x9ac>
 80067c0:	4bb0      	ldr	r3, [pc, #704]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	4aaf      	ldr	r2, [pc, #700]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	6213      	str	r3, [r2, #32]
 80067cc:	4bad      	ldr	r3, [pc, #692]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	4aac      	ldr	r2, [pc, #688]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80067d2:	f023 0304 	bic.w	r3, r3, #4
 80067d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8081 	beq.w	80068ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ea:	f7fd fc17 	bl	800401c <HAL_GetTick>
 80067ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f2:	e00b      	b.n	800680c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067f4:	f7fd fc12 	bl	800401c <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	f241 3288 	movw	r2, #5000	; 0x1388
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e345      	b.n	8006e98 <HAL_RCC_OscConfig+0x106c>
 800680c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006810:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006814:	2202      	movs	r2, #2
 8006816:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006818:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800681c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	fa93 f2a3 	rbit	r2, r3
 8006826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800682a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006834:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006838:	2202      	movs	r2, #2
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006840:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	fa93 f2a3 	rbit	r2, r3
 800684a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800684e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006852:	601a      	str	r2, [r3, #0]
  return result;
 8006854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006858:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800685c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800685e:	fab3 f383 	clz	r3, r3
 8006862:	b2db      	uxtb	r3, r3
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f043 0302 	orr.w	r3, r3, #2
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b02      	cmp	r3, #2
 8006870:	d102      	bne.n	8006878 <HAL_RCC_OscConfig+0xa4c>
 8006872:	4b84      	ldr	r3, [pc, #528]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	e013      	b.n	80068a0 <HAL_RCC_OscConfig+0xa74>
 8006878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800687c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006880:	2202      	movs	r2, #2
 8006882:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006888:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	fa93 f2a3 	rbit	r2, r3
 8006892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006896:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	4b79      	ldr	r3, [pc, #484]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80068a8:	2102      	movs	r1, #2
 80068aa:	6011      	str	r1, [r2, #0]
 80068ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	fa92 f1a2 	rbit	r1, r2
 80068ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80068c2:	6011      	str	r1, [r2, #0]
  return result;
 80068c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80068c8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	fab2 f282 	clz	r2, r2
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	f002 021f 	and.w	r2, r2, #31
 80068de:	2101      	movs	r1, #1
 80068e0:	fa01 f202 	lsl.w	r2, r1, r2
 80068e4:	4013      	ands	r3, r2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d084      	beq.n	80067f4 <HAL_RCC_OscConfig+0x9c8>
 80068ea:	e07f      	b.n	80069ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ec:	f7fd fb96 	bl	800401c <HAL_GetTick>
 80068f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f4:	e00b      	b.n	800690e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f6:	f7fd fb91 	bl	800401c <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	f241 3288 	movw	r2, #5000	; 0x1388
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e2c4      	b.n	8006e98 <HAL_RCC_OscConfig+0x106c>
 800690e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006912:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006916:	2202      	movs	r2, #2
 8006918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800691a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800691e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	fa93 f2a3 	rbit	r2, r3
 8006928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800692c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006936:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800693a:	2202      	movs	r2, #2
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006942:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	fa93 f2a3 	rbit	r2, r3
 800694c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006950:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006954:	601a      	str	r2, [r3, #0]
  return result;
 8006956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800695a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800695e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006960:	fab3 f383 	clz	r3, r3
 8006964:	b2db      	uxtb	r3, r3
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f043 0302 	orr.w	r3, r3, #2
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d102      	bne.n	800697a <HAL_RCC_OscConfig+0xb4e>
 8006974:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	e013      	b.n	80069a2 <HAL_RCC_OscConfig+0xb76>
 800697a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800697e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006982:	2202      	movs	r2, #2
 8006984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800698a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	fa93 f2a3 	rbit	r2, r3
 8006994:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006998:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80069a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80069aa:	2102      	movs	r1, #2
 80069ac:	6011      	str	r1, [r2, #0]
 80069ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80069b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80069b6:	6812      	ldr	r2, [r2, #0]
 80069b8:	fa92 f1a2 	rbit	r1, r2
 80069bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80069c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80069c4:	6011      	str	r1, [r2, #0]
  return result;
 80069c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80069ca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	fab2 f282 	clz	r2, r2
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	f002 021f 	and.w	r2, r2, #31
 80069e0:	2101      	movs	r1, #1
 80069e2:	fa01 f202 	lsl.w	r2, r1, r2
 80069e6:	4013      	ands	r3, r2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d184      	bne.n	80068f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f4:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	4a22      	ldr	r2, [pc, #136]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a04:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8242 	beq.w	8006e96 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a12:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <HAL_RCC_OscConfig+0xc58>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	f000 8213 	beq.w	8006e46 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	f040 8162 	bne.w	8006cf6 <HAL_RCC_OscConfig+0xeca>
 8006a32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a36:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006a3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a44:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	fa93 f2a3 	rbit	r2, r3
 8006a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a52:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006a56:	601a      	str	r2, [r3, #0]
  return result;
 8006a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a5c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006a60:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a62:	fab3 f383 	clz	r3, r3
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	461a      	mov	r2, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a78:	f7fd fad0 	bl	800401c <HAL_GetTick>
 8006a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a80:	e00c      	b.n	8006a9c <HAL_RCC_OscConfig+0xc70>
 8006a82:	bf00      	nop
 8006a84:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fd fac8 	bl	800401c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e1fd      	b.n	8006e98 <HAL_RCC_OscConfig+0x106c>
 8006a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aa0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006aa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	fa93 f2a3 	rbit	r2, r3
 8006ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006abc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006ac0:	601a      	str	r2, [r3, #0]
  return result;
 8006ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ac6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006aca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006acc:	fab3 f383 	clz	r3, r3
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d102      	bne.n	8006ae6 <HAL_RCC_OscConfig+0xcba>
 8006ae0:	4bb0      	ldr	r3, [pc, #704]	; (8006da4 <HAL_RCC_OscConfig+0xf78>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	e027      	b.n	8006b36 <HAL_RCC_OscConfig+0xd0a>
 8006ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006aee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006af2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006af8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	fa93 f2a3 	rbit	r2, r3
 8006b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b06:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b10:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b1e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	fa93 f2a3 	rbit	r2, r3
 8006b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	4b9c      	ldr	r3, [pc, #624]	; (8006da4 <HAL_RCC_OscConfig+0xf78>)
 8006b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b3a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006b3e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006b42:	6011      	str	r1, [r2, #0]
 8006b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b48:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	fa92 f1a2 	rbit	r1, r2
 8006b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b56:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006b5a:	6011      	str	r1, [r2, #0]
  return result;
 8006b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b60:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	fab2 f282 	clz	r2, r2
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	f042 0220 	orr.w	r2, r2, #32
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	f002 021f 	and.w	r2, r2, #31
 8006b76:	2101      	movs	r1, #1
 8006b78:	fa01 f202 	lsl.w	r2, r1, r2
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d182      	bne.n	8006a88 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b82:	4b88      	ldr	r3, [pc, #544]	; (8006da4 <HAL_RCC_OscConfig+0xf78>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	497f      	ldr	r1, [pc, #508]	; (8006da4 <HAL_RCC_OscConfig+0xf78>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	604b      	str	r3, [r1, #4]
 8006baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006bb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bbc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	fa93 f2a3 	rbit	r2, r3
 8006bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006bce:	601a      	str	r2, [r3, #0]
  return result;
 8006bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bd4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006bd8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bda:	fab3 f383 	clz	r3, r3
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006be4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	461a      	mov	r2, r3
 8006bec:	2301      	movs	r3, #1
 8006bee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf0:	f7fd fa14 	bl	800401c <HAL_GetTick>
 8006bf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bf8:	e009      	b.n	8006c0e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bfa:	f7fd fa0f 	bl	800401c <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e144      	b.n	8006e98 <HAL_RCC_OscConfig+0x106c>
 8006c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c12:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c20:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	fa93 f2a3 	rbit	r2, r3
 8006c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006c32:	601a      	str	r2, [r3, #0]
  return result;
 8006c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006c3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c3e:	fab3 f383 	clz	r3, r3
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	095b      	lsrs	r3, r3, #5
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d102      	bne.n	8006c58 <HAL_RCC_OscConfig+0xe2c>
 8006c52:	4b54      	ldr	r3, [pc, #336]	; (8006da4 <HAL_RCC_OscConfig+0xf78>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	e027      	b.n	8006ca8 <HAL_RCC_OscConfig+0xe7c>
 8006c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c5c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006c60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c6a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	fa93 f2a3 	rbit	r2, r3
 8006c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c78:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c82:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006c86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c90:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	fa93 f2a3 	rbit	r2, r3
 8006c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c9e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	4b3f      	ldr	r3, [pc, #252]	; (8006da4 <HAL_RCC_OscConfig+0xf78>)
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006cb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006cb4:	6011      	str	r1, [r2, #0]
 8006cb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006cbe:	6812      	ldr	r2, [r2, #0]
 8006cc0:	fa92 f1a2 	rbit	r1, r2
 8006cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cc8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006ccc:	6011      	str	r1, [r2, #0]
  return result;
 8006cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006cd2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	fab2 f282 	clz	r2, r2
 8006cdc:	b2d2      	uxtb	r2, r2
 8006cde:	f042 0220 	orr.w	r2, r2, #32
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	f002 021f 	and.w	r2, r2, #31
 8006ce8:	2101      	movs	r1, #1
 8006cea:	fa01 f202 	lsl.w	r2, r1, r2
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d082      	beq.n	8006bfa <HAL_RCC_OscConfig+0xdce>
 8006cf4:	e0cf      	b.n	8006e96 <HAL_RCC_OscConfig+0x106a>
 8006cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cfa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006cfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d08:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	fa93 f2a3 	rbit	r2, r3
 8006d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006d1a:	601a      	str	r2, [r3, #0]
  return result;
 8006d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d20:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006d24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d26:	fab3 f383 	clz	r3, r3
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	461a      	mov	r2, r3
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d3c:	f7fd f96e 	bl	800401c <HAL_GetTick>
 8006d40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d44:	e009      	b.n	8006d5a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d46:	f7fd f969 	bl	800401c <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e09e      	b.n	8006e98 <HAL_RCC_OscConfig+0x106c>
 8006d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d5e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006d62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d6c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	fa93 f2a3 	rbit	r2, r3
 8006d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d7a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006d7e:	601a      	str	r2, [r3, #0]
  return result;
 8006d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d84:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006d88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d8a:	fab3 f383 	clz	r3, r3
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	f043 0301 	orr.w	r3, r3, #1
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d104      	bne.n	8006da8 <HAL_RCC_OscConfig+0xf7c>
 8006d9e:	4b01      	ldr	r3, [pc, #4]	; (8006da4 <HAL_RCC_OscConfig+0xf78>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	e029      	b.n	8006df8 <HAL_RCC_OscConfig+0xfcc>
 8006da4:	40021000 	.word	0x40021000
 8006da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	fa93 f2a3 	rbit	r2, r3
 8006dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dc8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dd2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006dd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006de0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	fa93 f2a3 	rbit	r2, r3
 8006dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	4b2b      	ldr	r3, [pc, #172]	; (8006ea4 <HAL_RCC_OscConfig+0x1078>)
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006dfc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006e00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006e04:	6011      	str	r1, [r2, #0]
 8006e06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e0a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	fa92 f1a2 	rbit	r1, r2
 8006e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e18:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006e1c:	6011      	str	r1, [r2, #0]
  return result;
 8006e1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e22:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006e26:	6812      	ldr	r2, [r2, #0]
 8006e28:	fab2 f282 	clz	r2, r2
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	f042 0220 	orr.w	r2, r2, #32
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	f002 021f 	and.w	r2, r2, #31
 8006e38:	2101      	movs	r1, #1
 8006e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d180      	bne.n	8006d46 <HAL_RCC_OscConfig+0xf1a>
 8006e44:	e027      	b.n	8006e96 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e01e      	b.n	8006e98 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e5a:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <HAL_RCC_OscConfig+0x1078>)
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006e66:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d10b      	bne.n	8006e92 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006e7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40021000 	.word	0x40021000

08006ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b09e      	sub	sp, #120	; 0x78
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d101      	bne.n	8006ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e162      	b.n	8007186 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ec0:	4b90      	ldr	r3, [pc, #576]	; (8007104 <HAL_RCC_ClockConfig+0x25c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0307 	and.w	r3, r3, #7
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d910      	bls.n	8006ef0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ece:	4b8d      	ldr	r3, [pc, #564]	; (8007104 <HAL_RCC_ClockConfig+0x25c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f023 0207 	bic.w	r2, r3, #7
 8006ed6:	498b      	ldr	r1, [pc, #556]	; (8007104 <HAL_RCC_ClockConfig+0x25c>)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ede:	4b89      	ldr	r3, [pc, #548]	; (8007104 <HAL_RCC_ClockConfig+0x25c>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d001      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e14a      	b.n	8007186 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d008      	beq.n	8006f0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006efc:	4b82      	ldr	r3, [pc, #520]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	497f      	ldr	r1, [pc, #508]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80dc 	beq.w	80070d4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d13c      	bne.n	8006f9e <HAL_RCC_ClockConfig+0xf6>
 8006f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f2c:	fa93 f3a3 	rbit	r3, r3
 8006f30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f34:	fab3 f383 	clz	r3, r3
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d102      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xa6>
 8006f48:	4b6f      	ldr	r3, [pc, #444]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	e00f      	b.n	8006f6e <HAL_RCC_ClockConfig+0xc6>
 8006f4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f56:	fa93 f3a3 	rbit	r3, r3
 8006f5a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f60:	663b      	str	r3, [r7, #96]	; 0x60
 8006f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f64:	fa93 f3a3 	rbit	r3, r3
 8006f68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f6a:	4b67      	ldr	r3, [pc, #412]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f72:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f76:	fa92 f2a2 	rbit	r2, r2
 8006f7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f7e:	fab2 f282 	clz	r2, r2
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	f042 0220 	orr.w	r2, r2, #32
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	f002 021f 	and.w	r2, r2, #31
 8006f8e:	2101      	movs	r1, #1
 8006f90:	fa01 f202 	lsl.w	r2, r1, r2
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d17b      	bne.n	8007092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e0f3      	b.n	8007186 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d13c      	bne.n	8007020 <HAL_RCC_ClockConfig+0x178>
 8006fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006faa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fae:	fa93 f3a3 	rbit	r3, r3
 8006fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb6:	fab3 f383 	clz	r3, r3
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	095b      	lsrs	r3, r3, #5
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d102      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x128>
 8006fca:	4b4f      	ldr	r3, [pc, #316]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	e00f      	b.n	8006ff0 <HAL_RCC_ClockConfig+0x148>
 8006fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fd8:	fa93 f3a3 	rbit	r3, r3
 8006fdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe6:	fa93 f3a3 	rbit	r3, r3
 8006fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fec:	4b46      	ldr	r3, [pc, #280]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ff4:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ff6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ff8:	fa92 f2a2 	rbit	r2, r2
 8006ffc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007000:	fab2 f282 	clz	r2, r2
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	f042 0220 	orr.w	r2, r2, #32
 800700a:	b2d2      	uxtb	r2, r2
 800700c:	f002 021f 	and.w	r2, r2, #31
 8007010:	2101      	movs	r1, #1
 8007012:	fa01 f202 	lsl.w	r2, r1, r2
 8007016:	4013      	ands	r3, r2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d13a      	bne.n	8007092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0b2      	b.n	8007186 <HAL_RCC_ClockConfig+0x2de>
 8007020:	2302      	movs	r3, #2
 8007022:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007026:	fa93 f3a3 	rbit	r3, r3
 800702a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702e:	fab3 f383 	clz	r3, r3
 8007032:	b2db      	uxtb	r3, r3
 8007034:	095b      	lsrs	r3, r3, #5
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f043 0301 	orr.w	r3, r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b01      	cmp	r3, #1
 8007040:	d102      	bne.n	8007048 <HAL_RCC_ClockConfig+0x1a0>
 8007042:	4b31      	ldr	r3, [pc, #196]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	e00d      	b.n	8007064 <HAL_RCC_ClockConfig+0x1bc>
 8007048:	2302      	movs	r3, #2
 800704a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704e:	fa93 f3a3 	rbit	r3, r3
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
 8007054:	2302      	movs	r3, #2
 8007056:	623b      	str	r3, [r7, #32]
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	fa93 f3a3 	rbit	r3, r3
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	4b29      	ldr	r3, [pc, #164]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	2202      	movs	r2, #2
 8007066:	61ba      	str	r2, [r7, #24]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	fa92 f2a2 	rbit	r2, r2
 800706e:	617a      	str	r2, [r7, #20]
  return result;
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	fab2 f282 	clz	r2, r2
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	f042 0220 	orr.w	r2, r2, #32
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	f002 021f 	and.w	r2, r2, #31
 8007082:	2101      	movs	r1, #1
 8007084:	fa01 f202 	lsl.w	r2, r1, r2
 8007088:	4013      	ands	r3, r2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e079      	b.n	8007186 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f023 0203 	bic.w	r2, r3, #3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	491a      	ldr	r1, [pc, #104]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070a4:	f7fc ffba 	bl	800401c <HAL_GetTick>
 80070a8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ac:	f7fc ffb6 	bl	800401c <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e061      	b.n	8007186 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c2:	4b11      	ldr	r3, [pc, #68]	; (8007108 <HAL_RCC_ClockConfig+0x260>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f003 020c 	and.w	r2, r3, #12
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d1eb      	bne.n	80070ac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCC_ClockConfig+0x25c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d214      	bcs.n	800710c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <HAL_RCC_ClockConfig+0x25c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f023 0207 	bic.w	r2, r3, #7
 80070ea:	4906      	ldr	r1, [pc, #24]	; (8007104 <HAL_RCC_ClockConfig+0x25c>)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f2:	4b04      	ldr	r3, [pc, #16]	; (8007104 <HAL_RCC_ClockConfig+0x25c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d005      	beq.n	800710c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e040      	b.n	8007186 <HAL_RCC_ClockConfig+0x2de>
 8007104:	40022000 	.word	0x40022000
 8007108:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007118:	4b1d      	ldr	r3, [pc, #116]	; (8007190 <HAL_RCC_ClockConfig+0x2e8>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	491a      	ldr	r1, [pc, #104]	; (8007190 <HAL_RCC_ClockConfig+0x2e8>)
 8007126:	4313      	orrs	r3, r2
 8007128:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007136:	4b16      	ldr	r3, [pc, #88]	; (8007190 <HAL_RCC_ClockConfig+0x2e8>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	4912      	ldr	r1, [pc, #72]	; (8007190 <HAL_RCC_ClockConfig+0x2e8>)
 8007146:	4313      	orrs	r3, r2
 8007148:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800714a:	f000 f829 	bl	80071a0 <HAL_RCC_GetSysClockFreq>
 800714e:	4601      	mov	r1, r0
 8007150:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <HAL_RCC_ClockConfig+0x2e8>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007158:	22f0      	movs	r2, #240	; 0xf0
 800715a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	fa92 f2a2 	rbit	r2, r2
 8007162:	60fa      	str	r2, [r7, #12]
  return result;
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	fab2 f282 	clz	r2, r2
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	40d3      	lsrs	r3, r2
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <HAL_RCC_ClockConfig+0x2ec>)
 8007170:	5cd3      	ldrb	r3, [r2, r3]
 8007172:	fa21 f303 	lsr.w	r3, r1, r3
 8007176:	4a08      	ldr	r2, [pc, #32]	; (8007198 <HAL_RCC_ClockConfig+0x2f0>)
 8007178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800717a:	4b08      	ldr	r3, [pc, #32]	; (800719c <HAL_RCC_ClockConfig+0x2f4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7fc ff08 	bl	8003f94 <HAL_InitTick>
  
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3778      	adds	r7, #120	; 0x78
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40021000 	.word	0x40021000
 8007194:	080081a0 	.word	0x080081a0
 8007198:	20000028 	.word	0x20000028
 800719c:	2000002c 	.word	0x2000002c

080071a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b08b      	sub	sp, #44	; 0x2c
 80071a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	2300      	movs	r3, #0
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	; 0x24
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80071ba:	4b29      	ldr	r3, [pc, #164]	; (8007260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	f003 030c 	and.w	r3, r3, #12
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d002      	beq.n	80071d0 <HAL_RCC_GetSysClockFreq+0x30>
 80071ca:	2b08      	cmp	r3, #8
 80071cc:	d003      	beq.n	80071d6 <HAL_RCC_GetSysClockFreq+0x36>
 80071ce:	e03c      	b.n	800724a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071d0:	4b24      	ldr	r3, [pc, #144]	; (8007264 <HAL_RCC_GetSysClockFreq+0xc4>)
 80071d2:	623b      	str	r3, [r7, #32]
      break;
 80071d4:	e03c      	b.n	8007250 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80071dc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80071e0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	fa92 f2a2 	rbit	r2, r2
 80071e8:	607a      	str	r2, [r7, #4]
  return result;
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	fab2 f282 	clz	r2, r2
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	40d3      	lsrs	r3, r2
 80071f4:	4a1c      	ldr	r2, [pc, #112]	; (8007268 <HAL_RCC_GetSysClockFreq+0xc8>)
 80071f6:	5cd3      	ldrb	r3, [r2, r3]
 80071f8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80071fa:	4b19      	ldr	r3, [pc, #100]	; (8007260 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	220f      	movs	r2, #15
 8007204:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	fa92 f2a2 	rbit	r2, r2
 800720c:	60fa      	str	r2, [r7, #12]
  return result;
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	fab2 f282 	clz	r2, r2
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	40d3      	lsrs	r3, r2
 8007218:	4a14      	ldr	r2, [pc, #80]	; (800726c <HAL_RCC_GetSysClockFreq+0xcc>)
 800721a:	5cd3      	ldrb	r3, [r2, r3]
 800721c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007228:	4a0e      	ldr	r2, [pc, #56]	; (8007264 <HAL_RCC_GetSysClockFreq+0xc4>)
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	fb02 f303 	mul.w	r3, r2, r3
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
 8007238:	e004      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	4a0c      	ldr	r2, [pc, #48]	; (8007270 <HAL_RCC_GetSysClockFreq+0xd0>)
 800723e:	fb02 f303 	mul.w	r3, r2, r3
 8007242:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	623b      	str	r3, [r7, #32]
      break;
 8007248:	e002      	b.n	8007250 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800724a:	4b06      	ldr	r3, [pc, #24]	; (8007264 <HAL_RCC_GetSysClockFreq+0xc4>)
 800724c:	623b      	str	r3, [r7, #32]
      break;
 800724e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007250:	6a3b      	ldr	r3, [r7, #32]
}
 8007252:	4618      	mov	r0, r3
 8007254:	372c      	adds	r7, #44	; 0x2c
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	40021000 	.word	0x40021000
 8007264:	007a1200 	.word	0x007a1200
 8007268:	080081b0 	.word	0x080081b0
 800726c:	080081c0 	.word	0x080081c0
 8007270:	003d0900 	.word	0x003d0900

08007274 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b092      	sub	sp, #72	; 0x48
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007284:	2300      	movs	r3, #0
 8007286:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80d4 	beq.w	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007298:	4b4e      	ldr	r3, [pc, #312]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10e      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072a4:	4b4b      	ldr	r3, [pc, #300]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	4a4a      	ldr	r2, [pc, #296]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ae:	61d3      	str	r3, [r2, #28]
 80072b0:	4b48      	ldr	r3, [pc, #288]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072bc:	2301      	movs	r3, #1
 80072be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c2:	4b45      	ldr	r3, [pc, #276]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d118      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072ce:	4b42      	ldr	r3, [pc, #264]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a41      	ldr	r2, [pc, #260]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072da:	f7fc fe9f 	bl	800401c <HAL_GetTick>
 80072de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e0:	e008      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072e2:	f7fc fe9b 	bl	800401c <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	2b64      	cmp	r3, #100	; 0x64
 80072ee:	d901      	bls.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80072f0:	2303      	movs	r3, #3
 80072f2:	e169      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072f4:	4b38      	ldr	r3, [pc, #224]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d0f0      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007300:	4b34      	ldr	r3, [pc, #208]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007308:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800730a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 8084 	beq.w	800741a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800731a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800731c:	429a      	cmp	r2, r3
 800731e:	d07c      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007320:	4b2c      	ldr	r3, [pc, #176]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	fa93 f3a3 	rbit	r3, r3
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800733a:	fab3 f383 	clz	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	461a      	mov	r2, r3
 800734a:	2301      	movs	r3, #1
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007352:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007356:	fa93 f3a3 	rbit	r3, r3
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800735c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800735e:	fab3 f383 	clz	r3, r3
 8007362:	b2db      	uxtb	r3, r3
 8007364:	461a      	mov	r2, r3
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	461a      	mov	r2, r3
 800736e:	2300      	movs	r3, #0
 8007370:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007372:	4a18      	ldr	r2, [pc, #96]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007376:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d04b      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007382:	f7fc fe4b 	bl	800401c <HAL_GetTick>
 8007386:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007388:	e00a      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fc fe47 	bl	800401c <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	; 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e113      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80073a0:	2302      	movs	r3, #2
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a6:	fa93 f3a3 	rbit	r3, r3
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
 80073ac:	2302      	movs	r3, #2
 80073ae:	623b      	str	r3, [r7, #32]
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	fa93 f3a3 	rbit	r3, r3
 80073b6:	61fb      	str	r3, [r7, #28]
  return result;
 80073b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ba:	fab3 f383 	clz	r3, r3
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f043 0302 	orr.w	r3, r3, #2
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d108      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80073ce:	4b01      	ldr	r3, [pc, #4]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	e00d      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80073d4:	40021000 	.word	0x40021000
 80073d8:	40007000 	.word	0x40007000
 80073dc:	10908100 	.word	0x10908100
 80073e0:	2302      	movs	r3, #2
 80073e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	fa93 f3a3 	rbit	r3, r3
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	4b78      	ldr	r3, [pc, #480]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2202      	movs	r2, #2
 80073f2:	613a      	str	r2, [r7, #16]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	fa92 f2a2 	rbit	r2, r2
 80073fa:	60fa      	str	r2, [r7, #12]
  return result;
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	fab2 f282 	clz	r2, r2
 8007402:	b2d2      	uxtb	r2, r2
 8007404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	f002 021f 	and.w	r2, r2, #31
 800740e:	2101      	movs	r1, #1
 8007410:	fa01 f202 	lsl.w	r2, r1, r2
 8007414:	4013      	ands	r3, r2
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0b7      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800741a:	4b6d      	ldr	r3, [pc, #436]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	496a      	ldr	r1, [pc, #424]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800742c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007430:	2b01      	cmp	r3, #1
 8007432:	d105      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007434:	4b66      	ldr	r3, [pc, #408]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007436:	69db      	ldr	r3, [r3, #28]
 8007438:	4a65      	ldr	r2, [pc, #404]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800744c:	4b60      	ldr	r3, [pc, #384]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800744e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007450:	f023 0203 	bic.w	r2, r3, #3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	495d      	ldr	r1, [pc, #372]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800745a:	4313      	orrs	r3, r2
 800745c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d008      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800746a:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4956      	ldr	r1, [pc, #344]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007478:	4313      	orrs	r3, r2
 800747a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007488:	4b51      	ldr	r3, [pc, #324]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800748a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	494e      	ldr	r1, [pc, #312]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007496:	4313      	orrs	r3, r2
 8007498:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d008      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074a6:	4b4a      	ldr	r3, [pc, #296]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	f023 0210 	bic.w	r2, r3, #16
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	4947      	ldr	r1, [pc, #284]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d008      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80074c4:	4b42      	ldr	r3, [pc, #264]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	493f      	ldr	r1, [pc, #252]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d008      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074e2:	4b3b      	ldr	r3, [pc, #236]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f023 0220 	bic.w	r2, r3, #32
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	4938      	ldr	r1, [pc, #224]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0308 	and.w	r3, r3, #8
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d008      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007500:	4b33      	ldr	r3, [pc, #204]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	4930      	ldr	r1, [pc, #192]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800750e:	4313      	orrs	r3, r2
 8007510:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b00      	cmp	r3, #0
 800751c:	d008      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800751e:	4b2c      	ldr	r3, [pc, #176]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	4929      	ldr	r1, [pc, #164]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800753c:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	4921      	ldr	r1, [pc, #132]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800754a:	4313      	orrs	r3, r2
 800754c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007556:	2b00      	cmp	r3, #0
 8007558:	d008      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800755a:	4b1d      	ldr	r3, [pc, #116]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	491a      	ldr	r1, [pc, #104]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007568:	4313      	orrs	r3, r2
 800756a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007574:	2b00      	cmp	r3, #0
 8007576:	d008      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007578:	4b15      	ldr	r3, [pc, #84]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	4912      	ldr	r1, [pc, #72]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007586:	4313      	orrs	r3, r2
 8007588:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d008      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007596:	4b0e      	ldr	r3, [pc, #56]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	490b      	ldr	r1, [pc, #44]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d008      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80075b4:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c0:	4903      	ldr	r1, [pc, #12]	; (80075d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3748      	adds	r7, #72	; 0x48
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40021000 	.word	0x40021000

080075d4 <__errno>:
 80075d4:	4b01      	ldr	r3, [pc, #4]	; (80075dc <__errno+0x8>)
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20000034 	.word	0x20000034

080075e0 <__libc_init_array>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	4d0d      	ldr	r5, [pc, #52]	; (8007618 <__libc_init_array+0x38>)
 80075e4:	4c0d      	ldr	r4, [pc, #52]	; (800761c <__libc_init_array+0x3c>)
 80075e6:	1b64      	subs	r4, r4, r5
 80075e8:	10a4      	asrs	r4, r4, #2
 80075ea:	2600      	movs	r6, #0
 80075ec:	42a6      	cmp	r6, r4
 80075ee:	d109      	bne.n	8007604 <__libc_init_array+0x24>
 80075f0:	4d0b      	ldr	r5, [pc, #44]	; (8007620 <__libc_init_array+0x40>)
 80075f2:	4c0c      	ldr	r4, [pc, #48]	; (8007624 <__libc_init_array+0x44>)
 80075f4:	f000 fdc8 	bl	8008188 <_init>
 80075f8:	1b64      	subs	r4, r4, r5
 80075fa:	10a4      	asrs	r4, r4, #2
 80075fc:	2600      	movs	r6, #0
 80075fe:	42a6      	cmp	r6, r4
 8007600:	d105      	bne.n	800760e <__libc_init_array+0x2e>
 8007602:	bd70      	pop	{r4, r5, r6, pc}
 8007604:	f855 3b04 	ldr.w	r3, [r5], #4
 8007608:	4798      	blx	r3
 800760a:	3601      	adds	r6, #1
 800760c:	e7ee      	b.n	80075ec <__libc_init_array+0xc>
 800760e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007612:	4798      	blx	r3
 8007614:	3601      	adds	r6, #1
 8007616:	e7f2      	b.n	80075fe <__libc_init_array+0x1e>
 8007618:	080082a8 	.word	0x080082a8
 800761c:	080082a8 	.word	0x080082a8
 8007620:	080082a8 	.word	0x080082a8
 8007624:	080082ac 	.word	0x080082ac

08007628 <memset>:
 8007628:	4402      	add	r2, r0
 800762a:	4603      	mov	r3, r0
 800762c:	4293      	cmp	r3, r2
 800762e:	d100      	bne.n	8007632 <memset+0xa>
 8007630:	4770      	bx	lr
 8007632:	f803 1b01 	strb.w	r1, [r3], #1
 8007636:	e7f9      	b.n	800762c <memset+0x4>

08007638 <asin>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	ed2d 8b02 	vpush	{d8}
 800763e:	ec55 4b10 	vmov	r4, r5, d0
 8007642:	f000 f85d 	bl	8007700 <__ieee754_asin>
 8007646:	4622      	mov	r2, r4
 8007648:	462b      	mov	r3, r5
 800764a:	4620      	mov	r0, r4
 800764c:	4629      	mov	r1, r5
 800764e:	eeb0 8a40 	vmov.f32	s16, s0
 8007652:	eef0 8a60 	vmov.f32	s17, s1
 8007656:	f7f9 fa0d 	bl	8000a74 <__aeabi_dcmpun>
 800765a:	b9a8      	cbnz	r0, 8007688 <asin+0x50>
 800765c:	ec45 4b10 	vmov	d0, r4, r5
 8007660:	f000 fd7e 	bl	8008160 <fabs>
 8007664:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <asin+0x60>)
 8007666:	ec51 0b10 	vmov	r0, r1, d0
 800766a:	2200      	movs	r2, #0
 800766c:	f7f9 f9f8 	bl	8000a60 <__aeabi_dcmpgt>
 8007670:	b150      	cbz	r0, 8007688 <asin+0x50>
 8007672:	f7ff ffaf 	bl	80075d4 <__errno>
 8007676:	ecbd 8b02 	vpop	{d8}
 800767a:	2321      	movs	r3, #33	; 0x21
 800767c:	6003      	str	r3, [r0, #0]
 800767e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007682:	4806      	ldr	r0, [pc, #24]	; (800769c <asin+0x64>)
 8007684:	f000 bd78 	b.w	8008178 <nan>
 8007688:	eeb0 0a48 	vmov.f32	s0, s16
 800768c:	eef0 0a68 	vmov.f32	s1, s17
 8007690:	ecbd 8b02 	vpop	{d8}
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	3ff00000 	.word	0x3ff00000
 800769c:	08008230 	.word	0x08008230

080076a0 <atan2>:
 80076a0:	f000 ba42 	b.w	8007b28 <__ieee754_atan2>

080076a4 <sqrt>:
 80076a4:	b538      	push	{r3, r4, r5, lr}
 80076a6:	ed2d 8b02 	vpush	{d8}
 80076aa:	ec55 4b10 	vmov	r4, r5, d0
 80076ae:	f000 fb05 	bl	8007cbc <__ieee754_sqrt>
 80076b2:	4622      	mov	r2, r4
 80076b4:	462b      	mov	r3, r5
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	eeb0 8a40 	vmov.f32	s16, s0
 80076be:	eef0 8a60 	vmov.f32	s17, s1
 80076c2:	f7f9 f9d7 	bl	8000a74 <__aeabi_dcmpun>
 80076c6:	b990      	cbnz	r0, 80076ee <sqrt+0x4a>
 80076c8:	2200      	movs	r2, #0
 80076ca:	2300      	movs	r3, #0
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	f7f9 f9a8 	bl	8000a24 <__aeabi_dcmplt>
 80076d4:	b158      	cbz	r0, 80076ee <sqrt+0x4a>
 80076d6:	f7ff ff7d 	bl	80075d4 <__errno>
 80076da:	2321      	movs	r3, #33	; 0x21
 80076dc:	6003      	str	r3, [r0, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	2300      	movs	r3, #0
 80076e2:	4610      	mov	r0, r2
 80076e4:	4619      	mov	r1, r3
 80076e6:	f7f9 f855 	bl	8000794 <__aeabi_ddiv>
 80076ea:	ec41 0b18 	vmov	d8, r0, r1
 80076ee:	eeb0 0a48 	vmov.f32	s0, s16
 80076f2:	eef0 0a68 	vmov.f32	s1, s17
 80076f6:	ecbd 8b02 	vpop	{d8}
 80076fa:	bd38      	pop	{r3, r4, r5, pc}
 80076fc:	0000      	movs	r0, r0
	...

08007700 <__ieee754_asin>:
 8007700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007704:	ed2d 8b04 	vpush	{d8-d9}
 8007708:	ec55 4b10 	vmov	r4, r5, d0
 800770c:	4bcc      	ldr	r3, [pc, #816]	; (8007a40 <__ieee754_asin+0x340>)
 800770e:	b083      	sub	sp, #12
 8007710:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007714:	4598      	cmp	r8, r3
 8007716:	9501      	str	r5, [sp, #4]
 8007718:	dd35      	ble.n	8007786 <__ieee754_asin+0x86>
 800771a:	ee10 3a10 	vmov	r3, s0
 800771e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8007722:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8007726:	ea58 0303 	orrs.w	r3, r8, r3
 800772a:	d117      	bne.n	800775c <__ieee754_asin+0x5c>
 800772c:	a3aa      	add	r3, pc, #680	; (adr r3, 80079d8 <__ieee754_asin+0x2d8>)
 800772e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007732:	ee10 0a10 	vmov	r0, s0
 8007736:	4629      	mov	r1, r5
 8007738:	f7f8 ff02 	bl	8000540 <__aeabi_dmul>
 800773c:	a3a8      	add	r3, pc, #672	; (adr r3, 80079e0 <__ieee754_asin+0x2e0>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	4606      	mov	r6, r0
 8007744:	460f      	mov	r7, r1
 8007746:	4620      	mov	r0, r4
 8007748:	4629      	mov	r1, r5
 800774a:	f7f8 fef9 	bl	8000540 <__aeabi_dmul>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f8 fd3d 	bl	80001d4 <__adddf3>
 800775a:	e00b      	b.n	8007774 <__ieee754_asin+0x74>
 800775c:	ee10 2a10 	vmov	r2, s0
 8007760:	462b      	mov	r3, r5
 8007762:	ee10 0a10 	vmov	r0, s0
 8007766:	4629      	mov	r1, r5
 8007768:	f7f8 fd32 	bl	80001d0 <__aeabi_dsub>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	f7f9 f810 	bl	8000794 <__aeabi_ddiv>
 8007774:	4604      	mov	r4, r0
 8007776:	460d      	mov	r5, r1
 8007778:	ec45 4b10 	vmov	d0, r4, r5
 800777c:	b003      	add	sp, #12
 800777e:	ecbd 8b04 	vpop	{d8-d9}
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	4baf      	ldr	r3, [pc, #700]	; (8007a44 <__ieee754_asin+0x344>)
 8007788:	4598      	cmp	r8, r3
 800778a:	dc11      	bgt.n	80077b0 <__ieee754_asin+0xb0>
 800778c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007790:	f280 80ae 	bge.w	80078f0 <__ieee754_asin+0x1f0>
 8007794:	a394      	add	r3, pc, #592	; (adr r3, 80079e8 <__ieee754_asin+0x2e8>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	ee10 0a10 	vmov	r0, s0
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f8 fd18 	bl	80001d4 <__adddf3>
 80077a4:	4ba8      	ldr	r3, [pc, #672]	; (8007a48 <__ieee754_asin+0x348>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	f7f9 f95a 	bl	8000a60 <__aeabi_dcmpgt>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	d1e3      	bne.n	8007778 <__ieee754_asin+0x78>
 80077b0:	ec45 4b10 	vmov	d0, r4, r5
 80077b4:	f000 fcd4 	bl	8008160 <fabs>
 80077b8:	49a3      	ldr	r1, [pc, #652]	; (8007a48 <__ieee754_asin+0x348>)
 80077ba:	ec53 2b10 	vmov	r2, r3, d0
 80077be:	2000      	movs	r0, #0
 80077c0:	f7f8 fd06 	bl	80001d0 <__aeabi_dsub>
 80077c4:	4ba1      	ldr	r3, [pc, #644]	; (8007a4c <__ieee754_asin+0x34c>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	f7f8 feba 	bl	8000540 <__aeabi_dmul>
 80077cc:	a388      	add	r3, pc, #544	; (adr r3, 80079f0 <__ieee754_asin+0x2f0>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	4604      	mov	r4, r0
 80077d4:	460d      	mov	r5, r1
 80077d6:	f7f8 feb3 	bl	8000540 <__aeabi_dmul>
 80077da:	a387      	add	r3, pc, #540	; (adr r3, 80079f8 <__ieee754_asin+0x2f8>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	f7f8 fcf8 	bl	80001d4 <__adddf3>
 80077e4:	4622      	mov	r2, r4
 80077e6:	462b      	mov	r3, r5
 80077e8:	f7f8 feaa 	bl	8000540 <__aeabi_dmul>
 80077ec:	a384      	add	r3, pc, #528	; (adr r3, 8007a00 <__ieee754_asin+0x300>)
 80077ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f2:	f7f8 fced 	bl	80001d0 <__aeabi_dsub>
 80077f6:	4622      	mov	r2, r4
 80077f8:	462b      	mov	r3, r5
 80077fa:	f7f8 fea1 	bl	8000540 <__aeabi_dmul>
 80077fe:	a382      	add	r3, pc, #520	; (adr r3, 8007a08 <__ieee754_asin+0x308>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	f7f8 fce6 	bl	80001d4 <__adddf3>
 8007808:	4622      	mov	r2, r4
 800780a:	462b      	mov	r3, r5
 800780c:	f7f8 fe98 	bl	8000540 <__aeabi_dmul>
 8007810:	a37f      	add	r3, pc, #508	; (adr r3, 8007a10 <__ieee754_asin+0x310>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	f7f8 fcdb 	bl	80001d0 <__aeabi_dsub>
 800781a:	4622      	mov	r2, r4
 800781c:	462b      	mov	r3, r5
 800781e:	f7f8 fe8f 	bl	8000540 <__aeabi_dmul>
 8007822:	a37d      	add	r3, pc, #500	; (adr r3, 8007a18 <__ieee754_asin+0x318>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fcd4 	bl	80001d4 <__adddf3>
 800782c:	4622      	mov	r2, r4
 800782e:	462b      	mov	r3, r5
 8007830:	f7f8 fe86 	bl	8000540 <__aeabi_dmul>
 8007834:	a37a      	add	r3, pc, #488	; (adr r3, 8007a20 <__ieee754_asin+0x320>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	ec41 0b18 	vmov	d8, r0, r1
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f8 fe7d 	bl	8000540 <__aeabi_dmul>
 8007846:	a378      	add	r3, pc, #480	; (adr r3, 8007a28 <__ieee754_asin+0x328>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fcc0 	bl	80001d0 <__aeabi_dsub>
 8007850:	4622      	mov	r2, r4
 8007852:	462b      	mov	r3, r5
 8007854:	f7f8 fe74 	bl	8000540 <__aeabi_dmul>
 8007858:	a375      	add	r3, pc, #468	; (adr r3, 8007a30 <__ieee754_asin+0x330>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fcb9 	bl	80001d4 <__adddf3>
 8007862:	4622      	mov	r2, r4
 8007864:	462b      	mov	r3, r5
 8007866:	f7f8 fe6b 	bl	8000540 <__aeabi_dmul>
 800786a:	a373      	add	r3, pc, #460	; (adr r3, 8007a38 <__ieee754_asin+0x338>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f7f8 fcae 	bl	80001d0 <__aeabi_dsub>
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	f7f8 fe62 	bl	8000540 <__aeabi_dmul>
 800787c:	4b72      	ldr	r3, [pc, #456]	; (8007a48 <__ieee754_asin+0x348>)
 800787e:	2200      	movs	r2, #0
 8007880:	f7f8 fca8 	bl	80001d4 <__adddf3>
 8007884:	ec45 4b10 	vmov	d0, r4, r5
 8007888:	4606      	mov	r6, r0
 800788a:	460f      	mov	r7, r1
 800788c:	f000 fa16 	bl	8007cbc <__ieee754_sqrt>
 8007890:	4b6f      	ldr	r3, [pc, #444]	; (8007a50 <__ieee754_asin+0x350>)
 8007892:	4598      	cmp	r8, r3
 8007894:	ec5b ab10 	vmov	sl, fp, d0
 8007898:	f340 80dc 	ble.w	8007a54 <__ieee754_asin+0x354>
 800789c:	4632      	mov	r2, r6
 800789e:	463b      	mov	r3, r7
 80078a0:	ec51 0b18 	vmov	r0, r1, d8
 80078a4:	f7f8 ff76 	bl	8000794 <__aeabi_ddiv>
 80078a8:	4652      	mov	r2, sl
 80078aa:	465b      	mov	r3, fp
 80078ac:	f7f8 fe48 	bl	8000540 <__aeabi_dmul>
 80078b0:	4652      	mov	r2, sl
 80078b2:	465b      	mov	r3, fp
 80078b4:	f7f8 fc8e 	bl	80001d4 <__adddf3>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	f7f8 fc8a 	bl	80001d4 <__adddf3>
 80078c0:	a347      	add	r3, pc, #284	; (adr r3, 80079e0 <__ieee754_asin+0x2e0>)
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f7f8 fc83 	bl	80001d0 <__aeabi_dsub>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	a142      	add	r1, pc, #264	; (adr r1, 80079d8 <__ieee754_asin+0x2d8>)
 80078d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078d4:	f7f8 fc7c 	bl	80001d0 <__aeabi_dsub>
 80078d8:	9b01      	ldr	r3, [sp, #4]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	bfdc      	itt	le
 80078de:	4602      	movle	r2, r0
 80078e0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80078e4:	4604      	mov	r4, r0
 80078e6:	460d      	mov	r5, r1
 80078e8:	bfdc      	itt	le
 80078ea:	4614      	movle	r4, r2
 80078ec:	461d      	movle	r5, r3
 80078ee:	e743      	b.n	8007778 <__ieee754_asin+0x78>
 80078f0:	ee10 2a10 	vmov	r2, s0
 80078f4:	ee10 0a10 	vmov	r0, s0
 80078f8:	462b      	mov	r3, r5
 80078fa:	4629      	mov	r1, r5
 80078fc:	f7f8 fe20 	bl	8000540 <__aeabi_dmul>
 8007900:	a33b      	add	r3, pc, #236	; (adr r3, 80079f0 <__ieee754_asin+0x2f0>)
 8007902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007906:	4606      	mov	r6, r0
 8007908:	460f      	mov	r7, r1
 800790a:	f7f8 fe19 	bl	8000540 <__aeabi_dmul>
 800790e:	a33a      	add	r3, pc, #232	; (adr r3, 80079f8 <__ieee754_asin+0x2f8>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 fc5e 	bl	80001d4 <__adddf3>
 8007918:	4632      	mov	r2, r6
 800791a:	463b      	mov	r3, r7
 800791c:	f7f8 fe10 	bl	8000540 <__aeabi_dmul>
 8007920:	a337      	add	r3, pc, #220	; (adr r3, 8007a00 <__ieee754_asin+0x300>)
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f8 fc53 	bl	80001d0 <__aeabi_dsub>
 800792a:	4632      	mov	r2, r6
 800792c:	463b      	mov	r3, r7
 800792e:	f7f8 fe07 	bl	8000540 <__aeabi_dmul>
 8007932:	a335      	add	r3, pc, #212	; (adr r3, 8007a08 <__ieee754_asin+0x308>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f7f8 fc4c 	bl	80001d4 <__adddf3>
 800793c:	4632      	mov	r2, r6
 800793e:	463b      	mov	r3, r7
 8007940:	f7f8 fdfe 	bl	8000540 <__aeabi_dmul>
 8007944:	a332      	add	r3, pc, #200	; (adr r3, 8007a10 <__ieee754_asin+0x310>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f7f8 fc41 	bl	80001d0 <__aeabi_dsub>
 800794e:	4632      	mov	r2, r6
 8007950:	463b      	mov	r3, r7
 8007952:	f7f8 fdf5 	bl	8000540 <__aeabi_dmul>
 8007956:	a330      	add	r3, pc, #192	; (adr r3, 8007a18 <__ieee754_asin+0x318>)
 8007958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795c:	f7f8 fc3a 	bl	80001d4 <__adddf3>
 8007960:	4632      	mov	r2, r6
 8007962:	463b      	mov	r3, r7
 8007964:	f7f8 fdec 	bl	8000540 <__aeabi_dmul>
 8007968:	a32d      	add	r3, pc, #180	; (adr r3, 8007a20 <__ieee754_asin+0x320>)
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	4680      	mov	r8, r0
 8007970:	4689      	mov	r9, r1
 8007972:	4630      	mov	r0, r6
 8007974:	4639      	mov	r1, r7
 8007976:	f7f8 fde3 	bl	8000540 <__aeabi_dmul>
 800797a:	a32b      	add	r3, pc, #172	; (adr r3, 8007a28 <__ieee754_asin+0x328>)
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f7f8 fc26 	bl	80001d0 <__aeabi_dsub>
 8007984:	4632      	mov	r2, r6
 8007986:	463b      	mov	r3, r7
 8007988:	f7f8 fdda 	bl	8000540 <__aeabi_dmul>
 800798c:	a328      	add	r3, pc, #160	; (adr r3, 8007a30 <__ieee754_asin+0x330>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f7f8 fc1f 	bl	80001d4 <__adddf3>
 8007996:	4632      	mov	r2, r6
 8007998:	463b      	mov	r3, r7
 800799a:	f7f8 fdd1 	bl	8000540 <__aeabi_dmul>
 800799e:	a326      	add	r3, pc, #152	; (adr r3, 8007a38 <__ieee754_asin+0x338>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f7f8 fc14 	bl	80001d0 <__aeabi_dsub>
 80079a8:	4632      	mov	r2, r6
 80079aa:	463b      	mov	r3, r7
 80079ac:	f7f8 fdc8 	bl	8000540 <__aeabi_dmul>
 80079b0:	4b25      	ldr	r3, [pc, #148]	; (8007a48 <__ieee754_asin+0x348>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	f7f8 fc0e 	bl	80001d4 <__adddf3>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4640      	mov	r0, r8
 80079be:	4649      	mov	r1, r9
 80079c0:	f7f8 fee8 	bl	8000794 <__aeabi_ddiv>
 80079c4:	4622      	mov	r2, r4
 80079c6:	462b      	mov	r3, r5
 80079c8:	f7f8 fdba 	bl	8000540 <__aeabi_dmul>
 80079cc:	4602      	mov	r2, r0
 80079ce:	460b      	mov	r3, r1
 80079d0:	4620      	mov	r0, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	e6bf      	b.n	8007756 <__ieee754_asin+0x56>
 80079d6:	bf00      	nop
 80079d8:	54442d18 	.word	0x54442d18
 80079dc:	3ff921fb 	.word	0x3ff921fb
 80079e0:	33145c07 	.word	0x33145c07
 80079e4:	3c91a626 	.word	0x3c91a626
 80079e8:	8800759c 	.word	0x8800759c
 80079ec:	7e37e43c 	.word	0x7e37e43c
 80079f0:	0dfdf709 	.word	0x0dfdf709
 80079f4:	3f023de1 	.word	0x3f023de1
 80079f8:	7501b288 	.word	0x7501b288
 80079fc:	3f49efe0 	.word	0x3f49efe0
 8007a00:	b5688f3b 	.word	0xb5688f3b
 8007a04:	3fa48228 	.word	0x3fa48228
 8007a08:	0e884455 	.word	0x0e884455
 8007a0c:	3fc9c155 	.word	0x3fc9c155
 8007a10:	03eb6f7d 	.word	0x03eb6f7d
 8007a14:	3fd4d612 	.word	0x3fd4d612
 8007a18:	55555555 	.word	0x55555555
 8007a1c:	3fc55555 	.word	0x3fc55555
 8007a20:	b12e9282 	.word	0xb12e9282
 8007a24:	3fb3b8c5 	.word	0x3fb3b8c5
 8007a28:	1b8d0159 	.word	0x1b8d0159
 8007a2c:	3fe6066c 	.word	0x3fe6066c
 8007a30:	9c598ac8 	.word	0x9c598ac8
 8007a34:	40002ae5 	.word	0x40002ae5
 8007a38:	1c8a2d4b 	.word	0x1c8a2d4b
 8007a3c:	40033a27 	.word	0x40033a27
 8007a40:	3fefffff 	.word	0x3fefffff
 8007a44:	3fdfffff 	.word	0x3fdfffff
 8007a48:	3ff00000 	.word	0x3ff00000
 8007a4c:	3fe00000 	.word	0x3fe00000
 8007a50:	3fef3332 	.word	0x3fef3332
 8007a54:	ee10 2a10 	vmov	r2, s0
 8007a58:	ee10 0a10 	vmov	r0, s0
 8007a5c:	465b      	mov	r3, fp
 8007a5e:	4659      	mov	r1, fp
 8007a60:	f7f8 fbb8 	bl	80001d4 <__adddf3>
 8007a64:	4632      	mov	r2, r6
 8007a66:	463b      	mov	r3, r7
 8007a68:	ec41 0b19 	vmov	d9, r0, r1
 8007a6c:	ec51 0b18 	vmov	r0, r1, d8
 8007a70:	f7f8 fe90 	bl	8000794 <__aeabi_ddiv>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	ec51 0b19 	vmov	r0, r1, d9
 8007a7c:	f7f8 fd60 	bl	8000540 <__aeabi_dmul>
 8007a80:	f04f 0800 	mov.w	r8, #0
 8007a84:	4606      	mov	r6, r0
 8007a86:	460f      	mov	r7, r1
 8007a88:	4642      	mov	r2, r8
 8007a8a:	465b      	mov	r3, fp
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	4659      	mov	r1, fp
 8007a90:	f7f8 fd56 	bl	8000540 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f8 fb98 	bl	80001d0 <__aeabi_dsub>
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	460d      	mov	r5, r1
 8007aa6:	465b      	mov	r3, fp
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	4659      	mov	r1, fp
 8007aac:	f7f8 fb92 	bl	80001d4 <__adddf3>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	f7f8 fe6c 	bl	8000794 <__aeabi_ddiv>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	f7f8 fb88 	bl	80001d4 <__adddf3>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	a113      	add	r1, pc, #76	; (adr r1, 8007b18 <__ieee754_asin+0x418>)
 8007aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ace:	f7f8 fb7f 	bl	80001d0 <__aeabi_dsub>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7f8 fb79 	bl	80001d0 <__aeabi_dsub>
 8007ade:	4642      	mov	r2, r8
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	465b      	mov	r3, fp
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	4659      	mov	r1, fp
 8007aea:	f7f8 fb73 	bl	80001d4 <__adddf3>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	a10b      	add	r1, pc, #44	; (adr r1, 8007b20 <__ieee754_asin+0x420>)
 8007af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af8:	f7f8 fb6a 	bl	80001d0 <__aeabi_dsub>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4620      	mov	r0, r4
 8007b02:	4629      	mov	r1, r5
 8007b04:	f7f8 fb64 	bl	80001d0 <__aeabi_dsub>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	a104      	add	r1, pc, #16	; (adr r1, 8007b20 <__ieee754_asin+0x420>)
 8007b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b12:	e6df      	b.n	80078d4 <__ieee754_asin+0x1d4>
 8007b14:	f3af 8000 	nop.w
 8007b18:	33145c07 	.word	0x33145c07
 8007b1c:	3c91a626 	.word	0x3c91a626
 8007b20:	54442d18 	.word	0x54442d18
 8007b24:	3fe921fb 	.word	0x3fe921fb

08007b28 <__ieee754_atan2>:
 8007b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b2c:	ec57 6b11 	vmov	r6, r7, d1
 8007b30:	4273      	negs	r3, r6
 8007b32:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007cb8 <__ieee754_atan2+0x190>
 8007b36:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007b3a:	4333      	orrs	r3, r6
 8007b3c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007b40:	4573      	cmp	r3, lr
 8007b42:	ec51 0b10 	vmov	r0, r1, d0
 8007b46:	ee11 8a10 	vmov	r8, s2
 8007b4a:	d80a      	bhi.n	8007b62 <__ieee754_atan2+0x3a>
 8007b4c:	4244      	negs	r4, r0
 8007b4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b52:	4304      	orrs	r4, r0
 8007b54:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007b58:	4574      	cmp	r4, lr
 8007b5a:	ee10 9a10 	vmov	r9, s0
 8007b5e:	468c      	mov	ip, r1
 8007b60:	d907      	bls.n	8007b72 <__ieee754_atan2+0x4a>
 8007b62:	4632      	mov	r2, r6
 8007b64:	463b      	mov	r3, r7
 8007b66:	f7f8 fb35 	bl	80001d4 <__adddf3>
 8007b6a:	ec41 0b10 	vmov	d0, r0, r1
 8007b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b72:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007b76:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b7a:	4334      	orrs	r4, r6
 8007b7c:	d103      	bne.n	8007b86 <__ieee754_atan2+0x5e>
 8007b7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b82:	f000 b94d 	b.w	8007e20 <atan>
 8007b86:	17bc      	asrs	r4, r7, #30
 8007b88:	f004 0402 	and.w	r4, r4, #2
 8007b8c:	ea53 0909 	orrs.w	r9, r3, r9
 8007b90:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007b94:	d107      	bne.n	8007ba6 <__ieee754_atan2+0x7e>
 8007b96:	2c02      	cmp	r4, #2
 8007b98:	d060      	beq.n	8007c5c <__ieee754_atan2+0x134>
 8007b9a:	2c03      	cmp	r4, #3
 8007b9c:	d1e5      	bne.n	8007b6a <__ieee754_atan2+0x42>
 8007b9e:	a142      	add	r1, pc, #264	; (adr r1, 8007ca8 <__ieee754_atan2+0x180>)
 8007ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba4:	e7e1      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007ba6:	ea52 0808 	orrs.w	r8, r2, r8
 8007baa:	d106      	bne.n	8007bba <__ieee754_atan2+0x92>
 8007bac:	f1bc 0f00 	cmp.w	ip, #0
 8007bb0:	da5f      	bge.n	8007c72 <__ieee754_atan2+0x14a>
 8007bb2:	a13f      	add	r1, pc, #252	; (adr r1, 8007cb0 <__ieee754_atan2+0x188>)
 8007bb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb8:	e7d7      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007bba:	4572      	cmp	r2, lr
 8007bbc:	d10f      	bne.n	8007bde <__ieee754_atan2+0xb6>
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007bc4:	d107      	bne.n	8007bd6 <__ieee754_atan2+0xae>
 8007bc6:	2c02      	cmp	r4, #2
 8007bc8:	d84c      	bhi.n	8007c64 <__ieee754_atan2+0x13c>
 8007bca:	4b35      	ldr	r3, [pc, #212]	; (8007ca0 <__ieee754_atan2+0x178>)
 8007bcc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007bd0:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007bd4:	e7c9      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007bd6:	2c02      	cmp	r4, #2
 8007bd8:	d848      	bhi.n	8007c6c <__ieee754_atan2+0x144>
 8007bda:	4b32      	ldr	r3, [pc, #200]	; (8007ca4 <__ieee754_atan2+0x17c>)
 8007bdc:	e7f6      	b.n	8007bcc <__ieee754_atan2+0xa4>
 8007bde:	4573      	cmp	r3, lr
 8007be0:	d0e4      	beq.n	8007bac <__ieee754_atan2+0x84>
 8007be2:	1a9b      	subs	r3, r3, r2
 8007be4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007be8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007bec:	da1e      	bge.n	8007c2c <__ieee754_atan2+0x104>
 8007bee:	2f00      	cmp	r7, #0
 8007bf0:	da01      	bge.n	8007bf6 <__ieee754_atan2+0xce>
 8007bf2:	323c      	adds	r2, #60	; 0x3c
 8007bf4:	db1e      	blt.n	8007c34 <__ieee754_atan2+0x10c>
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	f7f8 fdcb 	bl	8000794 <__aeabi_ddiv>
 8007bfe:	ec41 0b10 	vmov	d0, r0, r1
 8007c02:	f000 faad 	bl	8008160 <fabs>
 8007c06:	f000 f90b 	bl	8007e20 <atan>
 8007c0a:	ec51 0b10 	vmov	r0, r1, d0
 8007c0e:	2c01      	cmp	r4, #1
 8007c10:	d013      	beq.n	8007c3a <__ieee754_atan2+0x112>
 8007c12:	2c02      	cmp	r4, #2
 8007c14:	d015      	beq.n	8007c42 <__ieee754_atan2+0x11a>
 8007c16:	2c00      	cmp	r4, #0
 8007c18:	d0a7      	beq.n	8007b6a <__ieee754_atan2+0x42>
 8007c1a:	a319      	add	r3, pc, #100	; (adr r3, 8007c80 <__ieee754_atan2+0x158>)
 8007c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c20:	f7f8 fad6 	bl	80001d0 <__aeabi_dsub>
 8007c24:	a318      	add	r3, pc, #96	; (adr r3, 8007c88 <__ieee754_atan2+0x160>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	e014      	b.n	8007c56 <__ieee754_atan2+0x12e>
 8007c2c:	a118      	add	r1, pc, #96	; (adr r1, 8007c90 <__ieee754_atan2+0x168>)
 8007c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c32:	e7ec      	b.n	8007c0e <__ieee754_atan2+0xe6>
 8007c34:	2000      	movs	r0, #0
 8007c36:	2100      	movs	r1, #0
 8007c38:	e7e9      	b.n	8007c0e <__ieee754_atan2+0xe6>
 8007c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c3e:	4619      	mov	r1, r3
 8007c40:	e793      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007c42:	a30f      	add	r3, pc, #60	; (adr r3, 8007c80 <__ieee754_atan2+0x158>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f7f8 fac2 	bl	80001d0 <__aeabi_dsub>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	a10d      	add	r1, pc, #52	; (adr r1, 8007c88 <__ieee754_atan2+0x160>)
 8007c52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c56:	f7f8 fabb 	bl	80001d0 <__aeabi_dsub>
 8007c5a:	e786      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007c5c:	a10a      	add	r1, pc, #40	; (adr r1, 8007c88 <__ieee754_atan2+0x160>)
 8007c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c62:	e782      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007c64:	a10c      	add	r1, pc, #48	; (adr r1, 8007c98 <__ieee754_atan2+0x170>)
 8007c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c6a:	e77e      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	2100      	movs	r1, #0
 8007c70:	e77b      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007c72:	a107      	add	r1, pc, #28	; (adr r1, 8007c90 <__ieee754_atan2+0x168>)
 8007c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c78:	e777      	b.n	8007b6a <__ieee754_atan2+0x42>
 8007c7a:	bf00      	nop
 8007c7c:	f3af 8000 	nop.w
 8007c80:	33145c07 	.word	0x33145c07
 8007c84:	3ca1a626 	.word	0x3ca1a626
 8007c88:	54442d18 	.word	0x54442d18
 8007c8c:	400921fb 	.word	0x400921fb
 8007c90:	54442d18 	.word	0x54442d18
 8007c94:	3ff921fb 	.word	0x3ff921fb
 8007c98:	54442d18 	.word	0x54442d18
 8007c9c:	3fe921fb 	.word	0x3fe921fb
 8007ca0:	08008238 	.word	0x08008238
 8007ca4:	08008250 	.word	0x08008250
 8007ca8:	54442d18 	.word	0x54442d18
 8007cac:	c00921fb 	.word	0xc00921fb
 8007cb0:	54442d18 	.word	0x54442d18
 8007cb4:	bff921fb 	.word	0xbff921fb
 8007cb8:	7ff00000 	.word	0x7ff00000

08007cbc <__ieee754_sqrt>:
 8007cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc0:	ec55 4b10 	vmov	r4, r5, d0
 8007cc4:	4e55      	ldr	r6, [pc, #340]	; (8007e1c <__ieee754_sqrt+0x160>)
 8007cc6:	43ae      	bics	r6, r5
 8007cc8:	ee10 0a10 	vmov	r0, s0
 8007ccc:	ee10 3a10 	vmov	r3, s0
 8007cd0:	462a      	mov	r2, r5
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	d110      	bne.n	8007cf8 <__ieee754_sqrt+0x3c>
 8007cd6:	ee10 2a10 	vmov	r2, s0
 8007cda:	462b      	mov	r3, r5
 8007cdc:	f7f8 fc30 	bl	8000540 <__aeabi_dmul>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	4629      	mov	r1, r5
 8007ce8:	f7f8 fa74 	bl	80001d4 <__adddf3>
 8007cec:	4604      	mov	r4, r0
 8007cee:	460d      	mov	r5, r1
 8007cf0:	ec45 4b10 	vmov	d0, r4, r5
 8007cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf8:	2d00      	cmp	r5, #0
 8007cfa:	dc10      	bgt.n	8007d1e <__ieee754_sqrt+0x62>
 8007cfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007d00:	4330      	orrs	r0, r6
 8007d02:	d0f5      	beq.n	8007cf0 <__ieee754_sqrt+0x34>
 8007d04:	b15d      	cbz	r5, 8007d1e <__ieee754_sqrt+0x62>
 8007d06:	ee10 2a10 	vmov	r2, s0
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	ee10 0a10 	vmov	r0, s0
 8007d10:	f7f8 fa5e 	bl	80001d0 <__aeabi_dsub>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	f7f8 fd3c 	bl	8000794 <__aeabi_ddiv>
 8007d1c:	e7e6      	b.n	8007cec <__ieee754_sqrt+0x30>
 8007d1e:	1512      	asrs	r2, r2, #20
 8007d20:	d074      	beq.n	8007e0c <__ieee754_sqrt+0x150>
 8007d22:	07d4      	lsls	r4, r2, #31
 8007d24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007d28:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007d2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007d30:	bf5e      	ittt	pl
 8007d32:	0fda      	lsrpl	r2, r3, #31
 8007d34:	005b      	lslpl	r3, r3, #1
 8007d36:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007d3a:	2400      	movs	r4, #0
 8007d3c:	0fda      	lsrs	r2, r3, #31
 8007d3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007d42:	107f      	asrs	r7, r7, #1
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	2516      	movs	r5, #22
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007d4e:	1886      	adds	r6, r0, r2
 8007d50:	428e      	cmp	r6, r1
 8007d52:	bfde      	ittt	le
 8007d54:	1b89      	suble	r1, r1, r6
 8007d56:	18b0      	addle	r0, r6, r2
 8007d58:	18a4      	addle	r4, r4, r2
 8007d5a:	0049      	lsls	r1, r1, #1
 8007d5c:	3d01      	subs	r5, #1
 8007d5e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007d62:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007d66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007d6a:	d1f0      	bne.n	8007d4e <__ieee754_sqrt+0x92>
 8007d6c:	462a      	mov	r2, r5
 8007d6e:	f04f 0e20 	mov.w	lr, #32
 8007d72:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007d76:	4281      	cmp	r1, r0
 8007d78:	eb06 0c05 	add.w	ip, r6, r5
 8007d7c:	dc02      	bgt.n	8007d84 <__ieee754_sqrt+0xc8>
 8007d7e:	d113      	bne.n	8007da8 <__ieee754_sqrt+0xec>
 8007d80:	459c      	cmp	ip, r3
 8007d82:	d811      	bhi.n	8007da8 <__ieee754_sqrt+0xec>
 8007d84:	f1bc 0f00 	cmp.w	ip, #0
 8007d88:	eb0c 0506 	add.w	r5, ip, r6
 8007d8c:	da43      	bge.n	8007e16 <__ieee754_sqrt+0x15a>
 8007d8e:	2d00      	cmp	r5, #0
 8007d90:	db41      	blt.n	8007e16 <__ieee754_sqrt+0x15a>
 8007d92:	f100 0801 	add.w	r8, r0, #1
 8007d96:	1a09      	subs	r1, r1, r0
 8007d98:	459c      	cmp	ip, r3
 8007d9a:	bf88      	it	hi
 8007d9c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8007da0:	eba3 030c 	sub.w	r3, r3, ip
 8007da4:	4432      	add	r2, r6
 8007da6:	4640      	mov	r0, r8
 8007da8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007dac:	f1be 0e01 	subs.w	lr, lr, #1
 8007db0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8007db4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007db8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007dbc:	d1db      	bne.n	8007d76 <__ieee754_sqrt+0xba>
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	d006      	beq.n	8007dd0 <__ieee754_sqrt+0x114>
 8007dc2:	1c50      	adds	r0, r2, #1
 8007dc4:	bf13      	iteet	ne
 8007dc6:	3201      	addne	r2, #1
 8007dc8:	3401      	addeq	r4, #1
 8007dca:	4672      	moveq	r2, lr
 8007dcc:	f022 0201 	bicne.w	r2, r2, #1
 8007dd0:	1063      	asrs	r3, r4, #1
 8007dd2:	0852      	lsrs	r2, r2, #1
 8007dd4:	07e1      	lsls	r1, r4, #31
 8007dd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007dda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007dde:	bf48      	it	mi
 8007de0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007de4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007de8:	4614      	mov	r4, r2
 8007dea:	e781      	b.n	8007cf0 <__ieee754_sqrt+0x34>
 8007dec:	0ad9      	lsrs	r1, r3, #11
 8007dee:	3815      	subs	r0, #21
 8007df0:	055b      	lsls	r3, r3, #21
 8007df2:	2900      	cmp	r1, #0
 8007df4:	d0fa      	beq.n	8007dec <__ieee754_sqrt+0x130>
 8007df6:	02cd      	lsls	r5, r1, #11
 8007df8:	d50a      	bpl.n	8007e10 <__ieee754_sqrt+0x154>
 8007dfa:	f1c2 0420 	rsb	r4, r2, #32
 8007dfe:	fa23 f404 	lsr.w	r4, r3, r4
 8007e02:	1e55      	subs	r5, r2, #1
 8007e04:	4093      	lsls	r3, r2
 8007e06:	4321      	orrs	r1, r4
 8007e08:	1b42      	subs	r2, r0, r5
 8007e0a:	e78a      	b.n	8007d22 <__ieee754_sqrt+0x66>
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	e7f0      	b.n	8007df2 <__ieee754_sqrt+0x136>
 8007e10:	0049      	lsls	r1, r1, #1
 8007e12:	3201      	adds	r2, #1
 8007e14:	e7ef      	b.n	8007df6 <__ieee754_sqrt+0x13a>
 8007e16:	4680      	mov	r8, r0
 8007e18:	e7bd      	b.n	8007d96 <__ieee754_sqrt+0xda>
 8007e1a:	bf00      	nop
 8007e1c:	7ff00000 	.word	0x7ff00000

08007e20 <atan>:
 8007e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	ec55 4b10 	vmov	r4, r5, d0
 8007e28:	4bc3      	ldr	r3, [pc, #780]	; (8008138 <atan+0x318>)
 8007e2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007e2e:	429e      	cmp	r6, r3
 8007e30:	46ab      	mov	fp, r5
 8007e32:	dd18      	ble.n	8007e66 <atan+0x46>
 8007e34:	4bc1      	ldr	r3, [pc, #772]	; (800813c <atan+0x31c>)
 8007e36:	429e      	cmp	r6, r3
 8007e38:	dc01      	bgt.n	8007e3e <atan+0x1e>
 8007e3a:	d109      	bne.n	8007e50 <atan+0x30>
 8007e3c:	b144      	cbz	r4, 8007e50 <atan+0x30>
 8007e3e:	4622      	mov	r2, r4
 8007e40:	462b      	mov	r3, r5
 8007e42:	4620      	mov	r0, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	f7f8 f9c5 	bl	80001d4 <__adddf3>
 8007e4a:	4604      	mov	r4, r0
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	e006      	b.n	8007e5e <atan+0x3e>
 8007e50:	f1bb 0f00 	cmp.w	fp, #0
 8007e54:	f300 8131 	bgt.w	80080ba <atan+0x29a>
 8007e58:	a59b      	add	r5, pc, #620	; (adr r5, 80080c8 <atan+0x2a8>)
 8007e5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e5e:	ec45 4b10 	vmov	d0, r4, r5
 8007e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e66:	4bb6      	ldr	r3, [pc, #728]	; (8008140 <atan+0x320>)
 8007e68:	429e      	cmp	r6, r3
 8007e6a:	dc14      	bgt.n	8007e96 <atan+0x76>
 8007e6c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007e70:	429e      	cmp	r6, r3
 8007e72:	dc0d      	bgt.n	8007e90 <atan+0x70>
 8007e74:	a396      	add	r3, pc, #600	; (adr r3, 80080d0 <atan+0x2b0>)
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	ee10 0a10 	vmov	r0, s0
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7f8 f9a8 	bl	80001d4 <__adddf3>
 8007e84:	4baf      	ldr	r3, [pc, #700]	; (8008144 <atan+0x324>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	f7f8 fdea 	bl	8000a60 <__aeabi_dcmpgt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d1e6      	bne.n	8007e5e <atan+0x3e>
 8007e90:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007e94:	e02b      	b.n	8007eee <atan+0xce>
 8007e96:	f000 f963 	bl	8008160 <fabs>
 8007e9a:	4bab      	ldr	r3, [pc, #684]	; (8008148 <atan+0x328>)
 8007e9c:	429e      	cmp	r6, r3
 8007e9e:	ec55 4b10 	vmov	r4, r5, d0
 8007ea2:	f300 80bf 	bgt.w	8008024 <atan+0x204>
 8007ea6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007eaa:	429e      	cmp	r6, r3
 8007eac:	f300 80a0 	bgt.w	8007ff0 <atan+0x1d0>
 8007eb0:	ee10 2a10 	vmov	r2, s0
 8007eb4:	ee10 0a10 	vmov	r0, s0
 8007eb8:	462b      	mov	r3, r5
 8007eba:	4629      	mov	r1, r5
 8007ebc:	f7f8 f98a 	bl	80001d4 <__adddf3>
 8007ec0:	4ba0      	ldr	r3, [pc, #640]	; (8008144 <atan+0x324>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f7f8 f984 	bl	80001d0 <__aeabi_dsub>
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460f      	mov	r7, r1
 8007ece:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	f7f8 f97d 	bl	80001d4 <__adddf3>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4630      	mov	r0, r6
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	f7f8 fc57 	bl	8000794 <__aeabi_ddiv>
 8007ee6:	f04f 0a00 	mov.w	sl, #0
 8007eea:	4604      	mov	r4, r0
 8007eec:	460d      	mov	r5, r1
 8007eee:	4622      	mov	r2, r4
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	f7f8 fb23 	bl	8000540 <__aeabi_dmul>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4680      	mov	r8, r0
 8007f00:	4689      	mov	r9, r1
 8007f02:	f7f8 fb1d 	bl	8000540 <__aeabi_dmul>
 8007f06:	a374      	add	r3, pc, #464	; (adr r3, 80080d8 <atan+0x2b8>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	460f      	mov	r7, r1
 8007f10:	f7f8 fb16 	bl	8000540 <__aeabi_dmul>
 8007f14:	a372      	add	r3, pc, #456	; (adr r3, 80080e0 <atan+0x2c0>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 f95b 	bl	80001d4 <__adddf3>
 8007f1e:	4632      	mov	r2, r6
 8007f20:	463b      	mov	r3, r7
 8007f22:	f7f8 fb0d 	bl	8000540 <__aeabi_dmul>
 8007f26:	a370      	add	r3, pc, #448	; (adr r3, 80080e8 <atan+0x2c8>)
 8007f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2c:	f7f8 f952 	bl	80001d4 <__adddf3>
 8007f30:	4632      	mov	r2, r6
 8007f32:	463b      	mov	r3, r7
 8007f34:	f7f8 fb04 	bl	8000540 <__aeabi_dmul>
 8007f38:	a36d      	add	r3, pc, #436	; (adr r3, 80080f0 <atan+0x2d0>)
 8007f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3e:	f7f8 f949 	bl	80001d4 <__adddf3>
 8007f42:	4632      	mov	r2, r6
 8007f44:	463b      	mov	r3, r7
 8007f46:	f7f8 fafb 	bl	8000540 <__aeabi_dmul>
 8007f4a:	a36b      	add	r3, pc, #428	; (adr r3, 80080f8 <atan+0x2d8>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	f7f8 f940 	bl	80001d4 <__adddf3>
 8007f54:	4632      	mov	r2, r6
 8007f56:	463b      	mov	r3, r7
 8007f58:	f7f8 faf2 	bl	8000540 <__aeabi_dmul>
 8007f5c:	a368      	add	r3, pc, #416	; (adr r3, 8008100 <atan+0x2e0>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f937 	bl	80001d4 <__adddf3>
 8007f66:	4642      	mov	r2, r8
 8007f68:	464b      	mov	r3, r9
 8007f6a:	f7f8 fae9 	bl	8000540 <__aeabi_dmul>
 8007f6e:	a366      	add	r3, pc, #408	; (adr r3, 8008108 <atan+0x2e8>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	4680      	mov	r8, r0
 8007f76:	4689      	mov	r9, r1
 8007f78:	4630      	mov	r0, r6
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f7f8 fae0 	bl	8000540 <__aeabi_dmul>
 8007f80:	a363      	add	r3, pc, #396	; (adr r3, 8008110 <atan+0x2f0>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 f923 	bl	80001d0 <__aeabi_dsub>
 8007f8a:	4632      	mov	r2, r6
 8007f8c:	463b      	mov	r3, r7
 8007f8e:	f7f8 fad7 	bl	8000540 <__aeabi_dmul>
 8007f92:	a361      	add	r3, pc, #388	; (adr r3, 8008118 <atan+0x2f8>)
 8007f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f98:	f7f8 f91a 	bl	80001d0 <__aeabi_dsub>
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	f7f8 face 	bl	8000540 <__aeabi_dmul>
 8007fa4:	a35e      	add	r3, pc, #376	; (adr r3, 8008120 <atan+0x300>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f911 	bl	80001d0 <__aeabi_dsub>
 8007fae:	4632      	mov	r2, r6
 8007fb0:	463b      	mov	r3, r7
 8007fb2:	f7f8 fac5 	bl	8000540 <__aeabi_dmul>
 8007fb6:	a35c      	add	r3, pc, #368	; (adr r3, 8008128 <atan+0x308>)
 8007fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbc:	f7f8 f908 	bl	80001d0 <__aeabi_dsub>
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	463b      	mov	r3, r7
 8007fc4:	f7f8 fabc 	bl	8000540 <__aeabi_dmul>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4640      	mov	r0, r8
 8007fce:	4649      	mov	r1, r9
 8007fd0:	f7f8 f900 	bl	80001d4 <__adddf3>
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	462b      	mov	r3, r5
 8007fd8:	f7f8 fab2 	bl	8000540 <__aeabi_dmul>
 8007fdc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	d14b      	bne.n	800807e <atan+0x25e>
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f7f8 f8f1 	bl	80001d0 <__aeabi_dsub>
 8007fee:	e72c      	b.n	8007e4a <atan+0x2a>
 8007ff0:	ee10 0a10 	vmov	r0, s0
 8007ff4:	4b53      	ldr	r3, [pc, #332]	; (8008144 <atan+0x324>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 f8e9 	bl	80001d0 <__aeabi_dsub>
 8007ffe:	4b51      	ldr	r3, [pc, #324]	; (8008144 <atan+0x324>)
 8008000:	4606      	mov	r6, r0
 8008002:	460f      	mov	r7, r1
 8008004:	2200      	movs	r2, #0
 8008006:	4620      	mov	r0, r4
 8008008:	4629      	mov	r1, r5
 800800a:	f7f8 f8e3 	bl	80001d4 <__adddf3>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4630      	mov	r0, r6
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 fbbd 	bl	8000794 <__aeabi_ddiv>
 800801a:	f04f 0a01 	mov.w	sl, #1
 800801e:	4604      	mov	r4, r0
 8008020:	460d      	mov	r5, r1
 8008022:	e764      	b.n	8007eee <atan+0xce>
 8008024:	4b49      	ldr	r3, [pc, #292]	; (800814c <atan+0x32c>)
 8008026:	429e      	cmp	r6, r3
 8008028:	da1d      	bge.n	8008066 <atan+0x246>
 800802a:	ee10 0a10 	vmov	r0, s0
 800802e:	4b48      	ldr	r3, [pc, #288]	; (8008150 <atan+0x330>)
 8008030:	2200      	movs	r2, #0
 8008032:	4629      	mov	r1, r5
 8008034:	f7f8 f8cc 	bl	80001d0 <__aeabi_dsub>
 8008038:	4b45      	ldr	r3, [pc, #276]	; (8008150 <atan+0x330>)
 800803a:	4606      	mov	r6, r0
 800803c:	460f      	mov	r7, r1
 800803e:	2200      	movs	r2, #0
 8008040:	4620      	mov	r0, r4
 8008042:	4629      	mov	r1, r5
 8008044:	f7f8 fa7c 	bl	8000540 <__aeabi_dmul>
 8008048:	4b3e      	ldr	r3, [pc, #248]	; (8008144 <atan+0x324>)
 800804a:	2200      	movs	r2, #0
 800804c:	f7f8 f8c2 	bl	80001d4 <__adddf3>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4630      	mov	r0, r6
 8008056:	4639      	mov	r1, r7
 8008058:	f7f8 fb9c 	bl	8000794 <__aeabi_ddiv>
 800805c:	f04f 0a02 	mov.w	sl, #2
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	e743      	b.n	8007eee <atan+0xce>
 8008066:	462b      	mov	r3, r5
 8008068:	ee10 2a10 	vmov	r2, s0
 800806c:	4939      	ldr	r1, [pc, #228]	; (8008154 <atan+0x334>)
 800806e:	2000      	movs	r0, #0
 8008070:	f7f8 fb90 	bl	8000794 <__aeabi_ddiv>
 8008074:	f04f 0a03 	mov.w	sl, #3
 8008078:	4604      	mov	r4, r0
 800807a:	460d      	mov	r5, r1
 800807c:	e737      	b.n	8007eee <atan+0xce>
 800807e:	4b36      	ldr	r3, [pc, #216]	; (8008158 <atan+0x338>)
 8008080:	4e36      	ldr	r6, [pc, #216]	; (800815c <atan+0x33c>)
 8008082:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008086:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800808a:	e9da 2300 	ldrd	r2, r3, [sl]
 800808e:	f7f8 f89f 	bl	80001d0 <__aeabi_dsub>
 8008092:	4622      	mov	r2, r4
 8008094:	462b      	mov	r3, r5
 8008096:	f7f8 f89b 	bl	80001d0 <__aeabi_dsub>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	e9d6 0100 	ldrd	r0, r1, [r6]
 80080a2:	f7f8 f895 	bl	80001d0 <__aeabi_dsub>
 80080a6:	f1bb 0f00 	cmp.w	fp, #0
 80080aa:	4604      	mov	r4, r0
 80080ac:	460d      	mov	r5, r1
 80080ae:	f6bf aed6 	bge.w	8007e5e <atan+0x3e>
 80080b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080b6:	461d      	mov	r5, r3
 80080b8:	e6d1      	b.n	8007e5e <atan+0x3e>
 80080ba:	a51d      	add	r5, pc, #116	; (adr r5, 8008130 <atan+0x310>)
 80080bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80080c0:	e6cd      	b.n	8007e5e <atan+0x3e>
 80080c2:	bf00      	nop
 80080c4:	f3af 8000 	nop.w
 80080c8:	54442d18 	.word	0x54442d18
 80080cc:	bff921fb 	.word	0xbff921fb
 80080d0:	8800759c 	.word	0x8800759c
 80080d4:	7e37e43c 	.word	0x7e37e43c
 80080d8:	e322da11 	.word	0xe322da11
 80080dc:	3f90ad3a 	.word	0x3f90ad3a
 80080e0:	24760deb 	.word	0x24760deb
 80080e4:	3fa97b4b 	.word	0x3fa97b4b
 80080e8:	a0d03d51 	.word	0xa0d03d51
 80080ec:	3fb10d66 	.word	0x3fb10d66
 80080f0:	c54c206e 	.word	0xc54c206e
 80080f4:	3fb745cd 	.word	0x3fb745cd
 80080f8:	920083ff 	.word	0x920083ff
 80080fc:	3fc24924 	.word	0x3fc24924
 8008100:	5555550d 	.word	0x5555550d
 8008104:	3fd55555 	.word	0x3fd55555
 8008108:	2c6a6c2f 	.word	0x2c6a6c2f
 800810c:	bfa2b444 	.word	0xbfa2b444
 8008110:	52defd9a 	.word	0x52defd9a
 8008114:	3fadde2d 	.word	0x3fadde2d
 8008118:	af749a6d 	.word	0xaf749a6d
 800811c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008120:	fe231671 	.word	0xfe231671
 8008124:	3fbc71c6 	.word	0x3fbc71c6
 8008128:	9998ebc4 	.word	0x9998ebc4
 800812c:	3fc99999 	.word	0x3fc99999
 8008130:	54442d18 	.word	0x54442d18
 8008134:	3ff921fb 	.word	0x3ff921fb
 8008138:	440fffff 	.word	0x440fffff
 800813c:	7ff00000 	.word	0x7ff00000
 8008140:	3fdbffff 	.word	0x3fdbffff
 8008144:	3ff00000 	.word	0x3ff00000
 8008148:	3ff2ffff 	.word	0x3ff2ffff
 800814c:	40038000 	.word	0x40038000
 8008150:	3ff80000 	.word	0x3ff80000
 8008154:	bff00000 	.word	0xbff00000
 8008158:	08008288 	.word	0x08008288
 800815c:	08008268 	.word	0x08008268

08008160 <fabs>:
 8008160:	ec51 0b10 	vmov	r0, r1, d0
 8008164:	ee10 2a10 	vmov	r2, s0
 8008168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800816c:	ec43 2b10 	vmov	d0, r2, r3
 8008170:	4770      	bx	lr
 8008172:	0000      	movs	r0, r0
 8008174:	0000      	movs	r0, r0
	...

08008178 <nan>:
 8008178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008180 <nan+0x8>
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	00000000 	.word	0x00000000
 8008184:	7ff80000 	.word	0x7ff80000

08008188 <_init>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr

08008194 <_fini>:
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	bf00      	nop
 8008198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819a:	bc08      	pop	{r3}
 800819c:	469e      	mov	lr, r3
 800819e:	4770      	bx	lr
