
imu_adc_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082c0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08008448  08008448  00018448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008550  08008550  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08008550  08008550  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008550  08008550  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          000002bc  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000354  20000354  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121cc  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002231  00000000  00000000  00032294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec0  00000000  00000000  000344c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000db8  00000000  00000000  00035388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002324  00000000  00000000  00036140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001121c  00000000  00000000  00038464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b623b  00000000  00000000  00049680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ff8bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004268  00000000  00000000  000ff90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008430 	.word	0x08008430

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	08008430 	.word	0x08008430

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <calculate_orientation>:

/*
 * Estimate orientation based on previous quaternion values. 
 * Runs Madgwick, Madgwick output quaternion to relative Euler angles, and remaps angles to gimbal potentiometer percentages.
 */
void calculate_orientation(float delta_time) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	ed87 0a01 	vstr	s0, [r7, #4]
	float sample_freq;
	#ifdef sampleFreq
	sample_freq = sampleFreq;
 8000b4a:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8000b4e:	60fb      	str	r3, [r7, #12]
	#else
	sample_freq = convert_period_to_freq(delta_time);
	#endif /* sampleFreq */

	MadgwickAHRSupdate(gyro.gyro.x, gyro.gyro.y, gyro.gyro.z, accel.acceleration.x, accel.acceleration.y, accel.acceleration.z, mag.magnetic.x, mag.magnetic.y, mag.magnetic.z, sample_freq); // gyro, accel, mag are sensors_type_t
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <calculate_orientation+0x78>)
 8000b52:	edd3 7a00 	vldr	s15, [r3]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <calculate_orientation+0x78>)
 8000b58:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <calculate_orientation+0x78>)
 8000b5e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <calculate_orientation+0x7c>)
 8000b64:	ed93 6a00 	vldr	s12, [r3]
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <calculate_orientation+0x7c>)
 8000b6a:	edd3 5a01 	vldr	s11, [r3, #4]
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <calculate_orientation+0x7c>)
 8000b70:	ed93 5a02 	vldr	s10, [r3, #8]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <calculate_orientation+0x80>)
 8000b76:	ed93 3a00 	vldr	s6, [r3]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <calculate_orientation+0x80>)
 8000b7c:	edd3 3a01 	vldr	s7, [r3, #4]
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <calculate_orientation+0x80>)
 8000b82:	ed93 4a02 	vldr	s8, [r3, #8]
 8000b86:	edd7 4a03 	vldr	s9, [r7, #12]
 8000b8a:	eef0 2a45 	vmov.f32	s5, s10
 8000b8e:	eeb0 2a65 	vmov.f32	s4, s11
 8000b92:	eef0 1a46 	vmov.f32	s3, s12
 8000b96:	eeb0 1a66 	vmov.f32	s2, s13
 8000b9a:	eef0 0a47 	vmov.f32	s1, s14
 8000b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba2:	f000 f977 	bl	8000e94 <MadgwickAHRSupdate>
	convert_quaternion_to_euler();
 8000ba6:	f000 f8a5 	bl	8000cf4 <convert_quaternion_to_euler>
	remap_angles_to_gimbals();
 8000baa:	f000 f80d 	bl	8000bc8 <remap_angles_to_gimbals>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200002f0 	.word	0x200002f0
 8000bbc:	200002fc 	.word	0x200002fc
 8000bc0:	20000308 	.word	0x20000308
 8000bc4:	00000000 	.word	0x00000000

08000bc8 <remap_angles_to_gimbals>:

/*
 * Remapping only consists of pitch and roll
 */
void remap_angles_to_gimbals() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	remapped_angle_x = (angle_x + atan2_offset) / (2 * M_PI);
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <remap_angles_to_gimbals+0xd0>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fc5d 	bl	8000490 <__aeabi_f2d>
 8000bd6:	a32a      	add	r3, pc, #168	; (adr r3, 8000c80 <remap_angles_to_gimbals+0xb8>)
 8000bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bdc:	f7ff fafa 	bl	80001d4 <__adddf3>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	4610      	mov	r0, r2
 8000be6:	4619      	mov	r1, r3
 8000be8:	a327      	add	r3, pc, #156	; (adr r3, 8000c88 <remap_angles_to_gimbals+0xc0>)
 8000bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bee:	f7ff fdd1 	bl	8000794 <__aeabi_ddiv>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff ff51 	bl	8000aa0 <__aeabi_d2f>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a26      	ldr	r2, [pc, #152]	; (8000c9c <remap_angles_to_gimbals+0xd4>)
 8000c02:	6013      	str	r3, [r2, #0]
	remapped_angle_y = (angle_y + asin_offset) / (M_PI);
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <remap_angles_to_gimbals+0xd8>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fc41 	bl	8000490 <__aeabi_f2d>
 8000c0e:	a320      	add	r3, pc, #128	; (adr r3, 8000c90 <remap_angles_to_gimbals+0xc8>)
 8000c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c14:	f7ff fade 	bl	80001d4 <__adddf3>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	4610      	mov	r0, r2
 8000c1e:	4619      	mov	r1, r3
 8000c20:	a317      	add	r3, pc, #92	; (adr r3, 8000c80 <remap_angles_to_gimbals+0xb8>)
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f7ff fdb5 	bl	8000794 <__aeabi_ddiv>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	f7ff ff35 	bl	8000aa0 <__aeabi_d2f>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a1a      	ldr	r2, [pc, #104]	; (8000ca4 <remap_angles_to_gimbals+0xdc>)
 8000c3a:	6013      	str	r3, [r2, #0]
	gimbal_roll = lerp(0, 1, remapped_angle_x);
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <remap_angles_to_gimbals+0xd4>)
 8000c3e:	edd3 7a00 	vldr	s15, [r3]
 8000c42:	eeb0 1a67 	vmov.f32	s2, s15
 8000c46:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c4a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000ca8 <remap_angles_to_gimbals+0xe0>
 8000c4e:	f003 f9a4 	bl	8003f9a <lerp>
 8000c52:	eef0 7a40 	vmov.f32	s15, s0
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <remap_angles_to_gimbals+0xe4>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
	gimbal_pitch = lerp(0, 1, remapped_angle_y);
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <remap_angles_to_gimbals+0xdc>)
 8000c5e:	edd3 7a00 	vldr	s15, [r3]
 8000c62:	eeb0 1a67 	vmov.f32	s2, s15
 8000c66:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000c6a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000ca8 <remap_angles_to_gimbals+0xe0>
 8000c6e:	f003 f994 	bl	8003f9a <lerp>
 8000c72:	eef0 7a40 	vmov.f32	s15, s0
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <remap_angles_to_gimbals+0xe8>)
 8000c78:	edc3 7a00 	vstr	s15, [r3]
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	54442d18 	.word	0x54442d18
 8000c84:	400921fb 	.word	0x400921fb
 8000c88:	54442d18 	.word	0x54442d18
 8000c8c:	401921fb 	.word	0x401921fb
 8000c90:	54442d18 	.word	0x54442d18
 8000c94:	3ff921fb 	.word	0x3ff921fb
 8000c98:	200002dc 	.word	0x200002dc
 8000c9c:	200000b4 	.word	0x200000b4
 8000ca0:	200002e0 	.word	0x200002e0
 8000ca4:	200000b8 	.word	0x200000b8
 8000ca8:	00000000 	.word	0x00000000
 8000cac:	200002e8 	.word	0x200002e8
 8000cb0:	200002ec 	.word	0x200002ec

08000cb4 <reset_aux_frame>:

/*
 * Remapping only consists of pitch and roll
 */
void reset_aux_frame() {
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
	q0 = 1.0f;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <reset_aux_frame+0x30>)
 8000cba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000cbe:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <reset_aux_frame+0x34>)
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <reset_aux_frame+0x38>)
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <reset_aux_frame+0x3c>)
 8000cd2:	f04f 0200 	mov.w	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000024 	.word	0x20000024
 8000ce8:	200002d0 	.word	0x200002d0
 8000cec:	200002d4 	.word	0x200002d4
 8000cf0:	200002d8 	.word	0x200002d8

08000cf4 <convert_quaternion_to_euler>:

/*
 * Remapping only consists of pitch and roll
 */
void convert_quaternion_to_euler() {
 8000cf4:	b5b0      	push	{r4, r5, r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	// angle_x is roll; angle_y is pitch; angle_z is yaw
    angle_x = atan2(2 * (q0 * q1 + q2 * q3), 1 - 2 * (q1 * q1 + q2 * q2));
 8000cf8:	4b5f      	ldr	r3, [pc, #380]	; (8000e78 <convert_quaternion_to_euler+0x184>)
 8000cfa:	ed93 7a00 	vldr	s14, [r3]
 8000cfe:	4b5f      	ldr	r3, [pc, #380]	; (8000e7c <convert_quaternion_to_euler+0x188>)
 8000d00:	edd3 7a00 	vldr	s15, [r3]
 8000d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d08:	4b5d      	ldr	r3, [pc, #372]	; (8000e80 <convert_quaternion_to_euler+0x18c>)
 8000d0a:	edd3 6a00 	vldr	s13, [r3]
 8000d0e:	4b5d      	ldr	r3, [pc, #372]	; (8000e84 <convert_quaternion_to_euler+0x190>)
 8000d10:	edd3 7a00 	vldr	s15, [r3]
 8000d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d20:	ee17 0a90 	vmov	r0, s15
 8000d24:	f7ff fbb4 	bl	8000490 <__aeabi_f2d>
 8000d28:	4604      	mov	r4, r0
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4b53      	ldr	r3, [pc, #332]	; (8000e7c <convert_quaternion_to_euler+0x188>)
 8000d2e:	ed93 7a00 	vldr	s14, [r3]
 8000d32:	4b52      	ldr	r3, [pc, #328]	; (8000e7c <convert_quaternion_to_euler+0x188>)
 8000d34:	edd3 7a00 	vldr	s15, [r3]
 8000d38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d3c:	4b50      	ldr	r3, [pc, #320]	; (8000e80 <convert_quaternion_to_euler+0x18c>)
 8000d3e:	edd3 6a00 	vldr	s13, [r3]
 8000d42:	4b4f      	ldr	r3, [pc, #316]	; (8000e80 <convert_quaternion_to_euler+0x18c>)
 8000d44:	edd3 7a00 	vldr	s15, [r3]
 8000d48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d5c:	ee17 0a90 	vmov	r0, s15
 8000d60:	f7ff fb96 	bl	8000490 <__aeabi_f2d>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	ec43 2b11 	vmov	d1, r2, r3
 8000d6c:	ec45 4b10 	vmov	d0, r4, r5
 8000d70:	f006 fdec 	bl	800794c <atan2>
 8000d74:	ec53 2b10 	vmov	r2, r3, d0
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f7ff fe90 	bl	8000aa0 <__aeabi_d2f>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <convert_quaternion_to_euler+0x194>)
 8000d84:	6013      	str	r3, [r2, #0]
    angle_y = asin(clamp(2 * (q0 * q1 - q3 * q2), -1, 1));
 8000d86:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <convert_quaternion_to_euler+0x184>)
 8000d88:	ed93 7a00 	vldr	s14, [r3]
 8000d8c:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <convert_quaternion_to_euler+0x188>)
 8000d8e:	edd3 7a00 	vldr	s15, [r3]
 8000d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d96:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <convert_quaternion_to_euler+0x190>)
 8000d98:	edd3 6a00 	vldr	s13, [r3]
 8000d9c:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <convert_quaternion_to_euler+0x18c>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000daa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000dae:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000db2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8000db6:	eeb0 0a67 	vmov.f32	s0, s15
 8000dba:	f003 f8c5 	bl	8003f48 <clamp>
 8000dbe:	ee10 3a10 	vmov	r3, s0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fb64 	bl	8000490 <__aeabi_f2d>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	ec43 2b10 	vmov	d0, r2, r3
 8000dd0:	f006 fd88 	bl	80078e4 <asin>
 8000dd4:	ec53 2b10 	vmov	r2, r3, d0
 8000dd8:	4610      	mov	r0, r2
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f7ff fe60 	bl	8000aa0 <__aeabi_d2f>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a2a      	ldr	r2, [pc, #168]	; (8000e8c <convert_quaternion_to_euler+0x198>)
 8000de4:	6013      	str	r3, [r2, #0]
    angle_z = atan2(2 * (q0 * q3 + q1 * q2), 1 - 2 * (q2 * q2 + q3 * q3));
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <convert_quaternion_to_euler+0x184>)
 8000de8:	ed93 7a00 	vldr	s14, [r3]
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <convert_quaternion_to_euler+0x190>)
 8000dee:	edd3 7a00 	vldr	s15, [r3]
 8000df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <convert_quaternion_to_euler+0x188>)
 8000df8:	edd3 6a00 	vldr	s13, [r3]
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <convert_quaternion_to_euler+0x18c>)
 8000dfe:	edd3 7a00 	vldr	s15, [r3]
 8000e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e0e:	ee17 0a90 	vmov	r0, s15
 8000e12:	f7ff fb3d 	bl	8000490 <__aeabi_f2d>
 8000e16:	4604      	mov	r4, r0
 8000e18:	460d      	mov	r5, r1
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <convert_quaternion_to_euler+0x18c>)
 8000e1c:	ed93 7a00 	vldr	s14, [r3]
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <convert_quaternion_to_euler+0x18c>)
 8000e22:	edd3 7a00 	vldr	s15, [r3]
 8000e26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <convert_quaternion_to_euler+0x190>)
 8000e2c:	edd3 6a00 	vldr	s13, [r3]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <convert_quaternion_to_euler+0x190>)
 8000e32:	edd3 7a00 	vldr	s15, [r3]
 8000e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e4a:	ee17 0a90 	vmov	r0, s15
 8000e4e:	f7ff fb1f 	bl	8000490 <__aeabi_f2d>
 8000e52:	4602      	mov	r2, r0
 8000e54:	460b      	mov	r3, r1
 8000e56:	ec43 2b11 	vmov	d1, r2, r3
 8000e5a:	ec45 4b10 	vmov	d0, r4, r5
 8000e5e:	f006 fd75 	bl	800794c <atan2>
 8000e62:	ec53 2b10 	vmov	r2, r3, d0
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f7ff fe19 	bl	8000aa0 <__aeabi_d2f>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <convert_quaternion_to_euler+0x19c>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	bdb0      	pop	{r4, r5, r7, pc}
 8000e78:	20000024 	.word	0x20000024
 8000e7c:	200002d0 	.word	0x200002d0
 8000e80:	200002d4 	.word	0x200002d4
 8000e84:	200002d8 	.word	0x200002d8
 8000e88:	200002dc 	.word	0x200002dc
 8000e8c:	200002e0 	.word	0x200002e0
 8000e90:	200002e4 	.word	0x200002e4

08000e94 <MadgwickAHRSupdate>:


//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float sample_freq) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0ae      	sub	sp, #184	; 0xb8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8000e9e:	edc7 0a08 	vstr	s1, [r7, #32]
 8000ea2:	ed87 1a07 	vstr	s2, [r7, #28]
 8000ea6:	edc7 1a06 	vstr	s3, [r7, #24]
 8000eaa:	ed87 2a05 	vstr	s4, [r7, #20]
 8000eae:	edc7 2a04 	vstr	s5, [r7, #16]
 8000eb2:	ed87 3a03 	vstr	s6, [r7, #12]
 8000eb6:	edc7 3a02 	vstr	s7, [r7, #8]
 8000eba:	ed87 4a01 	vstr	s8, [r7, #4]
 8000ebe:	edc7 4a00 	vstr	s9, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8000ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	d11f      	bne.n	8000f10 <MadgwickAHRSupdate+0x7c>
 8000ed0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ed4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	d118      	bne.n	8000f10 <MadgwickAHRSupdate+0x7c>
 8000ede:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ee2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	d111      	bne.n	8000f10 <MadgwickAHRSupdate+0x7c>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az, sample_freq);
 8000eec:	ed97 3a00 	vldr	s6, [r7]
 8000ef0:	edd7 2a04 	vldr	s5, [r7, #16]
 8000ef4:	ed97 2a05 	vldr	s4, [r7, #20]
 8000ef8:	edd7 1a06 	vldr	s3, [r7, #24]
 8000efc:	ed97 1a07 	vldr	s2, [r7, #28]
 8000f00:	edd7 0a08 	vldr	s1, [r7, #32]
 8000f04:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8000f08:	f000 feec 	bl	8001ce4 <MadgwickAHRSupdateIMU>
		return;
 8000f0c:	f000 bedc 	b.w	8001cc8 <MadgwickAHRSupdate+0xe34>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000f10:	4be4      	ldr	r3, [pc, #912]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 8000f12:	edd3 7a00 	vldr	s15, [r3]
 8000f16:	eeb1 7a67 	vneg.f32	s14, s15
 8000f1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f22:	4be1      	ldr	r3, [pc, #900]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 8000f24:	edd3 6a00 	vldr	s13, [r3]
 8000f28:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f34:	4bdd      	ldr	r3, [pc, #884]	; (80012ac <MadgwickAHRSupdate+0x418>)
 8000f36:	edd3 6a00 	vldr	s13, [r3]
 8000f3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f4e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000f52:	4bd7      	ldr	r3, [pc, #860]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 8000f54:	ed93 7a00 	vldr	s14, [r3]
 8000f58:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f60:	4bd1      	ldr	r3, [pc, #836]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 8000f62:	edd3 6a00 	vldr	s13, [r3]
 8000f66:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f72:	4bce      	ldr	r3, [pc, #824]	; (80012ac <MadgwickAHRSupdate+0x418>)
 8000f74:	edd3 6a00 	vldr	s13, [r3]
 8000f78:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8000f90:	4bc7      	ldr	r3, [pc, #796]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 8000f92:	ed93 7a00 	vldr	s14, [r3]
 8000f96:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9e:	4bc1      	ldr	r3, [pc, #772]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 8000fa0:	edd3 6a00 	vldr	s13, [r3]
 8000fa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb0:	4bbe      	ldr	r3, [pc, #760]	; (80012ac <MadgwickAHRSupdate+0x418>)
 8000fb2:	edd3 6a00 	vldr	s13, [r3]
 8000fb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8000fce:	4bb8      	ldr	r3, [pc, #736]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 8000fd0:	ed93 7a00 	vldr	s14, [r3]
 8000fd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fdc:	4bb1      	ldr	r3, [pc, #708]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 8000fde:	edd3 6a00 	vldr	s13, [r3]
 8000fe2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fee:	4bae      	ldr	r3, [pc, #696]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 8000ff0:	edd3 6a00 	vldr	s13, [r3]
 8000ff4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001000:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800100c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001010:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	d10e      	bne.n	8001038 <MadgwickAHRSupdate+0x1a4>
 800101a:	edd7 7a05 	vldr	s15, [r7, #20]
 800101e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	d107      	bne.n	8001038 <MadgwickAHRSupdate+0x1a4>
 8001028:	edd7 7a04 	vldr	s15, [r7, #16]
 800102c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	f000 85ac 	beq.w	8001b90 <MadgwickAHRSupdate+0xcfc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001038:	edd7 7a06 	vldr	s15, [r7, #24]
 800103c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001040:	edd7 7a05 	vldr	s15, [r7, #20]
 8001044:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800104c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001050:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	eeb0 0a67 	vmov.f32	s0, s15
 800105c:	f001 f976 	bl	800234c <invSqrt>
 8001060:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001064:	ed97 7a06 	vldr	s14, [r7, #24]
 8001068:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800106c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001070:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001074:	ed97 7a05 	vldr	s14, [r7, #20]
 8001078:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800107c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001080:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001084:	ed97 7a04 	vldr	s14, [r7, #16]
 8001088:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800108c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001090:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001094:	edd7 7a03 	vldr	s15, [r7, #12]
 8001098:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800109c:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	f001 f948 	bl	800234c <invSqrt>
 80010bc:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80010c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010cc:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80010d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80010d4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010dc:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80010e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010e4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80010e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ec:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 80010f0:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80010fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001102:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001106:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001110:	ed97 7a02 	vldr	s14, [r7, #8]
 8001114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001118:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 800111c:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001126:	ed97 7a01 	vldr	s14, [r7, #4]
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001132:	4b5c      	ldr	r3, [pc, #368]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 8001134:	edd3 7a00 	vldr	s15, [r3]
 8001138:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800113c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001144:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001148:	4b59      	ldr	r3, [pc, #356]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001152:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001156:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001160:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800116e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 8001172:	4b4e      	ldr	r3, [pc, #312]	; (80012ac <MadgwickAHRSupdate+0x418>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800117c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001180:	4b4b      	ldr	r3, [pc, #300]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800118a:	4b47      	ldr	r3, [pc, #284]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 8001198:	4b43      	ldr	r3, [pc, #268]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011a2:	4b42      	ldr	r3, [pc, #264]	; (80012ac <MadgwickAHRSupdate+0x418>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ac:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80011b0:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 80011b2:	ed93 7a00 	vldr	s14, [r3]
 80011b6:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 80011b8:	edd3 7a00 	vldr	s15, [r3]
 80011bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80011c4:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 80011c6:	ed93 7a00 	vldr	s14, [r3]
 80011ca:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 80011da:	ed93 7a00 	vldr	s14, [r3]
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e8:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 80011ec:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <MadgwickAHRSupdate+0x41c>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <MadgwickAHRSupdate+0x418>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 8001202:	ed93 7a00 	vldr	s14, [r3]
 8001206:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001210:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001214:	4b23      	ldr	r3, [pc, #140]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 8001216:	ed93 7a00 	vldr	s14, [r3]
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MadgwickAHRSupdate+0x410>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MadgwickAHRSupdate+0x418>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001238:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 800123c:	4b1a      	ldr	r3, [pc, #104]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 800123e:	ed93 7a00 	vldr	s14, [r3]
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 8001252:	ed93 7a00 	vldr	s14, [r3]
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MadgwickAHRSupdate+0x418>)
 8001258:	edd3 7a00 	vldr	s15, [r3]
 800125c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001260:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MadgwickAHRSupdate+0x418>)
 8001266:	ed93 7a00 	vldr	s14, [r3]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MadgwickAHRSupdate+0x418>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001274:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001278:	ed97 7a03 	vldr	s14, [r7, #12]
 800127c:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MadgwickAHRSupdate+0x418>)
 8001286:	edd3 6a00 	vldr	s13, [r3]
 800128a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800128e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001292:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <MadgwickAHRSupdate+0x414>)
 8001298:	edd3 6a00 	vldr	s13, [r3]
 800129c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80012a0:	e008      	b.n	80012b4 <MadgwickAHRSupdate+0x420>
 80012a2:	bf00      	nop
 80012a4:	200002d0 	.word	0x200002d0
 80012a8:	200002d4 	.word	0x200002d4
 80012ac:	200002d8 	.word	0x200002d8
 80012b0:	20000024 	.word	0x20000024
 80012b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80012c0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80012c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012cc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80012d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012d8:	4bf5      	ldr	r3, [pc, #980]	; (80016b0 <MadgwickAHRSupdate+0x81c>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012e6:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80012ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012f2:	4bf0      	ldr	r3, [pc, #960]	; (80016b4 <MadgwickAHRSupdate+0x820>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001300:	edd7 6a03 	vldr	s13, [r7, #12]
 8001304:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001308:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001310:	edd7 6a03 	vldr	s13, [r7, #12]
 8001314:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800131c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001320:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001324:	4be3      	ldr	r3, [pc, #908]	; (80016b4 <MadgwickAHRSupdate+0x820>)
 8001326:	ed93 7a00 	vldr	s14, [r3]
 800132a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800132e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001332:	edd7 6a02 	vldr	s13, [r7, #8]
 8001336:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800133a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001342:	4bdd      	ldr	r3, [pc, #884]	; (80016b8 <MadgwickAHRSupdate+0x824>)
 8001344:	edd3 6a00 	vldr	s13, [r3]
 8001348:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800134c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001350:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001354:	4bd6      	ldr	r3, [pc, #856]	; (80016b0 <MadgwickAHRSupdate+0x81c>)
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001366:	edd7 6a02 	vldr	s13, [r7, #8]
 800136a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800136e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001376:	edd7 6a02 	vldr	s13, [r7, #8]
 800137a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800137e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001382:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001386:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800138a:	edd7 7a01 	vldr	s15, [r7, #4]
 800138e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001392:	4bc8      	ldr	r3, [pc, #800]	; (80016b4 <MadgwickAHRSupdate+0x820>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a0:	edd7 6a02 	vldr	s13, [r7, #8]
 80013a4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80013a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80013b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80013b8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013bc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80013c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	ee17 0a90 	vmov	r0, s15
 80013cc:	f7ff f860 	bl	8000490 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	ec43 2b10 	vmov	d0, r2, r3
 80013d8:	f006 faba 	bl	8007950 <sqrt>
 80013dc:	ec53 2b10 	vmov	r2, r3, d0
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fb5c 	bl	8000aa0 <__aeabi_d2f>
 80013e8:	4603      	mov	r3, r0
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 80013ec:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80013f0:	eeb1 7a67 	vneg.f32	s14, s15
 80013f4:	4bae      	ldr	r3, [pc, #696]	; (80016b0 <MadgwickAHRSupdate+0x81c>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fe:	4bae      	ldr	r3, [pc, #696]	; (80016b8 <MadgwickAHRSupdate+0x824>)
 8001400:	edd3 6a00 	vldr	s13, [r3]
 8001404:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800140c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001410:	edd7 6a01 	vldr	s13, [r7, #4]
 8001414:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001420:	4ba4      	ldr	r3, [pc, #656]	; (80016b4 <MadgwickAHRSupdate+0x820>)
 8001422:	edd3 6a00 	vldr	s13, [r3]
 8001426:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001432:	edd7 6a01 	vldr	s13, [r7, #4]
 8001436:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001442:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001446:	edd7 7a02 	vldr	s15, [r7, #8]
 800144a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800144e:	4b99      	ldr	r3, [pc, #612]	; (80016b4 <MadgwickAHRSupdate+0x820>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001458:	ee37 7a27 	vadd.f32	s14, s14, s15
 800145c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001460:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001468:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001470:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 8001480:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001484:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001488:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 800148c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001490:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001494:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001498:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800149c:	eeb1 7a67 	vneg.f32	s14, s15
 80014a0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80014a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014a8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80014ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80014c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80014c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80014cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014d4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80014d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e0:	4b73      	ldr	r3, [pc, #460]	; (80016b0 <MadgwickAHRSupdate+0x81c>)
 80014e2:	edd3 6a00 	vldr	s13, [r3]
 80014e6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80014ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014ee:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80014f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80014f6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80014fa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80014fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001502:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001506:	ee26 6a27 	vmul.f32	s12, s12, s15
 800150a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 800150e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001512:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001516:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800151a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800151e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
 8001526:	ee76 7a67 	vsub.f32	s15, s12, s15
 800152a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001532:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001536:	eef1 6a67 	vneg.f32	s13, s15
 800153a:	4b5e      	ldr	r3, [pc, #376]	; (80016b4 <MadgwickAHRSupdate+0x820>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001544:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <MadgwickAHRSupdate+0x824>)
 8001546:	ed93 6a00 	vldr	s12, [r3]
 800154a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800154e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001552:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001556:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800155a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800155e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001562:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001566:	ee26 6a27 	vmul.f32	s12, s12, s15
 800156a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 800156e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001572:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001576:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800157a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800157e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001582:	edd7 7a02 	vldr	s15, [r7, #8]
 8001586:	ee76 7a67 	vsub.f32	s15, s12, s15
 800158a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800158e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <MadgwickAHRSupdate+0x81c>)
 8001594:	edd3 6a00 	vldr	s13, [r3]
 8001598:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800159c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015a0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80015a4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80015b4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80015b8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015bc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80015c4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80015c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80015cc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80015d0:	ee36 6a27 	vadd.f32	s12, s12, s15
 80015d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80015e8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80015ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015f0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80015f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001600:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001608:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800160c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001610:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001614:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001618:	edd7 7a05 	vldr	s15, [r7, #20]
 800161c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001620:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800162c:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MadgwickAHRSupdate+0x824>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001636:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800163a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800163e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001642:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001646:	ee36 6a67 	vsub.f32	s12, s12, s15
 800164a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800164e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001652:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001656:	edd7 7a04 	vldr	s15, [r7, #16]
 800165a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800165e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001662:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <MadgwickAHRSupdate+0x820>)
 8001668:	edd3 6a00 	vldr	s13, [r3]
 800166c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001670:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001674:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001678:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800167c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001680:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001684:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001688:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800168c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001690:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001694:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001698:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800169c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016a0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ac:	e006      	b.n	80016bc <MadgwickAHRSupdate+0x828>
 80016ae:	bf00      	nop
 80016b0:	200002d4 	.word	0x200002d4
 80016b4:	200002d8 	.word	0x200002d8
 80016b8:	200002d0 	.word	0x200002d0
 80016bc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c8:	4bf6      	ldr	r3, [pc, #984]	; (8001aa4 <MadgwickAHRSupdate+0xc10>)
 80016ca:	edd3 6a00 	vldr	s13, [r3]
 80016ce:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016d6:	4bf4      	ldr	r3, [pc, #976]	; (8001aa8 <MadgwickAHRSupdate+0xc14>)
 80016d8:	ed93 6a00 	vldr	s12, [r3]
 80016dc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016e8:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 80016ec:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80016f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016f4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80016f8:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016fc:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001700:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001704:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001708:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800170c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001710:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001714:	edd7 7a02 	vldr	s15, [r7, #8]
 8001718:	ee76 7a67 	vsub.f32	s15, s12, s15
 800171c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001724:	4be1      	ldr	r3, [pc, #900]	; (8001aac <MadgwickAHRSupdate+0xc18>)
 8001726:	edd3 6a00 	vldr	s13, [r3]
 800172a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800172e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001732:	4bdf      	ldr	r3, [pc, #892]	; (8001ab0 <MadgwickAHRSupdate+0xc1c>)
 8001734:	ed93 6a00 	vldr	s12, [r3]
 8001738:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800173c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001740:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001744:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001748:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800174c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001750:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001754:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001758:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800175c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001760:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001764:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001768:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800176c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001770:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001774:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001778:	edd7 7a01 	vldr	s15, [r7, #4]
 800177c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001788:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800178c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001790:	eeb1 7a67 	vneg.f32	s14, s15
 8001794:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001798:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800179c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80017a0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80017b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017b8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80017bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80017c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80017cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d4:	4bb3      	ldr	r3, [pc, #716]	; (8001aa4 <MadgwickAHRSupdate+0xc10>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80017de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80017e2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80017ee:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017fa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80017fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001802:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800180e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001812:	eef1 6a67 	vneg.f32	s13, s15
 8001816:	4ba3      	ldr	r3, [pc, #652]	; (8001aa4 <MadgwickAHRSupdate+0xc10>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001820:	4ba1      	ldr	r3, [pc, #644]	; (8001aa8 <MadgwickAHRSupdate+0xc14>)
 8001822:	ed93 6a00 	vldr	s12, [r3]
 8001826:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800182a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800182e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001832:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001836:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800183a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800183e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001842:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001846:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800184a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800184e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001852:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001856:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800185a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800185e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001862:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001866:	edd7 7a03 	vldr	s15, [r7, #12]
 800186a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800186e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001876:	4b8e      	ldr	r3, [pc, #568]	; (8001ab0 <MadgwickAHRSupdate+0xc1c>)
 8001878:	edd3 6a00 	vldr	s13, [r3]
 800187c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001880:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001884:	4b89      	ldr	r3, [pc, #548]	; (8001aac <MadgwickAHRSupdate+0xc18>)
 8001886:	ed93 6a00 	vldr	s12, [r3]
 800188a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800188e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001892:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001896:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 800189a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800189e:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018a2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018a6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018aa:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 80018ae:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018b2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80018b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80018ba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018be:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d2:	4b75      	ldr	r3, [pc, #468]	; (8001aa8 <MadgwickAHRSupdate+0xc14>)
 80018d4:	edd3 6a00 	vldr	s13, [r3]
 80018d8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <MadgwickAHRSupdate+0xc10>)
 80018e2:	ed93 6a00 	vldr	s12, [r3]
 80018e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018ee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018f2:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80018f6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018fa:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001902:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001906:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800190a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800190e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001912:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001916:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800191a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800191e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001922:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001926:	edd7 7a01 	vldr	s15, [r7, #4]
 800192a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001936:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800193a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800193e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001942:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001946:	ee37 7a67 	vsub.f32	s14, s14, s15
 800194a:	edd7 7a06 	vldr	s15, [r7, #24]
 800194e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001952:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001956:	ee27 7a27 	vmul.f32	s14, s14, s15
 800195a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800195e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001962:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001966:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800196a:	edd7 7a05 	vldr	s15, [r7, #20]
 800196e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001972:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001982:	eef1 6a67 	vneg.f32	s13, s15
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <MadgwickAHRSupdate+0xc18>)
 8001988:	edd3 7a00 	vldr	s15, [r3]
 800198c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <MadgwickAHRSupdate+0xc1c>)
 8001992:	ed93 6a00 	vldr	s12, [r3]
 8001996:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800199a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800199e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80019a6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019aa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019ae:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019b6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 80019be:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 80019c2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80019c6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80019ca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019ce:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019d2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019ea:	eef1 6a67 	vneg.f32	s13, s15
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <MadgwickAHRSupdate+0xc14>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019f8:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <MadgwickAHRSupdate+0xc10>)
 80019fa:	ed93 6a00 	vldr	s12, [r3]
 80019fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a02:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a06:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a0a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a0e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001a12:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a16:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a1a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a1e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001a22:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001a26:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001a2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a2e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a32:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MadgwickAHRSupdate+0xc1c>)
 8001a48:	edd3 6a00 	vldr	s13, [r3]
 8001a4c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a54:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001a58:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a5c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a60:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a64:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a68:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001a6c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001a70:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a78:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a7c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001a9c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001aa0:	e008      	b.n	8001ab4 <MadgwickAHRSupdate+0xc20>
 8001aa2:	bf00      	nop
 8001aa4:	200002d4 	.word	0x200002d4
 8001aa8:	20000024 	.word	0x20000024
 8001aac:	200002d8 	.word	0x200002d8
 8001ab0:	200002d0 	.word	0x200002d0
 8001ab4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ab8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001abc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ac0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ac8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ad4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae0:	f000 fc34 	bl	800234c <invSqrt>
 8001ae4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8001ae8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001aec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8001af8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001afc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b04:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8001b08:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b0c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8001b18:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b1c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001b28:	4b69      	ldr	r3, [pc, #420]	; (8001cd0 <MadgwickAHRSupdate+0xe3c>)
 8001b2a:	ed93 7a00 	vldr	s14, [r3]
 8001b2e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b36:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b3e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8001b42:	4b63      	ldr	r3, [pc, #396]	; (8001cd0 <MadgwickAHRSupdate+0xe3c>)
 8001b44:	ed93 7a00 	vldr	s14, [r3]
 8001b48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b50:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b58:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 8001b5c:	4b5c      	ldr	r3, [pc, #368]	; (8001cd0 <MadgwickAHRSupdate+0xe3c>)
 8001b5e:	ed93 7a00 	vldr	s14, [r3]
 8001b62:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8001b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b72:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <MadgwickAHRSupdate+0xe3c>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b84:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8001b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b8c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 8001b90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b94:	edd7 7a00 	vldr	s15, [r7]
 8001b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b9c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <MadgwickAHRSupdate+0xe40>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <MadgwickAHRSupdate+0xe40>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 8001bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bb8:	edd7 7a00 	vldr	s15, [r7]
 8001bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bc0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001bc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <MadgwickAHRSupdate+0xe44>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <MadgwickAHRSupdate+0xe44>)
 8001bd4:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8001bd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bdc:	edd7 7a00 	vldr	s15, [r7]
 8001be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001be4:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <MadgwickAHRSupdate+0xe48>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <MadgwickAHRSupdate+0xe48>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8001bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c00:	edd7 7a00 	vldr	s15, [r7]
 8001c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c08:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c10:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <MadgwickAHRSupdate+0xe4c>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <MadgwickAHRSupdate+0xe4c>)
 8001c1c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <MadgwickAHRSupdate+0xe40>)
 8001c22:	ed93 7a00 	vldr	s14, [r3]
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <MadgwickAHRSupdate+0xe40>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <MadgwickAHRSupdate+0xe44>)
 8001c32:	edd3 6a00 	vldr	s13, [r3]
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <MadgwickAHRSupdate+0xe44>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c44:	4b25      	ldr	r3, [pc, #148]	; (8001cdc <MadgwickAHRSupdate+0xe48>)
 8001c46:	edd3 6a00 	vldr	s13, [r3]
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <MadgwickAHRSupdate+0xe48>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <MadgwickAHRSupdate+0xe4c>)
 8001c5a:	edd3 6a00 	vldr	s13, [r3]
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <MadgwickAHRSupdate+0xe4c>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c70:	f000 fb6c 	bl	800234c <invSqrt>
 8001c74:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MadgwickAHRSupdate+0xe40>)
 8001c7a:	ed93 7a00 	vldr	s14, [r3]
 8001c7e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MadgwickAHRSupdate+0xe40>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8001c8c:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <MadgwickAHRSupdate+0xe44>)
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <MadgwickAHRSupdate+0xe44>)
 8001c9c:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MadgwickAHRSupdate+0xe48>)
 8001ca2:	ed93 7a00 	vldr	s14, [r3]
 8001ca6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <MadgwickAHRSupdate+0xe48>)
 8001cb0:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MadgwickAHRSupdate+0xe4c>)
 8001cb6:	ed93 7a00 	vldr	s14, [r3]
 8001cba:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <MadgwickAHRSupdate+0xe4c>)
 8001cc4:	edc3 7a00 	vstr	s15, [r3]
}
 8001cc8:	37b8      	adds	r7, #184	; 0xb8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000024 	.word	0x20000024
 8001cd8:	200002d0 	.word	0x200002d0
 8001cdc:	200002d4 	.word	0x200002d4
 8001ce0:	200002d8 	.word	0x200002d8

08001ce4 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sample_freq) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b09e      	sub	sp, #120	; 0x78
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	ed87 0a07 	vstr	s0, [r7, #28]
 8001cee:	edc7 0a06 	vstr	s1, [r7, #24]
 8001cf2:	ed87 1a05 	vstr	s2, [r7, #20]
 8001cf6:	edc7 1a04 	vstr	s3, [r7, #16]
 8001cfa:	ed87 2a03 	vstr	s4, [r7, #12]
 8001cfe:	edc7 2a02 	vstr	s5, [r7, #8]
 8001d02:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001d06:	4bec      	ldr	r3, [pc, #944]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	eeb1 7a67 	vneg.f32	s14, s15
 8001d10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d18:	4be8      	ldr	r3, [pc, #928]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 8001d1a:	edd3 6a00 	vldr	s13, [r3]
 8001d1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2a:	4be5      	ldr	r3, [pc, #916]	; (80020c0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001d2c:	edd3 6a00 	vldr	s13, [r3]
 8001d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d44:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001d48:	4bde      	ldr	r3, [pc, #888]	; (80020c4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d56:	4bd9      	ldr	r3, [pc, #868]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 8001d58:	edd3 6a00 	vldr	s13, [r3]
 8001d5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d68:	4bd5      	ldr	r3, [pc, #852]	; (80020c0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001d6a:	edd3 6a00 	vldr	s13, [r3]
 8001d6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d82:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001d86:	4bcf      	ldr	r3, [pc, #828]	; (80020c4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001d88:	ed93 7a00 	vldr	s14, [r3]
 8001d8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d94:	4bc8      	ldr	r3, [pc, #800]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001d96:	edd3 6a00 	vldr	s13, [r3]
 8001d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001da6:	4bc6      	ldr	r3, [pc, #792]	; (80020c0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001da8:	edd3 6a00 	vldr	s13, [r3]
 8001dac:	edd7 7a07 	vldr	s15, [r7, #28]
 8001db0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001dc4:	4bbf      	ldr	r3, [pc, #764]	; (80020c4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001dc6:	ed93 7a00 	vldr	s14, [r3]
 8001dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd2:	4bb9      	ldr	r3, [pc, #740]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001dd4:	edd3 6a00 	vldr	s13, [r3]
 8001dd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de4:	4bb5      	ldr	r3, [pc, #724]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 8001de6:	edd3 6a00 	vldr	s13, [r3]
 8001dea:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfe:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d10e      	bne.n	8001e2e <MadgwickAHRSupdateIMU+0x14a>
 8001e10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	d107      	bne.n	8001e2e <MadgwickAHRSupdateIMU+0x14a>
 8001e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2a:	f000 81e5 	beq.w	80021f8 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001e2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e32:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e36:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e42:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e52:	f000 fa7b 	bl	800234c <invSqrt>
 8001e56:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 8001e5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e5e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 8001e6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e6e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e76:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;   
 8001e7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e7e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001e8a:	4b8e      	ldr	r3, [pc, #568]	; (80020c4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e94:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 8001e98:	4b87      	ldr	r3, [pc, #540]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ea2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 8001ea6:	4b85      	ldr	r3, [pc, #532]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eb0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8001eb4:	4b82      	ldr	r3, [pc, #520]	; (80020c0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ebe:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8001ec2:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8001ed4:	4b78      	ldr	r3, [pc, #480]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8001ee6:	4b75      	ldr	r3, [pc, #468]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 8001ef8:	4b6f      	ldr	r3, [pc, #444]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f06:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f18:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 8001f1c:	4b69      	ldr	r3, [pc, #420]	; (80020c4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001f1e:	ed93 7a00 	vldr	s14, [r3]
 8001f22:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <MadgwickAHRSupdateIMU+0x3e0>)
 8001f24:	edd3 7a00 	vldr	s15, [r3]
 8001f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 8001f30:	4b61      	ldr	r3, [pc, #388]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001f32:	ed93 7a00 	vldr	s14, [r3]
 8001f36:	4b60      	ldr	r3, [pc, #384]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f40:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 8001f44:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 8001f46:	ed93 7a00 	vldr	s14, [r3]
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f54:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8001f58:	4b59      	ldr	r3, [pc, #356]	; (80020c0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f5a:	ed93 7a00 	vldr	s14, [r3]
 8001f5e:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <MadgwickAHRSupdateIMU+0x3dc>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8001f6c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f78:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8001f7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f88:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001f8c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f98:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8001f9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001fac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001fb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8001fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fc8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fcc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001fd0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001fd4:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <MadgwickAHRSupdateIMU+0x3d4>)
 8001fd6:	edd3 7a00 	vldr	s15, [r3]
 8001fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fe2:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8001fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ff2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ff6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ffa:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001ffe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800200a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800200e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002016:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800201e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800202e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002032:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002036:	ee27 7a87 	vmul.f32	s14, s15, s14
 800203a:	4b20      	ldr	r3, [pc, #128]	; (80020bc <MadgwickAHRSupdateIMU+0x3d8>)
 800203c:	edd3 7a00 	vldr	s15, [r3]
 8002040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002044:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002048:	edd7 7a04 	vldr	s15, [r7, #16]
 800204c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002054:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002058:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800205c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002064:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002068:	edd7 7a03 	vldr	s15, [r7, #12]
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002074:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002078:	ee37 7a67 	vsub.f32	s14, s14, s15
 800207c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002080:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002088:	ee37 7a27 	vadd.f32	s14, s14, s15
 800208c:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002090:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002094:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800209c:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80020a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80020a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80020b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80020b4:	e008      	b.n	80020c8 <MadgwickAHRSupdateIMU+0x3e4>
 80020b6:	bf00      	nop
 80020b8:	200002d0 	.word	0x200002d0
 80020bc:	200002d4 	.word	0x200002d4
 80020c0:	200002d8 	.word	0x200002d8
 80020c4:	20000024 	.word	0x20000024
 80020c8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80020cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d0:	4b99      	ldr	r3, [pc, #612]	; (8002338 <MadgwickAHRSupdateIMU+0x654>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020da:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80020de:	edd7 7a04 	vldr	s15, [r7, #16]
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020ee:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80020f2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020f6:	4b90      	ldr	r3, [pc, #576]	; (8002338 <MadgwickAHRSupdateIMU+0x654>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002100:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002104:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002108:	edd7 7a03 	vldr	s15, [r7, #12]
 800210c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002114:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002118:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800211c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002120:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002124:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002130:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002138:	edd7 7a08 	vldr	s15, [r7, #32]
 800213c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002144:	eeb0 0a67 	vmov.f32	s0, s15
 8002148:	f000 f900 	bl	800234c <invSqrt>
 800214c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 8002150:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002154:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 8002160:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002164:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 8002170:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002174:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 8002180:	ed97 7a08 	vldr	s14, [r7, #32]
 8002184:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002190:	4b6a      	ldr	r3, [pc, #424]	; (800233c <MadgwickAHRSupdateIMU+0x658>)
 8002192:	ed93 7a00 	vldr	s14, [r3]
 8002196:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800219a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80021a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 80021aa:	4b64      	ldr	r3, [pc, #400]	; (800233c <MadgwickAHRSupdateIMU+0x658>)
 80021ac:	ed93 7a00 	vldr	s14, [r3]
 80021b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80021b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80021bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 80021c4:	4b5d      	ldr	r3, [pc, #372]	; (800233c <MadgwickAHRSupdateIMU+0x658>)
 80021c6:	ed93 7a00 	vldr	s14, [r3]
 80021ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80021ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80021d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021da:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 80021de:	4b57      	ldr	r3, [pc, #348]	; (800233c <MadgwickAHRSupdateIMU+0x658>)
 80021e0:	ed93 7a00 	vldr	s14, [r3]
 80021e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80021e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ec:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80021f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 80021f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002204:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220c:	4b4c      	ldr	r3, [pc, #304]	; (8002340 <MadgwickAHRSupdateIMU+0x65c>)
 800220e:	edd3 7a00 	vldr	s15, [r3]
 8002212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002216:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <MadgwickAHRSupdateIMU+0x65c>)
 8002218:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 800221c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002220:	edd7 7a01 	vldr	s15, [r7, #4]
 8002224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002228:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800222c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002230:	4b44      	ldr	r3, [pc, #272]	; (8002344 <MadgwickAHRSupdateIMU+0x660>)
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223a:	4b42      	ldr	r3, [pc, #264]	; (8002344 <MadgwickAHRSupdateIMU+0x660>)
 800223c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8002240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002244:	edd7 7a01 	vldr	s15, [r7, #4]
 8002248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002254:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <MadgwickAHRSupdateIMU+0x664>)
 8002256:	edd3 7a00 	vldr	s15, [r3]
 800225a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <MadgwickAHRSupdateIMU+0x664>)
 8002260:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8002264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002268:	edd7 7a01 	vldr	s15, [r7, #4]
 800226c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002270:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <MadgwickAHRSupdateIMU+0x654>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <MadgwickAHRSupdateIMU+0x654>)
 8002284:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002288:	4b2d      	ldr	r3, [pc, #180]	; (8002340 <MadgwickAHRSupdateIMU+0x65c>)
 800228a:	ed93 7a00 	vldr	s14, [r3]
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <MadgwickAHRSupdateIMU+0x65c>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <MadgwickAHRSupdateIMU+0x660>)
 800229a:	edd3 6a00 	vldr	s13, [r3]
 800229e:	4b29      	ldr	r3, [pc, #164]	; (8002344 <MadgwickAHRSupdateIMU+0x660>)
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <MadgwickAHRSupdateIMU+0x664>)
 80022ae:	edd3 6a00 	vldr	s13, [r3]
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <MadgwickAHRSupdateIMU+0x664>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <MadgwickAHRSupdateIMU+0x654>)
 80022c2:	edd3 6a00 	vldr	s13, [r3]
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <MadgwickAHRSupdateIMU+0x654>)
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d4:	eeb0 0a67 	vmov.f32	s0, s15
 80022d8:	f000 f838 	bl	800234c <invSqrt>
 80022dc:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 80022e0:	4b17      	ldr	r3, [pc, #92]	; (8002340 <MadgwickAHRSupdateIMU+0x65c>)
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <MadgwickAHRSupdateIMU+0x65c>)
 80022f0:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80022f4:	4b13      	ldr	r3, [pc, #76]	; (8002344 <MadgwickAHRSupdateIMU+0x660>)
 80022f6:	ed93 7a00 	vldr	s14, [r3]
 80022fa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <MadgwickAHRSupdateIMU+0x660>)
 8002304:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <MadgwickAHRSupdateIMU+0x664>)
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <MadgwickAHRSupdateIMU+0x664>)
 8002318:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MadgwickAHRSupdateIMU+0x654>)
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	4b03      	ldr	r3, [pc, #12]	; (8002338 <MadgwickAHRSupdateIMU+0x654>)
 800232c:	edc3 7a00 	vstr	s15, [r3]
}
 8002330:	bf00      	nop
 8002332:	3778      	adds	r7, #120	; 0x78
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200002d8 	.word	0x200002d8
 800233c:	20000000 	.word	0x20000000
 8002340:	20000024 	.word	0x20000024
 8002344:	200002d0 	.word	0x200002d0
 8002348:	200002d4 	.word	0x200002d4

0800234c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002356:	edd7 7a01 	vldr	s15, [r7, #4]
 800235a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800235e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002362:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800236a:	f107 0310 	add.w	r3, r7, #16
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	105a      	asrs	r2, r3, #1
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <invSqrt+0x74>)
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002384:	ed97 7a04 	vldr	s14, [r7, #16]
 8002388:	edd7 7a05 	vldr	s15, [r7, #20]
 800238c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002390:	edd7 7a04 	vldr	s15, [r7, #16]
 8002394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002398:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800239c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	ee07 3a90 	vmov	s15, r3
}
 80023b2:	eeb0 0a67 	vmov.f32	s0, s15
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	5f3759df 	.word	0x5f3759df

080023c4 <MCP4728_Write_GeneralCall>:
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, data, sizeof(data), HAL_MAX_DELAY);
	return ret;
}

void MCP4728_Write_GeneralCall(I2C_HandleTypeDef *I2CHandler, uint8_t command) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	70fb      	strb	r3, [r7, #3]
	uint16_t zeoo = 0x00;
 80023d0:	2300      	movs	r3, #0
 80023d2:	81fb      	strh	r3, [r7, #14]
	uint16_t sizey = 0x1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(I2CHandler, zeoo, &command, sizey, HAL_MAX_DELAY);
 80023d8:	89bb      	ldrh	r3, [r7, #12]
 80023da:	1cfa      	adds	r2, r7, #3
 80023dc:	89f9      	ldrh	r1, [r7, #14]
 80023de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023e2:	9000      	str	r0, [sp, #0]
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f002 ffeb 	bl	80053c0 <HAL_I2C_Master_Transmit>

}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <MCP4728_Write_AllChannels_Diff>:
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Write_AllChannels_Diff(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b08a      	sub	sp, #40	; 0x28
 80023f6:	af02      	add	r7, sp, #8
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	4638      	mov	r0, r7
 80023fc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf[8];
	for(uint8_t i = 0; i < 4; i++){
 8002400:	2300      	movs	r3, #0
 8002402:	77fb      	strb	r3, [r7, #31]
 8002404:	e024      	b.n	8002450 <MCP4728_Write_AllChannels_Diff+0x5e>
		uint8_t lowByte = output.channel_Val[i] & 0xff;
 8002406:	7ffb      	ldrb	r3, [r7, #31]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	3320      	adds	r3, #32
 800240c:	443b      	add	r3, r7
 800240e:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8002412:	77bb      	strb	r3, [r7, #30]
		uint8_t highByte = (output.channel_Val[i] >> 8);
 8002414:	7ffb      	ldrb	r3, [r7, #31]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	3320      	adds	r3, #32
 800241a:	443b      	add	r3, r7
 800241c:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	777b      	strb	r3, [r7, #29]
		buf[i*2] =  0x0f&highByte;
 8002426:	7ffb      	ldrb	r3, [r7, #31]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	7f7a      	ldrb	r2, [r7, #29]
 800242c:	f002 020f 	and.w	r2, r2, #15
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	3320      	adds	r3, #32
 8002434:	443b      	add	r3, r7
 8002436:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)+1] = lowByte;
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	3301      	adds	r3, #1
 8002440:	3320      	adds	r3, #32
 8002442:	443b      	add	r3, r7
 8002444:	7fba      	ldrb	r2, [r7, #30]
 8002446:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	3301      	adds	r3, #1
 800244e:	77fb      	strb	r3, [r7, #31]
 8002450:	7ffb      	ldrb	r3, [r7, #31]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d9d7      	bls.n	8002406 <MCP4728_Write_AllChannels_Diff+0x14>
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8002456:	f107 0214 	add.w	r2, r7, #20
 800245a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2308      	movs	r3, #8
 8002462:	21c8      	movs	r1, #200	; 0xc8
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f002 ffab 	bl	80053c0 <HAL_I2C_Master_Transmit>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 800246a:	2108      	movs	r1, #8
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7ff ffa9 	bl	80023c4 <MCP4728_Write_GeneralCall>
}
 8002472:	bf00      	nop
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <MCP4728_Init>:
	buf[2] = lowByte;
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Init(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 800247a:	b580      	push	{r7, lr}
 800247c:	b08a      	sub	sp, #40	; 0x28
 800247e:	af02      	add	r7, sp, #8
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	4638      	mov	r0, r7
 8002484:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_RESET);
 8002488:	2106      	movs	r1, #6
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff ff9a 	bl	80023c4 <MCP4728_Write_GeneralCall>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_WAKEUP);
 8002490:	2109      	movs	r1, #9
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff ff96 	bl	80023c4 <MCP4728_Write_GeneralCall>
	//MCP4728_Write_GeneralCall(I2CHandler, 0x0C);

	uint8_t buf[9];
	buf[0] = MCP4728_CMD_DACWRITE_SEQ;
 8002498:	2350      	movs	r3, #80	; 0x50
 800249a:	753b      	strb	r3, [r7, #20]
	for(uint8_t i = 1; i <= 4; i++){
 800249c:	2301      	movs	r3, #1
 800249e:	77fb      	strb	r3, [r7, #31]
 80024a0:	e015      	b.n	80024ce <MCP4728_Init+0x54>
		buf[(i*2)+1] = 0x00;
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	3301      	adds	r3, #1
 80024a8:	3320      	adds	r3, #32
 80024aa:	443b      	add	r3, r7
 80024ac:	2200      	movs	r2, #0
 80024ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)] = (0 << 7) | ((i-1)<<4) | 0x0;
 80024b2:	7ffb      	ldrb	r3, [r7, #31]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	3320      	adds	r3, #32
 80024c2:	443b      	add	r3, r7
 80024c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 1; i <= 4; i++){
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
 80024ca:	3301      	adds	r3, #1
 80024cc:	77fb      	strb	r3, [r7, #31]
 80024ce:	7ffb      	ldrb	r3, [r7, #31]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d9e6      	bls.n	80024a2 <MCP4728_Init+0x28>
	}

	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 80024d4:	f107 0214 	add.w	r2, r7, #20
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2309      	movs	r3, #9
 80024e0:	21c8      	movs	r1, #200	; 0xc8
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f002 ff6c 	bl	80053c0 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(I2CHandler, 0xC8, buf, sizeof(buf), HAL_MAX_DELAY);
	//C0, C2, C4, C6, C8, CA, CC, CE
	//60, 61, 62, 63, 64, 65, 66, 67
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 80024e8:	2108      	movs	r1, #8
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff ff6a 	bl	80023c4 <MCP4728_Write_GeneralCall>
}
 80024f0:	bf00      	nop
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	461a      	mov	r2, r3
 8002504:	460b      	mov	r3, r1
 8002506:	72fb      	strb	r3, [r7, #11]
 8002508:	4613      	mov	r3, r2
 800250a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685c      	ldr	r4, [r3, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68d8      	ldr	r0, [r3, #12]
 8002514:	893b      	ldrh	r3, [r7, #8]
 8002516:	7af9      	ldrb	r1, [r7, #11]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	47a0      	blx	r4
 800251c:	6178      	str	r0, [r7, #20]

  return ret;
 800251e:	697b      	ldr	r3, [r7, #20]
}
 8002520:	4618      	mov	r0, r3
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}

08002528 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	461a      	mov	r2, r3
 8002534:	460b      	mov	r3, r1
 8002536:	72fb      	strb	r3, [r7, #11]
 8002538:	4613      	mov	r3, r2
 800253a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681c      	ldr	r4, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68d8      	ldr	r0, [r3, #12]
 8002544:	893b      	ldrh	r3, [r7, #8]
 8002546:	7af9      	ldrb	r1, [r7, #11]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	47a0      	blx	r4
 800254c:	6178      	str	r0, [r7, #20]

  return ret;
 800254e:	697b      	ldr	r3, [r7, #20]
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}

08002558 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 8002562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002584 <lsm9ds1_from_fs4g_to_mg+0x2c>
 8002572:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002576:	eeb0 0a67 	vmov.f32	s0, s15
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	3df9db23 	.word	0x3df9db23

08002588 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800259e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80025b4 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 80025a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80025a6:	eeb0 0a67 	vmov.f32	s0, s15
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	428c0000 	.word	0x428c0000

080025b8 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 80025c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80025e4 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 80025d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80025d6:	eeb0 0a67 	vmov.f32	s0, s15
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	3f147ae1 	.word	0x3f147ae1

080025e8 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80025f4:	f107 0208 	add.w	r2, r7, #8
 80025f8:	2301      	movs	r3, #1
 80025fa:	2110      	movs	r1, #16
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff7b 	bl	80024f8 <lsm9ds1_read_reg>
 8002602:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	b2da      	uxtb	r2, r3
 8002612:	7a3b      	ldrb	r3, [r7, #8]
 8002614:	f362 03c4 	bfi	r3, r2, #3, #2
 8002618:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 800261a:	f107 0208 	add.w	r2, r7, #8
 800261e:	2301      	movs	r3, #1
 8002620:	2110      	movs	r1, #16
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ff80 	bl	8002528 <lsm9ds1_write_reg>
 8002628:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002640:	f107 0210 	add.w	r2, r7, #16
 8002644:	2301      	movs	r3, #1
 8002646:	2110      	movs	r1, #16
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff ff55 	bl	80024f8 <lsm9ds1_read_reg>
 800264e:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10f      	bne.n	8002676 <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	b2da      	uxtb	r2, r3
 800265e:	7c3b      	ldrb	r3, [r7, #16]
 8002660:	f362 1347 	bfi	r3, r2, #5, #3
 8002664:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002666:	f107 0210 	add.w	r2, r7, #16
 800266a:	2301      	movs	r3, #1
 800266c:	2110      	movs	r1, #16
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff5a 	bl	8002528 <lsm9ds1_write_reg>
 8002674:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800267c:	f107 020c 	add.w	r2, r7, #12
 8002680:	2301      	movs	r3, #1
 8002682:	2120      	movs	r1, #32
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff37 	bl	80024f8 <lsm9ds1_read_reg>
 800268a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d110      	bne.n	80026b4 <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	b2da      	uxtb	r2, r3
 800269c:	7b3b      	ldrb	r3, [r7, #12]
 800269e:	f362 1347 	bfi	r3, r2, #5, #3
 80026a2:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80026a4:	f107 020c 	add.w	r2, r7, #12
 80026a8:	2301      	movs	r3, #1
 80026aa:	2120      	movs	r1, #32
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff3b 	bl	8002528 <lsm9ds1_write_reg>
 80026b2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d107      	bne.n	80026ca <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80026ba:	f107 0208 	add.w	r2, r7, #8
 80026be:	2301      	movs	r3, #1
 80026c0:	2112      	movs	r1, #18
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff ff18 	bl	80024f8 <lsm9ds1_read_reg>
 80026c8:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d111      	bne.n	80026f4 <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	09db      	lsrs	r3, r3, #7
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	7a3b      	ldrb	r3, [r7, #8]
 80026de:	f362 13c7 	bfi	r3, r2, #7, #1
 80026e2:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 80026e4:	f107 0208 	add.w	r2, r7, #8
 80026e8:	2301      	movs	r3, #1
 80026ea:	2112      	movs	r1, #18
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff1b 	bl	8002528 <lsm9ds1_write_reg>
 80026f2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 80026f4:	697b      	ldr	r3, [r7, #20]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800270a:	f107 0208 	add.w	r2, r7, #8
 800270e:	2301      	movs	r3, #1
 8002710:	2120      	movs	r1, #32
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f7ff fef0 	bl	80024f8 <lsm9ds1_read_reg>
 8002718:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10f      	bne.n	8002740 <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	b2da      	uxtb	r2, r3
 8002728:	7a3b      	ldrb	r3, [r7, #8]
 800272a:	f362 03c4 	bfi	r3, r2, #3, #2
 800272e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002730:	f107 0208 	add.w	r2, r7, #8
 8002734:	2301      	movs	r3, #1
 8002736:	2120      	movs	r1, #32
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fef5 	bl	8002528 <lsm9ds1_write_reg>
 800273e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8002740:	68fb      	ldr	r3, [r7, #12]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b088      	sub	sp, #32
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	4613      	mov	r3, r2
 8002756:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002758:	f107 0218 	add.w	r2, r7, #24
 800275c:	2301      	movs	r3, #1
 800275e:	2122      	movs	r1, #34	; 0x22
 8002760:	68b8      	ldr	r0, [r7, #8]
 8002762:	f7ff fec9 	bl	80024f8 <lsm9ds1_read_reg>
 8002766:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10f      	bne.n	800278e <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	b2da      	uxtb	r2, r3
 8002776:	7e3b      	ldrb	r3, [r7, #24]
 8002778:	f362 1386 	bfi	r3, r2, #6, #1
 800277c:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 800277e:	f107 0218 	add.w	r2, r7, #24
 8002782:	2301      	movs	r3, #1
 8002784:	2122      	movs	r1, #34	; 0x22
 8002786:	68b8      	ldr	r0, [r7, #8]
 8002788:	f7ff fece 	bl	8002528 <lsm9ds1_write_reg>
 800278c:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d107      	bne.n	80027a4 <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8002794:	f107 0214 	add.w	r2, r7, #20
 8002798:	2301      	movs	r3, #1
 800279a:	2124      	movs	r1, #36	; 0x24
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff feab 	bl	80024f8 <lsm9ds1_read_reg>
 80027a2:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d119      	bne.n	80027de <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	7d3b      	ldrb	r3, [r7, #20]
 80027b8:	f362 13c7 	bfi	r3, r2, #7, #1
 80027bc:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	7d3b      	ldrb	r3, [r7, #20]
 80027c8:	f362 1386 	bfi	r3, r2, #6, #1
 80027cc:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 80027ce:	f107 0214 	add.w	r2, r7, #20
 80027d2:	2301      	movs	r3, #1
 80027d4:	2124      	movs	r1, #36	; 0x24
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f7ff fea6 	bl	8002528 <lsm9ds1_write_reg>
 80027dc:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 80027de:	69fb      	ldr	r3, [r7, #28]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 80027f4:	f107 0210 	add.w	r2, r7, #16
 80027f8:	2301      	movs	r3, #1
 80027fa:	2120      	movs	r1, #32
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff fe7b 	bl	80024f8 <lsm9ds1_read_reg>
 8002802:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d125      	bne.n	8002856 <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	7c3b      	ldrb	r3, [r7, #16]
 8002816:	f362 0341 	bfi	r3, r2, #1, #1
 800281a:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	b2da      	uxtb	r2, r3
 8002824:	7c3b      	ldrb	r3, [r7, #16]
 8002826:	f362 0384 	bfi	r3, r2, #2, #3
 800282a:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	b2da      	uxtb	r2, r3
 8002836:	7c3b      	ldrb	r3, [r7, #16]
 8002838:	f362 1346 	bfi	r3, r2, #5, #2
 800283c:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 800283e:	7c3b      	ldrb	r3, [r7, #16]
 8002840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002844:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8002846:	f107 0210 	add.w	r2, r7, #16
 800284a:	2301      	movs	r3, #1
 800284c:	2120      	movs	r1, #32
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fe6a 	bl	8002528 <lsm9ds1_write_reg>
 8002854:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 800285c:	f107 020c 	add.w	r2, r7, #12
 8002860:	2301      	movs	r3, #1
 8002862:	2122      	movs	r1, #34	; 0x22
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fe47 	bl	80024f8 <lsm9ds1_read_reg>
 800286a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d111      	bne.n	8002896 <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	099b      	lsrs	r3, r3, #6
 8002876:	b2db      	uxtb	r3, r3
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	b2da      	uxtb	r2, r3
 800287e:	7b3b      	ldrb	r3, [r7, #12]
 8002880:	f362 0301 	bfi	r3, r2, #0, #2
 8002884:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8002886:	f107 020c 	add.w	r2, r7, #12
 800288a:	2301      	movs	r3, #1
 800288c:	2122      	movs	r1, #34	; 0x22
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fe4a 	bl	8002528 <lsm9ds1_write_reg>
 8002894:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d107      	bne.n	80028ac <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 800289c:	f107 0208 	add.w	r2, r7, #8
 80028a0:	2301      	movs	r3, #1
 80028a2:	2123      	movs	r1, #35	; 0x23
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fe27 	bl	80024f8 <lsm9ds1_read_reg>
 80028aa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d110      	bne.n	80028d4 <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	7a3b      	ldrb	r3, [r7, #8]
 80028be:	f362 0383 	bfi	r3, r2, #2, #2
 80028c2:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 80028c4:	f107 0208 	add.w	r2, r7, #8
 80028c8:	2301      	movs	r3, #1
 80028ca:	2123      	movs	r1, #35	; 0x23
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fe2b 	bl	8002528 <lsm9ds1_write_reg>
 80028d2:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 80028d4:	697b      	ldr	r3, [r7, #20]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 80028ea:	f107 0208 	add.w	r2, r7, #8
 80028ee:	2301      	movs	r3, #1
 80028f0:	2121      	movs	r1, #33	; 0x21
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fe00 	bl	80024f8 <lsm9ds1_read_reg>
 80028f8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10f      	bne.n	8002920 <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	b2da      	uxtb	r2, r3
 8002908:	7a3b      	ldrb	r3, [r7, #8]
 800290a:	f362 1346 	bfi	r3, r2, #5, #2
 800290e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 8002910:	f107 0208 	add.w	r2, r7, #8
 8002914:	2301      	movs	r3, #1
 8002916:	2121      	movs	r1, #33	; 0x21
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fe05 	bl	8002528 <lsm9ds1_write_reg>
 800291e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002920:	68fb      	ldr	r3, [r7, #12]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8002934:	f107 020c 	add.w	r2, r7, #12
 8002938:	2306      	movs	r3, #6
 800293a:	2118      	movs	r1, #24
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fddb 	bl	80024f8 <lsm9ds1_read_reg>
 8002942:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002944:	7b7b      	ldrb	r3, [r7, #13]
 8002946:	b21a      	sxth	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002952:	b29b      	uxth	r3, r3
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	b29a      	uxth	r2, r3
 8002958:	7b3b      	ldrb	r3, [r7, #12]
 800295a:	b29b      	uxth	r3, r3
 800295c:	4413      	add	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	b21a      	sxth	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	3302      	adds	r3, #2
 800296c:	b212      	sxth	r2, r2
 800296e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	3302      	adds	r3, #2
 8002974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002978:	b29b      	uxth	r3, r3
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b29a      	uxth	r2, r3
 800297e:	7bbb      	ldrb	r3, [r7, #14]
 8002980:	b29b      	uxth	r3, r3
 8002982:	4413      	add	r3, r2
 8002984:	b29a      	uxth	r2, r3
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3302      	adds	r3, #2
 800298a:	b212      	sxth	r2, r2
 800298c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800298e:	7c7a      	ldrb	r2, [r7, #17]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	3304      	adds	r3, #4
 8002994:	b212      	sxth	r2, r2
 8002996:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	3304      	adds	r3, #4
 800299c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	7c3b      	ldrb	r3, [r7, #16]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	3304      	adds	r3, #4
 80029b2:	b212      	sxth	r2, r2
 80029b4:	801a      	strh	r2, [r3, #0]

  return ret;
 80029b6:	697b      	ldr	r3, [r7, #20]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 80029ca:	f107 020c 	add.w	r2, r7, #12
 80029ce:	2306      	movs	r3, #6
 80029d0:	2128      	movs	r1, #40	; 0x28
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff fd90 	bl	80024f8 <lsm9ds1_read_reg>
 80029d8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80029da:	7b7b      	ldrb	r3, [r7, #13]
 80029dc:	b21a      	sxth	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	7b3b      	ldrb	r3, [r7, #12]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b21a      	sxth	r2, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3302      	adds	r3, #2
 8002a02:	b212      	sxth	r2, r2
 8002a04:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	021b      	lsls	r3, r3, #8
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	3302      	adds	r3, #2
 8002a20:	b212      	sxth	r2, r2
 8002a22:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002a24:	7c7a      	ldrb	r2, [r7, #17]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	b212      	sxth	r2, r2
 8002a2c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	3304      	adds	r3, #4
 8002a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	7c3b      	ldrb	r3, [r7, #16]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4413      	add	r3, r2
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	3304      	adds	r3, #4
 8002a48:	b212      	sxth	r2, r2
 8002a4a:	801a      	strh	r2, [r3, #0]

  return ret;
 8002a4c:	697b      	ldr	r3, [r7, #20]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b086      	sub	sp, #24
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	2306      	movs	r3, #6
 8002a66:	2128      	movs	r1, #40	; 0x28
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fd45 	bl	80024f8 <lsm9ds1_read_reg>
 8002a6e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002a70:	7b7b      	ldrb	r3, [r7, #13]
 8002a72:	b21a      	sxth	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	7b3b      	ldrb	r3, [r7, #12]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	3302      	adds	r3, #2
 8002a98:	b212      	sxth	r2, r2
 8002a9a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	7bbb      	ldrb	r3, [r7, #14]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	b212      	sxth	r2, r2
 8002ab8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002aba:	7c7a      	ldrb	r2, [r7, #17]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	b212      	sxth	r2, r2
 8002ac2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	7c3b      	ldrb	r3, [r7, #16]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	3304      	adds	r3, #4
 8002ade:	b212      	sxth	r2, r2
 8002ae0:	801a      	strh	r2, [r3, #0]

  return ret;
 8002ae2:	697b      	ldr	r3, [r7, #20]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	2301      	movs	r3, #1
 8002afc:	210f      	movs	r1, #15
 8002afe:	68b8      	ldr	r0, [r7, #8]
 8002b00:	f7ff fcfa 	bl	80024f8 <lsm9ds1_read_reg>
 8002b04:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d107      	bne.n	8002b1c <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	2301      	movs	r3, #1
 8002b12:	210f      	movs	r1, #15
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fcef 	bl	80024f8 <lsm9ds1_read_reg>
 8002b1a:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8002b1c:	697b      	ldr	r3, [r7, #20]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8002b36:	2301      	movs	r3, #1
 8002b38:	2117      	movs	r1, #23
 8002b3a:	68b8      	ldr	r0, [r7, #8]
 8002b3c:	f7ff fcdc 	bl	80024f8 <lsm9ds1_read_reg>
 8002b40:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8002b48:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	2127      	movs	r1, #39	; 0x27
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7ff fcd2 	bl	80024f8 <lsm9ds1_read_reg>
 8002b54:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002b56:	697b      	ldr	r3, [r7, #20]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002b6e:	f107 0214 	add.w	r2, r7, #20
 8002b72:	2301      	movs	r3, #1
 8002b74:	2122      	movs	r1, #34	; 0x22
 8002b76:	68b8      	ldr	r0, [r7, #8]
 8002b78:	f7ff fcbe 	bl	80024f8 <lsm9ds1_read_reg>
 8002b7c:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10f      	bne.n	8002ba4 <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	7d3b      	ldrb	r3, [r7, #20]
 8002b8e:	f362 0300 	bfi	r3, r2, #0, #1
 8002b92:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002b94:	f107 0214 	add.w	r2, r7, #20
 8002b98:	2301      	movs	r3, #1
 8002b9a:	2122      	movs	r1, #34	; 0x22
 8002b9c:	68b8      	ldr	r0, [r7, #8]
 8002b9e:	f7ff fcc3 	bl	8002528 <lsm9ds1_write_reg>
 8002ba2:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d107      	bne.n	8002bba <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002baa:	f107 0218 	add.w	r2, r7, #24
 8002bae:	2301      	movs	r3, #1
 8002bb0:	2121      	movs	r1, #33	; 0x21
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff fca0 	bl	80024f8 <lsm9ds1_read_reg>
 8002bb8:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10f      	bne.n	8002be0 <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	7e3b      	ldrb	r3, [r7, #24]
 8002bca:	f362 0382 	bfi	r3, r2, #2, #1
 8002bce:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002bd0:	f107 0218 	add.w	r2, r7, #24
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	2121      	movs	r1, #33	; 0x21
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff fca5 	bl	8002528 <lsm9ds1_write_reg>
 8002bde:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8002be0:	69fb      	ldr	r3, [r7, #28]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b088      	sub	sp, #32
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8002bf6:	f107 0214 	add.w	r2, r7, #20
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	2122      	movs	r1, #34	; 0x22
 8002bfe:	68b8      	ldr	r0, [r7, #8]
 8002c00:	f7ff fc7a 	bl	80024f8 <lsm9ds1_read_reg>
 8002c04:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d114      	bne.n	8002c36 <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8002c0c:	f107 0218 	add.w	r2, r7, #24
 8002c10:	2301      	movs	r3, #1
 8002c12:	2121      	movs	r1, #33	; 0x21
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff fc6f 	bl	80024f8 <lsm9ds1_read_reg>
 8002c1a:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8002c1c:	7e3b      	ldrb	r3, [r7, #24]
 8002c1e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	7d3b      	ldrb	r3, [r7, #20]
 8002c26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002c36:	69fb      	ldr	r3, [r7, #28]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002c4c:	f107 0208 	add.w	r2, r7, #8
 8002c50:	2301      	movs	r3, #1
 8002c52:	2110      	movs	r1, #16
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff fc4f 	bl	80024f8 <lsm9ds1_read_reg>
 8002c5a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	7a3b      	ldrb	r3, [r7, #8]
 8002c6c:	f362 0301 	bfi	r3, r2, #0, #2
 8002c70:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8002c72:	f107 0208 	add.w	r2, r7, #8
 8002c76:	2301      	movs	r3, #1
 8002c78:	2110      	movs	r1, #16
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fc54 	bl	8002528 <lsm9ds1_write_reg>
 8002c80:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8002c98:	f107 0210 	add.w	r2, r7, #16
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	2111      	movs	r1, #17
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7ff fc29 	bl	80024f8 <lsm9ds1_read_reg>
 8002ca6:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10f      	bne.n	8002cce <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	7c3b      	ldrb	r3, [r7, #16]
 8002cb8:	f362 0301 	bfi	r3, r2, #0, #2
 8002cbc:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8002cbe:	f107 0210 	add.w	r2, r7, #16
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	2111      	movs	r1, #17
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fc2e 	bl	8002528 <lsm9ds1_write_reg>
 8002ccc:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002cd4:	f107 020c 	add.w	r2, r7, #12
 8002cd8:	2301      	movs	r3, #1
 8002cda:	2112      	movs	r1, #18
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fc0b 	bl	80024f8 <lsm9ds1_read_reg>
 8002ce2:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d110      	bne.n	8002d0c <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	7b3b      	ldrb	r3, [r7, #12]
 8002cf6:	f362 1386 	bfi	r3, r2, #6, #1
 8002cfa:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002cfc:	f107 020c 	add.w	r2, r7, #12
 8002d00:	2301      	movs	r3, #1
 8002d02:	2112      	movs	r1, #18
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff fc0f 	bl	8002528 <lsm9ds1_write_reg>
 8002d0a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8002d0c:	697b      	ldr	r3, [r7, #20]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002d22:	f107 0208 	add.w	r2, r7, #8
 8002d26:	2301      	movs	r3, #1
 8002d28:	2112      	movs	r1, #18
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fbe4 	bl	80024f8 <lsm9ds1_read_reg>
 8002d30:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10f      	bne.n	8002d58 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	7a3b      	ldrb	r3, [r7, #8]
 8002d42:	f362 0303 	bfi	r3, r2, #0, #4
 8002d46:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8002d48:	f107 0208 	add.w	r2, r7, #8
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	2112      	movs	r1, #18
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff fbe9 	bl	8002528 <lsm9ds1_write_reg>
 8002d56:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8002d58:	68fb      	ldr	r3, [r7, #12]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002d6e:	f107 0208 	add.w	r2, r7, #8
 8002d72:	2301      	movs	r3, #1
 8002d74:	2120      	movs	r1, #32
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fbbe 	bl	80024f8 <lsm9ds1_read_reg>
 8002d7c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d118      	bne.n	8002db6 <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	7a3b      	ldrb	r3, [r7, #8]
 8002d8e:	f362 0301 	bfi	r3, r2, #0, #2
 8002d92:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	7a3b      	ldrb	r3, [r7, #8]
 8002da0:	f362 0382 	bfi	r3, r2, #2, #1
 8002da4:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8002da6:	f107 0208 	add.w	r2, r7, #8
 8002daa:	2301      	movs	r3, #1
 8002dac:	2120      	movs	r1, #32
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fbba 	bl	8002528 <lsm9ds1_write_reg>
 8002db4:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8002dcc:	f107 0208 	add.w	r2, r7, #8
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	2121      	movs	r1, #33	; 0x21
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff fb8f 	bl	80024f8 <lsm9ds1_read_reg>
 8002dda:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	7a3b      	ldrb	r3, [r7, #8]
 8002dec:	f362 0382 	bfi	r3, r2, #2, #1
 8002df0:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8002df2:	f107 0208 	add.w	r2, r7, #8
 8002df6:	2301      	movs	r3, #1
 8002df8:	2121      	movs	r1, #33	; 0x21
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff fb94 	bl	8002528 <lsm9ds1_write_reg>
 8002e00:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8002e02:	68fb      	ldr	r3, [r7, #12]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8002e18:	f107 0208 	add.w	r2, r7, #8
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	2121      	movs	r1, #33	; 0x21
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fb69 	bl	80024f8 <lsm9ds1_read_reg>
 8002e26:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d118      	bne.n	8002e60 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	7a3b      	ldrb	r3, [r7, #8]
 8002e3a:	f362 13c7 	bfi	r3, r2, #7, #1
 8002e3e:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	7a3b      	ldrb	r3, [r7, #8]
 8002e4a:	f362 1346 	bfi	r3, r2, #5, #2
 8002e4e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8002e50:	f107 0208 	add.w	r2, r7, #8
 8002e54:	2301      	movs	r3, #1
 8002e56:	2121      	movs	r1, #33	; 0x21
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fb65 	bl	8002528 <lsm9ds1_write_reg>
 8002e5e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8002e60:	68fb      	ldr	r3, [r7, #12]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <ADC_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void ADC_Read(void) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  	ADC1_val = ADC_GetVal(ADC1);
 8002e70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e74:	f000 f85e 	bl	8002f34 <ADC_GetVal>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <ADC_Read+0x3c>)
 8002e7c:	6013      	str	r3, [r2, #0]
	  ADC2_val = ADC_GetVal(ADC2);
 8002e7e:	480b      	ldr	r0, [pc, #44]	; (8002eac <ADC_Read+0x40>)
 8002e80:	f000 f858 	bl	8002f34 <ADC_GetVal>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4a0a      	ldr	r2, [pc, #40]	; (8002eb0 <ADC_Read+0x44>)
 8002e88:	6013      	str	r3, [r2, #0]
	  ADC3_val = ADC_GetVal(ADC3);
 8002e8a:	480a      	ldr	r0, [pc, #40]	; (8002eb4 <ADC_Read+0x48>)
 8002e8c:	f000 f852 	bl	8002f34 <ADC_GetVal>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <ADC_Read+0x4c>)
 8002e94:	6013      	str	r3, [r2, #0]
	  ADC4_val = ADC_GetVal(ADC4);
 8002e96:	4809      	ldr	r0, [pc, #36]	; (8002ebc <ADC_Read+0x50>)
 8002e98:	f000 f84c 	bl	8002f34 <ADC_GetVal>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <ADC_Read+0x54>)
 8002ea0:	6013      	str	r3, [r2, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000314 	.word	0x20000314
 8002eac:	50000100 	.word	0x50000100
 8002eb0:	20000318 	.word	0x20000318
 8002eb4:	50000400 	.word	0x50000400
 8002eb8:	2000031c 	.word	0x2000031c
 8002ebc:	50000500 	.word	0x50000500
 8002ec0:	20000320 	.word	0x20000320

08002ec4 <ADC_Calibrate>:

static void ADC_Calibrate(ADC_TypeDef* adc) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed2:	d00b      	beq.n	8002eec <ADC_Calibrate+0x28>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <ADC_Calibrate+0x64>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d007      	beq.n	8002eec <ADC_Calibrate+0x28>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <ADC_Calibrate+0x68>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d003      	beq.n	8002eec <ADC_Calibrate+0x28>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <ADC_Calibrate+0x6c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d117      	bne.n	8002f1c <ADC_Calibrate+0x58>
	  return;
  }

  adc->CR &= ~ADC_CR_ADEN; // Disable ADC
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f023 0201 	bic.w	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCALDIF; // Calibration for Single-ended input mode
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCAL; // Start ADC calibration
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
  while (adc->CR & ADC_CR_ADCAL);
 8002f10:	bf00      	nop
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	dbfb      	blt.n	8002f12 <ADC_Calibrate+0x4e>
 8002f1a:	e000      	b.n	8002f1e <ADC_Calibrate+0x5a>
	  return;
 8002f1c:	bf00      	nop
}
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	50000100 	.word	0x50000100
 8002f2c:	50000400 	.word	0x50000400
 8002f30:	50000500 	.word	0x50000500

08002f34 <ADC_GetVal>:

static int ADC_GetVal(ADC_TypeDef* adc) {
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
	if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f42:	d00d      	beq.n	8002f60 <ADC_GetVal+0x2c>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <ADC_GetVal+0x3c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <ADC_GetVal+0x2c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <ADC_GetVal+0x40>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d005      	beq.n	8002f60 <ADC_GetVal+0x2c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <ADC_GetVal+0x44>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d001      	beq.n	8002f60 <ADC_GetVal+0x2c>
		return 0;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	e001      	b.n	8002f64 <ADC_GetVal+0x30>
	}
	return adc->DR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	50000100 	.word	0x50000100
 8002f74:	50000400 	.word	0x50000400
 8002f78:	50000500 	.word	0x50000500

08002f7c <IMU_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void IMU_Read(void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <IMU_Read+0x150>)
 8002f82:	4953      	ldr	r1, [pc, #332]	; (80030d0 <IMU_Read+0x154>)
 8002f84:	4853      	ldr	r0, [pc, #332]	; (80030d4 <IMU_Read+0x158>)
 8002f86:	f7ff fdce 	bl	8002b26 <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 8002f8a:	4b50      	ldr	r3, [pc, #320]	; (80030cc <IMU_Read+0x150>)
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05a      	beq.n	800304e <IMU_Read+0xd2>
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <IMU_Read+0x150>)
 8002f9a:	785b      	ldrb	r3, [r3, #1]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d053      	beq.n	800304e <IMU_Read+0xd2>
		/* Read accelerometer and gyroscope data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8002fa6:	2206      	movs	r2, #6
 8002fa8:	2100      	movs	r1, #0
 8002faa:	484b      	ldr	r0, [pc, #300]	; (80030d8 <IMU_Read+0x15c>)
 8002fac:	f004 fc92 	bl	80078d4 <memset>
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002fb0:	2206      	movs	r2, #6
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4849      	ldr	r0, [pc, #292]	; (80030dc <IMU_Read+0x160>)
 8002fb6:	f004 fc8d 	bl	80078d4 <memset>
		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration);
 8002fba:	4947      	ldr	r1, [pc, #284]	; (80030d8 <IMU_Read+0x15c>)
 8002fbc:	4844      	ldr	r0, [pc, #272]	; (80030d0 <IMU_Read+0x154>)
 8002fbe:	f7ff fcff 	bl	80029c0 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate);
 8002fc2:	4946      	ldr	r1, [pc, #280]	; (80030dc <IMU_Read+0x160>)
 8002fc4:	4842      	ldr	r0, [pc, #264]	; (80030d0 <IMU_Read+0x154>)
 8002fc6:	f7ff fcb0 	bl	800292a <lsm9ds1_angular_rate_raw_get>
//		 accel.acceleration.y = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]) * 9.807) / 1000;
//		 accel.acceleration.z = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]) * 9.807) / 1000;
//		 gyro.gyro.x = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) * 2 * M_PI)/360000;
//		 gyro.gyro.y = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) * 2 * M_PI)/360000;
//		 gyro.gyro.z = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) * 2 * M_PI)/360000;
		accel.acceleration.x = lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[0]);
 8002fca:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <IMU_Read+0x15c>)
 8002fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fac1 	bl	8002558 <lsm9ds1_from_fs4g_to_mg>
 8002fd6:	eef0 7a40 	vmov.f32	s15, s0
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <IMU_Read+0x164>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
		accel.acceleration.y = lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]);
 8002fe0:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <IMU_Read+0x15c>)
 8002fe2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fab6 	bl	8002558 <lsm9ds1_from_fs4g_to_mg>
 8002fec:	eef0 7a40 	vmov.f32	s15, s0
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <IMU_Read+0x164>)
 8002ff2:	edc3 7a01 	vstr	s15, [r3, #4]
		accel.acceleration.z = lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]);
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <IMU_Read+0x15c>)
 8002ff8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff faab 	bl	8002558 <lsm9ds1_from_fs4g_to_mg>
 8003002:	eef0 7a40 	vmov.f32	s15, s0
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <IMU_Read+0x164>)
 8003008:	edc3 7a02 	vstr	s15, [r3, #8]
		gyro.gyro.x = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <IMU_Read+0x160>)
 800300e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fab8 	bl	8002588 <lsm9ds1_from_fs2000dps_to_mdps>
 8003018:	eef0 7a40 	vmov.f32	s15, s0
 800301c:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <IMU_Read+0x168>)
 800301e:	edc3 7a00 	vstr	s15, [r3]
		gyro.gyro.y = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8003022:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <IMU_Read+0x160>)
 8003024:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff faad 	bl	8002588 <lsm9ds1_from_fs2000dps_to_mdps>
 800302e:	eef0 7a40 	vmov.f32	s15, s0
 8003032:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <IMU_Read+0x168>)
 8003034:	edc3 7a01 	vstr	s15, [r3, #4]
		gyro.gyro.z = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <IMU_Read+0x160>)
 800303a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff faa2 	bl	8002588 <lsm9ds1_from_fs2000dps_to_mdps>
 8003044:	eef0 7a40 	vmov.f32	s15, s0
 8003048:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <IMU_Read+0x168>)
 800304a:	edc3 7a02 	vstr	s15, [r3, #8]
	}

	if (reg.status_mag.zyxda) {
 800304e:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <IMU_Read+0x150>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d035      	beq.n	80030c8 <IMU_Read+0x14c>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 800305c:	2206      	movs	r2, #6
 800305e:	2100      	movs	r1, #0
 8003060:	4821      	ldr	r0, [pc, #132]	; (80030e8 <IMU_Read+0x16c>)
 8003062:	f004 fc37 	bl	80078d4 <memset>
		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 8003066:	4920      	ldr	r1, [pc, #128]	; (80030e8 <IMU_Read+0x16c>)
 8003068:	481a      	ldr	r0, [pc, #104]	; (80030d4 <IMU_Read+0x158>)
 800306a:	f7ff fcf4 	bl	8002a56 <lsm9ds1_magnetic_raw_get>
		mag.magnetic.x = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[0]) / 10;
 800306e:	4b1e      	ldr	r3, [pc, #120]	; (80030e8 <IMU_Read+0x16c>)
 8003070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fa9f 	bl	80025b8 <lsm9ds1_from_fs16gauss_to_mG>
 800307a:	eeb0 7a40 	vmov.f32	s14, s0
 800307e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003086:	4b19      	ldr	r3, [pc, #100]	; (80030ec <IMU_Read+0x170>)
 8003088:	edc3 7a00 	vstr	s15, [r3]
		mag.magnetic.y = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[1]) / 10;
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <IMU_Read+0x16c>)
 800308e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff fa90 	bl	80025b8 <lsm9ds1_from_fs16gauss_to_mG>
 8003098:	eeb0 7a40 	vmov.f32	s14, s0
 800309c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80030a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <IMU_Read+0x170>)
 80030a6:	edc3 7a01 	vstr	s15, [r3, #4]
		mag.magnetic.z = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[2]) / 10;
 80030aa:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <IMU_Read+0x16c>)
 80030ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fa81 	bl	80025b8 <lsm9ds1_from_fs16gauss_to_mG>
 80030b6:	eeb0 7a40 	vmov.f32	s14, s0
 80030ba:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80030be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <IMU_Read+0x170>)
 80030c4:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	200000e4 	.word	0x200000e4
 80030d0:	20000324 	.word	0x20000324
 80030d4:	20000334 	.word	0x20000334
 80030d8:	200000c8 	.word	0x200000c8
 80030dc:	200000d0 	.word	0x200000d0
 80030e0:	200002fc 	.word	0x200002fc
 80030e4:	200002f0 	.word	0x200002f0
 80030e8:	200000d8 	.word	0x200000d8
 80030ec:	20000308 	.word	0x20000308

080030f0 <IMU_Setup>:

static int IMU_Setup(void) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <IMU_Setup+0xcc>)
 80030f6:	4a32      	ldr	r2, [pc, #200]	; (80031c0 <IMU_Setup+0xd0>)
 80030f8:	601a      	str	r2, [r3, #0]
  dev_ctx_imu.read_reg = platform_read_imu;
 80030fa:	4b30      	ldr	r3, [pc, #192]	; (80031bc <IMU_Setup+0xcc>)
 80030fc:	4a31      	ldr	r2, [pc, #196]	; (80031c4 <IMU_Setup+0xd4>)
 80030fe:	605a      	str	r2, [r3, #4]
  dev_ctx_imu.handle = (void *)&imu_bus;
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <IMU_Setup+0xcc>)
 8003102:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <IMU_Setup+0xd8>)
 8003104:	60da      	str	r2, [r3, #12]
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <IMU_Setup+0xdc>)
 8003108:	4a31      	ldr	r2, [pc, #196]	; (80031d0 <IMU_Setup+0xe0>)
 800310a:	601a      	str	r2, [r3, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 800310c:	4b2f      	ldr	r3, [pc, #188]	; (80031cc <IMU_Setup+0xdc>)
 800310e:	4a31      	ldr	r2, [pc, #196]	; (80031d4 <IMU_Setup+0xe4>)
 8003110:	605a      	str	r2, [r3, #4]
  dev_ctx_mag.handle = (void *)&mag_bus;
 8003112:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <IMU_Setup+0xdc>)
 8003114:	4a30      	ldr	r2, [pc, #192]	; (80031d8 <IMU_Setup+0xe8>)
 8003116:	60da      	str	r2, [r3, #12]

  platform_delay(BOOT_TIME);
 8003118:	2014      	movs	r0, #20
 800311a:	f000 f8f3 	bl	8003304 <platform_delay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <IMU_Setup+0xec>)
 8003120:	4926      	ldr	r1, [pc, #152]	; (80031bc <IMU_Setup+0xcc>)
 8003122:	482a      	ldr	r0, [pc, #168]	; (80031cc <IMU_Setup+0xdc>)
 8003124:	f7ff fce2 	bl	8002aec <lsm9ds1_dev_id_get>

//  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
  if (whoamI.imu != LSM9DS1_IMU_ID) {
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <IMU_Setup+0xec>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b68      	cmp	r3, #104	; 0x68
 800312e:	d002      	beq.n	8003136 <IMU_Setup+0x46>
	  while (1) {
		  /* Device not found management */
		  return SETUP_FAIL;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003134:	e03f      	b.n	80031b6 <IMU_Setup+0xc6>
	  }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8003136:	2201      	movs	r2, #1
 8003138:	4920      	ldr	r1, [pc, #128]	; (80031bc <IMU_Setup+0xcc>)
 800313a:	4824      	ldr	r0, [pc, #144]	; (80031cc <IMU_Setup+0xdc>)
 800313c:	f7ff fd10 	bl	8002b60 <lsm9ds1_dev_reset_set>

  do {
	  lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8003140:	4a27      	ldr	r2, [pc, #156]	; (80031e0 <IMU_Setup+0xf0>)
 8003142:	491e      	ldr	r1, [pc, #120]	; (80031bc <IMU_Setup+0xcc>)
 8003144:	4821      	ldr	r0, [pc, #132]	; (80031cc <IMU_Setup+0xdc>)
 8003146:	f7ff fd50 	bl	8002bea <lsm9ds1_dev_reset_get>
  } while (rst);
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <IMU_Setup+0xf0>)
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f6      	bne.n	8003140 <IMU_Setup+0x50>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8003152:	2201      	movs	r2, #1
 8003154:	4919      	ldr	r1, [pc, #100]	; (80031bc <IMU_Setup+0xcc>)
 8003156:	481d      	ldr	r0, [pc, #116]	; (80031cc <IMU_Setup+0xdc>)
 8003158:	f7ff faf7 	bl	800274a <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 800315c:	2102      	movs	r1, #2
 800315e:	4817      	ldr	r0, [pc, #92]	; (80031bc <IMU_Setup+0xcc>)
 8003160:	f7ff facd 	bl	80026fe <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8003164:	2103      	movs	r1, #3
 8003166:	4815      	ldr	r0, [pc, #84]	; (80031bc <IMU_Setup+0xcc>)
 8003168:	f7ff fa3e 	bl	80025e8 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 800316c:	2103      	movs	r1, #3
 800316e:	4817      	ldr	r0, [pc, #92]	; (80031cc <IMU_Setup+0xdc>)
 8003170:	f7ff fbb5 	bl	80028de <lsm9ds1_mag_full_scale_set>
  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 8003174:	2100      	movs	r1, #0
 8003176:	4811      	ldr	r0, [pc, #68]	; (80031bc <IMU_Setup+0xcc>)
 8003178:	f7ff fdf3 	bl	8002d62 <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 800317c:	2110      	movs	r1, #16
 800317e:	480f      	ldr	r0, [pc, #60]	; (80031bc <IMU_Setup+0xcc>)
 8003180:	f7ff fe44 	bl	8002e0c <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 8003184:	2100      	movs	r1, #0
 8003186:	480d      	ldr	r0, [pc, #52]	; (80031bc <IMU_Setup+0xcc>)
 8003188:	f7ff fe1a 	bl	8002dc0 <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 800318c:	2103      	movs	r1, #3
 800318e:	480b      	ldr	r0, [pc, #44]	; (80031bc <IMU_Setup+0xcc>)
 8003190:	f7ff fd56 	bl	8002c40 <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 8003194:	2105      	movs	r1, #5
 8003196:	4809      	ldr	r0, [pc, #36]	; (80031bc <IMU_Setup+0xcc>)
 8003198:	f7ff fdbd 	bl	8002d16 <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 800319c:	2112      	movs	r1, #18
 800319e:	4807      	ldr	r0, [pc, #28]	; (80031bc <IMU_Setup+0xcc>)
 80031a0:	f7ff fd74 	bl	8002c8c <lsm9ds1_gy_filter_out_path_set>
  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 80031a4:	2122      	movs	r1, #34	; 0x22
 80031a6:	4805      	ldr	r0, [pc, #20]	; (80031bc <IMU_Setup+0xcc>)
 80031a8:	f7ff fa44 	bl	8002634 <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 80031ac:	2134      	movs	r1, #52	; 0x34
 80031ae:	4807      	ldr	r0, [pc, #28]	; (80031cc <IMU_Setup+0xdc>)
 80031b0:	f7ff fb1a 	bl	80027e8 <lsm9ds1_mag_data_rate_set>

  return SETUP_SUCCESS;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000324 	.word	0x20000324
 80031c0:	080031e5 	.word	0x080031e5
 80031c4:	08003275 	.word	0x08003275
 80031c8:	20000014 	.word	0x20000014
 80031cc:	20000334 	.word	0x20000334
 80031d0:	08003229 	.word	0x08003229
 80031d4:	080032b9 	.word	0x080032b9
 80031d8:	20000004 	.word	0x20000004
 80031dc:	200000e0 	.word	0x200000e0
 80031e0:	200000e6 	.word	0x200000e6

080031e4 <platform_write_imu>:

static int32_t platform_write_imu(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af04      	add	r7, sp, #16
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	461a      	mov	r2, r3
 80031f0:	460b      	mov	r3, r1
 80031f2:	72fb      	strb	r3, [r7, #11]
 80031f4:	4613      	mov	r3, r2
 80031f6:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	791b      	ldrb	r3, [r3, #4]
 8003204:	b299      	uxth	r1, r3
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	b29a      	uxth	r2, r3
 800320a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320e:	9302      	str	r3, [sp, #8]
 8003210:	893b      	ldrh	r3, [r7, #8]
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2301      	movs	r3, #1
 800321a:	f002 f9c5 	bl	80055a8 <HAL_I2C_Mem_Write>
  return 0;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <platform_write_mag>:

static int32_t platform_write_mag(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af04      	add	r7, sp, #16
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	461a      	mov	r2, r3
 8003234:	460b      	mov	r3, r1
 8003236:	72fb      	strb	r3, [r7, #11]
 8003238:	4613      	mov	r3, r2
 800323a:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	617b      	str	r3, [r7, #20]
	reg |= 0x80;
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003246:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	791b      	ldrb	r3, [r3, #4]
 8003250:	b299      	uxth	r1, r3
 8003252:	7afb      	ldrb	r3, [r7, #11]
 8003254:	b29a      	uxth	r2, r3
 8003256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800325a:	9302      	str	r3, [sp, #8]
 800325c:	893b      	ldrh	r3, [r7, #8]
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	2301      	movs	r3, #1
 8003266:	f002 f99f 	bl	80055a8 <HAL_I2C_Mem_Write>
	  return 0;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <platform_read_imu>:

static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af04      	add	r7, sp, #16
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	460b      	mov	r3, r1
 8003282:	72fb      	strb	r3, [r7, #11]
 8003284:	4613      	mov	r3, r2
 8003286:	813b      	strh	r3, [r7, #8]
	  sensbus_t *sensbus = (sensbus_t *)handle;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	617b      	str	r3, [r7, #20]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	791b      	ldrb	r3, [r3, #4]
 8003294:	b299      	uxth	r1, r3
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	b29a      	uxth	r2, r3
 800329a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800329e:	9302      	str	r3, [sp, #8]
 80032a0:	893b      	ldrh	r3, [r7, #8]
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	2301      	movs	r3, #1
 80032aa:	f002 fa91 	bl	80057d0 <HAL_I2C_Mem_Read>
	  return 0;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <platform_read_mag>:

static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08a      	sub	sp, #40	; 0x28
 80032bc:	af04      	add	r7, sp, #16
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	461a      	mov	r2, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	72fb      	strb	r3, [r7, #11]
 80032c8:	4613      	mov	r3, r2
 80032ca:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	617b      	str	r3, [r7, #20]
	  reg |= 0x80;
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032d6:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	791b      	ldrb	r3, [r3, #4]
 80032e0:	b299      	uxth	r1, r3
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ea:	9302      	str	r3, [sp, #8]
 80032ec:	893b      	ldrh	r3, [r7, #8]
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	2301      	movs	r3, #1
 80032f6:	f002 fa6b 	bl	80057d0 <HAL_I2C_Mem_Read>
	  return 0;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 fef3 	bl	80040f8 <HAL_Delay>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003320:	f000 fe84 	bl	800402c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003324:	f000 f86a 	bl	80033fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003328:	f000 fba8 	bl	8003a7c <MX_GPIO_Init>
  MX_ADC1_Init();
 800332c:	f000 f8c4 	bl	80034b8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003330:	f000 f96e 	bl	8003610 <MX_ADC2_Init>
  MX_ADC3_Init();
 8003334:	f000 f9f8 	bl	8003728 <MX_ADC3_Init>
  MX_ADC4_Init();
 8003338:	f000 fa94 	bl	8003864 <MX_ADC4_Init>
  MX_I2C1_Init();
 800333c:	f000 fb1e 	bl	800397c <MX_I2C1_Init>
  MX_I2C2_Init();
 8003340:	f000 fb5c 	bl	80039fc <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */
  if (IMU_Setup() != SETUP_SUCCESS) {
 8003344:	f7ff fed4 	bl	80030f0 <IMU_Setup>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <main+0x36>
    return 1;
 800334e:	2301      	movs	r3, #1
 8003350:	e049      	b.n	80033e6 <main+0xca>
  }
  MCP4728_Init(&hi2c2, output);
 8003352:	4b26      	ldr	r3, [pc, #152]	; (80033ec <main+0xd0>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4611      	mov	r1, r2
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4610      	mov	r0, r2
 800335c:	891a      	ldrh	r2, [r3, #8]
 800335e:	2300      	movs	r3, #0
 8003360:	f362 030f 	bfi	r3, r2, #0, #16
 8003364:	4602      	mov	r2, r0
 8003366:	4822      	ldr	r0, [pc, #136]	; (80033f0 <main+0xd4>)
 8003368:	f7ff f887 	bl	800247a <MCP4728_Init>
  output.channelVref = 0x00;
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <main+0xd0>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
  output.channel_Gain = 0x00;
 8003372:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <main+0xd0>)
 8003374:	2200      	movs	r2, #0
 8003376:	705a      	strb	r2, [r3, #1]

  reset_aux_frame();
 8003378:	f7fd fc9c 	bl	8000cb4 <reset_aux_frame>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  while (1)
  for (i = 0; i < 0xFFF; i++) {
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <main+0xd8>)
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	e029      	b.n	80033d8 <main+0xbc>
	/* SENSOR READ BEGIN */
	ADC_Read();
 8003384:	f7ff fd72 	bl	8002e6c <ADC_Read>
	IMU_Read();
 8003388:	f7ff fdf8 	bl	8002f7c <IMU_Read>

	/* SENSOR READ END */

	/* CALCULATIONS BEGIN */
	calculate_orientation(0.002); // @henry: change freq
 800338c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80033f8 <main+0xdc>
 8003390:	f7fd fbd6 	bl	8000b40 <calculate_orientation>
	// calculate_gestures();

	/* CALCULATIONS END*/

	/* OUTPUT BEGIN */
	output.channel_Val[0] = i;
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <main+0xd8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	b29a      	uxth	r2, r3
 800339a:	4b14      	ldr	r3, [pc, #80]	; (80033ec <main+0xd0>)
 800339c:	805a      	strh	r2, [r3, #2]
	output.channel_Val[1] = 0x800;
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <main+0xd0>)
 80033a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a4:	809a      	strh	r2, [r3, #4]
	output.channel_Val[2] = 0xBBD;
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <main+0xd0>)
 80033a8:	f640 32bd 	movw	r2, #3005	; 0xbbd
 80033ac:	80da      	strh	r2, [r3, #6]
	output.channel_Val[3] = 0x00;
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <main+0xd0>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	811a      	strh	r2, [r3, #8]
	MCP4728_Write_AllChannels_Diff(&hi2c2, output);
 80033b4:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <main+0xd0>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4611      	mov	r1, r2
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4610      	mov	r0, r2
 80033be:	891a      	ldrh	r2, [r3, #8]
 80033c0:	2300      	movs	r3, #0
 80033c2:	f362 030f 	bfi	r3, r2, #0, #16
 80033c6:	4602      	mov	r2, r0
 80033c8:	4809      	ldr	r0, [pc, #36]	; (80033f0 <main+0xd4>)
 80033ca:	f7ff f812 	bl	80023f2 <MCP4728_Write_AllChannels_Diff>
  for (i = 0; i < 0xFFF; i++) {
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <main+0xd8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <main+0xd8>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <main+0xd8>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033e0:	4293      	cmp	r3, r2
 80033e2:	ddcf      	ble.n	8003384 <main+0x68>
 80033e4:	2300      	movs	r3, #0

	/* OUTPUT END */
  }
  /* USER CODE END 3 */
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	200000bc 	.word	0x200000bc
 80033f0:	2000027c 	.word	0x2000027c
 80033f4:	20000344 	.word	0x20000344
 80033f8:	3b03126f 	.word	0x3b03126f

080033fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b09e      	sub	sp, #120	; 0x78
 8003400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003402:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003406:	2228      	movs	r2, #40	; 0x28
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f004 fa62 	bl	80078d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003410:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003420:	463b      	mov	r3, r7
 8003422:	223c      	movs	r2, #60	; 0x3c
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f004 fa54 	bl	80078d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800342c:	2302      	movs	r3, #2
 800342e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003430:	2301      	movs	r3, #1
 8003432:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003434:	2310      	movs	r3, #16
 8003436:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003438:	2302      	movs	r3, #2
 800343a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800343c:	2300      	movs	r3, #0
 800343e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003440:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003444:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003446:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800344a:	4618      	mov	r0, r3
 800344c:	f002 fe44 	bl	80060d8 <HAL_RCC_OscConfig>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003456:	f000 fb4d 	bl	8003af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800345a:	230f      	movs	r3, #15
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800345e:	2300      	movs	r3, #0
 8003460:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003462:	2300      	movs	r3, #0
 8003464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003466:	2300      	movs	r3, #0
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800346a:	2300      	movs	r3, #0
 800346c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800346e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f003 fe6d 	bl	8007154 <HAL_RCC_ClockConfig>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003480:	f000 fb38 	bl	8003af4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8003484:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003488:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800348a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8003490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800349a:	2300      	movs	r3, #0
 800349c:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800349e:	463b      	mov	r3, r7
 80034a0:	4618      	mov	r0, r3
 80034a2:	f004 f83d 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80034ac:	f000 fb22 	bl	8003af4 <Error_Handler>
  }
}
 80034b0:	bf00      	nop
 80034b2:	3778      	adds	r7, #120	; 0x78
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80034be:	f107 031c 	add.w	r3, r7, #28
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
 80034d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80034da:	4b4c      	ldr	r3, [pc, #304]	; (800360c <MX_ADC1_Init+0x154>)
 80034dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80034e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80034e2:	4b4a      	ldr	r3, [pc, #296]	; (800360c <MX_ADC1_Init+0x154>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034e8:	4b48      	ldr	r3, [pc, #288]	; (800360c <MX_ADC1_Init+0x154>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <MX_ADC1_Init+0x154>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80034f4:	4b45      	ldr	r3, [pc, #276]	; (800360c <MX_ADC1_Init+0x154>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034fa:	4b44      	ldr	r3, [pc, #272]	; (800360c <MX_ADC1_Init+0x154>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003502:	4b42      	ldr	r3, [pc, #264]	; (800360c <MX_ADC1_Init+0x154>)
 8003504:	2200      	movs	r2, #0
 8003506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003508:	4b40      	ldr	r3, [pc, #256]	; (800360c <MX_ADC1_Init+0x154>)
 800350a:	2201      	movs	r2, #1
 800350c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800350e:	4b3f      	ldr	r3, [pc, #252]	; (800360c <MX_ADC1_Init+0x154>)
 8003510:	2200      	movs	r2, #0
 8003512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003514:	4b3d      	ldr	r3, [pc, #244]	; (800360c <MX_ADC1_Init+0x154>)
 8003516:	2201      	movs	r2, #1
 8003518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800351a:	4b3c      	ldr	r3, [pc, #240]	; (800360c <MX_ADC1_Init+0x154>)
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003522:	4b3a      	ldr	r3, [pc, #232]	; (800360c <MX_ADC1_Init+0x154>)
 8003524:	2204      	movs	r2, #4
 8003526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003528:	4b38      	ldr	r3, [pc, #224]	; (800360c <MX_ADC1_Init+0x154>)
 800352a:	2200      	movs	r2, #0
 800352c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800352e:	4b37      	ldr	r3, [pc, #220]	; (800360c <MX_ADC1_Init+0x154>)
 8003530:	2200      	movs	r2, #0
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003534:	4835      	ldr	r0, [pc, #212]	; (800360c <MX_ADC1_Init+0x154>)
 8003536:	f000 fe03 	bl	8004140 <HAL_ADC_Init>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003540:	f000 fad8 	bl	8003af4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003548:	f107 031c 	add.w	r3, r7, #28
 800354c:	4619      	mov	r1, r3
 800354e:	482f      	ldr	r0, [pc, #188]	; (800360c <MX_ADC1_Init+0x154>)
 8003550:	f001 fac2 	bl	8004ad8 <HAL_ADCEx_MultiModeConfigChannel>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800355a:	f000 facb 	bl	8003af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800355e:	2301      	movs	r3, #1
 8003560:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003562:	2301      	movs	r3, #1
 8003564:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003566:	2300      	movs	r3, #0
 8003568:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	4619      	mov	r1, r3
 800357a:	4824      	ldr	r0, [pc, #144]	; (800360c <MX_ADC1_Init+0x154>)
 800357c:	f000 ffc0 	bl	8004500 <HAL_ADC_ConfigChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8003586:	f000 fab5 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_Calibrate(ADC1);
 800358a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800358e:	f7ff fc99 	bl	8002ec4 <ADC_Calibrate>

  ADC1->CR |= ADC_CR_ADEN; // Enable ADC
 8003592:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6093      	str	r3, [r2, #8]
//  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC1->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 80035a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035b0:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR &= ~0xC; // 12-bit Resolution
 80035b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035bc:	f023 030c 	bic.w	r3, r3, #12
 80035c0:	60d3      	str	r3, [r2, #12]

  ADC1->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 80035c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035cc:	f023 030f 	bic.w	r3, r3, #15
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
  ADC1->SQR1 |= 0x1 << 6; // Channel 1 of ADC1
 80035d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 80035e2:	bf00      	nop
 80035e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f8      	beq.n	80035e4 <MX_ADC1_Init+0x12c>
  ADC1->CR |= ADC_CR_ADSTART; // Start the ADC
 80035f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035fc:	f043 0304 	orr.w	r3, r3, #4
 8003600:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 8003602:	bf00      	nop
 8003604:	3728      	adds	r7, #40	; 0x28
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200000e8 	.word	0x200000e8

08003610 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003616:	463b      	mov	r3, r7
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
 8003624:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8003626:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <MX_ADC2_Init+0x110>)
 8003628:	4a3e      	ldr	r2, [pc, #248]	; (8003724 <MX_ADC2_Init+0x114>)
 800362a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800362c:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <MX_ADC2_Init+0x110>)
 800362e:	2200      	movs	r2, #0
 8003630:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <MX_ADC2_Init+0x110>)
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003638:	4b39      	ldr	r3, [pc, #228]	; (8003720 <MX_ADC2_Init+0x110>)
 800363a:	2200      	movs	r2, #0
 800363c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <MX_ADC2_Init+0x110>)
 8003640:	2200      	movs	r2, #0
 8003642:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003644:	4b36      	ldr	r3, [pc, #216]	; (8003720 <MX_ADC2_Init+0x110>)
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800364c:	4b34      	ldr	r3, [pc, #208]	; (8003720 <MX_ADC2_Init+0x110>)
 800364e:	2200      	movs	r2, #0
 8003650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <MX_ADC2_Init+0x110>)
 8003654:	2201      	movs	r2, #1
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003658:	4b31      	ldr	r3, [pc, #196]	; (8003720 <MX_ADC2_Init+0x110>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <MX_ADC2_Init+0x110>)
 8003660:	2201      	movs	r2, #1
 8003662:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003664:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <MX_ADC2_Init+0x110>)
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800366c:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <MX_ADC2_Init+0x110>)
 800366e:	2204      	movs	r2, #4
 8003670:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <MX_ADC2_Init+0x110>)
 8003674:	2200      	movs	r2, #0
 8003676:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <MX_ADC2_Init+0x110>)
 800367a:	2200      	movs	r2, #0
 800367c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800367e:	4828      	ldr	r0, [pc, #160]	; (8003720 <MX_ADC2_Init+0x110>)
 8003680:	f000 fd5e 	bl	8004140 <HAL_ADC_Init>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800368a:	f000 fa33 	bl	8003af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800368e:	2303      	movs	r3, #3
 8003690:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003692:	2301      	movs	r3, #1
 8003694:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036a6:	463b      	mov	r3, r7
 80036a8:	4619      	mov	r1, r3
 80036aa:	481d      	ldr	r0, [pc, #116]	; (8003720 <MX_ADC2_Init+0x110>)
 80036ac:	f000 ff28 	bl	8004500 <HAL_ADC_ConfigChannel>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80036b6:	f000 fa1d 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC_Calibrate(ADC2);
 80036ba:	481a      	ldr	r0, [pc, #104]	; (8003724 <MX_ADC2_Init+0x114>)
 80036bc:	f7ff fc02 	bl	8002ec4 <ADC_Calibrate>

  ADC2->CR |= ADC_CR_ADEN; // Enable ADC
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <MX_ADC2_Init+0x114>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	4a17      	ldr	r2, [pc, #92]	; (8003724 <MX_ADC2_Init+0x114>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6093      	str	r3, [r2, #8]
//  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC2->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <MX_ADC2_Init+0x114>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <MX_ADC2_Init+0x114>)
 80036d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036d6:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~0xC; // 12-bit Resolution
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <MX_ADC2_Init+0x114>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a11      	ldr	r2, [pc, #68]	; (8003724 <MX_ADC2_Init+0x114>)
 80036de:	f023 030c 	bic.w	r3, r3, #12
 80036e2:	60d3      	str	r3, [r2, #12]

  ADC2->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <MX_ADC2_Init+0x114>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <MX_ADC2_Init+0x114>)
 80036ea:	f023 030f 	bic.w	r3, r3, #15
 80036ee:	6313      	str	r3, [r2, #48]	; 0x30
  ADC2->SQR1 |= 0x3 << 6; // Channel 3 of ADC2
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <MX_ADC2_Init+0x114>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <MX_ADC2_Init+0x114>)
 80036f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036fa:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 80036fc:	bf00      	nop
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <MX_ADC2_Init+0x114>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f9      	beq.n	80036fe <MX_ADC2_Init+0xee>
  ADC2->CR |= ADC_CR_ADSTART; // Start the ADC
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <MX_ADC2_Init+0x114>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <MX_ADC2_Init+0x114>)
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC2_Init 2 */

}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000138 	.word	0x20000138
 8003724:	50000100 	.word	0x50000100

08003728 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08a      	sub	sp, #40	; 0x28
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800372e:	f107 031c 	add.w	r3, r7, #28
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800373a:	1d3b      	adds	r3, r7, #4
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
 8003748:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800374a:	4b44      	ldr	r3, [pc, #272]	; (800385c <MX_ADC3_Init+0x134>)
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <MX_ADC3_Init+0x138>)
 800374e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003750:	4b42      	ldr	r3, [pc, #264]	; (800385c <MX_ADC3_Init+0x134>)
 8003752:	2200      	movs	r2, #0
 8003754:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <MX_ADC3_Init+0x134>)
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800375c:	4b3f      	ldr	r3, [pc, #252]	; (800385c <MX_ADC3_Init+0x134>)
 800375e:	2200      	movs	r2, #0
 8003760:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8003762:	4b3e      	ldr	r3, [pc, #248]	; (800385c <MX_ADC3_Init+0x134>)
 8003764:	2200      	movs	r2, #0
 8003766:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003768:	4b3c      	ldr	r3, [pc, #240]	; (800385c <MX_ADC3_Init+0x134>)
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003770:	4b3a      	ldr	r3, [pc, #232]	; (800385c <MX_ADC3_Init+0x134>)
 8003772:	2200      	movs	r2, #0
 8003774:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <MX_ADC3_Init+0x134>)
 8003778:	2201      	movs	r2, #1
 800377a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800377c:	4b37      	ldr	r3, [pc, #220]	; (800385c <MX_ADC3_Init+0x134>)
 800377e:	2200      	movs	r2, #0
 8003780:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <MX_ADC3_Init+0x134>)
 8003784:	2201      	movs	r2, #1
 8003786:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8003788:	4b34      	ldr	r3, [pc, #208]	; (800385c <MX_ADC3_Init+0x134>)
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003790:	4b32      	ldr	r3, [pc, #200]	; (800385c <MX_ADC3_Init+0x134>)
 8003792:	2204      	movs	r2, #4
 8003794:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <MX_ADC3_Init+0x134>)
 8003798:	2200      	movs	r2, #0
 800379a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800379c:	4b2f      	ldr	r3, [pc, #188]	; (800385c <MX_ADC3_Init+0x134>)
 800379e:	2200      	movs	r2, #0
 80037a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80037a2:	482e      	ldr	r0, [pc, #184]	; (800385c <MX_ADC3_Init+0x134>)
 80037a4:	f000 fccc 	bl	8004140 <HAL_ADC_Init>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80037ae:	f000 f9a1 	bl	8003af4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80037b6:	f107 031c 	add.w	r3, r7, #28
 80037ba:	4619      	mov	r1, r3
 80037bc:	4827      	ldr	r0, [pc, #156]	; (800385c <MX_ADC3_Init+0x134>)
 80037be:	f001 f98b 	bl	8004ad8 <HAL_ADCEx_MultiModeConfigChannel>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80037c8:	f000 f994 	bl	8003af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80037d4:	2300      	movs	r3, #0
 80037d6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80037dc:	2300      	movs	r3, #0
 80037de:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80037e4:	1d3b      	adds	r3, r7, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	481c      	ldr	r0, [pc, #112]	; (800385c <MX_ADC3_Init+0x134>)
 80037ea:	f000 fe89 	bl	8004500 <HAL_ADC_ConfigChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80037f4:	f000 f97e 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  ADC_Calibrate(ADC3);
 80037f8:	4819      	ldr	r0, [pc, #100]	; (8003860 <MX_ADC3_Init+0x138>)
 80037fa:	f7ff fb63 	bl	8002ec4 <ADC_Calibrate>

  ADC3->CR |= ADC_CR_ADEN; // Enable ADC
 80037fe:	4b18      	ldr	r3, [pc, #96]	; (8003860 <MX_ADC3_Init+0x138>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4a17      	ldr	r2, [pc, #92]	; (8003860 <MX_ADC3_Init+0x138>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6093      	str	r3, [r2, #8]
//  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC3->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <MX_ADC3_Init+0x138>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	4a14      	ldr	r2, [pc, #80]	; (8003860 <MX_ADC3_Init+0x138>)
 8003810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003814:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~0xC; // 12-bit Resolution
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <MX_ADC3_Init+0x138>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4a11      	ldr	r2, [pc, #68]	; (8003860 <MX_ADC3_Init+0x138>)
 800381c:	f023 030c 	bic.w	r3, r3, #12
 8003820:	60d3      	str	r3, [r2, #12]

  ADC3->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003822:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <MX_ADC3_Init+0x138>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a0e      	ldr	r2, [pc, #56]	; (8003860 <MX_ADC3_Init+0x138>)
 8003828:	f023 030f 	bic.w	r3, r3, #15
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
  ADC3->SQR1 |= 0x1 << 6; // Channel 1 of ADC3
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <MX_ADC3_Init+0x138>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <MX_ADC3_Init+0x138>)
 8003834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003838:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 800383a:	bf00      	nop
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <MX_ADC3_Init+0x138>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0f9      	beq.n	800383c <MX_ADC3_Init+0x114>
  ADC3->CR |= ADC_CR_ADSTART; // Start the ADC
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <MX_ADC3_Init+0x138>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a04      	ldr	r2, [pc, #16]	; (8003860 <MX_ADC3_Init+0x138>)
 800384e:	f043 0304 	orr.w	r3, r3, #4
 8003852:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC3_Init 2 */

}
 8003854:	bf00      	nop
 8003856:	3728      	adds	r7, #40	; 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000188 	.word	0x20000188
 8003860:	50000400 	.word	0x50000400

08003864 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800386a:	463b      	mov	r3, r7
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
 8003878:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800387a:	4b3e      	ldr	r3, [pc, #248]	; (8003974 <MX_ADC4_Init+0x110>)
 800387c:	4a3e      	ldr	r2, [pc, #248]	; (8003978 <MX_ADC4_Init+0x114>)
 800387e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003880:	4b3c      	ldr	r3, [pc, #240]	; (8003974 <MX_ADC4_Init+0x110>)
 8003882:	2200      	movs	r2, #0
 8003884:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <MX_ADC4_Init+0x110>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800388c:	4b39      	ldr	r3, [pc, #228]	; (8003974 <MX_ADC4_Init+0x110>)
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8003892:	4b38      	ldr	r3, [pc, #224]	; (8003974 <MX_ADC4_Init+0x110>)
 8003894:	2200      	movs	r2, #0
 8003896:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8003898:	4b36      	ldr	r3, [pc, #216]	; (8003974 <MX_ADC4_Init+0x110>)
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80038a0:	4b34      	ldr	r3, [pc, #208]	; (8003974 <MX_ADC4_Init+0x110>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80038a6:	4b33      	ldr	r3, [pc, #204]	; (8003974 <MX_ADC4_Init+0x110>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <MX_ADC4_Init+0x110>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80038b2:	4b30      	ldr	r3, [pc, #192]	; (8003974 <MX_ADC4_Init+0x110>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80038b8:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <MX_ADC4_Init+0x110>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80038c0:	4b2c      	ldr	r3, [pc, #176]	; (8003974 <MX_ADC4_Init+0x110>)
 80038c2:	2204      	movs	r2, #4
 80038c4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80038c6:	4b2b      	ldr	r3, [pc, #172]	; (8003974 <MX_ADC4_Init+0x110>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80038cc:	4b29      	ldr	r3, [pc, #164]	; (8003974 <MX_ADC4_Init+0x110>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80038d2:	4828      	ldr	r0, [pc, #160]	; (8003974 <MX_ADC4_Init+0x110>)
 80038d4:	f000 fc34 	bl	8004140 <HAL_ADC_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80038de:	f000 f909 	bl	8003af4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80038fa:	463b      	mov	r3, r7
 80038fc:	4619      	mov	r1, r3
 80038fe:	481d      	ldr	r0, [pc, #116]	; (8003974 <MX_ADC4_Init+0x110>)
 8003900:	f000 fdfe 	bl	8004500 <HAL_ADC_ConfigChannel>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 800390a:	f000 f8f3 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  ADC_Calibrate(ADC4);
 800390e:	481a      	ldr	r0, [pc, #104]	; (8003978 <MX_ADC4_Init+0x114>)
 8003910:	f7ff fad8 	bl	8002ec4 <ADC_Calibrate>

  ADC4->CR |= ADC_CR_ADEN; // Enable ADC
 8003914:	4b18      	ldr	r3, [pc, #96]	; (8003978 <MX_ADC4_Init+0x114>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a17      	ldr	r2, [pc, #92]	; (8003978 <MX_ADC4_Init+0x114>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6093      	str	r3, [r2, #8]
//  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC4->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8003920:	4b15      	ldr	r3, [pc, #84]	; (8003978 <MX_ADC4_Init+0x114>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4a14      	ldr	r2, [pc, #80]	; (8003978 <MX_ADC4_Init+0x114>)
 8003926:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800392a:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~0xC; // 12-bit Resolution
 800392c:	4b12      	ldr	r3, [pc, #72]	; (8003978 <MX_ADC4_Init+0x114>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	4a11      	ldr	r2, [pc, #68]	; (8003978 <MX_ADC4_Init+0x114>)
 8003932:	f023 030c 	bic.w	r3, r3, #12
 8003936:	60d3      	str	r3, [r2, #12]

  ADC4->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <MX_ADC4_Init+0x114>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <MX_ADC4_Init+0x114>)
 800393e:	f023 030f 	bic.w	r3, r3, #15
 8003942:	6313      	str	r3, [r2, #48]	; 0x30
  ADC4->SQR1 |= 0x1 << 6; // Channel 1 of ADC4
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <MX_ADC4_Init+0x114>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <MX_ADC4_Init+0x114>)
 800394a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800394e:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8003950:	bf00      	nop
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <MX_ADC4_Init+0x114>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f9      	beq.n	8003952 <MX_ADC4_Init+0xee>
  ADC4->CR |= ADC_CR_ADSTART; // Start the ADC
 800395e:	4b06      	ldr	r3, [pc, #24]	; (8003978 <MX_ADC4_Init+0x114>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <MX_ADC4_Init+0x114>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC4_Init 2 */

}
 800396a:	bf00      	nop
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	200001d8 	.word	0x200001d8
 8003978:	50000500 	.word	0x50000500

0800397c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <MX_I2C1_Init+0x74>)
 8003982:	4a1c      	ldr	r2, [pc, #112]	; (80039f4 <MX_I2C1_Init+0x78>)
 8003984:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <MX_I2C1_Init+0x74>)
 8003988:	4a1b      	ldr	r2, [pc, #108]	; (80039f8 <MX_I2C1_Init+0x7c>)
 800398a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <MX_I2C1_Init+0x74>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <MX_I2C1_Init+0x74>)
 8003994:	2201      	movs	r2, #1
 8003996:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003998:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <MX_I2C1_Init+0x74>)
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800399e:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <MX_I2C1_Init+0x74>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <MX_I2C1_Init+0x74>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <MX_I2C1_Init+0x74>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <MX_I2C1_Init+0x74>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039b6:	480e      	ldr	r0, [pc, #56]	; (80039f0 <MX_I2C1_Init+0x74>)
 80039b8:	f001 fc72 	bl	80052a0 <HAL_I2C_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80039c2:	f000 f897 	bl	8003af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039c6:	2100      	movs	r1, #0
 80039c8:	4809      	ldr	r0, [pc, #36]	; (80039f0 <MX_I2C1_Init+0x74>)
 80039ca:	f002 faed 	bl	8005fa8 <HAL_I2CEx_ConfigAnalogFilter>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80039d4:	f000 f88e 	bl	8003af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80039d8:	2100      	movs	r1, #0
 80039da:	4805      	ldr	r0, [pc, #20]	; (80039f0 <MX_I2C1_Init+0x74>)
 80039dc:	f002 fb2f 	bl	800603e <HAL_I2CEx_ConfigDigitalFilter>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039e6:	f000 f885 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000228 	.word	0x20000228
 80039f4:	40005400 	.word	0x40005400
 80039f8:	2000090e 	.word	0x2000090e

080039fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <MX_I2C2_Init+0x78>)
 8003a04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8003a06:	4b1a      	ldr	r3, [pc, #104]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a08:	4a1b      	ldr	r2, [pc, #108]	; (8003a78 <MX_I2C2_Init+0x7c>)
 8003a0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003a0c:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003a1e:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a2a:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a36:	480e      	ldr	r0, [pc, #56]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a38:	f001 fc32 	bl	80052a0 <HAL_I2C_Init>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003a42:	f000 f857 	bl	8003af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a46:	2100      	movs	r1, #0
 8003a48:	4809      	ldr	r0, [pc, #36]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a4a:	f002 faad 	bl	8005fa8 <HAL_I2CEx_ConfigAnalogFilter>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003a54:	f000 f84e 	bl	8003af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003a58:	2100      	movs	r1, #0
 8003a5a:	4805      	ldr	r0, [pc, #20]	; (8003a70 <MX_I2C2_Init+0x74>)
 8003a5c:	f002 faef 	bl	800603e <HAL_I2CEx_ConfigDigitalFilter>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003a66:	f000 f845 	bl	8003af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000027c 	.word	0x2000027c
 8003a74:	40005800 	.word	0x40005800
 8003a78:	2000090e 	.word	0x2000090e

08003a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a82:	4b1b      	ldr	r3, [pc, #108]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8c:	6153      	str	r3, [r2, #20]
 8003a8e:	4b18      	ldr	r3, [pc, #96]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa4:	6153      	str	r3, [r2, #20]
 8003aa6:	4b12      	ldr	r3, [pc, #72]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003abc:	6153      	str	r3, [r2, #20]
 8003abe:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003ad0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ad4:	6153      	str	r3, [r2, #20]
 8003ad6:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <MX_GPIO_Init+0x74>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000

08003af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003af8:	b672      	cpsid	i
}
 8003afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003afc:	e7fe      	b.n	8003afc <Error_Handler+0x8>
	...

08003b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b06:	4b0f      	ldr	r3, [pc, #60]	; (8003b44 <HAL_MspInit+0x44>)
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <HAL_MspInit+0x44>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6193      	str	r3, [r2, #24]
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_MspInit+0x44>)
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_MspInit+0x44>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_MspInit+0x44>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	61d3      	str	r3, [r2, #28]
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_MspInit+0x44>)
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b090      	sub	sp, #64	; 0x40
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b68:	d12e      	bne.n	8003bc8 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003b6a:	4b66      	ldr	r3, [pc, #408]	; (8003d04 <HAL_ADC_MspInit+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	4a64      	ldr	r2, [pc, #400]	; (8003d04 <HAL_ADC_MspInit+0x1bc>)
 8003b72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003b74:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_ADC_MspInit+0x1bc>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d10b      	bne.n	8003b94 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003b7c:	4b62      	ldr	r3, [pc, #392]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	4a61      	ldr	r2, [pc, #388]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b86:	6153      	str	r3, [r2, #20]
 8003b88:	4b5f      	ldr	r3, [pc, #380]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b94:	4b5c      	ldr	r3, [pc, #368]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	4a5b      	ldr	r2, [pc, #364]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	6153      	str	r3, [r2, #20]
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003bac:	2301      	movs	r3, #1
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc2:	f001 f9f3 	bl	8004fac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8003bc6:	e099      	b.n	8003cfc <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a4f      	ldr	r2, [pc, #316]	; (8003d0c <HAL_ADC_MspInit+0x1c4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d12e      	bne.n	8003c30 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003bd2:	4b4c      	ldr	r3, [pc, #304]	; (8003d04 <HAL_ADC_MspInit+0x1bc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a4a      	ldr	r2, [pc, #296]	; (8003d04 <HAL_ADC_MspInit+0x1bc>)
 8003bda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003bdc:	4b49      	ldr	r3, [pc, #292]	; (8003d04 <HAL_ADC_MspInit+0x1bc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d10b      	bne.n	8003bfc <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003be4:	4b48      	ldr	r3, [pc, #288]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	4a47      	ldr	r2, [pc, #284]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bee:	6153      	str	r3, [r2, #20]
 8003bf0:	4b45      	ldr	r3, [pc, #276]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfc:	4b42      	ldr	r3, [pc, #264]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	4a41      	ldr	r2, [pc, #260]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c06:	6153      	str	r3, [r2, #20]
 8003c08:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c14:	2340      	movs	r3, #64	; 0x40
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c24:	4619      	mov	r1, r3
 8003c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c2a:	f001 f9bf 	bl	8004fac <HAL_GPIO_Init>
}
 8003c2e:	e065      	b.n	8003cfc <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a36      	ldr	r2, [pc, #216]	; (8003d10 <HAL_ADC_MspInit+0x1c8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d12d      	bne.n	8003c96 <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_ADC_MspInit+0x1cc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <HAL_ADC_MspInit+0x1cc>)
 8003c42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003c44:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <HAL_ADC_MspInit+0x1cc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10b      	bne.n	8003c64 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8003c4c:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003c52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c56:	6153      	str	r3, [r2, #20]
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c64:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003c6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6e:	6153      	str	r3, [r2, #20]
 8003c70:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c80:	2303      	movs	r3, #3
 8003c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4822      	ldr	r0, [pc, #136]	; (8003d18 <HAL_ADC_MspInit+0x1d0>)
 8003c90:	f001 f98c 	bl	8004fac <HAL_GPIO_Init>
}
 8003c94:	e032      	b.n	8003cfc <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC4)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <HAL_ADC_MspInit+0x1d4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d12d      	bne.n	8003cfc <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003ca0:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <HAL_ADC_MspInit+0x1cc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <HAL_ADC_MspInit+0x1cc>)
 8003ca8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003caa:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_ADC_MspInit+0x1cc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10b      	bne.n	8003cca <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8003cb2:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4a14      	ldr	r2, [pc, #80]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003cb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cbc:	6153      	str	r3, [r2, #20]
 8003cbe:	4b12      	ldr	r3, [pc, #72]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cd4:	6153      	str	r3, [r2, #20]
 8003cd6:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_ADC_MspInit+0x1c0>)
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cec:	2300      	movs	r3, #0
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	480a      	ldr	r0, [pc, #40]	; (8003d20 <HAL_ADC_MspInit+0x1d8>)
 8003cf8:	f001 f958 	bl	8004fac <HAL_GPIO_Init>
}
 8003cfc:	bf00      	nop
 8003cfe:	3740      	adds	r7, #64	; 0x40
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	20000348 	.word	0x20000348
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	50000100 	.word	0x50000100
 8003d10:	50000400 	.word	0x50000400
 8003d14:	2000034c 	.word	0x2000034c
 8003d18:	48000400 	.word	0x48000400
 8003d1c:	50000500 	.word	0x50000500
 8003d20:	48001000 	.word	0x48001000

08003d24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08e      	sub	sp, #56	; 0x38
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a54      	ldr	r2, [pc, #336]	; (8003e94 <HAL_I2C_MspInit+0x170>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d14e      	bne.n	8003de4 <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d46:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	4a53      	ldr	r2, [pc, #332]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d50:	6153      	str	r3, [r2, #20]
 8003d52:	4b51      	ldr	r3, [pc, #324]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d5e:	4b4e      	ldr	r3, [pc, #312]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	4a4d      	ldr	r2, [pc, #308]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d68:	6153      	str	r3, [r2, #20]
 8003d6a:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d7c:	2312      	movs	r3, #18
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d84:	2303      	movs	r3, #3
 8003d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d88:	2304      	movs	r3, #4
 8003d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d90:	4619      	mov	r1, r3
 8003d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d96:	f001 f909 	bl	8004fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d9e:	2312      	movs	r3, #18
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003da6:	2303      	movs	r3, #3
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003daa:	2304      	movs	r3, #4
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003db2:	4619      	mov	r1, r3
 8003db4:	4839      	ldr	r0, [pc, #228]	; (8003e9c <HAL_I2C_MspInit+0x178>)
 8003db6:	f001 f8f9 	bl	8004fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dba:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	4a36      	ldr	r2, [pc, #216]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003dc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dc4:	61d3      	str	r3, [r2, #28]
 8003dc6:	4b34      	ldr	r3, [pc, #208]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	201f      	movs	r0, #31
 8003dd8:	f001 f8b1 	bl	8004f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003ddc:	201f      	movs	r0, #31
 8003dde:	f001 f8ca 	bl	8004f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003de2:	e052      	b.n	8003e8a <HAL_I2C_MspInit+0x166>
  else if(hi2c->Instance==I2C2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a2d      	ldr	r2, [pc, #180]	; (8003ea0 <HAL_I2C_MspInit+0x17c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d14d      	bne.n	8003e8a <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dee:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df8:	6153      	str	r3, [r2, #20]
 8003dfa:	4b27      	ldr	r3, [pc, #156]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e06:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e10:	6153      	str	r3, [r2, #20]
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	613b      	str	r3, [r7, #16]
 8003e1c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e24:	2312      	movs	r3, #18
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e30:	2304      	movs	r3, #4
 8003e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e38:	4619      	mov	r1, r3
 8003e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e3e:	f001 f8b5 	bl	8004fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e42:	2340      	movs	r3, #64	; 0x40
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e46:	2312      	movs	r3, #18
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e52:	2304      	movs	r3, #4
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4811      	ldr	r0, [pc, #68]	; (8003ea4 <HAL_I2C_MspInit+0x180>)
 8003e5e:	f001 f8a5 	bl	8004fac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003e68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e6c:	61d3      	str	r3, [r2, #28]
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <HAL_I2C_MspInit+0x174>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	2021      	movs	r0, #33	; 0x21
 8003e80:	f001 f85d 	bl	8004f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003e84:	2021      	movs	r0, #33	; 0x21
 8003e86:	f001 f876 	bl	8004f76 <HAL_NVIC_EnableIRQ>
}
 8003e8a:	bf00      	nop
 8003e8c:	3738      	adds	r7, #56	; 0x38
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40005400 	.word	0x40005400
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	48000400 	.word	0x48000400
 8003ea0:	40005800 	.word	0x40005800
 8003ea4:	48001400 	.word	0x48001400

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eac:	e7fe      	b.n	8003eac <NMI_Handler+0x4>

08003eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb2:	e7fe      	b.n	8003eb2 <HardFault_Handler+0x4>

08003eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <MemManage_Handler+0x4>

08003eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ebe:	e7fe      	b.n	8003ebe <BusFault_Handler+0x4>

08003ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <UsageFault_Handler+0x4>

08003ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef4:	f000 f8e0 	bl	80040b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}

08003efc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f00:	4802      	ldr	r0, [pc, #8]	; (8003f0c <I2C1_EV_IRQHandler+0x10>)
 8003f02:	f001 fd7f 	bl	8005a04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000228 	.word	0x20000228

08003f10 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003f14:	4802      	ldr	r0, [pc, #8]	; (8003f20 <I2C2_EV_IRQHandler+0x10>)
 8003f16:	f001 fd75 	bl	8005a04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	2000027c 	.word	0x2000027c

08003f24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <SystemInit+0x20>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <SystemInit+0x20>)
 8003f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <clamp>:
        return a;
    }
    return b;
}

float clamp(float val, float min, float max) {
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f52:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f56:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val < min) {
 8003f5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	d501      	bpl.n	8003f70 <clamp+0x28>
        return min;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	e00b      	b.n	8003f88 <clamp+0x40>
    }
    if (val > max) {
 8003f70:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f74:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f80:	dd01      	ble.n	8003f86 <clamp+0x3e>
        return max;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	e000      	b.n	8003f88 <clamp+0x40>
    }
    return val;
 8003f86:	68fb      	ldr	r3, [r7, #12]
}
 8003f88:	ee07 3a90 	vmov	s15, r3
 8003f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f90:	3714      	adds	r7, #20
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <lerp>:

float lerp(float a, float b, float t)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b085      	sub	sp, #20
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	ed87 0a03 	vstr	s0, [r7, #12]
 8003fa4:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fa8:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + (b - a) * t;
 8003fac:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fb4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004010 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fdc:	f7ff ffa2 	bl	8003f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe0:	480c      	ldr	r0, [pc, #48]	; (8004014 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fe2:	490d      	ldr	r1, [pc, #52]	; (8004018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <LoopForever+0xe>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ff8:	4c0a      	ldr	r4, [pc, #40]	; (8004024 <LoopForever+0x16>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004006:	f003 fc41 	bl	800788c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800400a:	f7ff f987 	bl	800331c <main>

0800400e <LoopForever>:

LoopForever:
    b LoopForever
 800400e:	e7fe      	b.n	800400e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004010:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004018:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800401c:	08008558 	.word	0x08008558
  ldr r2, =_sbss
 8004020:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8004024:	20000354 	.word	0x20000354

08004028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004028:	e7fe      	b.n	8004028 <ADC1_2_IRQHandler>
	...

0800402c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004030:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_Init+0x28>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a07      	ldr	r2, [pc, #28]	; (8004054 <HAL_Init+0x28>)
 8004036:	f043 0310 	orr.w	r3, r3, #16
 800403a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800403c:	2003      	movs	r0, #3
 800403e:	f000 ff73 	bl	8004f28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004042:	200f      	movs	r0, #15
 8004044:	f000 f808 	bl	8004058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004048:	f7ff fd5a 	bl	8003b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40022000 	.word	0x40022000

08004058 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004060:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_InitTick+0x54>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_InitTick+0x58>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4619      	mov	r1, r3
 800406a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800406e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	4618      	mov	r0, r3
 8004078:	f000 ff8b 	bl	8004f92 <HAL_SYSTICK_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e00e      	b.n	80040a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b0f      	cmp	r3, #15
 800408a:	d80a      	bhi.n	80040a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800408c:	2200      	movs	r2, #0
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004094:	f000 ff53 	bl	8004f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004098:	4a06      	ldr	r2, [pc, #24]	; (80040b4 <HAL_InitTick+0x5c>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20000028 	.word	0x20000028
 80040b0:	20000030 	.word	0x20000030
 80040b4:	2000002c 	.word	0x2000002c

080040b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_IncTick+0x20>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_IncTick+0x24>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4413      	add	r3, r2
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_IncTick+0x24>)
 80040ca:	6013      	str	r3, [r2, #0]
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000030 	.word	0x20000030
 80040dc:	20000350 	.word	0x20000350

080040e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80040e4:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <HAL_GetTick+0x14>)
 80040e6:	681b      	ldr	r3, [r3, #0]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000350 	.word	0x20000350

080040f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004100:	f7ff ffee 	bl	80040e0 <HAL_GetTick>
 8004104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004110:	d005      	beq.n	800411e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <HAL_Delay+0x44>)
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800411e:	bf00      	nop
 8004120:	f7ff ffde 	bl	80040e0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	429a      	cmp	r2, r3
 800412e:	d8f7      	bhi.n	8004120 <HAL_Delay+0x28>
  {
  }
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000030 	.word	0x20000030

08004140 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b09a      	sub	sp, #104	; 0x68
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e1c9      	b.n	80044f4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d176      	bne.n	8004260 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	d152      	bne.n	8004220 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff fcd7 	bl	8003b48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d13b      	bne.n	8004220 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 fd87 	bl	8004cbc <ADC_Disable>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f003 0310 	and.w	r3, r3, #16
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d12f      	bne.n	8004220 <HAL_ADC_Init+0xe0>
 80041c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d12b      	bne.n	8004220 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041d0:	f023 0302 	bic.w	r3, r3, #2
 80041d4:	f043 0202 	orr.w	r2, r3, #2
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041ea:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80041fa:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041fc:	4b86      	ldr	r3, [pc, #536]	; (8004418 <HAL_ADC_Init+0x2d8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a86      	ldr	r2, [pc, #536]	; (800441c <HAL_ADC_Init+0x2dc>)
 8004202:	fba2 2303 	umull	r2, r3, r2, r3
 8004206:	0c9a      	lsrs	r2, r3, #18
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004212:	e002      	b.n	800421a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3b01      	subs	r3, #1
 8004218:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f9      	bne.n	8004214 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423c:	d110      	bne.n	8004260 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f023 0312 	bic.w	r3, r3, #18
 8004246:	f043 0210 	orr.w	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	f043 0201 	orr.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	f040 8136 	bne.w	80044da <HAL_ADC_Init+0x39a>
 800426e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 8131 	bne.w	80044da <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 8129 	bne.w	80044da <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004290:	f043 0202 	orr.w	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a0:	d004      	beq.n	80042ac <HAL_ADC_Init+0x16c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5e      	ldr	r2, [pc, #376]	; (8004420 <HAL_ADC_Init+0x2e0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d101      	bne.n	80042b0 <HAL_ADC_Init+0x170>
 80042ac:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_ADC_Init+0x2e4>)
 80042ae:	e000      	b.n	80042b2 <HAL_ADC_Init+0x172>
 80042b0:	4b5d      	ldr	r3, [pc, #372]	; (8004428 <HAL_ADC_Init+0x2e8>)
 80042b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042bc:	d102      	bne.n	80042c4 <HAL_ADC_Init+0x184>
 80042be:	4b58      	ldr	r3, [pc, #352]	; (8004420 <HAL_ADC_Init+0x2e0>)
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	e01a      	b.n	80042fa <HAL_ADC_Init+0x1ba>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a55      	ldr	r2, [pc, #340]	; (8004420 <HAL_ADC_Init+0x2e0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d103      	bne.n	80042d6 <HAL_ADC_Init+0x196>
 80042ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e011      	b.n	80042fa <HAL_ADC_Init+0x1ba>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a54      	ldr	r2, [pc, #336]	; (800442c <HAL_ADC_Init+0x2ec>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d102      	bne.n	80042e6 <HAL_ADC_Init+0x1a6>
 80042e0:	4b53      	ldr	r3, [pc, #332]	; (8004430 <HAL_ADC_Init+0x2f0>)
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e009      	b.n	80042fa <HAL_ADC_Init+0x1ba>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a51      	ldr	r2, [pc, #324]	; (8004430 <HAL_ADC_Init+0x2f0>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d102      	bne.n	80042f6 <HAL_ADC_Init+0x1b6>
 80042f0:	4b4e      	ldr	r3, [pc, #312]	; (800442c <HAL_ADC_Init+0x2ec>)
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e001      	b.n	80042fa <HAL_ADC_Init+0x1ba>
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d108      	bne.n	800431a <HAL_ADC_Init+0x1da>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_ADC_Init+0x1da>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_ADC_Init+0x1dc>
 800431a:	2300      	movs	r3, #0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d11c      	bne.n	800435a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004320:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b01      	cmp	r3, #1
 8004330:	d107      	bne.n	8004342 <HAL_ADC_Init+0x202>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_ADC_Init+0x202>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <HAL_ADC_Init+0x204>
 8004342:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	431a      	orrs	r2, r3
 8004356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004358:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7e5b      	ldrb	r3, [r3, #25]
 800435e:	035b      	lsls	r3, r3, #13
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004364:	2a01      	cmp	r2, #1
 8004366:	d002      	beq.n	800436e <HAL_ADC_Init+0x22e>
 8004368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800436c:	e000      	b.n	8004370 <HAL_ADC_Init+0x230>
 800436e:	2200      	movs	r2, #0
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4313      	orrs	r3, r2
 800437e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004380:	4313      	orrs	r3, r2
 8004382:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d11b      	bne.n	80043c6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	7e5b      	ldrb	r3, [r3, #25]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	3b01      	subs	r3, #1
 800439c:	045a      	lsls	r2, r3, #17
 800439e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a6:	663b      	str	r3, [r7, #96]	; 0x60
 80043a8:	e00d      	b.n	80043c6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f043 0201 	orr.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d03a      	beq.n	8004444 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a16      	ldr	r2, [pc, #88]	; (800442c <HAL_ADC_Init+0x2ec>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_ADC_Init+0x2a2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a14      	ldr	r2, [pc, #80]	; (8004430 <HAL_ADC_Init+0x2f0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d128      	bne.n	8004434 <HAL_ADC_Init+0x2f4>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80043ea:	d012      	beq.n	8004412 <HAL_ADC_Init+0x2d2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f4:	d00a      	beq.n	800440c <HAL_ADC_Init+0x2cc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80043fe:	d002      	beq.n	8004406 <HAL_ADC_Init+0x2c6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	e018      	b.n	8004438 <HAL_ADC_Init+0x2f8>
 8004406:	f44f 7380 	mov.w	r3, #256	; 0x100
 800440a:	e015      	b.n	8004438 <HAL_ADC_Init+0x2f8>
 800440c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004410:	e012      	b.n	8004438 <HAL_ADC_Init+0x2f8>
 8004412:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004416:	e00f      	b.n	8004438 <HAL_ADC_Init+0x2f8>
 8004418:	20000028 	.word	0x20000028
 800441c:	431bde83 	.word	0x431bde83
 8004420:	50000100 	.word	0x50000100
 8004424:	50000300 	.word	0x50000300
 8004428:	50000700 	.word	0x50000700
 800442c:	50000400 	.word	0x50000400
 8004430:	50000500 	.word	0x50000500
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800443c:	4313      	orrs	r3, r2
 800443e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004440:	4313      	orrs	r3, r2
 8004442:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b00      	cmp	r3, #0
 8004450:	d114      	bne.n	800447c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004460:	f023 0302 	bic.w	r3, r3, #2
 8004464:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7e1b      	ldrb	r3, [r3, #24]
 800446a:	039a      	lsls	r2, r3, #14
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4313      	orrs	r3, r2
 8004476:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004478:	4313      	orrs	r3, r2
 800447a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_ADC_Init+0x3bc>)
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800448c:	430b      	orrs	r3, r1
 800448e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d10c      	bne.n	80044b2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f023 010f 	bic.w	r1, r3, #15
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	1e5a      	subs	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
 80044b0:	e007      	b.n	80044c2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 020f 	bic.w	r2, r2, #15
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	f023 0303 	bic.w	r3, r3, #3
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
 80044d8:	e00a      	b.n	80044f0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f023 0312 	bic.w	r3, r3, #18
 80044e2:	f043 0210 	orr.w	r2, r3, #16
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80044f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3768      	adds	r7, #104	; 0x68
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	fff0c007 	.word	0xfff0c007

08004500 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004500:	b480      	push	{r7}
 8004502:	b09b      	sub	sp, #108	; 0x6c
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004510:	2300      	movs	r3, #0
 8004512:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x22>
 800451e:	2302      	movs	r3, #2
 8004520:	e2ca      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x5b8>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 82ae 	bne.w	8004a96 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b04      	cmp	r3, #4
 8004540:	d81c      	bhi.n	800457c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	461a      	mov	r2, r3
 8004556:	231f      	movs	r3, #31
 8004558:	4093      	lsls	r3, r2
 800455a:	43db      	mvns	r3, r3
 800455c:	4019      	ands	r1, r3
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	4413      	add	r3, r2
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	fa00 f203 	lsl.w	r2, r0, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
 800457a:	e063      	b.n	8004644 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b09      	cmp	r3, #9
 8004582:	d81e      	bhi.n	80045c2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4413      	add	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	3b1e      	subs	r3, #30
 8004598:	221f      	movs	r2, #31
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	43db      	mvns	r3, r3
 80045a0:	4019      	ands	r1, r3
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	4413      	add	r3, r2
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	3b1e      	subs	r3, #30
 80045b4:	fa00 f203 	lsl.w	r2, r0, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	635a      	str	r2, [r3, #52]	; 0x34
 80045c0:	e040      	b.n	8004644 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b0e      	cmp	r3, #14
 80045c8:	d81e      	bhi.n	8004608 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	3b3c      	subs	r3, #60	; 0x3c
 80045de:	221f      	movs	r2, #31
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	4019      	ands	r1, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	3b3c      	subs	r3, #60	; 0x3c
 80045fa:	fa00 f203 	lsl.w	r2, r0, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
 8004606:	e01d      	b.n	8004644 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	3b5a      	subs	r3, #90	; 0x5a
 800461c:	221f      	movs	r2, #31
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	4019      	ands	r1, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4413      	add	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	3b5a      	subs	r3, #90	; 0x5a
 8004638:	fa00 f203 	lsl.w	r2, r0, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 80e5 	bne.w	800481e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b09      	cmp	r3, #9
 800465a:	d91c      	bls.n	8004696 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6999      	ldr	r1, [r3, #24]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	3b1e      	subs	r3, #30
 800466e:	2207      	movs	r2, #7
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	4019      	ands	r1, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	6898      	ldr	r0, [r3, #8]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	3b1e      	subs	r3, #30
 8004688:	fa00 f203 	lsl.w	r2, r0, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	619a      	str	r2, [r3, #24]
 8004694:	e019      	b.n	80046ca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6959      	ldr	r1, [r3, #20]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4613      	mov	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	2207      	movs	r2, #7
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	4019      	ands	r1, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	6898      	ldr	r0, [r3, #8]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	fa00 f203 	lsl.w	r2, r0, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	08db      	lsrs	r3, r3, #3
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d84f      	bhi.n	800478c <HAL_ADC_ConfigChannel+0x28c>
 80046ec:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <HAL_ADC_ConfigChannel+0x1f4>)
 80046ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f2:	bf00      	nop
 80046f4:	08004705 	.word	0x08004705
 80046f8:	08004727 	.word	0x08004727
 80046fc:	08004749 	.word	0x08004749
 8004700:	0800476b 	.word	0x0800476b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800470a:	4b9a      	ldr	r3, [pc, #616]	; (8004974 <HAL_ADC_ConfigChannel+0x474>)
 800470c:	4013      	ands	r3, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	0691      	lsls	r1, r2, #26
 8004714:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004716:	430a      	orrs	r2, r1
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004722:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004724:	e07e      	b.n	8004824 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800472c:	4b91      	ldr	r3, [pc, #580]	; (8004974 <HAL_ADC_ConfigChannel+0x474>)
 800472e:	4013      	ands	r3, r2
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	6812      	ldr	r2, [r2, #0]
 8004734:	0691      	lsls	r1, r2, #26
 8004736:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004738:	430a      	orrs	r2, r1
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004744:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004746:	e06d      	b.n	8004824 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800474e:	4b89      	ldr	r3, [pc, #548]	; (8004974 <HAL_ADC_ConfigChannel+0x474>)
 8004750:	4013      	ands	r3, r2
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	0691      	lsls	r1, r2, #26
 8004758:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800475a:	430a      	orrs	r2, r1
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004766:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004768:	e05c      	b.n	8004824 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004770:	4b80      	ldr	r3, [pc, #512]	; (8004974 <HAL_ADC_ConfigChannel+0x474>)
 8004772:	4013      	ands	r3, r2
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	0691      	lsls	r1, r2, #26
 800477a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800477c:	430a      	orrs	r2, r1
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004788:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800478a:	e04b      	b.n	8004824 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	069b      	lsls	r3, r3, #26
 800479c:	429a      	cmp	r2, r3
 800479e:	d107      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047ae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	069b      	lsls	r3, r3, #26
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d107      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047d2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	069b      	lsls	r3, r3, #26
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047f6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	069b      	lsls	r3, r3, #26
 8004808:	429a      	cmp	r2, r3
 800480a:	d10a      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800481a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800481c:	e001      	b.n	8004822 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004822:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d108      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x344>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x344>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_ADC_ConfigChannel+0x346>
 8004844:	2300      	movs	r3, #0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 8130 	bne.w	8004aac <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d00f      	beq.n	8004874 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43da      	mvns	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	400a      	ands	r2, r1
 800486e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004872:	e049      	b.n	8004908 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b09      	cmp	r3, #9
 8004894:	d91c      	bls.n	80048d0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6999      	ldr	r1, [r3, #24]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	3b1b      	subs	r3, #27
 80048a8:	2207      	movs	r2, #7
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	43db      	mvns	r3, r3
 80048b0:	4019      	ands	r1, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6898      	ldr	r0, [r3, #8]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	3b1b      	subs	r3, #27
 80048c2:	fa00 f203 	lsl.w	r2, r0, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	619a      	str	r2, [r3, #24]
 80048ce:	e01b      	b.n	8004908 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6959      	ldr	r1, [r3, #20]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	2207      	movs	r2, #7
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43db      	mvns	r3, r3
 80048ea:	4019      	ands	r1, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6898      	ldr	r0, [r3, #8]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	fa00 f203 	lsl.w	r2, r0, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004910:	d004      	beq.n	800491c <HAL_ADC_ConfigChannel+0x41c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_ADC_ConfigChannel+0x478>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x420>
 800491c:	4b17      	ldr	r3, [pc, #92]	; (800497c <HAL_ADC_ConfigChannel+0x47c>)
 800491e:	e000      	b.n	8004922 <HAL_ADC_ConfigChannel+0x422>
 8004920:	4b17      	ldr	r3, [pc, #92]	; (8004980 <HAL_ADC_ConfigChannel+0x480>)
 8004922:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b10      	cmp	r3, #16
 800492a:	d105      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800492c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004934:	2b00      	cmp	r3, #0
 8004936:	d015      	beq.n	8004964 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800493c:	2b11      	cmp	r3, #17
 800493e:	d105      	bne.n	800494c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004950:	2b12      	cmp	r3, #18
 8004952:	f040 80ab 	bne.w	8004aac <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800495e:	2b00      	cmp	r3, #0
 8004960:	f040 80a4 	bne.w	8004aac <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800496c:	d10a      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x484>
 800496e:	4b02      	ldr	r3, [pc, #8]	; (8004978 <HAL_ADC_ConfigChannel+0x478>)
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e022      	b.n	80049ba <HAL_ADC_ConfigChannel+0x4ba>
 8004974:	83fff000 	.word	0x83fff000
 8004978:	50000100 	.word	0x50000100
 800497c:	50000300 	.word	0x50000300
 8004980:	50000700 	.word	0x50000700
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a4e      	ldr	r2, [pc, #312]	; (8004ac4 <HAL_ADC_ConfigChannel+0x5c4>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d103      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x496>
 800498e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e011      	b.n	80049ba <HAL_ADC_ConfigChannel+0x4ba>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a4b      	ldr	r2, [pc, #300]	; (8004ac8 <HAL_ADC_ConfigChannel+0x5c8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d102      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x4a6>
 80049a0:	4b4a      	ldr	r3, [pc, #296]	; (8004acc <HAL_ADC_ConfigChannel+0x5cc>)
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e009      	b.n	80049ba <HAL_ADC_ConfigChannel+0x4ba>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a48      	ldr	r2, [pc, #288]	; (8004acc <HAL_ADC_ConfigChannel+0x5cc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d102      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x4b6>
 80049b0:	4b45      	ldr	r3, [pc, #276]	; (8004ac8 <HAL_ADC_ConfigChannel+0x5c8>)
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e001      	b.n	80049ba <HAL_ADC_ConfigChannel+0x4ba>
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d108      	bne.n	80049da <HAL_ADC_ConfigChannel+0x4da>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_ADC_ConfigChannel+0x4da>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_ADC_ConfigChannel+0x4dc>
 80049da:	2300      	movs	r3, #0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d150      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d010      	beq.n	8004a08 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d107      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x502>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x502>
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x504>
 8004a02:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d13c      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b10      	cmp	r3, #16
 8004a0e:	d11d      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x54c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a18:	d118      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a24:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a26:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <HAL_ADC_ConfigChannel+0x5d0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2a      	ldr	r2, [pc, #168]	; (8004ad4 <HAL_ADC_ConfigChannel+0x5d4>)
 8004a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a30:	0c9a      	lsrs	r2, r3, #18
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a3c:	e002      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f9      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a4a:	e02e      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b11      	cmp	r3, #17
 8004a52:	d10b      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x56c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a5c:	d106      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a68:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a6a:	e01e      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b12      	cmp	r3, #18
 8004a72:	d11a      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a80:	e013      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0220 	orr.w	r2, r3, #32
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004a94:	e00a      	b.n	8004aac <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004aa8:	e000      	b.n	8004aac <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004aaa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004ab4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	376c      	adds	r7, #108	; 0x6c
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	50000100 	.word	0x50000100
 8004ac8:	50000400 	.word	0x50000400
 8004acc:	50000500 	.word	0x50000500
 8004ad0:	20000028 	.word	0x20000028
 8004ad4:	431bde83 	.word	0x431bde83

08004ad8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b099      	sub	sp, #100	; 0x64
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004af0:	d102      	bne.n	8004af8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004af2:	4b6d      	ldr	r3, [pc, #436]	; (8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	e01a      	b.n	8004b2e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a6a      	ldr	r2, [pc, #424]	; (8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d103      	bne.n	8004b0a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004b02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	e011      	b.n	8004b2e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a67      	ldr	r2, [pc, #412]	; (8004cac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d102      	bne.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004b14:	4b66      	ldr	r3, [pc, #408]	; (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	e009      	b.n	8004b2e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a64      	ldr	r2, [pc, #400]	; (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d102      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b24:	4b61      	ldr	r3, [pc, #388]	; (8004cac <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	e001      	b.n	8004b2e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0b0      	b.n	8004c9a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e0a9      	b.n	8004c9a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f040 808d 	bne.w	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f040 8086 	bne.w	8004c78 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b74:	d004      	beq.n	8004b80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a4b      	ldr	r2, [pc, #300]	; (8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d101      	bne.n	8004b84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004b80:	4b4c      	ldr	r3, [pc, #304]	; (8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004b82:	e000      	b.n	8004b86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004b84:	4b4c      	ldr	r3, [pc, #304]	; (8004cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004b86:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d040      	beq.n	8004c12 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	6859      	ldr	r1, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ba2:	035b      	lsls	r3, r3, #13
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004baa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d108      	bne.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d15c      	bne.n	8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d107      	bne.n	8004bee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004bee:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d14b      	bne.n	8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004bfc:	f023 030f 	bic.w	r3, r3, #15
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	6811      	ldr	r1, [r2, #0]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	6892      	ldr	r2, [r2, #8]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c0e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c10:	e03c      	b.n	8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c1c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d108      	bne.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d123      	bne.n	8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e000      	b.n	8004c62 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004c60:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d112      	bne.n	8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c6e:	f023 030f 	bic.w	r3, r3, #15
 8004c72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c74:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c76:	e009      	b.n	8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	f043 0220 	orr.w	r2, r3, #32
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004c8a:	e000      	b.n	8004c8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c8c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004c96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3764      	adds	r7, #100	; 0x64
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	50000100 	.word	0x50000100
 8004cac:	50000400 	.word	0x50000400
 8004cb0:	50000500 	.word	0x50000500
 8004cb4:	50000300 	.word	0x50000300
 8004cb8:	50000700 	.word	0x50000700

08004cbc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d108      	bne.n	8004ce8 <ADC_Disable+0x2c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d101      	bne.n	8004ce8 <ADC_Disable+0x2c>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <ADC_Disable+0x2e>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d047      	beq.n	8004d7e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 030d 	and.w	r3, r3, #13
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10f      	bne.n	8004d1c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f042 0202 	orr.w	r2, r2, #2
 8004d0a:	609a      	str	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2203      	movs	r2, #3
 8004d12:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004d14:	f7ff f9e4 	bl	80040e0 <HAL_GetTick>
 8004d18:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d1a:	e029      	b.n	8004d70 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f043 0210 	orr.w	r2, r3, #16
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	f043 0201 	orr.w	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e023      	b.n	8004d80 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d38:	f7ff f9d2 	bl	80040e0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d914      	bls.n	8004d70 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10d      	bne.n	8004d70 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	f043 0210 	orr.w	r2, r3, #16
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	f043 0201 	orr.w	r2, r3, #1
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e007      	b.n	8004d80 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d0dc      	beq.n	8004d38 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <__NVIC_SetPriorityGrouping+0x44>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004da4:	4013      	ands	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dba:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <__NVIC_SetPriorityGrouping+0x44>)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	60d3      	str	r3, [r2, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd4:	4b04      	ldr	r3, [pc, #16]	; (8004de8 <__NVIC_GetPriorityGrouping+0x18>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	f003 0307 	and.w	r3, r3, #7
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db0b      	blt.n	8004e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	f003 021f 	and.w	r2, r3, #31
 8004e04:	4907      	ldr	r1, [pc, #28]	; (8004e24 <__NVIC_EnableIRQ+0x38>)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	e000e100 	.word	0xe000e100

08004e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	db0a      	blt.n	8004e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	490c      	ldr	r1, [pc, #48]	; (8004e74 <__NVIC_SetPriority+0x4c>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	0112      	lsls	r2, r2, #4
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e50:	e00a      	b.n	8004e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4908      	ldr	r1, [pc, #32]	; (8004e78 <__NVIC_SetPriority+0x50>)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	3b04      	subs	r3, #4
 8004e60:	0112      	lsls	r2, r2, #4
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	440b      	add	r3, r1
 8004e66:	761a      	strb	r2, [r3, #24]
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000e100 	.word	0xe000e100
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f1c3 0307 	rsb	r3, r3, #7
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	bf28      	it	cs
 8004e9a:	2304      	movcs	r3, #4
 8004e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d902      	bls.n	8004eac <NVIC_EncodePriority+0x30>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3b03      	subs	r3, #3
 8004eaa:	e000      	b.n	8004eae <NVIC_EncodePriority+0x32>
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	43d9      	mvns	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed4:	4313      	orrs	r3, r2
         );
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3724      	adds	r7, #36	; 0x24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ef4:	d301      	bcc.n	8004efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e00f      	b.n	8004f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004efa:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <SysTick_Config+0x40>)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f02:	210f      	movs	r1, #15
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f08:	f7ff ff8e 	bl	8004e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <SysTick_Config+0x40>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <SysTick_Config+0x40>)
 8004f14:	2207      	movs	r2, #7
 8004f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	e000e010 	.word	0xe000e010

08004f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ff29 	bl	8004d88 <__NVIC_SetPriorityGrouping>
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	4603      	mov	r3, r0
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f50:	f7ff ff3e 	bl	8004dd0 <__NVIC_GetPriorityGrouping>
 8004f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	6978      	ldr	r0, [r7, #20]
 8004f5c:	f7ff ff8e 	bl	8004e7c <NVIC_EncodePriority>
 8004f60:	4602      	mov	r2, r0
 8004f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff5d 	bl	8004e28 <__NVIC_SetPriority>
}
 8004f6e:	bf00      	nop
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff31 	bl	8004dec <__NVIC_EnableIRQ>
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ffa2 	bl	8004ee4 <SysTick_Config>
 8004fa0:	4603      	mov	r3, r0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fba:	e154      	b.n	8005266 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 8146 	beq.w	8005260 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d005      	beq.n	8004fec <HAL_GPIO_Init+0x40>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d130      	bne.n	800504e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4013      	ands	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	fa02 f303 	lsl.w	r3, r2, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005022:	2201      	movs	r2, #1
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43db      	mvns	r3, r3
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4013      	ands	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	091b      	lsrs	r3, r3, #4
 8005038:	f003 0201 	and.w	r2, r3, #1
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	2b03      	cmp	r3, #3
 8005058:	d017      	beq.n	800508a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	2203      	movs	r2, #3
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	fa02 f303 	lsl.w	r3, r2, r3
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d123      	bne.n	80050de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	08da      	lsrs	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3208      	adds	r2, #8
 800509e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	220f      	movs	r2, #15
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	43db      	mvns	r3, r3
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4013      	ands	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	08da      	lsrs	r2, r3, #3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3208      	adds	r2, #8
 80050d8:	6939      	ldr	r1, [r7, #16]
 80050da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	005b      	lsls	r3, r3, #1
 80050e8:	2203      	movs	r2, #3
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	43db      	mvns	r3, r3
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f003 0203 	and.w	r2, r3, #3
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80a0 	beq.w	8005260 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005120:	4b58      	ldr	r3, [pc, #352]	; (8005284 <HAL_GPIO_Init+0x2d8>)
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	4a57      	ldr	r2, [pc, #348]	; (8005284 <HAL_GPIO_Init+0x2d8>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6193      	str	r3, [r2, #24]
 800512c:	4b55      	ldr	r3, [pc, #340]	; (8005284 <HAL_GPIO_Init+0x2d8>)
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005138:	4a53      	ldr	r2, [pc, #332]	; (8005288 <HAL_GPIO_Init+0x2dc>)
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	089b      	lsrs	r3, r3, #2
 800513e:	3302      	adds	r3, #2
 8005140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f003 0303 	and.w	r3, r3, #3
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	220f      	movs	r2, #15
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43db      	mvns	r3, r3
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4013      	ands	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005162:	d019      	beq.n	8005198 <HAL_GPIO_Init+0x1ec>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a49      	ldr	r2, [pc, #292]	; (800528c <HAL_GPIO_Init+0x2e0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_GPIO_Init+0x1e8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a48      	ldr	r2, [pc, #288]	; (8005290 <HAL_GPIO_Init+0x2e4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00d      	beq.n	8005190 <HAL_GPIO_Init+0x1e4>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a47      	ldr	r2, [pc, #284]	; (8005294 <HAL_GPIO_Init+0x2e8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d007      	beq.n	800518c <HAL_GPIO_Init+0x1e0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a46      	ldr	r2, [pc, #280]	; (8005298 <HAL_GPIO_Init+0x2ec>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d101      	bne.n	8005188 <HAL_GPIO_Init+0x1dc>
 8005184:	2304      	movs	r3, #4
 8005186:	e008      	b.n	800519a <HAL_GPIO_Init+0x1ee>
 8005188:	2305      	movs	r3, #5
 800518a:	e006      	b.n	800519a <HAL_GPIO_Init+0x1ee>
 800518c:	2303      	movs	r3, #3
 800518e:	e004      	b.n	800519a <HAL_GPIO_Init+0x1ee>
 8005190:	2302      	movs	r3, #2
 8005192:	e002      	b.n	800519a <HAL_GPIO_Init+0x1ee>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_GPIO_Init+0x1ee>
 8005198:	2300      	movs	r3, #0
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	f002 0203 	and.w	r2, r2, #3
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	4093      	lsls	r3, r2
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80051aa:	4937      	ldr	r1, [pc, #220]	; (8005288 <HAL_GPIO_Init+0x2dc>)
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	089b      	lsrs	r3, r3, #2
 80051b0:	3302      	adds	r3, #2
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051b8:	4b38      	ldr	r3, [pc, #224]	; (800529c <HAL_GPIO_Init+0x2f0>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	4013      	ands	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80051dc:	4a2f      	ldr	r2, [pc, #188]	; (800529c <HAL_GPIO_Init+0x2f0>)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <HAL_GPIO_Init+0x2f0>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	43db      	mvns	r3, r3
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4013      	ands	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005206:	4a25      	ldr	r2, [pc, #148]	; (800529c <HAL_GPIO_Init+0x2f0>)
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800520c:	4b23      	ldr	r3, [pc, #140]	; (800529c <HAL_GPIO_Init+0x2f0>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	43db      	mvns	r3, r3
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4013      	ands	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005230:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_GPIO_Init+0x2f0>)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005236:	4b19      	ldr	r3, [pc, #100]	; (800529c <HAL_GPIO_Init+0x2f0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	43db      	mvns	r3, r3
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4013      	ands	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800525a:	4a10      	ldr	r2, [pc, #64]	; (800529c <HAL_GPIO_Init+0x2f0>)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	3301      	adds	r3, #1
 8005264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	f47f aea3 	bne.w	8004fbc <HAL_GPIO_Init+0x10>
  }
}
 8005276:	bf00      	nop
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	40021000 	.word	0x40021000
 8005288:	40010000 	.word	0x40010000
 800528c:	48000400 	.word	0x48000400
 8005290:	48000800 	.word	0x48000800
 8005294:	48000c00 	.word	0x48000c00
 8005298:	48001000 	.word	0x48001000
 800529c:	40010400 	.word	0x40010400

080052a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e081      	b.n	80053b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fe fd2c 	bl	8003d24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0201 	bic.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005300:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d107      	bne.n	800531a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	e006      	b.n	8005328 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005326:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d104      	bne.n	800533a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68da      	ldr	r2, [r3, #12]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800535c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691a      	ldr	r2, [r3, #16]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69d9      	ldr	r1, [r3, #28]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	461a      	mov	r2, r3
 80053cc:	460b      	mov	r3, r1
 80053ce:	817b      	strh	r3, [r7, #10]
 80053d0:	4613      	mov	r3, r2
 80053d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b20      	cmp	r3, #32
 80053de:	f040 80da 	bne.w	8005596 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_I2C_Master_Transmit+0x30>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e0d3      	b.n	8005598 <HAL_I2C_Master_Transmit+0x1d8>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053f8:	f7fe fe72 	bl	80040e0 <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	2319      	movs	r3, #25
 8005404:	2201      	movs	r2, #1
 8005406:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fbe0 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0be      	b.n	8005598 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2221      	movs	r2, #33	; 0x21
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2210      	movs	r2, #16
 8005426:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	893a      	ldrh	r2, [r7, #8]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	2bff      	cmp	r3, #255	; 0xff
 800544a:	d90e      	bls.n	800546a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	22ff      	movs	r2, #255	; 0xff
 8005450:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005456:	b2da      	uxtb	r2, r3
 8005458:	8979      	ldrh	r1, [r7, #10]
 800545a:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fd6e 	bl	8005f44 <I2C_TransferConfig>
 8005468:	e06c      	b.n	8005544 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005478:	b2da      	uxtb	r2, r3
 800547a:	8979      	ldrh	r1, [r7, #10]
 800547c:	4b48      	ldr	r3, [pc, #288]	; (80055a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fd5d 	bl	8005f44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800548a:	e05b      	b.n	8005544 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	6a39      	ldr	r1, [r7, #32]
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fbec 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e07b      	b.n	8005598 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	781a      	ldrb	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d034      	beq.n	8005544 <HAL_I2C_Master_Transmit+0x184>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d130      	bne.n	8005544 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fb6f 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e04d      	b.n	8005598 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	2bff      	cmp	r3, #255	; 0xff
 8005504:	d90e      	bls.n	8005524 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005510:	b2da      	uxtb	r2, r3
 8005512:	8979      	ldrh	r1, [r7, #10]
 8005514:	2300      	movs	r3, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fd11 	bl	8005f44 <I2C_TransferConfig>
 8005522:	e00f      	b.n	8005544 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005532:	b2da      	uxtb	r2, r3
 8005534:	8979      	ldrh	r1, [r7, #10]
 8005536:	2300      	movs	r3, #0
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 fd00 	bl	8005f44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d19e      	bne.n	800548c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	6a39      	ldr	r1, [r7, #32]
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fbd2 	bl	8005cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e01a      	b.n	8005598 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2220      	movs	r2, #32
 8005568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8005576:	400b      	ands	r3, r1
 8005578:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e000      	b.n	8005598 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005596:	2302      	movs	r3, #2
  }
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	80002000 	.word	0x80002000
 80055a4:	fe00e800 	.word	0xfe00e800

080055a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	817b      	strh	r3, [r7, #10]
 80055ba:	460b      	mov	r3, r1
 80055bc:	813b      	strh	r3, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	f040 80f9 	bne.w	80057c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_I2C_Mem_Write+0x34>
 80055d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0ed      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d101      	bne.n	80055f6 <HAL_I2C_Mem_Write+0x4e>
 80055f2:	2302      	movs	r3, #2
 80055f4:	e0e6      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055fe:	f7fe fd6f 	bl	80040e0 <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	2319      	movs	r3, #25
 800560a:	2201      	movs	r2, #1
 800560c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fadd 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0d1      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2221      	movs	r2, #33	; 0x21
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2240      	movs	r2, #64	; 0x40
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005648:	88f8      	ldrh	r0, [r7, #6]
 800564a:	893a      	ldrh	r2, [r7, #8]
 800564c:	8979      	ldrh	r1, [r7, #10]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	4603      	mov	r3, r0
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 f9ed 	bl	8005a38 <I2C_RequestMemoryWrite>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e0a9      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005674:	b29b      	uxth	r3, r3
 8005676:	2bff      	cmp	r3, #255	; 0xff
 8005678:	d90e      	bls.n	8005698 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	22ff      	movs	r2, #255	; 0xff
 800567e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005684:	b2da      	uxtb	r2, r3
 8005686:	8979      	ldrh	r1, [r7, #10]
 8005688:	2300      	movs	r3, #0
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 fc57 	bl	8005f44 <I2C_TransferConfig>
 8005696:	e00f      	b.n	80056b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	8979      	ldrh	r1, [r7, #10]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fc46 	bl	8005f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fad6 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e07b      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d034      	beq.n	8005770 <HAL_I2C_Mem_Write+0x1c8>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d130      	bne.n	8005770 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	; 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa59 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e04d      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2bff      	cmp	r3, #255	; 0xff
 8005730:	d90e      	bls.n	8005750 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	22ff      	movs	r2, #255	; 0xff
 8005736:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800573c:	b2da      	uxtb	r2, r3
 800573e:	8979      	ldrh	r1, [r7, #10]
 8005740:	2300      	movs	r3, #0
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 fbfb 	bl	8005f44 <I2C_TransferConfig>
 800574e:	e00f      	b.n	8005770 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575e:	b2da      	uxtb	r2, r3
 8005760:	8979      	ldrh	r1, [r7, #10]
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fbea 	bl	8005f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d19e      	bne.n	80056b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 fabc 	bl	8005cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e01a      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2220      	movs	r2, #32
 8005794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6859      	ldr	r1, [r3, #4]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <HAL_I2C_Mem_Write+0x224>)
 80057a2:	400b      	ands	r3, r1
 80057a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e000      	b.n	80057c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
  }
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	fe00e800 	.word	0xfe00e800

080057d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	461a      	mov	r2, r3
 80057de:	4603      	mov	r3, r0
 80057e0:	817b      	strh	r3, [r7, #10]
 80057e2:	460b      	mov	r3, r1
 80057e4:	813b      	strh	r3, [r7, #8]
 80057e6:	4613      	mov	r3, r2
 80057e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	f040 80fd 	bne.w	80059f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_I2C_Mem_Read+0x34>
 80057fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d105      	bne.n	8005810 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800580a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0f1      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_I2C_Mem_Read+0x4e>
 800581a:	2302      	movs	r3, #2
 800581c:	e0ea      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005826:	f7fe fc5b 	bl	80040e0 <HAL_GetTick>
 800582a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2319      	movs	r3, #25
 8005832:	2201      	movs	r2, #1
 8005834:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 f9c9 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e0d5      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2222      	movs	r2, #34	; 0x22
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2240      	movs	r2, #64	; 0x40
 8005854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005868:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005870:	88f8      	ldrh	r0, [r7, #6]
 8005872:	893a      	ldrh	r2, [r7, #8]
 8005874:	8979      	ldrh	r1, [r7, #10]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	9301      	str	r3, [sp, #4]
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	4603      	mov	r3, r0
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f92d 	bl	8005ae0 <I2C_RequestMemoryRead>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0ad      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	2bff      	cmp	r3, #255	; 0xff
 80058a0:	d90e      	bls.n	80058c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	22ff      	movs	r2, #255	; 0xff
 80058a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	8979      	ldrh	r1, [r7, #10]
 80058b0:	4b52      	ldr	r3, [pc, #328]	; (80059fc <HAL_I2C_Mem_Read+0x22c>)
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fb43 	bl	8005f44 <I2C_TransferConfig>
 80058be:	e00f      	b.n	80058e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	8979      	ldrh	r1, [r7, #10]
 80058d2:	4b4a      	ldr	r3, [pc, #296]	; (80059fc <HAL_I2C_Mem_Read+0x22c>)
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fb32 	bl	8005f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	2200      	movs	r2, #0
 80058e8:	2104      	movs	r1, #4
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f970 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e07c      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d034      	beq.n	80059a0 <HAL_I2C_Mem_Read+0x1d0>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d130      	bne.n	80059a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	2200      	movs	r2, #0
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f941 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e04d      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29b      	uxth	r3, r3
 800595e:	2bff      	cmp	r3, #255	; 0xff
 8005960:	d90e      	bls.n	8005980 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596c:	b2da      	uxtb	r2, r3
 800596e:	8979      	ldrh	r1, [r7, #10]
 8005970:	2300      	movs	r3, #0
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fae3 	bl	8005f44 <I2C_TransferConfig>
 800597e:	e00f      	b.n	80059a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598e:	b2da      	uxtb	r2, r3
 8005990:	8979      	ldrh	r1, [r7, #10]
 8005992:	2300      	movs	r3, #0
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 fad2 	bl	8005f44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d19a      	bne.n	80058e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f9a4 	bl	8005cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e01a      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2220      	movs	r2, #32
 80059c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <HAL_I2C_Mem_Read+0x230>)
 80059d2:	400b      	ands	r3, r1
 80059d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e000      	b.n	80059f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80059f2:	2302      	movs	r3, #2
  }
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	80002400 	.word	0x80002400
 8005a00:	fe00e800 	.word	0xfe00e800

08005a04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
  }
}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	4608      	mov	r0, r1
 8005a42:	4611      	mov	r1, r2
 8005a44:	461a      	mov	r2, r3
 8005a46:	4603      	mov	r3, r0
 8005a48:	817b      	strh	r3, [r7, #10]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	813b      	strh	r3, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	8979      	ldrh	r1, [r7, #10]
 8005a58:	4b20      	ldr	r3, [pc, #128]	; (8005adc <I2C_RequestMemoryWrite+0xa4>)
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 fa6f 	bl	8005f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	69b9      	ldr	r1, [r7, #24]
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f8ff 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e02c      	b.n	8005ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d105      	bne.n	8005a8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a80:	893b      	ldrh	r3, [r7, #8]
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
 8005a8a:	e015      	b.n	8005ab8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a8c:	893b      	ldrh	r3, [r7, #8]
 8005a8e:	0a1b      	lsrs	r3, r3, #8
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f8e5 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e012      	b.n	8005ad4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aae:	893b      	ldrh	r3, [r7, #8]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2180      	movs	r1, #128	; 0x80
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f884 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	80002000 	.word	0x80002000

08005ae0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	4608      	mov	r0, r1
 8005aea:	4611      	mov	r1, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	817b      	strh	r3, [r7, #10]
 8005af2:	460b      	mov	r3, r1
 8005af4:	813b      	strh	r3, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	8979      	ldrh	r1, [r7, #10]
 8005b00:	4b20      	ldr	r3, [pc, #128]	; (8005b84 <I2C_RequestMemoryRead+0xa4>)
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	2300      	movs	r3, #0
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fa1c 	bl	8005f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0c:	69fa      	ldr	r2, [r7, #28]
 8005b0e:	69b9      	ldr	r1, [r7, #24]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f8ac 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e02c      	b.n	8005b7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b20:	88fb      	ldrh	r3, [r7, #6]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d105      	bne.n	8005b32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b26:	893b      	ldrh	r3, [r7, #8]
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b30:	e015      	b.n	8005b5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b32:	893b      	ldrh	r3, [r7, #8]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	69b9      	ldr	r1, [r7, #24]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f892 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e012      	b.n	8005b7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b54:	893b      	ldrh	r3, [r7, #8]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2140      	movs	r1, #64	; 0x40
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f831 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	80002000 	.word	0x80002000

08005b88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d103      	bne.n	8005ba6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d007      	beq.n	8005bc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	619a      	str	r2, [r3, #24]
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be0:	e031      	b.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be8:	d02d      	beq.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bea:	f7fe fa79 	bl	80040e0 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d122      	bne.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d113      	bne.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e00f      	b.n	8005c66 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d0be      	beq.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c7a:	e033      	b.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f87f 	bl	8005d84 <I2C_IsErrorOccurred>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e031      	b.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c96:	d025      	beq.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c98:	f7fe fa22 	bl	80040e0 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11a      	bne.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d013      	beq.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	f043 0220 	orr.w	r2, r3, #32
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e007      	b.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d1c4      	bne.n	8005c7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d08:	e02f      	b.n	8005d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f838 	bl	8005d84 <I2C_IsErrorOccurred>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e02d      	b.n	8005d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fe f9df 	bl	80040e0 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11a      	bne.n	8005d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d013      	beq.n	8005d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e007      	b.n	8005d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d1c8      	bne.n	8005d0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d068      	beq.n	8005e82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2210      	movs	r2, #16
 8005db6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005db8:	e049      	b.n	8005e4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dc0:	d045      	beq.n	8005e4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dc2:	f7fe f98d 	bl	80040e0 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d302      	bcc.n	8005dd8 <I2C_IsErrorOccurred+0x54>
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d13a      	bne.n	8005e4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfa:	d121      	bne.n	8005e40 <I2C_IsErrorOccurred+0xbc>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e02:	d01d      	beq.n	8005e40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005e04:	7cfb      	ldrb	r3, [r7, #19]
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d01a      	beq.n	8005e40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e1a:	f7fe f961 	bl	80040e0 <HAL_GetTick>
 8005e1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e20:	e00e      	b.n	8005e40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e22:	f7fe f95d 	bl	80040e0 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b19      	cmp	r3, #25
 8005e2e:	d907      	bls.n	8005e40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	f043 0320 	orr.w	r3, r3, #32
 8005e36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005e3e:	e006      	b.n	8005e4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0320 	and.w	r3, r3, #32
 8005e4a:	2b20      	cmp	r3, #32
 8005e4c:	d1e9      	bne.n	8005e22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	d003      	beq.n	8005e64 <I2C_IsErrorOccurred+0xe0>
 8005e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0aa      	beq.n	8005dba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d103      	bne.n	8005e74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2220      	movs	r2, #32
 8005e72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	f043 0304 	orr.w	r3, r3, #4
 8005e7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	f043 0301 	orr.w	r3, r3, #1
 8005e9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ea4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	f043 0308 	orr.w	r3, r3, #8
 8005ebc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ec6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	f043 0302 	orr.w	r3, r3, #2
 8005ede:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ee8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01c      	beq.n	8005f32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f7ff fe45 	bl	8005b88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <I2C_IsErrorOccurred+0x1bc>)
 8005f0a:	400b      	ands	r3, r1
 8005f0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3728      	adds	r7, #40	; 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	fe00e800 	.word	0xfe00e800

08005f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	607b      	str	r3, [r7, #4]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	817b      	strh	r3, [r7, #10]
 8005f52:	4613      	mov	r3, r2
 8005f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f56:	897b      	ldrh	r3, [r7, #10]
 8005f58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f5c:	7a7b      	ldrb	r3, [r7, #9]
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	6a3b      	ldr	r3, [r7, #32]
 8005f7c:	0d5b      	lsrs	r3, r3, #21
 8005f7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <I2C_TransferConfig+0x60>)
 8005f84:	430b      	orrs	r3, r1
 8005f86:	43db      	mvns	r3, r3
 8005f88:	ea02 0103 	and.w	r1, r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	03ff63ff 	.word	0x03ff63ff

08005fa8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d138      	bne.n	8006030 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e032      	b.n	8006032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2224      	movs	r2, #36	; 0x24
 8005fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ffa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006030:	2302      	movs	r3, #2
  }
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b20      	cmp	r3, #32
 8006052:	d139      	bne.n	80060c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800605e:	2302      	movs	r3, #2
 8006060:	e033      	b.n	80060ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2224      	movs	r2, #36	; 0x24
 800606e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006090:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	021b      	lsls	r3, r3, #8
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e000      	b.n	80060ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060c8:	2302      	movs	r3, #2
  }
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80060de:	af00      	add	r7, sp, #0
 80060e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f001 b823 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006102:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 817d 	beq.w	800640e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006114:	4bbc      	ldr	r3, [pc, #752]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 030c 	and.w	r3, r3, #12
 800611c:	2b04      	cmp	r3, #4
 800611e:	d00c      	beq.n	800613a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006120:	4bb9      	ldr	r3, [pc, #740]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f003 030c 	and.w	r3, r3, #12
 8006128:	2b08      	cmp	r3, #8
 800612a:	d15c      	bne.n	80061e6 <HAL_RCC_OscConfig+0x10e>
 800612c:	4bb6      	ldr	r3, [pc, #728]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006138:	d155      	bne.n	80061e6 <HAL_RCC_OscConfig+0x10e>
 800613a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800613e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006142:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006146:	fa93 f3a3 	rbit	r3, r3
 800614a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800614e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006152:	fab3 f383 	clz	r3, r3
 8006156:	b2db      	uxtb	r3, r3
 8006158:	095b      	lsrs	r3, r3, #5
 800615a:	b2db      	uxtb	r3, r3
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d102      	bne.n	800616c <HAL_RCC_OscConfig+0x94>
 8006166:	4ba8      	ldr	r3, [pc, #672]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	e015      	b.n	8006198 <HAL_RCC_OscConfig+0xc0>
 800616c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006170:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006174:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006178:	fa93 f3a3 	rbit	r3, r3
 800617c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006180:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006184:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006188:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800618c:	fa93 f3a3 	rbit	r3, r3
 8006190:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006194:	4b9c      	ldr	r3, [pc, #624]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800619c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80061a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80061a4:	fa92 f2a2 	rbit	r2, r2
 80061a8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80061ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80061b0:	fab2 f282 	clz	r2, r2
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	f042 0220 	orr.w	r2, r2, #32
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	f002 021f 	and.w	r2, r2, #31
 80061c0:	2101      	movs	r1, #1
 80061c2:	fa01 f202 	lsl.w	r2, r1, r2
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 811f 	beq.w	800640c <HAL_RCC_OscConfig+0x334>
 80061ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f040 8116 	bne.w	800640c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f000 bfaf 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f6:	d106      	bne.n	8006206 <HAL_RCC_OscConfig+0x12e>
 80061f8:	4b83      	ldr	r3, [pc, #524]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a82      	ldr	r2, [pc, #520]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 80061fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	e036      	b.n	8006274 <HAL_RCC_OscConfig+0x19c>
 8006206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800620a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10c      	bne.n	8006230 <HAL_RCC_OscConfig+0x158>
 8006216:	4b7c      	ldr	r3, [pc, #496]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a7b      	ldr	r2, [pc, #492]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 800621c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006220:	6013      	str	r3, [r2, #0]
 8006222:	4b79      	ldr	r3, [pc, #484]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a78      	ldr	r2, [pc, #480]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e021      	b.n	8006274 <HAL_RCC_OscConfig+0x19c>
 8006230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006234:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006240:	d10c      	bne.n	800625c <HAL_RCC_OscConfig+0x184>
 8006242:	4b71      	ldr	r3, [pc, #452]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a70      	ldr	r2, [pc, #448]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	4b6e      	ldr	r3, [pc, #440]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a6d      	ldr	r2, [pc, #436]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e00b      	b.n	8006274 <HAL_RCC_OscConfig+0x19c>
 800625c:	4b6a      	ldr	r3, [pc, #424]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a69      	ldr	r2, [pc, #420]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4b67      	ldr	r3, [pc, #412]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a66      	ldr	r2, [pc, #408]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 800626e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006272:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006274:	4b64      	ldr	r3, [pc, #400]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	f023 020f 	bic.w	r2, r3, #15
 800627c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	495f      	ldr	r1, [pc, #380]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 800628a:	4313      	orrs	r3, r2
 800628c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800628e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d059      	beq.n	8006352 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629e:	f7fd ff1f 	bl	80040e0 <HAL_GetTick>
 80062a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a6:	e00a      	b.n	80062be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062a8:	f7fd ff1a 	bl	80040e0 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b64      	cmp	r3, #100	; 0x64
 80062b6:	d902      	bls.n	80062be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	f000 bf43 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>
 80062be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062c2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80062ca:	fa93 f3a3 	rbit	r3, r3
 80062ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80062d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d6:	fab3 f383 	clz	r3, r3
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d102      	bne.n	80062f0 <HAL_RCC_OscConfig+0x218>
 80062ea:	4b47      	ldr	r3, [pc, #284]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	e015      	b.n	800631c <HAL_RCC_OscConfig+0x244>
 80062f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80062fc:	fa93 f3a3 	rbit	r3, r3
 8006300:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006308:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800630c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8006310:	fa93 f3a3 	rbit	r3, r3
 8006314:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8006318:	4b3b      	ldr	r3, [pc, #236]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006320:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8006324:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006328:	fa92 f2a2 	rbit	r2, r2
 800632c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8006330:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8006334:	fab2 f282 	clz	r2, r2
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	f042 0220 	orr.w	r2, r2, #32
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	f002 021f 	and.w	r2, r2, #31
 8006344:	2101      	movs	r1, #1
 8006346:	fa01 f202 	lsl.w	r2, r1, r2
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0ab      	beq.n	80062a8 <HAL_RCC_OscConfig+0x1d0>
 8006350:	e05d      	b.n	800640e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006352:	f7fd fec5 	bl	80040e0 <HAL_GetTick>
 8006356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800635a:	e00a      	b.n	8006372 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800635c:	f7fd fec0 	bl	80040e0 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b64      	cmp	r3, #100	; 0x64
 800636a:	d902      	bls.n	8006372 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	f000 bee9 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>
 8006372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006376:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800637e:	fa93 f3a3 	rbit	r3, r3
 8006382:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8006386:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638a:	fab3 f383 	clz	r3, r3
 800638e:	b2db      	uxtb	r3, r3
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	b2db      	uxtb	r3, r3
 8006394:	f043 0301 	orr.w	r3, r3, #1
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b01      	cmp	r3, #1
 800639c:	d102      	bne.n	80063a4 <HAL_RCC_OscConfig+0x2cc>
 800639e:	4b1a      	ldr	r3, [pc, #104]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	e015      	b.n	80063d0 <HAL_RCC_OscConfig+0x2f8>
 80063a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80063b0:	fa93 f3a3 	rbit	r3, r3
 80063b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80063b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80063c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80063c4:	fa93 f3a3 	rbit	r3, r3
 80063c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <HAL_RCC_OscConfig+0x330>)
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80063d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80063d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80063dc:	fa92 f2a2 	rbit	r2, r2
 80063e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80063e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80063e8:	fab2 f282 	clz	r2, r2
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	f042 0220 	orr.w	r2, r2, #32
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	f002 021f 	and.w	r2, r2, #31
 80063f8:	2101      	movs	r1, #1
 80063fa:	fa01 f202 	lsl.w	r2, r1, r2
 80063fe:	4013      	ands	r3, r2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1ab      	bne.n	800635c <HAL_RCC_OscConfig+0x284>
 8006404:	e003      	b.n	800640e <HAL_RCC_OscConfig+0x336>
 8006406:	bf00      	nop
 8006408:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800640c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800640e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006412:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 817d 	beq.w	800671e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006424:	4ba6      	ldr	r3, [pc, #664]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 030c 	and.w	r3, r3, #12
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00b      	beq.n	8006448 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006430:	4ba3      	ldr	r3, [pc, #652]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 030c 	and.w	r3, r3, #12
 8006438:	2b08      	cmp	r3, #8
 800643a:	d172      	bne.n	8006522 <HAL_RCC_OscConfig+0x44a>
 800643c:	4ba0      	ldr	r3, [pc, #640]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d16c      	bne.n	8006522 <HAL_RCC_OscConfig+0x44a>
 8006448:	2302      	movs	r3, #2
 800644a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8006452:	fa93 f3a3 	rbit	r3, r3
 8006456:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800645a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645e:	fab3 f383 	clz	r3, r3
 8006462:	b2db      	uxtb	r3, r3
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	b2db      	uxtb	r3, r3
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b01      	cmp	r3, #1
 8006470:	d102      	bne.n	8006478 <HAL_RCC_OscConfig+0x3a0>
 8006472:	4b93      	ldr	r3, [pc, #588]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	e013      	b.n	80064a0 <HAL_RCC_OscConfig+0x3c8>
 8006478:	2302      	movs	r3, #2
 800647a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8006482:	fa93 f3a3 	rbit	r3, r3
 8006486:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800648a:	2302      	movs	r3, #2
 800648c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006490:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8006494:	fa93 f3a3 	rbit	r3, r3
 8006498:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800649c:	4b88      	ldr	r3, [pc, #544]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	2202      	movs	r2, #2
 80064a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80064a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80064aa:	fa92 f2a2 	rbit	r2, r2
 80064ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80064b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80064b6:	fab2 f282 	clz	r2, r2
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	f042 0220 	orr.w	r2, r2, #32
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	f002 021f 	and.w	r2, r2, #31
 80064c6:	2101      	movs	r1, #1
 80064c8:	fa01 f202 	lsl.w	r2, r1, r2
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCC_OscConfig+0x410>
 80064d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d002      	beq.n	80064e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f000 be2e 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064e8:	4b75      	ldr	r3, [pc, #468]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	695b      	ldr	r3, [r3, #20]
 80064fc:	21f8      	movs	r1, #248	; 0xf8
 80064fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006502:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006506:	fa91 f1a1 	rbit	r1, r1
 800650a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800650e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8006512:	fab1 f181 	clz	r1, r1
 8006516:	b2c9      	uxtb	r1, r1
 8006518:	408b      	lsls	r3, r1
 800651a:	4969      	ldr	r1, [pc, #420]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006520:	e0fd      	b.n	800671e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006526:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8088 	beq.w	8006644 <HAL_RCC_OscConfig+0x56c>
 8006534:	2301      	movs	r3, #1
 8006536:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800653e:	fa93 f3a3 	rbit	r3, r3
 8006542:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8006546:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800654a:	fab3 f383 	clz	r3, r3
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	461a      	mov	r2, r3
 800655c:	2301      	movs	r3, #1
 800655e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006560:	f7fd fdbe 	bl	80040e0 <HAL_GetTick>
 8006564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006568:	e00a      	b.n	8006580 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800656a:	f7fd fdb9 	bl	80040e0 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d902      	bls.n	8006580 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	f000 bde2 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>
 8006580:	2302      	movs	r3, #2
 8006582:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006586:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800658a:	fa93 f3a3 	rbit	r3, r3
 800658e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8006592:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006596:	fab3 f383 	clz	r3, r3
 800659a:	b2db      	uxtb	r3, r3
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	f043 0301 	orr.w	r3, r3, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d102      	bne.n	80065b0 <HAL_RCC_OscConfig+0x4d8>
 80065aa:	4b45      	ldr	r3, [pc, #276]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	e013      	b.n	80065d8 <HAL_RCC_OscConfig+0x500>
 80065b0:	2302      	movs	r3, #2
 80065b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80065ba:	fa93 f3a3 	rbit	r3, r3
 80065be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80065c2:	2302      	movs	r3, #2
 80065c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80065c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80065cc:	fa93 f3a3 	rbit	r3, r3
 80065d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80065d4:	4b3a      	ldr	r3, [pc, #232]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	2202      	movs	r2, #2
 80065da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80065de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80065e2:	fa92 f2a2 	rbit	r2, r2
 80065e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80065ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80065ee:	fab2 f282 	clz	r2, r2
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	f042 0220 	orr.w	r2, r2, #32
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	f002 021f 	and.w	r2, r2, #31
 80065fe:	2101      	movs	r1, #1
 8006600:	fa01 f202 	lsl.w	r2, r1, r2
 8006604:	4013      	ands	r3, r2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0af      	beq.n	800656a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800660a:	4b2d      	ldr	r3, [pc, #180]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006616:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	21f8      	movs	r1, #248	; 0xf8
 8006620:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006624:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006628:	fa91 f1a1 	rbit	r1, r1
 800662c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8006630:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8006634:	fab1 f181 	clz	r1, r1
 8006638:	b2c9      	uxtb	r1, r1
 800663a:	408b      	lsls	r3, r1
 800663c:	4920      	ldr	r1, [pc, #128]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 800663e:	4313      	orrs	r3, r2
 8006640:	600b      	str	r3, [r1, #0]
 8006642:	e06c      	b.n	800671e <HAL_RCC_OscConfig+0x646>
 8006644:	2301      	movs	r3, #1
 8006646:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800664e:	fa93 f3a3 	rbit	r3, r3
 8006652:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8006656:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800665a:	fab3 f383 	clz	r3, r3
 800665e:	b2db      	uxtb	r3, r3
 8006660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	461a      	mov	r2, r3
 800666c:	2300      	movs	r3, #0
 800666e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006670:	f7fd fd36 	bl	80040e0 <HAL_GetTick>
 8006674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006678:	e00a      	b.n	8006690 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800667a:	f7fd fd31 	bl	80040e0 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d902      	bls.n	8006690 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	f000 bd5a 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>
 8006690:	2302      	movs	r3, #2
 8006692:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006696:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800669a:	fa93 f3a3 	rbit	r3, r3
 800669e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80066a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066a6:	fab3 f383 	clz	r3, r3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	f043 0301 	orr.w	r3, r3, #1
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d104      	bne.n	80066c4 <HAL_RCC_OscConfig+0x5ec>
 80066ba:	4b01      	ldr	r3, [pc, #4]	; (80066c0 <HAL_RCC_OscConfig+0x5e8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	e015      	b.n	80066ec <HAL_RCC_OscConfig+0x614>
 80066c0:	40021000 	.word	0x40021000
 80066c4:	2302      	movs	r3, #2
 80066c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066ce:	fa93 f3a3 	rbit	r3, r3
 80066d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80066d6:	2302      	movs	r3, #2
 80066d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80066dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80066e0:	fa93 f3a3 	rbit	r3, r3
 80066e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80066e8:	4bc8      	ldr	r3, [pc, #800]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2202      	movs	r2, #2
 80066ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80066f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80066f6:	fa92 f2a2 	rbit	r2, r2
 80066fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80066fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8006702:	fab2 f282 	clz	r2, r2
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	f042 0220 	orr.w	r2, r2, #32
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	f002 021f 	and.w	r2, r2, #31
 8006712:	2101      	movs	r1, #1
 8006714:	fa01 f202 	lsl.w	r2, r1, r2
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1ad      	bne.n	800667a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800671e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8110 	beq.w	8006954 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d079      	beq.n	8006838 <HAL_RCC_OscConfig+0x760>
 8006744:	2301      	movs	r3, #1
 8006746:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800674e:	fa93 f3a3 	rbit	r3, r3
 8006752:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8006756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800675a:	fab3 f383 	clz	r3, r3
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	4bab      	ldr	r3, [pc, #684]	; (8006a10 <HAL_RCC_OscConfig+0x938>)
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	461a      	mov	r2, r3
 800676a:	2301      	movs	r3, #1
 800676c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676e:	f7fd fcb7 	bl	80040e0 <HAL_GetTick>
 8006772:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006776:	e00a      	b.n	800678e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006778:	f7fd fcb2 	bl	80040e0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d902      	bls.n	800678e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	f000 bcdb 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>
 800678e:	2302      	movs	r3, #2
 8006790:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006794:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80067a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067a8:	2202      	movs	r2, #2
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	fa93 f2a3 	rbit	r2, r3
 80067ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067cc:	2202      	movs	r2, #2
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	fa93 f2a3 	rbit	r2, r3
 80067de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e8:	4b88      	ldr	r3, [pc, #544]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 80067ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80067f4:	2102      	movs	r1, #2
 80067f6:	6019      	str	r1, [r3, #0]
 80067f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80067fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	fa93 f1a3 	rbit	r1, r3
 8006806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800680a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800680e:	6019      	str	r1, [r3, #0]
  return result;
 8006810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006814:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	fab3 f383 	clz	r3, r3
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	2101      	movs	r1, #1
 800682c:	fa01 f303 	lsl.w	r3, r1, r3
 8006830:	4013      	ands	r3, r2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0a0      	beq.n	8006778 <HAL_RCC_OscConfig+0x6a0>
 8006836:	e08d      	b.n	8006954 <HAL_RCC_OscConfig+0x87c>
 8006838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800683c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006840:	2201      	movs	r2, #1
 8006842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006848:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	fa93 f2a3 	rbit	r2, r3
 8006852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006856:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800685a:	601a      	str	r2, [r3, #0]
  return result;
 800685c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006860:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006864:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006866:	fab3 f383 	clz	r3, r3
 800686a:	b2db      	uxtb	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	4b68      	ldr	r3, [pc, #416]	; (8006a10 <HAL_RCC_OscConfig+0x938>)
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	461a      	mov	r2, r3
 8006876:	2300      	movs	r3, #0
 8006878:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800687a:	f7fd fc31 	bl	80040e0 <HAL_GetTick>
 800687e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006882:	e00a      	b.n	800689a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006884:	f7fd fc2c 	bl	80040e0 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d902      	bls.n	800689a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	f000 bc55 	b.w	8007144 <HAL_RCC_OscConfig+0x106c>
 800689a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800689e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80068a2:	2202      	movs	r2, #2
 80068a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	fa93 f2a3 	rbit	r2, r3
 80068b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80068c6:	2202      	movs	r2, #2
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	fa93 f2a3 	rbit	r2, r3
 80068d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ea:	2202      	movs	r2, #2
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80068f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	fa93 f2a3 	rbit	r2, r3
 80068fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006900:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006904:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006906:	4b41      	ldr	r3, [pc, #260]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 8006908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800690a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800690e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006912:	2102      	movs	r1, #2
 8006914:	6019      	str	r1, [r3, #0]
 8006916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800691a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	fa93 f1a3 	rbit	r1, r3
 8006924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006928:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800692c:	6019      	str	r1, [r3, #0]
  return result;
 800692e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006932:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	fab3 f383 	clz	r3, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2101      	movs	r1, #1
 800694a:	fa01 f303 	lsl.w	r3, r1, r3
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d197      	bne.n	8006884 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006958:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 81a1 	beq.w	8006cac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800696a:	2300      	movs	r3, #0
 800696c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006970:	4b26      	ldr	r3, [pc, #152]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 8006972:	69db      	ldr	r3, [r3, #28]
 8006974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d116      	bne.n	80069aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800697c:	4b23      	ldr	r3, [pc, #140]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	4a22      	ldr	r2, [pc, #136]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 8006982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006986:	61d3      	str	r3, [r2, #28]
 8006988:	4b20      	ldr	r3, [pc, #128]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006994:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8006998:	601a      	str	r2, [r3, #0]
 800699a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800699e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80069a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069aa:	4b1a      	ldr	r3, [pc, #104]	; (8006a14 <HAL_RCC_OscConfig+0x93c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11a      	bne.n	80069ec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069b6:	4b17      	ldr	r3, [pc, #92]	; (8006a14 <HAL_RCC_OscConfig+0x93c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a16      	ldr	r2, [pc, #88]	; (8006a14 <HAL_RCC_OscConfig+0x93c>)
 80069bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c2:	f7fd fb8d 	bl	80040e0 <HAL_GetTick>
 80069c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ca:	e009      	b.n	80069e0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069cc:	f7fd fb88 	bl	80040e0 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b64      	cmp	r3, #100	; 0x64
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e3b1      	b.n	8007144 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e0:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <HAL_RCC_OscConfig+0x93c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d0ef      	beq.n	80069cc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80069f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d10d      	bne.n	8006a18 <HAL_RCC_OscConfig+0x940>
 80069fc:	4b03      	ldr	r3, [pc, #12]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	4a02      	ldr	r2, [pc, #8]	; (8006a0c <HAL_RCC_OscConfig+0x934>)
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	6213      	str	r3, [r2, #32]
 8006a08:	e03c      	b.n	8006a84 <HAL_RCC_OscConfig+0x9ac>
 8006a0a:	bf00      	nop
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	10908120 	.word	0x10908120
 8006a14:	40007000 	.word	0x40007000
 8006a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10c      	bne.n	8006a42 <HAL_RCC_OscConfig+0x96a>
 8006a28:	4bc1      	ldr	r3, [pc, #772]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	4ac0      	ldr	r2, [pc, #768]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a2e:	f023 0301 	bic.w	r3, r3, #1
 8006a32:	6213      	str	r3, [r2, #32]
 8006a34:	4bbe      	ldr	r3, [pc, #760]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	4abd      	ldr	r2, [pc, #756]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a3a:	f023 0304 	bic.w	r3, r3, #4
 8006a3e:	6213      	str	r3, [r2, #32]
 8006a40:	e020      	b.n	8006a84 <HAL_RCC_OscConfig+0x9ac>
 8006a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2b05      	cmp	r3, #5
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCC_OscConfig+0x994>
 8006a52:	4bb7      	ldr	r3, [pc, #732]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	4ab6      	ldr	r2, [pc, #728]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a58:	f043 0304 	orr.w	r3, r3, #4
 8006a5c:	6213      	str	r3, [r2, #32]
 8006a5e:	4bb4      	ldr	r3, [pc, #720]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	4ab3      	ldr	r2, [pc, #716]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	6213      	str	r3, [r2, #32]
 8006a6a:	e00b      	b.n	8006a84 <HAL_RCC_OscConfig+0x9ac>
 8006a6c:	4bb0      	ldr	r3, [pc, #704]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	4aaf      	ldr	r2, [pc, #700]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	6213      	str	r3, [r2, #32]
 8006a78:	4bad      	ldr	r3, [pc, #692]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	4aac      	ldr	r2, [pc, #688]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006a7e:	f023 0304 	bic.w	r3, r3, #4
 8006a82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8081 	beq.w	8006b98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a96:	f7fd fb23 	bl	80040e0 <HAL_GetTick>
 8006a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a9e:	e00b      	b.n	8006ab8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006aa0:	f7fd fb1e 	bl	80040e0 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e345      	b.n	8007144 <HAL_RCC_OscConfig+0x106c>
 8006ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006abc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ac8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	fa93 f2a3 	rbit	r2, r3
 8006ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ad6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ae0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006aec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	fa93 f2a3 	rbit	r2, r3
 8006af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006afa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006afe:	601a      	str	r2, [r3, #0]
  return result;
 8006b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006b08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0a:	fab3 f383 	clz	r3, r3
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d102      	bne.n	8006b24 <HAL_RCC_OscConfig+0xa4c>
 8006b1e:	4b84      	ldr	r3, [pc, #528]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	e013      	b.n	8006b4c <HAL_RCC_OscConfig+0xa74>
 8006b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b28:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	fa93 f2a3 	rbit	r2, r3
 8006b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006b42:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	4b79      	ldr	r3, [pc, #484]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b50:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006b54:	2102      	movs	r1, #2
 8006b56:	6011      	str	r1, [r2, #0]
 8006b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	fa92 f1a2 	rbit	r1, r2
 8006b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b6a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006b6e:	6011      	str	r1, [r2, #0]
  return result;
 8006b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006b74:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	fab2 f282 	clz	r2, r2
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	f002 021f 	and.w	r2, r2, #31
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d084      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x9c8>
 8006b96:	e07f      	b.n	8006c98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b98:	f7fd faa2 	bl	80040e0 <HAL_GetTick>
 8006b9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ba0:	e00b      	b.n	8006bba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ba2:	f7fd fa9d 	bl	80040e0 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e2c4      	b.n	8007144 <HAL_RCC_OscConfig+0x106c>
 8006bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bbe:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	fa93 f2a3 	rbit	r2, r3
 8006bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bd8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006be2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006be6:	2202      	movs	r2, #2
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	fa93 f2a3 	rbit	r2, r3
 8006bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006bfc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006c00:	601a      	str	r2, [r3, #0]
  return result;
 8006c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c06:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006c0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0c:	fab3 f383 	clz	r3, r3
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	f043 0302 	orr.w	r3, r3, #2
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d102      	bne.n	8006c26 <HAL_RCC_OscConfig+0xb4e>
 8006c20:	4b43      	ldr	r3, [pc, #268]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	e013      	b.n	8006c4e <HAL_RCC_OscConfig+0xb76>
 8006c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c2a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006c2e:	2202      	movs	r2, #2
 8006c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	fa93 f2a3 	rbit	r2, r3
 8006c40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006c44:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	4b39      	ldr	r3, [pc, #228]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c52:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006c56:	2102      	movs	r1, #2
 8006c58:	6011      	str	r1, [r2, #0]
 8006c5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	fa92 f1a2 	rbit	r1, r2
 8006c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c6c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006c70:	6011      	str	r1, [r2, #0]
  return result;
 8006c72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006c76:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	fab2 f282 	clz	r2, r2
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	f002 021f 	and.w	r2, r2, #31
 8006c8c:	2101      	movs	r1, #1
 8006c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8006c92:	4013      	ands	r3, r2
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d184      	bne.n	8006ba2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c98:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d105      	bne.n	8006cac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ca0:	4b23      	ldr	r3, [pc, #140]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	4a22      	ldr	r2, [pc, #136]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006caa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8242 	beq.w	8007142 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cbe:	4b1c      	ldr	r3, [pc, #112]	; (8006d30 <HAL_RCC_OscConfig+0xc58>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	f000 8213 	beq.w	80070f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	f040 8162 	bne.w	8006fa2 <HAL_RCC_OscConfig+0xeca>
 8006cde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ce2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006ce6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cf0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	fa93 f2a3 	rbit	r2, r3
 8006cfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006cfe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006d02:	601a      	str	r2, [r3, #0]
  return result;
 8006d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006d0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d0e:	fab3 f383 	clz	r3, r3
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	461a      	mov	r2, r3
 8006d20:	2300      	movs	r3, #0
 8006d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d24:	f7fd f9dc 	bl	80040e0 <HAL_GetTick>
 8006d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d2c:	e00c      	b.n	8006d48 <HAL_RCC_OscConfig+0xc70>
 8006d2e:	bf00      	nop
 8006d30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d34:	f7fd f9d4 	bl	80040e0 <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e1fd      	b.n	8007144 <HAL_RCC_OscConfig+0x106c>
 8006d48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	fa93 f2a3 	rbit	r2, r3
 8006d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006d6c:	601a      	str	r2, [r3, #0]
  return result;
 8006d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006d76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d78:	fab3 f383 	clz	r3, r3
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	095b      	lsrs	r3, r3, #5
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d102      	bne.n	8006d92 <HAL_RCC_OscConfig+0xcba>
 8006d8c:	4bb0      	ldr	r3, [pc, #704]	; (8007050 <HAL_RCC_OscConfig+0xf78>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	e027      	b.n	8006de2 <HAL_RCC_OscConfig+0xd0a>
 8006d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006d96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006da4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	fa93 f2a3 	rbit	r2, r3
 8006dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006db2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dbc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	fa93 f2a3 	rbit	r2, r3
 8006dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006dd8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	4b9c      	ldr	r3, [pc, #624]	; (8007050 <HAL_RCC_OscConfig+0xf78>)
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006de6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006dea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006dee:	6011      	str	r1, [r2, #0]
 8006df0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006df4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	fa92 f1a2 	rbit	r1, r2
 8006dfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e02:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006e06:	6011      	str	r1, [r2, #0]
  return result;
 8006e08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006e0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	fab2 f282 	clz	r2, r2
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	f042 0220 	orr.w	r2, r2, #32
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	f002 021f 	and.w	r2, r2, #31
 8006e22:	2101      	movs	r1, #1
 8006e24:	fa01 f202 	lsl.w	r2, r1, r2
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d182      	bne.n	8006d34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e2e:	4b88      	ldr	r3, [pc, #544]	; (8007050 <HAL_RCC_OscConfig+0xf78>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	497f      	ldr	r1, [pc, #508]	; (8007050 <HAL_RCC_OscConfig+0xf78>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	604b      	str	r3, [r1, #4]
 8006e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006e5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	fa93 f2a3 	rbit	r2, r3
 8006e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006e7a:	601a      	str	r2, [r3, #0]
  return result;
 8006e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006e84:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e86:	fab3 f383 	clz	r3, r3
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	461a      	mov	r2, r3
 8006e98:	2301      	movs	r3, #1
 8006e9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9c:	f7fd f920 	bl	80040e0 <HAL_GetTick>
 8006ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ea4:	e009      	b.n	8006eba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea6:	f7fd f91b 	bl	80040e0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e144      	b.n	8007144 <HAL_RCC_OscConfig+0x106c>
 8006eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ebe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ecc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	fa93 f2a3 	rbit	r2, r3
 8006ed6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006eda:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006ede:	601a      	str	r2, [r3, #0]
  return result;
 8006ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ee4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006ee8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006eea:	fab3 f383 	clz	r3, r3
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d102      	bne.n	8006f04 <HAL_RCC_OscConfig+0xe2c>
 8006efe:	4b54      	ldr	r3, [pc, #336]	; (8007050 <HAL_RCC_OscConfig+0xf78>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	e027      	b.n	8006f54 <HAL_RCC_OscConfig+0xe7c>
 8006f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f08:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	fa93 f2a3 	rbit	r2, r3
 8006f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f2e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f3c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	fa93 f2a3 	rbit	r2, r3
 8006f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	4b3f      	ldr	r3, [pc, #252]	; (8007050 <HAL_RCC_OscConfig+0xf78>)
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006f58:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006f5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006f60:	6011      	str	r1, [r2, #0]
 8006f62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006f66:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	fa92 f1a2 	rbit	r1, r2
 8006f70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006f74:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006f78:	6011      	str	r1, [r2, #0]
  return result;
 8006f7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006f7e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	fab2 f282 	clz	r2, r2
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	f042 0220 	orr.w	r2, r2, #32
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	f002 021f 	and.w	r2, r2, #31
 8006f94:	2101      	movs	r1, #1
 8006f96:	fa01 f202 	lsl.w	r2, r1, r2
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d082      	beq.n	8006ea6 <HAL_RCC_OscConfig+0xdce>
 8006fa0:	e0cf      	b.n	8007142 <HAL_RCC_OscConfig+0x106a>
 8006fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fa6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006faa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fb4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	fa93 f2a3 	rbit	r2, r3
 8006fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fc2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006fc6:	601a      	str	r2, [r3, #0]
  return result;
 8006fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fcc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006fd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd2:	fab3 f383 	clz	r3, r3
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006fdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe8:	f7fd f87a 	bl	80040e0 <HAL_GetTick>
 8006fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ff0:	e009      	b.n	8007006 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff2:	f7fd f875 	bl	80040e0 <HAL_GetTick>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e09e      	b.n	8007144 <HAL_RCC_OscConfig+0x106c>
 8007006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800700a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800700e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007018:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	fa93 f2a3 	rbit	r2, r3
 8007022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007026:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800702a:	601a      	str	r2, [r3, #0]
  return result;
 800702c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007030:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007034:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007036:	fab3 f383 	clz	r3, r3
 800703a:	b2db      	uxtb	r3, r3
 800703c:	095b      	lsrs	r3, r3, #5
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b01      	cmp	r3, #1
 8007048:	d104      	bne.n	8007054 <HAL_RCC_OscConfig+0xf7c>
 800704a:	4b01      	ldr	r3, [pc, #4]	; (8007050 <HAL_RCC_OscConfig+0xf78>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	e029      	b.n	80070a4 <HAL_RCC_OscConfig+0xfcc>
 8007050:	40021000 	.word	0x40021000
 8007054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007058:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800705c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007060:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007062:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007066:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	fa93 f2a3 	rbit	r2, r3
 8007070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007074:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800707e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007082:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800708c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	fa93 f2a3 	rbit	r2, r3
 8007096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800709a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <HAL_RCC_OscConfig+0x1078>)
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80070a8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80070ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80070b0:	6011      	str	r1, [r2, #0]
 80070b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80070b6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	fa92 f1a2 	rbit	r1, r2
 80070c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80070c4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80070c8:	6011      	str	r1, [r2, #0]
  return result;
 80070ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80070ce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	fab2 f282 	clz	r2, r2
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	f042 0220 	orr.w	r2, r2, #32
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	f002 021f 	and.w	r2, r2, #31
 80070e4:	2101      	movs	r1, #1
 80070e6:	fa01 f202 	lsl.w	r2, r1, r2
 80070ea:	4013      	ands	r3, r2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d180      	bne.n	8006ff2 <HAL_RCC_OscConfig+0xf1a>
 80070f0:	e027      	b.n	8007142 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80070f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d101      	bne.n	8007106 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e01e      	b.n	8007144 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007106:	4b12      	ldr	r3, [pc, #72]	; (8007150 <HAL_RCC_OscConfig+0x1078>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800710e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007112:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007116:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800711a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	429a      	cmp	r2, r3
 8007124:	d10b      	bne.n	800713e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007126:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800712a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800712e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800713a:	429a      	cmp	r2, r3
 800713c:	d001      	beq.n	8007142 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40021000 	.word	0x40021000

08007154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b09e      	sub	sp, #120	; 0x78
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e162      	b.n	8007432 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800716c:	4b90      	ldr	r3, [pc, #576]	; (80073b0 <HAL_RCC_ClockConfig+0x25c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	429a      	cmp	r2, r3
 8007178:	d910      	bls.n	800719c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800717a:	4b8d      	ldr	r3, [pc, #564]	; (80073b0 <HAL_RCC_ClockConfig+0x25c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f023 0207 	bic.w	r2, r3, #7
 8007182:	498b      	ldr	r1, [pc, #556]	; (80073b0 <HAL_RCC_ClockConfig+0x25c>)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	4313      	orrs	r3, r2
 8007188:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800718a:	4b89      	ldr	r3, [pc, #548]	; (80073b0 <HAL_RCC_ClockConfig+0x25c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	429a      	cmp	r2, r3
 8007196:	d001      	beq.n	800719c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e14a      	b.n	8007432 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a8:	4b82      	ldr	r3, [pc, #520]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	497f      	ldr	r1, [pc, #508]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80dc 	beq.w	8007380 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d13c      	bne.n	800724a <HAL_RCC_ClockConfig+0xf6>
 80071d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071d8:	fa93 f3a3 	rbit	r3, r3
 80071dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80071de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e0:	fab3 f383 	clz	r3, r3
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	095b      	lsrs	r3, r3, #5
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d102      	bne.n	80071fa <HAL_RCC_ClockConfig+0xa6>
 80071f4:	4b6f      	ldr	r3, [pc, #444]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	e00f      	b.n	800721a <HAL_RCC_ClockConfig+0xc6>
 80071fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80071fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007202:	fa93 f3a3 	rbit	r3, r3
 8007206:	667b      	str	r3, [r7, #100]	; 0x64
 8007208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800720c:	663b      	str	r3, [r7, #96]	; 0x60
 800720e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007210:	fa93 f3a3 	rbit	r3, r3
 8007214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007216:	4b67      	ldr	r3, [pc, #412]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800721e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007222:	fa92 f2a2 	rbit	r2, r2
 8007226:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800722a:	fab2 f282 	clz	r2, r2
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	f042 0220 	orr.w	r2, r2, #32
 8007234:	b2d2      	uxtb	r2, r2
 8007236:	f002 021f 	and.w	r2, r2, #31
 800723a:	2101      	movs	r1, #1
 800723c:	fa01 f202 	lsl.w	r2, r1, r2
 8007240:	4013      	ands	r3, r2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d17b      	bne.n	800733e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e0f3      	b.n	8007432 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d13c      	bne.n	80072cc <HAL_RCC_ClockConfig+0x178>
 8007252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007256:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725a:	fa93 f3a3 	rbit	r3, r3
 800725e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007262:	fab3 f383 	clz	r3, r3
 8007266:	b2db      	uxtb	r3, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	b2db      	uxtb	r3, r3
 800726c:	f043 0301 	orr.w	r3, r3, #1
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b01      	cmp	r3, #1
 8007274:	d102      	bne.n	800727c <HAL_RCC_ClockConfig+0x128>
 8007276:	4b4f      	ldr	r3, [pc, #316]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	e00f      	b.n	800729c <HAL_RCC_ClockConfig+0x148>
 800727c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007284:	fa93 f3a3 	rbit	r3, r3
 8007288:	647b      	str	r3, [r7, #68]	; 0x44
 800728a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800728e:	643b      	str	r3, [r7, #64]	; 0x40
 8007290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007292:	fa93 f3a3 	rbit	r3, r3
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007298:	4b46      	ldr	r3, [pc, #280]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80072a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80072a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a4:	fa92 f2a2 	rbit	r2, r2
 80072a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80072aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ac:	fab2 f282 	clz	r2, r2
 80072b0:	b2d2      	uxtb	r2, r2
 80072b2:	f042 0220 	orr.w	r2, r2, #32
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	f002 021f 	and.w	r2, r2, #31
 80072bc:	2101      	movs	r1, #1
 80072be:	fa01 f202 	lsl.w	r2, r1, r2
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d13a      	bne.n	800733e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0b2      	b.n	8007432 <HAL_RCC_ClockConfig+0x2de>
 80072cc:	2302      	movs	r3, #2
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	fa93 f3a3 	rbit	r3, r3
 80072d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d102      	bne.n	80072f4 <HAL_RCC_ClockConfig+0x1a0>
 80072ee:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	e00d      	b.n	8007310 <HAL_RCC_ClockConfig+0x1bc>
 80072f4:	2302      	movs	r3, #2
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fa:	fa93 f3a3 	rbit	r3, r3
 80072fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007300:	2302      	movs	r3, #2
 8007302:	623b      	str	r3, [r7, #32]
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	fa93 f3a3 	rbit	r3, r3
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2202      	movs	r2, #2
 8007312:	61ba      	str	r2, [r7, #24]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	fa92 f2a2 	rbit	r2, r2
 800731a:	617a      	str	r2, [r7, #20]
  return result;
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	fab2 f282 	clz	r2, r2
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	f042 0220 	orr.w	r2, r2, #32
 8007328:	b2d2      	uxtb	r2, r2
 800732a:	f002 021f 	and.w	r2, r2, #31
 800732e:	2101      	movs	r1, #1
 8007330:	fa01 f202 	lsl.w	r2, r1, r2
 8007334:	4013      	ands	r3, r2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e079      	b.n	8007432 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800733e:	4b1d      	ldr	r3, [pc, #116]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f023 0203 	bic.w	r2, r3, #3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	491a      	ldr	r1, [pc, #104]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 800734c:	4313      	orrs	r3, r2
 800734e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007350:	f7fc fec6 	bl	80040e0 <HAL_GetTick>
 8007354:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007356:	e00a      	b.n	800736e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007358:	f7fc fec2 	bl	80040e0 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	f241 3288 	movw	r2, #5000	; 0x1388
 8007366:	4293      	cmp	r3, r2
 8007368:	d901      	bls.n	800736e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e061      	b.n	8007432 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736e:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <HAL_RCC_ClockConfig+0x260>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f003 020c 	and.w	r2, r3, #12
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	429a      	cmp	r2, r3
 800737e:	d1eb      	bne.n	8007358 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <HAL_RCC_ClockConfig+0x25c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	683a      	ldr	r2, [r7, #0]
 800738a:	429a      	cmp	r2, r3
 800738c:	d214      	bcs.n	80073b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738e:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <HAL_RCC_ClockConfig+0x25c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f023 0207 	bic.w	r2, r3, #7
 8007396:	4906      	ldr	r1, [pc, #24]	; (80073b0 <HAL_RCC_ClockConfig+0x25c>)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	4313      	orrs	r3, r2
 800739c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800739e:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <HAL_RCC_ClockConfig+0x25c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d005      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e040      	b.n	8007432 <HAL_RCC_ClockConfig+0x2de>
 80073b0:	40022000 	.word	0x40022000
 80073b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0304 	and.w	r3, r3, #4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073c4:	4b1d      	ldr	r3, [pc, #116]	; (800743c <HAL_RCC_ClockConfig+0x2e8>)
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	491a      	ldr	r1, [pc, #104]	; (800743c <HAL_RCC_ClockConfig+0x2e8>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d009      	beq.n	80073f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073e2:	4b16      	ldr	r3, [pc, #88]	; (800743c <HAL_RCC_ClockConfig+0x2e8>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	4912      	ldr	r1, [pc, #72]	; (800743c <HAL_RCC_ClockConfig+0x2e8>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80073f6:	f000 f829 	bl	800744c <HAL_RCC_GetSysClockFreq>
 80073fa:	4601      	mov	r1, r0
 80073fc:	4b0f      	ldr	r3, [pc, #60]	; (800743c <HAL_RCC_ClockConfig+0x2e8>)
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007404:	22f0      	movs	r2, #240	; 0xf0
 8007406:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	fa92 f2a2 	rbit	r2, r2
 800740e:	60fa      	str	r2, [r7, #12]
  return result;
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	fab2 f282 	clz	r2, r2
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	40d3      	lsrs	r3, r2
 800741a:	4a09      	ldr	r2, [pc, #36]	; (8007440 <HAL_RCC_ClockConfig+0x2ec>)
 800741c:	5cd3      	ldrb	r3, [r2, r3]
 800741e:	fa21 f303 	lsr.w	r3, r1, r3
 8007422:	4a08      	ldr	r2, [pc, #32]	; (8007444 <HAL_RCC_ClockConfig+0x2f0>)
 8007424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <HAL_RCC_ClockConfig+0x2f4>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f7fc fe14 	bl	8004058 <HAL_InitTick>
  
  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3778      	adds	r7, #120	; 0x78
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40021000 	.word	0x40021000
 8007440:	08008448 	.word	0x08008448
 8007444:	20000028 	.word	0x20000028
 8007448:	2000002c 	.word	0x2000002c

0800744c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800744c:	b480      	push	{r7}
 800744e:	b08b      	sub	sp, #44	; 0x2c
 8007450:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	2300      	movs	r3, #0
 8007458:	61bb      	str	r3, [r7, #24]
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	; 0x24
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007466:	4b29      	ldr	r3, [pc, #164]	; (800750c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	f003 030c 	and.w	r3, r3, #12
 8007472:	2b04      	cmp	r3, #4
 8007474:	d002      	beq.n	800747c <HAL_RCC_GetSysClockFreq+0x30>
 8007476:	2b08      	cmp	r3, #8
 8007478:	d003      	beq.n	8007482 <HAL_RCC_GetSysClockFreq+0x36>
 800747a:	e03c      	b.n	80074f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800747c:	4b24      	ldr	r3, [pc, #144]	; (8007510 <HAL_RCC_GetSysClockFreq+0xc4>)
 800747e:	623b      	str	r3, [r7, #32]
      break;
 8007480:	e03c      	b.n	80074fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007488:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800748c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	fa92 f2a2 	rbit	r2, r2
 8007494:	607a      	str	r2, [r7, #4]
  return result;
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	fab2 f282 	clz	r2, r2
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	40d3      	lsrs	r3, r2
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <HAL_RCC_GetSysClockFreq+0xc8>)
 80074a2:	5cd3      	ldrb	r3, [r2, r3]
 80074a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80074a6:	4b19      	ldr	r3, [pc, #100]	; (800750c <HAL_RCC_GetSysClockFreq+0xc0>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	f003 030f 	and.w	r3, r3, #15
 80074ae:	220f      	movs	r2, #15
 80074b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	fa92 f2a2 	rbit	r2, r2
 80074b8:	60fa      	str	r2, [r7, #12]
  return result;
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	fab2 f282 	clz	r2, r2
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	40d3      	lsrs	r3, r2
 80074c4:	4a14      	ldr	r2, [pc, #80]	; (8007518 <HAL_RCC_GetSysClockFreq+0xcc>)
 80074c6:	5cd3      	ldrb	r3, [r2, r3]
 80074c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d008      	beq.n	80074e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80074d4:	4a0e      	ldr	r2, [pc, #56]	; (8007510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	fb02 f303 	mul.w	r3, r2, r3
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
 80074e4:	e004      	b.n	80074f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4a0c      	ldr	r2, [pc, #48]	; (800751c <HAL_RCC_GetSysClockFreq+0xd0>)
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	623b      	str	r3, [r7, #32]
      break;
 80074f4:	e002      	b.n	80074fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80074f6:	4b06      	ldr	r3, [pc, #24]	; (8007510 <HAL_RCC_GetSysClockFreq+0xc4>)
 80074f8:	623b      	str	r3, [r7, #32]
      break;
 80074fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074fc:	6a3b      	ldr	r3, [r7, #32]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	372c      	adds	r7, #44	; 0x2c
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	40021000 	.word	0x40021000
 8007510:	007a1200 	.word	0x007a1200
 8007514:	08008458 	.word	0x08008458
 8007518:	08008468 	.word	0x08008468
 800751c:	003d0900 	.word	0x003d0900

08007520 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b092      	sub	sp, #72	; 0x48
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007530:	2300      	movs	r3, #0
 8007532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 80d4 	beq.w	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007544:	4b4e      	ldr	r3, [pc, #312]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10e      	bne.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007550:	4b4b      	ldr	r3, [pc, #300]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	4a4a      	ldr	r2, [pc, #296]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800755a:	61d3      	str	r3, [r2, #28]
 800755c:	4b48      	ldr	r3, [pc, #288]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800756e:	4b45      	ldr	r3, [pc, #276]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d118      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800757a:	4b42      	ldr	r3, [pc, #264]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a41      	ldr	r2, [pc, #260]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007584:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007586:	f7fc fdab 	bl	80040e0 <HAL_GetTick>
 800758a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800758c:	e008      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800758e:	f7fc fda7 	bl	80040e0 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b64      	cmp	r3, #100	; 0x64
 800759a:	d901      	bls.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e169      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a0:	4b38      	ldr	r3, [pc, #224]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0f0      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075ac:	4b34      	ldr	r3, [pc, #208]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8084 	beq.w	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d07c      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075cc:	4b2c      	ldr	r3, [pc, #176]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	fa93 f3a3 	rbit	r3, r3
 80075e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075e6:	fab3 f383 	clz	r3, r3
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	4b26      	ldr	r3, [pc, #152]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	461a      	mov	r2, r3
 80075f6:	2301      	movs	r3, #1
 80075f8:	6013      	str	r3, [r2, #0]
 80075fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007602:	fa93 f3a3 	rbit	r3, r3
 8007606:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800760a:	fab3 f383 	clz	r3, r3
 800760e:	b2db      	uxtb	r3, r3
 8007610:	461a      	mov	r2, r3
 8007612:	4b1d      	ldr	r3, [pc, #116]	; (8007688 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	461a      	mov	r2, r3
 800761a:	2300      	movs	r3, #0
 800761c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800761e:	4a18      	ldr	r2, [pc, #96]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007622:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d04b      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800762e:	f7fc fd57 	bl	80040e0 <HAL_GetTick>
 8007632:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007634:	e00a      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007636:	f7fc fd53 	bl	80040e0 <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	f241 3288 	movw	r2, #5000	; 0x1388
 8007644:	4293      	cmp	r3, r2
 8007646:	d901      	bls.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e113      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800764c:	2302      	movs	r3, #2
 800764e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	fa93 f3a3 	rbit	r3, r3
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
 8007658:	2302      	movs	r3, #2
 800765a:	623b      	str	r3, [r7, #32]
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	fa93 f3a3 	rbit	r3, r3
 8007662:	61fb      	str	r3, [r7, #28]
  return result;
 8007664:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007666:	fab3 f383 	clz	r3, r3
 800766a:	b2db      	uxtb	r3, r3
 800766c:	095b      	lsrs	r3, r3, #5
 800766e:	b2db      	uxtb	r3, r3
 8007670:	f043 0302 	orr.w	r3, r3, #2
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b02      	cmp	r3, #2
 8007678:	d108      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800767a:	4b01      	ldr	r3, [pc, #4]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	e00d      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007680:	40021000 	.word	0x40021000
 8007684:	40007000 	.word	0x40007000
 8007688:	10908100 	.word	0x10908100
 800768c:	2302      	movs	r3, #2
 800768e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	fa93 f3a3 	rbit	r3, r3
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	4b78      	ldr	r3, [pc, #480]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2202      	movs	r2, #2
 800769e:	613a      	str	r2, [r7, #16]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	fa92 f2a2 	rbit	r2, r2
 80076a6:	60fa      	str	r2, [r7, #12]
  return result;
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	fab2 f282 	clz	r2, r2
 80076ae:	b2d2      	uxtb	r2, r2
 80076b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	f002 021f 	and.w	r2, r2, #31
 80076ba:	2101      	movs	r1, #1
 80076bc:	fa01 f202 	lsl.w	r2, r1, r2
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0b7      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80076c6:	4b6d      	ldr	r3, [pc, #436]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	496a      	ldr	r1, [pc, #424]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80076d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d105      	bne.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e0:	4b66      	ldr	r3, [pc, #408]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	4a65      	ldr	r2, [pc, #404]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076f8:	4b60      	ldr	r3, [pc, #384]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	f023 0203 	bic.w	r2, r3, #3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	495d      	ldr	r1, [pc, #372]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007706:	4313      	orrs	r3, r2
 8007708:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d008      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007716:	4b59      	ldr	r3, [pc, #356]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	4956      	ldr	r1, [pc, #344]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007724:	4313      	orrs	r3, r2
 8007726:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0304 	and.w	r3, r3, #4
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007734:	4b51      	ldr	r3, [pc, #324]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	494e      	ldr	r1, [pc, #312]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007742:	4313      	orrs	r3, r2
 8007744:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d008      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007752:	4b4a      	ldr	r3, [pc, #296]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	f023 0210 	bic.w	r2, r3, #16
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	4947      	ldr	r1, [pc, #284]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007760:	4313      	orrs	r3, r2
 8007762:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d008      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007770:	4b42      	ldr	r3, [pc, #264]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	493f      	ldr	r1, [pc, #252]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800777e:	4313      	orrs	r3, r2
 8007780:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d008      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800778e:	4b3b      	ldr	r3, [pc, #236]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	f023 0220 	bic.w	r2, r3, #32
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	4938      	ldr	r1, [pc, #224]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800779c:	4313      	orrs	r3, r2
 800779e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d008      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077ac:	4b33      	ldr	r3, [pc, #204]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	4930      	ldr	r1, [pc, #192]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0310 	and.w	r3, r3, #16
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d008      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80077ca:	4b2c      	ldr	r3, [pc, #176]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	4929      	ldr	r1, [pc, #164]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d008      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077e8:	4b24      	ldr	r3, [pc, #144]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	4921      	ldr	r1, [pc, #132]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b00      	cmp	r3, #0
 8007804:	d008      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007806:	4b1d      	ldr	r3, [pc, #116]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	491a      	ldr	r1, [pc, #104]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007814:	4313      	orrs	r3, r2
 8007816:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007820:	2b00      	cmp	r3, #0
 8007822:	d008      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007830:	4912      	ldr	r1, [pc, #72]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007832:	4313      	orrs	r3, r2
 8007834:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007842:	4b0e      	ldr	r3, [pc, #56]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	490b      	ldr	r1, [pc, #44]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007850:	4313      	orrs	r3, r2
 8007852:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d008      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007860:	4b06      	ldr	r3, [pc, #24]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007864:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786c:	4903      	ldr	r1, [pc, #12]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800786e:	4313      	orrs	r3, r2
 8007870:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3748      	adds	r7, #72	; 0x48
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	40021000 	.word	0x40021000

08007880 <__errno>:
 8007880:	4b01      	ldr	r3, [pc, #4]	; (8007888 <__errno+0x8>)
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20000034 	.word	0x20000034

0800788c <__libc_init_array>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4d0d      	ldr	r5, [pc, #52]	; (80078c4 <__libc_init_array+0x38>)
 8007890:	4c0d      	ldr	r4, [pc, #52]	; (80078c8 <__libc_init_array+0x3c>)
 8007892:	1b64      	subs	r4, r4, r5
 8007894:	10a4      	asrs	r4, r4, #2
 8007896:	2600      	movs	r6, #0
 8007898:	42a6      	cmp	r6, r4
 800789a:	d109      	bne.n	80078b0 <__libc_init_array+0x24>
 800789c:	4d0b      	ldr	r5, [pc, #44]	; (80078cc <__libc_init_array+0x40>)
 800789e:	4c0c      	ldr	r4, [pc, #48]	; (80078d0 <__libc_init_array+0x44>)
 80078a0:	f000 fdc6 	bl	8008430 <_init>
 80078a4:	1b64      	subs	r4, r4, r5
 80078a6:	10a4      	asrs	r4, r4, #2
 80078a8:	2600      	movs	r6, #0
 80078aa:	42a6      	cmp	r6, r4
 80078ac:	d105      	bne.n	80078ba <__libc_init_array+0x2e>
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b4:	4798      	blx	r3
 80078b6:	3601      	adds	r6, #1
 80078b8:	e7ee      	b.n	8007898 <__libc_init_array+0xc>
 80078ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80078be:	4798      	blx	r3
 80078c0:	3601      	adds	r6, #1
 80078c2:	e7f2      	b.n	80078aa <__libc_init_array+0x1e>
 80078c4:	08008550 	.word	0x08008550
 80078c8:	08008550 	.word	0x08008550
 80078cc:	08008550 	.word	0x08008550
 80078d0:	08008554 	.word	0x08008554

080078d4 <memset>:
 80078d4:	4402      	add	r2, r0
 80078d6:	4603      	mov	r3, r0
 80078d8:	4293      	cmp	r3, r2
 80078da:	d100      	bne.n	80078de <memset+0xa>
 80078dc:	4770      	bx	lr
 80078de:	f803 1b01 	strb.w	r1, [r3], #1
 80078e2:	e7f9      	b.n	80078d8 <memset+0x4>

080078e4 <asin>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	ed2d 8b02 	vpush	{d8}
 80078ea:	ec55 4b10 	vmov	r4, r5, d0
 80078ee:	f000 f85b 	bl	80079a8 <__ieee754_asin>
 80078f2:	4622      	mov	r2, r4
 80078f4:	462b      	mov	r3, r5
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	eeb0 8a40 	vmov.f32	s16, s0
 80078fe:	eef0 8a60 	vmov.f32	s17, s1
 8007902:	f7f9 f8b7 	bl	8000a74 <__aeabi_dcmpun>
 8007906:	b9a8      	cbnz	r0, 8007934 <asin+0x50>
 8007908:	ec45 4b10 	vmov	d0, r4, r5
 800790c:	f000 fd7c 	bl	8008408 <fabs>
 8007910:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <asin+0x60>)
 8007912:	ec51 0b10 	vmov	r0, r1, d0
 8007916:	2200      	movs	r2, #0
 8007918:	f7f9 f8a2 	bl	8000a60 <__aeabi_dcmpgt>
 800791c:	b150      	cbz	r0, 8007934 <asin+0x50>
 800791e:	f7ff ffaf 	bl	8007880 <__errno>
 8007922:	ecbd 8b02 	vpop	{d8}
 8007926:	2321      	movs	r3, #33	; 0x21
 8007928:	6003      	str	r3, [r0, #0]
 800792a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800792e:	4806      	ldr	r0, [pc, #24]	; (8007948 <asin+0x64>)
 8007930:	f000 bd76 	b.w	8008420 <nan>
 8007934:	eeb0 0a48 	vmov.f32	s0, s16
 8007938:	eef0 0a68 	vmov.f32	s1, s17
 800793c:	ecbd 8b02 	vpop	{d8}
 8007940:	bd38      	pop	{r3, r4, r5, pc}
 8007942:	bf00      	nop
 8007944:	3ff00000 	.word	0x3ff00000
 8007948:	080084d8 	.word	0x080084d8

0800794c <atan2>:
 800794c:	f000 ba40 	b.w	8007dd0 <__ieee754_atan2>

08007950 <sqrt>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	ed2d 8b02 	vpush	{d8}
 8007956:	ec55 4b10 	vmov	r4, r5, d0
 800795a:	f000 fb03 	bl	8007f64 <__ieee754_sqrt>
 800795e:	4622      	mov	r2, r4
 8007960:	462b      	mov	r3, r5
 8007962:	4620      	mov	r0, r4
 8007964:	4629      	mov	r1, r5
 8007966:	eeb0 8a40 	vmov.f32	s16, s0
 800796a:	eef0 8a60 	vmov.f32	s17, s1
 800796e:	f7f9 f881 	bl	8000a74 <__aeabi_dcmpun>
 8007972:	b990      	cbnz	r0, 800799a <sqrt+0x4a>
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	4620      	mov	r0, r4
 800797a:	4629      	mov	r1, r5
 800797c:	f7f9 f852 	bl	8000a24 <__aeabi_dcmplt>
 8007980:	b158      	cbz	r0, 800799a <sqrt+0x4a>
 8007982:	f7ff ff7d 	bl	8007880 <__errno>
 8007986:	2321      	movs	r3, #33	; 0x21
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	2200      	movs	r2, #0
 800798c:	2300      	movs	r3, #0
 800798e:	4610      	mov	r0, r2
 8007990:	4619      	mov	r1, r3
 8007992:	f7f8 feff 	bl	8000794 <__aeabi_ddiv>
 8007996:	ec41 0b18 	vmov	d8, r0, r1
 800799a:	eeb0 0a48 	vmov.f32	s0, s16
 800799e:	eef0 0a68 	vmov.f32	s1, s17
 80079a2:	ecbd 8b02 	vpop	{d8}
 80079a6:	bd38      	pop	{r3, r4, r5, pc}

080079a8 <__ieee754_asin>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	ed2d 8b04 	vpush	{d8-d9}
 80079b0:	ec55 4b10 	vmov	r4, r5, d0
 80079b4:	4bcc      	ldr	r3, [pc, #816]	; (8007ce8 <__ieee754_asin+0x340>)
 80079b6:	b083      	sub	sp, #12
 80079b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80079bc:	4598      	cmp	r8, r3
 80079be:	9501      	str	r5, [sp, #4]
 80079c0:	dd35      	ble.n	8007a2e <__ieee754_asin+0x86>
 80079c2:	ee10 3a10 	vmov	r3, s0
 80079c6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80079ca:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80079ce:	ea58 0303 	orrs.w	r3, r8, r3
 80079d2:	d117      	bne.n	8007a04 <__ieee754_asin+0x5c>
 80079d4:	a3aa      	add	r3, pc, #680	; (adr r3, 8007c80 <__ieee754_asin+0x2d8>)
 80079d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079da:	ee10 0a10 	vmov	r0, s0
 80079de:	4629      	mov	r1, r5
 80079e0:	f7f8 fdae 	bl	8000540 <__aeabi_dmul>
 80079e4:	a3a8      	add	r3, pc, #672	; (adr r3, 8007c88 <__ieee754_asin+0x2e0>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	4606      	mov	r6, r0
 80079ec:	460f      	mov	r7, r1
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f8 fda5 	bl	8000540 <__aeabi_dmul>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f8 fbe9 	bl	80001d4 <__adddf3>
 8007a02:	e00b      	b.n	8007a1c <__ieee754_asin+0x74>
 8007a04:	ee10 2a10 	vmov	r2, s0
 8007a08:	462b      	mov	r3, r5
 8007a0a:	ee10 0a10 	vmov	r0, s0
 8007a0e:	4629      	mov	r1, r5
 8007a10:	f7f8 fbde 	bl	80001d0 <__aeabi_dsub>
 8007a14:	4602      	mov	r2, r0
 8007a16:	460b      	mov	r3, r1
 8007a18:	f7f8 febc 	bl	8000794 <__aeabi_ddiv>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	ec45 4b10 	vmov	d0, r4, r5
 8007a24:	b003      	add	sp, #12
 8007a26:	ecbd 8b04 	vpop	{d8-d9}
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	4baf      	ldr	r3, [pc, #700]	; (8007cec <__ieee754_asin+0x344>)
 8007a30:	4598      	cmp	r8, r3
 8007a32:	dc11      	bgt.n	8007a58 <__ieee754_asin+0xb0>
 8007a34:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007a38:	f280 80ae 	bge.w	8007b98 <__ieee754_asin+0x1f0>
 8007a3c:	a394      	add	r3, pc, #592	; (adr r3, 8007c90 <__ieee754_asin+0x2e8>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	ee10 0a10 	vmov	r0, s0
 8007a46:	4629      	mov	r1, r5
 8007a48:	f7f8 fbc4 	bl	80001d4 <__adddf3>
 8007a4c:	4ba8      	ldr	r3, [pc, #672]	; (8007cf0 <__ieee754_asin+0x348>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f7f9 f806 	bl	8000a60 <__aeabi_dcmpgt>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d1e3      	bne.n	8007a20 <__ieee754_asin+0x78>
 8007a58:	ec45 4b10 	vmov	d0, r4, r5
 8007a5c:	f000 fcd4 	bl	8008408 <fabs>
 8007a60:	49a3      	ldr	r1, [pc, #652]	; (8007cf0 <__ieee754_asin+0x348>)
 8007a62:	ec53 2b10 	vmov	r2, r3, d0
 8007a66:	2000      	movs	r0, #0
 8007a68:	f7f8 fbb2 	bl	80001d0 <__aeabi_dsub>
 8007a6c:	4ba1      	ldr	r3, [pc, #644]	; (8007cf4 <__ieee754_asin+0x34c>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f7f8 fd66 	bl	8000540 <__aeabi_dmul>
 8007a74:	a388      	add	r3, pc, #544	; (adr r3, 8007c98 <__ieee754_asin+0x2f0>)
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	4604      	mov	r4, r0
 8007a7c:	460d      	mov	r5, r1
 8007a7e:	f7f8 fd5f 	bl	8000540 <__aeabi_dmul>
 8007a82:	a387      	add	r3, pc, #540	; (adr r3, 8007ca0 <__ieee754_asin+0x2f8>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f7f8 fba4 	bl	80001d4 <__adddf3>
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	462b      	mov	r3, r5
 8007a90:	f7f8 fd56 	bl	8000540 <__aeabi_dmul>
 8007a94:	a384      	add	r3, pc, #528	; (adr r3, 8007ca8 <__ieee754_asin+0x300>)
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	f7f8 fb99 	bl	80001d0 <__aeabi_dsub>
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	f7f8 fd4d 	bl	8000540 <__aeabi_dmul>
 8007aa6:	a382      	add	r3, pc, #520	; (adr r3, 8007cb0 <__ieee754_asin+0x308>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fb92 	bl	80001d4 <__adddf3>
 8007ab0:	4622      	mov	r2, r4
 8007ab2:	462b      	mov	r3, r5
 8007ab4:	f7f8 fd44 	bl	8000540 <__aeabi_dmul>
 8007ab8:	a37f      	add	r3, pc, #508	; (adr r3, 8007cb8 <__ieee754_asin+0x310>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 fb87 	bl	80001d0 <__aeabi_dsub>
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	462b      	mov	r3, r5
 8007ac6:	f7f8 fd3b 	bl	8000540 <__aeabi_dmul>
 8007aca:	a37d      	add	r3, pc, #500	; (adr r3, 8007cc0 <__ieee754_asin+0x318>)
 8007acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad0:	f7f8 fb80 	bl	80001d4 <__adddf3>
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	f7f8 fd32 	bl	8000540 <__aeabi_dmul>
 8007adc:	a37a      	add	r3, pc, #488	; (adr r3, 8007cc8 <__ieee754_asin+0x320>)
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	ec41 0b18 	vmov	d8, r0, r1
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	4629      	mov	r1, r5
 8007aea:	f7f8 fd29 	bl	8000540 <__aeabi_dmul>
 8007aee:	a378      	add	r3, pc, #480	; (adr r3, 8007cd0 <__ieee754_asin+0x328>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 fb6c 	bl	80001d0 <__aeabi_dsub>
 8007af8:	4622      	mov	r2, r4
 8007afa:	462b      	mov	r3, r5
 8007afc:	f7f8 fd20 	bl	8000540 <__aeabi_dmul>
 8007b00:	a375      	add	r3, pc, #468	; (adr r3, 8007cd8 <__ieee754_asin+0x330>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fb65 	bl	80001d4 <__adddf3>
 8007b0a:	4622      	mov	r2, r4
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	f7f8 fd17 	bl	8000540 <__aeabi_dmul>
 8007b12:	a373      	add	r3, pc, #460	; (adr r3, 8007ce0 <__ieee754_asin+0x338>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f7f8 fb5a 	bl	80001d0 <__aeabi_dsub>
 8007b1c:	4622      	mov	r2, r4
 8007b1e:	462b      	mov	r3, r5
 8007b20:	f7f8 fd0e 	bl	8000540 <__aeabi_dmul>
 8007b24:	4b72      	ldr	r3, [pc, #456]	; (8007cf0 <__ieee754_asin+0x348>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	f7f8 fb54 	bl	80001d4 <__adddf3>
 8007b2c:	ec45 4b10 	vmov	d0, r4, r5
 8007b30:	4606      	mov	r6, r0
 8007b32:	460f      	mov	r7, r1
 8007b34:	f000 fa16 	bl	8007f64 <__ieee754_sqrt>
 8007b38:	4b6f      	ldr	r3, [pc, #444]	; (8007cf8 <__ieee754_asin+0x350>)
 8007b3a:	4598      	cmp	r8, r3
 8007b3c:	ec5b ab10 	vmov	sl, fp, d0
 8007b40:	f340 80dc 	ble.w	8007cfc <__ieee754_asin+0x354>
 8007b44:	4632      	mov	r2, r6
 8007b46:	463b      	mov	r3, r7
 8007b48:	ec51 0b18 	vmov	r0, r1, d8
 8007b4c:	f7f8 fe22 	bl	8000794 <__aeabi_ddiv>
 8007b50:	4652      	mov	r2, sl
 8007b52:	465b      	mov	r3, fp
 8007b54:	f7f8 fcf4 	bl	8000540 <__aeabi_dmul>
 8007b58:	4652      	mov	r2, sl
 8007b5a:	465b      	mov	r3, fp
 8007b5c:	f7f8 fb3a 	bl	80001d4 <__adddf3>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	f7f8 fb36 	bl	80001d4 <__adddf3>
 8007b68:	a347      	add	r3, pc, #284	; (adr r3, 8007c88 <__ieee754_asin+0x2e0>)
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fb2f 	bl	80001d0 <__aeabi_dsub>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	a142      	add	r1, pc, #264	; (adr r1, 8007c80 <__ieee754_asin+0x2d8>)
 8007b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b7c:	f7f8 fb28 	bl	80001d0 <__aeabi_dsub>
 8007b80:	9b01      	ldr	r3, [sp, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	bfdc      	itt	le
 8007b86:	4602      	movle	r2, r0
 8007b88:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	bfdc      	itt	le
 8007b92:	4614      	movle	r4, r2
 8007b94:	461d      	movle	r5, r3
 8007b96:	e743      	b.n	8007a20 <__ieee754_asin+0x78>
 8007b98:	ee10 2a10 	vmov	r2, s0
 8007b9c:	ee10 0a10 	vmov	r0, s0
 8007ba0:	462b      	mov	r3, r5
 8007ba2:	4629      	mov	r1, r5
 8007ba4:	f7f8 fccc 	bl	8000540 <__aeabi_dmul>
 8007ba8:	a33b      	add	r3, pc, #236	; (adr r3, 8007c98 <__ieee754_asin+0x2f0>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	4606      	mov	r6, r0
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	f7f8 fcc5 	bl	8000540 <__aeabi_dmul>
 8007bb6:	a33a      	add	r3, pc, #232	; (adr r3, 8007ca0 <__ieee754_asin+0x2f8>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f7f8 fb0a 	bl	80001d4 <__adddf3>
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	463b      	mov	r3, r7
 8007bc4:	f7f8 fcbc 	bl	8000540 <__aeabi_dmul>
 8007bc8:	a337      	add	r3, pc, #220	; (adr r3, 8007ca8 <__ieee754_asin+0x300>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 faff 	bl	80001d0 <__aeabi_dsub>
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	f7f8 fcb3 	bl	8000540 <__aeabi_dmul>
 8007bda:	a335      	add	r3, pc, #212	; (adr r3, 8007cb0 <__ieee754_asin+0x308>)
 8007bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be0:	f7f8 faf8 	bl	80001d4 <__adddf3>
 8007be4:	4632      	mov	r2, r6
 8007be6:	463b      	mov	r3, r7
 8007be8:	f7f8 fcaa 	bl	8000540 <__aeabi_dmul>
 8007bec:	a332      	add	r3, pc, #200	; (adr r3, 8007cb8 <__ieee754_asin+0x310>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 faed 	bl	80001d0 <__aeabi_dsub>
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	f7f8 fca1 	bl	8000540 <__aeabi_dmul>
 8007bfe:	a330      	add	r3, pc, #192	; (adr r3, 8007cc0 <__ieee754_asin+0x318>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fae6 	bl	80001d4 <__adddf3>
 8007c08:	4632      	mov	r2, r6
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	f7f8 fc98 	bl	8000540 <__aeabi_dmul>
 8007c10:	a32d      	add	r3, pc, #180	; (adr r3, 8007cc8 <__ieee754_asin+0x320>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	4680      	mov	r8, r0
 8007c18:	4689      	mov	r9, r1
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	f7f8 fc8f 	bl	8000540 <__aeabi_dmul>
 8007c22:	a32b      	add	r3, pc, #172	; (adr r3, 8007cd0 <__ieee754_asin+0x328>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f7f8 fad2 	bl	80001d0 <__aeabi_dsub>
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	463b      	mov	r3, r7
 8007c30:	f7f8 fc86 	bl	8000540 <__aeabi_dmul>
 8007c34:	a328      	add	r3, pc, #160	; (adr r3, 8007cd8 <__ieee754_asin+0x330>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 facb 	bl	80001d4 <__adddf3>
 8007c3e:	4632      	mov	r2, r6
 8007c40:	463b      	mov	r3, r7
 8007c42:	f7f8 fc7d 	bl	8000540 <__aeabi_dmul>
 8007c46:	a326      	add	r3, pc, #152	; (adr r3, 8007ce0 <__ieee754_asin+0x338>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f7f8 fac0 	bl	80001d0 <__aeabi_dsub>
 8007c50:	4632      	mov	r2, r6
 8007c52:	463b      	mov	r3, r7
 8007c54:	f7f8 fc74 	bl	8000540 <__aeabi_dmul>
 8007c58:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <__ieee754_asin+0x348>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f7f8 faba 	bl	80001d4 <__adddf3>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4640      	mov	r0, r8
 8007c66:	4649      	mov	r1, r9
 8007c68:	f7f8 fd94 	bl	8000794 <__aeabi_ddiv>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	462b      	mov	r3, r5
 8007c70:	f7f8 fc66 	bl	8000540 <__aeabi_dmul>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	4620      	mov	r0, r4
 8007c7a:	4629      	mov	r1, r5
 8007c7c:	e6bf      	b.n	80079fe <__ieee754_asin+0x56>
 8007c7e:	bf00      	nop
 8007c80:	54442d18 	.word	0x54442d18
 8007c84:	3ff921fb 	.word	0x3ff921fb
 8007c88:	33145c07 	.word	0x33145c07
 8007c8c:	3c91a626 	.word	0x3c91a626
 8007c90:	8800759c 	.word	0x8800759c
 8007c94:	7e37e43c 	.word	0x7e37e43c
 8007c98:	0dfdf709 	.word	0x0dfdf709
 8007c9c:	3f023de1 	.word	0x3f023de1
 8007ca0:	7501b288 	.word	0x7501b288
 8007ca4:	3f49efe0 	.word	0x3f49efe0
 8007ca8:	b5688f3b 	.word	0xb5688f3b
 8007cac:	3fa48228 	.word	0x3fa48228
 8007cb0:	0e884455 	.word	0x0e884455
 8007cb4:	3fc9c155 	.word	0x3fc9c155
 8007cb8:	03eb6f7d 	.word	0x03eb6f7d
 8007cbc:	3fd4d612 	.word	0x3fd4d612
 8007cc0:	55555555 	.word	0x55555555
 8007cc4:	3fc55555 	.word	0x3fc55555
 8007cc8:	b12e9282 	.word	0xb12e9282
 8007ccc:	3fb3b8c5 	.word	0x3fb3b8c5
 8007cd0:	1b8d0159 	.word	0x1b8d0159
 8007cd4:	3fe6066c 	.word	0x3fe6066c
 8007cd8:	9c598ac8 	.word	0x9c598ac8
 8007cdc:	40002ae5 	.word	0x40002ae5
 8007ce0:	1c8a2d4b 	.word	0x1c8a2d4b
 8007ce4:	40033a27 	.word	0x40033a27
 8007ce8:	3fefffff 	.word	0x3fefffff
 8007cec:	3fdfffff 	.word	0x3fdfffff
 8007cf0:	3ff00000 	.word	0x3ff00000
 8007cf4:	3fe00000 	.word	0x3fe00000
 8007cf8:	3fef3332 	.word	0x3fef3332
 8007cfc:	ee10 2a10 	vmov	r2, s0
 8007d00:	ee10 0a10 	vmov	r0, s0
 8007d04:	465b      	mov	r3, fp
 8007d06:	4659      	mov	r1, fp
 8007d08:	f7f8 fa64 	bl	80001d4 <__adddf3>
 8007d0c:	4632      	mov	r2, r6
 8007d0e:	463b      	mov	r3, r7
 8007d10:	ec41 0b19 	vmov	d9, r0, r1
 8007d14:	ec51 0b18 	vmov	r0, r1, d8
 8007d18:	f7f8 fd3c 	bl	8000794 <__aeabi_ddiv>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	ec51 0b19 	vmov	r0, r1, d9
 8007d24:	f7f8 fc0c 	bl	8000540 <__aeabi_dmul>
 8007d28:	f04f 0800 	mov.w	r8, #0
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	460f      	mov	r7, r1
 8007d30:	4642      	mov	r2, r8
 8007d32:	465b      	mov	r3, fp
 8007d34:	4640      	mov	r0, r8
 8007d36:	4659      	mov	r1, fp
 8007d38:	f7f8 fc02 	bl	8000540 <__aeabi_dmul>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4620      	mov	r0, r4
 8007d42:	4629      	mov	r1, r5
 8007d44:	f7f8 fa44 	bl	80001d0 <__aeabi_dsub>
 8007d48:	4642      	mov	r2, r8
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	465b      	mov	r3, fp
 8007d50:	4650      	mov	r0, sl
 8007d52:	4659      	mov	r1, fp
 8007d54:	f7f8 fa3e 	bl	80001d4 <__adddf3>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f7f8 fd18 	bl	8000794 <__aeabi_ddiv>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	f7f8 fa34 	bl	80001d4 <__adddf3>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	a113      	add	r1, pc, #76	; (adr r1, 8007dc0 <__ieee754_asin+0x418>)
 8007d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d76:	f7f8 fa2b 	bl	80001d0 <__aeabi_dsub>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4639      	mov	r1, r7
 8007d82:	f7f8 fa25 	bl	80001d0 <__aeabi_dsub>
 8007d86:	4642      	mov	r2, r8
 8007d88:	4604      	mov	r4, r0
 8007d8a:	460d      	mov	r5, r1
 8007d8c:	465b      	mov	r3, fp
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4659      	mov	r1, fp
 8007d92:	f7f8 fa1f 	bl	80001d4 <__adddf3>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	a10b      	add	r1, pc, #44	; (adr r1, 8007dc8 <__ieee754_asin+0x420>)
 8007d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007da0:	f7f8 fa16 	bl	80001d0 <__aeabi_dsub>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4620      	mov	r0, r4
 8007daa:	4629      	mov	r1, r5
 8007dac:	f7f8 fa10 	bl	80001d0 <__aeabi_dsub>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	a104      	add	r1, pc, #16	; (adr r1, 8007dc8 <__ieee754_asin+0x420>)
 8007db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dba:	e6df      	b.n	8007b7c <__ieee754_asin+0x1d4>
 8007dbc:	f3af 8000 	nop.w
 8007dc0:	33145c07 	.word	0x33145c07
 8007dc4:	3c91a626 	.word	0x3c91a626
 8007dc8:	54442d18 	.word	0x54442d18
 8007dcc:	3fe921fb 	.word	0x3fe921fb

08007dd0 <__ieee754_atan2>:
 8007dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	ec57 6b11 	vmov	r6, r7, d1
 8007dd8:	4273      	negs	r3, r6
 8007dda:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007f60 <__ieee754_atan2+0x190>
 8007dde:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007de2:	4333      	orrs	r3, r6
 8007de4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007de8:	4573      	cmp	r3, lr
 8007dea:	ec51 0b10 	vmov	r0, r1, d0
 8007dee:	ee11 8a10 	vmov	r8, s2
 8007df2:	d80a      	bhi.n	8007e0a <__ieee754_atan2+0x3a>
 8007df4:	4244      	negs	r4, r0
 8007df6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007dfa:	4304      	orrs	r4, r0
 8007dfc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007e00:	4574      	cmp	r4, lr
 8007e02:	ee10 9a10 	vmov	r9, s0
 8007e06:	468c      	mov	ip, r1
 8007e08:	d907      	bls.n	8007e1a <__ieee754_atan2+0x4a>
 8007e0a:	4632      	mov	r2, r6
 8007e0c:	463b      	mov	r3, r7
 8007e0e:	f7f8 f9e1 	bl	80001d4 <__adddf3>
 8007e12:	ec41 0b10 	vmov	d0, r0, r1
 8007e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007e1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e22:	4334      	orrs	r4, r6
 8007e24:	d103      	bne.n	8007e2e <__ieee754_atan2+0x5e>
 8007e26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e2a:	f000 b94d 	b.w	80080c8 <atan>
 8007e2e:	17bc      	asrs	r4, r7, #30
 8007e30:	f004 0402 	and.w	r4, r4, #2
 8007e34:	ea53 0909 	orrs.w	r9, r3, r9
 8007e38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007e3c:	d107      	bne.n	8007e4e <__ieee754_atan2+0x7e>
 8007e3e:	2c02      	cmp	r4, #2
 8007e40:	d060      	beq.n	8007f04 <__ieee754_atan2+0x134>
 8007e42:	2c03      	cmp	r4, #3
 8007e44:	d1e5      	bne.n	8007e12 <__ieee754_atan2+0x42>
 8007e46:	a142      	add	r1, pc, #264	; (adr r1, 8007f50 <__ieee754_atan2+0x180>)
 8007e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4c:	e7e1      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007e4e:	ea52 0808 	orrs.w	r8, r2, r8
 8007e52:	d106      	bne.n	8007e62 <__ieee754_atan2+0x92>
 8007e54:	f1bc 0f00 	cmp.w	ip, #0
 8007e58:	da5f      	bge.n	8007f1a <__ieee754_atan2+0x14a>
 8007e5a:	a13f      	add	r1, pc, #252	; (adr r1, 8007f58 <__ieee754_atan2+0x188>)
 8007e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e60:	e7d7      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007e62:	4572      	cmp	r2, lr
 8007e64:	d10f      	bne.n	8007e86 <__ieee754_atan2+0xb6>
 8007e66:	4293      	cmp	r3, r2
 8007e68:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007e6c:	d107      	bne.n	8007e7e <__ieee754_atan2+0xae>
 8007e6e:	2c02      	cmp	r4, #2
 8007e70:	d84c      	bhi.n	8007f0c <__ieee754_atan2+0x13c>
 8007e72:	4b35      	ldr	r3, [pc, #212]	; (8007f48 <__ieee754_atan2+0x178>)
 8007e74:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007e78:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007e7c:	e7c9      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007e7e:	2c02      	cmp	r4, #2
 8007e80:	d848      	bhi.n	8007f14 <__ieee754_atan2+0x144>
 8007e82:	4b32      	ldr	r3, [pc, #200]	; (8007f4c <__ieee754_atan2+0x17c>)
 8007e84:	e7f6      	b.n	8007e74 <__ieee754_atan2+0xa4>
 8007e86:	4573      	cmp	r3, lr
 8007e88:	d0e4      	beq.n	8007e54 <__ieee754_atan2+0x84>
 8007e8a:	1a9b      	subs	r3, r3, r2
 8007e8c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007e90:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e94:	da1e      	bge.n	8007ed4 <__ieee754_atan2+0x104>
 8007e96:	2f00      	cmp	r7, #0
 8007e98:	da01      	bge.n	8007e9e <__ieee754_atan2+0xce>
 8007e9a:	323c      	adds	r2, #60	; 0x3c
 8007e9c:	db1e      	blt.n	8007edc <__ieee754_atan2+0x10c>
 8007e9e:	4632      	mov	r2, r6
 8007ea0:	463b      	mov	r3, r7
 8007ea2:	f7f8 fc77 	bl	8000794 <__aeabi_ddiv>
 8007ea6:	ec41 0b10 	vmov	d0, r0, r1
 8007eaa:	f000 faad 	bl	8008408 <fabs>
 8007eae:	f000 f90b 	bl	80080c8 <atan>
 8007eb2:	ec51 0b10 	vmov	r0, r1, d0
 8007eb6:	2c01      	cmp	r4, #1
 8007eb8:	d013      	beq.n	8007ee2 <__ieee754_atan2+0x112>
 8007eba:	2c02      	cmp	r4, #2
 8007ebc:	d015      	beq.n	8007eea <__ieee754_atan2+0x11a>
 8007ebe:	2c00      	cmp	r4, #0
 8007ec0:	d0a7      	beq.n	8007e12 <__ieee754_atan2+0x42>
 8007ec2:	a319      	add	r3, pc, #100	; (adr r3, 8007f28 <__ieee754_atan2+0x158>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 f982 	bl	80001d0 <__aeabi_dsub>
 8007ecc:	a318      	add	r3, pc, #96	; (adr r3, 8007f30 <__ieee754_atan2+0x160>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	e014      	b.n	8007efe <__ieee754_atan2+0x12e>
 8007ed4:	a118      	add	r1, pc, #96	; (adr r1, 8007f38 <__ieee754_atan2+0x168>)
 8007ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eda:	e7ec      	b.n	8007eb6 <__ieee754_atan2+0xe6>
 8007edc:	2000      	movs	r0, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	e7e9      	b.n	8007eb6 <__ieee754_atan2+0xe6>
 8007ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	e793      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007eea:	a30f      	add	r3, pc, #60	; (adr r3, 8007f28 <__ieee754_atan2+0x158>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f7f8 f96e 	bl	80001d0 <__aeabi_dsub>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	a10d      	add	r1, pc, #52	; (adr r1, 8007f30 <__ieee754_atan2+0x160>)
 8007efa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007efe:	f7f8 f967 	bl	80001d0 <__aeabi_dsub>
 8007f02:	e786      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f04:	a10a      	add	r1, pc, #40	; (adr r1, 8007f30 <__ieee754_atan2+0x160>)
 8007f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f0a:	e782      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f0c:	a10c      	add	r1, pc, #48	; (adr r1, 8007f40 <__ieee754_atan2+0x170>)
 8007f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f12:	e77e      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f14:	2000      	movs	r0, #0
 8007f16:	2100      	movs	r1, #0
 8007f18:	e77b      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f1a:	a107      	add	r1, pc, #28	; (adr r1, 8007f38 <__ieee754_atan2+0x168>)
 8007f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f20:	e777      	b.n	8007e12 <__ieee754_atan2+0x42>
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	33145c07 	.word	0x33145c07
 8007f2c:	3ca1a626 	.word	0x3ca1a626
 8007f30:	54442d18 	.word	0x54442d18
 8007f34:	400921fb 	.word	0x400921fb
 8007f38:	54442d18 	.word	0x54442d18
 8007f3c:	3ff921fb 	.word	0x3ff921fb
 8007f40:	54442d18 	.word	0x54442d18
 8007f44:	3fe921fb 	.word	0x3fe921fb
 8007f48:	080084e0 	.word	0x080084e0
 8007f4c:	080084f8 	.word	0x080084f8
 8007f50:	54442d18 	.word	0x54442d18
 8007f54:	c00921fb 	.word	0xc00921fb
 8007f58:	54442d18 	.word	0x54442d18
 8007f5c:	bff921fb 	.word	0xbff921fb
 8007f60:	7ff00000 	.word	0x7ff00000

08007f64 <__ieee754_sqrt>:
 8007f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f68:	ec55 4b10 	vmov	r4, r5, d0
 8007f6c:	4e55      	ldr	r6, [pc, #340]	; (80080c4 <__ieee754_sqrt+0x160>)
 8007f6e:	43ae      	bics	r6, r5
 8007f70:	ee10 0a10 	vmov	r0, s0
 8007f74:	ee10 3a10 	vmov	r3, s0
 8007f78:	462a      	mov	r2, r5
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	d110      	bne.n	8007fa0 <__ieee754_sqrt+0x3c>
 8007f7e:	ee10 2a10 	vmov	r2, s0
 8007f82:	462b      	mov	r3, r5
 8007f84:	f7f8 fadc 	bl	8000540 <__aeabi_dmul>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f7f8 f920 	bl	80001d4 <__adddf3>
 8007f94:	4604      	mov	r4, r0
 8007f96:	460d      	mov	r5, r1
 8007f98:	ec45 4b10 	vmov	d0, r4, r5
 8007f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fa0:	2d00      	cmp	r5, #0
 8007fa2:	dc10      	bgt.n	8007fc6 <__ieee754_sqrt+0x62>
 8007fa4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007fa8:	4330      	orrs	r0, r6
 8007faa:	d0f5      	beq.n	8007f98 <__ieee754_sqrt+0x34>
 8007fac:	b15d      	cbz	r5, 8007fc6 <__ieee754_sqrt+0x62>
 8007fae:	ee10 2a10 	vmov	r2, s0
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	ee10 0a10 	vmov	r0, s0
 8007fb8:	f7f8 f90a 	bl	80001d0 <__aeabi_dsub>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	f7f8 fbe8 	bl	8000794 <__aeabi_ddiv>
 8007fc4:	e7e6      	b.n	8007f94 <__ieee754_sqrt+0x30>
 8007fc6:	1512      	asrs	r2, r2, #20
 8007fc8:	d074      	beq.n	80080b4 <__ieee754_sqrt+0x150>
 8007fca:	07d4      	lsls	r4, r2, #31
 8007fcc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007fd0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007fd8:	bf5e      	ittt	pl
 8007fda:	0fda      	lsrpl	r2, r3, #31
 8007fdc:	005b      	lslpl	r3, r3, #1
 8007fde:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007fe2:	2400      	movs	r4, #0
 8007fe4:	0fda      	lsrs	r2, r3, #31
 8007fe6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007fea:	107f      	asrs	r7, r7, #1
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	2516      	movs	r5, #22
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007ff6:	1886      	adds	r6, r0, r2
 8007ff8:	428e      	cmp	r6, r1
 8007ffa:	bfde      	ittt	le
 8007ffc:	1b89      	suble	r1, r1, r6
 8007ffe:	18b0      	addle	r0, r6, r2
 8008000:	18a4      	addle	r4, r4, r2
 8008002:	0049      	lsls	r1, r1, #1
 8008004:	3d01      	subs	r5, #1
 8008006:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800800a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800800e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008012:	d1f0      	bne.n	8007ff6 <__ieee754_sqrt+0x92>
 8008014:	462a      	mov	r2, r5
 8008016:	f04f 0e20 	mov.w	lr, #32
 800801a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800801e:	4281      	cmp	r1, r0
 8008020:	eb06 0c05 	add.w	ip, r6, r5
 8008024:	dc02      	bgt.n	800802c <__ieee754_sqrt+0xc8>
 8008026:	d113      	bne.n	8008050 <__ieee754_sqrt+0xec>
 8008028:	459c      	cmp	ip, r3
 800802a:	d811      	bhi.n	8008050 <__ieee754_sqrt+0xec>
 800802c:	f1bc 0f00 	cmp.w	ip, #0
 8008030:	eb0c 0506 	add.w	r5, ip, r6
 8008034:	da43      	bge.n	80080be <__ieee754_sqrt+0x15a>
 8008036:	2d00      	cmp	r5, #0
 8008038:	db41      	blt.n	80080be <__ieee754_sqrt+0x15a>
 800803a:	f100 0801 	add.w	r8, r0, #1
 800803e:	1a09      	subs	r1, r1, r0
 8008040:	459c      	cmp	ip, r3
 8008042:	bf88      	it	hi
 8008044:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8008048:	eba3 030c 	sub.w	r3, r3, ip
 800804c:	4432      	add	r2, r6
 800804e:	4640      	mov	r0, r8
 8008050:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008054:	f1be 0e01 	subs.w	lr, lr, #1
 8008058:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800805c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008060:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008064:	d1db      	bne.n	800801e <__ieee754_sqrt+0xba>
 8008066:	430b      	orrs	r3, r1
 8008068:	d006      	beq.n	8008078 <__ieee754_sqrt+0x114>
 800806a:	1c50      	adds	r0, r2, #1
 800806c:	bf13      	iteet	ne
 800806e:	3201      	addne	r2, #1
 8008070:	3401      	addeq	r4, #1
 8008072:	4672      	moveq	r2, lr
 8008074:	f022 0201 	bicne.w	r2, r2, #1
 8008078:	1063      	asrs	r3, r4, #1
 800807a:	0852      	lsrs	r2, r2, #1
 800807c:	07e1      	lsls	r1, r4, #31
 800807e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008082:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008086:	bf48      	it	mi
 8008088:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800808c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008090:	4614      	mov	r4, r2
 8008092:	e781      	b.n	8007f98 <__ieee754_sqrt+0x34>
 8008094:	0ad9      	lsrs	r1, r3, #11
 8008096:	3815      	subs	r0, #21
 8008098:	055b      	lsls	r3, r3, #21
 800809a:	2900      	cmp	r1, #0
 800809c:	d0fa      	beq.n	8008094 <__ieee754_sqrt+0x130>
 800809e:	02cd      	lsls	r5, r1, #11
 80080a0:	d50a      	bpl.n	80080b8 <__ieee754_sqrt+0x154>
 80080a2:	f1c2 0420 	rsb	r4, r2, #32
 80080a6:	fa23 f404 	lsr.w	r4, r3, r4
 80080aa:	1e55      	subs	r5, r2, #1
 80080ac:	4093      	lsls	r3, r2
 80080ae:	4321      	orrs	r1, r4
 80080b0:	1b42      	subs	r2, r0, r5
 80080b2:	e78a      	b.n	8007fca <__ieee754_sqrt+0x66>
 80080b4:	4610      	mov	r0, r2
 80080b6:	e7f0      	b.n	800809a <__ieee754_sqrt+0x136>
 80080b8:	0049      	lsls	r1, r1, #1
 80080ba:	3201      	adds	r2, #1
 80080bc:	e7ef      	b.n	800809e <__ieee754_sqrt+0x13a>
 80080be:	4680      	mov	r8, r0
 80080c0:	e7bd      	b.n	800803e <__ieee754_sqrt+0xda>
 80080c2:	bf00      	nop
 80080c4:	7ff00000 	.word	0x7ff00000

080080c8 <atan>:
 80080c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	ec55 4b10 	vmov	r4, r5, d0
 80080d0:	4bc3      	ldr	r3, [pc, #780]	; (80083e0 <atan+0x318>)
 80080d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80080d6:	429e      	cmp	r6, r3
 80080d8:	46ab      	mov	fp, r5
 80080da:	dd18      	ble.n	800810e <atan+0x46>
 80080dc:	4bc1      	ldr	r3, [pc, #772]	; (80083e4 <atan+0x31c>)
 80080de:	429e      	cmp	r6, r3
 80080e0:	dc01      	bgt.n	80080e6 <atan+0x1e>
 80080e2:	d109      	bne.n	80080f8 <atan+0x30>
 80080e4:	b144      	cbz	r4, 80080f8 <atan+0x30>
 80080e6:	4622      	mov	r2, r4
 80080e8:	462b      	mov	r3, r5
 80080ea:	4620      	mov	r0, r4
 80080ec:	4629      	mov	r1, r5
 80080ee:	f7f8 f871 	bl	80001d4 <__adddf3>
 80080f2:	4604      	mov	r4, r0
 80080f4:	460d      	mov	r5, r1
 80080f6:	e006      	b.n	8008106 <atan+0x3e>
 80080f8:	f1bb 0f00 	cmp.w	fp, #0
 80080fc:	f300 8131 	bgt.w	8008362 <atan+0x29a>
 8008100:	a59b      	add	r5, pc, #620	; (adr r5, 8008370 <atan+0x2a8>)
 8008102:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008106:	ec45 4b10 	vmov	d0, r4, r5
 800810a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810e:	4bb6      	ldr	r3, [pc, #728]	; (80083e8 <atan+0x320>)
 8008110:	429e      	cmp	r6, r3
 8008112:	dc14      	bgt.n	800813e <atan+0x76>
 8008114:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008118:	429e      	cmp	r6, r3
 800811a:	dc0d      	bgt.n	8008138 <atan+0x70>
 800811c:	a396      	add	r3, pc, #600	; (adr r3, 8008378 <atan+0x2b0>)
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	ee10 0a10 	vmov	r0, s0
 8008126:	4629      	mov	r1, r5
 8008128:	f7f8 f854 	bl	80001d4 <__adddf3>
 800812c:	4baf      	ldr	r3, [pc, #700]	; (80083ec <atan+0x324>)
 800812e:	2200      	movs	r2, #0
 8008130:	f7f8 fc96 	bl	8000a60 <__aeabi_dcmpgt>
 8008134:	2800      	cmp	r0, #0
 8008136:	d1e6      	bne.n	8008106 <atan+0x3e>
 8008138:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800813c:	e02b      	b.n	8008196 <atan+0xce>
 800813e:	f000 f963 	bl	8008408 <fabs>
 8008142:	4bab      	ldr	r3, [pc, #684]	; (80083f0 <atan+0x328>)
 8008144:	429e      	cmp	r6, r3
 8008146:	ec55 4b10 	vmov	r4, r5, d0
 800814a:	f300 80bf 	bgt.w	80082cc <atan+0x204>
 800814e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008152:	429e      	cmp	r6, r3
 8008154:	f300 80a0 	bgt.w	8008298 <atan+0x1d0>
 8008158:	ee10 2a10 	vmov	r2, s0
 800815c:	ee10 0a10 	vmov	r0, s0
 8008160:	462b      	mov	r3, r5
 8008162:	4629      	mov	r1, r5
 8008164:	f7f8 f836 	bl	80001d4 <__adddf3>
 8008168:	4ba0      	ldr	r3, [pc, #640]	; (80083ec <atan+0x324>)
 800816a:	2200      	movs	r2, #0
 800816c:	f7f8 f830 	bl	80001d0 <__aeabi_dsub>
 8008170:	2200      	movs	r2, #0
 8008172:	4606      	mov	r6, r0
 8008174:	460f      	mov	r7, r1
 8008176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800817a:	4620      	mov	r0, r4
 800817c:	4629      	mov	r1, r5
 800817e:	f7f8 f829 	bl	80001d4 <__adddf3>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 fb03 	bl	8000794 <__aeabi_ddiv>
 800818e:	f04f 0a00 	mov.w	sl, #0
 8008192:	4604      	mov	r4, r0
 8008194:	460d      	mov	r5, r1
 8008196:	4622      	mov	r2, r4
 8008198:	462b      	mov	r3, r5
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	f7f8 f9cf 	bl	8000540 <__aeabi_dmul>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4680      	mov	r8, r0
 80081a8:	4689      	mov	r9, r1
 80081aa:	f7f8 f9c9 	bl	8000540 <__aeabi_dmul>
 80081ae:	a374      	add	r3, pc, #464	; (adr r3, 8008380 <atan+0x2b8>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	4606      	mov	r6, r0
 80081b6:	460f      	mov	r7, r1
 80081b8:	f7f8 f9c2 	bl	8000540 <__aeabi_dmul>
 80081bc:	a372      	add	r3, pc, #456	; (adr r3, 8008388 <atan+0x2c0>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f807 	bl	80001d4 <__adddf3>
 80081c6:	4632      	mov	r2, r6
 80081c8:	463b      	mov	r3, r7
 80081ca:	f7f8 f9b9 	bl	8000540 <__aeabi_dmul>
 80081ce:	a370      	add	r3, pc, #448	; (adr r3, 8008390 <atan+0x2c8>)
 80081d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d4:	f7f7 fffe 	bl	80001d4 <__adddf3>
 80081d8:	4632      	mov	r2, r6
 80081da:	463b      	mov	r3, r7
 80081dc:	f7f8 f9b0 	bl	8000540 <__aeabi_dmul>
 80081e0:	a36d      	add	r3, pc, #436	; (adr r3, 8008398 <atan+0x2d0>)
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	f7f7 fff5 	bl	80001d4 <__adddf3>
 80081ea:	4632      	mov	r2, r6
 80081ec:	463b      	mov	r3, r7
 80081ee:	f7f8 f9a7 	bl	8000540 <__aeabi_dmul>
 80081f2:	a36b      	add	r3, pc, #428	; (adr r3, 80083a0 <atan+0x2d8>)
 80081f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f8:	f7f7 ffec 	bl	80001d4 <__adddf3>
 80081fc:	4632      	mov	r2, r6
 80081fe:	463b      	mov	r3, r7
 8008200:	f7f8 f99e 	bl	8000540 <__aeabi_dmul>
 8008204:	a368      	add	r3, pc, #416	; (adr r3, 80083a8 <atan+0x2e0>)
 8008206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820a:	f7f7 ffe3 	bl	80001d4 <__adddf3>
 800820e:	4642      	mov	r2, r8
 8008210:	464b      	mov	r3, r9
 8008212:	f7f8 f995 	bl	8000540 <__aeabi_dmul>
 8008216:	a366      	add	r3, pc, #408	; (adr r3, 80083b0 <atan+0x2e8>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	4680      	mov	r8, r0
 800821e:	4689      	mov	r9, r1
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 f98c 	bl	8000540 <__aeabi_dmul>
 8008228:	a363      	add	r3, pc, #396	; (adr r3, 80083b8 <atan+0x2f0>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f7 ffcf 	bl	80001d0 <__aeabi_dsub>
 8008232:	4632      	mov	r2, r6
 8008234:	463b      	mov	r3, r7
 8008236:	f7f8 f983 	bl	8000540 <__aeabi_dmul>
 800823a:	a361      	add	r3, pc, #388	; (adr r3, 80083c0 <atan+0x2f8>)
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	f7f7 ffc6 	bl	80001d0 <__aeabi_dsub>
 8008244:	4632      	mov	r2, r6
 8008246:	463b      	mov	r3, r7
 8008248:	f7f8 f97a 	bl	8000540 <__aeabi_dmul>
 800824c:	a35e      	add	r3, pc, #376	; (adr r3, 80083c8 <atan+0x300>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f7 ffbd 	bl	80001d0 <__aeabi_dsub>
 8008256:	4632      	mov	r2, r6
 8008258:	463b      	mov	r3, r7
 800825a:	f7f8 f971 	bl	8000540 <__aeabi_dmul>
 800825e:	a35c      	add	r3, pc, #368	; (adr r3, 80083d0 <atan+0x308>)
 8008260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008264:	f7f7 ffb4 	bl	80001d0 <__aeabi_dsub>
 8008268:	4632      	mov	r2, r6
 800826a:	463b      	mov	r3, r7
 800826c:	f7f8 f968 	bl	8000540 <__aeabi_dmul>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f7 ffac 	bl	80001d4 <__adddf3>
 800827c:	4622      	mov	r2, r4
 800827e:	462b      	mov	r3, r5
 8008280:	f7f8 f95e 	bl	8000540 <__aeabi_dmul>
 8008284:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	d14b      	bne.n	8008326 <atan+0x25e>
 800828e:	4620      	mov	r0, r4
 8008290:	4629      	mov	r1, r5
 8008292:	f7f7 ff9d 	bl	80001d0 <__aeabi_dsub>
 8008296:	e72c      	b.n	80080f2 <atan+0x2a>
 8008298:	ee10 0a10 	vmov	r0, s0
 800829c:	4b53      	ldr	r3, [pc, #332]	; (80083ec <atan+0x324>)
 800829e:	2200      	movs	r2, #0
 80082a0:	4629      	mov	r1, r5
 80082a2:	f7f7 ff95 	bl	80001d0 <__aeabi_dsub>
 80082a6:	4b51      	ldr	r3, [pc, #324]	; (80083ec <atan+0x324>)
 80082a8:	4606      	mov	r6, r0
 80082aa:	460f      	mov	r7, r1
 80082ac:	2200      	movs	r2, #0
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7f7 ff8f 	bl	80001d4 <__adddf3>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4630      	mov	r0, r6
 80082bc:	4639      	mov	r1, r7
 80082be:	f7f8 fa69 	bl	8000794 <__aeabi_ddiv>
 80082c2:	f04f 0a01 	mov.w	sl, #1
 80082c6:	4604      	mov	r4, r0
 80082c8:	460d      	mov	r5, r1
 80082ca:	e764      	b.n	8008196 <atan+0xce>
 80082cc:	4b49      	ldr	r3, [pc, #292]	; (80083f4 <atan+0x32c>)
 80082ce:	429e      	cmp	r6, r3
 80082d0:	da1d      	bge.n	800830e <atan+0x246>
 80082d2:	ee10 0a10 	vmov	r0, s0
 80082d6:	4b48      	ldr	r3, [pc, #288]	; (80083f8 <atan+0x330>)
 80082d8:	2200      	movs	r2, #0
 80082da:	4629      	mov	r1, r5
 80082dc:	f7f7 ff78 	bl	80001d0 <__aeabi_dsub>
 80082e0:	4b45      	ldr	r3, [pc, #276]	; (80083f8 <atan+0x330>)
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	2200      	movs	r2, #0
 80082e8:	4620      	mov	r0, r4
 80082ea:	4629      	mov	r1, r5
 80082ec:	f7f8 f928 	bl	8000540 <__aeabi_dmul>
 80082f0:	4b3e      	ldr	r3, [pc, #248]	; (80083ec <atan+0x324>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	f7f7 ff6e 	bl	80001d4 <__adddf3>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f7f8 fa48 	bl	8000794 <__aeabi_ddiv>
 8008304:	f04f 0a02 	mov.w	sl, #2
 8008308:	4604      	mov	r4, r0
 800830a:	460d      	mov	r5, r1
 800830c:	e743      	b.n	8008196 <atan+0xce>
 800830e:	462b      	mov	r3, r5
 8008310:	ee10 2a10 	vmov	r2, s0
 8008314:	4939      	ldr	r1, [pc, #228]	; (80083fc <atan+0x334>)
 8008316:	2000      	movs	r0, #0
 8008318:	f7f8 fa3c 	bl	8000794 <__aeabi_ddiv>
 800831c:	f04f 0a03 	mov.w	sl, #3
 8008320:	4604      	mov	r4, r0
 8008322:	460d      	mov	r5, r1
 8008324:	e737      	b.n	8008196 <atan+0xce>
 8008326:	4b36      	ldr	r3, [pc, #216]	; (8008400 <atan+0x338>)
 8008328:	4e36      	ldr	r6, [pc, #216]	; (8008404 <atan+0x33c>)
 800832a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800832e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008332:	e9da 2300 	ldrd	r2, r3, [sl]
 8008336:	f7f7 ff4b 	bl	80001d0 <__aeabi_dsub>
 800833a:	4622      	mov	r2, r4
 800833c:	462b      	mov	r3, r5
 800833e:	f7f7 ff47 	bl	80001d0 <__aeabi_dsub>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	e9d6 0100 	ldrd	r0, r1, [r6]
 800834a:	f7f7 ff41 	bl	80001d0 <__aeabi_dsub>
 800834e:	f1bb 0f00 	cmp.w	fp, #0
 8008352:	4604      	mov	r4, r0
 8008354:	460d      	mov	r5, r1
 8008356:	f6bf aed6 	bge.w	8008106 <atan+0x3e>
 800835a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800835e:	461d      	mov	r5, r3
 8008360:	e6d1      	b.n	8008106 <atan+0x3e>
 8008362:	a51d      	add	r5, pc, #116	; (adr r5, 80083d8 <atan+0x310>)
 8008364:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008368:	e6cd      	b.n	8008106 <atan+0x3e>
 800836a:	bf00      	nop
 800836c:	f3af 8000 	nop.w
 8008370:	54442d18 	.word	0x54442d18
 8008374:	bff921fb 	.word	0xbff921fb
 8008378:	8800759c 	.word	0x8800759c
 800837c:	7e37e43c 	.word	0x7e37e43c
 8008380:	e322da11 	.word	0xe322da11
 8008384:	3f90ad3a 	.word	0x3f90ad3a
 8008388:	24760deb 	.word	0x24760deb
 800838c:	3fa97b4b 	.word	0x3fa97b4b
 8008390:	a0d03d51 	.word	0xa0d03d51
 8008394:	3fb10d66 	.word	0x3fb10d66
 8008398:	c54c206e 	.word	0xc54c206e
 800839c:	3fb745cd 	.word	0x3fb745cd
 80083a0:	920083ff 	.word	0x920083ff
 80083a4:	3fc24924 	.word	0x3fc24924
 80083a8:	5555550d 	.word	0x5555550d
 80083ac:	3fd55555 	.word	0x3fd55555
 80083b0:	2c6a6c2f 	.word	0x2c6a6c2f
 80083b4:	bfa2b444 	.word	0xbfa2b444
 80083b8:	52defd9a 	.word	0x52defd9a
 80083bc:	3fadde2d 	.word	0x3fadde2d
 80083c0:	af749a6d 	.word	0xaf749a6d
 80083c4:	3fb3b0f2 	.word	0x3fb3b0f2
 80083c8:	fe231671 	.word	0xfe231671
 80083cc:	3fbc71c6 	.word	0x3fbc71c6
 80083d0:	9998ebc4 	.word	0x9998ebc4
 80083d4:	3fc99999 	.word	0x3fc99999
 80083d8:	54442d18 	.word	0x54442d18
 80083dc:	3ff921fb 	.word	0x3ff921fb
 80083e0:	440fffff 	.word	0x440fffff
 80083e4:	7ff00000 	.word	0x7ff00000
 80083e8:	3fdbffff 	.word	0x3fdbffff
 80083ec:	3ff00000 	.word	0x3ff00000
 80083f0:	3ff2ffff 	.word	0x3ff2ffff
 80083f4:	40038000 	.word	0x40038000
 80083f8:	3ff80000 	.word	0x3ff80000
 80083fc:	bff00000 	.word	0xbff00000
 8008400:	08008530 	.word	0x08008530
 8008404:	08008510 	.word	0x08008510

08008408 <fabs>:
 8008408:	ec51 0b10 	vmov	r0, r1, d0
 800840c:	ee10 2a10 	vmov	r2, s0
 8008410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008414:	ec43 2b10 	vmov	d0, r2, r3
 8008418:	4770      	bx	lr
 800841a:	0000      	movs	r0, r0
 800841c:	0000      	movs	r0, r0
	...

08008420 <nan>:
 8008420:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008428 <nan+0x8>
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	00000000 	.word	0x00000000
 800842c:	7ff80000 	.word	0x7ff80000

08008430 <_init>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	bf00      	nop
 8008434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008436:	bc08      	pop	{r3}
 8008438:	469e      	mov	lr, r3
 800843a:	4770      	bx	lr

0800843c <_fini>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	bf00      	nop
 8008440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008442:	bc08      	pop	{r3}
 8008444:	469e      	mov	lr, r3
 8008446:	4770      	bx	lr
