
imu_adc_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ea8  0800c3a8  0800c3a8  0001c3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d250  0800d250  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d250  0800d250  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d250  0800d250  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d250  0800d250  0001d250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d254  0800d254  0001d254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800d258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          00000d9c  200000a8  200000a8  000200a8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000e44  20000e44  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bf34  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033f2  00000000  00000000  0003c008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  0003f400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001760  00000000  00000000  00040ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004beb  00000000  00000000  00042448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc60  00000000  00000000  00047033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c348f  00000000  00000000  00063c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127122  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000074d4  00000000  00000000  00127174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c38c 	.word	0x0800c38c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800c38c 	.word	0x0800c38c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <calculate_gestures>:
extern float resistance_max[4];

//====================================================================================================
// Functions

void calculate_gestures() {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	e00d      	b.n	8000ca0 <calculate_gestures+0x28>
        finger_angles[i] = calculate_finger_angle(i);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f939 	bl	8000efc <calculate_finger_angle>
 8000c8a:	eef0 7a40 	vmov.f32	s15, s0
 8000c8e:	4a7e      	ldr	r2, [pc, #504]	; (8000e88 <calculate_gestures+0x210>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b03      	cmp	r3, #3
 8000ca4:	ddee      	ble.n	8000c84 <calculate_gestures+0xc>
    }

    int gesture_key = detect_gestures(finger_angles);
 8000ca6:	4878      	ldr	r0, [pc, #480]	; (8000e88 <calculate_gestures+0x210>)
 8000ca8:	f000 f8fa 	bl	8000ea0 <detect_gestures>
 8000cac:	6038      	str	r0, [r7, #0]
    switch (gesture_key) {
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b08      	cmp	r3, #8
 8000cb2:	d04d      	beq.n	8000d50 <calculate_gestures+0xd8>
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	f300 80b2 	bgt.w	8000e20 <calculate_gestures+0x1a8>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d004      	beq.n	8000ccc <calculate_gestures+0x54>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2b06      	cmp	r3, #6
 8000cc6:	f000 8087 	beq.w	8000dd8 <calculate_gestures+0x160>
 8000cca:	e0a9      	b.n	8000e20 <calculate_gestures+0x1a8>
        case 0b0001: // yaw right
            gimbal_yaw = 0.5 + lerp(0, 0.5, finger_angles[FINGER_INDEX_IDX] / 90);
 8000ccc:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <calculate_gestures+0x210>)
 8000cce:	edd3 7a03 	vldr	s15, [r3, #12]
 8000cd2:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8000e8c <calculate_gestures+0x214>
 8000cd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cda:	eeb0 1a47 	vmov.f32	s2, s14
 8000cde:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000ce2:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8000e90 <calculate_gestures+0x218>
 8000ce6:	f005 f943 	bl	8005f70 <lerp>
 8000cea:	ee10 3a10 	vmov	r3, s0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fc22 	bl	8000538 <__aeabi_f2d>
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	4b66      	ldr	r3, [pc, #408]	; (8000e94 <calculate_gestures+0x21c>)
 8000cfa:	f7ff fabf 	bl	800027c <__adddf3>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff ff67 	bl	8000bd8 <__aeabi_d2f>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a62      	ldr	r2, [pc, #392]	; (8000e98 <calculate_gestures+0x220>)
 8000d0e:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000d10:	4b5d      	ldr	r3, [pc, #372]	; (8000e88 <calculate_gestures+0x210>)
 8000d12:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d16:	4b5c      	ldr	r3, [pc, #368]	; (8000e88 <calculate_gestures+0x210>)
 8000d18:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d1c:	eef0 0a47 	vmov.f32	s1, s14
 8000d20:	eeb0 0a67 	vmov.f32	s0, s15
 8000d24:	f005 f8ec 	bl	8005f00 <max>
 8000d28:	eeb0 7a40 	vmov.f32	s14, s0
 8000d2c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8000e8c <calculate_gestures+0x214>
 8000d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d34:	eeb0 1a67 	vmov.f32	s2, s15
 8000d38:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d3c:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8000e90 <calculate_gestures+0x218>
 8000d40:	f005 f916 	bl	8005f70 <lerp>
 8000d44:	eef0 7a40 	vmov.f32	s15, s0
 8000d48:	4b54      	ldr	r3, [pc, #336]	; (8000e9c <calculate_gestures+0x224>)
 8000d4a:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000d4e:	e070      	b.n	8000e32 <calculate_gestures+0x1ba>
        case 0b1000: // yaw left
            gimbal_yaw = 0.5 - lerp(0, 0.5, finger_angles[FINGER_PINKY_IDX] / 90);
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <calculate_gestures+0x210>)
 8000d52:	edd3 7a00 	vldr	s15, [r3]
 8000d56:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000e8c <calculate_gestures+0x214>
 8000d5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d5e:	eeb0 1a47 	vmov.f32	s2, s14
 8000d62:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000d66:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000e90 <calculate_gestures+0x218>
 8000d6a:	f005 f901 	bl	8005f70 <lerp>
 8000d6e:	ee10 3a10 	vmov	r3, s0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fbe0 	bl	8000538 <__aeabi_f2d>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	f04f 0000 	mov.w	r0, #0
 8000d80:	4944      	ldr	r1, [pc, #272]	; (8000e94 <calculate_gestures+0x21c>)
 8000d82:	f7ff fa79 	bl	8000278 <__aeabi_dsub>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f7ff ff23 	bl	8000bd8 <__aeabi_d2f>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a40      	ldr	r2, [pc, #256]	; (8000e98 <calculate_gestures+0x220>)
 8000d96:	6013      	str	r3, [r2, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000d98:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <calculate_gestures+0x210>)
 8000d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <calculate_gestures+0x210>)
 8000da0:	ed93 7a01 	vldr	s14, [r3, #4]
 8000da4:	eef0 0a47 	vmov.f32	s1, s14
 8000da8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dac:	f005 f8a8 	bl	8005f00 <max>
 8000db0:	eeb0 7a40 	vmov.f32	s14, s0
 8000db4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000e8c <calculate_gestures+0x214>
 8000db8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dbc:	eeb0 1a67 	vmov.f32	s2, s15
 8000dc0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000dc4:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8000e90 <calculate_gestures+0x218>
 8000dc8:	f005 f8d2 	bl	8005f70 <lerp>
 8000dcc:	eef0 7a40 	vmov.f32	s15, s0
 8000dd0:	4b32      	ldr	r3, [pc, #200]	; (8000e9c <calculate_gestures+0x224>)
 8000dd2:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000dd6:	e02c      	b.n	8000e32 <calculate_gestures+0x1ba>
        case 0b0110: // throttle
            gimbal_yaw = 0;
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <calculate_gestures+0x220>)
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <calculate_gestures+0x210>)
 8000de2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000de6:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <calculate_gestures+0x210>)
 8000de8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dec:	eef0 0a47 	vmov.f32	s1, s14
 8000df0:	eeb0 0a67 	vmov.f32	s0, s15
 8000df4:	f005 f884 	bl	8005f00 <max>
 8000df8:	eeb0 7a40 	vmov.f32	s14, s0
 8000dfc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000e8c <calculate_gestures+0x214>
 8000e00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e04:	eeb0 1a67 	vmov.f32	s2, s15
 8000e08:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e0c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8000e90 <calculate_gestures+0x218>
 8000e10:	f005 f8ae 	bl	8005f70 <lerp>
 8000e14:	eef0 7a40 	vmov.f32	s15, s0
 8000e18:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <calculate_gestures+0x224>)
 8000e1a:	edc3 7a00 	vstr	s15, [r3]
            break;
 8000e1e:	e008      	b.n	8000e32 <calculate_gestures+0x1ba>
        default: // no-op
        	gimbal_yaw = 0.5;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <calculate_gestures+0x220>)
 8000e22:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000e26:	601a      	str	r2, [r3, #0]
        	gimbal_throttle = 0;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <calculate_gestures+0x224>)
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
            break;
 8000e30:	bf00      	nop
    }
    if (gesture_key >> 2 && gesture_key >> 1) {
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	109b      	asrs	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d022      	beq.n	8000e80 <calculate_gestures+0x208>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	105b      	asrs	r3, r3, #1
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d01e      	beq.n	8000e80 <calculate_gestures+0x208>
    	gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <calculate_gestures+0x210>)
 8000e44:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <calculate_gestures+0x210>)
 8000e4a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e4e:	eef0 0a47 	vmov.f32	s1, s14
 8000e52:	eeb0 0a67 	vmov.f32	s0, s15
 8000e56:	f005 f853 	bl	8005f00 <max>
 8000e5a:	eeb0 7a40 	vmov.f32	s14, s0
 8000e5e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000e8c <calculate_gestures+0x214>
 8000e62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e66:	eeb0 1a67 	vmov.f32	s2, s15
 8000e6a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e6e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8000e90 <calculate_gestures+0x218>
 8000e72:	f005 f87d 	bl	8005f70 <lerp>
 8000e76:	eef0 7a40 	vmov.f32	s15, s0
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <calculate_gestures+0x224>)
 8000e7c:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200000c4 	.word	0x200000c4
 8000e8c:	42b40000 	.word	0x42b40000
 8000e90:	00000000 	.word	0x00000000
 8000e94:	3fe00000 	.word	0x3fe00000
 8000e98:	20000b4c 	.word	0x20000b4c
 8000e9c:	20000b50 	.word	0x20000b50

08000ea0 <detect_gestures>:

int detect_gestures(float* finger_angles) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    short gesture_key = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	e019      	b.n	8000ee6 <detect_gestures+0x46>
        if (finger_angles[i] > ANGLE_THRESH) {
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	dd09      	ble.n	8000ee0 <detect_gestures+0x40>
            gesture_key |= 1 << (3 - i);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	f1c3 0303 	rsb	r3, r3, #3
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	89fb      	ldrh	r3, [r7, #14]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	dde2      	ble.n	8000eb2 <detect_gestures+0x12>
        }
    }
    return gesture_key;
 8000eec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <calculate_finger_angle>:

/*
 * Calculate finger angles
 * ADC_flex read by "analogRead(flexPin)" // analogRead later defined in flex sensor interface
 */
float calculate_finger_angle(int finger_num) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    float resistance_flex = calculate_finger_resistance(finger_num);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f833 	bl	8000f70 <calculate_finger_resistance>
 8000f0a:	ed87 0a03 	vstr	s0, [r7, #12]
    float angle = 90 - map(resistance_flex, resistance_min[finger_num], resistance_max[finger_num], 0, 90);
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <calculate_finger_angle+0x64>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <calculate_finger_angle+0x68>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	ed93 7a00 	vldr	s14, [r3]
 8000f26:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8000f68 <calculate_finger_angle+0x6c>
 8000f2a:	eddf 1a10 	vldr	s3, [pc, #64]	; 8000f6c <calculate_finger_angle+0x70>
 8000f2e:	eeb0 1a47 	vmov.f32	s2, s14
 8000f32:	eef0 0a67 	vmov.f32	s1, s15
 8000f36:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f3a:	f005 f837 	bl	8005fac <map>
 8000f3e:	eef0 7a40 	vmov.f32	s15, s0
 8000f42:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000f68 <calculate_finger_angle+0x6c>
 8000f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f4a:	edc7 7a02 	vstr	s15, [r7, #8]
    return angle;
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	ee07 3a90 	vmov	s15, r3
}
 8000f54:	eeb0 0a67 	vmov.f32	s0, s15
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000b88 	.word	0x20000b88
 8000f64:	20000b98 	.word	0x20000b98
 8000f68:	42b40000 	.word	0x42b40000
 8000f6c:	00000000 	.word	0x00000000

08000f70 <calculate_finger_resistance>:

float calculate_finger_resistance(int finger_num) {
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	float voltage_flex = ADC_vals[finger_num] * VCC / ADC_MAX_VAL;
 8000f78:	4a29      	ldr	r2, [pc, #164]	; (8001020 <calculate_finger_resistance+0xb0>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fac7 	bl	8000514 <__aeabi_i2d>
 8000f86:	a324      	add	r3, pc, #144	; (adr r3, 8001018 <calculate_finger_resistance+0xa8>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fb2c 	bl	80005e8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4614      	mov	r4, r2
 8000f96:	461d      	mov	r5, r3
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <calculate_finger_resistance+0xb4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fab9 	bl	8000514 <__aeabi_i2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	4629      	mov	r1, r5
 8000faa:	f7ff fc47 	bl	800083c <__aeabi_ddiv>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f7ff fe0f 	bl	8000bd8 <__aeabi_d2f>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	60fb      	str	r3, [r7, #12]
	float resistance_flex = (RESISTANCE_PULLDOWN * voltage_flex) / (VCC - voltage_flex);
 8000fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001028 <calculate_finger_resistance+0xb8>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	ee17 0a90 	vmov	r0, s15
 8000fce:	f7ff fab3 	bl	8000538 <__aeabi_f2d>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	460d      	mov	r5, r1
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff faae 	bl	8000538 <__aeabi_f2d>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	a10d      	add	r1, pc, #52	; (adr r1, 8001018 <calculate_finger_resistance+0xa8>)
 8000fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000fe6:	f7ff f947 	bl	8000278 <__aeabi_dsub>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4620      	mov	r0, r4
 8000ff0:	4629      	mov	r1, r5
 8000ff2:	f7ff fc23 	bl	800083c <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fdeb 	bl	8000bd8 <__aeabi_d2f>
 8001002:	4603      	mov	r3, r0
 8001004:	60bb      	str	r3, [r7, #8]
	return resistance_flex;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	ee07 3a90 	vmov	s15, r3
}
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bdb0      	pop	{r4, r5, r7, pc}
 8001016:	bf00      	nop
 8001018:	66666666 	.word	0x66666666
 800101c:	400a6666 	.word	0x400a6666
 8001020:	20000b78 	.word	0x20000b78
 8001024:	20000000 	.word	0x20000000
 8001028:	469c4000 	.word	0x469c4000

0800102c <calibrate_init>:

void calibrate_init() {
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e00f      	b.n	8001058 <calibrate_init+0x2c>
		resistance_min[i] = RESISTANCE_FLEXED;
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <calibrate_init+0x40>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <calibrate_init+0x44>)
 8001042:	601a      	str	r2, [r3, #0]
		resistance_max[i] = 0;
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <calibrate_init+0x48>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	f04f 0200 	mov.w	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3301      	adds	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b03      	cmp	r3, #3
 800105c:	ddec      	ble.n	8001038 <calibrate_init+0xc>
	}
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000b88 	.word	0x20000b88
 8001070:	46ea6000 	.word	0x46ea6000
 8001074:	20000b98 	.word	0x20000b98

08001078 <calculate_orientation>:

/*
 * Estimate orientation based on previous quaternion values. 
 * Runs Madgwick, Madgwick output quaternion to relative Euler angles, and remaps angles to gimbal potentiometer percentages.
 */
void calculate_orientation(float delta_time) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]
	float sample_freq;
	#ifdef sampleFreq
	sample_freq = sampleFreq;
	#else
	sample_freq = convert_period_to_freq(delta_time);
 8001082:	ed97 0a01 	vldr	s0, [r7, #4]
 8001086:	f004 ffd7 	bl	8006038 <convert_period_to_freq>
 800108a:	ed87 0a03 	vstr	s0, [r7, #12]
	#endif /* sampleFreq */

	MadgwickAHRSupdate(gyro.gyro.x, gyro.gyro.y, gyro.gyro.z, accel.acceleration.x, accel.acceleration.y, accel.acceleration.z, mag.magnetic.x, mag.magnetic.y, mag.magnetic.z, sample_freq); // gyro, accel, mag are sensors_type_t
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <calculate_orientation+0x7c>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <calculate_orientation+0x7c>)
 8001096:	ed93 7a01 	vldr	s14, [r3, #4]
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <calculate_orientation+0x7c>)
 800109c:	edd3 6a02 	vldr	s13, [r3, #8]
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <calculate_orientation+0x80>)
 80010a2:	ed93 6a00 	vldr	s12, [r3]
 80010a6:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <calculate_orientation+0x80>)
 80010a8:	edd3 5a01 	vldr	s11, [r3, #4]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <calculate_orientation+0x80>)
 80010ae:	ed93 5a02 	vldr	s10, [r3, #8]
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <calculate_orientation+0x84>)
 80010b4:	ed93 3a00 	vldr	s6, [r3]
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <calculate_orientation+0x84>)
 80010ba:	edd3 3a01 	vldr	s7, [r3, #4]
 80010be:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <calculate_orientation+0x84>)
 80010c0:	ed93 4a02 	vldr	s8, [r3, #8]
 80010c4:	edd7 4a03 	vldr	s9, [r7, #12]
 80010c8:	eef0 2a45 	vmov.f32	s5, s10
 80010cc:	eeb0 2a65 	vmov.f32	s4, s11
 80010d0:	eef0 1a46 	vmov.f32	s3, s12
 80010d4:	eeb0 1a66 	vmov.f32	s2, s13
 80010d8:	eef0 0a47 	vmov.f32	s1, s14
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	f000 f970 	bl	80013c4 <MadgwickAHRSupdate>
	convert_quaternion_to_euler();
 80010e4:	f000 f8a2 	bl	800122c <convert_quaternion_to_euler>
	remap_angles_to_gimbals();
 80010e8:	f000 f80a 	bl	8001100 <remap_angles_to_gimbals>
}
 80010ec:	bf00      	nop
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000b54 	.word	0x20000b54
 80010f8:	20000b60 	.word	0x20000b60
 80010fc:	20000b6c 	.word	0x20000b6c

08001100 <remap_angles_to_gimbals>:

/*
 * Remapping only consists of pitch and roll
 */
void remap_angles_to_gimbals() {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	remapped_angle_x = (angle_x + atan2_offset) / (2 * M_PI);
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <remap_angles_to_gimbals+0xd0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa15 	bl	8000538 <__aeabi_f2d>
 800110e:	a32a      	add	r3, pc, #168	; (adr r3, 80011b8 <remap_angles_to_gimbals+0xb8>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff f8b2 	bl	800027c <__adddf3>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	a327      	add	r3, pc, #156	; (adr r3, 80011c0 <remap_angles_to_gimbals+0xc0>)
 8001122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001126:	f7ff fb89 	bl	800083c <__aeabi_ddiv>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd51 	bl	8000bd8 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <remap_angles_to_gimbals+0xd4>)
 800113a:	6013      	str	r3, [r2, #0]
	remapped_angle_y = (angle_y + asin_offset) / (M_PI);
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <remap_angles_to_gimbals+0xd8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9f9 	bl	8000538 <__aeabi_f2d>
 8001146:	a320      	add	r3, pc, #128	; (adr r3, 80011c8 <remap_angles_to_gimbals+0xc8>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff f896 	bl	800027c <__adddf3>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	a317      	add	r3, pc, #92	; (adr r3, 80011b8 <remap_angles_to_gimbals+0xb8>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fb6d 	bl	800083c <__aeabi_ddiv>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fd35 	bl	8000bd8 <__aeabi_d2f>
 800116e:	4603      	mov	r3, r0
 8001170:	4a1a      	ldr	r2, [pc, #104]	; (80011dc <remap_angles_to_gimbals+0xdc>)
 8001172:	6013      	str	r3, [r2, #0]
	gimbal_roll = lerp(0, 1, remapped_angle_x);
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <remap_angles_to_gimbals+0xd4>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	eeb0 1a67 	vmov.f32	s2, s15
 800117e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001182:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80011e0 <remap_angles_to_gimbals+0xe0>
 8001186:	f004 fef3 	bl	8005f70 <lerp>
 800118a:	eef0 7a40 	vmov.f32	s15, s0
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <remap_angles_to_gimbals+0xe4>)
 8001190:	edc3 7a00 	vstr	s15, [r3]
	gimbal_pitch = lerp(0, 1, remapped_angle_y);
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <remap_angles_to_gimbals+0xdc>)
 8001196:	edd3 7a00 	vldr	s15, [r3]
 800119a:	eeb0 1a67 	vmov.f32	s2, s15
 800119e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80011a2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80011e0 <remap_angles_to_gimbals+0xe0>
 80011a6:	f004 fee3 	bl	8005f70 <lerp>
 80011aa:	eef0 7a40 	vmov.f32	s15, s0
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <remap_angles_to_gimbals+0xe8>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	54442d18 	.word	0x54442d18
 80011bc:	400921fb 	.word	0x400921fb
 80011c0:	54442d18 	.word	0x54442d18
 80011c4:	401921fb 	.word	0x401921fb
 80011c8:	54442d18 	.word	0x54442d18
 80011cc:	3ff921fb 	.word	0x3ff921fb
 80011d0:	20000b3c 	.word	0x20000b3c
 80011d4:	200000d4 	.word	0x200000d4
 80011d8:	20000b40 	.word	0x20000b40
 80011dc:	200000d8 	.word	0x200000d8
 80011e0:	00000000 	.word	0x00000000
 80011e4:	20000b44 	.word	0x20000b44
 80011e8:	20000b48 	.word	0x20000b48

080011ec <reset_aux_frame>:

/*
 * Reset aux frame (identity)
 */
void reset_aux_frame() {
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	q0 = 1.0f;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <reset_aux_frame+0x30>)
 80011f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011f6:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <reset_aux_frame+0x34>)
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <reset_aux_frame+0x38>)
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <reset_aux_frame+0x3c>)
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	2000000c 	.word	0x2000000c
 8001220:	20000b30 	.word	0x20000b30
 8001224:	20000b34 	.word	0x20000b34
 8001228:	20000b38 	.word	0x20000b38

0800122c <convert_quaternion_to_euler>:

/*
 * Convert quaternion to euler angles
 */
void convert_quaternion_to_euler() {
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
	// angle_x is roll; angle_y is pitch; angle_z is yaw
	double q2sqr = q2 * q2;
 8001232:	4b5c      	ldr	r3, [pc, #368]	; (80013a4 <convert_quaternion_to_euler+0x178>)
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	4b5a      	ldr	r3, [pc, #360]	; (80013a4 <convert_quaternion_to_euler+0x178>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001242:	ee17 0a90 	vmov	r0, s15
 8001246:	f7ff f977 	bl	8000538 <__aeabi_f2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// double t0 = -2.0 * (q2sqr + q3 * q3) + 1.0;
	// double t1 = +2.0 * (q1 * q2 + q0 * q3);
	double t2 = -2.0 * (q1 * q3 - q0 * q2);
 8001252:	4b55      	ldr	r3, [pc, #340]	; (80013a8 <convert_quaternion_to_euler+0x17c>)
 8001254:	ed93 7a00 	vldr	s14, [r3]
 8001258:	4b54      	ldr	r3, [pc, #336]	; (80013ac <convert_quaternion_to_euler+0x180>)
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001262:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <convert_quaternion_to_euler+0x184>)
 8001264:	edd3 6a00 	vldr	s13, [r3]
 8001268:	4b4e      	ldr	r3, [pc, #312]	; (80013a4 <convert_quaternion_to_euler+0x178>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001276:	ee17 0a90 	vmov	r0, s15
 800127a:	f7ff f95d 	bl	8000538 <__aeabi_f2d>
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001286:	f7ff f9af 	bl	80005e8 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double t3 = +2.0 * (q2 * q3 + q0 * q1);
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <convert_quaternion_to_euler+0x178>)
 8001294:	ed93 7a00 	vldr	s14, [r3]
 8001298:	4b44      	ldr	r3, [pc, #272]	; (80013ac <convert_quaternion_to_euler+0x180>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a2:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <convert_quaternion_to_euler+0x184>)
 80012a4:	edd3 6a00 	vldr	s13, [r3]
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <convert_quaternion_to_euler+0x17c>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b6:	ee17 0a90 	vmov	r0, s15
 80012ba:	f7ff f93d 	bl	8000538 <__aeabi_f2d>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	f7fe ffdb 	bl	800027c <__adddf3>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double t4 = -2.0 * (q1 * q1 + q2sqr) + 1.0;
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <convert_quaternion_to_euler+0x17c>)
 80012d0:	ed93 7a00 	vldr	s14, [r3]
 80012d4:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <convert_quaternion_to_euler+0x17c>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	ee17 0a90 	vmov	r0, s15
 80012e2:	f7ff f929 	bl	8000538 <__aeabi_f2d>
 80012e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012ea:	f7fe ffc7 	bl	800027c <__adddf3>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012fe:	f7ff f973 	bl	80005e8 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <convert_quaternion_to_euler+0x188>)
 8001310:	f7fe ffb4 	bl	800027c <__adddf3>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	e9c7 2300 	strd	r2, r3, [r7]

	t2 = t2 > 1.0 ? 1.0 : t2;
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <convert_quaternion_to_euler+0x188>)
 8001322:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001326:	f7ff fbef 	bl	8000b08 <__aeabi_dcmpgt>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <convert_quaternion_to_euler+0x10c>
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <convert_quaternion_to_euler+0x188>)
 8001336:	e001      	b.n	800133c <convert_quaternion_to_euler+0x110>
 8001338:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800133c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t2 = t2 < -1.0 ? -1.0 : t2;
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <convert_quaternion_to_euler+0x18c>)
 8001346:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134a:	f7ff fbbf 	bl	8000acc <__aeabi_dcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <convert_quaternion_to_euler+0x130>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <convert_quaternion_to_euler+0x18c>)
 800135a:	e001      	b.n	8001360 <convert_quaternion_to_euler+0x134>
 800135c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001360:	e9c7 2304 	strd	r2, r3, [r7, #16]

	angle_y = asin(t2);
 8001364:	ed97 0b04 	vldr	d0, [r7, #16]
 8001368:	f009 fa7a 	bl	800a860 <asin>
 800136c:	ec53 2b10 	vmov	r2, r3, d0
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fc30 	bl	8000bd8 <__aeabi_d2f>
 8001378:	4603      	mov	r3, r0
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <convert_quaternion_to_euler+0x190>)
 800137c:	6013      	str	r3, [r2, #0]
	angle_x = atan2(t3, t4);
 800137e:	ed97 1b00 	vldr	d1, [r7]
 8001382:	ed97 0b02 	vldr	d0, [r7, #8]
 8001386:	f009 fa9f 	bl	800a8c8 <atan2>
 800138a:	ec53 2b10 	vmov	r2, r3, d0
 800138e:	4610      	mov	r0, r2
 8001390:	4619      	mov	r1, r3
 8001392:	f7ff fc21 	bl	8000bd8 <__aeabi_d2f>
 8001396:	4603      	mov	r3, r0
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <convert_quaternion_to_euler+0x194>)
 800139a:	6013      	str	r3, [r2, #0]
	// angle_z = atan2(t1, t0);
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000b34 	.word	0x20000b34
 80013a8:	20000b30 	.word	0x20000b30
 80013ac:	20000b38 	.word	0x20000b38
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	3ff00000 	.word	0x3ff00000
 80013b8:	bff00000 	.word	0xbff00000
 80013bc:	20000b40 	.word	0x20000b40
 80013c0:	20000b3c 	.word	0x20000b3c

080013c4 <MadgwickAHRSupdate>:


//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float sample_freq) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0ae      	sub	sp, #184	; 0xb8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80013ce:	edc7 0a08 	vstr	s1, [r7, #32]
 80013d2:	ed87 1a07 	vstr	s2, [r7, #28]
 80013d6:	edc7 1a06 	vstr	s3, [r7, #24]
 80013da:	ed87 2a05 	vstr	s4, [r7, #20]
 80013de:	edc7 2a04 	vstr	s5, [r7, #16]
 80013e2:	ed87 3a03 	vstr	s6, [r7, #12]
 80013e6:	edc7 3a02 	vstr	s7, [r7, #8]
 80013ea:	ed87 4a01 	vstr	s8, [r7, #4]
 80013ee:	edc7 4a00 	vstr	s9, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80013f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	d11f      	bne.n	8001440 <MadgwickAHRSupdate+0x7c>
 8001400:	edd7 7a02 	vldr	s15, [r7, #8]
 8001404:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140c:	d118      	bne.n	8001440 <MadgwickAHRSupdate+0x7c>
 800140e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001412:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d111      	bne.n	8001440 <MadgwickAHRSupdate+0x7c>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az, sample_freq);
 800141c:	ed97 3a00 	vldr	s6, [r7]
 8001420:	edd7 2a04 	vldr	s5, [r7, #16]
 8001424:	ed97 2a05 	vldr	s4, [r7, #20]
 8001428:	edd7 1a06 	vldr	s3, [r7, #24]
 800142c:	ed97 1a07 	vldr	s2, [r7, #28]
 8001430:	edd7 0a08 	vldr	s1, [r7, #32]
 8001434:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001438:	f000 feec 	bl	8002214 <MadgwickAHRSupdateIMU>
		return;
 800143c:	f000 bedc 	b.w	80021f8 <MadgwickAHRSupdate+0xe34>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001440:	4be4      	ldr	r3, [pc, #912]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	eeb1 7a67 	vneg.f32	s14, s15
 800144a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001452:	4be1      	ldr	r3, [pc, #900]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 8001454:	edd3 6a00 	vldr	s13, [r3]
 8001458:	edd7 7a08 	vldr	s15, [r7, #32]
 800145c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001464:	4bdd      	ldr	r3, [pc, #884]	; (80017dc <MadgwickAHRSupdate+0x418>)
 8001466:	edd3 6a00 	vldr	s13, [r3]
 800146a:	edd7 7a07 	vldr	s15, [r7, #28]
 800146e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001476:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800147a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800147e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001482:	4bd7      	ldr	r3, [pc, #860]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800148c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001490:	4bd1      	ldr	r3, [pc, #836]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 8001492:	edd3 6a00 	vldr	s13, [r3]
 8001496:	edd7 7a07 	vldr	s15, [r7, #28]
 800149a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014a2:	4bce      	ldr	r3, [pc, #824]	; (80017dc <MadgwickAHRSupdate+0x418>)
 80014a4:	edd3 6a00 	vldr	s13, [r3]
 80014a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80014ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80014c0:	4bc7      	ldr	r3, [pc, #796]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80014ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ce:	4bc1      	ldr	r3, [pc, #772]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 80014d0:	edd3 6a00 	vldr	s13, [r3]
 80014d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80014d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014e0:	4bbe      	ldr	r3, [pc, #760]	; (80017dc <MadgwickAHRSupdate+0x418>)
 80014e2:	edd3 6a00 	vldr	s13, [r3]
 80014e6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fa:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80014fe:	4bb8      	ldr	r3, [pc, #736]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 8001500:	ed93 7a00 	vldr	s14, [r3]
 8001504:	edd7 7a07 	vldr	s15, [r7, #28]
 8001508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150c:	4bb1      	ldr	r3, [pc, #708]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 800150e:	edd3 6a00 	vldr	s13, [r3]
 8001512:	edd7 7a08 	vldr	s15, [r7, #32]
 8001516:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800151a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800151e:	4bae      	ldr	r3, [pc, #696]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 8001520:	edd3 6a00 	vldr	s13, [r3]
 8001524:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800152c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001530:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001534:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001538:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800153c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001540:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001548:	d10e      	bne.n	8001568 <MadgwickAHRSupdate+0x1a4>
 800154a:	edd7 7a05 	vldr	s15, [r7, #20]
 800154e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001556:	d107      	bne.n	8001568 <MadgwickAHRSupdate+0x1a4>
 8001558:	edd7 7a04 	vldr	s15, [r7, #16]
 800155c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001564:	f000 85ac 	beq.w	80020c0 <MadgwickAHRSupdate+0xcfc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001568:	edd7 7a06 	vldr	s15, [r7, #24]
 800156c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
 800157c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001580:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001588:	eeb0 0a67 	vmov.f32	s0, s15
 800158c:	f001 f976 	bl	800287c <invSqrt>
 8001590:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 8001594:	ed97 7a06 	vldr	s14, [r7, #24]
 8001598:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800159c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a0:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80015a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80015a8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80015ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b0:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 80015b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80015d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	f001 f948 	bl	800287c <invSqrt>
 80015ec:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 80015f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80015f4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80015f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fc:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001600:	ed97 7a02 	vldr	s14, [r7, #8]
 8001604:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160c:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001610:	ed97 7a01 	vldr	s14, [r7, #4]
 8001614:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001620:	4b6f      	ldr	r3, [pc, #444]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800162a:	ed97 7a03 	vldr	s14, [r7, #12]
 800162e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001632:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 8001636:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001640:	ed97 7a02 	vldr	s14, [r7, #8]
 8001644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001648:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 800164c:	4b64      	ldr	r3, [pc, #400]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001656:	ed97 7a01 	vldr	s14, [r7, #4]
 800165a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001662:	4b5c      	ldr	r3, [pc, #368]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800166c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001674:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 8001678:	4b59      	ldr	r3, [pc, #356]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 800167a:	edd3 7a00 	vldr	s15, [r3]
 800167e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001682:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 8001686:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001690:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 8001694:	4b50      	ldr	r3, [pc, #320]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800169e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80016a2:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <MadgwickAHRSupdate+0x418>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016ac:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80016b0:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016ba:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80016c8:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <MadgwickAHRSupdate+0x418>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 80016e0:	4b3f      	ldr	r3, [pc, #252]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f0:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 80016f4:	4b3a      	ldr	r3, [pc, #232]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 80016f6:	ed93 7a00 	vldr	s14, [r3]
 80016fa:	4b36      	ldr	r3, [pc, #216]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 800170a:	ed93 7a00 	vldr	s14, [r3]
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001718:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <MadgwickAHRSupdate+0x41c>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <MadgwickAHRSupdate+0x418>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172c:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001740:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 8001746:	ed93 7a00 	vldr	s14, [r3]
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MadgwickAHRSupdate+0x410>)
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <MadgwickAHRSupdate+0x418>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 800176e:	ed93 7a00 	vldr	s14, [r3]
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 8001782:	ed93 7a00 	vldr	s14, [r3]
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <MadgwickAHRSupdate+0x418>)
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001790:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <MadgwickAHRSupdate+0x418>)
 8001796:	ed93 7a00 	vldr	s14, [r3]
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <MadgwickAHRSupdate+0x418>)
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80017a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80017ac:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MadgwickAHRSupdate+0x418>)
 80017b6:	edd3 6a00 	vldr	s13, [r3]
 80017ba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <MadgwickAHRSupdate+0x414>)
 80017c8:	edd3 6a00 	vldr	s13, [r3]
 80017cc:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80017d0:	e008      	b.n	80017e4 <MadgwickAHRSupdate+0x420>
 80017d2:	bf00      	nop
 80017d4:	20000b30 	.word	0x20000b30
 80017d8:	20000b34 	.word	0x20000b34
 80017dc:	20000b38 	.word	0x20000b38
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ec:	edd7 6a03 	vldr	s13, [r7, #12]
 80017f0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80017f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017fc:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001800:	edd7 7a02 	vldr	s15, [r7, #8]
 8001804:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001808:	4bf5      	ldr	r3, [pc, #980]	; (8001be0 <MadgwickAHRSupdate+0x81c>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001816:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800181a:	edd7 7a01 	vldr	s15, [r7, #4]
 800181e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001822:	4bf0      	ldr	r3, [pc, #960]	; (8001be4 <MadgwickAHRSupdate+0x820>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001830:	edd7 6a03 	vldr	s13, [r7, #12]
 8001834:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001840:	edd7 6a03 	vldr	s13, [r7, #12]
 8001844:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001850:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001854:	4be3      	ldr	r3, [pc, #908]	; (8001be4 <MadgwickAHRSupdate+0x820>)
 8001856:	ed93 7a00 	vldr	s14, [r3]
 800185a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800185e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001862:	edd7 6a02 	vldr	s13, [r7, #8]
 8001866:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800186a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001872:	4bdd      	ldr	r3, [pc, #884]	; (8001be8 <MadgwickAHRSupdate+0x824>)
 8001874:	edd3 6a00 	vldr	s13, [r3]
 8001878:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800187c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001880:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001884:	4bd6      	ldr	r3, [pc, #856]	; (8001be0 <MadgwickAHRSupdate+0x81c>)
 8001886:	edd3 6a00 	vldr	s13, [r3]
 800188a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800188e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001896:	edd7 6a02 	vldr	s13, [r7, #8]
 800189a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800189e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80018aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b6:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80018ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80018be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018c2:	4bc8      	ldr	r3, [pc, #800]	; (8001be4 <MadgwickAHRSupdate+0x820>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018d0:	edd7 6a02 	vldr	s13, [r7, #8]
 80018d4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 80018e4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80018e8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80018ec:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80018f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f8:	ee17 0a90 	vmov	r0, s15
 80018fc:	f7fe fe1c 	bl	8000538 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	ec43 2b10 	vmov	d0, r2, r3
 8001908:	f008 ffe0 	bl	800a8cc <sqrt>
 800190c:	ec53 2b10 	vmov	r2, r3, d0
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f960 	bl	8000bd8 <__aeabi_d2f>
 8001918:	4603      	mov	r3, r0
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800191c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001920:	eeb1 7a67 	vneg.f32	s14, s15
 8001924:	4bae      	ldr	r3, [pc, #696]	; (8001be0 <MadgwickAHRSupdate+0x81c>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192e:	4bae      	ldr	r3, [pc, #696]	; (8001be8 <MadgwickAHRSupdate+0x824>)
 8001930:	edd3 6a00 	vldr	s13, [r3]
 8001934:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001940:	edd7 6a01 	vldr	s13, [r7, #4]
 8001944:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001950:	4ba4      	ldr	r3, [pc, #656]	; (8001be4 <MadgwickAHRSupdate+0x820>)
 8001952:	edd3 6a00 	vldr	s13, [r3]
 8001956:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001962:	edd7 6a01 	vldr	s13, [r7, #4]
 8001966:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800196a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001972:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001976:	edd7 7a02 	vldr	s15, [r7, #8]
 800197a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800197e:	4b99      	ldr	r3, [pc, #612]	; (8001be4 <MadgwickAHRSupdate+0x820>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800198c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001990:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800199c:	edd7 6a01 	vldr	s13, [r7, #4]
 80019a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80019b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019b8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80019bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019c8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019cc:	eeb1 7a67 	vneg.f32	s14, s15
 80019d0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019d4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019d8:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80019dc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80019e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ec:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80019f0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a04:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a10:	4b73      	ldr	r3, [pc, #460]	; (8001be0 <MadgwickAHRSupdate+0x81c>)
 8001a12:	edd3 6a00 	vldr	s13, [r3]
 8001a16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a1e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a22:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a26:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a2a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a2e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a32:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a36:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a3a:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a3e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a42:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a4a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a4e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a62:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a66:	eef1 6a67 	vneg.f32	s13, s15
 8001a6a:	4b5e      	ldr	r3, [pc, #376]	; (8001be4 <MadgwickAHRSupdate+0x820>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a74:	4b5c      	ldr	r3, [pc, #368]	; (8001be8 <MadgwickAHRSupdate+0x824>)
 8001a76:	ed93 6a00 	vldr	s12, [r3]
 8001a7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a86:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001a8a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001a8e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a92:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a96:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a9a:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001a9e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001aa2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001aa6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aaa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001aae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac2:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <MadgwickAHRSupdate+0x81c>)
 8001ac4:	edd3 6a00 	vldr	s13, [r3]
 8001ac8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001acc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ad0:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001ad4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ad8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001adc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ae0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ae4:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ae8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001aec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001af0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001af4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001af8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001afc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b14:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b18:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b1c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b20:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b28:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b30:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b38:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b3c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b40:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b4c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b50:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <MadgwickAHRSupdate+0x824>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b66:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b6a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001b76:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b7a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b82:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b86:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MadgwickAHRSupdate+0x820>)
 8001b98:	edd3 6a00 	vldr	s13, [r3]
 8001b9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ba0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ba8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bb0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bb4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bb8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001bbc:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bc0:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001bc4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001bc8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bcc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bd0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bd4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bdc:	e006      	b.n	8001bec <MadgwickAHRSupdate+0x828>
 8001bde:	bf00      	nop
 8001be0:	20000b34 	.word	0x20000b34
 8001be4:	20000b38 	.word	0x20000b38
 8001be8:	20000b30 	.word	0x20000b30
 8001bec:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf8:	4bf6      	ldr	r3, [pc, #984]	; (8001fd4 <MadgwickAHRSupdate+0xc10>)
 8001bfa:	edd3 6a00 	vldr	s13, [r3]
 8001bfe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c06:	4bf4      	ldr	r3, [pc, #976]	; (8001fd8 <MadgwickAHRSupdate+0xc14>)
 8001c08:	ed93 6a00 	vldr	s12, [r3]
 8001c0c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c14:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c18:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c1c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c24:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c28:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c2c:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c30:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c34:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c38:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c3c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c54:	4be1      	ldr	r3, [pc, #900]	; (8001fdc <MadgwickAHRSupdate+0xc18>)
 8001c56:	edd3 6a00 	vldr	s13, [r3]
 8001c5a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c62:	4bdf      	ldr	r3, [pc, #892]	; (8001fe0 <MadgwickAHRSupdate+0xc1c>)
 8001c64:	ed93 6a00 	vldr	s12, [r3]
 8001c68:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c74:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001c78:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001c7c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c80:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c84:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c88:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001c8c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c90:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c94:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001c98:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c9c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ca0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ca4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cac:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001cbc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001cc0:	eeb1 7a67 	vneg.f32	s14, s15
 8001cc4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cc8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ccc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001cd0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001ce4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ce8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001cec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cf8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d04:	4bb3      	ldr	r3, [pc, #716]	; (8001fd4 <MadgwickAHRSupdate+0xc10>)
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001d0e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d12:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d1a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d1e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d22:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d2a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d32:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d3e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d42:	eef1 6a67 	vneg.f32	s13, s15
 8001d46:	4ba3      	ldr	r3, [pc, #652]	; (8001fd4 <MadgwickAHRSupdate+0xc10>)
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d50:	4ba1      	ldr	r3, [pc, #644]	; (8001fd8 <MadgwickAHRSupdate+0xc14>)
 8001d52:	ed93 6a00 	vldr	s12, [r3]
 8001d56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d5e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d62:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d66:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d6a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d6e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d72:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d76:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d7a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d7e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001d82:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001d86:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d8e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d92:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da6:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <MadgwickAHRSupdate+0xc1c>)
 8001da8:	edd3 6a00 	vldr	s13, [r3]
 8001dac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001db0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001db4:	4b89      	ldr	r3, [pc, #548]	; (8001fdc <MadgwickAHRSupdate+0xc18>)
 8001db6:	ed93 6a00 	vldr	s12, [r3]
 8001dba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dbe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dc6:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001dca:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001dce:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dd2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dd6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dda:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001dde:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001de2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001de6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dea:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dee:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e02:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <MadgwickAHRSupdate+0xc14>)
 8001e04:	edd3 6a00 	vldr	s13, [r3]
 8001e08:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e10:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <MadgwickAHRSupdate+0xc10>)
 8001e12:	ed93 6a00 	vldr	s12, [r3]
 8001e16:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e22:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e26:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e2a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e2e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e32:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e36:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e3a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e3e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e42:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e46:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e4a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e4e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e52:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e5a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001e6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e6e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e72:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e82:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001e8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e92:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001e96:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e9e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ea2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001eb2:	eef1 6a67 	vneg.f32	s13, s15
 8001eb6:	4b49      	ldr	r3, [pc, #292]	; (8001fdc <MadgwickAHRSupdate+0xc18>)
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec0:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <MadgwickAHRSupdate+0xc1c>)
 8001ec2:	ed93 6a00 	vldr	s12, [r3]
 8001ec6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001eca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ece:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ed2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ed6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001eda:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ede:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ee2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ee6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001eea:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eee:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001ef2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ef6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001efa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001efe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f02:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001f06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f0a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f16:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f1a:	eef1 6a67 	vneg.f32	s13, s15
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <MadgwickAHRSupdate+0xc14>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f28:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <MadgwickAHRSupdate+0xc10>)
 8001f2a:	ed93 6a00 	vldr	s12, [r3]
 8001f2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f3a:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001f3e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001f42:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f46:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f4a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f4e:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001f52:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f56:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001f5a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f5e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f62:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001f66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f6a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f76:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <MadgwickAHRSupdate+0xc1c>)
 8001f78:	edd3 6a00 	vldr	s13, [r3]
 8001f7c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f84:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001f88:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f8c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001f90:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f94:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f98:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001f9c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001fa0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001fa4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fa8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001fac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fb0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fb4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fbc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001fcc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001fd0:	e008      	b.n	8001fe4 <MadgwickAHRSupdate+0xc20>
 8001fd2:	bf00      	nop
 8001fd4:	20000b34 	.word	0x20000b34
 8001fd8:	2000000c 	.word	0x2000000c
 8001fdc:	20000b38 	.word	0x20000b38
 8001fe0:	20000b30 	.word	0x20000b30
 8001fe4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fe8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001fec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ff4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ff8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002000:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200c:	eeb0 0a67 	vmov.f32	s0, s15
 8002010:	f000 fc34 	bl	800287c <invSqrt>
 8002014:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 8002018:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800201c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002024:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 8002028:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800202c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002034:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 8002038:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800203c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002044:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 8002048:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800204c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002054:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8002058:	4b69      	ldr	r3, [pc, #420]	; (8002200 <MadgwickAHRSupdate+0xe3c>)
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <MadgwickAHRSupdate+0xe3c>)
 8002074:	ed93 7a00 	vldr	s14, [r3]
 8002078:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002088:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 800208c:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <MadgwickAHRSupdate+0xe3c>)
 800208e:	ed93 7a00 	vldr	s14, [r3]
 8002092:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800209e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 80020a6:	4b56      	ldr	r3, [pc, #344]	; (8002200 <MadgwickAHRSupdate+0xe3c>)
 80020a8:	ed93 7a00 	vldr	s14, [r3]
 80020ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b4:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80020b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020bc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 80020c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020c4:	edd7 7a00 	vldr	s15, [r7]
 80020c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020cc:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80020d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <MadgwickAHRSupdate+0xe40>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020de:	4b49      	ldr	r3, [pc, #292]	; (8002204 <MadgwickAHRSupdate+0xe40>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 80020e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020e8:	edd7 7a00 	vldr	s15, [r7]
 80020ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80020f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <MadgwickAHRSupdate+0xe44>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <MadgwickAHRSupdate+0xe44>)
 8002104:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8002108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800210c:	edd7 7a00 	vldr	s15, [r7]
 8002110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002114:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <MadgwickAHRSupdate+0xe48>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	4b39      	ldr	r3, [pc, #228]	; (800220c <MadgwickAHRSupdate+0xe48>)
 8002128:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 800212c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002130:	edd7 7a00 	vldr	s15, [r7]
 8002134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002138:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800213c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002140:	4b33      	ldr	r3, [pc, #204]	; (8002210 <MadgwickAHRSupdate+0xe4c>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214a:	4b31      	ldr	r3, [pc, #196]	; (8002210 <MadgwickAHRSupdate+0xe4c>)
 800214c:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <MadgwickAHRSupdate+0xe40>)
 8002152:	ed93 7a00 	vldr	s14, [r3]
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <MadgwickAHRSupdate+0xe40>)
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <MadgwickAHRSupdate+0xe44>)
 8002162:	edd3 6a00 	vldr	s13, [r3]
 8002166:	4b28      	ldr	r3, [pc, #160]	; (8002208 <MadgwickAHRSupdate+0xe44>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <MadgwickAHRSupdate+0xe48>)
 8002176:	edd3 6a00 	vldr	s13, [r3]
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <MadgwickAHRSupdate+0xe48>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002184:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MadgwickAHRSupdate+0xe4c>)
 800218a:	edd3 6a00 	vldr	s13, [r3]
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <MadgwickAHRSupdate+0xe4c>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219c:	eeb0 0a67 	vmov.f32	s0, s15
 80021a0:	f000 fb6c 	bl	800287c <invSqrt>
 80021a4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <MadgwickAHRSupdate+0xe40>)
 80021aa:	ed93 7a00 	vldr	s14, [r3]
 80021ae:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <MadgwickAHRSupdate+0xe40>)
 80021b8:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <MadgwickAHRSupdate+0xe44>)
 80021be:	ed93 7a00 	vldr	s14, [r3]
 80021c2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ca:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MadgwickAHRSupdate+0xe44>)
 80021cc:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MadgwickAHRSupdate+0xe48>)
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MadgwickAHRSupdate+0xe48>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <MadgwickAHRSupdate+0xe4c>)
 80021e6:	ed93 7a00 	vldr	s14, [r3]
 80021ea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <MadgwickAHRSupdate+0xe4c>)
 80021f4:	edc3 7a00 	vstr	s15, [r3]
}
 80021f8:	37b8      	adds	r7, #184	; 0xb8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000004 	.word	0x20000004
 8002204:	2000000c 	.word	0x2000000c
 8002208:	20000b30 	.word	0x20000b30
 800220c:	20000b34 	.word	0x20000b34
 8002210:	20000b38 	.word	0x20000b38

08002214 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sample_freq) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b09e      	sub	sp, #120	; 0x78
 8002218:	af00      	add	r7, sp, #0
 800221a:	ed87 0a07 	vstr	s0, [r7, #28]
 800221e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002222:	ed87 1a05 	vstr	s2, [r7, #20]
 8002226:	edc7 1a04 	vstr	s3, [r7, #16]
 800222a:	ed87 2a03 	vstr	s4, [r7, #12]
 800222e:	edc7 2a02 	vstr	s5, [r7, #8]
 8002232:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002236:	4bec      	ldr	r3, [pc, #944]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002238:	edd3 7a00 	vldr	s15, [r3]
 800223c:	eeb1 7a67 	vneg.f32	s14, s15
 8002240:	edd7 7a07 	vldr	s15, [r7, #28]
 8002244:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002248:	4be8      	ldr	r3, [pc, #928]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 800224a:	edd3 6a00 	vldr	s13, [r3]
 800224e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002256:	ee37 7a67 	vsub.f32	s14, s14, s15
 800225a:	4be5      	ldr	r3, [pc, #916]	; (80025f0 <MadgwickAHRSupdateIMU+0x3dc>)
 800225c:	edd3 6a00 	vldr	s13, [r3]
 8002260:	edd7 7a05 	vldr	s15, [r7, #20]
 8002264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002274:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8002278:	4bde      	ldr	r3, [pc, #888]	; (80025f4 <MadgwickAHRSupdateIMU+0x3e0>)
 800227a:	ed93 7a00 	vldr	s14, [r3]
 800227e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002286:	4bd9      	ldr	r3, [pc, #868]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 8002288:	edd3 6a00 	vldr	s13, [r3]
 800228c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002298:	4bd5      	ldr	r3, [pc, #852]	; (80025f0 <MadgwickAHRSupdateIMU+0x3dc>)
 800229a:	edd3 6a00 	vldr	s13, [r3]
 800229e:	edd7 7a06 	vldr	s15, [r7, #24]
 80022a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80022b6:	4bcf      	ldr	r3, [pc, #828]	; (80025f4 <MadgwickAHRSupdateIMU+0x3e0>)
 80022b8:	ed93 7a00 	vldr	s14, [r3]
 80022bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80022c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c4:	4bc8      	ldr	r3, [pc, #800]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 80022c6:	edd3 6a00 	vldr	s13, [r3]
 80022ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022d6:	4bc6      	ldr	r3, [pc, #792]	; (80025f0 <MadgwickAHRSupdateIMU+0x3dc>)
 80022d8:	edd3 6a00 	vldr	s13, [r3]
 80022dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80022e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f0:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80022f4:	4bbf      	ldr	r3, [pc, #764]	; (80025f4 <MadgwickAHRSupdateIMU+0x3e0>)
 80022f6:	ed93 7a00 	vldr	s14, [r3]
 80022fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80022fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002302:	4bb9      	ldr	r3, [pc, #740]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002304:	edd3 6a00 	vldr	s13, [r3]
 8002308:	edd7 7a06 	vldr	s15, [r7, #24]
 800230c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002314:	4bb5      	ldr	r3, [pc, #724]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 8002316:	edd3 6a00 	vldr	s13, [r3]
 800231a:	edd7 7a07 	vldr	s15, [r7, #28]
 800231e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002326:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800232a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232e:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002332:	edd7 7a04 	vldr	s15, [r7, #16]
 8002336:	eef5 7a40 	vcmp.f32	s15, #0.0
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	d10e      	bne.n	800235e <MadgwickAHRSupdateIMU+0x14a>
 8002340:	edd7 7a03 	vldr	s15, [r7, #12]
 8002344:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234c:	d107      	bne.n	800235e <MadgwickAHRSupdateIMU+0x14a>
 800234e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002352:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800235a:	f000 81e5 	beq.w	8002728 <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800235e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002362:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002366:	edd7 7a03 	vldr	s15, [r7, #12]
 800236a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800236e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002372:	edd7 7a02 	vldr	s15, [r7, #8]
 8002376:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800237a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
 8002382:	f000 fa7b 	bl	800287c <invSqrt>
 8002386:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 800238a:	ed97 7a04 	vldr	s14, [r7, #16]
 800238e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002396:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 800239a:	ed97 7a03 	vldr	s14, [r7, #12]
 800239e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a6:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;   
 80023aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80023ae:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80023ba:	4b8e      	ldr	r3, [pc, #568]	; (80025f4 <MadgwickAHRSupdateIMU+0x3e0>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023c4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 80023c8:	4b87      	ldr	r3, [pc, #540]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023d2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 80023d6:	4b85      	ldr	r3, [pc, #532]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023e0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 80023e4:	4b82      	ldr	r3, [pc, #520]	; (80025f0 <MadgwickAHRSupdateIMU+0x3dc>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 80023f2:	4b80      	ldr	r3, [pc, #512]	; (80025f4 <MadgwickAHRSupdateIMU+0x3e0>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80023fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002400:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8002404:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800240e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002412:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 8002416:	4b75      	ldr	r3, [pc, #468]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002424:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 8002428:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002436:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 800243a:	4b6c      	ldr	r3, [pc, #432]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 800244c:	4b69      	ldr	r3, [pc, #420]	; (80025f4 <MadgwickAHRSupdateIMU+0x3e0>)
 800244e:	ed93 7a00 	vldr	s14, [r3]
 8002452:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <MadgwickAHRSupdateIMU+0x3e0>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 8002460:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002462:	ed93 7a00 	vldr	s14, [r3]
 8002466:	4b60      	ldr	r3, [pc, #384]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002470:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 8002474:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 8002476:	ed93 7a00 	vldr	s14, [r3]
 800247a:	4b5c      	ldr	r3, [pc, #368]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002484:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <MadgwickAHRSupdateIMU+0x3dc>)
 800248a:	ed93 7a00 	vldr	s14, [r3]
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <MadgwickAHRSupdateIMU+0x3dc>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002498:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800249c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024a0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80024ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80024b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b8:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80024bc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c8:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80024cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80024dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80024ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80024f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024fc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002500:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002504:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <MadgwickAHRSupdateIMU+0x3d4>)
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800250e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002512:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002516:	edd7 7a03 	vldr	s15, [r7, #12]
 800251a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800251e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002522:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800252a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800252e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002536:	ee37 7a27 	vadd.f32	s14, s14, s15
 800253a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800253e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800254a:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800254e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800255e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002562:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <MadgwickAHRSupdateIMU+0x3d8>)
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002574:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8002578:	edd7 7a04 	vldr	s15, [r7, #16]
 800257c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002580:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002584:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002588:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800258c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002590:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002594:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002598:	edd7 7a03 	vldr	s15, [r7, #12]
 800259c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80025a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ac:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80025b0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025bc:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80025c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025cc:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80025d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80025e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80025e4:	e008      	b.n	80025f8 <MadgwickAHRSupdateIMU+0x3e4>
 80025e6:	bf00      	nop
 80025e8:	20000b30 	.word	0x20000b30
 80025ec:	20000b34 	.word	0x20000b34
 80025f0:	20000b38 	.word	0x20000b38
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80025fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002600:	4b99      	ldr	r3, [pc, #612]	; (8002868 <MadgwickAHRSupdateIMU+0x654>)
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	ee27 7a27 	vmul.f32	s14, s14, s15
 800260a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800260e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002616:	ee37 7a67 	vsub.f32	s14, s14, s15
 800261a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800261e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002622:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002626:	4b90      	ldr	r3, [pc, #576]	; (8002868 <MadgwickAHRSupdateIMU+0x654>)
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002634:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002638:	edd7 7a03 	vldr	s15, [r7, #12]
 800263c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002644:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002648:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800264c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002650:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002654:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002658:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002660:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002668:	edd7 7a08 	vldr	s15, [r7, #32]
 800266c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002674:	eeb0 0a67 	vmov.f32	s0, s15
 8002678:	f000 f900 	bl	800287c <invSqrt>
 800267c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 8002680:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002684:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 8002690:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002694:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 80026a0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80026a4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 80026b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80026b4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026bc:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <MadgwickAHRSupdateIMU+0x658>)
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ce:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80026d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 80026da:	4b64      	ldr	r3, [pc, #400]	; (800286c <MadgwickAHRSupdateIMU+0x658>)
 80026dc:	ed93 7a00 	vldr	s14, [r3]
 80026e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80026ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f0:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 80026f4:	4b5d      	ldr	r3, [pc, #372]	; (800286c <MadgwickAHRSupdateIMU+0x658>)
 80026f6:	ed93 7a00 	vldr	s14, [r3]
 80026fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8002706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 800270e:	4b57      	ldr	r3, [pc, #348]	; (800286c <MadgwickAHRSupdateIMU+0x658>)
 8002710:	ed93 7a00 	vldr	s14, [r3]
 8002714:	edd7 7a08 	vldr	s15, [r7, #32]
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002724:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 8002728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800272c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002734:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800273c:	4b4c      	ldr	r3, [pc, #304]	; (8002870 <MadgwickAHRSupdateIMU+0x65c>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <MadgwickAHRSupdateIMU+0x65c>)
 8002748:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 800274c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002750:	edd7 7a01 	vldr	s15, [r7, #4]
 8002754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002758:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	4b44      	ldr	r3, [pc, #272]	; (8002874 <MadgwickAHRSupdateIMU+0x660>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	4b42      	ldr	r3, [pc, #264]	; (8002874 <MadgwickAHRSupdateIMU+0x660>)
 800276c:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8002770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002774:	edd7 7a01 	vldr	s15, [r7, #4]
 8002778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800277c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002784:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <MadgwickAHRSupdateIMU+0x664>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278e:	4b3a      	ldr	r3, [pc, #232]	; (8002878 <MadgwickAHRSupdateIMU+0x664>)
 8002790:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8002794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002798:	edd7 7a01 	vldr	s15, [r7, #4]
 800279c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <MadgwickAHRSupdateIMU+0x654>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <MadgwickAHRSupdateIMU+0x654>)
 80027b4:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <MadgwickAHRSupdateIMU+0x65c>)
 80027ba:	ed93 7a00 	vldr	s14, [r3]
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <MadgwickAHRSupdateIMU+0x65c>)
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <MadgwickAHRSupdateIMU+0x660>)
 80027ca:	edd3 6a00 	vldr	s13, [r3]
 80027ce:	4b29      	ldr	r3, [pc, #164]	; (8002874 <MadgwickAHRSupdateIMU+0x660>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027dc:	4b26      	ldr	r3, [pc, #152]	; (8002878 <MadgwickAHRSupdateIMU+0x664>)
 80027de:	edd3 6a00 	vldr	s13, [r3]
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <MadgwickAHRSupdateIMU+0x664>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f0:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <MadgwickAHRSupdateIMU+0x654>)
 80027f2:	edd3 6a00 	vldr	s13, [r3]
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <MadgwickAHRSupdateIMU+0x654>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002804:	eeb0 0a67 	vmov.f32	s0, s15
 8002808:	f000 f838 	bl	800287c <invSqrt>
 800280c:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <MadgwickAHRSupdateIMU+0x65c>)
 8002812:	ed93 7a00 	vldr	s14, [r3]
 8002816:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <MadgwickAHRSupdateIMU+0x65c>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002824:	4b13      	ldr	r3, [pc, #76]	; (8002874 <MadgwickAHRSupdateIMU+0x660>)
 8002826:	ed93 7a00 	vldr	s14, [r3]
 800282a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800282e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <MadgwickAHRSupdateIMU+0x660>)
 8002834:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MadgwickAHRSupdateIMU+0x664>)
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MadgwickAHRSupdateIMU+0x664>)
 8002848:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800284c:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MadgwickAHRSupdateIMU+0x654>)
 800284e:	ed93 7a00 	vldr	s14, [r3]
 8002852:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800285a:	4b03      	ldr	r3, [pc, #12]	; (8002868 <MadgwickAHRSupdateIMU+0x654>)
 800285c:	edc3 7a00 	vstr	s15, [r3]
}
 8002860:	bf00      	nop
 8002862:	3778      	adds	r7, #120	; 0x78
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000b38 	.word	0x20000b38
 800286c:	20000004 	.word	0x20000004
 8002870:	2000000c 	.word	0x2000000c
 8002874:	20000b30 	.word	0x20000b30
 8002878:	20000b34 	.word	0x20000b34

0800287c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002886:	edd7 7a01 	vldr	s15, [r7, #4]
 800288a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800288e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002892:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800289a:	f107 0310 	add.w	r3, r7, #16
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	105a      	asrs	r2, r3, #1
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <invSqrt+0x74>)
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80028b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80028cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	ee07 3a90 	vmov	s15, r3
}
 80028e2:	eeb0 0a67 	vmov.f32	s0, s15
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	5f3759df 	.word	0x5f3759df

080028f4 <MCP4728_Write_GeneralCall>:
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, data, sizeof(data), HAL_MAX_DELAY);
	return ret;
}

void MCP4728_Write_GeneralCall(I2C_HandleTypeDef *I2CHandler, uint8_t command) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
	uint16_t zeoo = 0x00;
 8002900:	2300      	movs	r3, #0
 8002902:	81fb      	strh	r3, [r7, #14]
	uint16_t sizey = 0x1;
 8002904:	2301      	movs	r3, #1
 8002906:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(I2CHandler, zeoo, &command, sizey, HAL_MAX_DELAY);
 8002908:	89bb      	ldrh	r3, [r7, #12]
 800290a:	1cfa      	adds	r2, r7, #3
 800290c:	89f9      	ldrh	r1, [r7, #14]
 800290e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002912:	9000      	str	r0, [sp, #0]
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f004 fee1 	bl	80076dc <HAL_I2C_Master_Transmit>

}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <MCP4728_Write_AllChannels_Diff>:
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Write_AllChannels_Diff(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 8002922:	b580      	push	{r7, lr}
 8002924:	b08a      	sub	sp, #40	; 0x28
 8002926:	af02      	add	r7, sp, #8
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	4638      	mov	r0, r7
 800292c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf[8];
	for(uint8_t i = 0; i < 4; i++){
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e024      	b.n	8002980 <MCP4728_Write_AllChannels_Diff+0x5e>
		uint8_t lowByte = output.channel_Val[i] & 0xff;
 8002936:	7ffb      	ldrb	r3, [r7, #31]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	3320      	adds	r3, #32
 800293c:	443b      	add	r3, r7
 800293e:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8002942:	77bb      	strb	r3, [r7, #30]
		uint8_t highByte = (output.channel_Val[i] >> 8);
 8002944:	7ffb      	ldrb	r3, [r7, #31]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	3320      	adds	r3, #32
 800294a:	443b      	add	r3, r7
 800294c:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	b29b      	uxth	r3, r3
 8002954:	777b      	strb	r3, [r7, #29]
		buf[i*2] =  0x0f&highByte;
 8002956:	7ffb      	ldrb	r3, [r7, #31]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	7f7a      	ldrb	r2, [r7, #29]
 800295c:	f002 020f 	and.w	r2, r2, #15
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	3320      	adds	r3, #32
 8002964:	443b      	add	r3, r7
 8002966:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)+1] = lowByte;
 800296a:	7ffb      	ldrb	r3, [r7, #31]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	3301      	adds	r3, #1
 8002970:	3320      	adds	r3, #32
 8002972:	443b      	add	r3, r7
 8002974:	7fba      	ldrb	r2, [r7, #30]
 8002976:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 800297a:	7ffb      	ldrb	r3, [r7, #31]
 800297c:	3301      	adds	r3, #1
 800297e:	77fb      	strb	r3, [r7, #31]
 8002980:	7ffb      	ldrb	r3, [r7, #31]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d9d7      	bls.n	8002936 <MCP4728_Write_AllChannels_Diff+0x14>
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8002986:	f107 0214 	add.w	r2, r7, #20
 800298a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2308      	movs	r3, #8
 8002992:	21c8      	movs	r1, #200	; 0xc8
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f004 fea1 	bl	80076dc <HAL_I2C_Master_Transmit>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 800299a:	2108      	movs	r1, #8
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f7ff ffa9 	bl	80028f4 <MCP4728_Write_GeneralCall>
}
 80029a2:	bf00      	nop
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <LCD_Reset>:
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}

void LCD_Reset(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
	int i;
    lcddev.reset(1);      // Assert reset
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <LCD_Reset+0x48>)
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2001      	movs	r0, #1
 80029b8:	4798      	blx	r3
    //nano_wait(100000000); // Wait
    for(i=0; i<100000;i++);
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	e002      	b.n	80029c6 <LCD_Reset+0x1a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3301      	adds	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a0b      	ldr	r2, [pc, #44]	; (80029f8 <LCD_Reset+0x4c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	ddf8      	ble.n	80029c0 <LCD_Reset+0x14>
    //nano_wait(10);
    lcddev.reset(0);      // De-assert reset
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <LCD_Reset+0x48>)
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2000      	movs	r0, #0
 80029d4:	4798      	blx	r3
    //nano_wait(50000000);  // Wait
    //nano_wait(10);
    for(i=0;i<1000000;i++);
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	e002      	b.n	80029e2 <LCD_Reset+0x36>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3301      	adds	r3, #1
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a05      	ldr	r2, [pc, #20]	; (80029fc <LCD_Reset+0x50>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	ddf8      	ble.n	80029dc <LCD_Reset+0x30>
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	200000e8 	.word	0x200000e8
 80029f8:	0001869f 	.word	0x0001869f
 80029fc:	000f423f 	.word	0x000f423f

08002a00 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8002a0a:	bf00      	nop
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <LCD_WR_REG+0x30>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <LCD_WR_REG+0xc>
        ;
    // Don't clear RS until the previous operation is done.
    lcddev.reg_select(1);
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <LCD_WR_REG+0x34>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8002a20:	4a05      	ldr	r2, [pc, #20]	; (8002a38 <LCD_WR_REG+0x38>)
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	7013      	strb	r3, [r2, #0]
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40013000 	.word	0x40013000
 8002a34:	200000e8 	.word	0x200000e8
 8002a38:	4001300c 	.word	0x4001300c

08002a3c <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8002a46:	bf00      	nop
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <LCD_WR_DATA+0x30>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1f9      	bne.n	8002a48 <LCD_WR_DATA+0xc>
        ;
    // Don't set RS until the previous operation is done.
    lcddev.reg_select(0);
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <LCD_WR_DATA+0x34>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2000      	movs	r0, #0
 8002a5a:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8002a5c:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <LCD_WR_DATA+0x38>)
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	7013      	strb	r3, [r2, #0]
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40013000 	.word	0x40013000
 8002a70:	200000e8 	.word	0x200000e8
 8002a74:	4001300c 	.word	0x4001300c

08002a78 <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
    lcddev.reg_select(0);
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <LCD_WriteData16_Prepare+0x1c>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2000      	movs	r0, #0
 8002a82:	4798      	blx	r3
    SPI->CR2 |= SPI_CR2_DS;
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <LCD_WriteData16_Prepare+0x20>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a03      	ldr	r2, [pc, #12]	; (8002a98 <LCD_WriteData16_Prepare+0x20>)
 8002a8a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002a8e:	6053      	str	r3, [r2, #4]
}
 8002a90:	bf00      	nop
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	200000e8 	.word	0x200000e8
 8002a98:	40013000 	.word	0x40013000

08002a9c <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8002aa6:	bf00      	nop
 8002aa8:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <LCD_WriteData16+0x2c>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f9      	beq.n	8002aa8 <LCD_WriteData16+0xc>
        ;
    SPI->DR = data;
 8002ab4:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <LCD_WriteData16+0x2c>)
 8002ab6:	88fb      	ldrh	r3, [r7, #6]
 8002ab8:	60d3      	str	r3, [r2, #12]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40013000 	.word	0x40013000

08002acc <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <LCD_WriteData16_End+0x1c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <LCD_WriteData16_End+0x1c>)
 8002ad6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ada:	6053      	str	r3, [r2, #4]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40013000 	.word	0x40013000

08002aec <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	460a      	mov	r2, r1
 8002af6:	71fb      	strb	r3, [r7, #7]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80bb      	strh	r3, [r7, #4]
    LCD_WR_REG(LCD_Reg);
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff7e 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8002b04:	88bb      	ldrh	r3, [r7, #4]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff97 	bl	8002a3c <LCD_WR_DATA>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <LCD_WriteRAM_Prepare+0x14>)
 8002b1e:	891b      	ldrh	r3, [r3, #8]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff ff6c 	bl	8002a00 <LCD_WR_REG>
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	200000e8 	.word	0x200000e8

08002b30 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
    lcddev.setxcmd=0x2A;
 8002b3a:	4b26      	ldr	r3, [pc, #152]	; (8002bd4 <LCD_direction+0xa4>)
 8002b3c:	222a      	movs	r2, #42	; 0x2a
 8002b3e:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <LCD_direction+0xa4>)
 8002b42:	222b      	movs	r2, #43	; 0x2b
 8002b44:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <LCD_direction+0xa4>)
 8002b48:	222c      	movs	r2, #44	; 0x2c
 8002b4a:	811a      	strh	r2, [r3, #8]
    switch(direction){
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d83a      	bhi.n	8002bc8 <LCD_direction+0x98>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <LCD_direction+0x28>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002b69 	.word	0x08002b69
 8002b5c:	08002b81 	.word	0x08002b81
 8002b60:	08002b99 	.word	0x08002b99
 8002b64:	08002bb1 	.word	0x08002bb1
    case 0:
        lcddev.width=LCD_W;
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <LCD_direction+0xa4>)
 8002b6a:	22f0      	movs	r2, #240	; 0xf0
 8002b6c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <LCD_direction+0xa4>)
 8002b70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b74:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8002b76:	2108      	movs	r1, #8
 8002b78:	2036      	movs	r0, #54	; 0x36
 8002b7a:	f7ff ffb7 	bl	8002aec <LCD_WriteReg>
        break;
 8002b7e:	e024      	b.n	8002bca <LCD_direction+0x9a>
    case 1:
        lcddev.width=LCD_H;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <LCD_direction+0xa4>)
 8002b82:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b86:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <LCD_direction+0xa4>)
 8002b8a:	22f0      	movs	r2, #240	; 0xf0
 8002b8c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8002b8e:	2168      	movs	r1, #104	; 0x68
 8002b90:	2036      	movs	r0, #54	; 0x36
 8002b92:	f7ff ffab 	bl	8002aec <LCD_WriteReg>
        break;
 8002b96:	e018      	b.n	8002bca <LCD_direction+0x9a>
    case 2:
        lcddev.width=LCD_W;
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <LCD_direction+0xa4>)
 8002b9a:	22f0      	movs	r2, #240	; 0xf0
 8002b9c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <LCD_direction+0xa4>)
 8002ba0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ba4:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8002ba6:	21c8      	movs	r1, #200	; 0xc8
 8002ba8:	2036      	movs	r0, #54	; 0x36
 8002baa:	f7ff ff9f 	bl	8002aec <LCD_WriteReg>
        break;
 8002bae:	e00c      	b.n	8002bca <LCD_direction+0x9a>
    case 3:
        lcddev.width=LCD_H;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <LCD_direction+0xa4>)
 8002bb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002bb6:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <LCD_direction+0xa4>)
 8002bba:	22f0      	movs	r2, #240	; 0xf0
 8002bbc:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8002bbe:	21a8      	movs	r1, #168	; 0xa8
 8002bc0:	2036      	movs	r0, #54	; 0x36
 8002bc2:	f7ff ff93 	bl	8002aec <LCD_WriteReg>
        break;
 8002bc6:	e000      	b.n	8002bca <LCD_direction+0x9a>
    default:break;
 8002bc8:	bf00      	nop
    }
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	200000e8 	.word	0x200000e8

08002bd8 <tft_select>:

static void tft_select(int val)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    if (val == 0) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <tft_select+0x26>
        while(SPI1->SR & SPI_SR_BSY)
 8002be6:	bf00      	nop
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <tft_select+0x4c>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f9      	bne.n	8002be8 <tft_select+0x10>
            ;
        GPIOA->BSRR = 1<<4;
 8002bf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bf8:	2210      	movs	r2, #16
 8002bfa:	619a      	str	r2, [r3, #24]
            // This is a common mistake made by students.
            // This is what catches the problem early.
        }
        GPIOA->BRR = 1<<4;
    }
}
 8002bfc:	e00b      	b.n	8002c16 <tft_select+0x3e>
    	while((GPIOA->ODR & (1<<4)) == 0) {
 8002bfe:	bf00      	nop
 8002c00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f8      	beq.n	8002c00 <tft_select+0x28>
        GPIOA->BRR = 1<<4;
 8002c0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c12:	2210      	movs	r2, #16
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40013000 	.word	0x40013000

08002c28 <tft_reset>:

static void tft_reset(int val)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
    if (val) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <tft_reset+0x16>
        GPIOB->BRR = 1<<0;
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <tft_reset+0x28>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	629a      	str	r2, [r3, #40]	; 0x28
    } else {
        GPIOB->BSRR = 1<<0;
    }
}
 8002c3c:	e002      	b.n	8002c44 <tft_reset+0x1c>
        GPIOB->BSRR = 1<<0;
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <tft_reset+0x28>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	619a      	str	r2, [r3, #24]
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	48000400 	.word	0x48000400

08002c54 <tft_reg_select>:

static void tft_reg_select(int val)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    if (val == 1) { // select registers
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d104      	bne.n	8002c6c <tft_reg_select+0x18>
        GPIOA->BRR = 1<<3; // clear
 8002c62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c66:	2208      	movs	r2, #8
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
    } else { // select data
        GPIOA->BSRR = 1<<3; // set
    }
}
 8002c6a:	e003      	b.n	8002c74 <tft_reg_select+0x20>
        GPIOA->BSRR = 1<<3; // set
 8002c6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c70:	2208      	movs	r2, #8
 8002c72:	619a      	str	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init(void (*reset)(int), void (*select)(int), void (*reg_select)(int))
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
	int i;

    lcddev.reset = tft_reset;
 8002c8c:	4ba3      	ldr	r3, [pc, #652]	; (8002f1c <LCD_Init+0x29c>)
 8002c8e:	4aa4      	ldr	r2, [pc, #656]	; (8002f20 <LCD_Init+0x2a0>)
 8002c90:	611a      	str	r2, [r3, #16]
    lcddev.select = tft_select;
 8002c92:	4ba2      	ldr	r3, [pc, #648]	; (8002f1c <LCD_Init+0x29c>)
 8002c94:	4aa3      	ldr	r2, [pc, #652]	; (8002f24 <LCD_Init+0x2a4>)
 8002c96:	615a      	str	r2, [r3, #20]
    lcddev.reg_select = tft_reg_select;
 8002c98:	4ba0      	ldr	r3, [pc, #640]	; (8002f1c <LCD_Init+0x29c>)
 8002c9a:	4aa3      	ldr	r2, [pc, #652]	; (8002f28 <LCD_Init+0x2a8>)
 8002c9c:	619a      	str	r2, [r3, #24]
    if (reset)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <LCD_Init+0x2a>
        lcddev.reset = reset;
 8002ca4:	4a9d      	ldr	r2, [pc, #628]	; (8002f1c <LCD_Init+0x29c>)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6113      	str	r3, [r2, #16]
    if (select)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <LCD_Init+0x36>
        lcddev.select = select;
 8002cb0:	4a9a      	ldr	r2, [pc, #616]	; (8002f1c <LCD_Init+0x29c>)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6153      	str	r3, [r2, #20]
    if (reg_select)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <LCD_Init+0x42>
        lcddev.reg_select = reg_select;
 8002cbc:	4a97      	ldr	r2, [pc, #604]	; (8002f1c <LCD_Init+0x29c>)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6193      	str	r3, [r2, #24]
    lcddev.select(1);
 8002cc2:	4b96      	ldr	r3, [pc, #600]	; (8002f1c <LCD_Init+0x29c>)
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	4798      	blx	r3
    LCD_Reset();
 8002cca:	f7ff fe6f 	bl	80029ac <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8002cce:	20cf      	movs	r0, #207	; 0xcf
 8002cd0:	f7ff fe96 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7ff feb1 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8002cda:	20d9      	movs	r0, #217	; 0xd9
 8002cdc:	f7ff feae 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8002ce0:	2030      	movs	r0, #48	; 0x30
 8002ce2:	f7ff feab 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 8002ce6:	20ed      	movs	r0, #237	; 0xed
 8002ce8:	f7ff fe8a 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8002cec:	2064      	movs	r0, #100	; 0x64
 8002cee:	f7ff fea5 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8002cf2:	2003      	movs	r0, #3
 8002cf4:	f7ff fea2 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8002cf8:	2012      	movs	r0, #18
 8002cfa:	f7ff fe9f 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8002cfe:	2081      	movs	r0, #129	; 0x81
 8002d00:	f7ff fe9c 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 8002d04:	20e8      	movs	r0, #232	; 0xe8
 8002d06:	f7ff fe7b 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8002d0a:	2085      	movs	r0, #133	; 0x85
 8002d0c:	f7ff fe96 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002d10:	2010      	movs	r0, #16
 8002d12:	f7ff fe93 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 8002d16:	207a      	movs	r0, #122	; 0x7a
 8002d18:	f7ff fe90 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8002d1c:	20cb      	movs	r0, #203	; 0xcb
 8002d1e:	f7ff fe6f 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 8002d22:	2039      	movs	r0, #57	; 0x39
 8002d24:	f7ff fe8a 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8002d28:	202c      	movs	r0, #44	; 0x2c
 8002d2a:	f7ff fe87 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7ff fe84 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8002d34:	2034      	movs	r0, #52	; 0x34
 8002d36:	f7ff fe81 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8002d3a:	2002      	movs	r0, #2
 8002d3c:	f7ff fe7e 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 8002d40:	20f7      	movs	r0, #247	; 0xf7
 8002d42:	f7ff fe5d 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 8002d46:	2020      	movs	r0, #32
 8002d48:	f7ff fe78 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 8002d4c:	20ea      	movs	r0, #234	; 0xea
 8002d4e:	f7ff fe57 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7ff fe72 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7ff fe6f 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 8002d5e:	20c0      	movs	r0, #192	; 0xc0
 8002d60:	f7ff fe4e 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 8002d64:	2021      	movs	r0, #33	; 0x21
 8002d66:	f7ff fe69 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 8002d6a:	20c1      	movs	r0, #193	; 0xc1
 8002d6c:	f7ff fe48 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 8002d70:	2012      	movs	r0, #18
 8002d72:	f7ff fe63 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 8002d76:	20c5      	movs	r0, #197	; 0xc5
 8002d78:	f7ff fe42 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 8002d7c:	2039      	movs	r0, #57	; 0x39
 8002d7e:	f7ff fe5d 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 8002d82:	2037      	movs	r0, #55	; 0x37
 8002d84:	f7ff fe5a 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 8002d88:	20c7      	movs	r0, #199	; 0xc7
 8002d8a:	f7ff fe39 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 8002d8e:	20ab      	movs	r0, #171	; 0xab
 8002d90:	f7ff fe54 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 8002d94:	2036      	movs	r0, #54	; 0x36
 8002d96:	f7ff fe33 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 8002d9a:	2048      	movs	r0, #72	; 0x48
 8002d9c:	f7ff fe4e 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 8002da0:	203a      	movs	r0, #58	; 0x3a
 8002da2:	f7ff fe2d 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 8002da6:	2055      	movs	r0, #85	; 0x55
 8002da8:	f7ff fe48 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8002dac:	20b1      	movs	r0, #177	; 0xb1
 8002dae:	f7ff fe27 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002db2:	2000      	movs	r0, #0
 8002db4:	f7ff fe42 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 8002db8:	201b      	movs	r0, #27
 8002dba:	f7ff fe3f 	bl	8002a3c <LCD_WR_DATA>



    LCD_WR_REG(0xB6);    // Display Function Control
 8002dbe:	20b6      	movs	r0, #182	; 0xb6
 8002dc0:	f7ff fe1e 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 8002dc4:	200a      	movs	r0, #10
 8002dc6:	f7ff fe39 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8002dca:	20a2      	movs	r0, #162	; 0xa2
 8002dcc:	f7ff fe36 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002dd0:	20f2      	movs	r0, #242	; 0xf2
 8002dd2:	f7ff fe15 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f7ff fe30 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8002ddc:	2026      	movs	r0, #38	; 0x26
 8002dde:	f7ff fe0f 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7ff fe2a 	bl	8002a3c <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8002de8:	20e0      	movs	r0, #224	; 0xe0
 8002dea:	f7ff fe09 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8002dee:	200f      	movs	r0, #15
 8002df0:	f7ff fe24 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8002df4:	2023      	movs	r0, #35	; 0x23
 8002df6:	f7ff fe21 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8002dfa:	201f      	movs	r0, #31
 8002dfc:	f7ff fe1e 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8002e00:	200b      	movs	r0, #11
 8002e02:	f7ff fe1b 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8002e06:	200e      	movs	r0, #14
 8002e08:	f7ff fe18 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8002e0c:	2008      	movs	r0, #8
 8002e0e:	f7ff fe15 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8002e12:	204b      	movs	r0, #75	; 0x4b
 8002e14:	f7ff fe12 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8002e18:	20a8      	movs	r0, #168	; 0xa8
 8002e1a:	f7ff fe0f 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8002e1e:	203b      	movs	r0, #59	; 0x3b
 8002e20:	f7ff fe0c 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 8002e24:	200a      	movs	r0, #10
 8002e26:	f7ff fe09 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8002e2a:	2014      	movs	r0, #20
 8002e2c:	f7ff fe06 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 8002e30:	2006      	movs	r0, #6
 8002e32:	f7ff fe03 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002e36:	2010      	movs	r0, #16
 8002e38:	f7ff fe00 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8002e3c:	2009      	movs	r0, #9
 8002e3e:	f7ff fdfd 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7ff fdfa 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 8002e48:	20e1      	movs	r0, #225	; 0xe1
 8002e4a:	f7ff fdd9 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7ff fdf4 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 8002e54:	201c      	movs	r0, #28
 8002e56:	f7ff fdf1 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 8002e5a:	2020      	movs	r0, #32
 8002e5c:	f7ff fdee 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 8002e60:	2004      	movs	r0, #4
 8002e62:	f7ff fdeb 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002e66:	2010      	movs	r0, #16
 8002e68:	f7ff fde8 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8002e6c:	2008      	movs	r0, #8
 8002e6e:	f7ff fde5 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8002e72:	2034      	movs	r0, #52	; 0x34
 8002e74:	f7ff fde2 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 8002e78:	2047      	movs	r0, #71	; 0x47
 8002e7a:	f7ff fddf 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 8002e7e:	2044      	movs	r0, #68	; 0x44
 8002e80:	f7ff fddc 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 8002e84:	2005      	movs	r0, #5
 8002e86:	f7ff fdd9 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8002e8a:	200b      	movs	r0, #11
 8002e8c:	f7ff fdd6 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8002e90:	2009      	movs	r0, #9
 8002e92:	f7ff fdd3 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 8002e96:	202f      	movs	r0, #47	; 0x2f
 8002e98:	f7ff fdd0 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8002e9c:	2036      	movs	r0, #54	; 0x36
 8002e9e:	f7ff fdcd 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8002ea2:	200f      	movs	r0, #15
 8002ea4:	f7ff fdca 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8002ea8:	202b      	movs	r0, #43	; 0x2b
 8002eaa:	f7ff fda9 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7ff fdc4 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7ff fdc1 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7ff fdbe 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8002ec0:	203f      	movs	r0, #63	; 0x3f
 8002ec2:	f7ff fdbb 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8002ec6:	202a      	movs	r0, #42	; 0x2a
 8002ec8:	f7ff fd9a 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7ff fdb5 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7ff fdb2 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7ff fdaf 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8002ede:	20ef      	movs	r0, #239	; 0xef
 8002ee0:	f7ff fdac 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8002ee4:	2011      	movs	r0, #17
 8002ee6:	f7ff fd8b 	bl	8002a00 <LCD_WR_REG>
    //nano_wait(120000000); // Wait 120 ms
    for(i=0; i<10000;i++);
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e002      	b.n	8002ef6 <LCD_Init+0x276>
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f242 720f 	movw	r2, #9999	; 0x270f
 8002efc:	4293      	cmp	r3, r2
 8002efe:	ddf7      	ble.n	8002ef0 <LCD_Init+0x270>
    LCD_WR_REG(0x29);     // Display on
 8002f00:	2029      	movs	r0, #41	; 0x29
 8002f02:	f7ff fd7d 	bl	8002a00 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8002f06:	2000      	movs	r0, #0
 8002f08:	f7ff fe12 	bl	8002b30 <LCD_direction>
    lcddev.select(0);
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <LCD_Init+0x29c>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	2000      	movs	r0, #0
 8002f12:	4798      	blx	r3
}
 8002f14:	bf00      	nop
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	200000e8 	.word	0x200000e8
 8002f20:	08002c29 	.word	0x08002c29
 8002f24:	08002bd9 	.word	0x08002bd9
 8002f28:	08002c55 	.word	0x08002c55

08002f2c <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4604      	mov	r4, r0
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4623      	mov	r3, r4
 8002f3c:	80fb      	strh	r3, [r7, #6]
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80bb      	strh	r3, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	807b      	strh	r3, [r7, #2]
 8002f46:	4613      	mov	r3, r2
 8002f48:	803b      	strh	r3, [r7, #0]
    LCD_WR_REG(lcddev.setxcmd);
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <LCD_SetWindow+0xa4>)
 8002f4c:	895b      	ldrh	r3, [r3, #10]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fd55 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	0a1b      	lsrs	r3, r3, #8
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fd6c 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fd67 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	0a1b      	lsrs	r3, r3, #8
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fd60 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fd5b 	bl	8002a3c <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <LCD_SetWindow+0xa4>)
 8002f88:	899b      	ldrh	r3, [r3, #12]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fd37 	bl	8002a00 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8002f92:	88bb      	ldrh	r3, [r7, #4]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fd4e 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8002fa0:	88bb      	ldrh	r3, [r7, #4]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fd49 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 8002faa:	883b      	ldrh	r3, [r7, #0]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fd42 	bl	8002a3c <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8002fb8:	883b      	ldrh	r3, [r7, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fd3d 	bl	8002a3c <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8002fc2:	f7ff fda9 	bl	8002b18 <LCD_WriteRAM_Prepare>
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd90      	pop	{r4, r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200000e8 	.word	0x200000e8

08002fd4 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	80fb      	strh	r3, [r7, #6]
	int j;

    lcddev.select(1);
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <LCD_Clear+0x94>)
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	4798      	blx	r3
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <LCD_Clear+0x94>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <LCD_Clear+0x94>)
 8002ff0:	885b      	ldrh	r3, [r3, #2]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7ff ff97 	bl	8002f2c <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 8002ffe:	f7ff fd3b 	bl	8002a78 <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e012      	b.n	800302e <LCD_Clear+0x5a>
    {
        for(m=0;m<lcddev.width;m++)
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e006      	b.n	800301c <LCD_Clear+0x48>
        {
            LCD_WriteData16(Color);
 800300e:	88fb      	ldrh	r3, [r7, #6]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff fd43 	bl	8002a9c <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3301      	adds	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <LCD_Clear+0x94>)
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4293      	cmp	r3, r2
 8003026:	d3f2      	bcc.n	800300e <LCD_Clear+0x3a>
    for(i=0;i<lcddev.height;i++)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	3301      	adds	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	4b0e      	ldr	r3, [pc, #56]	; (8003068 <LCD_Clear+0x94>)
 8003030:	885b      	ldrh	r3, [r3, #2]
 8003032:	461a      	mov	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4293      	cmp	r3, r2
 8003038:	d3e6      	bcc.n	8003008 <LCD_Clear+0x34>
        }
    }
    LCD_WriteData16_End();
 800303a:	f7ff fd47 	bl	8002acc <LCD_WriteData16_End>
    lcddev.select(0);
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <LCD_Clear+0x94>)
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2000      	movs	r0, #0
 8003044:	4798      	blx	r3
    for(j = 0; j < 10000; j++);
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e002      	b.n	8003052 <LCD_Clear+0x7e>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	3301      	adds	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f242 720f 	movw	r2, #9999	; 0x270f
 8003058:	4293      	cmp	r3, r2
 800305a:	ddf7      	ble.n	800304c <LCD_Clear+0x78>
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200000e8 	.word	0x200000e8

0800306c <_LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
static void _LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	80fb      	strh	r3, [r7, #6]
 8003076:	460b      	mov	r3, r1
 8003078:	80bb      	strh	r3, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	807b      	strh	r3, [r7, #2]
    LCD_SetWindow(x,y,x,y);
 800307e:	88bb      	ldrh	r3, [r7, #4]
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	88b9      	ldrh	r1, [r7, #4]
 8003084:	88f8      	ldrh	r0, [r7, #6]
 8003086:	f7ff ff51 	bl	8002f2c <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 800308a:	f7ff fcf5 	bl	8002a78 <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fd03 	bl	8002a9c <LCD_WriteData16>
    LCD_WriteData16_End();
 8003096:	f7ff fd19 	bl	8002acc <LCD_WriteData16_End>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_LCD_DrawLine>:

//===========================================================================
// Draw a line of color c from (x1,y1) to (x2,y2).
//===========================================================================
static void _LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 80030a2:	b590      	push	{r4, r7, lr}
 80030a4:	b08d      	sub	sp, #52	; 0x34
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4604      	mov	r4, r0
 80030aa:	4608      	mov	r0, r1
 80030ac:	4611      	mov	r1, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	4623      	mov	r3, r4
 80030b2:	80fb      	strh	r3, [r7, #6]
 80030b4:	4603      	mov	r3, r0
 80030b6:	80bb      	strh	r3, [r7, #4]
 80030b8:	460b      	mov	r3, r1
 80030ba:	807b      	strh	r3, [r7, #2]
 80030bc:	4613      	mov	r3, r2
 80030be:	803b      	strh	r3, [r7, #0]
    u16 t;
    int xerr=0,yerr=0,delta_x,delta_y,distance;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
    int incx,incy,uRow,uCol;

    delta_x=x2-x1;
 80030c8:	887a      	ldrh	r2, [r7, #2]
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	623b      	str	r3, [r7, #32]
    delta_y=y2-y1;
 80030d0:	883a      	ldrh	r2, [r7, #0]
 80030d2:	88bb      	ldrh	r3, [r7, #4]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	61fb      	str	r3, [r7, #28]
    uRow=x1;
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	60fb      	str	r3, [r7, #12]
    uCol=y1;
 80030dc:	88bb      	ldrh	r3, [r7, #4]
 80030de:	60bb      	str	r3, [r7, #8]
    if(delta_x>0)incx=1;
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	dd02      	ble.n	80030ec <_LCD_DrawLine+0x4a>
 80030e6:	2301      	movs	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e00b      	b.n	8003104 <_LCD_DrawLine+0x62>
    else if(delta_x==0)incx=0;
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <_LCD_DrawLine+0x56>
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e005      	b.n	8003104 <_LCD_DrawLine+0x62>
    else {incx=-1;delta_x=-delta_x;}
 80030f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	425b      	negs	r3, r3
 8003102:	623b      	str	r3, [r7, #32]
    if(delta_y>0)incy=1;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	dd02      	ble.n	8003110 <_LCD_DrawLine+0x6e>
 800310a:	2301      	movs	r3, #1
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	e00b      	b.n	8003128 <_LCD_DrawLine+0x86>
    else if(delta_y==0)incy=0;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d102      	bne.n	800311c <_LCD_DrawLine+0x7a>
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	e005      	b.n	8003128 <_LCD_DrawLine+0x86>
    else{incy=-1;delta_y=-delta_y;}
 800311c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	425b      	negs	r3, r3
 8003126:	61fb      	str	r3, [r7, #28]
    if( delta_x>delta_y)distance=delta_x;
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	429a      	cmp	r2, r3
 800312e:	dd02      	ble.n	8003136 <_LCD_DrawLine+0x94>
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e001      	b.n	800313a <_LCD_DrawLine+0x98>
    else distance=delta_y;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	61bb      	str	r3, [r7, #24]
    for(t=0;t<=distance+1;t++ )
 800313a:	2300      	movs	r3, #0
 800313c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800313e:	e02b      	b.n	8003198 <_LCD_DrawLine+0xf6>
    {
        _LCD_DrawPoint(uRow,uCol,c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	b29b      	uxth	r3, r3
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	b291      	uxth	r1, r2
 8003148:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff8d 	bl	800306c <_LCD_DrawPoint>
        xerr+=delta_x ;
 8003152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	4413      	add	r3, r2
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
        yerr+=delta_y ;
 800315a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
        if(xerr>distance)
 8003162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	429a      	cmp	r2, r3
 8003168:	dd07      	ble.n	800317a <_LCD_DrawLine+0xd8>
        {
            xerr-=distance;
 800316a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
            uRow+=incx;
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4413      	add	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
        }
        if(yerr>distance)
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	429a      	cmp	r2, r3
 8003180:	dd07      	ble.n	8003192 <_LCD_DrawLine+0xf0>
        {
            yerr-=distance;
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
            uCol+=incy;
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	60bb      	str	r3, [r7, #8]
    for(t=0;t<=distance+1;t++ )
 8003192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003194:	3301      	adds	r3, #1
 8003196:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003198:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	3301      	adds	r3, #1
 800319e:	429a      	cmp	r2, r3
 80031a0:	ddce      	ble.n	8003140 <_LCD_DrawLine+0x9e>
        }
    }
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	3734      	adds	r7, #52	; 0x34
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd90      	pop	{r4, r7, pc}

080031ac <LCD_DrawLine>:

void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	4604      	mov	r4, r0
 80031b4:	4608      	mov	r0, r1
 80031b6:	4611      	mov	r1, r2
 80031b8:	461a      	mov	r2, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	80fb      	strh	r3, [r7, #6]
 80031be:	4603      	mov	r3, r0
 80031c0:	80bb      	strh	r3, [r7, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	807b      	strh	r3, [r7, #2]
 80031c6:	4613      	mov	r3, r2
 80031c8:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <LCD_DrawLine+0x48>)
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2001      	movs	r0, #1
 80031d0:	4798      	blx	r3
    _LCD_DrawLine(x1,y1,x2,y2,c);
 80031d2:	883c      	ldrh	r4, [r7, #0]
 80031d4:	887a      	ldrh	r2, [r7, #2]
 80031d6:	88b9      	ldrh	r1, [r7, #4]
 80031d8:	88f8      	ldrh	r0, [r7, #6]
 80031da:	8b3b      	ldrh	r3, [r7, #24]
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	4623      	mov	r3, r4
 80031e0:	f7ff ff5f 	bl	80030a2 <_LCD_DrawLine>
    lcddev.select(0);
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <LCD_DrawLine+0x48>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2000      	movs	r0, #0
 80031ea:	4798      	blx	r3
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd90      	pop	{r4, r7, pc}
 80031f4:	200000e8 	.word	0x200000e8

080031f8 <_LCD_Fill>:

//===========================================================================
// Fill a rectangle with color c from (x1,y1) to (x2,y2).
//===========================================================================
static void _LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4604      	mov	r4, r0
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	4623      	mov	r3, r4
 8003208:	80fb      	strh	r3, [r7, #6]
 800320a:	4603      	mov	r3, r0
 800320c:	80bb      	strh	r3, [r7, #4]
 800320e:	460b      	mov	r3, r1
 8003210:	807b      	strh	r3, [r7, #2]
 8003212:	4613      	mov	r3, r2
 8003214:	803b      	strh	r3, [r7, #0]
    u16 i,j;
    u16 width=ex-sx+1;
 8003216:	887a      	ldrh	r2, [r7, #2]
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	b29b      	uxth	r3, r3
 800321e:	3301      	adds	r3, #1
 8003220:	817b      	strh	r3, [r7, #10]
    u16 height=ey-sy+1;
 8003222:	883a      	ldrh	r2, [r7, #0]
 8003224:	88bb      	ldrh	r3, [r7, #4]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	b29b      	uxth	r3, r3
 800322a:	3301      	adds	r3, #1
 800322c:	813b      	strh	r3, [r7, #8]
    LCD_SetWindow(sx,sy,ex,ey);
 800322e:	883b      	ldrh	r3, [r7, #0]
 8003230:	887a      	ldrh	r2, [r7, #2]
 8003232:	88b9      	ldrh	r1, [r7, #4]
 8003234:	88f8      	ldrh	r0, [r7, #6]
 8003236:	f7ff fe79 	bl	8002f2c <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 800323a:	f7ff fc1d 	bl	8002a78 <LCD_WriteData16_Prepare>
    for(i=0;i<height;i++)
 800323e:	2300      	movs	r3, #0
 8003240:	81fb      	strh	r3, [r7, #14]
 8003242:	e010      	b.n	8003266 <_LCD_Fill+0x6e>
    {
        for(j=0;j<width;j++)
 8003244:	2300      	movs	r3, #0
 8003246:	81bb      	strh	r3, [r7, #12]
 8003248:	e006      	b.n	8003258 <_LCD_Fill+0x60>
        LCD_WriteData16(color);
 800324a:	8c3b      	ldrh	r3, [r7, #32]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fc25 	bl	8002a9c <LCD_WriteData16>
        for(j=0;j<width;j++)
 8003252:	89bb      	ldrh	r3, [r7, #12]
 8003254:	3301      	adds	r3, #1
 8003256:	81bb      	strh	r3, [r7, #12]
 8003258:	89ba      	ldrh	r2, [r7, #12]
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	429a      	cmp	r2, r3
 800325e:	d3f4      	bcc.n	800324a <_LCD_Fill+0x52>
    for(i=0;i<height;i++)
 8003260:	89fb      	ldrh	r3, [r7, #14]
 8003262:	3301      	adds	r3, #1
 8003264:	81fb      	strh	r3, [r7, #14]
 8003266:	89fa      	ldrh	r2, [r7, #14]
 8003268:	893b      	ldrh	r3, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	d3ea      	bcc.n	8003244 <_LCD_Fill+0x4c>
    }
    LCD_WriteData16_End();
 800326e:	f7ff fc2d 	bl	8002acc <LCD_WriteData16_End>
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}
	...

0800327c <LCD_DrawFillRectangle>:

//===========================================================================
// Draw a filled rectangle of lines of color c from (x1,y1) to (x2,y2).
//===========================================================================
void LCD_DrawFillRectangle(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b085      	sub	sp, #20
 8003280:	af02      	add	r7, sp, #8
 8003282:	4604      	mov	r4, r0
 8003284:	4608      	mov	r0, r1
 8003286:	4611      	mov	r1, r2
 8003288:	461a      	mov	r2, r3
 800328a:	4623      	mov	r3, r4
 800328c:	80fb      	strh	r3, [r7, #6]
 800328e:	4603      	mov	r3, r0
 8003290:	80bb      	strh	r3, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	807b      	strh	r3, [r7, #2]
 8003296:	4613      	mov	r3, r2
 8003298:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <LCD_DrawFillRectangle+0x48>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2001      	movs	r0, #1
 80032a0:	4798      	blx	r3
    _LCD_Fill(x1,y1,x2,y2,c);
 80032a2:	883c      	ldrh	r4, [r7, #0]
 80032a4:	887a      	ldrh	r2, [r7, #2]
 80032a6:	88b9      	ldrh	r1, [r7, #4]
 80032a8:	88f8      	ldrh	r0, [r7, #6]
 80032aa:	8b3b      	ldrh	r3, [r7, #24]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	4623      	mov	r3, r4
 80032b0:	f7ff ffa2 	bl	80031f8 <_LCD_Fill>
    lcddev.select(0);
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <LCD_DrawFillRectangle+0x48>)
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	2000      	movs	r0, #0
 80032ba:	4798      	blx	r3
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	200000e8 	.word	0x200000e8

080032c8 <_swap>:
    _LCD_DrawLine(x2,y2,x0,y0,c);
    lcddev.select(0);
}

static void _swap(u16 *a, u16 *b)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
    u16 tmp;
    tmp = *a;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	81fb      	strh	r3, [r7, #14]
    *a = *b;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	801a      	strh	r2, [r3, #0]
    *b = tmp;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	89fa      	ldrh	r2, [r7, #14]
 80032e4:	801a      	strh	r2, [r3, #0]
}
 80032e6:	bf00      	nop
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
	...

080032f4 <LCD_DrawFillTriangle>:

//===========================================================================
// Draw a filled triangle of color c with vertices at (x0,y0), (x1,y1), (x2,y2).
//===========================================================================
void LCD_DrawFillTriangle(u16 x0,u16 y0, u16 x1,u16 y1, u16 x2,u16 y2, u16 c)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b08f      	sub	sp, #60	; 0x3c
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	4604      	mov	r4, r0
 80032fc:	4608      	mov	r0, r1
 80032fe:	4611      	mov	r1, r2
 8003300:	461a      	mov	r2, r3
 8003302:	4623      	mov	r3, r4
 8003304:	80fb      	strh	r3, [r7, #6]
 8003306:	4603      	mov	r3, r0
 8003308:	80bb      	strh	r3, [r7, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	807b      	strh	r3, [r7, #2]
 800330e:	4613      	mov	r3, r2
 8003310:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 8003312:	4b90      	ldr	r3, [pc, #576]	; (8003554 <LCD_DrawFillTriangle+0x260>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	2001      	movs	r0, #1
 8003318:	4798      	blx	r3
    u16 a, b, y, last;
    int dx01, dy01, dx02, dy02, dx12, dy12;
    long sa = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
    long sb = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
    if (y0 > y1)
 8003322:	88ba      	ldrh	r2, [r7, #4]
 8003324:	883b      	ldrh	r3, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d90b      	bls.n	8003342 <LCD_DrawFillTriangle+0x4e>
    {
    _swap(&y0,&y1);
 800332a:	463a      	mov	r2, r7
 800332c:	1d3b      	adds	r3, r7, #4
 800332e:	4611      	mov	r1, r2
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ffc9 	bl	80032c8 <_swap>
        _swap(&x0,&x1);
 8003336:	1cba      	adds	r2, r7, #2
 8003338:	1dbb      	adds	r3, r7, #6
 800333a:	4611      	mov	r1, r2
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ffc3 	bl	80032c8 <_swap>
    }
    if (y1 > y2)
 8003342:	883a      	ldrh	r2, [r7, #0]
 8003344:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003348:	429a      	cmp	r2, r3
 800334a:	d90c      	bls.n	8003366 <LCD_DrawFillTriangle+0x72>
    {
    _swap(&y2,&y1);
 800334c:	463a      	mov	r2, r7
 800334e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ffb7 	bl	80032c8 <_swap>
        _swap(&x2,&x1);
 800335a:	1cbb      	adds	r3, r7, #2
 800335c:	4619      	mov	r1, r3
 800335e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003362:	f7ff ffb1 	bl	80032c8 <_swap>
    }
  if (y0 > y1)
 8003366:	88ba      	ldrh	r2, [r7, #4]
 8003368:	883b      	ldrh	r3, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d90b      	bls.n	8003386 <LCD_DrawFillTriangle+0x92>
    {
    _swap(&y0,&y1);
 800336e:	463a      	mov	r2, r7
 8003370:	1d3b      	adds	r3, r7, #4
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff ffa7 	bl	80032c8 <_swap>
        _swap(&x0,&x1);
 800337a:	1cba      	adds	r2, r7, #2
 800337c:	1dbb      	adds	r3, r7, #6
 800337e:	4611      	mov	r1, r2
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ffa1 	bl	80032c8 <_swap>
  }
    if(y0 == y2)
 8003386:	88ba      	ldrh	r2, [r7, #4]
 8003388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800338c:	429a      	cmp	r2, r3
 800338e:	d12c      	bne.n	80033ea <LCD_DrawFillTriangle+0xf6>
    {
        a = b = x0;
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	813b      	strh	r3, [r7, #8]
 8003394:	893b      	ldrh	r3, [r7, #8]
 8003396:	817b      	strh	r3, [r7, #10]
        if(x1 < a)
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	429a      	cmp	r2, r3
 800339e:	d202      	bcs.n	80033a6 <LCD_DrawFillTriangle+0xb2>
    {
            a = x1;
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	817b      	strh	r3, [r7, #10]
 80033a4:	e005      	b.n	80033b2 <LCD_DrawFillTriangle+0xbe>
    }
    else if(x1 > b)
 80033a6:	887a      	ldrh	r2, [r7, #2]
 80033a8:	893b      	ldrh	r3, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d901      	bls.n	80033b2 <LCD_DrawFillTriangle+0xbe>
    {
            b = x1;
 80033ae:	887b      	ldrh	r3, [r7, #2]
 80033b0:	813b      	strh	r3, [r7, #8]
    }
    if(x2 < a)
 80033b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d203      	bcs.n	80033c4 <LCD_DrawFillTriangle+0xd0>
    {
            a = x2;
 80033bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033c0:	817b      	strh	r3, [r7, #10]
 80033c2:	e007      	b.n	80033d4 <LCD_DrawFillTriangle+0xe0>
    }
        else if(x2 > b)
 80033c4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80033c8:	893b      	ldrh	r3, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d902      	bls.n	80033d4 <LCD_DrawFillTriangle+0xe0>
    {
            b = x2;
 80033ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80033d2:	813b      	strh	r3, [r7, #8]
    }
        _LCD_Fill(a,y0,b,y0,c);
 80033d4:	8978      	ldrh	r0, [r7, #10]
 80033d6:	88b9      	ldrh	r1, [r7, #4]
 80033d8:	893a      	ldrh	r2, [r7, #8]
 80033da:	88bc      	ldrh	r4, [r7, #4]
 80033dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	4623      	mov	r3, r4
 80033e4:	f7ff ff08 	bl	80031f8 <_LCD_Fill>
 80033e8:	e0b1      	b.n	800354e <LCD_DrawFillTriangle+0x25a>
    return;
    }
    dx01 = x1 - x0;
 80033ea:	887b      	ldrh	r3, [r7, #2]
 80033ec:	461a      	mov	r2, r3
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	623b      	str	r3, [r7, #32]
    dy01 = y1 - y0;
 80033f4:	883b      	ldrh	r3, [r7, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	88bb      	ldrh	r3, [r7, #4]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	61fb      	str	r3, [r7, #28]
    dx02 = x2 - x0;
 80033fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003402:	461a      	mov	r2, r3
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	61bb      	str	r3, [r7, #24]
    dy02 = y2 - y0;
 800340a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800340e:	461a      	mov	r2, r3
 8003410:	88bb      	ldrh	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
    dx12 = x2 - x1;
 8003416:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800341a:	461a      	mov	r2, r3
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	613b      	str	r3, [r7, #16]
    dy12 = y2 - y1;
 8003422:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003426:	461a      	mov	r2, r3
 8003428:	883b      	ldrh	r3, [r7, #0]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	60fb      	str	r3, [r7, #12]

    if(y1 == y2)
 800342e:	883a      	ldrh	r2, [r7, #0]
 8003430:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003434:	429a      	cmp	r2, r3
 8003436:	d102      	bne.n	800343e <LCD_DrawFillTriangle+0x14a>
    {
        last = y1;
 8003438:	883b      	ldrh	r3, [r7, #0]
 800343a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800343c:	e002      	b.n	8003444 <LCD_DrawFillTriangle+0x150>
    }
  else
    {
        last = y1-1;
 800343e:	883b      	ldrh	r3, [r7, #0]
 8003440:	3b01      	subs	r3, #1
 8003442:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    for(y=y0; y<=last; y++)
 8003444:	88bb      	ldrh	r3, [r7, #4]
 8003446:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003448:	e032      	b.n	80034b0 <LCD_DrawFillTriangle+0x1bc>
    {
        a = x0 + sa / dy01;
 800344a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003452:	b29a      	uxth	r2, r3
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	4413      	add	r3, r2
 8003458:	b29b      	uxth	r3, r3
 800345a:	817b      	strh	r3, [r7, #10]
        b = x0 + sb / dy02;
 800345c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	fb92 f3f3 	sdiv	r3, r2, r3
 8003464:	b29a      	uxth	r2, r3
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	4413      	add	r3, r2
 800346a:	b29b      	uxth	r3, r3
 800346c:	813b      	strh	r3, [r7, #8]
        sa += dx01;
 800346e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003470:	6a3b      	ldr	r3, [r7, #32]
 8003472:	4413      	add	r3, r2
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
    sb += dx02;
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	4413      	add	r3, r2
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
    if(a > b)
 800347e:	897a      	ldrh	r2, [r7, #10]
 8003480:	893b      	ldrh	r3, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d907      	bls.n	8003496 <LCD_DrawFillTriangle+0x1a2>
    {
            _swap(&a,&b);
 8003486:	f107 0208 	add.w	r2, r7, #8
 800348a:	f107 030a 	add.w	r3, r7, #10
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff ff19 	bl	80032c8 <_swap>
        }
        _LCD_Fill(a,y,b,y,c);
 8003496:	8978      	ldrh	r0, [r7, #10]
 8003498:	893a      	ldrh	r2, [r7, #8]
 800349a:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 800349c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800349e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	4623      	mov	r3, r4
 80034a6:	f7ff fea7 	bl	80031f8 <_LCD_Fill>
    for(y=y0; y<=last; y++)
 80034aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034ac:	3301      	adds	r3, #1
 80034ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80034b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80034b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d9c8      	bls.n	800344a <LCD_DrawFillTriangle+0x156>
    }
    sa = dx12 * (y - y1);
 80034b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034ba:	883a      	ldrh	r2, [r7, #0]
 80034bc:	1a9a      	subs	r2, r3, r2
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
    sb = dx02 * (y - y0);
 80034c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034c8:	88ba      	ldrh	r2, [r7, #4]
 80034ca:	1a9a      	subs	r2, r3, r2
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    for(; y<=y2; y++)
 80034d4:	e032      	b.n	800353c <LCD_DrawFillTriangle+0x248>
    {
        a = x1 + sa / dy12;
 80034d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	fb92 f3f3 	sdiv	r3, r2, r3
 80034de:	b29a      	uxth	r2, r3
 80034e0:	887b      	ldrh	r3, [r7, #2]
 80034e2:	4413      	add	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	817b      	strh	r3, [r7, #10]
        b = x0 + sb / dy02;
 80034e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	4413      	add	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	813b      	strh	r3, [r7, #8]
        sa += dx12;
 80034fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4413      	add	r3, r2
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
        sb += dx02;
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
        if(a > b)
 800350a:	897a      	ldrh	r2, [r7, #10]
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	d907      	bls.n	8003522 <LCD_DrawFillTriangle+0x22e>
        {
            _swap(&a,&b);
 8003512:	f107 0208 	add.w	r2, r7, #8
 8003516:	f107 030a 	add.w	r3, r7, #10
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fed3 	bl	80032c8 <_swap>
        }
        _LCD_Fill(a,y,b,y,c);
 8003522:	8978      	ldrh	r0, [r7, #10]
 8003524:	893a      	ldrh	r2, [r7, #8]
 8003526:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8003528:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800352a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	4623      	mov	r3, r4
 8003532:	f7ff fe61 	bl	80031f8 <_LCD_Fill>
    for(; y<=y2; y++)
 8003536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003538:	3301      	adds	r3, #1
 800353a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800353c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003540:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003542:	429a      	cmp	r2, r3
 8003544:	d9c7      	bls.n	80034d6 <LCD_DrawFillTriangle+0x1e2>
    }
    lcddev.select(0);
 8003546:	4b03      	ldr	r3, [pc, #12]	; (8003554 <LCD_DrawFillTriangle+0x260>)
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	2000      	movs	r0, #0
 800354c:	4798      	blx	r3
}
 800354e:	3734      	adds	r7, #52	; 0x34
 8003550:	46bd      	mov	sp, r7
 8003552:	bd90      	pop	{r4, r7, pc}
 8003554:	200000e8 	.word	0x200000e8

08003558 <_LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void _LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	4604      	mov	r4, r0
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	461a      	mov	r2, r3
 8003566:	4623      	mov	r3, r4
 8003568:	80fb      	strh	r3, [r7, #6]
 800356a:	4603      	mov	r3, r0
 800356c:	80bb      	strh	r3, [r7, #4]
 800356e:	460b      	mov	r3, r1
 8003570:	807b      	strh	r3, [r7, #2]
 8003572:	4613      	mov	r3, r2
 8003574:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 8003576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800357a:	3b20      	subs	r3, #32
 800357c:	f887 3020 	strb.w	r3, [r7, #32]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8003580:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003584:	085b      	lsrs	r3, r3, #1
 8003586:	b2db      	uxtb	r3, r3
 8003588:	b29a      	uxth	r2, r3
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	4413      	add	r3, r2
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29c      	uxth	r4, r3
 8003594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003598:	b29a      	uxth	r2, r3
 800359a:	88bb      	ldrh	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	88b9      	ldrh	r1, [r7, #4]
 80035a6:	88f8      	ldrh	r0, [r7, #6]
 80035a8:	4622      	mov	r2, r4
 80035aa:	f7ff fcbf 	bl	8002f2c <LCD_SetWindow>
    if (!mode) {
 80035ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d147      	bne.n	8003646 <_LCD_DrawChar+0xee>
        LCD_WriteData16_Prepare();
 80035b6:	f7ff fa5f 	bl	8002a78 <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 80035ba:	2300      	movs	r3, #0
 80035bc:	73bb      	strb	r3, [r7, #14]
 80035be:	e03a      	b.n	8003636 <_LCD_DrawChar+0xde>
            if (size==12)
 80035c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d10c      	bne.n	80035e2 <_LCD_DrawChar+0x8a>
                temp=asc2_1206[num][pos];
 80035c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80035cc:	7bb9      	ldrb	r1, [r7, #14]
 80035ce:	4844      	ldr	r0, [pc, #272]	; (80036e0 <_LCD_DrawChar+0x188>)
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4403      	add	r3, r0
 80035da:	440b      	add	r3, r1
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	73fb      	strb	r3, [r7, #15]
 80035e0:	e008      	b.n	80035f4 <_LCD_DrawChar+0x9c>
            else
                temp=asc2_1608[num][pos];
 80035e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	493e      	ldr	r1, [pc, #248]	; (80036e4 <_LCD_DrawChar+0x18c>)
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	440a      	add	r2, r1
 80035ee:	4413      	add	r3, r2
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++) {
 80035f4:	2300      	movs	r3, #0
 80035f6:	737b      	strb	r3, [r7, #13]
 80035f8:	e013      	b.n	8003622 <_LCD_DrawChar+0xca>
                if (temp&0x01)
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <_LCD_DrawChar+0xb6>
                    LCD_WriteData16(fc);
 8003604:	887b      	ldrh	r3, [r7, #2]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fa48 	bl	8002a9c <LCD_WriteData16>
 800360c:	e003      	b.n	8003616 <_LCD_DrawChar+0xbe>
                else
                    LCD_WriteData16(bc);
 800360e:	883b      	ldrh	r3, [r7, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fa43 	bl	8002a9c <LCD_WriteData16>
                temp>>=1;
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++) {
 800361c:	7b7b      	ldrb	r3, [r7, #13]
 800361e:	3301      	adds	r3, #1
 8003620:	737b      	strb	r3, [r7, #13]
 8003622:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	b2db      	uxtb	r3, r3
 800362a:	7b7a      	ldrb	r2, [r7, #13]
 800362c:	429a      	cmp	r2, r3
 800362e:	d3e4      	bcc.n	80035fa <_LCD_DrawChar+0xa2>
        for(pos=0;pos<size;pos++) {
 8003630:	7bbb      	ldrb	r3, [r7, #14]
 8003632:	3301      	adds	r3, #1
 8003634:	73bb      	strb	r3, [r7, #14]
 8003636:	7bba      	ldrb	r2, [r7, #14]
 8003638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800363c:	429a      	cmp	r2, r3
 800363e:	d3bf      	bcc.n	80035c0 <_LCD_DrawChar+0x68>

            }
        }
        LCD_WriteData16_End();
 8003640:	f7ff fa44 	bl	8002acc <LCD_WriteData16_End>
                    _LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 8003644:	e047      	b.n	80036d6 <_LCD_DrawChar+0x17e>
        for(pos=0;pos<size;pos++)
 8003646:	2300      	movs	r3, #0
 8003648:	73bb      	strb	r3, [r7, #14]
 800364a:	e03f      	b.n	80036cc <_LCD_DrawChar+0x174>
            if (size==12)
 800364c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d10c      	bne.n	800366e <_LCD_DrawChar+0x116>
                temp=asc2_1206[num][pos];
 8003654:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003658:	7bb9      	ldrb	r1, [r7, #14]
 800365a:	4821      	ldr	r0, [pc, #132]	; (80036e0 <_LCD_DrawChar+0x188>)
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4403      	add	r3, r0
 8003666:	440b      	add	r3, r1
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	73fb      	strb	r3, [r7, #15]
 800366c:	e008      	b.n	8003680 <_LCD_DrawChar+0x128>
                temp=asc2_1608[num][pos];
 800366e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003672:	7bbb      	ldrb	r3, [r7, #14]
 8003674:	491b      	ldr	r1, [pc, #108]	; (80036e4 <_LCD_DrawChar+0x18c>)
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	440a      	add	r2, r1
 800367a:	4413      	add	r3, r2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++)
 8003680:	2300      	movs	r3, #0
 8003682:	737b      	strb	r3, [r7, #13]
 8003684:	e018      	b.n	80036b8 <_LCD_DrawChar+0x160>
                if(temp&0x01)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <_LCD_DrawChar+0x154>
                    _LCD_DrawPoint(x+t,y+pos,fc);
 8003690:	7b7b      	ldrb	r3, [r7, #13]
 8003692:	b29a      	uxth	r2, r3
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	4413      	add	r3, r2
 8003698:	b298      	uxth	r0, r3
 800369a:	7bbb      	ldrb	r3, [r7, #14]
 800369c:	b29a      	uxth	r2, r3
 800369e:	88bb      	ldrh	r3, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	4619      	mov	r1, r3
 80036a8:	f7ff fce0 	bl	800306c <_LCD_DrawPoint>
                temp>>=1;
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++)
 80036b2:	7b7b      	ldrb	r3, [r7, #13]
 80036b4:	3301      	adds	r3, #1
 80036b6:	737b      	strb	r3, [r7, #13]
 80036b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	7b7a      	ldrb	r2, [r7, #13]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d3df      	bcc.n	8003686 <_LCD_DrawChar+0x12e>
        for(pos=0;pos<size;pos++)
 80036c6:	7bbb      	ldrb	r3, [r7, #14]
 80036c8:	3301      	adds	r3, #1
 80036ca:	73bb      	strb	r3, [r7, #14]
 80036cc:	7bba      	ldrb	r2, [r7, #14]
 80036ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3ba      	bcc.n	800364c <_LCD_DrawChar+0xf4>
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}
 80036de:	bf00      	nop
 80036e0:	0800c540 	.word	0x0800c540
 80036e4:	0800c9b4 	.word	0x0800c9b4

080036e8 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	4604      	mov	r4, r0
 80036f0:	4608      	mov	r0, r1
 80036f2:	4611      	mov	r1, r2
 80036f4:	461a      	mov	r2, r3
 80036f6:	4623      	mov	r3, r4
 80036f8:	80fb      	strh	r3, [r7, #6]
 80036fa:	4603      	mov	r3, r0
 80036fc:	80bb      	strh	r3, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	807b      	strh	r3, [r7, #2]
 8003702:	4613      	mov	r3, r2
 8003704:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <LCD_DrawString+0x94>)
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2001      	movs	r0, #1
 800370c:	4798      	blx	r3
    while((*p<='~')&&(*p>=' '))
 800370e:	e023      	b.n	8003758 <LCD_DrawString+0x70>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <LCD_DrawString+0x94>)
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	88fa      	ldrh	r2, [r7, #6]
 8003716:	429a      	cmp	r2, r3
 8003718:	d22b      	bcs.n	8003772 <LCD_DrawString+0x8a>
 800371a:	4b18      	ldr	r3, [pc, #96]	; (800377c <LCD_DrawString+0x94>)
 800371c:	885b      	ldrh	r3, [r3, #2]
 800371e:	88ba      	ldrh	r2, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	d226      	bcs.n	8003772 <LCD_DrawString+0x8a>
        return;
        _LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	883d      	ldrh	r5, [r7, #0]
 800372a:	887c      	ldrh	r4, [r7, #2]
 800372c:	88b9      	ldrh	r1, [r7, #4]
 800372e:	88f8      	ldrh	r0, [r7, #6]
 8003730:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003734:	9202      	str	r2, [sp, #8]
 8003736:	7f3a      	ldrb	r2, [r7, #28]
 8003738:	9201      	str	r2, [sp, #4]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	462b      	mov	r3, r5
 800373e:	4622      	mov	r2, r4
 8003740:	f7ff ff0a 	bl	8003558 <_LCD_DrawChar>
        x+=size/2;
 8003744:	7f3b      	ldrb	r3, [r7, #28]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	b29a      	uxth	r2, r3
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	4413      	add	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
        p++;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	3301      	adds	r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
    while((*p<='~')&&(*p>=' '))
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b7e      	cmp	r3, #126	; 0x7e
 800375e:	d803      	bhi.n	8003768 <LCD_DrawString+0x80>
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b1f      	cmp	r3, #31
 8003766:	d8d3      	bhi.n	8003710 <LCD_DrawString+0x28>
    }
    lcddev.select(0);
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <LCD_DrawString+0x94>)
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	2000      	movs	r0, #0
 800376e:	4798      	blx	r3
 8003770:	e000      	b.n	8003774 <LCD_DrawString+0x8c>
        return;
 8003772:	bf00      	nop
}
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bdb0      	pop	{r4, r5, r7, pc}
 800377a:	bf00      	nop
 800377c:	200000e8 	.word	0x200000e8

08003780 <print_labels>:
void small_delay() {
    nano_wait(10000);
    return;
}

void print_labels() {
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af04      	add	r7, sp, #16
	LCD_DrawString(5, 10, WHITE, BLACK, "Aerial Ace Status Window", 16, 0);
 8003786:	2300      	movs	r3, #0
 8003788:	9302      	str	r3, [sp, #8]
 800378a:	2310      	movs	r3, #16
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <print_labels+0x80>)
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	2300      	movs	r3, #0
 8003794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003798:	210a      	movs	r1, #10
 800379a:	2005      	movs	r0, #5
 800379c:	f7ff ffa4 	bl	80036e8 <LCD_DrawString>
	LCD_DrawFillRectangle(2, 35, 300, 110, LGRAYBLUE);
 80037a0:	f24a 6351 	movw	r3, #42577	; 0xa651
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	236e      	movs	r3, #110	; 0x6e
 80037a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037ac:	2123      	movs	r1, #35	; 0x23
 80037ae:	2002      	movs	r0, #2
 80037b0:	f7ff fd64 	bl	800327c <LCD_DrawFillRectangle>
	LCD_DrawString(5, 45, WHITE, LGRAYBLUE, "Current Mode", 16, 0);
 80037b4:	2300      	movs	r3, #0
 80037b6:	9302      	str	r3, [sp, #8]
 80037b8:	2310      	movs	r3, #16
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <print_labels+0x84>)
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f24a 6351 	movw	r3, #42577	; 0xa651
 80037c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c8:	212d      	movs	r1, #45	; 0x2d
 80037ca:	2005      	movs	r0, #5
 80037cc:	f7ff ff8c 	bl	80036e8 <LCD_DrawString>
	LCD_DrawLine(2, 30, 300, 30, WHITE);
 80037d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	231e      	movs	r3, #30
 80037d8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037dc:	211e      	movs	r1, #30
 80037de:	2002      	movs	r0, #2
 80037e0:	f7ff fce4 	bl	80031ac <LCD_DrawLine>
	LCD_DrawLine(2, 160, 300, 160, WHITE);
 80037e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	23a0      	movs	r3, #160	; 0xa0
 80037ec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037f0:	21a0      	movs	r1, #160	; 0xa0
 80037f2:	2002      	movs	r0, #2
 80037f4:	f7ff fcda 	bl	80031ac <LCD_DrawLine>
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	0800c3a8 	.word	0x0800c3a8
 8003804:	0800c3c4 	.word	0x0800c3c4

08003808 <print_title>:

void print_title(DispState currDisp) {
 8003808:	b084      	sub	sp, #16
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af04      	add	r7, sp, #16
 8003810:	f107 0c08 	add.w	ip, r7, #8
 8003814:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_DrawString(50, 70, WHITE, LGRAYBLUE, currDisp.title, 16, 0);
 8003818:	2300      	movs	r3, #0
 800381a:	9302      	str	r3, [sp, #8]
 800381c:	2310      	movs	r3, #16
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	f24a 6351 	movw	r3, #42577	; 0xa651
 800382a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800382e:	2146      	movs	r1, #70	; 0x46
 8003830:	2032      	movs	r0, #50	; 0x32
 8003832:	f7ff ff59 	bl	80036e8 <LCD_DrawString>
	return;
 8003836:	bf00      	nop
}
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800383e:	b004      	add	sp, #16
 8003840:	4770      	bx	lr

08003842 <print_command>:

void print_command(DispState currDisp) {
 8003842:	b084      	sub	sp, #16
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af04      	add	r7, sp, #16
 800384a:	f107 0c10 	add.w	ip, r7, #16
 800384e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_DrawString(0, 130,  WHITE, BLACK, currDisp.command_ln1, 12, 0);
 8003852:	2300      	movs	r3, #0
 8003854:	9302      	str	r3, [sp, #8]
 8003856:	230c      	movs	r3, #12
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	f107 03ba 	add.w	r3, r7, #186	; 0xba
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2300      	movs	r3, #0
 8003862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003866:	2182      	movs	r1, #130	; 0x82
 8003868:	2000      	movs	r0, #0
 800386a:	f7ff ff3d 	bl	80036e8 <LCD_DrawString>
	if(currDisp.state == CAL_UNFLEXED || currDisp.state == CAL_FLEXED)
 800386e:	7c3b      	ldrb	r3, [r7, #16]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d002      	beq.n	800387a <print_command+0x38>
 8003874:	7c3b      	ldrb	r3, [r7, #16]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d10d      	bne.n	8003896 <print_command+0x54>
	{
		LCD_DrawString(0, 130,  WHITE, BLACK, currDisp.command_ln2, 12, 0);
 800387a:	2300      	movs	r3, #0
 800387c:	9302      	str	r3, [sp, #8]
 800387e:	230c      	movs	r3, #12
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	f507 73c1 	add.w	r3, r7, #386	; 0x182
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2300      	movs	r3, #0
 800388a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800388e:	2182      	movs	r1, #130	; 0x82
 8003890:	2000      	movs	r0, #0
 8003892:	f7ff ff29 	bl	80036e8 <LCD_DrawString>
	}
	for(int i = 0; i < 1000; i++);
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	e002      	b.n	80038a2 <print_command+0x60>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3301      	adds	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a8:	dbf8      	blt.n	800389c <print_command+0x5a>
	return;
 80038aa:	bf00      	nop
}
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038b4:	b004      	add	sp, #16
 80038b6:	4770      	bx	lr

080038b8 <print_stats>:

void print_stats(DispState currDisp) {
 80038b8:	b084      	sub	sp, #16
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b0a4      	sub	sp, #144	; 0x90
 80038be:	af04      	add	r7, sp, #16
 80038c0:	f107 0c88 	add.w	ip, r7, #136	; 0x88
 80038c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  char yaw[30];
	char roll[30];
	char pitch[30];
	char throttle[30];

	sprintf(yaw, "%.3f", currDisp.yaw_num);
 80038c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fc fe33 	bl	8000538 <__aeabi_f2d>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80038da:	4973      	ldr	r1, [pc, #460]	; (8003aa8 <print_stats+0x1f0>)
 80038dc:	f006 fa58 	bl	8009d90 <siprintf>
	sprintf(roll, "%.3f", currDisp.roll_num);
 80038e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fe27 	bl	8000538 <__aeabi_f2d>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80038f2:	496d      	ldr	r1, [pc, #436]	; (8003aa8 <print_stats+0x1f0>)
 80038f4:	f006 fa4c 	bl	8009d90 <siprintf>
	sprintf(pitch, "%.3f", currDisp.pitch_num);
 80038f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fc fe1b 	bl	8000538 <__aeabi_f2d>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	f107 0020 	add.w	r0, r7, #32
 800390a:	4967      	ldr	r1, [pc, #412]	; (8003aa8 <print_stats+0x1f0>)
 800390c:	f006 fa40 	bl	8009d90 <siprintf>
	sprintf(throttle, "%.3f", currDisp.throttle_num);
 8003910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe0f 	bl	8000538 <__aeabi_f2d>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4638      	mov	r0, r7
 8003920:	4961      	ldr	r1, [pc, #388]	; (8003aa8 <print_stats+0x1f0>)
 8003922:	f006 fa35 	bl	8009d90 <siprintf>

	LCD_DrawLine(90, 165, 90, 330, WHITE);
 8003926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8003930:	225a      	movs	r2, #90	; 0x5a
 8003932:	21a5      	movs	r1, #165	; 0xa5
 8003934:	205a      	movs	r0, #90	; 0x5a
 8003936:	f7ff fc39 	bl	80031ac <LCD_DrawLine>
	LCD_DrawLine(160, 165, 160, 330, WHITE);
 800393a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8003944:	22a0      	movs	r2, #160	; 0xa0
 8003946:	21a5      	movs	r1, #165	; 0xa5
 8003948:	20a0      	movs	r0, #160	; 0xa0
 800394a:	f7ff fc2f 	bl	80031ac <LCD_DrawLine>

	LCD_DrawString(10, 175, WHITE, BLACK, "PITCH", 16, 0); //90
 800394e:	2300      	movs	r3, #0
 8003950:	9302      	str	r3, [sp, #8]
 8003952:	2310      	movs	r3, #16
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	4b55      	ldr	r3, [pc, #340]	; (8003aac <print_stats+0x1f4>)
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2300      	movs	r3, #0
 800395c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003960:	21af      	movs	r1, #175	; 0xaf
 8003962:	200a      	movs	r0, #10
 8003964:	f7ff fec0 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(10, 210, WHITE, BLACK, "YAW", 16, 0); //150
 8003968:	2300      	movs	r3, #0
 800396a:	9302      	str	r3, [sp, #8]
 800396c:	2310      	movs	r3, #16
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <print_stats+0x1f8>)
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2300      	movs	r3, #0
 8003976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800397a:	21d2      	movs	r1, #210	; 0xd2
 800397c:	200a      	movs	r0, #10
 800397e:	f7ff feb3 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(10, 245, WHITE, BLACK, "ROLL", 16, 0); //200
 8003982:	2300      	movs	r3, #0
 8003984:	9302      	str	r3, [sp, #8]
 8003986:	2310      	movs	r3, #16
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	4b4a      	ldr	r3, [pc, #296]	; (8003ab4 <print_stats+0x1fc>)
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	2300      	movs	r3, #0
 8003990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003994:	21f5      	movs	r1, #245	; 0xf5
 8003996:	200a      	movs	r0, #10
 8003998:	f7ff fea6 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(10, 280, WHITE, BLACK, "THROTTLE", 16, 0); //250
 800399c:	2300      	movs	r3, #0
 800399e:	9302      	str	r3, [sp, #8]
 80039a0:	2310      	movs	r3, #16
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	4b44      	ldr	r3, [pc, #272]	; (8003ab8 <print_stats+0x200>)
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ae:	f44f 718c 	mov.w	r1, #280	; 0x118
 80039b2:	200a      	movs	r0, #10
 80039b4:	f7ff fe98 	bl	80036e8 <LCD_DrawString>

	LCD_DrawString(100, 175, WHITE, BLACK, pitch , 16, 0);
 80039b8:	2300      	movs	r3, #0
 80039ba:	9302      	str	r3, [sp, #8]
 80039bc:	2310      	movs	r3, #16
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	f107 0320 	add.w	r3, r7, #32
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039cc:	21af      	movs	r1, #175	; 0xaf
 80039ce:	2064      	movs	r0, #100	; 0x64
 80039d0:	f7ff fe8a 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(100, 210, WHITE, BLACK, yaw, 16, 0);
 80039d4:	2300      	movs	r3, #0
 80039d6:	9302      	str	r3, [sp, #8]
 80039d8:	2310      	movs	r3, #16
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	2300      	movs	r3, #0
 80039e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039e8:	21d2      	movs	r1, #210	; 0xd2
 80039ea:	2064      	movs	r0, #100	; 0x64
 80039ec:	f7ff fe7c 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(100, 245, WHITE, BLACK, roll, 16, 0);
 80039f0:	2300      	movs	r3, #0
 80039f2:	9302      	str	r3, [sp, #8]
 80039f4:	2310      	movs	r3, #16
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2300      	movs	r3, #0
 8003a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a04:	21f5      	movs	r1, #245	; 0xf5
 8003a06:	2064      	movs	r0, #100	; 0x64
 8003a08:	f7ff fe6e 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(100, 280, WHITE, BLACK, throttle , 16, 0);
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9302      	str	r3, [sp, #8]
 8003a10:	2310      	movs	r3, #16
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	463b      	mov	r3, r7
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a1e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003a22:	2064      	movs	r0, #100	; 0x64
 8003a24:	f7ff fe60 	bl	80036e8 <LCD_DrawString>

	LCD_DrawString(170, 175, WHITE, BLACK, currDisp.pitch_mode, 16, 0);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9302      	str	r3, [sp, #8]
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	9301      	str	r3, [sp, #4]
 8003a30:	f107 03e3 	add.w	r3, r7, #227	; 0xe3
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2300      	movs	r3, #0
 8003a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a3c:	21af      	movs	r1, #175	; 0xaf
 8003a3e:	20aa      	movs	r0, #170	; 0xaa
 8003a40:	f7ff fe52 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(170, 210, WHITE, BLACK, currDisp.yaw_mode, 16, 0);
 8003a44:	2300      	movs	r3, #0
 8003a46:	9302      	str	r3, [sp, #8]
 8003a48:	2310      	movs	r3, #16
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	f107 0389 	add.w	r3, r7, #137	; 0x89
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2300      	movs	r3, #0
 8003a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a58:	21d2      	movs	r1, #210	; 0xd2
 8003a5a:	20aa      	movs	r0, #170	; 0xaa
 8003a5c:	f7ff fe44 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(170, 245, WHITE, BLACK, currDisp.roll_mode, 16, 0);
 8003a60:	2300      	movs	r3, #0
 8003a62:	9302      	str	r3, [sp, #8]
 8003a64:	2310      	movs	r3, #16
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	f107 03a7 	add.w	r3, r7, #167	; 0xa7
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a74:	21f5      	movs	r1, #245	; 0xf5
 8003a76:	20aa      	movs	r0, #170	; 0xaa
 8003a78:	f7ff fe36 	bl	80036e8 <LCD_DrawString>
	LCD_DrawString(170, 280, WHITE, BLACK, currDisp.throttle_mode, 16, 0);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9302      	str	r3, [sp, #8]
 8003a80:	2310      	movs	r3, #16
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	f107 03c5 	add.w	r3, r7, #197	; 0xc5
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a90:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003a94:	20aa      	movs	r0, #170	; 0xaa
 8003a96:	f7ff fe27 	bl	80036e8 <LCD_DrawString>
	return;
 8003a9a:	bf00      	nop
}
 8003a9c:	3780      	adds	r7, #128	; 0x80
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003aa4:	b004      	add	sp, #16
 8003aa6:	4770      	bx	lr
 8003aa8:	0800c3d4 	.word	0x0800c3d4
 8003aac:	0800c3dc 	.word	0x0800c3dc
 8003ab0:	0800c3e4 	.word	0x0800c3e4
 8003ab4:	0800c3e8 	.word	0x0800c3e8
 8003ab8:	0800c3f0 	.word	0x0800c3f0

08003abc <print_progress>:
// 	LCD_DrawFillRectangle(CX - 8, CY - 8, CX + 8, CY + 8, BLACK);
// 	LCD_DrawFillTriangle(X0, Y0, X1, Y1, X2, Y2, BLACK);
// 	LCD_DrawString(CX - 8, CY - 8, WHITE, BLACK, strs, 16, 1);
// }

void print_progress(int time_secs, int curTim) {
 8003abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003abe:	b08b      	sub	sp, #44	; 0x2c
 8003ac0:	af04      	add	r7, sp, #16
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
	if (curTim >= time_secs) {return;}
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	da63      	bge.n	8003b96 <print_progress+0xda>

	char strs[3];
	sprintf(strs, "%d", curTim);
 8003ace:	f107 0314 	add.w	r3, r7, #20
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	4932      	ldr	r1, [pc, #200]	; (8003ba0 <print_progress+0xe4>)
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f006 f95a 	bl	8009d90 <siprintf>

	LCD_DrawFillTriangle(sectors[curTim][0], sectors[curTim][1], sectors[curTim][2], sectors[curTim][3], sectors[curTim][4], sectors[curTim][5], BLACK);
 8003adc:	4931      	ldr	r1, [pc, #196]	; (8003ba4 <print_progress+0xe8>)
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b298      	uxth	r0, r3
 8003aee:	492d      	ldr	r1, [pc, #180]	; (8003ba4 <print_progress+0xe8>)
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	4613      	mov	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	3304      	adds	r3, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	b29c      	uxth	r4, r3
 8003b02:	4928      	ldr	r1, [pc, #160]	; (8003ba4 <print_progress+0xe8>)
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	3308      	adds	r3, #8
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	b29d      	uxth	r5, r3
 8003b16:	4923      	ldr	r1, [pc, #140]	; (8003ba4 <print_progress+0xe8>)
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	440b      	add	r3, r1
 8003b24:	330c      	adds	r3, #12
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	b29e      	uxth	r6, r3
 8003b2a:	491e      	ldr	r1, [pc, #120]	; (8003ba4 <print_progress+0xe8>)
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	440b      	add	r3, r1
 8003b38:	3310      	adds	r3, #16
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b299      	uxth	r1, r3
 8003b3e:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <print_progress+0xe8>)
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	4413      	add	r3, r2
 8003b50:	3314      	adds	r3, #20
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2200      	movs	r2, #0
 8003b58:	9202      	str	r2, [sp, #8]
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	9100      	str	r1, [sp, #0]
 8003b5e:	4633      	mov	r3, r6
 8003b60:	462a      	mov	r2, r5
 8003b62:	4621      	mov	r1, r4
 8003b64:	f7ff fbc6 	bl	80032f4 <LCD_DrawFillTriangle>
	LCD_DrawFillRectangle(CAL_CIRCLE_X - 8, CAL_CIRCLE_Y - 8, CAL_CIRCLE_X + 8, CAL_CIRCLE_Y + 8, BLACK);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	23f8      	movs	r3, #248	; 0xf8
 8003b6e:	2280      	movs	r2, #128	; 0x80
 8003b70:	21e8      	movs	r1, #232	; 0xe8
 8003b72:	2070      	movs	r0, #112	; 0x70
 8003b74:	f7ff fb82 	bl	800327c <LCD_DrawFillRectangle>
	LCD_DrawString(CAL_CIRCLE_X - 8, CAL_CIRCLE_Y - 8, WHITE, BLACK, strs, 16, 1);
 8003b78:	2301      	movs	r3, #1
 8003b7a:	9302      	str	r3, [sp, #8]
 8003b7c:	2310      	movs	r3, #16
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b8c:	21e8      	movs	r1, #232	; 0xe8
 8003b8e:	2070      	movs	r0, #112	; 0x70
 8003b90:	f7ff fdaa 	bl	80036e8 <LCD_DrawString>
 8003b94:	e000      	b.n	8003b98 <print_progress+0xdc>
	if (curTim >= time_secs) {return;}
 8003b96:	bf00      	nop
}
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	0800c3fc 	.word	0x0800c3fc
 8003ba4:	20000748 	.word	0x20000748

08003ba8 <makeCircle>:

// 	LCD_DrawFillRectangle(startX - 2, startY, CX , CY, color);
// 	return;
// }

void makeCircle(int time_secs, int CX, int CY, int radius, u16 color) {
 8003ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003baa:	b08d      	sub	sp, #52	; 0x34
 8003bac:	af04      	add	r7, sp, #16
 8003bae:	6178      	str	r0, [r7, #20]
 8003bb0:	6139      	str	r1, [r7, #16]
 8003bb2:	60fa      	str	r2, [r7, #12]
 8003bb4:	60bb      	str	r3, [r7, #8]
	calculateCircle(time_secs, CX, CY, radius);
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	6939      	ldr	r1, [r7, #16]
 8003bbc:	6978      	ldr	r0, [r7, #20]
 8003bbe:	f000 f857 	bl	8003c70 <calculateCircle>
	for(int i = 0; i < time_secs; i++) {
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e048      	b.n	8003c5a <makeCircle+0xb2>
		LCD_DrawFillTriangle(sectors[i][0], sectors[i][1], sectors[i][2], sectors[i][3], sectors[i][4], sectors[i][5], color);
 8003bc8:	4928      	ldr	r1, [pc, #160]	; (8003c6c <makeCircle+0xc4>)
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	b298      	uxth	r0, r3
 8003bda:	4924      	ldr	r1, [pc, #144]	; (8003c6c <makeCircle+0xc4>)
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	440b      	add	r3, r1
 8003be8:	3304      	adds	r3, #4
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	b29c      	uxth	r4, r3
 8003bee:	491f      	ldr	r1, [pc, #124]	; (8003c6c <makeCircle+0xc4>)
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	b29d      	uxth	r5, r3
 8003c02:	491a      	ldr	r1, [pc, #104]	; (8003c6c <makeCircle+0xc4>)
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	330c      	adds	r3, #12
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b29e      	uxth	r6, r3
 8003c16:	4915      	ldr	r1, [pc, #84]	; (8003c6c <makeCircle+0xc4>)
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	440b      	add	r3, r1
 8003c24:	3310      	adds	r3, #16
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	b299      	uxth	r1, r3
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <makeCircle+0xc4>)
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	4613      	mov	r3, r2
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4413      	add	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3314      	adds	r3, #20
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003c44:	9202      	str	r2, [sp, #8]
 8003c46:	9301      	str	r3, [sp, #4]
 8003c48:	9100      	str	r1, [sp, #0]
 8003c4a:	4633      	mov	r3, r6
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4621      	mov	r1, r4
 8003c50:	f7ff fb50 	bl	80032f4 <LCD_DrawFillTriangle>
	for(int i = 0; i < time_secs; i++) {
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	3301      	adds	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	dbb2      	blt.n	8003bc8 <makeCircle+0x20>
	}
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	3724      	adds	r7, #36	; 0x24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6c:	20000748 	.word	0x20000748

08003c70 <calculateCircle>:

void calculateCircle(int time_secs, int CX, int CY, int radius) {
 8003c70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003c74:	b0a0      	sub	sp, #128	; 0x80
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
	int X2;
	int Y0;
	int Y1;
	int Y2;

	int sidesAB = radius;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	66fb      	str	r3, [r7, #108]	; 0x6c
	double Cy;
	double Cx;
	int CyR;
	int CxR;

	int startX = CX;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	66bb      	str	r3, [r7, #104]	; 0x68
	int startY = CY - radius;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	667b      	str	r3, [r7, #100]	; 0x64

	double central_angleD = 360 / time_secs;
 8003c90:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	fb92 f3f3 	sdiv	r3, r2, r3
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fc fc3a 	bl	8000514 <__aeabi_i2d>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double other_angleD = (180 - central_angleD) / 2;
 8003ca8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cac:	f04f 0000 	mov.w	r0, #0
 8003cb0:	4963      	ldr	r1, [pc, #396]	; (8003e40 <calculateCircle+0x1d0>)
 8003cb2:	f7fc fae1 	bl	8000278 <__aeabi_dsub>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cc6:	f7fc fdb9 	bl	800083c <__aeabi_ddiv>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	double central_angleR = central_angleD * M_PI / 180;
 8003cd2:	a359      	add	r3, pc, #356	; (adr r3, 8003e38 <calculateCircle+0x1c8>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003cdc:	f7fc fc84 	bl	80005e8 <__aeabi_dmul>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <calculateCircle+0x1d0>)
 8003cee:	f7fc fda5 	bl	800083c <__aeabi_ddiv>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double other_angleR = other_angleD * M_PI / 180;
 8003cfa:	a34f      	add	r3, pc, #316	; (adr r3, 8003e38 <calculateCircle+0x1c8>)
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d04:	f7fc fc70 	bl	80005e8 <__aeabi_dmul>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	4b4a      	ldr	r3, [pc, #296]	; (8003e40 <calculateCircle+0x1d0>)
 8003d16:	f7fc fd91 	bl	800083c <__aeabi_ddiv>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//For progress indicator
	for(int i = 0; i < time_secs; i++) {
 8003d22:	2300      	movs	r3, #0
 8003d24:	677b      	str	r3, [r7, #116]	; 0x74
 8003d26:	e078      	b.n	8003e1a <calculateCircle+0x1aa>
		if (i == 0) {
 8003d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d12b      	bne.n	8003d86 <calculateCircle+0x116>
			a[i] = (90 - other_angleD);
 8003d2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	4943      	ldr	r1, [pc, #268]	; (8003e44 <calculateCircle+0x1d4>)
 8003d38:	f7fc fa9e 	bl	8000278 <__aeabi_dsub>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4841      	ldr	r0, [pc, #260]	; (8003e48 <calculateCircle+0x1d8>)
 8003d42:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003d44:	00c9      	lsls	r1, r1, #3
 8003d46:	4401      	add	r1, r0
 8003d48:	e9c1 2300 	strd	r2, r3, [r1]
			b[i] = a[i] * M_PI / 180;
 8003d4c:	4a3e      	ldr	r2, [pc, #248]	; (8003e48 <calculateCircle+0x1d8>)
 8003d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d58:	a337      	add	r3, pc, #220	; (adr r3, 8003e38 <calculateCircle+0x1c8>)
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	f7fc fc43 	bl	80005e8 <__aeabi_dmul>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	4b34      	ldr	r3, [pc, #208]	; (8003e40 <calculateCircle+0x1d0>)
 8003d70:	f7fc fd64 	bl	800083c <__aeabi_ddiv>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4834      	ldr	r0, [pc, #208]	; (8003e4c <calculateCircle+0x1dc>)
 8003d7a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003d7c:	00c9      	lsls	r1, r1, #3
 8003d7e:	4401      	add	r1, r0
 8003d80:	e9c1 2300 	strd	r2, r3, [r1]
 8003d84:	e046      	b.n	8003e14 <calculateCircle+0x1a4>
		} else {
			a[i] = (360 - ((180 - a[i - 1]) + 2 * other_angleD));
 8003d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	4a2f      	ldr	r2, [pc, #188]	; (8003e48 <calculateCircle+0x1d8>)
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	f04f 0000 	mov.w	r0, #0
 8003d98:	4929      	ldr	r1, [pc, #164]	; (8003e40 <calculateCircle+0x1d0>)
 8003d9a:	f7fc fa6d 	bl	8000278 <__aeabi_dsub>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4614      	mov	r4, r2
 8003da4:	461d      	mov	r5, r3
 8003da6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	f7fc fa65 	bl	800027c <__adddf3>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4620      	mov	r0, r4
 8003db8:	4629      	mov	r1, r5
 8003dba:	f7fc fa5f 	bl	800027c <__adddf3>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	4922      	ldr	r1, [pc, #136]	; (8003e50 <calculateCircle+0x1e0>)
 8003dc8:	f7fc fa56 	bl	8000278 <__aeabi_dsub>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	481d      	ldr	r0, [pc, #116]	; (8003e48 <calculateCircle+0x1d8>)
 8003dd2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003dd4:	00c9      	lsls	r1, r1, #3
 8003dd6:	4401      	add	r1, r0
 8003dd8:	e9c1 2300 	strd	r2, r3, [r1]
			b[i] = a[i] * M_PI / 180;
 8003ddc:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <calculateCircle+0x1d8>)
 8003dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003de8:	a313      	add	r3, pc, #76	; (adr r3, 8003e38 <calculateCircle+0x1c8>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fbfb 	bl	80005e8 <__aeabi_dmul>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <calculateCircle+0x1d0>)
 8003e00:	f7fc fd1c 	bl	800083c <__aeabi_ddiv>
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4810      	ldr	r0, [pc, #64]	; (8003e4c <calculateCircle+0x1dc>)
 8003e0a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003e0c:	00c9      	lsls	r1, r1, #3
 8003e0e:	4401      	add	r1, r0
 8003e10:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < time_secs; i++) {
 8003e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e16:	3301      	adds	r3, #1
 8003e18:	677b      	str	r3, [r7, #116]	; 0x74
 8003e1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	db82      	blt.n	8003d28 <calculateCircle+0xb8>
		}
	}

	X0 = startX;
 8003e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e24:	67fb      	str	r3, [r7, #124]	; 0x7c
	Y0 = startY;
 8003e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e28:	67bb      	str	r3, [r7, #120]	; 0x78
	X1 = CX;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
	Y1 = CY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	63bb      	str	r3, [r7, #56]	; 0x38

	for(int i = 0; i < time_secs; i++) {
 8003e32:	2300      	movs	r3, #0
 8003e34:	673b      	str	r3, [r7, #112]	; 0x70
 8003e36:	e0c9      	b.n	8003fcc <calculateCircle+0x35c>
 8003e38:	54442d18 	.word	0x54442d18
 8003e3c:	400921fb 	.word	0x400921fb
 8003e40:	40668000 	.word	0x40668000
 8003e44:	40568000 	.word	0x40568000
 8003e48:	20000108 	.word	0x20000108
 8003e4c:	20000428 	.word	0x20000428
 8003e50:	40768000 	.word	0x40768000
		sideC = sqrt(2 * (sidesAB * sidesAB) - 2 * (sidesAB * sidesAB) * cos(central_angleR));
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	fb03 f303 	mul.w	r3, r3, r3
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7fc fb59 	bl	8000514 <__aeabi_i2d>
 8003e62:	4604      	mov	r4, r0
 8003e64:	460d      	mov	r5, r1
 8003e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e68:	fb03 f303 	mul.w	r3, r3, r3
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fc fb50 	bl	8000514 <__aeabi_i2d>
 8003e74:	4680      	mov	r8, r0
 8003e76:	4689      	mov	r9, r1
 8003e78:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003e7c:	f006 fbfc 	bl	800a678 <cos>
 8003e80:	ec53 2b10 	vmov	r2, r3, d0
 8003e84:	4640      	mov	r0, r8
 8003e86:	4649      	mov	r1, r9
 8003e88:	f7fc fbae 	bl	80005e8 <__aeabi_dmul>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4620      	mov	r0, r4
 8003e92:	4629      	mov	r1, r5
 8003e94:	f7fc f9f0 	bl	8000278 <__aeabi_dsub>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	ec43 2b17 	vmov	d7, r2, r3
 8003ea0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea4:	eef0 0a67 	vmov.f32	s1, s15
 8003ea8:	f006 fd10 	bl	800a8cc <sqrt>
 8003eac:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

		Cy = sin(b[i]) * sideC;
 8003eb0:	4a56      	ldr	r2, [pc, #344]	; (800400c <calculateCircle+0x39c>)
 8003eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	ed93 7b00 	vldr	d7, [r3]
 8003ebc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ec0:	eef0 0a67 	vmov.f32	s1, s15
 8003ec4:	f006 fc74 	bl	800a7b0 <sin>
 8003ec8:	ec53 2b10 	vmov	r2, r3, d0
 8003ecc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003ed0:	f7fc fb8a 	bl	80005e8 <__aeabi_dmul>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		Cx = cos(b[i]) * sideC;
 8003edc:	4a4b      	ldr	r2, [pc, #300]	; (800400c <calculateCircle+0x39c>)
 8003ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	ed93 7b00 	vldr	d7, [r3]
 8003ee8:	eeb0 0a47 	vmov.f32	s0, s14
 8003eec:	eef0 0a67 	vmov.f32	s1, s15
 8003ef0:	f006 fbc2 	bl	800a678 <cos>
 8003ef4:	ec53 2b10 	vmov	r2, r3, d0
 8003ef8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003efc:	f7fc fb74 	bl	80005e8 <__aeabi_dmul>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	e9c7 2308 	strd	r2, r3, [r7, #32]

		CyR = round(Cy);
 8003f08:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003f0c:	f006 fc08 	bl	800a720 <round>
 8003f10:	ec53 2b10 	vmov	r2, r3, d0
 8003f14:	4610      	mov	r0, r2
 8003f16:	4619      	mov	r1, r3
 8003f18:	f7fc fe16 	bl	8000b48 <__aeabi_d2iz>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	61fb      	str	r3, [r7, #28]
		CxR = round(Cx);
 8003f20:	ed97 0b08 	vldr	d0, [r7, #32]
 8003f24:	f006 fbfc 	bl	800a720 <round>
 8003f28:	ec53 2b10 	vmov	r2, r3, d0
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	f7fc fe0a 	bl	8000b48 <__aeabi_d2iz>
 8003f34:	4603      	mov	r3, r0
 8003f36:	61bb      	str	r3, [r7, #24]

		X2 = X0 + CxR;
 8003f38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
		Y2 = Y0 + CyR;
 8003f40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4413      	add	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]

		sectors[i][0] = X0;
 8003f48:	4931      	ldr	r1, [pc, #196]	; (8004010 <calculateCircle+0x3a0>)
 8003f4a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	4413      	add	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	440b      	add	r3, r1
 8003f56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003f58:	601a      	str	r2, [r3, #0]
		sectors[i][1] = Y0;
 8003f5a:	492d      	ldr	r1, [pc, #180]	; (8004010 <calculateCircle+0x3a0>)
 8003f5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	440b      	add	r3, r1
 8003f68:	3304      	adds	r3, #4
 8003f6a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f6c:	601a      	str	r2, [r3, #0]
		sectors[i][2] = X1;
 8003f6e:	4928      	ldr	r1, [pc, #160]	; (8004010 <calculateCircle+0x3a0>)
 8003f70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f72:	4613      	mov	r3, r2
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	4413      	add	r3, r2
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f80:	601a      	str	r2, [r3, #0]
		sectors[i][3] = Y1;
 8003f82:	4923      	ldr	r1, [pc, #140]	; (8004010 <calculateCircle+0x3a0>)
 8003f84:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f86:	4613      	mov	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	440b      	add	r3, r1
 8003f90:	330c      	adds	r3, #12
 8003f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f94:	601a      	str	r2, [r3, #0]
		sectors[i][4] = X2;
 8003f96:	491e      	ldr	r1, [pc, #120]	; (8004010 <calculateCircle+0x3a0>)
 8003f98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	440b      	add	r3, r1
 8003fa4:	3310      	adds	r3, #16
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	601a      	str	r2, [r3, #0]
		sectors[i][5] = Y2;
 8003faa:	4919      	ldr	r1, [pc, #100]	; (8004010 <calculateCircle+0x3a0>)
 8003fac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3314      	adds	r3, #20
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	601a      	str	r2, [r3, #0]
		X0 = X2;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
		Y0 = Y2;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < time_secs; i++) {
 8003fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fc8:	3301      	adds	r3, #1
 8003fca:	673b      	str	r3, [r7, #112]	; 0x70
 8003fcc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	f6ff af3f 	blt.w	8003e54 <calculateCircle+0x1e4>
	}

	sectors[time_secs - 1][5] = startX;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1e5a      	subs	r2, r3, #1
 8003fda:	490d      	ldr	r1, [pc, #52]	; (8004010 <calculateCircle+0x3a0>)
 8003fdc:	4613      	mov	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4413      	add	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3314      	adds	r3, #20
 8003fe8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fea:	601a      	str	r2, [r3, #0]
	sectors[time_secs - 1][5] = startY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1e5a      	subs	r2, r3, #1
 8003ff0:	4907      	ldr	r1, [pc, #28]	; (8004010 <calculateCircle+0x3a0>)
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004000:	601a      	str	r2, [r3, #0]

	return;
 8004002:	bf00      	nop
}
 8004004:	3780      	adds	r7, #128	; 0x80
 8004006:	46bd      	mov	sp, r7
 8004008:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800400c:	20000428 	.word	0x20000428
 8004010:	20000748 	.word	0x20000748
 8004014:	00000000 	.word	0x00000000

08004018 <LCD_Update>:

void LCD_Update(float roll, float pitch, float throttle, float yaw, int state, int total_time_sec, int cnt_sec) {
 8004018:	b590      	push	{r4, r7, lr}
 800401a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 800401e:	af8e      	add	r7, sp, #568	; 0x238
 8004020:	ed87 0a07 	vstr	s0, [r7, #28]
 8004024:	edc7 0a06 	vstr	s1, [r7, #24]
 8004028:	ed87 1a05 	vstr	s2, [r7, #20]
 800402c:	edc7 1a04 	vstr	s3, [r7, #16]
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
	print_labels(); // @henry: can be done in init?
 8004036:	f7ff fba3 	bl	8003780 <print_labels>

	currDisp.state = state;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4bb2      	ldr	r3, [pc, #712]	; (8004308 <LCD_Update+0x2f0>)
 8004040:	701a      	strb	r2, [r3, #0]
	if (currDisp.state == INIT) {
 8004042:	4bb1      	ldr	r3, [pc, #708]	; (8004308 <LCD_Update+0x2f0>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <LCD_Update+0x48>
		strncpy(currDisp.title, "INITIALISING", 29);
 800404a:	221d      	movs	r2, #29
 800404c:	49af      	ldr	r1, [pc, #700]	; (800430c <LCD_Update+0x2f4>)
 800404e:	48b0      	ldr	r0, [pc, #704]	; (8004310 <LCD_Update+0x2f8>)
 8004050:	f005 febe 	bl	8009dd0 <strncpy>
		strncpy(currDisp.command_ln1, "...Loading...", 199);
 8004054:	22c7      	movs	r2, #199	; 0xc7
 8004056:	49af      	ldr	r1, [pc, #700]	; (8004314 <LCD_Update+0x2fc>)
 8004058:	48af      	ldr	r0, [pc, #700]	; (8004318 <LCD_Update+0x300>)
 800405a:	f005 feb9 	bl	8009dd0 <strncpy>
 800405e:	e044      	b.n	80040ea <LCD_Update+0xd2>
	} else if(currDisp.state == CAL_UNFLEXED) {
 8004060:	4ba9      	ldr	r3, [pc, #676]	; (8004308 <LCD_Update+0x2f0>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d10f      	bne.n	8004088 <LCD_Update+0x70>
		strncpy(currDisp.title, "CALIBRATION", 29);
 8004068:	221d      	movs	r2, #29
 800406a:	49ac      	ldr	r1, [pc, #688]	; (800431c <LCD_Update+0x304>)
 800406c:	48a8      	ldr	r0, [pc, #672]	; (8004310 <LCD_Update+0x2f8>)
 800406e:	f005 feaf 	bl	8009dd0 <strncpy>
		strncpy(currDisp.command_ln1, "Please unflex your fingers until finger", 199);
 8004072:	22c7      	movs	r2, #199	; 0xc7
 8004074:	49aa      	ldr	r1, [pc, #680]	; (8004320 <LCD_Update+0x308>)
 8004076:	48a8      	ldr	r0, [pc, #672]	; (8004318 <LCD_Update+0x300>)
 8004078:	f005 feaa 	bl	8009dd0 <strncpy>
		strncpy(currDisp.command_ln2, "angles are 0 degrees.", 199);
 800407c:	22c7      	movs	r2, #199	; 0xc7
 800407e:	49a9      	ldr	r1, [pc, #676]	; (8004324 <LCD_Update+0x30c>)
 8004080:	48a9      	ldr	r0, [pc, #676]	; (8004328 <LCD_Update+0x310>)
 8004082:	f005 fea5 	bl	8009dd0 <strncpy>
 8004086:	e030      	b.n	80040ea <LCD_Update+0xd2>
	} else if(currDisp.state == CAL_FLEXED) {
 8004088:	4b9f      	ldr	r3, [pc, #636]	; (8004308 <LCD_Update+0x2f0>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d10f      	bne.n	80040b0 <LCD_Update+0x98>
		strncpy(currDisp.title, "CALIBRATION", 29);
 8004090:	221d      	movs	r2, #29
 8004092:	49a2      	ldr	r1, [pc, #648]	; (800431c <LCD_Update+0x304>)
 8004094:	489e      	ldr	r0, [pc, #632]	; (8004310 <LCD_Update+0x2f8>)
 8004096:	f005 fe9b 	bl	8009dd0 <strncpy>
		strncpy(currDisp.command_ln1, "Please flex your fingers until finger", 199);
 800409a:	22c7      	movs	r2, #199	; 0xc7
 800409c:	49a3      	ldr	r1, [pc, #652]	; (800432c <LCD_Update+0x314>)
 800409e:	489e      	ldr	r0, [pc, #632]	; (8004318 <LCD_Update+0x300>)
 80040a0:	f005 fe96 	bl	8009dd0 <strncpy>
		strncpy(currDisp.command_ln2, "angles are 90 degrees.", 199);
 80040a4:	22c7      	movs	r2, #199	; 0xc7
 80040a6:	49a2      	ldr	r1, [pc, #648]	; (8004330 <LCD_Update+0x318>)
 80040a8:	489f      	ldr	r0, [pc, #636]	; (8004328 <LCD_Update+0x310>)
 80040aa:	f005 fe91 	bl	8009dd0 <strncpy>
 80040ae:	e01c      	b.n	80040ea <LCD_Update+0xd2>
	} else if(currDisp.state == MODE_STANDARD) {
 80040b0:	4b95      	ldr	r3, [pc, #596]	; (8004308 <LCD_Update+0x2f0>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d10a      	bne.n	80040ce <LCD_Update+0xb6>
		strncpy(currDisp.title, "STANDARD", 29);
 80040b8:	221d      	movs	r2, #29
 80040ba:	499e      	ldr	r1, [pc, #632]	; (8004334 <LCD_Update+0x31c>)
 80040bc:	4894      	ldr	r0, [pc, #592]	; (8004310 <LCD_Update+0x2f8>)
 80040be:	f005 fe87 	bl	8009dd0 <strncpy>
		strncpy(currDisp.command_ln1, "Toggle switch to change mode to advanced!", 199);
 80040c2:	22c7      	movs	r2, #199	; 0xc7
 80040c4:	499c      	ldr	r1, [pc, #624]	; (8004338 <LCD_Update+0x320>)
 80040c6:	4894      	ldr	r0, [pc, #592]	; (8004318 <LCD_Update+0x300>)
 80040c8:	f005 fe82 	bl	8009dd0 <strncpy>
 80040cc:	e00d      	b.n	80040ea <LCD_Update+0xd2>
	} else if(currDisp.state == MODE_ADVANCED) {
 80040ce:	4b8e      	ldr	r3, [pc, #568]	; (8004308 <LCD_Update+0x2f0>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d109      	bne.n	80040ea <LCD_Update+0xd2>
		strncpy(currDisp.title, "ADVANCED", 29);
 80040d6:	221d      	movs	r2, #29
 80040d8:	4998      	ldr	r1, [pc, #608]	; (800433c <LCD_Update+0x324>)
 80040da:	488d      	ldr	r0, [pc, #564]	; (8004310 <LCD_Update+0x2f8>)
 80040dc:	f005 fe78 	bl	8009dd0 <strncpy>
		strncpy(currDisp.command_ln1, "Toggle switch to change mode to standard!", 199);
 80040e0:	22c7      	movs	r2, #199	; 0xc7
 80040e2:	4997      	ldr	r1, [pc, #604]	; (8004340 <LCD_Update+0x328>)
 80040e4:	488c      	ldr	r0, [pc, #560]	; (8004318 <LCD_Update+0x300>)
 80040e6:	f005 fe73 	bl	8009dd0 <strncpy>
	}

	print_title(currDisp);
 80040ea:	4c87      	ldr	r4, [pc, #540]	; (8004308 <LCD_Update+0x2f0>)
 80040ec:	4668      	mov	r0, sp
 80040ee:	f104 0310 	add.w	r3, r4, #16
 80040f2:	f44f 720d 	mov.w	r2, #564	; 0x234
 80040f6:	4619      	mov	r1, r3
 80040f8:	f005 fe34 	bl	8009d64 <memcpy>
 80040fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004100:	f7ff fb82 	bl	8003808 <print_title>

	if (currDisp.state == CAL_FLEXED || currDisp.state == CAL_UNFLEXED) {
 8004104:	4b80      	ldr	r3, [pc, #512]	; (8004308 <LCD_Update+0x2f0>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d003      	beq.n	8004114 <LCD_Update+0xfc>
 800410c:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <LCD_Update+0x2f0>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d11f      	bne.n	8004154 <LCD_Update+0x13c>
		if (cnt_sec == CAL_TIME_SEC) {
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b0a      	cmp	r3, #10
 8004118:	d117      	bne.n	800414a <LCD_Update+0x132>
			makeCircle(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS, BRED);
 800411a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	233c      	movs	r3, #60	; 0x3c
 8004122:	22f0      	movs	r2, #240	; 0xf0
 8004124:	2178      	movs	r1, #120	; 0x78
 8004126:	200a      	movs	r0, #10
 8004128:	f7ff fd3e 	bl	8003ba8 <makeCircle>
			makeCircle(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS_INNER, BLACK);
 800412c:	4b85      	ldr	r3, [pc, #532]	; (8004344 <LCD_Update+0x32c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2200      	movs	r2, #0
 8004132:	9200      	str	r2, [sp, #0]
 8004134:	22f0      	movs	r2, #240	; 0xf0
 8004136:	2178      	movs	r1, #120	; 0x78
 8004138:	200a      	movs	r0, #10
 800413a:	f7ff fd35 	bl	8003ba8 <makeCircle>
			calculateCircle(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS);
 800413e:	233c      	movs	r3, #60	; 0x3c
 8004140:	22f0      	movs	r2, #240	; 0xf0
 8004142:	2178      	movs	r1, #120	; 0x78
 8004144:	200a      	movs	r0, #10
 8004146:	f7ff fd93 	bl	8003c70 <calculateCircle>
		}
		// print_progress(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS, cnt_sec);
		print_progress(CAL_TIME_SEC, cnt_sec);
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	200a      	movs	r0, #10
 800414e:	f7ff fcb5 	bl	8003abc <print_progress>
 8004152:	e0ba      	b.n	80042ca <LCD_Update+0x2b2>
		// LCD_DrawFillRectangle(CAL_CIRCLE_X - 10, CAL_CIRCLE_Y - 10, CAL_CIRCLE_X + 10 , CAL_CIRCLE_Y + 10, BLACK);
	  // LCD_DrawFillRectangle(CAL_CIRCLE_X - 5, CAL_CIRCLE_Y - CAL_CIRCLE_RADIUS_INNER, CAL_CIRCLE_X + 2 , CAL_CIRCLE_Y, BLACK);
	} else if (currDisp.state == MODE_ADVANCED) {
 8004154:	4b6c      	ldr	r3, [pc, #432]	; (8004308 <LCD_Update+0x2f0>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b04      	cmp	r3, #4
 800415a:	f040 80b6 	bne.w	80042ca <LCD_Update+0x2b2>
		currDisp.pitch_num = pitch;
 800415e:	4a6a      	ldr	r2, [pc, #424]	; (8004308 <LCD_Update+0x2f0>)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		currDisp.yaw_num = yaw;
 8004166:	4a68      	ldr	r2, [pc, #416]	; (8004308 <LCD_Update+0x2f0>)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	67d3      	str	r3, [r2, #124]	; 0x7c
		currDisp.roll_num = roll;
 800416c:	4a66      	ldr	r2, [pc, #408]	; (8004308 <LCD_Update+0x2f0>)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		currDisp.throttle_num = throttle;
 8004174:	4a64      	ldr	r2, [pc, #400]	; (8004308 <LCD_Update+0x2f0>)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		if (roll >= 0.5 + GIMBAL_IDLE_THRESH) {
 800417c:	69f8      	ldr	r0, [r7, #28]
 800417e:	f7fc f9db 	bl	8000538 <__aeabi_f2d>
 8004182:	a35b      	add	r3, pc, #364	; (adr r3, 80042f0 <LCD_Update+0x2d8>)
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f7fc fcb4 	bl	8000af4 <__aeabi_dcmpge>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <LCD_Update+0x186>
			strncpy(currDisp.roll_mode, "RIGHT", 29);
 8004192:	221d      	movs	r2, #29
 8004194:	496c      	ldr	r1, [pc, #432]	; (8004348 <LCD_Update+0x330>)
 8004196:	486d      	ldr	r0, [pc, #436]	; (800434c <LCD_Update+0x334>)
 8004198:	f005 fe1a 	bl	8009dd0 <strncpy>
 800419c:	e015      	b.n	80041ca <LCD_Update+0x1b2>
		} else if (roll <= 0.5 - GIMBAL_IDLE_THRESH) {
 800419e:	69f8      	ldr	r0, [r7, #28]
 80041a0:	f7fc f9ca 	bl	8000538 <__aeabi_f2d>
 80041a4:	a354      	add	r3, pc, #336	; (adr r3, 80042f8 <LCD_Update+0x2e0>)
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f7fc fc99 	bl	8000ae0 <__aeabi_dcmple>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <LCD_Update+0x1a8>
			strncpy(currDisp.roll_mode, "LEFT", 29);
 80041b4:	221d      	movs	r2, #29
 80041b6:	4966      	ldr	r1, [pc, #408]	; (8004350 <LCD_Update+0x338>)
 80041b8:	4864      	ldr	r0, [pc, #400]	; (800434c <LCD_Update+0x334>)
 80041ba:	f005 fe09 	bl	8009dd0 <strncpy>
 80041be:	e004      	b.n	80041ca <LCD_Update+0x1b2>
		} else {
			strncpy(currDisp.roll_mode, "-----", 29);
 80041c0:	221d      	movs	r2, #29
 80041c2:	4964      	ldr	r1, [pc, #400]	; (8004354 <LCD_Update+0x33c>)
 80041c4:	4861      	ldr	r0, [pc, #388]	; (800434c <LCD_Update+0x334>)
 80041c6:	f005 fe03 	bl	8009dd0 <strncpy>
		}

		if (pitch >= 0.5 + GIMBAL_IDLE_THRESH) {
 80041ca:	69b8      	ldr	r0, [r7, #24]
 80041cc:	f7fc f9b4 	bl	8000538 <__aeabi_f2d>
 80041d0:	a347      	add	r3, pc, #284	; (adr r3, 80042f0 <LCD_Update+0x2d8>)
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f7fc fc8d 	bl	8000af4 <__aeabi_dcmpge>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <LCD_Update+0x1d4>
			strncpy(currDisp.pitch_mode, "UP", 29);
 80041e0:	221d      	movs	r2, #29
 80041e2:	495d      	ldr	r1, [pc, #372]	; (8004358 <LCD_Update+0x340>)
 80041e4:	485d      	ldr	r0, [pc, #372]	; (800435c <LCD_Update+0x344>)
 80041e6:	f005 fdf3 	bl	8009dd0 <strncpy>
 80041ea:	e015      	b.n	8004218 <LCD_Update+0x200>
		} else if (pitch <= 0.5 - GIMBAL_IDLE_THRESH) {
 80041ec:	69b8      	ldr	r0, [r7, #24]
 80041ee:	f7fc f9a3 	bl	8000538 <__aeabi_f2d>
 80041f2:	a341      	add	r3, pc, #260	; (adr r3, 80042f8 <LCD_Update+0x2e0>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fc fc72 	bl	8000ae0 <__aeabi_dcmple>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <LCD_Update+0x1f6>
			strncpy(currDisp.pitch_mode, "DOWN", 29);
 8004202:	221d      	movs	r2, #29
 8004204:	4956      	ldr	r1, [pc, #344]	; (8004360 <LCD_Update+0x348>)
 8004206:	4855      	ldr	r0, [pc, #340]	; (800435c <LCD_Update+0x344>)
 8004208:	f005 fde2 	bl	8009dd0 <strncpy>
 800420c:	e004      	b.n	8004218 <LCD_Update+0x200>
		} else {
			strncpy(currDisp.pitch_mode, "-----", 29);	
 800420e:	221d      	movs	r2, #29
 8004210:	4950      	ldr	r1, [pc, #320]	; (8004354 <LCD_Update+0x33c>)
 8004212:	4852      	ldr	r0, [pc, #328]	; (800435c <LCD_Update+0x344>)
 8004214:	f005 fddc 	bl	8009dd0 <strncpy>
		}

		if (yaw >= 0.5 + GIMBAL_IDLE_THRESH) {
 8004218:	6938      	ldr	r0, [r7, #16]
 800421a:	f7fc f98d 	bl	8000538 <__aeabi_f2d>
 800421e:	a334      	add	r3, pc, #208	; (adr r3, 80042f0 <LCD_Update+0x2d8>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fc fc66 	bl	8000af4 <__aeabi_dcmpge>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <LCD_Update+0x222>
			strncpy(currDisp.yaw_mode, "RIGHT", 29);
 800422e:	221d      	movs	r2, #29
 8004230:	4945      	ldr	r1, [pc, #276]	; (8004348 <LCD_Update+0x330>)
 8004232:	484c      	ldr	r0, [pc, #304]	; (8004364 <LCD_Update+0x34c>)
 8004234:	f005 fdcc 	bl	8009dd0 <strncpy>
 8004238:	e015      	b.n	8004266 <LCD_Update+0x24e>
		} else if (yaw <= 0.5 - GIMBAL_IDLE_THRESH) {
 800423a:	6938      	ldr	r0, [r7, #16]
 800423c:	f7fc f97c 	bl	8000538 <__aeabi_f2d>
 8004240:	a32d      	add	r3, pc, #180	; (adr r3, 80042f8 <LCD_Update+0x2e0>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f7fc fc4b 	bl	8000ae0 <__aeabi_dcmple>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d005      	beq.n	800425c <LCD_Update+0x244>
			strncpy(currDisp.yaw_mode, "LEFT", 29);
 8004250:	221d      	movs	r2, #29
 8004252:	493f      	ldr	r1, [pc, #252]	; (8004350 <LCD_Update+0x338>)
 8004254:	4843      	ldr	r0, [pc, #268]	; (8004364 <LCD_Update+0x34c>)
 8004256:	f005 fdbb 	bl	8009dd0 <strncpy>
 800425a:	e004      	b.n	8004266 <LCD_Update+0x24e>
		} else {
			strncpy(currDisp.yaw_mode, "-----", 29);
 800425c:	221d      	movs	r2, #29
 800425e:	493d      	ldr	r1, [pc, #244]	; (8004354 <LCD_Update+0x33c>)
 8004260:	4840      	ldr	r0, [pc, #256]	; (8004364 <LCD_Update+0x34c>)
 8004262:	f005 fdb5 	bl	8009dd0 <strncpy>
		}

		if (throttle >= 0.5) {
 8004266:	edd7 7a05 	vldr	s15, [r7, #20]
 800426a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800426e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004276:	db05      	blt.n	8004284 <LCD_Update+0x26c>
			strncpy(currDisp.throttle_mode, "UP", 29);
 8004278:	221d      	movs	r2, #29
 800427a:	4937      	ldr	r1, [pc, #220]	; (8004358 <LCD_Update+0x340>)
 800427c:	483a      	ldr	r0, [pc, #232]	; (8004368 <LCD_Update+0x350>)
 800427e:	f005 fda7 	bl	8009dd0 <strncpy>
 8004282:	e015      	b.n	80042b0 <LCD_Update+0x298>
		} else if (throttle < 0 + GIMBAL_IDLE_THRESH) {
 8004284:	6978      	ldr	r0, [r7, #20]
 8004286:	f7fc f957 	bl	8000538 <__aeabi_f2d>
 800428a:	a31d      	add	r3, pc, #116	; (adr r3, 8004300 <LCD_Update+0x2e8>)
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f7fc fc1c 	bl	8000acc <__aeabi_dcmplt>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <LCD_Update+0x28e>
			strncpy(currDisp.throttle_mode, "-----", 29);	
 800429a:	221d      	movs	r2, #29
 800429c:	492d      	ldr	r1, [pc, #180]	; (8004354 <LCD_Update+0x33c>)
 800429e:	4832      	ldr	r0, [pc, #200]	; (8004368 <LCD_Update+0x350>)
 80042a0:	f005 fd96 	bl	8009dd0 <strncpy>
 80042a4:	e004      	b.n	80042b0 <LCD_Update+0x298>
		} else {
			strncpy(currDisp.throttle_mode, "DOWN", 29);	
 80042a6:	221d      	movs	r2, #29
 80042a8:	492d      	ldr	r1, [pc, #180]	; (8004360 <LCD_Update+0x348>)
 80042aa:	482f      	ldr	r0, [pc, #188]	; (8004368 <LCD_Update+0x350>)
 80042ac:	f005 fd90 	bl	8009dd0 <strncpy>
		}

		print_stats(currDisp);
 80042b0:	4c15      	ldr	r4, [pc, #84]	; (8004308 <LCD_Update+0x2f0>)
 80042b2:	4668      	mov	r0, sp
 80042b4:	f104 0310 	add.w	r3, r4, #16
 80042b8:	f44f 720d 	mov.w	r2, #564	; 0x234
 80042bc:	4619      	mov	r1, r3
 80042be:	f005 fd51 	bl	8009d64 <memcpy>
 80042c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042c6:	f7ff faf7 	bl	80038b8 <print_stats>
	}

	print_command(currDisp);
 80042ca:	4c0f      	ldr	r4, [pc, #60]	; (8004308 <LCD_Update+0x2f0>)
 80042cc:	4668      	mov	r0, sp
 80042ce:	f104 0310 	add.w	r3, r4, #16
 80042d2:	f44f 720d 	mov.w	r2, #564	; 0x234
 80042d6:	4619      	mov	r1, r3
 80042d8:	f005 fd44 	bl	8009d64 <memcpy>
 80042dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80042e0:	f7ff faaf 	bl	8003842 <print_command>
}
 80042e4:	bf00      	nop
 80042e6:	3724      	adds	r7, #36	; 0x24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd90      	pop	{r4, r7, pc}
 80042ec:	f3af 8000 	nop.w
 80042f0:	0a3d70a4 	.word	0x0a3d70a4
 80042f4:	3fe0a3d7 	.word	0x3fe0a3d7
 80042f8:	eb851eb8 	.word	0xeb851eb8
 80042fc:	3fdeb851 	.word	0x3fdeb851
 8004300:	47ae147b 	.word	0x47ae147b
 8004304:	3f947ae1 	.word	0x3f947ae1
 8004308:	20000be0 	.word	0x20000be0
 800430c:	0800c400 	.word	0x0800c400
 8004310:	20000c6c 	.word	0x20000c6c
 8004314:	0800c410 	.word	0x0800c410
 8004318:	20000c8a 	.word	0x20000c8a
 800431c:	0800c420 	.word	0x0800c420
 8004320:	0800c42c 	.word	0x0800c42c
 8004324:	0800c454 	.word	0x0800c454
 8004328:	20000d52 	.word	0x20000d52
 800432c:	0800c46c 	.word	0x0800c46c
 8004330:	0800c494 	.word	0x0800c494
 8004334:	0800c4ac 	.word	0x0800c4ac
 8004338:	0800c4b8 	.word	0x0800c4b8
 800433c:	0800c4e4 	.word	0x0800c4e4
 8004340:	0800c4f0 	.word	0x0800c4f0
 8004344:	20000008 	.word	0x20000008
 8004348:	0800c51c 	.word	0x0800c51c
 800434c:	20000bff 	.word	0x20000bff
 8004350:	0800c524 	.word	0x0800c524
 8004354:	0800c52c 	.word	0x0800c52c
 8004358:	0800c534 	.word	0x0800c534
 800435c:	20000c3b 	.word	0x20000c3b
 8004360:	0800c538 	.word	0x0800c538
 8004364:	20000be1 	.word	0x20000be1
 8004368:	20000c1d 	.word	0x20000c1d

0800436c <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800436c:	b590      	push	{r4, r7, lr}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	461a      	mov	r2, r3
 8004378:	460b      	mov	r3, r1
 800437a:	72fb      	strb	r3, [r7, #11]
 800437c:	4613      	mov	r3, r2
 800437e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685c      	ldr	r4, [r3, #4]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	68d8      	ldr	r0, [r3, #12]
 8004388:	893b      	ldrh	r3, [r7, #8]
 800438a:	7af9      	ldrb	r1, [r7, #11]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	47a0      	blx	r4
 8004390:	6178      	str	r0, [r7, #20]

  return ret;
 8004392:	697b      	ldr	r3, [r7, #20]
}
 8004394:	4618      	mov	r0, r3
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd90      	pop	{r4, r7, pc}

0800439c <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 80043a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80043c8 <lsm9ds1_from_fs4g_to_mg+0x2c>
 80043b6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80043ba:	eeb0 0a67 	vmov.f32	s0, s15
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	3df9db23 	.word	0x3df9db23

080043cc <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80043d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80043f8 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 80043e6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80043ea:	eeb0 0a67 	vmov.f32	s0, s15
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	428c0000 	.word	0x428c0000

080043fc <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 8004406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800440a:	ee07 3a90 	vmov	s15, r3
 800440e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004412:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004428 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8004416:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800441a:	eeb0 0a67 	vmov.f32	s0, s15
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	3f147ae1 	.word	0x3f147ae1

0800442c <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 8004436:	f107 020c 	add.w	r2, r7, #12
 800443a:	2306      	movs	r3, #6
 800443c:	2118      	movs	r1, #24
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff ff94 	bl	800436c <lsm9ds1_read_reg>
 8004444:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004446:	7b7b      	ldrb	r3, [r7, #13]
 8004448:	b21a      	sxth	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004454:	b29b      	uxth	r3, r3
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	b29a      	uxth	r2, r3
 800445a:	7b3b      	ldrb	r3, [r7, #12]
 800445c:	b29b      	uxth	r3, r3
 800445e:	4413      	add	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	b21a      	sxth	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004468:	7bfa      	ldrb	r2, [r7, #15]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	3302      	adds	r3, #2
 800446e:	b212      	sxth	r2, r2
 8004470:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	3302      	adds	r3, #2
 8004476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800447a:	b29b      	uxth	r3, r3
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	b29a      	uxth	r2, r3
 8004480:	7bbb      	ldrb	r3, [r7, #14]
 8004482:	b29b      	uxth	r3, r3
 8004484:	4413      	add	r3, r2
 8004486:	b29a      	uxth	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	3302      	adds	r3, #2
 800448c:	b212      	sxth	r2, r2
 800448e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004490:	7c7a      	ldrb	r2, [r7, #17]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	3304      	adds	r3, #4
 8004496:	b212      	sxth	r2, r2
 8004498:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	3304      	adds	r3, #4
 800449e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	7c3b      	ldrb	r3, [r7, #16]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	3304      	adds	r3, #4
 80044b4:	b212      	sxth	r2, r2
 80044b6:	801a      	strh	r2, [r3, #0]

  return ret;
 80044b8:	697b      	ldr	r3, [r7, #20]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b086      	sub	sp, #24
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 80044cc:	f107 020c 	add.w	r2, r7, #12
 80044d0:	2306      	movs	r3, #6
 80044d2:	2128      	movs	r1, #40	; 0x28
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff49 	bl	800436c <lsm9ds1_read_reg>
 80044da:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80044dc:	7b7b      	ldrb	r3, [r7, #13]
 80044de:	b21a      	sxth	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	7b3b      	ldrb	r3, [r7, #12]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	b21a      	sxth	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80044fe:	7bfa      	ldrb	r2, [r7, #15]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	3302      	adds	r3, #2
 8004504:	b212      	sxth	r2, r2
 8004506:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	3302      	adds	r3, #2
 800450c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004510:	b29b      	uxth	r3, r3
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	b29a      	uxth	r2, r3
 8004516:	7bbb      	ldrb	r3, [r7, #14]
 8004518:	b29b      	uxth	r3, r3
 800451a:	4413      	add	r3, r2
 800451c:	b29a      	uxth	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	3302      	adds	r3, #2
 8004522:	b212      	sxth	r2, r2
 8004524:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004526:	7c7a      	ldrb	r2, [r7, #17]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	3304      	adds	r3, #4
 800452c:	b212      	sxth	r2, r2
 800452e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	3304      	adds	r3, #4
 8004534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004538:	b29b      	uxth	r3, r3
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	b29a      	uxth	r2, r3
 800453e:	7c3b      	ldrb	r3, [r7, #16]
 8004540:	b29b      	uxth	r3, r3
 8004542:	4413      	add	r3, r2
 8004544:	b29a      	uxth	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	3304      	adds	r3, #4
 800454a:	b212      	sxth	r2, r2
 800454c:	801a      	strh	r2, [r3, #0]

  return ret;
 800454e:	697b      	ldr	r3, [r7, #20]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 8004562:	f107 020c 	add.w	r2, r7, #12
 8004566:	2306      	movs	r3, #6
 8004568:	2128      	movs	r1, #40	; 0x28
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fefe 	bl	800436c <lsm9ds1_read_reg>
 8004570:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004572:	7b7b      	ldrb	r3, [r7, #13]
 8004574:	b21a      	sxth	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004580:	b29b      	uxth	r3, r3
 8004582:	021b      	lsls	r3, r3, #8
 8004584:	b29a      	uxth	r2, r3
 8004586:	7b3b      	ldrb	r3, [r7, #12]
 8004588:	b29b      	uxth	r3, r3
 800458a:	4413      	add	r3, r2
 800458c:	b29b      	uxth	r3, r3
 800458e:	b21a      	sxth	r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004594:	7bfa      	ldrb	r2, [r7, #15]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	3302      	adds	r3, #2
 800459a:	b212      	sxth	r2, r2
 800459c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	3302      	adds	r3, #2
 80045a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	7bbb      	ldrb	r3, [r7, #14]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	4413      	add	r3, r2
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	3302      	adds	r3, #2
 80045b8:	b212      	sxth	r2, r2
 80045ba:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80045bc:	7c7a      	ldrb	r2, [r7, #17]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	3304      	adds	r3, #4
 80045c2:	b212      	sxth	r2, r2
 80045c4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	3304      	adds	r3, #4
 80045ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	7c3b      	ldrb	r3, [r7, #16]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	4413      	add	r3, r2
 80045da:	b29a      	uxth	r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	3304      	adds	r3, #4
 80045e0:	b212      	sxth	r2, r2
 80045e2:	801a      	strh	r2, [r3, #0]

  return ret;
 80045e4:	697b      	ldr	r3, [r7, #20]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 80045fe:	2301      	movs	r3, #1
 8004600:	2117      	movs	r1, #23
 8004602:	68b8      	ldr	r0, [r7, #8]
 8004604:	f7ff feb2 	bl	800436c <lsm9ds1_read_reg>
 8004608:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8004610:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8004612:	2301      	movs	r3, #1
 8004614:	2127      	movs	r1, #39	; 0x27
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f7ff fea8 	bl	800436c <lsm9ds1_read_reg>
 800461c:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800461e:	697b      	ldr	r3, [r7, #20]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <ADC_Read>:
static void ADC_ADVREGEN(ADC_TypeDef* adc) {
	adc->CR &= ~ADC_CR_ADVREGEN;
	adc->CR |= 0x1UL << ADC_CR_ADVREGEN_Pos;
}

static void ADC_Read(void) {
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
//	ADC1_val = ADC_GetVal(ADC1);
//	ADC2_val = ADC_GetVal(ADC2);
//	ADC3_val = ADC_GetVal(ADC3);
//	ADC4_val = ADC_GetVal(ADC4);
	ADC_vals[0] = ADC_GetVal(ADC1);
 800462c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004630:	f000 f858 	bl	80046e4 <ADC_GetVal>
 8004634:	4603      	mov	r3, r0
 8004636:	4a0b      	ldr	r2, [pc, #44]	; (8004664 <ADC_Read+0x3c>)
 8004638:	6013      	str	r3, [r2, #0]
	ADC_vals[1] = ADC_GetVal(ADC2);
 800463a:	480b      	ldr	r0, [pc, #44]	; (8004668 <ADC_Read+0x40>)
 800463c:	f000 f852 	bl	80046e4 <ADC_GetVal>
 8004640:	4603      	mov	r3, r0
 8004642:	4a08      	ldr	r2, [pc, #32]	; (8004664 <ADC_Read+0x3c>)
 8004644:	6053      	str	r3, [r2, #4]
	ADC_vals[2] = ADC_GetVal(ADC3);
 8004646:	4809      	ldr	r0, [pc, #36]	; (800466c <ADC_Read+0x44>)
 8004648:	f000 f84c 	bl	80046e4 <ADC_GetVal>
 800464c:	4603      	mov	r3, r0
 800464e:	4a05      	ldr	r2, [pc, #20]	; (8004664 <ADC_Read+0x3c>)
 8004650:	6093      	str	r3, [r2, #8]
	ADC_vals[3] = ADC_GetVal(ADC4);
 8004652:	4807      	ldr	r0, [pc, #28]	; (8004670 <ADC_Read+0x48>)
 8004654:	f000 f846 	bl	80046e4 <ADC_GetVal>
 8004658:	4603      	mov	r3, r0
 800465a:	4a02      	ldr	r2, [pc, #8]	; (8004664 <ADC_Read+0x3c>)
 800465c:	60d3      	str	r3, [r2, #12]
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000b78 	.word	0x20000b78
 8004668:	50000100 	.word	0x50000100
 800466c:	50000400 	.word	0x50000400
 8004670:	50000500 	.word	0x50000500

08004674 <ADC_Calibrate>:

static void ADC_Calibrate(ADC_TypeDef* adc) {
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004682:	d00b      	beq.n	800469c <ADC_Calibrate+0x28>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <ADC_Calibrate+0x64>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <ADC_Calibrate+0x28>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a13      	ldr	r2, [pc, #76]	; (80046dc <ADC_Calibrate+0x68>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <ADC_Calibrate+0x28>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <ADC_Calibrate+0x6c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d117      	bne.n	80046cc <ADC_Calibrate+0x58>
	  return;
  }

  adc->CR &= ~ADC_CR_ADEN; // Disable ADC
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f023 0201 	bic.w	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCALDIF; // Calibration for Single-ended input mode
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCAL; // Start ADC calibration
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	609a      	str	r2, [r3, #8]
  while (adc->CR & ADC_CR_ADCAL);
 80046c0:	bf00      	nop
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	dbfb      	blt.n	80046c2 <ADC_Calibrate+0x4e>
 80046ca:	e000      	b.n	80046ce <ADC_Calibrate+0x5a>
	  return;
 80046cc:	bf00      	nop
}
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	50000100 	.word	0x50000100
 80046dc:	50000400 	.word	0x50000400
 80046e0:	50000500 	.word	0x50000500

080046e4 <ADC_GetVal>:

static int ADC_GetVal(ADC_TypeDef* adc) {
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046f2:	d00d      	beq.n	8004710 <ADC_GetVal+0x2c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <ADC_GetVal+0x3c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d009      	beq.n	8004710 <ADC_GetVal+0x2c>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <ADC_GetVal+0x40>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d005      	beq.n	8004710 <ADC_GetVal+0x2c>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a08      	ldr	r2, [pc, #32]	; (8004728 <ADC_GetVal+0x44>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d001      	beq.n	8004710 <ADC_GetVal+0x2c>
		return 0;
 800470c:	2300      	movs	r3, #0
 800470e:	e001      	b.n	8004714 <ADC_GetVal+0x30>
	}
	return adc->DR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	50000100 	.word	0x50000100
 8004724:	50000400 	.word	0x50000400
 8004728:	50000500 	.word	0x50000500
 800472c:	00000000 	.word	0x00000000

08004730 <IMU_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void IMU_Read(void) {
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8004734:	4aa4      	ldr	r2, [pc, #656]	; (80049c8 <IMU_Read+0x298>)
 8004736:	49a5      	ldr	r1, [pc, #660]	; (80049cc <IMU_Read+0x29c>)
 8004738:	48a5      	ldr	r0, [pc, #660]	; (80049d0 <IMU_Read+0x2a0>)
 800473a:	f7ff ff58 	bl	80045ee <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 800473e:	4ba2      	ldr	r3, [pc, #648]	; (80049c8 <IMU_Read+0x298>)
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80ef 	beq.w	800492c <IMU_Read+0x1fc>
 800474e:	4b9e      	ldr	r3, [pc, #632]	; (80049c8 <IMU_Read+0x298>)
 8004750:	785b      	ldrb	r3, [r3, #1]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80e7 	beq.w	800492c <IMU_Read+0x1fc>
		/* Read accelerometer and gyroscope data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800475e:	2206      	movs	r2, #6
 8004760:	2100      	movs	r1, #0
 8004762:	489c      	ldr	r0, [pc, #624]	; (80049d4 <IMU_Read+0x2a4>)
 8004764:	f005 fb0c 	bl	8009d80 <memset>
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004768:	2206      	movs	r2, #6
 800476a:	2100      	movs	r1, #0
 800476c:	489a      	ldr	r0, [pc, #616]	; (80049d8 <IMU_Read+0x2a8>)
 800476e:	f005 fb07 	bl	8009d80 <memset>
		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration);
 8004772:	4998      	ldr	r1, [pc, #608]	; (80049d4 <IMU_Read+0x2a4>)
 8004774:	4895      	ldr	r0, [pc, #596]	; (80049cc <IMU_Read+0x29c>)
 8004776:	f7ff fea4 	bl	80044c2 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate);
 800477a:	4997      	ldr	r1, [pc, #604]	; (80049d8 <IMU_Read+0x2a8>)
 800477c:	4893      	ldr	r0, [pc, #588]	; (80049cc <IMU_Read+0x29c>)
 800477e:	f7ff fe55 	bl	800442c <lsm9ds1_angular_rate_raw_get>
		 accel.acceleration.x = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[0]) * 9.807) / 1000;
 8004782:	4b94      	ldr	r3, [pc, #592]	; (80049d4 <IMU_Read+0x2a4>)
 8004784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fe07 	bl	800439c <lsm9ds1_from_fs4g_to_mg>
 800478e:	ee10 3a10 	vmov	r3, s0
 8004792:	4618      	mov	r0, r3
 8004794:	f7fb fed0 	bl	8000538 <__aeabi_f2d>
 8004798:	a385      	add	r3, pc, #532	; (adr r3, 80049b0 <IMU_Read+0x280>)
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	f7fb ff23 	bl	80005e8 <__aeabi_dmul>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	f04f 0200 	mov.w	r2, #0
 80047ae:	4b8b      	ldr	r3, [pc, #556]	; (80049dc <IMU_Read+0x2ac>)
 80047b0:	f7fc f844 	bl	800083c <__aeabi_ddiv>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f7fc fa0c 	bl	8000bd8 <__aeabi_d2f>
 80047c0:	4603      	mov	r3, r0
 80047c2:	4a87      	ldr	r2, [pc, #540]	; (80049e0 <IMU_Read+0x2b0>)
 80047c4:	6013      	str	r3, [r2, #0]
		 accel.acceleration.y = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]) * 9.807) / 1000;
 80047c6:	4b83      	ldr	r3, [pc, #524]	; (80049d4 <IMU_Read+0x2a4>)
 80047c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fde5 	bl	800439c <lsm9ds1_from_fs4g_to_mg>
 80047d2:	ee10 3a10 	vmov	r3, s0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fb feae 	bl	8000538 <__aeabi_f2d>
 80047dc:	a374      	add	r3, pc, #464	; (adr r3, 80049b0 <IMU_Read+0x280>)
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f7fb ff01 	bl	80005e8 <__aeabi_dmul>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	4b7a      	ldr	r3, [pc, #488]	; (80049dc <IMU_Read+0x2ac>)
 80047f4:	f7fc f822 	bl	800083c <__aeabi_ddiv>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4610      	mov	r0, r2
 80047fe:	4619      	mov	r1, r3
 8004800:	f7fc f9ea 	bl	8000bd8 <__aeabi_d2f>
 8004804:	4603      	mov	r3, r0
 8004806:	4a76      	ldr	r2, [pc, #472]	; (80049e0 <IMU_Read+0x2b0>)
 8004808:	6053      	str	r3, [r2, #4]
		 accel.acceleration.z = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]) * 9.807) / 1000;
 800480a:	4b72      	ldr	r3, [pc, #456]	; (80049d4 <IMU_Read+0x2a4>)
 800480c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fdc3 	bl	800439c <lsm9ds1_from_fs4g_to_mg>
 8004816:	ee10 3a10 	vmov	r3, s0
 800481a:	4618      	mov	r0, r3
 800481c:	f7fb fe8c 	bl	8000538 <__aeabi_f2d>
 8004820:	a363      	add	r3, pc, #396	; (adr r3, 80049b0 <IMU_Read+0x280>)
 8004822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004826:	f7fb fedf 	bl	80005e8 <__aeabi_dmul>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	4b69      	ldr	r3, [pc, #420]	; (80049dc <IMU_Read+0x2ac>)
 8004838:	f7fc f800 	bl	800083c <__aeabi_ddiv>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	f7fc f9c8 	bl	8000bd8 <__aeabi_d2f>
 8004848:	4603      	mov	r3, r0
 800484a:	4a65      	ldr	r2, [pc, #404]	; (80049e0 <IMU_Read+0x2b0>)
 800484c:	6093      	str	r3, [r2, #8]
		 gyro.gyro.x = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) * 2 * M_PI)/360000;
 800484e:	4b62      	ldr	r3, [pc, #392]	; (80049d8 <IMU_Read+0x2a8>)
 8004850:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff fdb9 	bl	80043cc <lsm9ds1_from_fs2000dps_to_mdps>
 800485a:	eef0 7a40 	vmov.f32	s15, s0
 800485e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004862:	ee17 0a90 	vmov	r0, s15
 8004866:	f7fb fe67 	bl	8000538 <__aeabi_f2d>
 800486a:	a353      	add	r3, pc, #332	; (adr r3, 80049b8 <IMU_Read+0x288>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	f7fb feba 	bl	80005e8 <__aeabi_dmul>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4610      	mov	r0, r2
 800487a:	4619      	mov	r1, r3
 800487c:	a350      	add	r3, pc, #320	; (adr r3, 80049c0 <IMU_Read+0x290>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f7fb ffdb 	bl	800083c <__aeabi_ddiv>
 8004886:	4602      	mov	r2, r0
 8004888:	460b      	mov	r3, r1
 800488a:	4610      	mov	r0, r2
 800488c:	4619      	mov	r1, r3
 800488e:	f7fc f9a3 	bl	8000bd8 <__aeabi_d2f>
 8004892:	4603      	mov	r3, r0
 8004894:	4a53      	ldr	r2, [pc, #332]	; (80049e4 <IMU_Read+0x2b4>)
 8004896:	6013      	str	r3, [r2, #0]
		 gyro.gyro.y = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) * 2 * M_PI)/360000;
 8004898:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <IMU_Read+0x2a8>)
 800489a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fd94 	bl	80043cc <lsm9ds1_from_fs2000dps_to_mdps>
 80048a4:	eef0 7a40 	vmov.f32	s15, s0
 80048a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80048ac:	ee17 0a90 	vmov	r0, s15
 80048b0:	f7fb fe42 	bl	8000538 <__aeabi_f2d>
 80048b4:	a340      	add	r3, pc, #256	; (adr r3, 80049b8 <IMU_Read+0x288>)
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f7fb fe95 	bl	80005e8 <__aeabi_dmul>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	a33e      	add	r3, pc, #248	; (adr r3, 80049c0 <IMU_Read+0x290>)
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f7fb ffb6 	bl	800083c <__aeabi_ddiv>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	f7fc f97e 	bl	8000bd8 <__aeabi_d2f>
 80048dc:	4603      	mov	r3, r0
 80048de:	4a41      	ldr	r2, [pc, #260]	; (80049e4 <IMU_Read+0x2b4>)
 80048e0:	6053      	str	r3, [r2, #4]
		 gyro.gyro.z = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) * 2 * M_PI)/360000;
 80048e2:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <IMU_Read+0x2a8>)
 80048e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fd6f 	bl	80043cc <lsm9ds1_from_fs2000dps_to_mdps>
 80048ee:	eef0 7a40 	vmov.f32	s15, s0
 80048f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80048f6:	ee17 0a90 	vmov	r0, s15
 80048fa:	f7fb fe1d 	bl	8000538 <__aeabi_f2d>
 80048fe:	a32e      	add	r3, pc, #184	; (adr r3, 80049b8 <IMU_Read+0x288>)
 8004900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004904:	f7fb fe70 	bl	80005e8 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4610      	mov	r0, r2
 800490e:	4619      	mov	r1, r3
 8004910:	a32b      	add	r3, pc, #172	; (adr r3, 80049c0 <IMU_Read+0x290>)
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f7fb ff91 	bl	800083c <__aeabi_ddiv>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	f7fc f959 	bl	8000bd8 <__aeabi_d2f>
 8004926:	4603      	mov	r3, r0
 8004928:	4a2e      	ldr	r2, [pc, #184]	; (80049e4 <IMU_Read+0x2b4>)
 800492a:	6093      	str	r3, [r2, #8]
//		gyro.gyro.x = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
//		gyro.gyro.y = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
//		gyro.gyro.z = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}

	if (reg.status_mag.zyxda) {
 800492c:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <IMU_Read+0x298>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d035      	beq.n	80049a6 <IMU_Read+0x276>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 800493a:	2206      	movs	r2, #6
 800493c:	2100      	movs	r1, #0
 800493e:	482a      	ldr	r0, [pc, #168]	; (80049e8 <IMU_Read+0x2b8>)
 8004940:	f005 fa1e 	bl	8009d80 <memset>
		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 8004944:	4928      	ldr	r1, [pc, #160]	; (80049e8 <IMU_Read+0x2b8>)
 8004946:	4822      	ldr	r0, [pc, #136]	; (80049d0 <IMU_Read+0x2a0>)
 8004948:	f7ff fe06 	bl	8004558 <lsm9ds1_magnetic_raw_get>
		mag.magnetic.x = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[0]) / 10;
 800494c:	4b26      	ldr	r3, [pc, #152]	; (80049e8 <IMU_Read+0x2b8>)
 800494e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fd52 	bl	80043fc <lsm9ds1_from_fs16gauss_to_mG>
 8004958:	eeb0 7a40 	vmov.f32	s14, s0
 800495c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004964:	4b21      	ldr	r3, [pc, #132]	; (80049ec <IMU_Read+0x2bc>)
 8004966:	edc3 7a00 	vstr	s15, [r3]
		mag.magnetic.y = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[1]) / 10;
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <IMU_Read+0x2b8>)
 800496c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fd43 	bl	80043fc <lsm9ds1_from_fs16gauss_to_mG>
 8004976:	eeb0 7a40 	vmov.f32	s14, s0
 800497a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800497e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <IMU_Read+0x2bc>)
 8004984:	edc3 7a01 	vstr	s15, [r3, #4]
		mag.magnetic.z = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[2]) / 10;
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <IMU_Read+0x2b8>)
 800498a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fd34 	bl	80043fc <lsm9ds1_from_fs16gauss_to_mG>
 8004994:	eeb0 7a40 	vmov.f32	s14, s0
 8004998:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800499c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049a0:	4b12      	ldr	r3, [pc, #72]	; (80049ec <IMU_Read+0x2bc>)
 80049a2:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	f3af 8000 	nop.w
 80049b0:	1a9fbe77 	.word	0x1a9fbe77
 80049b4:	40239d2f 	.word	0x40239d2f
 80049b8:	54442d18 	.word	0x54442d18
 80049bc:	400921fb 	.word	0x400921fb
 80049c0:	00000000 	.word	0x00000000
 80049c4:	4115f900 	.word	0x4115f900
 80049c8:	20000850 	.word	0x20000850
 80049cc:	20000ba8 	.word	0x20000ba8
 80049d0:	20000bb8 	.word	0x20000bb8
 80049d4:	20000838 	.word	0x20000838
 80049d8:	20000840 	.word	0x20000840
 80049dc:	408f4000 	.word	0x408f4000
 80049e0:	20000b60 	.word	0x20000b60
 80049e4:	20000b54 	.word	0x20000b54
 80049e8:	20000848 	.word	0x20000848
 80049ec:	20000b6c 	.word	0x20000b6c

080049f0 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d109      	bne.n	8004a14 <HAL_GPIO_EXTI_Callback+0x24>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 8004a00:	2101      	movs	r1, #1
 8004a02:	4814      	ldr	r0, [pc, #80]	; (8004a54 <HAL_GPIO_EXTI_Callback+0x64>)
 8004a04:	f002 fd92 	bl	800752c <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10e      	bne.n	8004a2c <HAL_GPIO_EXTI_Callback+0x3c>
			Set_AdvancedMode();
 8004a0e:	f000 f827 	bl	8004a60 <Set_AdvancedMode>
 8004a12:	e00b      	b.n	8004a2c <HAL_GPIO_EXTI_Callback+0x3c>
		}
    } else if (GPIO_Pin == GPIO_PIN_1) {
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d108      	bne.n	8004a2c <HAL_GPIO_EXTI_Callback+0x3c>
    	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	480d      	ldr	r0, [pc, #52]	; (8004a54 <HAL_GPIO_EXTI_Callback+0x64>)
 8004a1e:	f002 fd85 	bl	800752c <HAL_GPIO_ReadPin>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_GPIO_EXTI_Callback+0x3c>
    		Set_StandardMode();
 8004a28:	f000 f82a 	bl	8004a80 <Set_StandardMode>
    	}
    }
    exti_test1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	4809      	ldr	r0, [pc, #36]	; (8004a54 <HAL_GPIO_EXTI_Callback+0x64>)
 8004a30:	f002 fd7c 	bl	800752c <HAL_GPIO_ReadPin>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461a      	mov	r2, r3
 8004a38:	4b07      	ldr	r3, [pc, #28]	; (8004a58 <HAL_GPIO_EXTI_Callback+0x68>)
 8004a3a:	601a      	str	r2, [r3, #0]
    exti_test2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	4805      	ldr	r0, [pc, #20]	; (8004a54 <HAL_GPIO_EXTI_Callback+0x64>)
 8004a40:	f002 fd74 	bl	800752c <HAL_GPIO_ReadPin>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <HAL_GPIO_EXTI_Callback+0x6c>)
 8004a4a:	601a      	str	r2, [r3, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	48000800 	.word	0x48000800
 8004a58:	20000bd8 	.word	0x20000bd8
 8004a5c:	20000bdc 	.word	0x20000bdc

08004a60 <Set_AdvancedMode>:

void Set_AdvancedMode() {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	state = MODE_ADVANCED;
 8004a64:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <Set_AdvancedMode+0x18>)
 8004a66:	2204      	movs	r2, #4
 8004a68:	701a      	strb	r2, [r3, #0]
	mode = RUNNING_MODE_ADVANCED;
 8004a6a:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <Set_AdvancedMode+0x1c>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
	Start_AdvancedMode();
 8004a70:	f000 f97e 	bl	8004d70 <Start_AdvancedMode>
}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20000bd0 	.word	0x20000bd0
 8004a7c:	20000030 	.word	0x20000030

08004a80 <Set_StandardMode>:
void Set_StandardMode() {
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
	state = MODE_STANDARD;
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <Set_StandardMode+0x1c>)
 8004a86:	2203      	movs	r2, #3
 8004a88:	701a      	strb	r2, [r3, #0]
	mode = RUNNING_MODE_STANDARD;
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <Set_StandardMode+0x20>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000bd0 	.word	0x20000bd0
 8004aa0:	20000030 	.word	0x20000030

08004aa4 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	ed2d 8b02 	vpush	{d8}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a78      	ldr	r2, [pc, #480]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f040 80e7 	bne.w	8004c88 <HAL_TIM_PeriodElapsedCallback+0x1e4>
	if (state == INIT) { // State: INIT
 8004aba:	4b77      	ldr	r3, [pc, #476]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d112      	bne.n	8004ae8 <HAL_TIM_PeriodElapsedCallback+0x44>
		if (cnt_sec <= 0) {
 8004ac2:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	dc08      	bgt.n	8004adc <HAL_TIM_PeriodElapsedCallback+0x38>
			calibrate_init();
 8004aca:	f7fc faaf 	bl	800102c <calibrate_init>
			state = CAL_UNFLEXED;
 8004ace:	4b72      	ldr	r3, [pc, #456]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
			cnt_sec = CAL_TIME_SEC;
 8004ad4:	4b71      	ldr	r3, [pc, #452]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004ad6:	220a      	movs	r2, #10
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e0b8      	b.n	8004c4e <HAL_TIM_PeriodElapsedCallback+0x1aa>
		} else {
			cnt_sec -= 1;
 8004adc:	4b6f      	ldr	r3, [pc, #444]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	4a6e      	ldr	r2, [pc, #440]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e0b2      	b.n	8004c4e <HAL_TIM_PeriodElapsedCallback+0x1aa>
		}
	} else if (state == CAL_UNFLEXED) { // State: CAL_UNFLEXED
 8004ae8:	4b6b      	ldr	r3, [pc, #428]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d134      	bne.n	8004b5a <HAL_TIM_PeriodElapsedCallback+0xb6>
      ADC_Read();
 8004af0:	f7ff fd9a 	bl	8004628 <ADC_Read>
	  for (int i = 0; i < 4; i++) {
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e01b      	b.n	8004b32 <HAL_TIM_PeriodElapsedCallback+0x8e>
		resistance_min[i] = min(resistance_min[i], calculate_finger_resistance(i));
 8004afa:	4a69      	ldr	r2, [pc, #420]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	ed93 8a00 	vldr	s16, [r3]
 8004b06:	6978      	ldr	r0, [r7, #20]
 8004b08:	f7fc fa32 	bl	8000f70 <calculate_finger_resistance>
 8004b0c:	eef0 7a40 	vmov.f32	s15, s0
 8004b10:	eef0 0a67 	vmov.f32	s1, s15
 8004b14:	eeb0 0a48 	vmov.f32	s0, s16
 8004b18:	f001 fa0e 	bl	8005f38 <min>
 8004b1c:	eef0 7a40 	vmov.f32	s15, s0
 8004b20:	4a5f      	ldr	r2, [pc, #380]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 4; i++) {
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	dde0      	ble.n	8004afa <HAL_TIM_PeriodElapsedCallback+0x56>
	  }
      if (cnt_sec <= 0) {
 8004b38:	4b58      	ldr	r3, [pc, #352]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dc06      	bgt.n	8004b4e <HAL_TIM_PeriodElapsedCallback+0xaa>
        state = CAL_FLEXED;
 8004b40:	4b55      	ldr	r3, [pc, #340]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004b42:	2202      	movs	r2, #2
 8004b44:	701a      	strb	r2, [r3, #0]
        cnt_sec = CAL_TIME_SEC;
 8004b46:	4b55      	ldr	r3, [pc, #340]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004b48:	220a      	movs	r2, #10
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e07f      	b.n	8004c4e <HAL_TIM_PeriodElapsedCallback+0x1aa>
      } else {
        cnt_sec -= 1;
 8004b4e:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	4a51      	ldr	r2, [pc, #324]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	e079      	b.n	8004c4e <HAL_TIM_PeriodElapsedCallback+0x1aa>
      }
    } else if (state == CAL_FLEXED) { // State: CAL_FLEXED
 8004b5a:	4b4f      	ldr	r3, [pc, #316]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d175      	bne.n	8004c4e <HAL_TIM_PeriodElapsedCallback+0x1aa>
      ADC_Read();
 8004b62:	f7ff fd61 	bl	8004628 <ADC_Read>
      for (int i = 0; i < 4; i++) {
 8004b66:	2300      	movs	r3, #0
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	e01b      	b.n	8004ba4 <HAL_TIM_PeriodElapsedCallback+0x100>
    	resistance_max[i] = max(resistance_max[i], calculate_finger_resistance(i));
 8004b6c:	4a4d      	ldr	r2, [pc, #308]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	ed93 8a00 	vldr	s16, [r3]
 8004b78:	6938      	ldr	r0, [r7, #16]
 8004b7a:	f7fc f9f9 	bl	8000f70 <calculate_finger_resistance>
 8004b7e:	eef0 7a40 	vmov.f32	s15, s0
 8004b82:	eef0 0a67 	vmov.f32	s1, s15
 8004b86:	eeb0 0a48 	vmov.f32	s0, s16
 8004b8a:	f001 f9b9 	bl	8005f00 <max>
 8004b8e:	eef0 7a40 	vmov.f32	s15, s0
 8004b92:	4a44      	ldr	r2, [pc, #272]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 4; i++) {
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	dde0      	ble.n	8004b6c <HAL_TIM_PeriodElapsedCallback+0xc8>
      }
      if (cnt_sec <= 0) {
 8004baa:	4b3c      	ldr	r3, [pc, #240]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	dc48      	bgt.n	8004c44 <HAL_TIM_PeriodElapsedCallback+0x1a0>
    	int is_resistance_range_valid = 1;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < 4; i++) {
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	e01a      	b.n	8004bf2 <HAL_TIM_PeriodElapsedCallback+0x14e>
    		if (resistance_max[i] - resistance_min[i] < RESISTANCE_RANGE_THRESH) {
 8004bbc:	4a39      	ldr	r2, [pc, #228]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	ed93 7a00 	vldr	s14, [r3]
 8004bc8:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	edd3 7a00 	vldr	s15, [r3]
 8004bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8004ca8 <HAL_TIM_PeriodElapsedCallback+0x204>
 8004bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be4:	d502      	bpl.n	8004bec <HAL_TIM_PeriodElapsedCallback+0x148>
    			is_resistance_range_valid = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
    			break;
 8004bea:	e005      	b.n	8004bf8 <HAL_TIM_PeriodElapsedCallback+0x154>
    	for (int i = 0; i < 4; i++) {
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	dde1      	ble.n	8004bbc <HAL_TIM_PeriodElapsedCallback+0x118>
    		}
    	}
    	if (is_resistance_range_valid != 0) {
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01b      	beq.n	8004c36 <HAL_TIM_PeriodElapsedCallback+0x192>
        HAL_TIM_Base_Stop_IT(&htim16);
 8004bfe:	4825      	ldr	r0, [pc, #148]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004c00:	f004 fe62 	bl	80098c8 <HAL_TIM_Base_Stop_IT>
        HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004c04:	2006      	movs	r0, #6
 8004c06:	f002 f9d6 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004c0a:	2007      	movs	r0, #7
 8004c0c:	f002 f9d3 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) { // @henry: check PC0 IDR for starting mode
 8004c10:	2101      	movs	r1, #1
 8004c12:	4826      	ldr	r0, [pc, #152]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004c14:	f002 fc8a 	bl	800752c <HAL_GPIO_ReadPin>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_TIM_PeriodElapsedCallback+0x186>
          state = MODE_ADVANCED;
 8004c1e:	4b1e      	ldr	r3, [pc, #120]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004c20:	2204      	movs	r2, #4
 8004c22:	701a      	strb	r2, [r3, #0]
          Set_AdvancedMode();
 8004c24:	f7ff ff1c 	bl	8004a60 <Set_AdvancedMode>
 8004c28:	e011      	b.n	8004c4e <HAL_TIM_PeriodElapsedCallback+0x1aa>
        } else {
          state = MODE_STANDARD;
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	701a      	strb	r2, [r3, #0]
          Set_StandardMode();
 8004c30:	f7ff ff26 	bl	8004a80 <Set_StandardMode>
 8004c34:	e00b      	b.n	8004c4e <HAL_TIM_PeriodElapsedCallback+0x1aa>
        }
    	} else {
    		state = CAL_UNFLEXED;
 8004c36:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	701a      	strb	r2, [r3, #0]
    		cnt_sec = CAL_TIME_SEC;
 8004c3c:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004c3e:	220a      	movs	r2, #10
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e004      	b.n	8004c4e <HAL_TIM_PeriodElapsedCallback+0x1aa>
    	}
      } else {
        cnt_sec -= 1;
 8004c44:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	4a14      	ldr	r2, [pc, #80]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004c4c:	6013      	str	r3, [r2, #0]
      }
    }
    LCD_Update(gimbal_roll, gimbal_pitch, gimbal_throttle, gimbal_yaw, state, CAL_TIME_SEC, cnt_sec);
 8004c4e:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8004c50:	edd3 7a00 	vldr	s15, [r3]
 8004c54:	4b17      	ldr	r3, [pc, #92]	; (8004cb4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8004c56:	ed93 7a00 	vldr	s14, [r3]
 8004c5a:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8004c5c:	edd3 6a00 	vldr	s13, [r3]
 8004c60:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <HAL_TIM_PeriodElapsedCallback+0x218>)
 8004c62:	ed93 6a00 	vldr	s12, [r3]
 8004c66:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	210a      	movs	r1, #10
 8004c74:	eef0 1a46 	vmov.f32	s3, s12
 8004c78:	eeb0 1a66 	vmov.f32	s2, s13
 8004c7c:	eef0 0a47 	vmov.f32	s1, s14
 8004c80:	eeb0 0a67 	vmov.f32	s0, s15
 8004c84:	f7ff f9c8 	bl	8004018 <LCD_Update>
  }
}
 8004c88:	bf00      	nop
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	ecbd 8b02 	vpop	{d8}
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	20000ae4 	.word	0x20000ae4
 8004c98:	20000bd0 	.word	0x20000bd0
 8004c9c:	20000bd4 	.word	0x20000bd4
 8004ca0:	20000b88 	.word	0x20000b88
 8004ca4:	20000b98 	.word	0x20000b98
 8004ca8:	44fa0000 	.word	0x44fa0000
 8004cac:	48000800 	.word	0x48000800
 8004cb0:	20000b44 	.word	0x20000b44
 8004cb4:	20000b48 	.word	0x20000b48
 8004cb8:	20000b50 	.word	0x20000b50
 8004cbc:	20000b4c 	.word	0x20000b4c

08004cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004cc4:	f001 f9f6 	bl	80060b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cc8:	f000 f97c 	bl	8004fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004ccc:	f000 fd74 	bl	80057b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004cd0:	f000 fd54 	bl	800577c <MX_DMA_Init>
  MX_ADC1_Init();
 8004cd4:	f000 f9d4 	bl	8005080 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004cd8:	f000 fa7e 	bl	80051d8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004cdc:	f000 fb08 	bl	80052f0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8004ce0:	f000 fba4 	bl	800542c <MX_ADC4_Init>
  MX_I2C1_Init();
 8004ce4:	f000 fc2e 	bl	8005544 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004ce8:	f000 fc6c 	bl	80055c4 <MX_I2C2_Init>
  MX_TIM16_Init();
 8004cec:	f000 fd1e 	bl	800572c <MX_TIM16_Init>
  MX_SPI1_Init();
 8004cf0:	f000 fca8 	bl	8005644 <MX_SPI1_Init>
//  SPI1_Setup();
  LCD_Init(0,0,0);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f7fd ffc1 	bl	8002c80 <LCD_Init>
  LCD_Clear(BLACK);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f7fe f968 	bl	8002fd4 <LCD_Clear>
//  }
//  MCP4728_Init(&hi2c2, output);
//  output.channelVref = 0x00;
//  output.channel_Gain = 0x00;

  state = INIT;
 8004d04:	4b13      	ldr	r3, [pc, #76]	; (8004d54 <main+0x94>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
  cnt_sec = CAL_TIME_SEC;
 8004d0a:	4b13      	ldr	r3, [pc, #76]	; (8004d58 <main+0x98>)
 8004d0c:	220a      	movs	r2, #10
 8004d0e:	601a      	str	r2, [r3, #0]
  LCD_Update(gimbal_roll, gimbal_pitch, gimbal_throttle, gimbal_yaw, state, CAL_TIME_SEC, cnt_sec);
 8004d10:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <main+0x9c>)
 8004d12:	edd3 7a00 	vldr	s15, [r3]
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <main+0xa0>)
 8004d18:	ed93 7a00 	vldr	s14, [r3]
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <main+0xa4>)
 8004d1e:	edd3 6a00 	vldr	s13, [r3]
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <main+0xa8>)
 8004d24:	ed93 6a00 	vldr	s12, [r3]
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <main+0x94>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	4b0a      	ldr	r3, [pc, #40]	; (8004d58 <main+0x98>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	210a      	movs	r1, #10
 8004d36:	eef0 1a46 	vmov.f32	s3, s12
 8004d3a:	eeb0 1a66 	vmov.f32	s2, s13
 8004d3e:	eef0 0a47 	vmov.f32	s1, s14
 8004d42:	eeb0 0a67 	vmov.f32	s0, s15
 8004d46:	f7ff f967 	bl	8004018 <LCD_Update>
  HAL_TIM_Base_Start_IT(&htim16); // @henry: starting timer
 8004d4a:	4808      	ldr	r0, [pc, #32]	; (8004d6c <main+0xac>)
 8004d4c:	f004 fd52 	bl	80097f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
//  Start_AdvancedMode();

  while (1);
 8004d50:	e7fe      	b.n	8004d50 <main+0x90>
 8004d52:	bf00      	nop
 8004d54:	20000bd0 	.word	0x20000bd0
 8004d58:	20000bd4 	.word	0x20000bd4
 8004d5c:	20000b44 	.word	0x20000b44
 8004d60:	20000b48 	.word	0x20000b48
 8004d64:	20000b50 	.word	0x20000b50
 8004d68:	20000b4c 	.word	0x20000b4c
 8004d6c:	20000ae4 	.word	0x20000ae4

08004d70 <Start_AdvancedMode>:
}

void Start_AdvancedMode(void) {
 8004d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
  reset_aux_frame();
 8004d78:	f7fc fa38 	bl	80011ec <reset_aux_frame>
  t1 = HAL_GetTick();
 8004d7c:	f001 f9f4 	bl	8006168 <HAL_GetTick>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b80      	ldr	r3, [pc, #512]	; (8004f88 <Start_AdvancedMode+0x218>)
 8004d86:	601a      	str	r2, [r3, #0]
  int cnt_lcd_update = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (mode == RUNNING_MODE_ADVANCED) {
 8004d8c:	e0f1      	b.n	8004f72 <Start_AdvancedMode+0x202>
	  /* SENSOR READ BEGIN */
	  ADC_Read();
 8004d8e:	f7ff fc4b 	bl	8004628 <ADC_Read>
	  IMU_Read();
 8004d92:	f7ff fccd 	bl	8004730 <IMU_Read>

	  /* SENSOR READ END */

	  /* CALCULATIONS BEGIN */
	  t2 = HAL_GetTick();
 8004d96:	f001 f9e7 	bl	8006168 <HAL_GetTick>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4b7b      	ldr	r3, [pc, #492]	; (8004f8c <Start_AdvancedMode+0x21c>)
 8004da0:	601a      	str	r2, [r3, #0]
//	  calculate_orientation((t2 - t1) / 1000.0f); // @henry: adaptive frequency was way too fast
	  calculate_orientation(0.01);
 8004da2:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8004f90 <Start_AdvancedMode+0x220>
 8004da6:	f7fc f967 	bl	8001078 <calculate_orientation>
	  t1 = t2;
 8004daa:	4b78      	ldr	r3, [pc, #480]	; (8004f8c <Start_AdvancedMode+0x21c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a76      	ldr	r2, [pc, #472]	; (8004f88 <Start_AdvancedMode+0x218>)
 8004db0:	6013      	str	r3, [r2, #0]
	  calculate_gestures();
 8004db2:	f7fb ff61 	bl	8000c78 <calculate_gestures>

	  /* CALCULATIONS END*/

	  /* OUTPUT BEGIN */
	  output.channel_Val[0] = DAC_resting[0] + (gimbal_pitch - 0.5) * DAC_factor[0]; // pitch
 8004db6:	4b77      	ldr	r3, [pc, #476]	; (8004f94 <Start_AdvancedMode+0x224>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fbaa 	bl	8000514 <__aeabi_i2d>
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	460d      	mov	r5, r1
 8004dc4:	4b74      	ldr	r3, [pc, #464]	; (8004f98 <Start_AdvancedMode+0x228>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fb fbb5 	bl	8000538 <__aeabi_f2d>
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	4b72      	ldr	r3, [pc, #456]	; (8004f9c <Start_AdvancedMode+0x22c>)
 8004dd4:	f7fb fa50 	bl	8000278 <__aeabi_dsub>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4690      	mov	r8, r2
 8004dde:	4699      	mov	r9, r3
 8004de0:	4b6f      	ldr	r3, [pc, #444]	; (8004fa0 <Start_AdvancedMode+0x230>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fb fb95 	bl	8000514 <__aeabi_i2d>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4640      	mov	r0, r8
 8004df0:	4649      	mov	r1, r9
 8004df2:	f7fb fbf9 	bl	80005e8 <__aeabi_dmul>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	f7fb fa3d 	bl	800027c <__adddf3>
 8004e02:	4602      	mov	r2, r0
 8004e04:	460b      	mov	r3, r1
 8004e06:	4610      	mov	r0, r2
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f7fb fec5 	bl	8000b98 <__aeabi_d2uiz>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	4b64      	ldr	r3, [pc, #400]	; (8004fa4 <Start_AdvancedMode+0x234>)
 8004e14:	805a      	strh	r2, [r3, #2]
	  output.channel_Val[1] = DAC_resting[1] + (gimbal_roll - 0.5) * DAC_factor[1]; // roll
 8004e16:	4b5f      	ldr	r3, [pc, #380]	; (8004f94 <Start_AdvancedMode+0x224>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb fb7a 	bl	8000514 <__aeabi_i2d>
 8004e20:	4604      	mov	r4, r0
 8004e22:	460d      	mov	r5, r1
 8004e24:	4b60      	ldr	r3, [pc, #384]	; (8004fa8 <Start_AdvancedMode+0x238>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fb fb85 	bl	8000538 <__aeabi_f2d>
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	4b5a      	ldr	r3, [pc, #360]	; (8004f9c <Start_AdvancedMode+0x22c>)
 8004e34:	f7fb fa20 	bl	8000278 <__aeabi_dsub>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4690      	mov	r8, r2
 8004e3e:	4699      	mov	r9, r3
 8004e40:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <Start_AdvancedMode+0x230>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fb fb65 	bl	8000514 <__aeabi_i2d>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4640      	mov	r0, r8
 8004e50:	4649      	mov	r1, r9
 8004e52:	f7fb fbc9 	bl	80005e8 <__aeabi_dmul>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f7fb fa0d 	bl	800027c <__adddf3>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4610      	mov	r0, r2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7fb fe95 	bl	8000b98 <__aeabi_d2uiz>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <Start_AdvancedMode+0x234>)
 8004e74:	809a      	strh	r2, [r3, #4]
	  output.channel_Val[2] = DAC_resting[2] + (gimbal_throttle * 2) * DAC_factor[2]; // throttle
 8004e76:	4b47      	ldr	r3, [pc, #284]	; (8004f94 <Start_AdvancedMode+0x224>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e82:	4b4a      	ldr	r3, [pc, #296]	; (8004fac <Start_AdvancedMode+0x23c>)
 8004e84:	edd3 7a00 	vldr	s15, [r3]
 8004e88:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004e8c:	4b44      	ldr	r3, [pc, #272]	; (8004fa0 <Start_AdvancedMode+0x230>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	ee07 3a90 	vmov	s15, r3
 8004e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea4:	ee17 3a90 	vmov	r3, s15
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	4b3e      	ldr	r3, [pc, #248]	; (8004fa4 <Start_AdvancedMode+0x234>)
 8004eac:	80da      	strh	r2, [r3, #6]
	  output.channel_Val[3] = DAC_resting[3] + (gimbal_yaw - 0.5) * DAC_factor[3]; // yaw
 8004eae:	4b39      	ldr	r3, [pc, #228]	; (8004f94 <Start_AdvancedMode+0x224>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb fb2e 	bl	8000514 <__aeabi_i2d>
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	4b3c      	ldr	r3, [pc, #240]	; (8004fb0 <Start_AdvancedMode+0x240>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb fb39 	bl	8000538 <__aeabi_f2d>
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <Start_AdvancedMode+0x22c>)
 8004ecc:	f7fb f9d4 	bl	8000278 <__aeabi_dsub>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4690      	mov	r8, r2
 8004ed6:	4699      	mov	r9, r3
 8004ed8:	4b31      	ldr	r3, [pc, #196]	; (8004fa0 <Start_AdvancedMode+0x230>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fb fb19 	bl	8000514 <__aeabi_i2d>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	4649      	mov	r1, r9
 8004eea:	f7fb fb7d 	bl	80005e8 <__aeabi_dmul>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	f7fb f9c1 	bl	800027c <__adddf3>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	f7fb fe49 	bl	8000b98 <__aeabi_d2uiz>
 8004f06:	4603      	mov	r3, r0
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	4b26      	ldr	r3, [pc, #152]	; (8004fa4 <Start_AdvancedMode+0x234>)
 8004f0c:	811a      	strh	r2, [r3, #8]
	  MCP4728_Write_AllChannels_Diff(&hi2c2, output);
 8004f0e:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <Start_AdvancedMode+0x234>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4611      	mov	r1, r2
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4610      	mov	r0, r2
 8004f18:	891a      	ldrh	r2, [r3, #8]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f362 030f 	bfi	r3, r2, #0, #16
 8004f20:	4602      	mov	r2, r0
 8004f22:	4824      	ldr	r0, [pc, #144]	; (8004fb4 <Start_AdvancedMode+0x244>)
 8004f24:	f7fd fcfd 	bl	8002922 <MCP4728_Write_AllChannels_Diff>

	  /* OUTPUT END */

	  cnt_lcd_update += 1;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	607b      	str	r3, [r7, #4]
	  if (cnt_lcd_update == LCD_UPDATE_PERIOD) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b05      	cmp	r3, #5
 8004f32:	d11e      	bne.n	8004f72 <Start_AdvancedMode+0x202>
		  cnt_lcd_update = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	607b      	str	r3, [r7, #4]
		  LCD_Update(gimbal_roll, gimbal_pitch, gimbal_throttle, gimbal_yaw, state, CAL_TIME_SEC, cnt_sec);
 8004f38:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <Start_AdvancedMode+0x238>)
 8004f3a:	edd3 7a00 	vldr	s15, [r3]
 8004f3e:	4b16      	ldr	r3, [pc, #88]	; (8004f98 <Start_AdvancedMode+0x228>)
 8004f40:	ed93 7a00 	vldr	s14, [r3]
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <Start_AdvancedMode+0x23c>)
 8004f46:	edd3 6a00 	vldr	s13, [r3]
 8004f4a:	4b19      	ldr	r3, [pc, #100]	; (8004fb0 <Start_AdvancedMode+0x240>)
 8004f4c:	ed93 6a00 	vldr	s12, [r3]
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <Start_AdvancedMode+0x248>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <Start_AdvancedMode+0x24c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	210a      	movs	r1, #10
 8004f5e:	eef0 1a46 	vmov.f32	s3, s12
 8004f62:	eeb0 1a66 	vmov.f32	s2, s13
 8004f66:	eef0 0a47 	vmov.f32	s1, s14
 8004f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6e:	f7ff f853 	bl	8004018 <LCD_Update>
  while (mode == RUNNING_MODE_ADVANCED) {
 8004f72:	4b13      	ldr	r3, [pc, #76]	; (8004fc0 <Start_AdvancedMode+0x250>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	f43f af09 	beq.w	8004d8e <Start_AdvancedMode+0x1e>
	  }
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f88:	20000bc8 	.word	0x20000bc8
 8004f8c:	20000bcc 	.word	0x20000bcc
 8004f90:	3c23d70a 	.word	0x3c23d70a
 8004f94:	20000010 	.word	0x20000010
 8004f98:	20000b48 	.word	0x20000b48
 8004f9c:	3fe00000 	.word	0x3fe00000
 8004fa0:	20000020 	.word	0x20000020
 8004fa4:	200000dc 	.word	0x200000dc
 8004fa8:	20000b44 	.word	0x20000b44
 8004fac:	20000b50 	.word	0x20000b50
 8004fb0:	20000b4c 	.word	0x20000b4c
 8004fb4:	200009e8 	.word	0x200009e8
 8004fb8:	20000bd0 	.word	0x20000bd0
 8004fbc:	20000bd4 	.word	0x20000bd4
 8004fc0:	20000030 	.word	0x20000030

08004fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b09e      	sub	sp, #120	; 0x78
 8004fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004fca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004fce:	2228      	movs	r2, #40	; 0x28
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f004 fed4 	bl	8009d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004fd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fe8:	463b      	mov	r3, r7
 8004fea:	223c      	movs	r2, #60	; 0x3c
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f004 fec6 	bl	8009d80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005000:	2302      	movs	r3, #2
 8005002:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005004:	2300      	movs	r3, #0
 8005006:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8005008:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800500c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800500e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005012:	4618      	mov	r0, r3
 8005014:	f002 ff18 	bl	8007e48 <HAL_RCC_OscConfig>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800501e:	f000 fc5b 	bl	80058d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005022:	230f      	movs	r3, #15
 8005024:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005026:	2300      	movs	r3, #0
 8005028:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800502a:	2300      	movs	r3, #0
 800502c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800502e:	2300      	movs	r3, #0
 8005030:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005032:	2300      	movs	r3, #0
 8005034:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005036:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f003 ff41 	bl	8008ec4 <HAL_RCC_ClockConfig>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8005048:	f000 fc46 	bl	80058d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 800504c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005050:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8005052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8005058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8005062:	2300      	movs	r3, #0
 8005064:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005066:	463b      	mov	r3, r7
 8005068:	4618      	mov	r0, r3
 800506a:	f004 f911 	bl	8009290 <HAL_RCCEx_PeriphCLKConfig>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8005074:	f000 fc30 	bl	80058d8 <Error_Handler>
  }
}
 8005078:	bf00      	nop
 800507a:	3778      	adds	r7, #120	; 0x78
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005086:	f107 031c 	add.w	r3, r7, #28
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	611a      	str	r2, [r3, #16]
 80050a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80050a2:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80050a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80050aa:	4b4a      	ldr	r3, [pc, #296]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80050b0:	4b48      	ldr	r3, [pc, #288]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80050b6:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80050bc:	4b45      	ldr	r3, [pc, #276]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050be:	2200      	movs	r2, #0
 80050c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80050c2:	4b44      	ldr	r3, [pc, #272]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80050ca:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80050d0:	4b40      	ldr	r3, [pc, #256]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050d2:	2201      	movs	r2, #1
 80050d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80050d6:	4b3f      	ldr	r3, [pc, #252]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050d8:	2200      	movs	r2, #0
 80050da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80050dc:	4b3d      	ldr	r3, [pc, #244]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050de:	2201      	movs	r2, #1
 80050e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80050e2:	4b3c      	ldr	r3, [pc, #240]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80050ea:	4b3a      	ldr	r3, [pc, #232]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050ec:	2204      	movs	r2, #4
 80050ee:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80050f0:	4b38      	ldr	r3, [pc, #224]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80050f6:	4b37      	ldr	r3, [pc, #220]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80050fc:	4835      	ldr	r0, [pc, #212]	; (80051d4 <MX_ADC1_Init+0x154>)
 80050fe:	f001 f83f 	bl	8006180 <HAL_ADC_Init>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8005108:	f000 fbe6 	bl	80058d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005110:	f107 031c 	add.w	r3, r7, #28
 8005114:	4619      	mov	r1, r3
 8005116:	482f      	ldr	r0, [pc, #188]	; (80051d4 <MX_ADC1_Init+0x154>)
 8005118:	f001 fcfe 	bl	8006b18 <HAL_ADCEx_MultiModeConfigChannel>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8005122:	f000 fbd9 	bl	80058d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005126:	2301      	movs	r3, #1
 8005128:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800512a:	2301      	movs	r3, #1
 800512c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800513e:	1d3b      	adds	r3, r7, #4
 8005140:	4619      	mov	r1, r3
 8005142:	4824      	ldr	r0, [pc, #144]	; (80051d4 <MX_ADC1_Init+0x154>)
 8005144:	f001 f9fc 	bl	8006540 <HAL_ADC_ConfigChannel>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800514e:	f000 fbc3 	bl	80058d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_Calibrate(ADC1);
 8005152:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005156:	f7ff fa8d 	bl	8004674 <ADC_Calibrate>
//  ADC_ADVREGEN(ADC1); // @henry
//  ADC12_COMMON->CCR|= ADC_CCR_VREFEN; // @henry

  ADC1->CR |= ADC_CR_ADEN; // Enable ADC
 800515a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	6093      	str	r3, [r2, #8]
//  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC1->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 800516a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005178:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR &= ~0xC; // 12-bit Resolution
 800517a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005184:	f023 030c 	bic.w	r3, r3, #12
 8005188:	60d3      	str	r3, [r2, #12]

  ADC1->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 800518a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005194:	f023 030f 	bic.w	r3, r3, #15
 8005198:	6313      	str	r3, [r2, #48]	; 0x30
  ADC1->SQR1 |= 0x1 << 6; // Channel 1 of ADC1
 800519a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80051a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a8:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 80051aa:	bf00      	nop
 80051ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f8      	beq.n	80051ac <MX_ADC1_Init+0x12c>
  ADC1->CR |= ADC_CR_ADSTART; // Start the ADC
 80051ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 80051ca:	bf00      	nop
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000854 	.word	0x20000854

080051d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80051de:	463b      	mov	r3, r7
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	605a      	str	r2, [r3, #4]
 80051e6:	609a      	str	r2, [r3, #8]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	611a      	str	r2, [r3, #16]
 80051ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80051ee:	4b3e      	ldr	r3, [pc, #248]	; (80052e8 <MX_ADC2_Init+0x110>)
 80051f0:	4a3e      	ldr	r2, [pc, #248]	; (80052ec <MX_ADC2_Init+0x114>)
 80051f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80051f4:	4b3c      	ldr	r3, [pc, #240]	; (80052e8 <MX_ADC2_Init+0x110>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <MX_ADC2_Init+0x110>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005200:	4b39      	ldr	r3, [pc, #228]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005202:	2200      	movs	r2, #0
 8005204:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005206:	4b38      	ldr	r3, [pc, #224]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005208:	2200      	movs	r2, #0
 800520a:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <MX_ADC2_Init+0x110>)
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005214:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005216:	2200      	movs	r2, #0
 8005218:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800521a:	4b33      	ldr	r3, [pc, #204]	; (80052e8 <MX_ADC2_Init+0x110>)
 800521c:	2201      	movs	r2, #1
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005220:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005226:	4b30      	ldr	r3, [pc, #192]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005228:	2201      	movs	r2, #1
 800522a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800522c:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <MX_ADC2_Init+0x110>)
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005234:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005236:	2204      	movs	r2, #4
 8005238:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800523a:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <MX_ADC2_Init+0x110>)
 800523c:	2200      	movs	r2, #0
 800523e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005240:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005242:	2200      	movs	r2, #0
 8005244:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005246:	4828      	ldr	r0, [pc, #160]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005248:	f000 ff9a 	bl	8006180 <HAL_ADC_Init>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8005252:	f000 fb41 	bl	80058d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005256:	2303      	movs	r3, #3
 8005258:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800525a:	2301      	movs	r3, #1
 800525c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800526e:	463b      	mov	r3, r7
 8005270:	4619      	mov	r1, r3
 8005272:	481d      	ldr	r0, [pc, #116]	; (80052e8 <MX_ADC2_Init+0x110>)
 8005274:	f001 f964 	bl	8006540 <HAL_ADC_ConfigChannel>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800527e:	f000 fb2b 	bl	80058d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC_Calibrate(ADC2);
 8005282:	481a      	ldr	r0, [pc, #104]	; (80052ec <MX_ADC2_Init+0x114>)
 8005284:	f7ff f9f6 	bl	8004674 <ADC_Calibrate>

  ADC2->CR |= ADC_CR_ADEN; // Enable ADC
 8005288:	4b18      	ldr	r3, [pc, #96]	; (80052ec <MX_ADC2_Init+0x114>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <MX_ADC2_Init+0x114>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	6093      	str	r3, [r2, #8]
//  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC2->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <MX_ADC2_Init+0x114>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <MX_ADC2_Init+0x114>)
 800529a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800529e:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~0xC; // 12-bit Resolution
 80052a0:	4b12      	ldr	r3, [pc, #72]	; (80052ec <MX_ADC2_Init+0x114>)
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	4a11      	ldr	r2, [pc, #68]	; (80052ec <MX_ADC2_Init+0x114>)
 80052a6:	f023 030c 	bic.w	r3, r3, #12
 80052aa:	60d3      	str	r3, [r2, #12]

  ADC2->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 80052ac:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <MX_ADC2_Init+0x114>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	4a0e      	ldr	r2, [pc, #56]	; (80052ec <MX_ADC2_Init+0x114>)
 80052b2:	f023 030f 	bic.w	r3, r3, #15
 80052b6:	6313      	str	r3, [r2, #48]	; 0x30
  ADC2->SQR1 |= 0x3 << 6; // Channel 3 of ADC2
 80052b8:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <MX_ADC2_Init+0x114>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	4a0b      	ldr	r2, [pc, #44]	; (80052ec <MX_ADC2_Init+0x114>)
 80052be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052c2:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 80052c4:	bf00      	nop
 80052c6:	4b09      	ldr	r3, [pc, #36]	; (80052ec <MX_ADC2_Init+0x114>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f9      	beq.n	80052c6 <MX_ADC2_Init+0xee>
  ADC2->CR |= ADC_CR_ADSTART; // Start the ADC
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <MX_ADC2_Init+0x114>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	4a05      	ldr	r2, [pc, #20]	; (80052ec <MX_ADC2_Init+0x114>)
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC2_Init 2 */

}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200008a4 	.word	0x200008a4
 80052ec:	50000100 	.word	0x50000100

080052f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80052f6:	f107 031c 	add.w	r3, r7, #28
 80052fa:	2200      	movs	r2, #0
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005302:	1d3b      	adds	r3, r7, #4
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	611a      	str	r2, [r3, #16]
 8005310:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8005312:	4b44      	ldr	r3, [pc, #272]	; (8005424 <MX_ADC3_Init+0x134>)
 8005314:	4a44      	ldr	r2, [pc, #272]	; (8005428 <MX_ADC3_Init+0x138>)
 8005316:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005318:	4b42      	ldr	r3, [pc, #264]	; (8005424 <MX_ADC3_Init+0x134>)
 800531a:	2200      	movs	r2, #0
 800531c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800531e:	4b41      	ldr	r3, [pc, #260]	; (8005424 <MX_ADC3_Init+0x134>)
 8005320:	2200      	movs	r2, #0
 8005322:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005324:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <MX_ADC3_Init+0x134>)
 8005326:	2200      	movs	r2, #0
 8005328:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800532a:	4b3e      	ldr	r3, [pc, #248]	; (8005424 <MX_ADC3_Init+0x134>)
 800532c:	2200      	movs	r2, #0
 800532e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005330:	4b3c      	ldr	r3, [pc, #240]	; (8005424 <MX_ADC3_Init+0x134>)
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005338:	4b3a      	ldr	r3, [pc, #232]	; (8005424 <MX_ADC3_Init+0x134>)
 800533a:	2200      	movs	r2, #0
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800533e:	4b39      	ldr	r3, [pc, #228]	; (8005424 <MX_ADC3_Init+0x134>)
 8005340:	2201      	movs	r2, #1
 8005342:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005344:	4b37      	ldr	r3, [pc, #220]	; (8005424 <MX_ADC3_Init+0x134>)
 8005346:	2200      	movs	r2, #0
 8005348:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800534a:	4b36      	ldr	r3, [pc, #216]	; (8005424 <MX_ADC3_Init+0x134>)
 800534c:	2201      	movs	r2, #1
 800534e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005350:	4b34      	ldr	r3, [pc, #208]	; (8005424 <MX_ADC3_Init+0x134>)
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005358:	4b32      	ldr	r3, [pc, #200]	; (8005424 <MX_ADC3_Init+0x134>)
 800535a:	2204      	movs	r2, #4
 800535c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800535e:	4b31      	ldr	r3, [pc, #196]	; (8005424 <MX_ADC3_Init+0x134>)
 8005360:	2200      	movs	r2, #0
 8005362:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005364:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <MX_ADC3_Init+0x134>)
 8005366:	2200      	movs	r2, #0
 8005368:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800536a:	482e      	ldr	r0, [pc, #184]	; (8005424 <MX_ADC3_Init+0x134>)
 800536c:	f000 ff08 	bl	8006180 <HAL_ADC_Init>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8005376:	f000 faaf 	bl	80058d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800537e:	f107 031c 	add.w	r3, r7, #28
 8005382:	4619      	mov	r1, r3
 8005384:	4827      	ldr	r0, [pc, #156]	; (8005424 <MX_ADC3_Init+0x134>)
 8005386:	f001 fbc7 	bl	8006b18 <HAL_ADCEx_MultiModeConfigChannel>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8005390:	f000 faa2 	bl	80058d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005394:	2301      	movs	r3, #1
 8005396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005398:	2301      	movs	r3, #1
 800539a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80053ac:	1d3b      	adds	r3, r7, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	481c      	ldr	r0, [pc, #112]	; (8005424 <MX_ADC3_Init+0x134>)
 80053b2:	f001 f8c5 	bl	8006540 <HAL_ADC_ConfigChannel>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80053bc:	f000 fa8c 	bl	80058d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  ADC_Calibrate(ADC3);
 80053c0:	4819      	ldr	r0, [pc, #100]	; (8005428 <MX_ADC3_Init+0x138>)
 80053c2:	f7ff f957 	bl	8004674 <ADC_Calibrate>

  ADC3->CR |= ADC_CR_ADEN; // Enable ADC
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <MX_ADC3_Init+0x138>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4a17      	ldr	r2, [pc, #92]	; (8005428 <MX_ADC3_Init+0x138>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	6093      	str	r3, [r2, #8]
//  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC3->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <MX_ADC3_Init+0x138>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <MX_ADC3_Init+0x138>)
 80053d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053dc:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~0xC; // 12-bit Resolution
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <MX_ADC3_Init+0x138>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	4a11      	ldr	r2, [pc, #68]	; (8005428 <MX_ADC3_Init+0x138>)
 80053e4:	f023 030c 	bic.w	r3, r3, #12
 80053e8:	60d3      	str	r3, [r2, #12]

  ADC3->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 80053ea:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <MX_ADC3_Init+0x138>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4a0e      	ldr	r2, [pc, #56]	; (8005428 <MX_ADC3_Init+0x138>)
 80053f0:	f023 030f 	bic.w	r3, r3, #15
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
  ADC3->SQR1 |= 0x1 << 6; // Channel 1 of ADC3
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <MX_ADC3_Init+0x138>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	4a0b      	ldr	r2, [pc, #44]	; (8005428 <MX_ADC3_Init+0x138>)
 80053fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005400:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005402:	bf00      	nop
 8005404:	4b08      	ldr	r3, [pc, #32]	; (8005428 <MX_ADC3_Init+0x138>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f9      	beq.n	8005404 <MX_ADC3_Init+0x114>
  ADC3->CR |= ADC_CR_ADSTART; // Start the ADC
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <MX_ADC3_Init+0x138>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <MX_ADC3_Init+0x138>)
 8005416:	f043 0304 	orr.w	r3, r3, #4
 800541a:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC3_Init 2 */

}
 800541c:	bf00      	nop
 800541e:	3728      	adds	r7, #40	; 0x28
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200008f4 	.word	0x200008f4
 8005428:	50000400 	.word	0x50000400

0800542c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005432:	463b      	mov	r3, r7
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	605a      	str	r2, [r3, #4]
 800543a:	609a      	str	r2, [r3, #8]
 800543c:	60da      	str	r2, [r3, #12]
 800543e:	611a      	str	r2, [r3, #16]
 8005440:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8005442:	4b3e      	ldr	r3, [pc, #248]	; (800553c <MX_ADC4_Init+0x110>)
 8005444:	4a3e      	ldr	r2, [pc, #248]	; (8005540 <MX_ADC4_Init+0x114>)
 8005446:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005448:	4b3c      	ldr	r3, [pc, #240]	; (800553c <MX_ADC4_Init+0x110>)
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <MX_ADC4_Init+0x110>)
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005454:	4b39      	ldr	r3, [pc, #228]	; (800553c <MX_ADC4_Init+0x110>)
 8005456:	2200      	movs	r2, #0
 8005458:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800545a:	4b38      	ldr	r3, [pc, #224]	; (800553c <MX_ADC4_Init+0x110>)
 800545c:	2200      	movs	r2, #0
 800545e:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8005460:	4b36      	ldr	r3, [pc, #216]	; (800553c <MX_ADC4_Init+0x110>)
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005468:	4b34      	ldr	r3, [pc, #208]	; (800553c <MX_ADC4_Init+0x110>)
 800546a:	2200      	movs	r2, #0
 800546c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800546e:	4b33      	ldr	r3, [pc, #204]	; (800553c <MX_ADC4_Init+0x110>)
 8005470:	2201      	movs	r2, #1
 8005472:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005474:	4b31      	ldr	r3, [pc, #196]	; (800553c <MX_ADC4_Init+0x110>)
 8005476:	2200      	movs	r2, #0
 8005478:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 800547a:	4b30      	ldr	r3, [pc, #192]	; (800553c <MX_ADC4_Init+0x110>)
 800547c:	2201      	movs	r2, #1
 800547e:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8005480:	4b2e      	ldr	r3, [pc, #184]	; (800553c <MX_ADC4_Init+0x110>)
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005488:	4b2c      	ldr	r3, [pc, #176]	; (800553c <MX_ADC4_Init+0x110>)
 800548a:	2204      	movs	r2, #4
 800548c:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800548e:	4b2b      	ldr	r3, [pc, #172]	; (800553c <MX_ADC4_Init+0x110>)
 8005490:	2200      	movs	r2, #0
 8005492:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005494:	4b29      	ldr	r3, [pc, #164]	; (800553c <MX_ADC4_Init+0x110>)
 8005496:	2200      	movs	r2, #0
 8005498:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800549a:	4828      	ldr	r0, [pc, #160]	; (800553c <MX_ADC4_Init+0x110>)
 800549c:	f000 fe70 	bl	8006180 <HAL_ADC_Init>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80054a6:	f000 fa17 	bl	80058d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80054aa:	2301      	movs	r3, #1
 80054ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80054c2:	463b      	mov	r3, r7
 80054c4:	4619      	mov	r1, r3
 80054c6:	481d      	ldr	r0, [pc, #116]	; (800553c <MX_ADC4_Init+0x110>)
 80054c8:	f001 f83a 	bl	8006540 <HAL_ADC_ConfigChannel>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 80054d2:	f000 fa01 	bl	80058d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  ADC_Calibrate(ADC4);
 80054d6:	481a      	ldr	r0, [pc, #104]	; (8005540 <MX_ADC4_Init+0x114>)
 80054d8:	f7ff f8cc 	bl	8004674 <ADC_Calibrate>

  ADC4->CR |= ADC_CR_ADEN; // Enable ADC
 80054dc:	4b18      	ldr	r3, [pc, #96]	; (8005540 <MX_ADC4_Init+0x114>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a17      	ldr	r2, [pc, #92]	; (8005540 <MX_ADC4_Init+0x114>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	6093      	str	r3, [r2, #8]
//  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC4->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 80054e8:	4b15      	ldr	r3, [pc, #84]	; (8005540 <MX_ADC4_Init+0x114>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	4a14      	ldr	r2, [pc, #80]	; (8005540 <MX_ADC4_Init+0x114>)
 80054ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80054f2:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~0xC; // 12-bit Resolution
 80054f4:	4b12      	ldr	r3, [pc, #72]	; (8005540 <MX_ADC4_Init+0x114>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4a11      	ldr	r2, [pc, #68]	; (8005540 <MX_ADC4_Init+0x114>)
 80054fa:	f023 030c 	bic.w	r3, r3, #12
 80054fe:	60d3      	str	r3, [r2, #12]

  ADC4->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005500:	4b0f      	ldr	r3, [pc, #60]	; (8005540 <MX_ADC4_Init+0x114>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	4a0e      	ldr	r2, [pc, #56]	; (8005540 <MX_ADC4_Init+0x114>)
 8005506:	f023 030f 	bic.w	r3, r3, #15
 800550a:	6313      	str	r3, [r2, #48]	; 0x30
  ADC4->SQR1 |= 0x1 << 6; // Channel 1 of ADC4
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <MX_ADC4_Init+0x114>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	4a0b      	ldr	r2, [pc, #44]	; (8005540 <MX_ADC4_Init+0x114>)
 8005512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005516:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005518:	bf00      	nop
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <MX_ADC4_Init+0x114>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f9      	beq.n	800551a <MX_ADC4_Init+0xee>
  ADC4->CR |= ADC_CR_ADSTART; // Start the ADC
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <MX_ADC4_Init+0x114>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	4a05      	ldr	r2, [pc, #20]	; (8005540 <MX_ADC4_Init+0x114>)
 800552c:	f043 0304 	orr.w	r3, r3, #4
 8005530:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC4_Init 2 */

}
 8005532:	bf00      	nop
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000944 	.word	0x20000944
 8005540:	50000500 	.word	0x50000500

08005544 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005548:	4b1b      	ldr	r3, [pc, #108]	; (80055b8 <MX_I2C1_Init+0x74>)
 800554a:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <MX_I2C1_Init+0x78>)
 800554c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800554e:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <MX_I2C1_Init+0x74>)
 8005550:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <MX_I2C1_Init+0x7c>)
 8005552:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005554:	4b18      	ldr	r3, [pc, #96]	; (80055b8 <MX_I2C1_Init+0x74>)
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800555a:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <MX_I2C1_Init+0x74>)
 800555c:	2201      	movs	r2, #1
 800555e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005560:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <MX_I2C1_Init+0x74>)
 8005562:	2200      	movs	r2, #0
 8005564:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005566:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <MX_I2C1_Init+0x74>)
 8005568:	2200      	movs	r2, #0
 800556a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800556c:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <MX_I2C1_Init+0x74>)
 800556e:	2200      	movs	r2, #0
 8005570:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <MX_I2C1_Init+0x74>)
 8005574:	2200      	movs	r2, #0
 8005576:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005578:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <MX_I2C1_Init+0x74>)
 800557a:	2200      	movs	r2, #0
 800557c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800557e:	480e      	ldr	r0, [pc, #56]	; (80055b8 <MX_I2C1_Init+0x74>)
 8005580:	f002 f81c 	bl	80075bc <HAL_I2C_Init>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800558a:	f000 f9a5 	bl	80058d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800558e:	2100      	movs	r1, #0
 8005590:	4809      	ldr	r0, [pc, #36]	; (80055b8 <MX_I2C1_Init+0x74>)
 8005592:	f002 fbc1 	bl	8007d18 <HAL_I2CEx_ConfigAnalogFilter>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800559c:	f000 f99c 	bl	80058d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80055a0:	2100      	movs	r1, #0
 80055a2:	4805      	ldr	r0, [pc, #20]	; (80055b8 <MX_I2C1_Init+0x74>)
 80055a4:	f002 fc03 	bl	8007dae <HAL_I2CEx_ConfigDigitalFilter>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80055ae:	f000 f993 	bl	80058d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000994 	.word	0x20000994
 80055bc:	40005400 	.word	0x40005400
 80055c0:	2000090e 	.word	0x2000090e

080055c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80055c8:	4b1b      	ldr	r3, [pc, #108]	; (8005638 <MX_I2C2_Init+0x74>)
 80055ca:	4a1c      	ldr	r2, [pc, #112]	; (800563c <MX_I2C2_Init+0x78>)
 80055cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 80055ce:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <MX_I2C2_Init+0x74>)
 80055d0:	4a1b      	ldr	r2, [pc, #108]	; (8005640 <MX_I2C2_Init+0x7c>)
 80055d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80055d4:	4b18      	ldr	r3, [pc, #96]	; (8005638 <MX_I2C2_Init+0x74>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055da:	4b17      	ldr	r3, [pc, #92]	; (8005638 <MX_I2C2_Init+0x74>)
 80055dc:	2201      	movs	r2, #1
 80055de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80055e0:	4b15      	ldr	r3, [pc, #84]	; (8005638 <MX_I2C2_Init+0x74>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <MX_I2C2_Init+0x74>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80055ec:	4b12      	ldr	r3, [pc, #72]	; (8005638 <MX_I2C2_Init+0x74>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <MX_I2C2_Init+0x74>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80055f8:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <MX_I2C2_Init+0x74>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80055fe:	480e      	ldr	r0, [pc, #56]	; (8005638 <MX_I2C2_Init+0x74>)
 8005600:	f001 ffdc 	bl	80075bc <HAL_I2C_Init>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800560a:	f000 f965 	bl	80058d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800560e:	2100      	movs	r1, #0
 8005610:	4809      	ldr	r0, [pc, #36]	; (8005638 <MX_I2C2_Init+0x74>)
 8005612:	f002 fb81 	bl	8007d18 <HAL_I2CEx_ConfigAnalogFilter>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800561c:	f000 f95c 	bl	80058d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005620:	2100      	movs	r1, #0
 8005622:	4805      	ldr	r0, [pc, #20]	; (8005638 <MX_I2C2_Init+0x74>)
 8005624:	f002 fbc3 	bl	8007dae <HAL_I2CEx_ConfigDigitalFilter>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800562e:	f000 f953 	bl	80058d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200009e8 	.word	0x200009e8
 800563c:	40005800 	.word	0x40005800
 8005640:	2000090e 	.word	0x2000090e

08005644 <MX_SPI1_Init>:
* @brief SPI1 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI1_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_Init 0 */
	/* USER CODE END SPI1_Init 0 */
	/* USER CODE BEGIN SPI1_Init 1 */
	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8005648:	4b34      	ldr	r3, [pc, #208]	; (800571c <MX_SPI1_Init+0xd8>)
 800564a:	4a35      	ldr	r2, [pc, #212]	; (8005720 <MX_SPI1_Init+0xdc>)
 800564c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800564e:	4b33      	ldr	r3, [pc, #204]	; (800571c <MX_SPI1_Init+0xd8>)
 8005650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005654:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005656:	4b31      	ldr	r3, [pc, #196]	; (800571c <MX_SPI1_Init+0xd8>)
 8005658:	2200      	movs	r2, #0
 800565a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800565c:	4b2f      	ldr	r3, [pc, #188]	; (800571c <MX_SPI1_Init+0xd8>)
 800565e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005662:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005664:	4b2d      	ldr	r3, [pc, #180]	; (800571c <MX_SPI1_Init+0xd8>)
 8005666:	2200      	movs	r2, #0
 8005668:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800566a:	4b2c      	ldr	r3, [pc, #176]	; (800571c <MX_SPI1_Init+0xd8>)
 800566c:	2200      	movs	r2, #0
 800566e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005670:	4b2a      	ldr	r3, [pc, #168]	; (800571c <MX_SPI1_Init+0xd8>)
 8005672:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005676:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005678:	4b28      	ldr	r3, [pc, #160]	; (800571c <MX_SPI1_Init+0xd8>)
 800567a:	2208      	movs	r2, #8
 800567c:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800567e:	4b27      	ldr	r3, [pc, #156]	; (800571c <MX_SPI1_Init+0xd8>)
 8005680:	2200      	movs	r2, #0
 8005682:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005684:	4b25      	ldr	r3, [pc, #148]	; (800571c <MX_SPI1_Init+0xd8>)
 8005686:	2200      	movs	r2, #0
 8005688:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800568a:	4b24      	ldr	r3, [pc, #144]	; (800571c <MX_SPI1_Init+0xd8>)
 800568c:	2200      	movs	r2, #0
 800568e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8005690:	4b22      	ldr	r3, [pc, #136]	; (800571c <MX_SPI1_Init+0xd8>)
 8005692:	2207      	movs	r2, #7
 8005694:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005696:	4b21      	ldr	r3, [pc, #132]	; (800571c <MX_SPI1_Init+0xd8>)
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800569c:	4b1f      	ldr	r3, [pc, #124]	; (800571c <MX_SPI1_Init+0xd8>)
 800569e:	2208      	movs	r2, #8
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056a2:	481e      	ldr	r0, [pc, #120]	; (800571c <MX_SPI1_Init+0xd8>)
 80056a4:	f003 ffa4 	bl	80095f0 <HAL_SPI_Init>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <MX_SPI1_Init+0x6e>
	{
	Error_Handler();
 80056ae:	f000 f913 	bl	80058d8 <Error_Handler>
	}
	GPIOB->ODR |= 0x1;
 80056b2:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <MX_SPI1_Init+0xe0>)
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	4a1b      	ldr	r2, [pc, #108]	; (8005724 <MX_SPI1_Init+0xe0>)
 80056b8:	f043 0301 	orr.w	r3, r3, #1
 80056bc:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= 0x18;
 80056be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80056c8:	f043 0318 	orr.w	r3, r3, #24
 80056cc:	6153      	str	r3, [r2, #20]

	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80056ce:	4b16      	ldr	r3, [pc, #88]	; (8005728 <MX_SPI1_Init+0xe4>)
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	4a15      	ldr	r2, [pc, #84]	; (8005728 <MX_SPI1_Init+0xe4>)
 80056d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056d8:	6193      	str	r3, [r2, #24]
	SPI1->CR2 &= ~SPI_CR2_DS;
 80056da:	4b11      	ldr	r3, [pc, #68]	; (8005720 <MX_SPI1_Init+0xdc>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <MX_SPI1_Init+0xdc>)
 80056e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056e4:	6053      	str	r3, [r2, #4]
	SPI1->CR1 &= ~(SPI_CR1_BR);
 80056e6:	4b0e      	ldr	r3, [pc, #56]	; (8005720 <MX_SPI1_Init+0xdc>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <MX_SPI1_Init+0xdc>)
 80056ec:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80056f0:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <MX_SPI1_Init+0xdc>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <MX_SPI1_Init+0xdc>)
 80056f8:	f043 0304 	orr.w	r3, r3, #4
 80056fc:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <MX_SPI1_Init+0xdc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a07      	ldr	r2, [pc, #28]	; (8005720 <MX_SPI1_Init+0xdc>)
 8005704:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005708:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE;
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <MX_SPI1_Init+0xdc>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a04      	ldr	r2, [pc, #16]	; (8005720 <MX_SPI1_Init+0xdc>)
 8005710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005714:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN SPI1_Init 2 */
	/* USER CODE END SPI1_Init 2 */
}
 8005716:	bf00      	nop
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000a3c 	.word	0x20000a3c
 8005720:	40013000 	.word	0x40013000
 8005724:	48000400 	.word	0x48000400
 8005728:	40021000 	.word	0x40021000

0800572c <MX_TIM16_Init>:
* @brief TIM16 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM16_Init(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM16_Init 0 */
	/* USER CODE END TIM16_Init 0 */
	/* USER CODE BEGIN TIM16_Init 1 */
	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8005730:	4b10      	ldr	r3, [pc, #64]	; (8005774 <MX_TIM16_Init+0x48>)
 8005732:	4a11      	ldr	r2, [pc, #68]	; (8005778 <MX_TIM16_Init+0x4c>)
 8005734:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 8000 - 1;
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <MX_TIM16_Init+0x48>)
 8005738:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800573c:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800573e:	4b0d      	ldr	r3, [pc, #52]	; (8005774 <MX_TIM16_Init+0x48>)
 8005740:	2200      	movs	r2, #0
 8005742:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1000 - 1;
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <MX_TIM16_Init+0x48>)
 8005746:	f240 32e7 	movw	r2, #999	; 0x3e7
 800574a:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <MX_TIM16_Init+0x48>)
 800574e:	2200      	movs	r2, #0
 8005750:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <MX_TIM16_Init+0x48>)
 8005754:	2200      	movs	r2, #0
 8005756:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <MX_TIM16_Init+0x48>)
 800575a:	2200      	movs	r2, #0
 800575c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800575e:	4805      	ldr	r0, [pc, #20]	; (8005774 <MX_TIM16_Init+0x48>)
 8005760:	f003 fff1 	bl	8009746 <HAL_TIM_Base_Init>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_TIM16_Init+0x42>
	{
	Error_Handler();
 800576a:	f000 f8b5 	bl	80058d8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	/* USER CODE END TIM16_Init 2 */
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000ae4 	.word	0x20000ae4
 8005778:	40014400 	.word	0x40014400

0800577c <MX_DMA_Init>:

/**
* Enable DMA controller clock
*/
static void MX_DMA_Init(void)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8005782:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <MX_DMA_Init+0x38>)
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4a0b      	ldr	r2, [pc, #44]	; (80057b4 <MX_DMA_Init+0x38>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6153      	str	r3, [r2, #20]
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <MX_DMA_Init+0x38>)
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	200d      	movs	r0, #13
 80057a0:	f001 fbed 	bl	8006f7e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80057a4:	200d      	movs	r0, #13
 80057a6:	f001 fc06 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000

080057b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057be:	f107 0314 	add.w	r3, r7, #20
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	609a      	str	r2, [r3, #8]
 80057ca:	60da      	str	r2, [r3, #12]
 80057cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ce:	4b3f      	ldr	r3, [pc, #252]	; (80058cc <MX_GPIO_Init+0x114>)
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4a3e      	ldr	r2, [pc, #248]	; (80058cc <MX_GPIO_Init+0x114>)
 80057d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d8:	6153      	str	r3, [r2, #20]
 80057da:	4b3c      	ldr	r3, [pc, #240]	; (80058cc <MX_GPIO_Init+0x114>)
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057e6:	4b39      	ldr	r3, [pc, #228]	; (80058cc <MX_GPIO_Init+0x114>)
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4a38      	ldr	r2, [pc, #224]	; (80058cc <MX_GPIO_Init+0x114>)
 80057ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f0:	6153      	str	r3, [r2, #20]
 80057f2:	4b36      	ldr	r3, [pc, #216]	; (80058cc <MX_GPIO_Init+0x114>)
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057fe:	4b33      	ldr	r3, [pc, #204]	; (80058cc <MX_GPIO_Init+0x114>)
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	4a32      	ldr	r2, [pc, #200]	; (80058cc <MX_GPIO_Init+0x114>)
 8005804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005808:	6153      	str	r3, [r2, #20]
 800580a:	4b30      	ldr	r3, [pc, #192]	; (80058cc <MX_GPIO_Init+0x114>)
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005816:	4b2d      	ldr	r3, [pc, #180]	; (80058cc <MX_GPIO_Init+0x114>)
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <MX_GPIO_Init+0x114>)
 800581c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005820:	6153      	str	r3, [r2, #20]
 8005822:	4b2a      	ldr	r3, [pc, #168]	; (80058cc <MX_GPIO_Init+0x114>)
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800582e:	4b27      	ldr	r3, [pc, #156]	; (80058cc <MX_GPIO_Init+0x114>)
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	4a26      	ldr	r2, [pc, #152]	; (80058cc <MX_GPIO_Init+0x114>)
 8005834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005838:	6153      	str	r3, [r2, #20]
 800583a:	4b24      	ldr	r3, [pc, #144]	; (80058cc <MX_GPIO_Init+0x114>)
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8005846:	2200      	movs	r2, #0
 8005848:	2108      	movs	r1, #8
 800584a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800584e:	f001 fe85 	bl	800755c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8005852:	2200      	movs	r2, #0
 8005854:	2101      	movs	r1, #1
 8005856:	481e      	ldr	r0, [pc, #120]	; (80058d0 <MX_GPIO_Init+0x118>)
 8005858:	f001 fe80 	bl	800755c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800585c:	2308      	movs	r3, #8
 800585e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005860:	2301      	movs	r3, #1
 8005862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005868:	2300      	movs	r3, #0
 800586a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4619      	mov	r1, r3
 8005872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005876:	f001 fcdf 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800587a:	2301      	movs	r3, #1
 800587c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800587e:	2301      	movs	r3, #1
 8005880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005886:	2300      	movs	r3, #0
 8005888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800588a:	f107 0314 	add.w	r3, r7, #20
 800588e:	4619      	mov	r1, r3
 8005890:	480f      	ldr	r0, [pc, #60]	; (80058d0 <MX_GPIO_Init+0x118>)
 8005892:	f001 fcd1 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005896:	2303      	movs	r3, #3
 8005898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800589a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800589e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058a0:	2302      	movs	r3, #2
 80058a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058a4:	f107 0314 	add.w	r3, r7, #20
 80058a8:	4619      	mov	r1, r3
 80058aa:	480a      	ldr	r0, [pc, #40]	; (80058d4 <MX_GPIO_Init+0x11c>)
 80058ac:	f001 fcc4 	bl	8007238 <HAL_GPIO_Init>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80058b0:	2200      	movs	r2, #0
 80058b2:	2101      	movs	r1, #1
 80058b4:	2006      	movs	r0, #6
 80058b6:	f001 fb62 	bl	8006f7e <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80058ba:	2200      	movs	r2, #0
 80058bc:	2100      	movs	r1, #0
 80058be:	2007      	movs	r0, #7
 80058c0:	f001 fb5d 	bl	8006f7e <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80058c4:	bf00      	nop
 80058c6:	3728      	adds	r7, #40	; 0x28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40021000 	.word	0x40021000
 80058d0:	48000400 	.word	0x48000400
 80058d4:	48000800 	.word	0x48000800

080058d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80058dc:	b672      	cpsid	i
}
 80058de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80058e0:	e7fe      	b.n	80058e0 <Error_Handler+0x8>
	...

080058e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <HAL_MspInit+0x44>)
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	4a0e      	ldr	r2, [pc, #56]	; (8005928 <HAL_MspInit+0x44>)
 80058f0:	f043 0301 	orr.w	r3, r3, #1
 80058f4:	6193      	str	r3, [r2, #24]
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <HAL_MspInit+0x44>)
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <HAL_MspInit+0x44>)
 8005904:	69db      	ldr	r3, [r3, #28]
 8005906:	4a08      	ldr	r2, [pc, #32]	; (8005928 <HAL_MspInit+0x44>)
 8005908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590c:	61d3      	str	r3, [r2, #28]
 800590e:	4b06      	ldr	r3, [pc, #24]	; (8005928 <HAL_MspInit+0x44>)
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40021000 	.word	0x40021000

0800592c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b090      	sub	sp, #64	; 0x40
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	605a      	str	r2, [r3, #4]
 800593e:	609a      	str	r2, [r3, #8]
 8005940:	60da      	str	r2, [r3, #12]
 8005942:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800594c:	d12e      	bne.n	80059ac <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800594e:	4b66      	ldr	r3, [pc, #408]	; (8005ae8 <HAL_ADC_MspInit+0x1bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3301      	adds	r3, #1
 8005954:	4a64      	ldr	r2, [pc, #400]	; (8005ae8 <HAL_ADC_MspInit+0x1bc>)
 8005956:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005958:	4b63      	ldr	r3, [pc, #396]	; (8005ae8 <HAL_ADC_MspInit+0x1bc>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d10b      	bne.n	8005978 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005960:	4b62      	ldr	r3, [pc, #392]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	4a61      	ldr	r2, [pc, #388]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800596a:	6153      	str	r3, [r2, #20]
 800596c:	4b5f      	ldr	r3, [pc, #380]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005974:	62bb      	str	r3, [r7, #40]	; 0x28
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005978:	4b5c      	ldr	r3, [pc, #368]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	4a5b      	ldr	r2, [pc, #364]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 800597e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005982:	6153      	str	r3, [r2, #20]
 8005984:	4b59      	ldr	r3, [pc, #356]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005990:	2301      	movs	r3, #1
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005994:	2303      	movs	r3, #3
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005998:	2300      	movs	r3, #0
 800599a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800599c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80059a0:	4619      	mov	r1, r3
 80059a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059a6:	f001 fc47 	bl	8007238 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80059aa:	e099      	b.n	8005ae0 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a4f      	ldr	r2, [pc, #316]	; (8005af0 <HAL_ADC_MspInit+0x1c4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d12e      	bne.n	8005a14 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80059b6:	4b4c      	ldr	r3, [pc, #304]	; (8005ae8 <HAL_ADC_MspInit+0x1bc>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3301      	adds	r3, #1
 80059bc:	4a4a      	ldr	r2, [pc, #296]	; (8005ae8 <HAL_ADC_MspInit+0x1bc>)
 80059be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80059c0:	4b49      	ldr	r3, [pc, #292]	; (8005ae8 <HAL_ADC_MspInit+0x1bc>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d10b      	bne.n	80059e0 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80059c8:	4b48      	ldr	r3, [pc, #288]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	4a47      	ldr	r2, [pc, #284]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 80059ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d2:	6153      	str	r3, [r2, #20]
 80059d4:	4b45      	ldr	r3, [pc, #276]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059dc:	623b      	str	r3, [r7, #32]
 80059de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059e0:	4b42      	ldr	r3, [pc, #264]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	4a41      	ldr	r2, [pc, #260]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 80059e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ea:	6153      	str	r3, [r2, #20]
 80059ec:	4b3f      	ldr	r3, [pc, #252]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80059f8:	2340      	movs	r3, #64	; 0x40
 80059fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059fc:	2303      	movs	r3, #3
 80059fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a0e:	f001 fc13 	bl	8007238 <HAL_GPIO_Init>
}
 8005a12:	e065      	b.n	8005ae0 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC3)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a36      	ldr	r2, [pc, #216]	; (8005af4 <HAL_ADC_MspInit+0x1c8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d12d      	bne.n	8005a7a <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <HAL_ADC_MspInit+0x1cc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	4a34      	ldr	r2, [pc, #208]	; (8005af8 <HAL_ADC_MspInit+0x1cc>)
 8005a26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8005a28:	4b33      	ldr	r3, [pc, #204]	; (8005af8 <HAL_ADC_MspInit+0x1cc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10b      	bne.n	8005a48 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8005a30:	4b2e      	ldr	r3, [pc, #184]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005a36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a3a:	6153      	str	r3, [r2, #20]
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a48:	4b28      	ldr	r3, [pc, #160]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	4a27      	ldr	r2, [pc, #156]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005a4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a52:	6153      	str	r3, [r2, #20]
 8005a54:	4b25      	ldr	r3, [pc, #148]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005a60:	2302      	movs	r3, #2
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a64:	2303      	movs	r3, #3
 8005a66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a70:	4619      	mov	r1, r3
 8005a72:	4822      	ldr	r0, [pc, #136]	; (8005afc <HAL_ADC_MspInit+0x1d0>)
 8005a74:	f001 fbe0 	bl	8007238 <HAL_GPIO_Init>
}
 8005a78:	e032      	b.n	8005ae0 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC4)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <HAL_ADC_MspInit+0x1d4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d12d      	bne.n	8005ae0 <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8005a84:	4b1c      	ldr	r3, [pc, #112]	; (8005af8 <HAL_ADC_MspInit+0x1cc>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <HAL_ADC_MspInit+0x1cc>)
 8005a8c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8005a8e:	4b1a      	ldr	r3, [pc, #104]	; (8005af8 <HAL_ADC_MspInit+0x1cc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d10b      	bne.n	8005aae <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8005a96:	4b15      	ldr	r3, [pc, #84]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	4a14      	ldr	r2, [pc, #80]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005a9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa0:	6153      	str	r3, [r2, #20]
 8005aa2:	4b12      	ldr	r3, [pc, #72]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aaa:	613b      	str	r3, [r7, #16]
 8005aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005aae:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ab8:	6153      	str	r3, [r2, #20]
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <HAL_ADC_MspInit+0x1c0>)
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005ac6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005acc:	2303      	movs	r3, #3
 8005ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ad8:	4619      	mov	r1, r3
 8005ada:	480a      	ldr	r0, [pc, #40]	; (8005b04 <HAL_ADC_MspInit+0x1d8>)
 8005adc:	f001 fbac 	bl	8007238 <HAL_GPIO_Init>
}
 8005ae0:	bf00      	nop
 8005ae2:	3740      	adds	r7, #64	; 0x40
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000e24 	.word	0x20000e24
 8005aec:	40021000 	.word	0x40021000
 8005af0:	50000100 	.word	0x50000100
 8005af4:	50000400 	.word	0x50000400
 8005af8:	20000e28 	.word	0x20000e28
 8005afc:	48000400 	.word	0x48000400
 8005b00:	50000500 	.word	0x50000500
 8005b04:	48001000 	.word	0x48001000

08005b08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	609a      	str	r2, [r3, #8]
 8005b1c:	60da      	str	r2, [r3, #12]
 8005b1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a54      	ldr	r2, [pc, #336]	; (8005c78 <HAL_I2C_MspInit+0x170>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d14e      	bne.n	8005bc8 <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b2a:	4b54      	ldr	r3, [pc, #336]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	4a53      	ldr	r2, [pc, #332]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b34:	6153      	str	r3, [r2, #20]
 8005b36:	4b51      	ldr	r3, [pc, #324]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	4a4d      	ldr	r2, [pc, #308]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b4c:	6153      	str	r3, [r2, #20]
 8005b4e:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b56:	61fb      	str	r3, [r7, #28]
 8005b58:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b60:	2312      	movs	r3, #18
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b74:	4619      	mov	r1, r3
 8005b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b7a:	f001 fb5d 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b82:	2312      	movs	r3, #18
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005b8e:	2304      	movs	r3, #4
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b96:	4619      	mov	r1, r3
 8005b98:	4839      	ldr	r0, [pc, #228]	; (8005c80 <HAL_I2C_MspInit+0x178>)
 8005b9a:	f001 fb4d 	bl	8007238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005b9e:	4b37      	ldr	r3, [pc, #220]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4a36      	ldr	r2, [pc, #216]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005ba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ba8:	61d3      	str	r3, [r2, #28]
 8005baa:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bb2:	61bb      	str	r3, [r7, #24]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	2100      	movs	r1, #0
 8005bba:	201f      	movs	r0, #31
 8005bbc:	f001 f9df 	bl	8006f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005bc0:	201f      	movs	r0, #31
 8005bc2:	f001 f9f8 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005bc6:	e052      	b.n	8005c6e <HAL_I2C_MspInit+0x166>
  else if(hi2c->Instance==I2C2)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a2d      	ldr	r2, [pc, #180]	; (8005c84 <HAL_I2C_MspInit+0x17c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d14d      	bne.n	8005c6e <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bd2:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	4a29      	ldr	r2, [pc, #164]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bdc:	6153      	str	r3, [r2, #20]
 8005bde:	4b27      	ldr	r3, [pc, #156]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005bea:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	4a23      	ldr	r2, [pc, #140]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005bf0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bf4:	6153      	str	r3, [r2, #20]
 8005bf6:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c08:	2312      	movs	r3, #18
 8005c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c10:	2303      	movs	r3, #3
 8005c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005c14:	2304      	movs	r3, #4
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c22:	f001 fb09 	bl	8007238 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005c26:	2340      	movs	r3, #64	; 0x40
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c2a:	2312      	movs	r3, #18
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c32:	2303      	movs	r3, #3
 8005c34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005c36:	2304      	movs	r3, #4
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3e:	4619      	mov	r1, r3
 8005c40:	4811      	ldr	r0, [pc, #68]	; (8005c88 <HAL_I2C_MspInit+0x180>)
 8005c42:	f001 faf9 	bl	8007238 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c50:	61d3      	str	r3, [r2, #28]
 8005c52:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <HAL_I2C_MspInit+0x174>)
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2100      	movs	r1, #0
 8005c62:	2021      	movs	r0, #33	; 0x21
 8005c64:	f001 f98b 	bl	8006f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8005c68:	2021      	movs	r0, #33	; 0x21
 8005c6a:	f001 f9a4 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
}
 8005c6e:	bf00      	nop
 8005c70:	3738      	adds	r7, #56	; 0x38
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40005400 	.word	0x40005400
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	48000400 	.word	0x48000400
 8005c84:	40005800 	.word	0x40005800
 8005c88:	48001400 	.word	0x48001400

08005c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	; 0x28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c94:	f107 0314 	add.w	r3, r7, #20
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	609a      	str	r2, [r3, #8]
 8005ca0:	60da      	str	r2, [r3, #12]
 8005ca2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a2a      	ldr	r2, [pc, #168]	; (8005d54 <HAL_SPI_MspInit+0xc8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d14e      	bne.n	8005d4c <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005cae:	4b2a      	ldr	r3, [pc, #168]	; (8005d58 <HAL_SPI_MspInit+0xcc>)
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	4a29      	ldr	r2, [pc, #164]	; (8005d58 <HAL_SPI_MspInit+0xcc>)
 8005cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cb8:	6193      	str	r3, [r2, #24]
 8005cba:	4b27      	ldr	r3, [pc, #156]	; (8005d58 <HAL_SPI_MspInit+0xcc>)
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cc6:	4b24      	ldr	r3, [pc, #144]	; (8005d58 <HAL_SPI_MspInit+0xcc>)
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	4a23      	ldr	r2, [pc, #140]	; (8005d58 <HAL_SPI_MspInit+0xcc>)
 8005ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd0:	6153      	str	r3, [r2, #20]
 8005cd2:	4b21      	ldr	r3, [pc, #132]	; (8005d58 <HAL_SPI_MspInit+0xcc>)
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8005cde:	23b0      	movs	r3, #176	; 0xb0
 8005ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce2:	2302      	movs	r3, #2
 8005ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005cea:	2303      	movs	r3, #3
 8005cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005cee:	2305      	movs	r3, #5
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf2:	f107 0314 	add.w	r3, r7, #20
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cfc:	f001 fa9c 	bl	8007238 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8005d00:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d02:	4a17      	ldr	r2, [pc, #92]	; (8005d60 <HAL_SPI_MspInit+0xd4>)
 8005d04:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d08:	2210      	movs	r2, #16
 8005d0a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d0c:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d12:	4b12      	ldr	r3, [pc, #72]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d14:	2280      	movs	r2, #128	; 0x80
 8005d16:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d18:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8005d24:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8005d30:	480a      	ldr	r0, [pc, #40]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d32:	f001 f95a 	bl	8006fea <HAL_DMA_Init>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8005d3c:	f7ff fdcc 	bl	80058d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a06      	ldr	r2, [pc, #24]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d44:	655a      	str	r2, [r3, #84]	; 0x54
 8005d46:	4a05      	ldr	r2, [pc, #20]	; (8005d5c <HAL_SPI_MspInit+0xd0>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005d4c:	bf00      	nop
 8005d4e:	3728      	adds	r7, #40	; 0x28
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40013000 	.word	0x40013000
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	20000aa0 	.word	0x20000aa0
 8005d60:	40020030 	.word	0x40020030

08005d64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a0d      	ldr	r2, [pc, #52]	; (8005da8 <HAL_TIM_Base_MspInit+0x44>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d113      	bne.n	8005d9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <HAL_TIM_Base_MspInit+0x48>)
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	4a0c      	ldr	r2, [pc, #48]	; (8005dac <HAL_TIM_Base_MspInit+0x48>)
 8005d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d80:	6193      	str	r3, [r2, #24]
 8005d82:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <HAL_TIM_Base_MspInit+0x48>)
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2100      	movs	r1, #0
 8005d92:	2019      	movs	r0, #25
 8005d94:	f001 f8f3 	bl	8006f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005d98:	2019      	movs	r0, #25
 8005d9a:	f001 f90c 	bl	8006fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40014400 	.word	0x40014400
 8005dac:	40021000 	.word	0x40021000

08005db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005db4:	e7fe      	b.n	8005db4 <NMI_Handler+0x4>

08005db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005db6:	b480      	push	{r7}
 8005db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005dba:	e7fe      	b.n	8005dba <HardFault_Handler+0x4>

08005dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005dc0:	e7fe      	b.n	8005dc0 <MemManage_Handler+0x4>

08005dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005dc6:	e7fe      	b.n	8005dc6 <BusFault_Handler+0x4>

08005dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005dcc:	e7fe      	b.n	8005dcc <UsageFault_Handler+0x4>

08005dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005dd2:	bf00      	nop
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005de0:	bf00      	nop
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005dea:	b480      	push	{r7}
 8005dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005dee:	bf00      	nop
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005dfc:	f000 f9a0 	bl	8006140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e00:	bf00      	nop
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005e08:	2001      	movs	r0, #1
 8005e0a:	f001 fbbf 	bl	800758c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005e0e:	bf00      	nop
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005e16:	2002      	movs	r0, #2
 8005e18:	f001 fbb8 	bl	800758c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005e1c:	bf00      	nop
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005e24:	4802      	ldr	r0, [pc, #8]	; (8005e30 <DMA1_Channel3_IRQHandler+0x10>)
 8005e26:	f001 f927 	bl	8007078 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005e2a:	bf00      	nop
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000aa0 	.word	0x20000aa0

08005e34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005e38:	4802      	ldr	r0, [pc, #8]	; (8005e44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005e3a:	f003 fd74 	bl	8009926 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005e3e:	bf00      	nop
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000ae4 	.word	0x20000ae4

08005e48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005e4c:	4802      	ldr	r0, [pc, #8]	; (8005e58 <I2C1_EV_IRQHandler+0x10>)
 8005e4e:	f001 fd39 	bl	80078c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005e52:	bf00      	nop
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000994 	.word	0x20000994

08005e5c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005e60:	4802      	ldr	r0, [pc, #8]	; (8005e6c <I2C2_EV_IRQHandler+0x10>)
 8005e62:	f001 fd2f 	bl	80078c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005e66:	bf00      	nop
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	200009e8 	.word	0x200009e8

08005e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e78:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <_sbrk+0x5c>)
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <_sbrk+0x60>)
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e84:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <_sbrk+0x64>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d102      	bne.n	8005e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e8c:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <_sbrk+0x64>)
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <_sbrk+0x68>)
 8005e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <_sbrk+0x64>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d207      	bcs.n	8005eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ea0:	f003 ff36 	bl	8009d10 <__errno>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	220c      	movs	r2, #12
 8005ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eae:	e009      	b.n	8005ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005eb0:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <_sbrk+0x64>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005eb6:	4b07      	ldr	r3, [pc, #28]	; (8005ed4 <_sbrk+0x64>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	4a05      	ldr	r2, [pc, #20]	; (8005ed4 <_sbrk+0x64>)
 8005ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	2000a000 	.word	0x2000a000
 8005ed0:	00000400 	.word	0x00000400
 8005ed4:	20000e2c 	.word	0x20000e2c
 8005ed8:	20000e48 	.word	0x20000e48

08005edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <SystemInit+0x20>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	4a05      	ldr	r2, [pc, #20]	; (8005efc <SystemInit+0x20>)
 8005ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ef0:	bf00      	nop
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	e000ed00 	.word	0xe000ed00

08005f00 <max>:
#include "utils.h"

float max(float a, float b) {
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f0a:	edc7 0a00 	vstr	s1, [r7]
    if (a >= b) {
 8005f0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005f12:	edd7 7a00 	vldr	s15, [r7]
 8005f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1e:	db01      	blt.n	8005f24 <max+0x24>
        return a;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	e000      	b.n	8005f26 <max+0x26>
    }
    return b;
 8005f24:	683b      	ldr	r3, [r7, #0]
}
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <min>:

float min(float a, float b) {
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f42:	edc7 0a00 	vstr	s1, [r7]
    if (a <= b) {
 8005f46:	ed97 7a01 	vldr	s14, [r7, #4]
 8005f4a:	edd7 7a00 	vldr	s15, [r7]
 8005f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f56:	d801      	bhi.n	8005f5c <min+0x24>
        return a;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	e000      	b.n	8005f5e <min+0x26>
    }
    return b;
 8005f5c:	683b      	ldr	r3, [r7, #0]
}
 8005f5e:	ee07 3a90 	vmov	s15, r3
 8005f62:	eeb0 0a67 	vmov.f32	s0, s15
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <lerp>:
    }
    return val;
}

float lerp(float a, float b, float t)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	ed87 0a03 	vstr	s0, [r7, #12]
 8005f7a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005f7e:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + (b - a) * t;
 8005f82:	ed97 7a02 	vldr	s14, [r7, #8]
 8005f86:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f96:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <map>:

float map(float value, float in_min, float in_max, float out_min, float out_max) {
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	ed87 0a05 	vstr	s0, [r7, #20]
 8005fb6:	edc7 0a04 	vstr	s1, [r7, #16]
 8005fba:	ed87 1a03 	vstr	s2, [r7, #12]
 8005fbe:	edc7 1a02 	vstr	s3, [r7, #8]
 8005fc2:	ed87 2a01 	vstr	s4, [r7, #4]
    if (value >= in_max) {
 8005fc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd6:	db02      	blt.n	8005fde <map+0x32>
        return out_max;
 8005fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fdc:	e025      	b.n	800602a <map+0x7e>
    }
    if (value <= in_min) {
 8005fde:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fe2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fee:	d802      	bhi.n	8005ff6 <map+0x4a>
        return out_min;
 8005ff0:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ff4:	e019      	b.n	800602a <map+0x7e>
    }
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005ff6:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ffa:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ffe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006002:	edd7 6a01 	vldr	s13, [r7, #4]
 8006006:	edd7 7a02 	vldr	s15, [r7, #8]
 800600a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800600e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006012:	ed97 7a03 	vldr	s14, [r7, #12]
 8006016:	edd7 7a04 	vldr	s15, [r7, #16]
 800601a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800601e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006022:	edd7 7a02 	vldr	s15, [r7, #8]
 8006026:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800602a:	eeb0 0a67 	vmov.f32	s0, s15
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <convert_period_to_freq>:

float convert_period_to_freq(float period) {
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 / period;
 8006042:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006046:	edd7 7a01 	vldr	s15, [r7, #4]
 800604a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800604e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006052:	eeb0 0a67 	vmov.f32	s0, s15
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006098 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8006064:	f7ff ff3a 	bl	8005edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006068:	480c      	ldr	r0, [pc, #48]	; (800609c <LoopForever+0x6>)
  ldr r1, =_edata
 800606a:	490d      	ldr	r1, [pc, #52]	; (80060a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800606c:	4a0d      	ldr	r2, [pc, #52]	; (80060a4 <LoopForever+0xe>)
  movs r3, #0
 800606e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006070:	e002      	b.n	8006078 <LoopCopyDataInit>

08006072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006076:	3304      	adds	r3, #4

08006078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800607a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800607c:	d3f9      	bcc.n	8006072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800607e:	4a0a      	ldr	r2, [pc, #40]	; (80060a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006080:	4c0a      	ldr	r4, [pc, #40]	; (80060ac <LoopForever+0x16>)
  movs r3, #0
 8006082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006084:	e001      	b.n	800608a <LoopFillZerobss>

08006086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006088:	3204      	adds	r2, #4

0800608a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800608a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800608c:	d3fb      	bcc.n	8006086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800608e:	f003 fe45 	bl	8009d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006092:	f7fe fe15 	bl	8004cc0 <main>

08006096 <LoopForever>:

LoopForever:
    b LoopForever
 8006096:	e7fe      	b.n	8006096 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006098:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800609c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060a0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80060a4:	0800d258 	.word	0x0800d258
  ldr r2, =_sbss
 80060a8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80060ac:	20000e44 	.word	0x20000e44

080060b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80060b0:	e7fe      	b.n	80060b0 <ADC1_2_IRQHandler>
	...

080060b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <HAL_Init+0x28>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a07      	ldr	r2, [pc, #28]	; (80060dc <HAL_Init+0x28>)
 80060be:	f043 0310 	orr.w	r3, r3, #16
 80060c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060c4:	2003      	movs	r0, #3
 80060c6:	f000 ff4f 	bl	8006f68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060ca:	200f      	movs	r0, #15
 80060cc:	f000 f808 	bl	80060e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060d0:	f7ff fc08 	bl	80058e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	40022000 	.word	0x40022000

080060e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060e8:	4b12      	ldr	r3, [pc, #72]	; (8006134 <HAL_InitTick+0x54>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <HAL_InitTick+0x58>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	4619      	mov	r1, r3
 80060f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 ff67 	bl	8006fd2 <HAL_SYSTICK_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e00e      	b.n	800612c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b0f      	cmp	r3, #15
 8006112:	d80a      	bhi.n	800612a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006114:	2200      	movs	r2, #0
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800611c:	f000 ff2f 	bl	8006f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006120:	4a06      	ldr	r2, [pc, #24]	; (800613c <HAL_InitTick+0x5c>)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e000      	b.n	800612c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000034 	.word	0x20000034
 8006138:	2000003c 	.word	0x2000003c
 800613c:	20000038 	.word	0x20000038

08006140 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006144:	4b06      	ldr	r3, [pc, #24]	; (8006160 <HAL_IncTick+0x20>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_IncTick+0x24>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4413      	add	r3, r2
 8006150:	4a04      	ldr	r2, [pc, #16]	; (8006164 <HAL_IncTick+0x24>)
 8006152:	6013      	str	r3, [r2, #0]
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	2000003c 	.word	0x2000003c
 8006164:	20000e30 	.word	0x20000e30

08006168 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return uwTick;  
 800616c:	4b03      	ldr	r3, [pc, #12]	; (800617c <HAL_GetTick+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000e30 	.word	0x20000e30

08006180 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b09a      	sub	sp, #104	; 0x68
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e1c9      	b.n	8006534 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f003 0310 	and.w	r3, r3, #16
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d176      	bne.n	80062a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d152      	bne.n	8006260 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff fba9 	bl	800592c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d13b      	bne.n	8006260 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fd87 	bl	8006cfc <ADC_Disable>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d12f      	bne.n	8006260 <HAL_ADC_Init+0xe0>
 8006200:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006204:	2b00      	cmp	r3, #0
 8006206:	d12b      	bne.n	8006260 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006210:	f023 0302 	bic.w	r3, r3, #2
 8006214:	f043 0202 	orr.w	r2, r3, #2
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800622a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800623a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800623c:	4b86      	ldr	r3, [pc, #536]	; (8006458 <HAL_ADC_Init+0x2d8>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a86      	ldr	r2, [pc, #536]	; (800645c <HAL_ADC_Init+0x2dc>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	0c9a      	lsrs	r2, r3, #18
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	005b      	lsls	r3, r3, #1
 8006250:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006252:	e002      	b.n	800625a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3b01      	subs	r3, #1
 8006258:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f9      	bne.n	8006254 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800627c:	d110      	bne.n	80062a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	f023 0312 	bic.w	r3, r3, #18
 8006286:	f043 0210 	orr.w	r2, r3, #16
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	f043 0201 	orr.w	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8136 	bne.w	800651a <HAL_ADC_Init+0x39a>
 80062ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f040 8131 	bne.w	800651a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 8129 	bne.w	800651a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80062d0:	f043 0202 	orr.w	r2, r3, #2
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062e0:	d004      	beq.n	80062ec <HAL_ADC_Init+0x16c>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a5e      	ldr	r2, [pc, #376]	; (8006460 <HAL_ADC_Init+0x2e0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d101      	bne.n	80062f0 <HAL_ADC_Init+0x170>
 80062ec:	4b5d      	ldr	r3, [pc, #372]	; (8006464 <HAL_ADC_Init+0x2e4>)
 80062ee:	e000      	b.n	80062f2 <HAL_ADC_Init+0x172>
 80062f0:	4b5d      	ldr	r3, [pc, #372]	; (8006468 <HAL_ADC_Init+0x2e8>)
 80062f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062fc:	d102      	bne.n	8006304 <HAL_ADC_Init+0x184>
 80062fe:	4b58      	ldr	r3, [pc, #352]	; (8006460 <HAL_ADC_Init+0x2e0>)
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	e01a      	b.n	800633a <HAL_ADC_Init+0x1ba>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a55      	ldr	r2, [pc, #340]	; (8006460 <HAL_ADC_Init+0x2e0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d103      	bne.n	8006316 <HAL_ADC_Init+0x196>
 800630e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e011      	b.n	800633a <HAL_ADC_Init+0x1ba>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a54      	ldr	r2, [pc, #336]	; (800646c <HAL_ADC_Init+0x2ec>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d102      	bne.n	8006326 <HAL_ADC_Init+0x1a6>
 8006320:	4b53      	ldr	r3, [pc, #332]	; (8006470 <HAL_ADC_Init+0x2f0>)
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	e009      	b.n	800633a <HAL_ADC_Init+0x1ba>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a51      	ldr	r2, [pc, #324]	; (8006470 <HAL_ADC_Init+0x2f0>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d102      	bne.n	8006336 <HAL_ADC_Init+0x1b6>
 8006330:	4b4e      	ldr	r3, [pc, #312]	; (800646c <HAL_ADC_Init+0x2ec>)
 8006332:	60fb      	str	r3, [r7, #12]
 8006334:	e001      	b.n	800633a <HAL_ADC_Init+0x1ba>
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f003 0303 	and.w	r3, r3, #3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d108      	bne.n	800635a <HAL_ADC_Init+0x1da>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_ADC_Init+0x1da>
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <HAL_ADC_Init+0x1dc>
 800635a:	2300      	movs	r3, #0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d11c      	bne.n	800639a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006360:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006362:	2b00      	cmp	r3, #0
 8006364:	d010      	beq.n	8006388 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f003 0303 	and.w	r3, r3, #3
 800636e:	2b01      	cmp	r3, #1
 8006370:	d107      	bne.n	8006382 <HAL_ADC_Init+0x202>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_ADC_Init+0x202>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_ADC_Init+0x204>
 8006382:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006384:	2b00      	cmp	r3, #0
 8006386:	d108      	bne.n	800639a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8006388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	431a      	orrs	r2, r3
 8006396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006398:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	7e5b      	ldrb	r3, [r3, #25]
 800639e:	035b      	lsls	r3, r3, #13
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063a4:	2a01      	cmp	r2, #1
 80063a6:	d002      	beq.n	80063ae <HAL_ADC_Init+0x22e>
 80063a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80063ac:	e000      	b.n	80063b0 <HAL_ADC_Init+0x230>
 80063ae:	2200      	movs	r2, #0
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4313      	orrs	r3, r2
 80063be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063c0:	4313      	orrs	r3, r2
 80063c2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d11b      	bne.n	8006406 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	7e5b      	ldrb	r3, [r3, #25]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	3b01      	subs	r3, #1
 80063dc:	045a      	lsls	r2, r3, #17
 80063de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e0:	4313      	orrs	r3, r2
 80063e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e6:	663b      	str	r3, [r7, #96]	; 0x60
 80063e8:	e00d      	b.n	8006406 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80063f2:	f043 0220 	orr.w	r2, r3, #32
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fe:	f043 0201 	orr.w	r2, r3, #1
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640a:	2b01      	cmp	r3, #1
 800640c:	d03a      	beq.n	8006484 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a16      	ldr	r2, [pc, #88]	; (800646c <HAL_ADC_Init+0x2ec>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_ADC_Init+0x2a2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a14      	ldr	r2, [pc, #80]	; (8006470 <HAL_ADC_Init+0x2f0>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d128      	bne.n	8006474 <HAL_ADC_Init+0x2f4>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006426:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800642a:	d012      	beq.n	8006452 <HAL_ADC_Init+0x2d2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006434:	d00a      	beq.n	800644c <HAL_ADC_Init+0x2cc>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800643e:	d002      	beq.n	8006446 <HAL_ADC_Init+0x2c6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	e018      	b.n	8006478 <HAL_ADC_Init+0x2f8>
 8006446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800644a:	e015      	b.n	8006478 <HAL_ADC_Init+0x2f8>
 800644c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8006450:	e012      	b.n	8006478 <HAL_ADC_Init+0x2f8>
 8006452:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8006456:	e00f      	b.n	8006478 <HAL_ADC_Init+0x2f8>
 8006458:	20000034 	.word	0x20000034
 800645c:	431bde83 	.word	0x431bde83
 8006460:	50000100 	.word	0x50000100
 8006464:	50000300 	.word	0x50000300
 8006468:	50000700 	.word	0x50000700
 800646c:	50000400 	.word	0x50000400
 8006470:	50000500 	.word	0x50000500
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800647c:	4313      	orrs	r3, r2
 800647e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006480:	4313      	orrs	r3, r2
 8006482:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	2b00      	cmp	r3, #0
 8006490:	d114      	bne.n	80064bc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6812      	ldr	r2, [r2, #0]
 800649c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a0:	f023 0302 	bic.w	r3, r3, #2
 80064a4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	7e1b      	ldrb	r3, [r3, #24]
 80064aa:	039a      	lsls	r2, r3, #14
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4313      	orrs	r3, r2
 80064b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064b8:	4313      	orrs	r3, r2
 80064ba:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	4b1e      	ldr	r3, [pc, #120]	; (800653c <HAL_ADC_Init+0x3bc>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80064cc:	430b      	orrs	r3, r1
 80064ce:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d10c      	bne.n	80064f2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f023 010f 	bic.w	r1, r3, #15
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	1e5a      	subs	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	430a      	orrs	r2, r1
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
 80064f0:	e007      	b.n	8006502 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 020f 	bic.w	r2, r2, #15
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	f023 0303 	bic.w	r3, r3, #3
 8006510:	f043 0201 	orr.w	r2, r3, #1
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	641a      	str	r2, [r3, #64]	; 0x40
 8006518:	e00a      	b.n	8006530 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f023 0312 	bic.w	r3, r3, #18
 8006522:	f043 0210 	orr.w	r2, r3, #16
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800652a:	2301      	movs	r3, #1
 800652c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8006530:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006534:	4618      	mov	r0, r3
 8006536:	3768      	adds	r7, #104	; 0x68
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	fff0c007 	.word	0xfff0c007

08006540 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006540:	b480      	push	{r7}
 8006542:	b09b      	sub	sp, #108	; 0x6c
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_ADC_ConfigChannel+0x22>
 800655e:	2302      	movs	r3, #2
 8006560:	e2ca      	b.n	8006af8 <HAL_ADC_ConfigChannel+0x5b8>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 82ae 	bne.w	8006ad6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b04      	cmp	r3, #4
 8006580:	d81c      	bhi.n	80065bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	4613      	mov	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4413      	add	r3, r2
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	461a      	mov	r2, r3
 8006596:	231f      	movs	r3, #31
 8006598:	4093      	lsls	r3, r2
 800659a:	43db      	mvns	r3, r3
 800659c:	4019      	ands	r1, r3
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	005b      	lsls	r3, r3, #1
 80065aa:	4413      	add	r3, r2
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	fa00 f203 	lsl.w	r2, r0, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
 80065ba:	e063      	b.n	8006684 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b09      	cmp	r3, #9
 80065c2:	d81e      	bhi.n	8006602 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	4413      	add	r3, r2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	3b1e      	subs	r3, #30
 80065d8:	221f      	movs	r2, #31
 80065da:	fa02 f303 	lsl.w	r3, r2, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	4019      	ands	r1, r3
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4413      	add	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	3b1e      	subs	r3, #30
 80065f4:	fa00 f203 	lsl.w	r2, r0, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	635a      	str	r2, [r3, #52]	; 0x34
 8006600:	e040      	b.n	8006684 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b0e      	cmp	r3, #14
 8006608:	d81e      	bhi.n	8006648 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	4613      	mov	r3, r2
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	4413      	add	r3, r2
 800661a:	005b      	lsls	r3, r3, #1
 800661c:	3b3c      	subs	r3, #60	; 0x3c
 800661e:	221f      	movs	r2, #31
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	43db      	mvns	r3, r3
 8006626:	4019      	ands	r1, r3
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6818      	ldr	r0, [r3, #0]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	4613      	mov	r3, r2
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	4413      	add	r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	3b3c      	subs	r3, #60	; 0x3c
 800663a:	fa00 f203 	lsl.w	r2, r0, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
 8006646:	e01d      	b.n	8006684 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	4413      	add	r3, r2
 8006658:	005b      	lsls	r3, r3, #1
 800665a:	3b5a      	subs	r3, #90	; 0x5a
 800665c:	221f      	movs	r2, #31
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	43db      	mvns	r3, r3
 8006664:	4019      	ands	r1, r3
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	4413      	add	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	3b5a      	subs	r3, #90	; 0x5a
 8006678:	fa00 f203 	lsl.w	r2, r0, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b00      	cmp	r3, #0
 8006690:	f040 80e5 	bne.w	800685e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b09      	cmp	r3, #9
 800669a:	d91c      	bls.n	80066d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	4613      	mov	r3, r2
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4413      	add	r3, r2
 80066ac:	3b1e      	subs	r3, #30
 80066ae:	2207      	movs	r2, #7
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	4019      	ands	r1, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	6898      	ldr	r0, [r3, #8]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	3b1e      	subs	r3, #30
 80066c8:	fa00 f203 	lsl.w	r2, r0, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	619a      	str	r2, [r3, #24]
 80066d4:	e019      	b.n	800670a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6959      	ldr	r1, [r3, #20]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	4413      	add	r3, r2
 80066e6:	2207      	movs	r2, #7
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	4019      	ands	r1, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6898      	ldr	r0, [r3, #8]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4613      	mov	r3, r2
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	4413      	add	r3, r2
 80066fe:	fa00 f203 	lsl.w	r2, r0, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	08db      	lsrs	r3, r3, #3
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	3b01      	subs	r3, #1
 8006728:	2b03      	cmp	r3, #3
 800672a:	d84f      	bhi.n	80067cc <HAL_ADC_ConfigChannel+0x28c>
 800672c:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_ADC_ConfigChannel+0x1f4>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006745 	.word	0x08006745
 8006738:	08006767 	.word	0x08006767
 800673c:	08006789 	.word	0x08006789
 8006740:	080067ab 	.word	0x080067ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800674a:	4b9a      	ldr	r3, [pc, #616]	; (80069b4 <HAL_ADC_ConfigChannel+0x474>)
 800674c:	4013      	ands	r3, r2
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	0691      	lsls	r1, r2, #26
 8006754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006756:	430a      	orrs	r2, r1
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006762:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006764:	e07e      	b.n	8006864 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800676c:	4b91      	ldr	r3, [pc, #580]	; (80069b4 <HAL_ADC_ConfigChannel+0x474>)
 800676e:	4013      	ands	r3, r2
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	0691      	lsls	r1, r2, #26
 8006776:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006778:	430a      	orrs	r2, r1
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006784:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006786:	e06d      	b.n	8006864 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800678e:	4b89      	ldr	r3, [pc, #548]	; (80069b4 <HAL_ADC_ConfigChannel+0x474>)
 8006790:	4013      	ands	r3, r2
 8006792:	683a      	ldr	r2, [r7, #0]
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	0691      	lsls	r1, r2, #26
 8006798:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800679a:	430a      	orrs	r2, r1
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80067a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80067a8:	e05c      	b.n	8006864 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80067b0:	4b80      	ldr	r3, [pc, #512]	; (80069b4 <HAL_ADC_ConfigChannel+0x474>)
 80067b2:	4013      	ands	r3, r2
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	6812      	ldr	r2, [r2, #0]
 80067b8:	0691      	lsls	r1, r2, #26
 80067ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067bc:	430a      	orrs	r2, r1
 80067be:	431a      	orrs	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80067c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80067ca:	e04b      	b.n	8006864 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	069b      	lsls	r3, r3, #26
 80067dc:	429a      	cmp	r2, r3
 80067de:	d107      	bne.n	80067f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80067ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	069b      	lsls	r3, r3, #26
 8006800:	429a      	cmp	r2, r3
 8006802:	d107      	bne.n	8006814 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006812:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800681a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	069b      	lsls	r3, r3, #26
 8006824:	429a      	cmp	r2, r3
 8006826:	d107      	bne.n	8006838 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006836:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	069b      	lsls	r3, r3, #26
 8006848:	429a      	cmp	r2, r3
 800684a:	d10a      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800685a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800685c:	e001      	b.n	8006862 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800685e:	bf00      	nop
 8006860:	e000      	b.n	8006864 <HAL_ADC_ConfigChannel+0x324>
      break;
 8006862:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	2b01      	cmp	r3, #1
 8006870:	d108      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x344>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b01      	cmp	r3, #1
 800687e:	d101      	bne.n	8006884 <HAL_ADC_ConfigChannel+0x344>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <HAL_ADC_ConfigChannel+0x346>
 8006884:	2300      	movs	r3, #0
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 8130 	bne.w	8006aec <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d00f      	beq.n	80068b4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2201      	movs	r2, #1
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	43da      	mvns	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	400a      	ands	r2, r1
 80068ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80068b2:	e049      	b.n	8006948 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2201      	movs	r2, #1
 80068c2:	409a      	lsls	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b09      	cmp	r3, #9
 80068d4:	d91c      	bls.n	8006910 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6999      	ldr	r1, [r3, #24]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	3b1b      	subs	r3, #27
 80068e8:	2207      	movs	r2, #7
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	43db      	mvns	r3, r3
 80068f0:	4019      	ands	r1, r3
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6898      	ldr	r0, [r3, #8]
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4613      	mov	r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4413      	add	r3, r2
 8006900:	3b1b      	subs	r3, #27
 8006902:	fa00 f203 	lsl.w	r2, r0, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	619a      	str	r2, [r3, #24]
 800690e:	e01b      	b.n	8006948 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6959      	ldr	r1, [r3, #20]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	4613      	mov	r3, r2
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	4413      	add	r3, r2
 8006922:	2207      	movs	r2, #7
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	43db      	mvns	r3, r3
 800692a:	4019      	ands	r1, r3
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6898      	ldr	r0, [r3, #8]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	4613      	mov	r3, r2
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	4413      	add	r3, r2
 800693c:	fa00 f203 	lsl.w	r2, r0, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006950:	d004      	beq.n	800695c <HAL_ADC_ConfigChannel+0x41c>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <HAL_ADC_ConfigChannel+0x478>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d101      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x420>
 800695c:	4b17      	ldr	r3, [pc, #92]	; (80069bc <HAL_ADC_ConfigChannel+0x47c>)
 800695e:	e000      	b.n	8006962 <HAL_ADC_ConfigChannel+0x422>
 8006960:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <HAL_ADC_ConfigChannel+0x480>)
 8006962:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b10      	cmp	r3, #16
 800696a:	d105      	bne.n	8006978 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800696c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006974:	2b00      	cmp	r3, #0
 8006976:	d015      	beq.n	80069a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800697c:	2b11      	cmp	r3, #17
 800697e:	d105      	bne.n	800698c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8006990:	2b12      	cmp	r3, #18
 8006992:	f040 80ab 	bne.w	8006aec <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8006996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f040 80a4 	bne.w	8006aec <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069ac:	d10a      	bne.n	80069c4 <HAL_ADC_ConfigChannel+0x484>
 80069ae:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <HAL_ADC_ConfigChannel+0x478>)
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	e022      	b.n	80069fa <HAL_ADC_ConfigChannel+0x4ba>
 80069b4:	83fff000 	.word	0x83fff000
 80069b8:	50000100 	.word	0x50000100
 80069bc:	50000300 	.word	0x50000300
 80069c0:	50000700 	.word	0x50000700
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a4e      	ldr	r2, [pc, #312]	; (8006b04 <HAL_ADC_ConfigChannel+0x5c4>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d103      	bne.n	80069d6 <HAL_ADC_ConfigChannel+0x496>
 80069ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e011      	b.n	80069fa <HAL_ADC_ConfigChannel+0x4ba>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a4b      	ldr	r2, [pc, #300]	; (8006b08 <HAL_ADC_ConfigChannel+0x5c8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d102      	bne.n	80069e6 <HAL_ADC_ConfigChannel+0x4a6>
 80069e0:	4b4a      	ldr	r3, [pc, #296]	; (8006b0c <HAL_ADC_ConfigChannel+0x5cc>)
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e009      	b.n	80069fa <HAL_ADC_ConfigChannel+0x4ba>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a48      	ldr	r2, [pc, #288]	; (8006b0c <HAL_ADC_ConfigChannel+0x5cc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d102      	bne.n	80069f6 <HAL_ADC_ConfigChannel+0x4b6>
 80069f0:	4b45      	ldr	r3, [pc, #276]	; (8006b08 <HAL_ADC_ConfigChannel+0x5c8>)
 80069f2:	60fb      	str	r3, [r7, #12]
 80069f4:	e001      	b.n	80069fa <HAL_ADC_ConfigChannel+0x4ba>
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d108      	bne.n	8006a1a <HAL_ADC_ConfigChannel+0x4da>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d101      	bne.n	8006a1a <HAL_ADC_ConfigChannel+0x4da>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <HAL_ADC_ConfigChannel+0x4dc>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d150      	bne.n	8006ac2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006a20:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d010      	beq.n	8006a48 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d107      	bne.n	8006a42 <HAL_ADC_ConfigChannel+0x502>
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_ADC_ConfigChannel+0x502>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <HAL_ADC_ConfigChannel+0x504>
 8006a42:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d13c      	bne.n	8006ac2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b10      	cmp	r3, #16
 8006a4e:	d11d      	bne.n	8006a8c <HAL_ADC_ConfigChannel+0x54c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a58:	d118      	bne.n	8006a8c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a64:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a66:	4b2a      	ldr	r3, [pc, #168]	; (8006b10 <HAL_ADC_ConfigChannel+0x5d0>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a2a      	ldr	r2, [pc, #168]	; (8006b14 <HAL_ADC_ConfigChannel+0x5d4>)
 8006a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a70:	0c9a      	lsrs	r2, r3, #18
 8006a72:	4613      	mov	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	4413      	add	r3, r2
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006a7c:	e002      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f9      	bne.n	8006a7e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006a8a:	e02e      	b.n	8006aea <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b11      	cmp	r3, #17
 8006a92:	d10b      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x56c>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a9c:	d106      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8006a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aa8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006aaa:	e01e      	b.n	8006aea <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b12      	cmp	r3, #18
 8006ab2:	d11a      	bne.n	8006aea <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8006ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006abe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006ac0:	e013      	b.n	8006aea <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f043 0220 	orr.w	r2, r3, #32
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006ad4:	e00a      	b.n	8006aec <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006ae8:	e000      	b.n	8006aec <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006aea:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006af4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	376c      	adds	r7, #108	; 0x6c
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	50000100 	.word	0x50000100
 8006b08:	50000400 	.word	0x50000400
 8006b0c:	50000500 	.word	0x50000500
 8006b10:	20000034 	.word	0x20000034
 8006b14:	431bde83 	.word	0x431bde83

08006b18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b099      	sub	sp, #100	; 0x64
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b30:	d102      	bne.n	8006b38 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006b32:	4b6d      	ldr	r3, [pc, #436]	; (8006ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	e01a      	b.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a6a      	ldr	r2, [pc, #424]	; (8006ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d103      	bne.n	8006b4a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006b42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	e011      	b.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a67      	ldr	r2, [pc, #412]	; (8006cec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d102      	bne.n	8006b5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006b54:	4b66      	ldr	r3, [pc, #408]	; (8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006b56:	60bb      	str	r3, [r7, #8]
 8006b58:	e009      	b.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a64      	ldr	r2, [pc, #400]	; (8006cf0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d102      	bne.n	8006b6a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006b64:	4b61      	ldr	r3, [pc, #388]	; (8006cec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006b66:	60bb      	str	r3, [r7, #8]
 8006b68:	e001      	b.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0b0      	b.n	8006cda <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e0a9      	b.n	8006cda <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0304 	and.w	r3, r3, #4
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 808d 	bne.w	8006cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 0304 	and.w	r3, r3, #4
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f040 8086 	bne.w	8006cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bb4:	d004      	beq.n	8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a4b      	ldr	r2, [pc, #300]	; (8006ce8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d101      	bne.n	8006bc4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006bc0:	4b4c      	ldr	r3, [pc, #304]	; (8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8006bc2:	e000      	b.n	8006bc6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006bc4:	4b4c      	ldr	r3, [pc, #304]	; (8006cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8006bc6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d040      	beq.n	8006c52 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006be2:	035b      	lsls	r3, r3, #13
 8006be4:	430b      	orrs	r3, r1
 8006be6:	431a      	orrs	r2, r3
 8006be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d108      	bne.n	8006c0c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d15c      	bne.n	8006ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 0303 	and.w	r3, r3, #3
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d107      	bne.n	8006c2e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006c2e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d14b      	bne.n	8006ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c3c:	f023 030f 	bic.w	r3, r3, #15
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	6811      	ldr	r1, [r2, #0]
 8006c44:	683a      	ldr	r2, [r7, #0]
 8006c46:	6892      	ldr	r2, [r2, #8]
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c4e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c50:	e03c      	b.n	8006ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006c52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c5c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f003 0303 	and.w	r3, r3, #3
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d108      	bne.n	8006c7e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d101      	bne.n	8006c7e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d123      	bne.n	8006ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d107      	bne.n	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006ca0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d112      	bne.n	8006ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8006ca6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006cae:	f023 030f 	bic.w	r3, r3, #15
 8006cb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cb4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cb6:	e009      	b.n	8006ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cca:	e000      	b.n	8006cce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ccc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8006cd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3764      	adds	r7, #100	; 0x64
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	50000100 	.word	0x50000100
 8006cec:	50000400 	.word	0x50000400
 8006cf0:	50000500 	.word	0x50000500
 8006cf4:	50000300 	.word	0x50000300
 8006cf8:	50000700 	.word	0x50000700

08006cfc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d108      	bne.n	8006d28 <ADC_Disable+0x2c>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <ADC_Disable+0x2c>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <ADC_Disable+0x2e>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d047      	beq.n	8006dbe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 030d 	and.w	r3, r3, #13
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d10f      	bne.n	8006d5c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0202 	orr.w	r2, r2, #2
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2203      	movs	r2, #3
 8006d52:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006d54:	f7ff fa08 	bl	8006168 <HAL_GetTick>
 8006d58:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006d5a:	e029      	b.n	8006db0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d60:	f043 0210 	orr.w	r2, r3, #16
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6c:	f043 0201 	orr.w	r2, r3, #1
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e023      	b.n	8006dc0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d78:	f7ff f9f6 	bl	8006168 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d914      	bls.n	8006db0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d10d      	bne.n	8006db0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	f043 0210 	orr.w	r2, r3, #16
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da4:	f043 0201 	orr.w	r2, r3, #1
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e007      	b.n	8006dc0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d0dc      	beq.n	8006d78 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <__NVIC_SetPriorityGrouping+0x44>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006de4:	4013      	ands	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dfa:	4a04      	ldr	r2, [pc, #16]	; (8006e0c <__NVIC_SetPriorityGrouping+0x44>)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	60d3      	str	r3, [r2, #12]
}
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	e000ed00 	.word	0xe000ed00

08006e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e14:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <__NVIC_GetPriorityGrouping+0x18>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	0a1b      	lsrs	r3, r3, #8
 8006e1a:	f003 0307 	and.w	r3, r3, #7
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	e000ed00 	.word	0xe000ed00

08006e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	db0b      	blt.n	8006e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e3e:	79fb      	ldrb	r3, [r7, #7]
 8006e40:	f003 021f 	and.w	r2, r3, #31
 8006e44:	4907      	ldr	r1, [pc, #28]	; (8006e64 <__NVIC_EnableIRQ+0x38>)
 8006e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	2001      	movs	r0, #1
 8006e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	e000e100 	.word	0xe000e100

08006e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	6039      	str	r1, [r7, #0]
 8006e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	db0a      	blt.n	8006e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	490c      	ldr	r1, [pc, #48]	; (8006eb4 <__NVIC_SetPriority+0x4c>)
 8006e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e86:	0112      	lsls	r2, r2, #4
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e90:	e00a      	b.n	8006ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	4908      	ldr	r1, [pc, #32]	; (8006eb8 <__NVIC_SetPriority+0x50>)
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	3b04      	subs	r3, #4
 8006ea0:	0112      	lsls	r2, r2, #4
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	440b      	add	r3, r1
 8006ea6:	761a      	strb	r2, [r3, #24]
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	e000e100 	.word	0xe000e100
 8006eb8:	e000ed00 	.word	0xe000ed00

08006ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b089      	sub	sp, #36	; 0x24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f1c3 0307 	rsb	r3, r3, #7
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	bf28      	it	cs
 8006eda:	2304      	movcs	r3, #4
 8006edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	2b06      	cmp	r3, #6
 8006ee4:	d902      	bls.n	8006eec <NVIC_EncodePriority+0x30>
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3b03      	subs	r3, #3
 8006eea:	e000      	b.n	8006eee <NVIC_EncodePriority+0x32>
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8006efa:	43da      	mvns	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	401a      	ands	r2, r3
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f0e:	43d9      	mvns	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f14:	4313      	orrs	r3, r2
         );
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3724      	adds	r7, #36	; 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f34:	d301      	bcc.n	8006f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f36:	2301      	movs	r3, #1
 8006f38:	e00f      	b.n	8006f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f3a:	4a0a      	ldr	r2, [pc, #40]	; (8006f64 <SysTick_Config+0x40>)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f42:	210f      	movs	r1, #15
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f48:	f7ff ff8e 	bl	8006e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f4c:	4b05      	ldr	r3, [pc, #20]	; (8006f64 <SysTick_Config+0x40>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f52:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <SysTick_Config+0x40>)
 8006f54:	2207      	movs	r2, #7
 8006f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	e000e010 	.word	0xe000e010

08006f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff ff29 	bl	8006dc8 <__NVIC_SetPriorityGrouping>
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	4603      	mov	r3, r0
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f90:	f7ff ff3e 	bl	8006e10 <__NVIC_GetPriorityGrouping>
 8006f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	6978      	ldr	r0, [r7, #20]
 8006f9c:	f7ff ff8e 	bl	8006ebc <NVIC_EncodePriority>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fa6:	4611      	mov	r1, r2
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff ff5d 	bl	8006e68 <__NVIC_SetPriority>
}
 8006fae:	bf00      	nop
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff ff31 	bl	8006e2c <__NVIC_EnableIRQ>
}
 8006fca:	bf00      	nop
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b082      	sub	sp, #8
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff ffa2 	bl	8006f24 <SysTick_Config>
 8006fe0:	4603      	mov	r3, r0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b084      	sub	sp, #16
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e037      	b.n	8007070 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007016:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800701a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007024:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007030:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800703c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f8b4 	bl	80071c0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}  
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	2204      	movs	r2, #4
 8007096:	409a      	lsls	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4013      	ands	r3, r2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d024      	beq.n	80070ea <HAL_DMA_IRQHandler+0x72>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d01f      	beq.n	80070ea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0320 	and.w	r3, r3, #32
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d107      	bne.n	80070c8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0204 	bic.w	r2, r2, #4
 80070c6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070d0:	2104      	movs	r1, #4
 80070d2:	fa01 f202 	lsl.w	r2, r1, r2
 80070d6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d06a      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80070e8:	e065      	b.n	80071b6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	2202      	movs	r2, #2
 80070f0:	409a      	lsls	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d02c      	beq.n	8007154 <HAL_DMA_IRQHandler+0xdc>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d027      	beq.n	8007154 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10b      	bne.n	800712a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 020a 	bic.w	r2, r2, #10
 8007120:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	2102      	movs	r1, #2
 8007134:	fa01 f202 	lsl.w	r2, r1, r2
 8007138:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	2b00      	cmp	r3, #0
 8007148:	d035      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8007152:	e030      	b.n	80071b6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	2208      	movs	r2, #8
 800715a:	409a      	lsls	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d028      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x13e>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d023      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 020e 	bic.w	r2, r2, #14
 800717c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007186:	2101      	movs	r1, #1
 8007188:	fa01 f202 	lsl.w	r2, r1, r2
 800718c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
    }
  }
}  
 80071b4:	e7ff      	b.n	80071b6 <HAL_DMA_IRQHandler+0x13e>
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
	...

080071c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	4b14      	ldr	r3, [pc, #80]	; (8007220 <DMA_CalcBaseAndBitshift+0x60>)
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d80f      	bhi.n	80071f4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	4b12      	ldr	r3, [pc, #72]	; (8007224 <DMA_CalcBaseAndBitshift+0x64>)
 80071dc:	4413      	add	r3, r2
 80071de:	4a12      	ldr	r2, [pc, #72]	; (8007228 <DMA_CalcBaseAndBitshift+0x68>)
 80071e0:	fba2 2303 	umull	r2, r3, r2, r3
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	009a      	lsls	r2, r3, #2
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a0f      	ldr	r2, [pc, #60]	; (800722c <DMA_CalcBaseAndBitshift+0x6c>)
 80071f0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80071f2:	e00e      	b.n	8007212 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	4b0d      	ldr	r3, [pc, #52]	; (8007230 <DMA_CalcBaseAndBitshift+0x70>)
 80071fc:	4413      	add	r3, r2
 80071fe:	4a0a      	ldr	r2, [pc, #40]	; (8007228 <DMA_CalcBaseAndBitshift+0x68>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	091b      	lsrs	r3, r3, #4
 8007206:	009a      	lsls	r2, r3, #2
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <DMA_CalcBaseAndBitshift+0x74>)
 8007210:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	40020407 	.word	0x40020407
 8007224:	bffdfff8 	.word	0xbffdfff8
 8007228:	cccccccd 	.word	0xcccccccd
 800722c:	40020000 	.word	0x40020000
 8007230:	bffdfbf8 	.word	0xbffdfbf8
 8007234:	40020400 	.word	0x40020400

08007238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007246:	e154      	b.n	80074f2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	2101      	movs	r1, #1
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	fa01 f303 	lsl.w	r3, r1, r3
 8007254:	4013      	ands	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 8146 	beq.w	80074ec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f003 0303 	and.w	r3, r3, #3
 8007268:	2b01      	cmp	r3, #1
 800726a:	d005      	beq.n	8007278 <HAL_GPIO_Init+0x40>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d130      	bne.n	80072da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	2203      	movs	r2, #3
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	43db      	mvns	r3, r3
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	4013      	ands	r3, r2
 800728e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	4313      	orrs	r3, r2
 80072a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072ae:	2201      	movs	r2, #1
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	43db      	mvns	r3, r3
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4013      	ands	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	091b      	lsrs	r3, r3, #4
 80072c4:	f003 0201 	and.w	r2, r3, #1
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	fa02 f303 	lsl.w	r3, r2, r3
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d017      	beq.n	8007316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	2203      	movs	r2, #3
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	43db      	mvns	r3, r3
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4013      	ands	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f003 0303 	and.w	r3, r3, #3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d123      	bne.n	800736a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	08da      	lsrs	r2, r3, #3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3208      	adds	r2, #8
 800732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	220f      	movs	r2, #15
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	43db      	mvns	r3, r3
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4013      	ands	r3, r2
 8007344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	fa02 f303 	lsl.w	r3, r2, r3
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	08da      	lsrs	r2, r3, #3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3208      	adds	r2, #8
 8007364:	6939      	ldr	r1, [r7, #16]
 8007366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	2203      	movs	r2, #3
 8007376:	fa02 f303 	lsl.w	r3, r2, r3
 800737a:	43db      	mvns	r3, r3
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4013      	ands	r3, r2
 8007380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f003 0203 	and.w	r2, r3, #3
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 80a0 	beq.w	80074ec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073ac:	4b58      	ldr	r3, [pc, #352]	; (8007510 <HAL_GPIO_Init+0x2d8>)
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	4a57      	ldr	r2, [pc, #348]	; (8007510 <HAL_GPIO_Init+0x2d8>)
 80073b2:	f043 0301 	orr.w	r3, r3, #1
 80073b6:	6193      	str	r3, [r2, #24]
 80073b8:	4b55      	ldr	r3, [pc, #340]	; (8007510 <HAL_GPIO_Init+0x2d8>)
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80073c4:	4a53      	ldr	r2, [pc, #332]	; (8007514 <HAL_GPIO_Init+0x2dc>)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	089b      	lsrs	r3, r3, #2
 80073ca:	3302      	adds	r3, #2
 80073cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f003 0303 	and.w	r3, r3, #3
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	220f      	movs	r2, #15
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	43db      	mvns	r3, r3
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	4013      	ands	r3, r2
 80073e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073ee:	d019      	beq.n	8007424 <HAL_GPIO_Init+0x1ec>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a49      	ldr	r2, [pc, #292]	; (8007518 <HAL_GPIO_Init+0x2e0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <HAL_GPIO_Init+0x1e8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a48      	ldr	r2, [pc, #288]	; (800751c <HAL_GPIO_Init+0x2e4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00d      	beq.n	800741c <HAL_GPIO_Init+0x1e4>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a47      	ldr	r2, [pc, #284]	; (8007520 <HAL_GPIO_Init+0x2e8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d007      	beq.n	8007418 <HAL_GPIO_Init+0x1e0>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a46      	ldr	r2, [pc, #280]	; (8007524 <HAL_GPIO_Init+0x2ec>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d101      	bne.n	8007414 <HAL_GPIO_Init+0x1dc>
 8007410:	2304      	movs	r3, #4
 8007412:	e008      	b.n	8007426 <HAL_GPIO_Init+0x1ee>
 8007414:	2305      	movs	r3, #5
 8007416:	e006      	b.n	8007426 <HAL_GPIO_Init+0x1ee>
 8007418:	2303      	movs	r3, #3
 800741a:	e004      	b.n	8007426 <HAL_GPIO_Init+0x1ee>
 800741c:	2302      	movs	r3, #2
 800741e:	e002      	b.n	8007426 <HAL_GPIO_Init+0x1ee>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <HAL_GPIO_Init+0x1ee>
 8007424:	2300      	movs	r3, #0
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	f002 0203 	and.w	r2, r2, #3
 800742c:	0092      	lsls	r2, r2, #2
 800742e:	4093      	lsls	r3, r2
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007436:	4937      	ldr	r1, [pc, #220]	; (8007514 <HAL_GPIO_Init+0x2dc>)
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	089b      	lsrs	r3, r3, #2
 800743c:	3302      	adds	r3, #2
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007444:	4b38      	ldr	r3, [pc, #224]	; (8007528 <HAL_GPIO_Init+0x2f0>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	43db      	mvns	r3, r3
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4013      	ands	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007468:	4a2f      	ldr	r2, [pc, #188]	; (8007528 <HAL_GPIO_Init+0x2f0>)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800746e:	4b2e      	ldr	r3, [pc, #184]	; (8007528 <HAL_GPIO_Init+0x2f0>)
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	43db      	mvns	r3, r3
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4013      	ands	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007492:	4a25      	ldr	r2, [pc, #148]	; (8007528 <HAL_GPIO_Init+0x2f0>)
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007498:	4b23      	ldr	r3, [pc, #140]	; (8007528 <HAL_GPIO_Init+0x2f0>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	43db      	mvns	r3, r3
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4013      	ands	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80074bc:	4a1a      	ldr	r2, [pc, #104]	; (8007528 <HAL_GPIO_Init+0x2f0>)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074c2:	4b19      	ldr	r3, [pc, #100]	; (8007528 <HAL_GPIO_Init+0x2f0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	43db      	mvns	r3, r3
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4013      	ands	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80074e6:	4a10      	ldr	r2, [pc, #64]	; (8007528 <HAL_GPIO_Init+0x2f0>)
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	3301      	adds	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	fa22 f303 	lsr.w	r3, r2, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f47f aea3 	bne.w	8007248 <HAL_GPIO_Init+0x10>
  }
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	371c      	adds	r7, #28
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr
 8007510:	40021000 	.word	0x40021000
 8007514:	40010000 	.word	0x40010000
 8007518:	48000400 	.word	0x48000400
 800751c:	48000800 	.word	0x48000800
 8007520:	48000c00 	.word	0x48000c00
 8007524:	48001000 	.word	0x48001000
 8007528:	40010400 	.word	0x40010400

0800752c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	887b      	ldrh	r3, [r7, #2]
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007544:	2301      	movs	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
 8007548:	e001      	b.n	800754e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	807b      	strh	r3, [r7, #2]
 8007568:	4613      	mov	r3, r2
 800756a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800756c:	787b      	ldrb	r3, [r7, #1]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007572:	887a      	ldrh	r2, [r7, #2]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007578:	e002      	b.n	8007580 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800757a:	887a      	ldrh	r2, [r7, #2]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007596:	4b08      	ldr	r3, [pc, #32]	; (80075b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	4013      	ands	r3, r2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d006      	beq.n	80075b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075a2:	4a05      	ldr	r2, [pc, #20]	; (80075b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075a8:	88fb      	ldrh	r3, [r7, #6]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fd fa20 	bl	80049f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	40010400 	.word	0x40010400

080075bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e081      	b.n	80076d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d106      	bne.n	80075e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fe fa90 	bl	8005b08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2224      	movs	r2, #36	; 0x24
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0201 	bic.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800760c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800761c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d107      	bne.n	8007636 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007632:	609a      	str	r2, [r3, #8]
 8007634:	e006      	b.n	8007644 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007642:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d104      	bne.n	8007656 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007668:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007678:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691a      	ldr	r2, [r3, #16]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	69d9      	ldr	r1, [r3, #28]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1a      	ldr	r2, [r3, #32]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	461a      	mov	r2, r3
 80076e8:	460b      	mov	r3, r1
 80076ea:	817b      	strh	r3, [r7, #10]
 80076ec:	4613      	mov	r3, r2
 80076ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	f040 80da 	bne.w	80078b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_I2C_Master_Transmit+0x30>
 8007708:	2302      	movs	r3, #2
 800770a:	e0d3      	b.n	80078b4 <HAL_I2C_Master_Transmit+0x1d8>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007714:	f7fe fd28 	bl	8006168 <HAL_GetTick>
 8007718:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	2319      	movs	r3, #25
 8007720:	2201      	movs	r2, #1
 8007722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f90a 	bl	8007940 <I2C_WaitOnFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e0be      	b.n	80078b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2221      	movs	r2, #33	; 0x21
 800773a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2210      	movs	r2, #16
 8007742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	893a      	ldrh	r2, [r7, #8]
 8007756:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007762:	b29b      	uxth	r3, r3
 8007764:	2bff      	cmp	r3, #255	; 0xff
 8007766:	d90e      	bls.n	8007786 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	22ff      	movs	r2, #255	; 0xff
 800776c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	b2da      	uxtb	r2, r3
 8007774:	8979      	ldrh	r1, [r7, #10]
 8007776:	4b51      	ldr	r3, [pc, #324]	; (80078bc <HAL_I2C_Master_Transmit+0x1e0>)
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 fa98 	bl	8007cb4 <I2C_TransferConfig>
 8007784:	e06c      	b.n	8007860 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007794:	b2da      	uxtb	r2, r3
 8007796:	8979      	ldrh	r1, [r7, #10]
 8007798:	4b48      	ldr	r3, [pc, #288]	; (80078bc <HAL_I2C_Master_Transmit+0x1e0>)
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fa87 	bl	8007cb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80077a6:	e05b      	b.n	8007860 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	6a39      	ldr	r1, [r7, #32]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f916 	bl	80079de <I2C_WaitOnTXISFlagUntilTimeout>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e07b      	b.n	80078b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	781a      	ldrb	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	b29a      	uxth	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d034      	beq.n	8007860 <HAL_I2C_Master_Transmit+0x184>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d130      	bne.n	8007860 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	2200      	movs	r2, #0
 8007806:	2180      	movs	r1, #128	; 0x80
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 f899 	bl	8007940 <I2C_WaitOnFlagUntilTimeout>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e04d      	b.n	80078b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	2bff      	cmp	r3, #255	; 0xff
 8007820:	d90e      	bls.n	8007840 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	22ff      	movs	r2, #255	; 0xff
 8007826:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782c:	b2da      	uxtb	r2, r3
 800782e:	8979      	ldrh	r1, [r7, #10]
 8007830:	2300      	movs	r3, #0
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fa3b 	bl	8007cb4 <I2C_TransferConfig>
 800783e:	e00f      	b.n	8007860 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007844:	b29a      	uxth	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784e:	b2da      	uxtb	r2, r3
 8007850:	8979      	ldrh	r1, [r7, #10]
 8007852:	2300      	movs	r3, #0
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fa2a 	bl	8007cb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d19e      	bne.n	80077a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	6a39      	ldr	r1, [r7, #32]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 f8fc 	bl	8007a6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e01a      	b.n	80078b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2220      	movs	r2, #32
 8007884:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6859      	ldr	r1, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8007892:	400b      	ands	r3, r1
 8007894:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	e000      	b.n	80078b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80078b2:	2302      	movs	r3, #2
  }
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3718      	adds	r7, #24
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	80002000 	.word	0x80002000
 80078c0:	fe00e800 	.word	0xfe00e800

080078c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
  }
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b02      	cmp	r3, #2
 800790c:	d103      	bne.n	8007916 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b01      	cmp	r3, #1
 8007922:	d007      	beq.n	8007934 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f042 0201 	orr.w	r2, r2, #1
 8007932:	619a      	str	r2, [r3, #24]
  }
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007950:	e031      	b.n	80079b6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007958:	d02d      	beq.n	80079b6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800795a:	f7fe fc05 	bl	8006168 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d302      	bcc.n	8007970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d122      	bne.n	80079b6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4013      	ands	r3, r2
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	429a      	cmp	r2, r3
 800797e:	bf0c      	ite	eq
 8007980:	2301      	moveq	r3, #1
 8007982:	2300      	movne	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	429a      	cmp	r2, r3
 800798c:	d113      	bne.n	80079b6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007992:	f043 0220 	orr.w	r2, r3, #32
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e00f      	b.n	80079d6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4013      	ands	r3, r2
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	bf0c      	ite	eq
 80079c6:	2301      	moveq	r3, #1
 80079c8:	2300      	movne	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	461a      	mov	r2, r3
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d0be      	beq.n	8007952 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80079ea:	e033      	b.n	8007a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f87f 	bl	8007af4 <I2C_IsErrorOccurred>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e031      	b.n	8007a64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a06:	d025      	beq.n	8007a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a08:	f7fe fbae 	bl	8006168 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d302      	bcc.n	8007a1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d11a      	bne.n	8007a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d013      	beq.n	8007a54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a30:	f043 0220 	orr.w	r2, r3, #32
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e007      	b.n	8007a64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d1c4      	bne.n	80079ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a78:	e02f      	b.n	8007ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f838 	bl	8007af4 <I2C_IsErrorOccurred>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e02d      	b.n	8007aea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a8e:	f7fe fb6b 	bl	8006168 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d302      	bcc.n	8007aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d11a      	bne.n	8007ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	d013      	beq.n	8007ada <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	f043 0220 	orr.w	r2, r3, #32
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e007      	b.n	8007aea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	f003 0320 	and.w	r3, r3, #32
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d1c8      	bne.n	8007a7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08a      	sub	sp, #40	; 0x28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	f003 0310 	and.w	r3, r3, #16
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d068      	beq.n	8007bf2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2210      	movs	r2, #16
 8007b26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b28:	e049      	b.n	8007bbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b30:	d045      	beq.n	8007bbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b32:	f7fe fb19 	bl	8006168 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d302      	bcc.n	8007b48 <I2C_IsErrorOccurred+0x54>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d13a      	bne.n	8007bbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b6a:	d121      	bne.n	8007bb0 <I2C_IsErrorOccurred+0xbc>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b72:	d01d      	beq.n	8007bb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007b74:	7cfb      	ldrb	r3, [r7, #19]
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d01a      	beq.n	8007bb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b8a:	f7fe faed 	bl	8006168 <HAL_GetTick>
 8007b8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b90:	e00e      	b.n	8007bb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b92:	f7fe fae9 	bl	8006168 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b19      	cmp	r3, #25
 8007b9e:	d907      	bls.n	8007bb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	f043 0320 	orr.w	r3, r3, #32
 8007ba6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007bae:	e006      	b.n	8007bbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d1e9      	bne.n	8007b92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	f003 0320 	and.w	r3, r3, #32
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d003      	beq.n	8007bd4 <I2C_IsErrorOccurred+0xe0>
 8007bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0aa      	beq.n	8007b2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d103      	bne.n	8007be4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2220      	movs	r2, #32
 8007be2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007be4:	6a3b      	ldr	r3, [r7, #32]
 8007be6:	f043 0304 	orr.w	r3, r3, #4
 8007bea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
 8007c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00b      	beq.n	8007c3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	f043 0308 	orr.w	r3, r3, #8
 8007c2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00b      	beq.n	8007c60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	f043 0302 	orr.w	r3, r3, #2
 8007c4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01c      	beq.n	8007ca2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff fe45 	bl	80078f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6859      	ldr	r1, [r3, #4]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <I2C_IsErrorOccurred+0x1bc>)
 8007c7a:	400b      	ands	r3, r1
 8007c7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	431a      	orrs	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3728      	adds	r7, #40	; 0x28
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	fe00e800 	.word	0xfe00e800

08007cb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b087      	sub	sp, #28
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	607b      	str	r3, [r7, #4]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	817b      	strh	r3, [r7, #10]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cc6:	897b      	ldrh	r3, [r7, #10]
 8007cc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ccc:	7a7b      	ldrb	r3, [r7, #9]
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ce2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	0d5b      	lsrs	r3, r3, #21
 8007cee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007cf2:	4b08      	ldr	r3, [pc, #32]	; (8007d14 <I2C_TransferConfig+0x60>)
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	ea02 0103 	and.w	r1, r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007d06:	bf00      	nop
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	03ff63ff 	.word	0x03ff63ff

08007d18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	d138      	bne.n	8007da0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d101      	bne.n	8007d3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d38:	2302      	movs	r3, #2
 8007d3a:	e032      	b.n	8007da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2224      	movs	r2, #36	; 0x24
 8007d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f022 0201 	bic.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0201 	orr.w	r2, r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2220      	movs	r2, #32
 8007d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e000      	b.n	8007da2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007da0:	2302      	movs	r3, #2
  }
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d139      	bne.n	8007e38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e033      	b.n	8007e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2224      	movs	r2, #36	; 0x24
 8007dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0201 	bic.w	r2, r2, #1
 8007df0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007e00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f001 b823 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 817d 	beq.w	800817e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007e84:	4bbc      	ldr	r3, [pc, #752]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f003 030c 	and.w	r3, r3, #12
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d00c      	beq.n	8007eaa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007e90:	4bb9      	ldr	r3, [pc, #740]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f003 030c 	and.w	r3, r3, #12
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d15c      	bne.n	8007f56 <HAL_RCC_OscConfig+0x10e>
 8007e9c:	4bb6      	ldr	r3, [pc, #728]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea8:	d155      	bne.n	8007f56 <HAL_RCC_OscConfig+0x10e>
 8007eaa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007eae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007eb6:	fa93 f3a3 	rbit	r3, r3
 8007eba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007ebe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ec2:	fab3 f383 	clz	r3, r3
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f043 0301 	orr.w	r3, r3, #1
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d102      	bne.n	8007edc <HAL_RCC_OscConfig+0x94>
 8007ed6:	4ba8      	ldr	r3, [pc, #672]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	e015      	b.n	8007f08 <HAL_RCC_OscConfig+0xc0>
 8007edc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ee0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8007ee8:	fa93 f3a3 	rbit	r3, r3
 8007eec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8007ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ef4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007ef8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8007efc:	fa93 f3a3 	rbit	r3, r3
 8007f00:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007f04:	4b9c      	ldr	r3, [pc, #624]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f0c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8007f10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007f14:	fa92 f2a2 	rbit	r2, r2
 8007f18:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007f1c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007f20:	fab2 f282 	clz	r2, r2
 8007f24:	b2d2      	uxtb	r2, r2
 8007f26:	f042 0220 	orr.w	r2, r2, #32
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	f002 021f 	and.w	r2, r2, #31
 8007f30:	2101      	movs	r1, #1
 8007f32:	fa01 f202 	lsl.w	r2, r1, r2
 8007f36:	4013      	ands	r3, r2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 811f 	beq.w	800817c <HAL_RCC_OscConfig+0x334>
 8007f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f040 8116 	bne.w	800817c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f000 bfaf 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f66:	d106      	bne.n	8007f76 <HAL_RCC_OscConfig+0x12e>
 8007f68:	4b83      	ldr	r3, [pc, #524]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a82      	ldr	r2, [pc, #520]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	e036      	b.n	8007fe4 <HAL_RCC_OscConfig+0x19c>
 8007f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10c      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x158>
 8007f86:	4b7c      	ldr	r3, [pc, #496]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a7b      	ldr	r2, [pc, #492]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f90:	6013      	str	r3, [r2, #0]
 8007f92:	4b79      	ldr	r3, [pc, #484]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a78      	ldr	r2, [pc, #480]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007f98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	e021      	b.n	8007fe4 <HAL_RCC_OscConfig+0x19c>
 8007fa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fa4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fb0:	d10c      	bne.n	8007fcc <HAL_RCC_OscConfig+0x184>
 8007fb2:	4b71      	ldr	r3, [pc, #452]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a70      	ldr	r2, [pc, #448]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	4b6e      	ldr	r3, [pc, #440]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a6d      	ldr	r2, [pc, #436]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	e00b      	b.n	8007fe4 <HAL_RCC_OscConfig+0x19c>
 8007fcc:	4b6a      	ldr	r3, [pc, #424]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a69      	ldr	r2, [pc, #420]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	4b67      	ldr	r3, [pc, #412]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a66      	ldr	r2, [pc, #408]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fe2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007fe4:	4b64      	ldr	r3, [pc, #400]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	f023 020f 	bic.w	r2, r3, #15
 8007fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	495f      	ldr	r1, [pc, #380]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d059      	beq.n	80080c2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800800e:	f7fe f8ab 	bl	8006168 <HAL_GetTick>
 8008012:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008016:	e00a      	b.n	800802e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008018:	f7fe f8a6 	bl	8006168 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b64      	cmp	r3, #100	; 0x64
 8008026:	d902      	bls.n	800802e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	f000 bf43 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>
 800802e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008032:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008036:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800803a:	fa93 f3a3 	rbit	r3, r3
 800803e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8008042:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008046:	fab3 f383 	clz	r3, r3
 800804a:	b2db      	uxtb	r3, r3
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	b2db      	uxtb	r3, r3
 8008050:	f043 0301 	orr.w	r3, r3, #1
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b01      	cmp	r3, #1
 8008058:	d102      	bne.n	8008060 <HAL_RCC_OscConfig+0x218>
 800805a:	4b47      	ldr	r3, [pc, #284]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	e015      	b.n	800808c <HAL_RCC_OscConfig+0x244>
 8008060:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008064:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008068:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800806c:	fa93 f3a3 	rbit	r3, r3
 8008070:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008078:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800807c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8008080:	fa93 f3a3 	rbit	r3, r3
 8008084:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008088:	4b3b      	ldr	r3, [pc, #236]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 800808a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008090:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8008094:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008098:	fa92 f2a2 	rbit	r2, r2
 800809c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80080a0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80080a4:	fab2 f282 	clz	r2, r2
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	f042 0220 	orr.w	r2, r2, #32
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	f002 021f 	and.w	r2, r2, #31
 80080b4:	2101      	movs	r1, #1
 80080b6:	fa01 f202 	lsl.w	r2, r1, r2
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d0ab      	beq.n	8008018 <HAL_RCC_OscConfig+0x1d0>
 80080c0:	e05d      	b.n	800817e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080c2:	f7fe f851 	bl	8006168 <HAL_GetTick>
 80080c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080ca:	e00a      	b.n	80080e2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080cc:	f7fe f84c 	bl	8006168 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	2b64      	cmp	r3, #100	; 0x64
 80080da:	d902      	bls.n	80080e2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	f000 bee9 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>
 80080e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80080e6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80080ee:	fa93 f3a3 	rbit	r3, r3
 80080f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80080f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080fa:	fab3 f383 	clz	r3, r3
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f043 0301 	orr.w	r3, r3, #1
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	d102      	bne.n	8008114 <HAL_RCC_OscConfig+0x2cc>
 800810e:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	e015      	b.n	8008140 <HAL_RCC_OscConfig+0x2f8>
 8008114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008118:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8008120:	fa93 f3a3 	rbit	r3, r3
 8008124:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800812c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008130:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008134:	fa93 f3a3 	rbit	r3, r3
 8008138:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <HAL_RCC_OscConfig+0x330>)
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008144:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8008148:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800814c:	fa92 f2a2 	rbit	r2, r2
 8008150:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8008154:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8008158:	fab2 f282 	clz	r2, r2
 800815c:	b2d2      	uxtb	r2, r2
 800815e:	f042 0220 	orr.w	r2, r2, #32
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	f002 021f 	and.w	r2, r2, #31
 8008168:	2101      	movs	r1, #1
 800816a:	fa01 f202 	lsl.w	r2, r1, r2
 800816e:	4013      	ands	r3, r2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1ab      	bne.n	80080cc <HAL_RCC_OscConfig+0x284>
 8008174:	e003      	b.n	800817e <HAL_RCC_OscConfig+0x336>
 8008176:	bf00      	nop
 8008178:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800817c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800817e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 817d 	beq.w	800848e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008194:	4ba6      	ldr	r3, [pc, #664]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f003 030c 	and.w	r3, r3, #12
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80081a0:	4ba3      	ldr	r3, [pc, #652]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f003 030c 	and.w	r3, r3, #12
 80081a8:	2b08      	cmp	r3, #8
 80081aa:	d172      	bne.n	8008292 <HAL_RCC_OscConfig+0x44a>
 80081ac:	4ba0      	ldr	r3, [pc, #640]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d16c      	bne.n	8008292 <HAL_RCC_OscConfig+0x44a>
 80081b8:	2302      	movs	r3, #2
 80081ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80081c2:	fa93 f3a3 	rbit	r3, r3
 80081c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80081ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ce:	fab3 f383 	clz	r3, r3
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	095b      	lsrs	r3, r3, #5
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f043 0301 	orr.w	r3, r3, #1
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d102      	bne.n	80081e8 <HAL_RCC_OscConfig+0x3a0>
 80081e2:	4b93      	ldr	r3, [pc, #588]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	e013      	b.n	8008210 <HAL_RCC_OscConfig+0x3c8>
 80081e8:	2302      	movs	r3, #2
 80081ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80081f2:	fa93 f3a3 	rbit	r3, r3
 80081f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80081fa:	2302      	movs	r3, #2
 80081fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008200:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008204:	fa93 f3a3 	rbit	r3, r3
 8008208:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800820c:	4b88      	ldr	r3, [pc, #544]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2202      	movs	r2, #2
 8008212:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8008216:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800821a:	fa92 f2a2 	rbit	r2, r2
 800821e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8008222:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8008226:	fab2 f282 	clz	r2, r2
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	f042 0220 	orr.w	r2, r2, #32
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	f002 021f 	and.w	r2, r2, #31
 8008236:	2101      	movs	r1, #1
 8008238:	fa01 f202 	lsl.w	r2, r1, r2
 800823c:	4013      	ands	r3, r2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00a      	beq.n	8008258 <HAL_RCC_OscConfig+0x410>
 8008242:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008246:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d002      	beq.n	8008258 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f000 be2e 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008258:	4b75      	ldr	r3, [pc, #468]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008264:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	21f8      	movs	r1, #248	; 0xf8
 800826e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008272:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008276:	fa91 f1a1 	rbit	r1, r1
 800827a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800827e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8008282:	fab1 f181 	clz	r1, r1
 8008286:	b2c9      	uxtb	r1, r1
 8008288:	408b      	lsls	r3, r1
 800828a:	4969      	ldr	r1, [pc, #420]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 800828c:	4313      	orrs	r3, r2
 800828e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008290:	e0fd      	b.n	800848e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 8088 	beq.w	80083b4 <HAL_RCC_OscConfig+0x56c>
 80082a4:	2301      	movs	r3, #1
 80082a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80082ae:	fa93 f3a3 	rbit	r3, r3
 80082b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80082b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082ba:	fab3 f383 	clz	r3, r3
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80082c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	461a      	mov	r2, r3
 80082cc:	2301      	movs	r3, #1
 80082ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082d0:	f7fd ff4a 	bl	8006168 <HAL_GetTick>
 80082d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082d8:	e00a      	b.n	80082f0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082da:	f7fd ff45 	bl	8006168 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d902      	bls.n	80082f0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	f000 bde2 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>
 80082f0:	2302      	movs	r3, #2
 80082f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80082fa:	fa93 f3a3 	rbit	r3, r3
 80082fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8008302:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008306:	fab3 f383 	clz	r3, r3
 800830a:	b2db      	uxtb	r3, r3
 800830c:	095b      	lsrs	r3, r3, #5
 800830e:	b2db      	uxtb	r3, r3
 8008310:	f043 0301 	orr.w	r3, r3, #1
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b01      	cmp	r3, #1
 8008318:	d102      	bne.n	8008320 <HAL_RCC_OscConfig+0x4d8>
 800831a:	4b45      	ldr	r3, [pc, #276]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	e013      	b.n	8008348 <HAL_RCC_OscConfig+0x500>
 8008320:	2302      	movs	r3, #2
 8008322:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008326:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800832a:	fa93 f3a3 	rbit	r3, r3
 800832e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8008332:	2302      	movs	r3, #2
 8008334:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008338:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800833c:	fa93 f3a3 	rbit	r3, r3
 8008340:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8008344:	4b3a      	ldr	r3, [pc, #232]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2202      	movs	r2, #2
 800834a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800834e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008352:	fa92 f2a2 	rbit	r2, r2
 8008356:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800835a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800835e:	fab2 f282 	clz	r2, r2
 8008362:	b2d2      	uxtb	r2, r2
 8008364:	f042 0220 	orr.w	r2, r2, #32
 8008368:	b2d2      	uxtb	r2, r2
 800836a:	f002 021f 	and.w	r2, r2, #31
 800836e:	2101      	movs	r1, #1
 8008370:	fa01 f202 	lsl.w	r2, r1, r2
 8008374:	4013      	ands	r3, r2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0af      	beq.n	80082da <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800837a:	4b2d      	ldr	r3, [pc, #180]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	21f8      	movs	r1, #248	; 0xf8
 8008390:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008394:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008398:	fa91 f1a1 	rbit	r1, r1
 800839c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80083a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80083a4:	fab1 f181 	clz	r1, r1
 80083a8:	b2c9      	uxtb	r1, r1
 80083aa:	408b      	lsls	r3, r1
 80083ac:	4920      	ldr	r1, [pc, #128]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	600b      	str	r3, [r1, #0]
 80083b2:	e06c      	b.n	800848e <HAL_RCC_OscConfig+0x646>
 80083b4:	2301      	movs	r3, #1
 80083b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80083be:	fa93 f3a3 	rbit	r3, r3
 80083c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80083c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083ca:	fab3 f383 	clz	r3, r3
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80083d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	461a      	mov	r2, r3
 80083dc:	2300      	movs	r3, #0
 80083de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e0:	f7fd fec2 	bl	8006168 <HAL_GetTick>
 80083e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e8:	e00a      	b.n	8008400 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083ea:	f7fd febd 	bl	8006168 <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d902      	bls.n	8008400 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	f000 bd5a 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>
 8008400:	2302      	movs	r3, #2
 8008402:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008406:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800840a:	fa93 f3a3 	rbit	r3, r3
 800840e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8008412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008416:	fab3 f383 	clz	r3, r3
 800841a:	b2db      	uxtb	r3, r3
 800841c:	095b      	lsrs	r3, r3, #5
 800841e:	b2db      	uxtb	r3, r3
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	d104      	bne.n	8008434 <HAL_RCC_OscConfig+0x5ec>
 800842a:	4b01      	ldr	r3, [pc, #4]	; (8008430 <HAL_RCC_OscConfig+0x5e8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	e015      	b.n	800845c <HAL_RCC_OscConfig+0x614>
 8008430:	40021000 	.word	0x40021000
 8008434:	2302      	movs	r3, #2
 8008436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800843a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800843e:	fa93 f3a3 	rbit	r3, r3
 8008442:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008446:	2302      	movs	r3, #2
 8008448:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800844c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008450:	fa93 f3a3 	rbit	r3, r3
 8008454:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8008458:	4bc8      	ldr	r3, [pc, #800]	; (800877c <HAL_RCC_OscConfig+0x934>)
 800845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845c:	2202      	movs	r2, #2
 800845e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8008462:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8008466:	fa92 f2a2 	rbit	r2, r2
 800846a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800846e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8008472:	fab2 f282 	clz	r2, r2
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	f042 0220 	orr.w	r2, r2, #32
 800847c:	b2d2      	uxtb	r2, r2
 800847e:	f002 021f 	and.w	r2, r2, #31
 8008482:	2101      	movs	r1, #1
 8008484:	fa01 f202 	lsl.w	r2, r1, r2
 8008488:	4013      	ands	r3, r2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1ad      	bne.n	80083ea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800848e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0308 	and.w	r3, r3, #8
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 8110 	beq.w	80086c4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d079      	beq.n	80085a8 <HAL_RCC_OscConfig+0x760>
 80084b4:	2301      	movs	r3, #1
 80084b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80084be:	fa93 f3a3 	rbit	r3, r3
 80084c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80084c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084ca:	fab3 f383 	clz	r3, r3
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	4bab      	ldr	r3, [pc, #684]	; (8008780 <HAL_RCC_OscConfig+0x938>)
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	461a      	mov	r2, r3
 80084da:	2301      	movs	r3, #1
 80084dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084de:	f7fd fe43 	bl	8006168 <HAL_GetTick>
 80084e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084e6:	e00a      	b.n	80084fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084e8:	f7fd fe3e 	bl	8006168 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d902      	bls.n	80084fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	f000 bcdb 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>
 80084fe:	2302      	movs	r3, #2
 8008500:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008508:	fa93 f3a3 	rbit	r3, r3
 800850c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008514:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008518:	2202      	movs	r2, #2
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008520:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	fa93 f2a3 	rbit	r2, r3
 800852a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800852e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800853c:	2202      	movs	r2, #2
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	fa93 f2a3 	rbit	r2, r3
 800854e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008552:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8008556:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008558:	4b88      	ldr	r3, [pc, #544]	; (800877c <HAL_RCC_OscConfig+0x934>)
 800855a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800855c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008560:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008564:	2102      	movs	r1, #2
 8008566:	6019      	str	r1, [r3, #0]
 8008568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800856c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	fa93 f1a3 	rbit	r1, r3
 8008576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800857a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800857e:	6019      	str	r1, [r3, #0]
  return result;
 8008580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008584:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	fab3 f383 	clz	r3, r3
 800858e:	b2db      	uxtb	r3, r3
 8008590:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008594:	b2db      	uxtb	r3, r3
 8008596:	f003 031f 	and.w	r3, r3, #31
 800859a:	2101      	movs	r1, #1
 800859c:	fa01 f303 	lsl.w	r3, r1, r3
 80085a0:	4013      	ands	r3, r2
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d0a0      	beq.n	80084e8 <HAL_RCC_OscConfig+0x6a0>
 80085a6:	e08d      	b.n	80086c4 <HAL_RCC_OscConfig+0x87c>
 80085a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80085b0:	2201      	movs	r2, #1
 80085b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	fa93 f2a3 	rbit	r2, r3
 80085c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80085ca:	601a      	str	r2, [r3, #0]
  return result;
 80085cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80085d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085d6:	fab3 f383 	clz	r3, r3
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	4b68      	ldr	r3, [pc, #416]	; (8008780 <HAL_RCC_OscConfig+0x938>)
 80085e0:	4413      	add	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	461a      	mov	r2, r3
 80085e6:	2300      	movs	r3, #0
 80085e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085ea:	f7fd fdbd 	bl	8006168 <HAL_GetTick>
 80085ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085f2:	e00a      	b.n	800860a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085f4:	f7fd fdb8 	bl	8006168 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d902      	bls.n	800860a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	f000 bc55 	b.w	8008eb4 <HAL_RCC_OscConfig+0x106c>
 800860a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800860e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8008612:	2202      	movs	r2, #2
 8008614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800861a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	fa93 f2a3 	rbit	r2, r3
 8008624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008628:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008632:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008636:	2202      	movs	r2, #2
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800863e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	fa93 f2a3 	rbit	r2, r3
 8008648:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800864c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008650:	601a      	str	r2, [r3, #0]
 8008652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800865a:	2202      	movs	r2, #2
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	fa93 f2a3 	rbit	r2, r3
 800866c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008670:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008674:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008676:	4b41      	ldr	r3, [pc, #260]	; (800877c <HAL_RCC_OscConfig+0x934>)
 8008678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800867a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800867e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008682:	2102      	movs	r1, #2
 8008684:	6019      	str	r1, [r3, #0]
 8008686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800868a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	fa93 f1a3 	rbit	r1, r3
 8008694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008698:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800869c:	6019      	str	r1, [r3, #0]
  return result;
 800869e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	fab3 f383 	clz	r3, r3
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	2101      	movs	r1, #1
 80086ba:	fa01 f303 	lsl.w	r3, r1, r3
 80086be:	4013      	ands	r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d197      	bne.n	80085f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 81a1 	beq.w	8008a1c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086da:	2300      	movs	r3, #0
 80086dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086e0:	4b26      	ldr	r3, [pc, #152]	; (800877c <HAL_RCC_OscConfig+0x934>)
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d116      	bne.n	800871a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ec:	4b23      	ldr	r3, [pc, #140]	; (800877c <HAL_RCC_OscConfig+0x934>)
 80086ee:	69db      	ldr	r3, [r3, #28]
 80086f0:	4a22      	ldr	r2, [pc, #136]	; (800877c <HAL_RCC_OscConfig+0x934>)
 80086f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086f6:	61d3      	str	r3, [r2, #28]
 80086f8:	4b20      	ldr	r3, [pc, #128]	; (800877c <HAL_RCC_OscConfig+0x934>)
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8008700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008704:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800870e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8008712:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800871a:	4b1a      	ldr	r3, [pc, #104]	; (8008784 <HAL_RCC_OscConfig+0x93c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008722:	2b00      	cmp	r3, #0
 8008724:	d11a      	bne.n	800875c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008726:	4b17      	ldr	r3, [pc, #92]	; (8008784 <HAL_RCC_OscConfig+0x93c>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a16      	ldr	r2, [pc, #88]	; (8008784 <HAL_RCC_OscConfig+0x93c>)
 800872c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008730:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008732:	f7fd fd19 	bl	8006168 <HAL_GetTick>
 8008736:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800873a:	e009      	b.n	8008750 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800873c:	f7fd fd14 	bl	8006168 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	2b64      	cmp	r3, #100	; 0x64
 800874a:	d901      	bls.n	8008750 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e3b1      	b.n	8008eb4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008750:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <HAL_RCC_OscConfig+0x93c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0ef      	beq.n	800873c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800875c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008760:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d10d      	bne.n	8008788 <HAL_RCC_OscConfig+0x940>
 800876c:	4b03      	ldr	r3, [pc, #12]	; (800877c <HAL_RCC_OscConfig+0x934>)
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	4a02      	ldr	r2, [pc, #8]	; (800877c <HAL_RCC_OscConfig+0x934>)
 8008772:	f043 0301 	orr.w	r3, r3, #1
 8008776:	6213      	str	r3, [r2, #32]
 8008778:	e03c      	b.n	80087f4 <HAL_RCC_OscConfig+0x9ac>
 800877a:	bf00      	nop
 800877c:	40021000 	.word	0x40021000
 8008780:	10908120 	.word	0x10908120
 8008784:	40007000 	.word	0x40007000
 8008788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800878c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10c      	bne.n	80087b2 <HAL_RCC_OscConfig+0x96a>
 8008798:	4bc1      	ldr	r3, [pc, #772]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	4ac0      	ldr	r2, [pc, #768]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	6213      	str	r3, [r2, #32]
 80087a4:	4bbe      	ldr	r3, [pc, #760]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	4abd      	ldr	r2, [pc, #756]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087aa:	f023 0304 	bic.w	r3, r3, #4
 80087ae:	6213      	str	r3, [r2, #32]
 80087b0:	e020      	b.n	80087f4 <HAL_RCC_OscConfig+0x9ac>
 80087b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	2b05      	cmp	r3, #5
 80087c0:	d10c      	bne.n	80087dc <HAL_RCC_OscConfig+0x994>
 80087c2:	4bb7      	ldr	r3, [pc, #732]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	4ab6      	ldr	r2, [pc, #728]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087c8:	f043 0304 	orr.w	r3, r3, #4
 80087cc:	6213      	str	r3, [r2, #32]
 80087ce:	4bb4      	ldr	r3, [pc, #720]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	4ab3      	ldr	r2, [pc, #716]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087d4:	f043 0301 	orr.w	r3, r3, #1
 80087d8:	6213      	str	r3, [r2, #32]
 80087da:	e00b      	b.n	80087f4 <HAL_RCC_OscConfig+0x9ac>
 80087dc:	4bb0      	ldr	r3, [pc, #704]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	4aaf      	ldr	r2, [pc, #700]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087e2:	f023 0301 	bic.w	r3, r3, #1
 80087e6:	6213      	str	r3, [r2, #32]
 80087e8:	4bad      	ldr	r3, [pc, #692]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087ea:	6a1b      	ldr	r3, [r3, #32]
 80087ec:	4aac      	ldr	r2, [pc, #688]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80087ee:	f023 0304 	bic.w	r3, r3, #4
 80087f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80087f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 8081 	beq.w	8008908 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008806:	f7fd fcaf 	bl	8006168 <HAL_GetTick>
 800880a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800880e:	e00b      	b.n	8008828 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008810:	f7fd fcaa 	bl	8006168 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008820:	4293      	cmp	r3, r2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e345      	b.n	8008eb4 <HAL_RCC_OscConfig+0x106c>
 8008828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800882c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008830:	2202      	movs	r2, #2
 8008832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008838:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	fa93 f2a3 	rbit	r2, r3
 8008842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008846:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008850:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008854:	2202      	movs	r2, #2
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800885c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	fa93 f2a3 	rbit	r2, r3
 8008866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800886a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800886e:	601a      	str	r2, [r3, #0]
  return result;
 8008870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008874:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008878:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800887a:	fab3 f383 	clz	r3, r3
 800887e:	b2db      	uxtb	r3, r3
 8008880:	095b      	lsrs	r3, r3, #5
 8008882:	b2db      	uxtb	r3, r3
 8008884:	f043 0302 	orr.w	r3, r3, #2
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d102      	bne.n	8008894 <HAL_RCC_OscConfig+0xa4c>
 800888e:	4b84      	ldr	r3, [pc, #528]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	e013      	b.n	80088bc <HAL_RCC_OscConfig+0xa74>
 8008894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008898:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800889c:	2202      	movs	r2, #2
 800889e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	fa93 f2a3 	rbit	r2, r3
 80088ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80088b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	4b79      	ldr	r3, [pc, #484]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80088c4:	2102      	movs	r1, #2
 80088c6:	6011      	str	r1, [r2, #0]
 80088c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80088d0:	6812      	ldr	r2, [r2, #0]
 80088d2:	fa92 f1a2 	rbit	r1, r2
 80088d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80088de:	6011      	str	r1, [r2, #0]
  return result;
 80088e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80088e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80088e8:	6812      	ldr	r2, [r2, #0]
 80088ea:	fab2 f282 	clz	r2, r2
 80088ee:	b2d2      	uxtb	r2, r2
 80088f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088f4:	b2d2      	uxtb	r2, r2
 80088f6:	f002 021f 	and.w	r2, r2, #31
 80088fa:	2101      	movs	r1, #1
 80088fc:	fa01 f202 	lsl.w	r2, r1, r2
 8008900:	4013      	ands	r3, r2
 8008902:	2b00      	cmp	r3, #0
 8008904:	d084      	beq.n	8008810 <HAL_RCC_OscConfig+0x9c8>
 8008906:	e07f      	b.n	8008a08 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008908:	f7fd fc2e 	bl	8006168 <HAL_GetTick>
 800890c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008910:	e00b      	b.n	800892a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008912:	f7fd fc29 	bl	8006168 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008922:	4293      	cmp	r3, r2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e2c4      	b.n	8008eb4 <HAL_RCC_OscConfig+0x106c>
 800892a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800892e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008932:	2202      	movs	r2, #2
 8008934:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800893a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	fa93 f2a3 	rbit	r2, r3
 8008944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008948:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008952:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008956:	2202      	movs	r2, #2
 8008958:	601a      	str	r2, [r3, #0]
 800895a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800895e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	fa93 f2a3 	rbit	r2, r3
 8008968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800896c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008970:	601a      	str	r2, [r3, #0]
  return result;
 8008972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008976:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800897a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800897c:	fab3 f383 	clz	r3, r3
 8008980:	b2db      	uxtb	r3, r3
 8008982:	095b      	lsrs	r3, r3, #5
 8008984:	b2db      	uxtb	r3, r3
 8008986:	f043 0302 	orr.w	r3, r3, #2
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	d102      	bne.n	8008996 <HAL_RCC_OscConfig+0xb4e>
 8008990:	4b43      	ldr	r3, [pc, #268]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	e013      	b.n	80089be <HAL_RCC_OscConfig+0xb76>
 8008996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800899a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800899e:	2202      	movs	r2, #2
 80089a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	fa93 f2a3 	rbit	r2, r3
 80089b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80089b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	4b39      	ldr	r3, [pc, #228]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80089c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80089c6:	2102      	movs	r1, #2
 80089c8:	6011      	str	r1, [r2, #0]
 80089ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80089ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80089d2:	6812      	ldr	r2, [r2, #0]
 80089d4:	fa92 f1a2 	rbit	r1, r2
 80089d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80089dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80089e0:	6011      	str	r1, [r2, #0]
  return result;
 80089e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80089e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80089ea:	6812      	ldr	r2, [r2, #0]
 80089ec:	fab2 f282 	clz	r2, r2
 80089f0:	b2d2      	uxtb	r2, r2
 80089f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089f6:	b2d2      	uxtb	r2, r2
 80089f8:	f002 021f 	and.w	r2, r2, #31
 80089fc:	2101      	movs	r1, #1
 80089fe:	fa01 f202 	lsl.w	r2, r1, r2
 8008a02:	4013      	ands	r3, r2
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d184      	bne.n	8008912 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008a08:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d105      	bne.n	8008a1c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a10:	4b23      	ldr	r3, [pc, #140]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	4a22      	ldr	r2, [pc, #136]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 8008a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a1a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69db      	ldr	r3, [r3, #28]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f000 8242 	beq.w	8008eb2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a2e:	4b1c      	ldr	r3, [pc, #112]	; (8008aa0 <HAL_RCC_OscConfig+0xc58>)
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f003 030c 	and.w	r3, r3, #12
 8008a36:	2b08      	cmp	r3, #8
 8008a38:	f000 8213 	beq.w	8008e62 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	f040 8162 	bne.w	8008d12 <HAL_RCC_OscConfig+0xeca>
 8008a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a52:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008a56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a60:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	fa93 f2a3 	rbit	r2, r3
 8008a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a6e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008a72:	601a      	str	r2, [r3, #0]
  return result;
 8008a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008a78:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008a7c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a7e:	fab3 f383 	clz	r3, r3
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008a88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	461a      	mov	r2, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a94:	f7fd fb68 	bl	8006168 <HAL_GetTick>
 8008a98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a9c:	e00c      	b.n	8008ab8 <HAL_RCC_OscConfig+0xc70>
 8008a9e:	bf00      	nop
 8008aa0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa4:	f7fd fb60 	bl	8006168 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e1fd      	b.n	8008eb4 <HAL_RCC_OscConfig+0x106c>
 8008ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008abc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008aca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	fa93 f2a3 	rbit	r2, r3
 8008ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ad8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008adc:	601a      	str	r2, [r3, #0]
  return result;
 8008ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ae2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8008ae6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008ae8:	fab3 f383 	clz	r3, r3
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	095b      	lsrs	r3, r3, #5
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	f043 0301 	orr.w	r3, r3, #1
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d102      	bne.n	8008b02 <HAL_RCC_OscConfig+0xcba>
 8008afc:	4bb0      	ldr	r3, [pc, #704]	; (8008dc0 <HAL_RCC_OscConfig+0xf78>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	e027      	b.n	8008b52 <HAL_RCC_OscConfig+0xd0a>
 8008b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b06:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008b0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b14:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	fa93 f2a3 	rbit	r2, r3
 8008b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b22:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b2c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b3a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	fa93 f2a3 	rbit	r2, r3
 8008b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008b48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8008b4c:	601a      	str	r2, [r3, #0]
 8008b4e:	4b9c      	ldr	r3, [pc, #624]	; (8008dc0 <HAL_RCC_OscConfig+0xf78>)
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b56:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008b5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008b5e:	6011      	str	r1, [r2, #0]
 8008b60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b64:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008b68:	6812      	ldr	r2, [r2, #0]
 8008b6a:	fa92 f1a2 	rbit	r1, r2
 8008b6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b72:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008b76:	6011      	str	r1, [r2, #0]
  return result;
 8008b78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008b7c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	fab2 f282 	clz	r2, r2
 8008b86:	b2d2      	uxtb	r2, r2
 8008b88:	f042 0220 	orr.w	r2, r2, #32
 8008b8c:	b2d2      	uxtb	r2, r2
 8008b8e:	f002 021f 	and.w	r2, r2, #31
 8008b92:	2101      	movs	r1, #1
 8008b94:	fa01 f202 	lsl.w	r2, r1, r2
 8008b98:	4013      	ands	r3, r2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d182      	bne.n	8008aa4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b9e:	4b88      	ldr	r3, [pc, #544]	; (8008dc0 <HAL_RCC_OscConfig+0xf78>)
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	497f      	ldr	r1, [pc, #508]	; (8008dc0 <HAL_RCC_OscConfig+0xf78>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	604b      	str	r3, [r1, #4]
 8008bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008bca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008bce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008bd8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	fa93 f2a3 	rbit	r2, r3
 8008be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008be6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008bea:	601a      	str	r2, [r3, #0]
  return result;
 8008bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008bf0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8008bf4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bf6:	fab3 f383 	clz	r3, r3
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008c00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	461a      	mov	r2, r3
 8008c08:	2301      	movs	r3, #1
 8008c0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c0c:	f7fd faac 	bl	8006168 <HAL_GetTick>
 8008c10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c14:	e009      	b.n	8008c2a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c16:	f7fd faa7 	bl	8006168 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d901      	bls.n	8008c2a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e144      	b.n	8008eb4 <HAL_RCC_OscConfig+0x106c>
 8008c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008c2e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008c3c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	fa93 f2a3 	rbit	r2, r3
 8008c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008c4a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008c4e:	601a      	str	r2, [r3, #0]
  return result;
 8008c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008c54:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008c58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c5a:	fab3 f383 	clz	r3, r3
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	095b      	lsrs	r3, r3, #5
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	f043 0301 	orr.w	r3, r3, #1
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d102      	bne.n	8008c74 <HAL_RCC_OscConfig+0xe2c>
 8008c6e:	4b54      	ldr	r3, [pc, #336]	; (8008dc0 <HAL_RCC_OscConfig+0xf78>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	e027      	b.n	8008cc4 <HAL_RCC_OscConfig+0xe7c>
 8008c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008c78:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008c7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008c80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008c86:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	fa93 f2a3 	rbit	r2, r3
 8008c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008c94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008c9e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008ca6:	601a      	str	r2, [r3, #0]
 8008ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008cac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	fa93 f2a3 	rbit	r2, r3
 8008cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008cba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	4b3f      	ldr	r3, [pc, #252]	; (8008dc0 <HAL_RCC_OscConfig+0xf78>)
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008cc8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008ccc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008cd0:	6011      	str	r1, [r2, #0]
 8008cd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008cd6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8008cda:	6812      	ldr	r2, [r2, #0]
 8008cdc:	fa92 f1a2 	rbit	r1, r2
 8008ce0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008ce4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008ce8:	6011      	str	r1, [r2, #0]
  return result;
 8008cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008cee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8008cf2:	6812      	ldr	r2, [r2, #0]
 8008cf4:	fab2 f282 	clz	r2, r2
 8008cf8:	b2d2      	uxtb	r2, r2
 8008cfa:	f042 0220 	orr.w	r2, r2, #32
 8008cfe:	b2d2      	uxtb	r2, r2
 8008d00:	f002 021f 	and.w	r2, r2, #31
 8008d04:	2101      	movs	r1, #1
 8008d06:	fa01 f202 	lsl.w	r2, r1, r2
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d082      	beq.n	8008c16 <HAL_RCC_OscConfig+0xdce>
 8008d10:	e0cf      	b.n	8008eb2 <HAL_RCC_OscConfig+0x106a>
 8008d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d16:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008d1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d24:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	fa93 f2a3 	rbit	r2, r3
 8008d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008d36:	601a      	str	r2, [r3, #0]
  return result;
 8008d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008d40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d42:	fab3 f383 	clz	r3, r3
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008d4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	461a      	mov	r2, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d58:	f7fd fa06 	bl	8006168 <HAL_GetTick>
 8008d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d60:	e009      	b.n	8008d76 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d62:	f7fd fa01 	bl	8006168 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e09e      	b.n	8008eb4 <HAL_RCC_OscConfig+0x106c>
 8008d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d7a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008d7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008d82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d88:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	fa93 f2a3 	rbit	r2, r3
 8008d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008d96:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008d9a:	601a      	str	r2, [r3, #0]
  return result;
 8008d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008da0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008da4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008da6:	fab3 f383 	clz	r3, r3
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d104      	bne.n	8008dc4 <HAL_RCC_OscConfig+0xf7c>
 8008dba:	4b01      	ldr	r3, [pc, #4]	; (8008dc0 <HAL_RCC_OscConfig+0xf78>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	e029      	b.n	8008e14 <HAL_RCC_OscConfig+0xfcc>
 8008dc0:	40021000 	.word	0x40021000
 8008dc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dc8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008dcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008dd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dd6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	fa93 f2a3 	rbit	r2, r3
 8008de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008de4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8008de8:	601a      	str	r2, [r3, #0]
 8008dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008dfc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	fa93 f2a3 	rbit	r2, r3
 8008e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	4b2b      	ldr	r3, [pc, #172]	; (8008ec0 <HAL_RCC_OscConfig+0x1078>)
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008e18:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008e1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008e20:	6011      	str	r1, [r2, #0]
 8008e22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008e26:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008e2a:	6812      	ldr	r2, [r2, #0]
 8008e2c:	fa92 f1a2 	rbit	r1, r2
 8008e30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008e34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008e38:	6011      	str	r1, [r2, #0]
  return result;
 8008e3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008e3e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008e42:	6812      	ldr	r2, [r2, #0]
 8008e44:	fab2 f282 	clz	r2, r2
 8008e48:	b2d2      	uxtb	r2, r2
 8008e4a:	f042 0220 	orr.w	r2, r2, #32
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	f002 021f 	and.w	r2, r2, #31
 8008e54:	2101      	movs	r1, #1
 8008e56:	fa01 f202 	lsl.w	r2, r1, r2
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d180      	bne.n	8008d62 <HAL_RCC_OscConfig+0xf1a>
 8008e60:	e027      	b.n	8008eb2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e01e      	b.n	8008eb4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008e76:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <HAL_RCC_OscConfig+0x1078>)
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008e7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008e82:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008e8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d10b      	bne.n	8008eae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008e96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008e9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ea2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d001      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40021000 	.word	0x40021000

08008ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b09e      	sub	sp, #120	; 0x78
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e162      	b.n	80091a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008edc:	4b90      	ldr	r3, [pc, #576]	; (8009120 <HAL_RCC_ClockConfig+0x25c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0307 	and.w	r3, r3, #7
 8008ee4:	683a      	ldr	r2, [r7, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d910      	bls.n	8008f0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008eea:	4b8d      	ldr	r3, [pc, #564]	; (8009120 <HAL_RCC_ClockConfig+0x25c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f023 0207 	bic.w	r2, r3, #7
 8008ef2:	498b      	ldr	r1, [pc, #556]	; (8009120 <HAL_RCC_ClockConfig+0x25c>)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008efa:	4b89      	ldr	r3, [pc, #548]	; (8009120 <HAL_RCC_ClockConfig+0x25c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0307 	and.w	r3, r3, #7
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d001      	beq.n	8008f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e14a      	b.n	80091a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d008      	beq.n	8008f2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f18:	4b82      	ldr	r3, [pc, #520]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	497f      	ldr	r1, [pc, #508]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 8008f26:	4313      	orrs	r3, r2
 8008f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0301 	and.w	r3, r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f000 80dc 	beq.w	80090f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d13c      	bne.n	8008fba <HAL_RCC_ClockConfig+0xf6>
 8008f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f48:	fa93 f3a3 	rbit	r3, r3
 8008f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f50:	fab3 f383 	clz	r3, r3
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	095b      	lsrs	r3, r3, #5
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d102      	bne.n	8008f6a <HAL_RCC_ClockConfig+0xa6>
 8008f64:	4b6f      	ldr	r3, [pc, #444]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	e00f      	b.n	8008f8a <HAL_RCC_ClockConfig+0xc6>
 8008f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f72:	fa93 f3a3 	rbit	r3, r3
 8008f76:	667b      	str	r3, [r7, #100]	; 0x64
 8008f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8008f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f80:	fa93 f3a3 	rbit	r3, r3
 8008f84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f86:	4b67      	ldr	r3, [pc, #412]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f92:	fa92 f2a2 	rbit	r2, r2
 8008f96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008f98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f9a:	fab2 f282 	clz	r2, r2
 8008f9e:	b2d2      	uxtb	r2, r2
 8008fa0:	f042 0220 	orr.w	r2, r2, #32
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	f002 021f 	and.w	r2, r2, #31
 8008faa:	2101      	movs	r1, #1
 8008fac:	fa01 f202 	lsl.w	r2, r1, r2
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d17b      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e0f3      	b.n	80091a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d13c      	bne.n	800903c <HAL_RCC_ClockConfig+0x178>
 8008fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fca:	fa93 f3a3 	rbit	r3, r3
 8008fce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fd2:	fab3 f383 	clz	r3, r3
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	095b      	lsrs	r3, r3, #5
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d102      	bne.n	8008fec <HAL_RCC_ClockConfig+0x128>
 8008fe6:	4b4f      	ldr	r3, [pc, #316]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	e00f      	b.n	800900c <HAL_RCC_ClockConfig+0x148>
 8008fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ff0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ff2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ff4:	fa93 f3a3 	rbit	r3, r3
 8008ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ffe:	643b      	str	r3, [r7, #64]	; 0x40
 8009000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009002:	fa93 f3a3 	rbit	r3, r3
 8009006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009008:	4b46      	ldr	r3, [pc, #280]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009010:	63ba      	str	r2, [r7, #56]	; 0x38
 8009012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009014:	fa92 f2a2 	rbit	r2, r2
 8009018:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800901a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800901c:	fab2 f282 	clz	r2, r2
 8009020:	b2d2      	uxtb	r2, r2
 8009022:	f042 0220 	orr.w	r2, r2, #32
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	f002 021f 	and.w	r2, r2, #31
 800902c:	2101      	movs	r1, #1
 800902e:	fa01 f202 	lsl.w	r2, r1, r2
 8009032:	4013      	ands	r3, r2
 8009034:	2b00      	cmp	r3, #0
 8009036:	d13a      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009038:	2301      	movs	r3, #1
 800903a:	e0b2      	b.n	80091a2 <HAL_RCC_ClockConfig+0x2de>
 800903c:	2302      	movs	r3, #2
 800903e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	fa93 f3a3 	rbit	r3, r3
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800904a:	fab3 f383 	clz	r3, r3
 800904e:	b2db      	uxtb	r3, r3
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f043 0301 	orr.w	r3, r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b01      	cmp	r3, #1
 800905c:	d102      	bne.n	8009064 <HAL_RCC_ClockConfig+0x1a0>
 800905e:	4b31      	ldr	r3, [pc, #196]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	e00d      	b.n	8009080 <HAL_RCC_ClockConfig+0x1bc>
 8009064:	2302      	movs	r3, #2
 8009066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	fa93 f3a3 	rbit	r3, r3
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
 8009070:	2302      	movs	r3, #2
 8009072:	623b      	str	r3, [r7, #32]
 8009074:	6a3b      	ldr	r3, [r7, #32]
 8009076:	fa93 f3a3 	rbit	r3, r3
 800907a:	61fb      	str	r3, [r7, #28]
 800907c:	4b29      	ldr	r3, [pc, #164]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2202      	movs	r2, #2
 8009082:	61ba      	str	r2, [r7, #24]
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	fa92 f2a2 	rbit	r2, r2
 800908a:	617a      	str	r2, [r7, #20]
  return result;
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	fab2 f282 	clz	r2, r2
 8009092:	b2d2      	uxtb	r2, r2
 8009094:	f042 0220 	orr.w	r2, r2, #32
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	f002 021f 	and.w	r2, r2, #31
 800909e:	2101      	movs	r1, #1
 80090a0:	fa01 f202 	lsl.w	r2, r1, r2
 80090a4:	4013      	ands	r3, r2
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e079      	b.n	80091a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80090ae:	4b1d      	ldr	r3, [pc, #116]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f023 0203 	bic.w	r2, r3, #3
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	491a      	ldr	r1, [pc, #104]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090c0:	f7fd f852 	bl	8006168 <HAL_GetTick>
 80090c4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090c6:	e00a      	b.n	80090de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090c8:	f7fd f84e 	bl	8006168 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d901      	bls.n	80090de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e061      	b.n	80091a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090de:	4b11      	ldr	r3, [pc, #68]	; (8009124 <HAL_RCC_ClockConfig+0x260>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f003 020c 	and.w	r2, r3, #12
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d1eb      	bne.n	80090c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090f0:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <HAL_RCC_ClockConfig+0x25c>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0307 	and.w	r3, r3, #7
 80090f8:	683a      	ldr	r2, [r7, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d214      	bcs.n	8009128 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090fe:	4b08      	ldr	r3, [pc, #32]	; (8009120 <HAL_RCC_ClockConfig+0x25c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f023 0207 	bic.w	r2, r3, #7
 8009106:	4906      	ldr	r1, [pc, #24]	; (8009120 <HAL_RCC_ClockConfig+0x25c>)
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	4313      	orrs	r3, r2
 800910c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800910e:	4b04      	ldr	r3, [pc, #16]	; (8009120 <HAL_RCC_ClockConfig+0x25c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0307 	and.w	r3, r3, #7
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	d005      	beq.n	8009128 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e040      	b.n	80091a2 <HAL_RCC_ClockConfig+0x2de>
 8009120:	40022000 	.word	0x40022000
 8009124:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0304 	and.w	r3, r3, #4
 8009130:	2b00      	cmp	r3, #0
 8009132:	d008      	beq.n	8009146 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009134:	4b1d      	ldr	r3, [pc, #116]	; (80091ac <HAL_RCC_ClockConfig+0x2e8>)
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	491a      	ldr	r1, [pc, #104]	; (80091ac <HAL_RCC_ClockConfig+0x2e8>)
 8009142:	4313      	orrs	r3, r2
 8009144:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009152:	4b16      	ldr	r3, [pc, #88]	; (80091ac <HAL_RCC_ClockConfig+0x2e8>)
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	00db      	lsls	r3, r3, #3
 8009160:	4912      	ldr	r1, [pc, #72]	; (80091ac <HAL_RCC_ClockConfig+0x2e8>)
 8009162:	4313      	orrs	r3, r2
 8009164:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009166:	f000 f829 	bl	80091bc <HAL_RCC_GetSysClockFreq>
 800916a:	4601      	mov	r1, r0
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <HAL_RCC_ClockConfig+0x2e8>)
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009174:	22f0      	movs	r2, #240	; 0xf0
 8009176:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	fa92 f2a2 	rbit	r2, r2
 800917e:	60fa      	str	r2, [r7, #12]
  return result;
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	fab2 f282 	clz	r2, r2
 8009186:	b2d2      	uxtb	r2, r2
 8009188:	40d3      	lsrs	r3, r2
 800918a:	4a09      	ldr	r2, [pc, #36]	; (80091b0 <HAL_RCC_ClockConfig+0x2ec>)
 800918c:	5cd3      	ldrb	r3, [r2, r3]
 800918e:	fa21 f303 	lsr.w	r3, r1, r3
 8009192:	4a08      	ldr	r2, [pc, #32]	; (80091b4 <HAL_RCC_ClockConfig+0x2f0>)
 8009194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8009196:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <HAL_RCC_ClockConfig+0x2f4>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f7fc ffa0 	bl	80060e0 <HAL_InitTick>
  
  return HAL_OK;
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3778      	adds	r7, #120	; 0x78
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	40021000 	.word	0x40021000
 80091b0:	0800cfa4 	.word	0x0800cfa4
 80091b4:	20000034 	.word	0x20000034
 80091b8:	20000038 	.word	0x20000038

080091bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	b08b      	sub	sp, #44	; 0x2c
 80091c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
 80091c6:	2300      	movs	r3, #0
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	2300      	movs	r3, #0
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80091d6:	4b29      	ldr	r3, [pc, #164]	; (800927c <HAL_RCC_GetSysClockFreq+0xc0>)
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	f003 030c 	and.w	r3, r3, #12
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	d002      	beq.n	80091ec <HAL_RCC_GetSysClockFreq+0x30>
 80091e6:	2b08      	cmp	r3, #8
 80091e8:	d003      	beq.n	80091f2 <HAL_RCC_GetSysClockFreq+0x36>
 80091ea:	e03c      	b.n	8009266 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80091ec:	4b24      	ldr	r3, [pc, #144]	; (8009280 <HAL_RCC_GetSysClockFreq+0xc4>)
 80091ee:	623b      	str	r3, [r7, #32]
      break;
 80091f0:	e03c      	b.n	800926c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80091f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80091fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	fa92 f2a2 	rbit	r2, r2
 8009204:	607a      	str	r2, [r7, #4]
  return result;
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	fab2 f282 	clz	r2, r2
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	40d3      	lsrs	r3, r2
 8009210:	4a1c      	ldr	r2, [pc, #112]	; (8009284 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009212:	5cd3      	ldrb	r3, [r2, r3]
 8009214:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009216:	4b19      	ldr	r3, [pc, #100]	; (800927c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	220f      	movs	r2, #15
 8009220:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	fa92 f2a2 	rbit	r2, r2
 8009228:	60fa      	str	r2, [r7, #12]
  return result;
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	fab2 f282 	clz	r2, r2
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	40d3      	lsrs	r3, r2
 8009234:	4a14      	ldr	r2, [pc, #80]	; (8009288 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009236:	5cd3      	ldrb	r3, [r2, r3]
 8009238:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d008      	beq.n	8009256 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009244:	4a0e      	ldr	r2, [pc, #56]	; (8009280 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	fbb2 f2f3 	udiv	r2, r2, r3
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	fb02 f303 	mul.w	r3, r2, r3
 8009252:	627b      	str	r3, [r7, #36]	; 0x24
 8009254:	e004      	b.n	8009260 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	4a0c      	ldr	r2, [pc, #48]	; (800928c <HAL_RCC_GetSysClockFreq+0xd0>)
 800925a:	fb02 f303 	mul.w	r3, r2, r3
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	623b      	str	r3, [r7, #32]
      break;
 8009264:	e002      	b.n	800926c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009266:	4b06      	ldr	r3, [pc, #24]	; (8009280 <HAL_RCC_GetSysClockFreq+0xc4>)
 8009268:	623b      	str	r3, [r7, #32]
      break;
 800926a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800926c:	6a3b      	ldr	r3, [r7, #32]
}
 800926e:	4618      	mov	r0, r3
 8009270:	372c      	adds	r7, #44	; 0x2c
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	40021000 	.word	0x40021000
 8009280:	007a1200 	.word	0x007a1200
 8009284:	0800cfb4 	.word	0x0800cfb4
 8009288:	0800cfc4 	.word	0x0800cfc4
 800928c:	003d0900 	.word	0x003d0900

08009290 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b092      	sub	sp, #72	; 0x48
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800929c:	2300      	movs	r3, #0
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80092a0:	2300      	movs	r3, #0
 80092a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 80d4 	beq.w	800945c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092b4:	4b4e      	ldr	r3, [pc, #312]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10e      	bne.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092c0:	4b4b      	ldr	r3, [pc, #300]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092c2:	69db      	ldr	r3, [r3, #28]
 80092c4:	4a4a      	ldr	r2, [pc, #296]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ca:	61d3      	str	r3, [r2, #28]
 80092cc:	4b48      	ldr	r3, [pc, #288]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80092ce:	69db      	ldr	r3, [r3, #28]
 80092d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d4:	60bb      	str	r3, [r7, #8]
 80092d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80092d8:	2301      	movs	r3, #1
 80092da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092de:	4b45      	ldr	r3, [pc, #276]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d118      	bne.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092ea:	4b42      	ldr	r3, [pc, #264]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a41      	ldr	r2, [pc, #260]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80092f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092f6:	f7fc ff37 	bl	8006168 <HAL_GetTick>
 80092fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092fc:	e008      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092fe:	f7fc ff33 	bl	8006168 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	2b64      	cmp	r3, #100	; 0x64
 800930a:	d901      	bls.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e169      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009310:	4b38      	ldr	r3, [pc, #224]	; (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009318:	2b00      	cmp	r3, #0
 800931a:	d0f0      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800931c:	4b34      	ldr	r3, [pc, #208]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009324:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 8084 	beq.w	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009336:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009338:	429a      	cmp	r2, r3
 800933a:	d07c      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800933c:	4b2c      	ldr	r3, [pc, #176]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800934a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	fa93 f3a3 	rbit	r3, r3
 8009352:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009356:	fab3 f383 	clz	r3, r3
 800935a:	b2db      	uxtb	r3, r3
 800935c:	461a      	mov	r2, r3
 800935e:	4b26      	ldr	r3, [pc, #152]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	461a      	mov	r2, r3
 8009366:	2301      	movs	r3, #1
 8009368:	6013      	str	r3, [r2, #0]
 800936a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800936e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	fa93 f3a3 	rbit	r3, r3
 8009376:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800937a:	fab3 f383 	clz	r3, r3
 800937e:	b2db      	uxtb	r3, r3
 8009380:	461a      	mov	r2, r3
 8009382:	4b1d      	ldr	r3, [pc, #116]	; (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	461a      	mov	r2, r3
 800938a:	2300      	movs	r3, #0
 800938c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800938e:	4a18      	ldr	r2, [pc, #96]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009392:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	d04b      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800939e:	f7fc fee3 	bl	8006168 <HAL_GetTick>
 80093a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093a4:	e00a      	b.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a6:	f7fc fedf 	bl	8006168 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d901      	bls.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e113      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80093bc:	2302      	movs	r3, #2
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c2:	fa93 f3a3 	rbit	r3, r3
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
 80093c8:	2302      	movs	r3, #2
 80093ca:	623b      	str	r3, [r7, #32]
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	fa93 f3a3 	rbit	r3, r3
 80093d2:	61fb      	str	r3, [r7, #28]
  return result;
 80093d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093d6:	fab3 f383 	clz	r3, r3
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	095b      	lsrs	r3, r3, #5
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	f043 0302 	orr.w	r3, r3, #2
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d108      	bne.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80093ea:	4b01      	ldr	r3, [pc, #4]	; (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	e00d      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80093f0:	40021000 	.word	0x40021000
 80093f4:	40007000 	.word	0x40007000
 80093f8:	10908100 	.word	0x10908100
 80093fc:	2302      	movs	r3, #2
 80093fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	fa93 f3a3 	rbit	r3, r3
 8009406:	617b      	str	r3, [r7, #20]
 8009408:	4b78      	ldr	r3, [pc, #480]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	2202      	movs	r2, #2
 800940e:	613a      	str	r2, [r7, #16]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	fa92 f2a2 	rbit	r2, r2
 8009416:	60fa      	str	r2, [r7, #12]
  return result;
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	fab2 f282 	clz	r2, r2
 800941e:	b2d2      	uxtb	r2, r2
 8009420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009424:	b2d2      	uxtb	r2, r2
 8009426:	f002 021f 	and.w	r2, r2, #31
 800942a:	2101      	movs	r1, #1
 800942c:	fa01 f202 	lsl.w	r2, r1, r2
 8009430:	4013      	ands	r3, r2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d0b7      	beq.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009436:	4b6d      	ldr	r3, [pc, #436]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009438:	6a1b      	ldr	r3, [r3, #32]
 800943a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	496a      	ldr	r1, [pc, #424]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009444:	4313      	orrs	r3, r2
 8009446:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009448:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800944c:	2b01      	cmp	r3, #1
 800944e:	d105      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009450:	4b66      	ldr	r3, [pc, #408]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009452:	69db      	ldr	r3, [r3, #28]
 8009454:	4a65      	ldr	r2, [pc, #404]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009456:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800945a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d008      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009468:	4b60      	ldr	r3, [pc, #384]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800946a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800946c:	f023 0203 	bic.w	r2, r3, #3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	495d      	ldr	r1, [pc, #372]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009476:	4313      	orrs	r3, r2
 8009478:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d008      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009486:	4b59      	ldr	r3, [pc, #356]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	4956      	ldr	r1, [pc, #344]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009494:	4313      	orrs	r3, r2
 8009496:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d008      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094a4:	4b51      	ldr	r3, [pc, #324]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	494e      	ldr	r1, [pc, #312]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0320 	and.w	r3, r3, #32
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094c2:	4b4a      	ldr	r3, [pc, #296]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80094c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c6:	f023 0210 	bic.w	r2, r3, #16
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	4947      	ldr	r1, [pc, #284]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d008      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80094e0:	4b42      	ldr	r3, [pc, #264]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ec:	493f      	ldr	r1, [pc, #252]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d008      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094fe:	4b3b      	ldr	r3, [pc, #236]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	f023 0220 	bic.w	r2, r3, #32
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	4938      	ldr	r1, [pc, #224]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800950c:	4313      	orrs	r3, r2
 800950e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0308 	and.w	r3, r3, #8
 8009518:	2b00      	cmp	r3, #0
 800951a:	d008      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800951c:	4b33      	ldr	r3, [pc, #204]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800951e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	695b      	ldr	r3, [r3, #20]
 8009528:	4930      	ldr	r1, [pc, #192]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800952a:	4313      	orrs	r3, r2
 800952c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0310 	and.w	r3, r3, #16
 8009536:	2b00      	cmp	r3, #0
 8009538:	d008      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800953a:	4b2c      	ldr	r3, [pc, #176]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	4929      	ldr	r1, [pc, #164]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009548:	4313      	orrs	r3, r2
 800954a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009554:	2b00      	cmp	r3, #0
 8009556:	d008      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009558:	4b24      	ldr	r3, [pc, #144]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009564:	4921      	ldr	r1, [pc, #132]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009566:	4313      	orrs	r3, r2
 8009568:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009572:	2b00      	cmp	r3, #0
 8009574:	d008      	beq.n	8009588 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009576:	4b1d      	ldr	r3, [pc, #116]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009582:	491a      	ldr	r1, [pc, #104]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009584:	4313      	orrs	r3, r2
 8009586:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009590:	2b00      	cmp	r3, #0
 8009592:	d008      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8009594:	4b15      	ldr	r3, [pc, #84]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009598:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a0:	4912      	ldr	r1, [pc, #72]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d008      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80095b2:	4b0e      	ldr	r3, [pc, #56]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80095b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	490b      	ldr	r1, [pc, #44]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d008      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80095d0:	4b06      	ldr	r3, [pc, #24]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095dc:	4903      	ldr	r1, [pc, #12]	; (80095ec <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80095de:	4313      	orrs	r3, r2
 80095e0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3748      	adds	r7, #72	; 0x48
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	40021000 	.word	0x40021000

080095f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e09d      	b.n	800973e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009606:	2b00      	cmp	r3, #0
 8009608:	d108      	bne.n	800961c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009612:	d009      	beq.n	8009628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	61da      	str	r2, [r3, #28]
 800961a:	e005      	b.n	8009628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f7fc fb22 	bl	8005c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800965e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009668:	d902      	bls.n	8009670 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800966a:	2300      	movs	r3, #0
 800966c:	60fb      	str	r3, [r7, #12]
 800966e:	e002      	b.n	8009676 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009674:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800967e:	d007      	beq.n	8009690 <HAL_SPI_Init+0xa0>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009688:	d002      	beq.n	8009690 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	431a      	orrs	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096d2:	ea42 0103 	orr.w	r1, r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	699b      	ldr	r3, [r3, #24]
 80096ea:	0c1b      	lsrs	r3, r3, #16
 80096ec:	f003 0204 	and.w	r2, r3, #4
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	f003 0310 	and.w	r3, r3, #16
 80096f8:	431a      	orrs	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096fe:	f003 0308 	and.w	r3, r3, #8
 8009702:	431a      	orrs	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800970c:	ea42 0103 	orr.w	r1, r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69da      	ldr	r2, [r3, #28]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800972c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e049      	b.n	80097ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	d106      	bne.n	8009772 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7fc faf9 	bl	8005d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2202      	movs	r2, #2
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3304      	adds	r3, #4
 8009782:	4619      	mov	r1, r3
 8009784:	4610      	mov	r0, r2
 8009786:	f000 fa15 	bl	8009bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b01      	cmp	r3, #1
 8009806:	d001      	beq.n	800980c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e04a      	b.n	80098a2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
 8009822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a21      	ldr	r2, [pc, #132]	; (80098b0 <HAL_TIM_Base_Start_IT+0xbc>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d018      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009836:	d013      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a1d      	ldr	r2, [pc, #116]	; (80098b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00e      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a1c      	ldr	r2, [pc, #112]	; (80098b8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d009      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a1a      	ldr	r2, [pc, #104]	; (80098bc <HAL_TIM_Base_Start_IT+0xc8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <HAL_TIM_Base_Start_IT+0x6c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a19      	ldr	r2, [pc, #100]	; (80098c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d115      	bne.n	800988c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689a      	ldr	r2, [r3, #8]
 8009866:	4b17      	ldr	r3, [pc, #92]	; (80098c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009868:	4013      	ands	r3, r2
 800986a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b06      	cmp	r3, #6
 8009870:	d015      	beq.n	800989e <HAL_TIM_Base_Start_IT+0xaa>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009878:	d011      	beq.n	800989e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0201 	orr.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988a:	e008      	b.n	800989e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	e000      	b.n	80098a0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	40012c00 	.word	0x40012c00
 80098b4:	40000400 	.word	0x40000400
 80098b8:	40000800 	.word	0x40000800
 80098bc:	40013400 	.word	0x40013400
 80098c0:	40014000 	.word	0x40014000
 80098c4:	00010007 	.word	0x00010007

080098c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68da      	ldr	r2, [r3, #12]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f022 0201 	bic.w	r2, r2, #1
 80098de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6a1a      	ldr	r2, [r3, #32]
 80098e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80098ea:	4013      	ands	r3, r2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10f      	bne.n	8009910 <HAL_TIM_Base_Stop_IT+0x48>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	6a1a      	ldr	r2, [r3, #32]
 80098f6:	f240 4344 	movw	r3, #1092	; 0x444
 80098fa:	4013      	ands	r3, r2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d107      	bne.n	8009910 <HAL_TIM_Base_Stop_IT+0x48>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0201 	bic.w	r2, r2, #1
 800990e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	370c      	adds	r7, #12
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b02      	cmp	r3, #2
 800993a:	d122      	bne.n	8009982 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b02      	cmp	r3, #2
 8009948:	d11b      	bne.n	8009982 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f06f 0202 	mvn.w	r2, #2
 8009952:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	f003 0303 	and.w	r3, r3, #3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d003      	beq.n	8009970 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f905 	bl	8009b78 <HAL_TIM_IC_CaptureCallback>
 800996e:	e005      	b.n	800997c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f8f7 	bl	8009b64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f908 	bl	8009b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	f003 0304 	and.w	r3, r3, #4
 800998c:	2b04      	cmp	r3, #4
 800998e:	d122      	bne.n	80099d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	f003 0304 	and.w	r3, r3, #4
 800999a:	2b04      	cmp	r3, #4
 800999c:	d11b      	bne.n	80099d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f06f 0204 	mvn.w	r2, #4
 80099a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2202      	movs	r2, #2
 80099ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 f8db 	bl	8009b78 <HAL_TIM_IC_CaptureCallback>
 80099c2:	e005      	b.n	80099d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f8cd 	bl	8009b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f8de 	bl	8009b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d122      	bne.n	8009a2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	f003 0308 	and.w	r3, r3, #8
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d11b      	bne.n	8009a2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f06f 0208 	mvn.w	r2, #8
 80099fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2204      	movs	r2, #4
 8009a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	69db      	ldr	r3, [r3, #28]
 8009a08:	f003 0303 	and.w	r3, r3, #3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f000 f8b1 	bl	8009b78 <HAL_TIM_IC_CaptureCallback>
 8009a16:	e005      	b.n	8009a24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f8a3 	bl	8009b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f8b4 	bl	8009b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	f003 0310 	and.w	r3, r3, #16
 8009a34:	2b10      	cmp	r3, #16
 8009a36:	d122      	bne.n	8009a7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	f003 0310 	and.w	r3, r3, #16
 8009a42:	2b10      	cmp	r3, #16
 8009a44:	d11b      	bne.n	8009a7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f06f 0210 	mvn.w	r2, #16
 8009a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2208      	movs	r2, #8
 8009a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	69db      	ldr	r3, [r3, #28]
 8009a5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f887 	bl	8009b78 <HAL_TIM_IC_CaptureCallback>
 8009a6a:	e005      	b.n	8009a78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f879 	bl	8009b64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f88a 	bl	8009b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d10e      	bne.n	8009aaa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d107      	bne.n	8009aaa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f06f 0201 	mvn.w	r2, #1
 8009aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7fa fffd 	bl	8004aa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab4:	2b80      	cmp	r3, #128	; 0x80
 8009ab6:	d10e      	bne.n	8009ad6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac2:	2b80      	cmp	r3, #128	; 0x80
 8009ac4:	d107      	bne.n	8009ad6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f909 	bl	8009ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae4:	d10e      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af0:	2b80      	cmp	r3, #128	; 0x80
 8009af2:	d107      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f8fc 	bl	8009cfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0e:	2b40      	cmp	r3, #64	; 0x40
 8009b10:	d10e      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1c:	2b40      	cmp	r3, #64	; 0x40
 8009b1e:	d107      	bne.n	8009b30 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f838 	bl	8009ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f003 0320 	and.w	r3, r3, #32
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d10e      	bne.n	8009b5c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b20      	cmp	r3, #32
 8009b4a:	d107      	bne.n	8009b5c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f06f 0220 	mvn.w	r2, #32
 8009b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f8bc 	bl	8009cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ba8:	bf00      	nop
 8009baa:	370c      	adds	r7, #12
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a3c      	ldr	r2, [pc, #240]	; (8009cb8 <TIM_Base_SetConfig+0x104>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d00f      	beq.n	8009bec <TIM_Base_SetConfig+0x38>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bd2:	d00b      	beq.n	8009bec <TIM_Base_SetConfig+0x38>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a39      	ldr	r2, [pc, #228]	; (8009cbc <TIM_Base_SetConfig+0x108>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d007      	beq.n	8009bec <TIM_Base_SetConfig+0x38>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a38      	ldr	r2, [pc, #224]	; (8009cc0 <TIM_Base_SetConfig+0x10c>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d003      	beq.n	8009bec <TIM_Base_SetConfig+0x38>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a37      	ldr	r2, [pc, #220]	; (8009cc4 <TIM_Base_SetConfig+0x110>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d108      	bne.n	8009bfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a2d      	ldr	r2, [pc, #180]	; (8009cb8 <TIM_Base_SetConfig+0x104>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d01b      	beq.n	8009c3e <TIM_Base_SetConfig+0x8a>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c0c:	d017      	beq.n	8009c3e <TIM_Base_SetConfig+0x8a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a2a      	ldr	r2, [pc, #168]	; (8009cbc <TIM_Base_SetConfig+0x108>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d013      	beq.n	8009c3e <TIM_Base_SetConfig+0x8a>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a29      	ldr	r2, [pc, #164]	; (8009cc0 <TIM_Base_SetConfig+0x10c>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d00f      	beq.n	8009c3e <TIM_Base_SetConfig+0x8a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a28      	ldr	r2, [pc, #160]	; (8009cc4 <TIM_Base_SetConfig+0x110>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d00b      	beq.n	8009c3e <TIM_Base_SetConfig+0x8a>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a27      	ldr	r2, [pc, #156]	; (8009cc8 <TIM_Base_SetConfig+0x114>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d007      	beq.n	8009c3e <TIM_Base_SetConfig+0x8a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a26      	ldr	r2, [pc, #152]	; (8009ccc <TIM_Base_SetConfig+0x118>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d003      	beq.n	8009c3e <TIM_Base_SetConfig+0x8a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a25      	ldr	r2, [pc, #148]	; (8009cd0 <TIM_Base_SetConfig+0x11c>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d108      	bne.n	8009c50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a10      	ldr	r2, [pc, #64]	; (8009cb8 <TIM_Base_SetConfig+0x104>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d00f      	beq.n	8009c9c <TIM_Base_SetConfig+0xe8>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a11      	ldr	r2, [pc, #68]	; (8009cc4 <TIM_Base_SetConfig+0x110>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d00b      	beq.n	8009c9c <TIM_Base_SetConfig+0xe8>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a10      	ldr	r2, [pc, #64]	; (8009cc8 <TIM_Base_SetConfig+0x114>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d007      	beq.n	8009c9c <TIM_Base_SetConfig+0xe8>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a0f      	ldr	r2, [pc, #60]	; (8009ccc <TIM_Base_SetConfig+0x118>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d003      	beq.n	8009c9c <TIM_Base_SetConfig+0xe8>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a0e      	ldr	r2, [pc, #56]	; (8009cd0 <TIM_Base_SetConfig+0x11c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d103      	bne.n	8009ca4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	691a      	ldr	r2, [r3, #16]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	615a      	str	r2, [r3, #20]
}
 8009caa:	bf00      	nop
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr
 8009cb6:	bf00      	nop
 8009cb8:	40012c00 	.word	0x40012c00
 8009cbc:	40000400 	.word	0x40000400
 8009cc0:	40000800 	.word	0x40000800
 8009cc4:	40013400 	.word	0x40013400
 8009cc8:	40014000 	.word	0x40014000
 8009ccc:	40014400 	.word	0x40014400
 8009cd0:	40014800 	.word	0x40014800

08009cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <__errno>:
 8009d10:	4b01      	ldr	r3, [pc, #4]	; (8009d18 <__errno+0x8>)
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20000040 	.word	0x20000040

08009d1c <__libc_init_array>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	4d0d      	ldr	r5, [pc, #52]	; (8009d54 <__libc_init_array+0x38>)
 8009d20:	4c0d      	ldr	r4, [pc, #52]	; (8009d58 <__libc_init_array+0x3c>)
 8009d22:	1b64      	subs	r4, r4, r5
 8009d24:	10a4      	asrs	r4, r4, #2
 8009d26:	2600      	movs	r6, #0
 8009d28:	42a6      	cmp	r6, r4
 8009d2a:	d109      	bne.n	8009d40 <__libc_init_array+0x24>
 8009d2c:	4d0b      	ldr	r5, [pc, #44]	; (8009d5c <__libc_init_array+0x40>)
 8009d2e:	4c0c      	ldr	r4, [pc, #48]	; (8009d60 <__libc_init_array+0x44>)
 8009d30:	f002 fb2c 	bl	800c38c <_init>
 8009d34:	1b64      	subs	r4, r4, r5
 8009d36:	10a4      	asrs	r4, r4, #2
 8009d38:	2600      	movs	r6, #0
 8009d3a:	42a6      	cmp	r6, r4
 8009d3c:	d105      	bne.n	8009d4a <__libc_init_array+0x2e>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d44:	4798      	blx	r3
 8009d46:	3601      	adds	r6, #1
 8009d48:	e7ee      	b.n	8009d28 <__libc_init_array+0xc>
 8009d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d4e:	4798      	blx	r3
 8009d50:	3601      	adds	r6, #1
 8009d52:	e7f2      	b.n	8009d3a <__libc_init_array+0x1e>
 8009d54:	0800d250 	.word	0x0800d250
 8009d58:	0800d250 	.word	0x0800d250
 8009d5c:	0800d250 	.word	0x0800d250
 8009d60:	0800d254 	.word	0x0800d254

08009d64 <memcpy>:
 8009d64:	440a      	add	r2, r1
 8009d66:	4291      	cmp	r1, r2
 8009d68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009d6c:	d100      	bne.n	8009d70 <memcpy+0xc>
 8009d6e:	4770      	bx	lr
 8009d70:	b510      	push	{r4, lr}
 8009d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d7a:	4291      	cmp	r1, r2
 8009d7c:	d1f9      	bne.n	8009d72 <memcpy+0xe>
 8009d7e:	bd10      	pop	{r4, pc}

08009d80 <memset>:
 8009d80:	4402      	add	r2, r0
 8009d82:	4603      	mov	r3, r0
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d100      	bne.n	8009d8a <memset+0xa>
 8009d88:	4770      	bx	lr
 8009d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d8e:	e7f9      	b.n	8009d84 <memset+0x4>

08009d90 <siprintf>:
 8009d90:	b40e      	push	{r1, r2, r3}
 8009d92:	b500      	push	{lr}
 8009d94:	b09c      	sub	sp, #112	; 0x70
 8009d96:	ab1d      	add	r3, sp, #116	; 0x74
 8009d98:	9002      	str	r0, [sp, #8]
 8009d9a:	9006      	str	r0, [sp, #24]
 8009d9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009da0:	4809      	ldr	r0, [pc, #36]	; (8009dc8 <siprintf+0x38>)
 8009da2:	9107      	str	r1, [sp, #28]
 8009da4:	9104      	str	r1, [sp, #16]
 8009da6:	4909      	ldr	r1, [pc, #36]	; (8009dcc <siprintf+0x3c>)
 8009da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dac:	9105      	str	r1, [sp, #20]
 8009dae:	6800      	ldr	r0, [r0, #0]
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	a902      	add	r1, sp, #8
 8009db4:	f000 f87a 	bl	8009eac <_svfiprintf_r>
 8009db8:	9b02      	ldr	r3, [sp, #8]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	b01c      	add	sp, #112	; 0x70
 8009dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc4:	b003      	add	sp, #12
 8009dc6:	4770      	bx	lr
 8009dc8:	20000040 	.word	0x20000040
 8009dcc:	ffff0208 	.word	0xffff0208

08009dd0 <strncpy>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	3901      	subs	r1, #1
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	b132      	cbz	r2, 8009de6 <strncpy+0x16>
 8009dd8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ddc:	f803 4b01 	strb.w	r4, [r3], #1
 8009de0:	3a01      	subs	r2, #1
 8009de2:	2c00      	cmp	r4, #0
 8009de4:	d1f7      	bne.n	8009dd6 <strncpy+0x6>
 8009de6:	441a      	add	r2, r3
 8009de8:	2100      	movs	r1, #0
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d100      	bne.n	8009df0 <strncpy+0x20>
 8009dee:	bd10      	pop	{r4, pc}
 8009df0:	f803 1b01 	strb.w	r1, [r3], #1
 8009df4:	e7f9      	b.n	8009dea <strncpy+0x1a>

08009df6 <__ssputs_r>:
 8009df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dfa:	688e      	ldr	r6, [r1, #8]
 8009dfc:	429e      	cmp	r6, r3
 8009dfe:	4682      	mov	sl, r0
 8009e00:	460c      	mov	r4, r1
 8009e02:	4690      	mov	r8, r2
 8009e04:	461f      	mov	r7, r3
 8009e06:	d838      	bhi.n	8009e7a <__ssputs_r+0x84>
 8009e08:	898a      	ldrh	r2, [r1, #12]
 8009e0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e0e:	d032      	beq.n	8009e76 <__ssputs_r+0x80>
 8009e10:	6825      	ldr	r5, [r4, #0]
 8009e12:	6909      	ldr	r1, [r1, #16]
 8009e14:	eba5 0901 	sub.w	r9, r5, r1
 8009e18:	6965      	ldr	r5, [r4, #20]
 8009e1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e22:	3301      	adds	r3, #1
 8009e24:	444b      	add	r3, r9
 8009e26:	106d      	asrs	r5, r5, #1
 8009e28:	429d      	cmp	r5, r3
 8009e2a:	bf38      	it	cc
 8009e2c:	461d      	movcc	r5, r3
 8009e2e:	0553      	lsls	r3, r2, #21
 8009e30:	d531      	bpl.n	8009e96 <__ssputs_r+0xa0>
 8009e32:	4629      	mov	r1, r5
 8009e34:	f000 fb54 	bl	800a4e0 <_malloc_r>
 8009e38:	4606      	mov	r6, r0
 8009e3a:	b950      	cbnz	r0, 8009e52 <__ssputs_r+0x5c>
 8009e3c:	230c      	movs	r3, #12
 8009e3e:	f8ca 3000 	str.w	r3, [sl]
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e52:	6921      	ldr	r1, [r4, #16]
 8009e54:	464a      	mov	r2, r9
 8009e56:	f7ff ff85 	bl	8009d64 <memcpy>
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	6126      	str	r6, [r4, #16]
 8009e68:	6165      	str	r5, [r4, #20]
 8009e6a:	444e      	add	r6, r9
 8009e6c:	eba5 0509 	sub.w	r5, r5, r9
 8009e70:	6026      	str	r6, [r4, #0]
 8009e72:	60a5      	str	r5, [r4, #8]
 8009e74:	463e      	mov	r6, r7
 8009e76:	42be      	cmp	r6, r7
 8009e78:	d900      	bls.n	8009e7c <__ssputs_r+0x86>
 8009e7a:	463e      	mov	r6, r7
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	4632      	mov	r2, r6
 8009e80:	4641      	mov	r1, r8
 8009e82:	f000 faa7 	bl	800a3d4 <memmove>
 8009e86:	68a3      	ldr	r3, [r4, #8]
 8009e88:	1b9b      	subs	r3, r3, r6
 8009e8a:	60a3      	str	r3, [r4, #8]
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	4433      	add	r3, r6
 8009e90:	6023      	str	r3, [r4, #0]
 8009e92:	2000      	movs	r0, #0
 8009e94:	e7db      	b.n	8009e4e <__ssputs_r+0x58>
 8009e96:	462a      	mov	r2, r5
 8009e98:	f000 fb96 	bl	800a5c8 <_realloc_r>
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d1e1      	bne.n	8009e66 <__ssputs_r+0x70>
 8009ea2:	6921      	ldr	r1, [r4, #16]
 8009ea4:	4650      	mov	r0, sl
 8009ea6:	f000 faaf 	bl	800a408 <_free_r>
 8009eaa:	e7c7      	b.n	8009e3c <__ssputs_r+0x46>

08009eac <_svfiprintf_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	4698      	mov	r8, r3
 8009eb2:	898b      	ldrh	r3, [r1, #12]
 8009eb4:	061b      	lsls	r3, r3, #24
 8009eb6:	b09d      	sub	sp, #116	; 0x74
 8009eb8:	4607      	mov	r7, r0
 8009eba:	460d      	mov	r5, r1
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	d50e      	bpl.n	8009ede <_svfiprintf_r+0x32>
 8009ec0:	690b      	ldr	r3, [r1, #16]
 8009ec2:	b963      	cbnz	r3, 8009ede <_svfiprintf_r+0x32>
 8009ec4:	2140      	movs	r1, #64	; 0x40
 8009ec6:	f000 fb0b 	bl	800a4e0 <_malloc_r>
 8009eca:	6028      	str	r0, [r5, #0]
 8009ecc:	6128      	str	r0, [r5, #16]
 8009ece:	b920      	cbnz	r0, 8009eda <_svfiprintf_r+0x2e>
 8009ed0:	230c      	movs	r3, #12
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ed8:	e0d1      	b.n	800a07e <_svfiprintf_r+0x1d2>
 8009eda:	2340      	movs	r3, #64	; 0x40
 8009edc:	616b      	str	r3, [r5, #20]
 8009ede:	2300      	movs	r3, #0
 8009ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee2:	2320      	movs	r3, #32
 8009ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eec:	2330      	movs	r3, #48	; 0x30
 8009eee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a098 <_svfiprintf_r+0x1ec>
 8009ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ef6:	f04f 0901 	mov.w	r9, #1
 8009efa:	4623      	mov	r3, r4
 8009efc:	469a      	mov	sl, r3
 8009efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f02:	b10a      	cbz	r2, 8009f08 <_svfiprintf_r+0x5c>
 8009f04:	2a25      	cmp	r2, #37	; 0x25
 8009f06:	d1f9      	bne.n	8009efc <_svfiprintf_r+0x50>
 8009f08:	ebba 0b04 	subs.w	fp, sl, r4
 8009f0c:	d00b      	beq.n	8009f26 <_svfiprintf_r+0x7a>
 8009f0e:	465b      	mov	r3, fp
 8009f10:	4622      	mov	r2, r4
 8009f12:	4629      	mov	r1, r5
 8009f14:	4638      	mov	r0, r7
 8009f16:	f7ff ff6e 	bl	8009df6 <__ssputs_r>
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f000 80aa 	beq.w	800a074 <_svfiprintf_r+0x1c8>
 8009f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f22:	445a      	add	r2, fp
 8009f24:	9209      	str	r2, [sp, #36]	; 0x24
 8009f26:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f000 80a2 	beq.w	800a074 <_svfiprintf_r+0x1c8>
 8009f30:	2300      	movs	r3, #0
 8009f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f3a:	f10a 0a01 	add.w	sl, sl, #1
 8009f3e:	9304      	str	r3, [sp, #16]
 8009f40:	9307      	str	r3, [sp, #28]
 8009f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f46:	931a      	str	r3, [sp, #104]	; 0x68
 8009f48:	4654      	mov	r4, sl
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f50:	4851      	ldr	r0, [pc, #324]	; (800a098 <_svfiprintf_r+0x1ec>)
 8009f52:	f7f6 f93d 	bl	80001d0 <memchr>
 8009f56:	9a04      	ldr	r2, [sp, #16]
 8009f58:	b9d8      	cbnz	r0, 8009f92 <_svfiprintf_r+0xe6>
 8009f5a:	06d0      	lsls	r0, r2, #27
 8009f5c:	bf44      	itt	mi
 8009f5e:	2320      	movmi	r3, #32
 8009f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f64:	0711      	lsls	r1, r2, #28
 8009f66:	bf44      	itt	mi
 8009f68:	232b      	movmi	r3, #43	; 0x2b
 8009f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f72:	2b2a      	cmp	r3, #42	; 0x2a
 8009f74:	d015      	beq.n	8009fa2 <_svfiprintf_r+0xf6>
 8009f76:	9a07      	ldr	r2, [sp, #28]
 8009f78:	4654      	mov	r4, sl
 8009f7a:	2000      	movs	r0, #0
 8009f7c:	f04f 0c0a 	mov.w	ip, #10
 8009f80:	4621      	mov	r1, r4
 8009f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f86:	3b30      	subs	r3, #48	; 0x30
 8009f88:	2b09      	cmp	r3, #9
 8009f8a:	d94e      	bls.n	800a02a <_svfiprintf_r+0x17e>
 8009f8c:	b1b0      	cbz	r0, 8009fbc <_svfiprintf_r+0x110>
 8009f8e:	9207      	str	r2, [sp, #28]
 8009f90:	e014      	b.n	8009fbc <_svfiprintf_r+0x110>
 8009f92:	eba0 0308 	sub.w	r3, r0, r8
 8009f96:	fa09 f303 	lsl.w	r3, r9, r3
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	46a2      	mov	sl, r4
 8009fa0:	e7d2      	b.n	8009f48 <_svfiprintf_r+0x9c>
 8009fa2:	9b03      	ldr	r3, [sp, #12]
 8009fa4:	1d19      	adds	r1, r3, #4
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	9103      	str	r1, [sp, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bfbb      	ittet	lt
 8009fae:	425b      	neglt	r3, r3
 8009fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb4:	9307      	strge	r3, [sp, #28]
 8009fb6:	9307      	strlt	r3, [sp, #28]
 8009fb8:	bfb8      	it	lt
 8009fba:	9204      	strlt	r2, [sp, #16]
 8009fbc:	7823      	ldrb	r3, [r4, #0]
 8009fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8009fc0:	d10c      	bne.n	8009fdc <_svfiprintf_r+0x130>
 8009fc2:	7863      	ldrb	r3, [r4, #1]
 8009fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8009fc6:	d135      	bne.n	800a034 <_svfiprintf_r+0x188>
 8009fc8:	9b03      	ldr	r3, [sp, #12]
 8009fca:	1d1a      	adds	r2, r3, #4
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	9203      	str	r2, [sp, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	bfb8      	it	lt
 8009fd4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009fd8:	3402      	adds	r4, #2
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0a8 <_svfiprintf_r+0x1fc>
 8009fe0:	7821      	ldrb	r1, [r4, #0]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	4650      	mov	r0, sl
 8009fe6:	f7f6 f8f3 	bl	80001d0 <memchr>
 8009fea:	b140      	cbz	r0, 8009ffe <_svfiprintf_r+0x152>
 8009fec:	2340      	movs	r3, #64	; 0x40
 8009fee:	eba0 000a 	sub.w	r0, r0, sl
 8009ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8009ff6:	9b04      	ldr	r3, [sp, #16]
 8009ff8:	4303      	orrs	r3, r0
 8009ffa:	3401      	adds	r4, #1
 8009ffc:	9304      	str	r3, [sp, #16]
 8009ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a002:	4826      	ldr	r0, [pc, #152]	; (800a09c <_svfiprintf_r+0x1f0>)
 800a004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a008:	2206      	movs	r2, #6
 800a00a:	f7f6 f8e1 	bl	80001d0 <memchr>
 800a00e:	2800      	cmp	r0, #0
 800a010:	d038      	beq.n	800a084 <_svfiprintf_r+0x1d8>
 800a012:	4b23      	ldr	r3, [pc, #140]	; (800a0a0 <_svfiprintf_r+0x1f4>)
 800a014:	bb1b      	cbnz	r3, 800a05e <_svfiprintf_r+0x1b2>
 800a016:	9b03      	ldr	r3, [sp, #12]
 800a018:	3307      	adds	r3, #7
 800a01a:	f023 0307 	bic.w	r3, r3, #7
 800a01e:	3308      	adds	r3, #8
 800a020:	9303      	str	r3, [sp, #12]
 800a022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a024:	4433      	add	r3, r6
 800a026:	9309      	str	r3, [sp, #36]	; 0x24
 800a028:	e767      	b.n	8009efa <_svfiprintf_r+0x4e>
 800a02a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a02e:	460c      	mov	r4, r1
 800a030:	2001      	movs	r0, #1
 800a032:	e7a5      	b.n	8009f80 <_svfiprintf_r+0xd4>
 800a034:	2300      	movs	r3, #0
 800a036:	3401      	adds	r4, #1
 800a038:	9305      	str	r3, [sp, #20]
 800a03a:	4619      	mov	r1, r3
 800a03c:	f04f 0c0a 	mov.w	ip, #10
 800a040:	4620      	mov	r0, r4
 800a042:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a046:	3a30      	subs	r2, #48	; 0x30
 800a048:	2a09      	cmp	r2, #9
 800a04a:	d903      	bls.n	800a054 <_svfiprintf_r+0x1a8>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0c5      	beq.n	8009fdc <_svfiprintf_r+0x130>
 800a050:	9105      	str	r1, [sp, #20]
 800a052:	e7c3      	b.n	8009fdc <_svfiprintf_r+0x130>
 800a054:	fb0c 2101 	mla	r1, ip, r1, r2
 800a058:	4604      	mov	r4, r0
 800a05a:	2301      	movs	r3, #1
 800a05c:	e7f0      	b.n	800a040 <_svfiprintf_r+0x194>
 800a05e:	ab03      	add	r3, sp, #12
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	462a      	mov	r2, r5
 800a064:	4b0f      	ldr	r3, [pc, #60]	; (800a0a4 <_svfiprintf_r+0x1f8>)
 800a066:	a904      	add	r1, sp, #16
 800a068:	4638      	mov	r0, r7
 800a06a:	f3af 8000 	nop.w
 800a06e:	1c42      	adds	r2, r0, #1
 800a070:	4606      	mov	r6, r0
 800a072:	d1d6      	bne.n	800a022 <_svfiprintf_r+0x176>
 800a074:	89ab      	ldrh	r3, [r5, #12]
 800a076:	065b      	lsls	r3, r3, #25
 800a078:	f53f af2c 	bmi.w	8009ed4 <_svfiprintf_r+0x28>
 800a07c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a07e:	b01d      	add	sp, #116	; 0x74
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	ab03      	add	r3, sp, #12
 800a086:	9300      	str	r3, [sp, #0]
 800a088:	462a      	mov	r2, r5
 800a08a:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <_svfiprintf_r+0x1f8>)
 800a08c:	a904      	add	r1, sp, #16
 800a08e:	4638      	mov	r0, r7
 800a090:	f000 f87a 	bl	800a188 <_printf_i>
 800a094:	e7eb      	b.n	800a06e <_svfiprintf_r+0x1c2>
 800a096:	bf00      	nop
 800a098:	0800cfd4 	.word	0x0800cfd4
 800a09c:	0800cfde 	.word	0x0800cfde
 800a0a0:	00000000 	.word	0x00000000
 800a0a4:	08009df7 	.word	0x08009df7
 800a0a8:	0800cfda 	.word	0x0800cfda

0800a0ac <_printf_common>:
 800a0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b0:	4616      	mov	r6, r2
 800a0b2:	4699      	mov	r9, r3
 800a0b4:	688a      	ldr	r2, [r1, #8]
 800a0b6:	690b      	ldr	r3, [r1, #16]
 800a0b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	bfb8      	it	lt
 800a0c0:	4613      	movlt	r3, r2
 800a0c2:	6033      	str	r3, [r6, #0]
 800a0c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0c8:	4607      	mov	r7, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	b10a      	cbz	r2, 800a0d2 <_printf_common+0x26>
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	6033      	str	r3, [r6, #0]
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	0699      	lsls	r1, r3, #26
 800a0d6:	bf42      	ittt	mi
 800a0d8:	6833      	ldrmi	r3, [r6, #0]
 800a0da:	3302      	addmi	r3, #2
 800a0dc:	6033      	strmi	r3, [r6, #0]
 800a0de:	6825      	ldr	r5, [r4, #0]
 800a0e0:	f015 0506 	ands.w	r5, r5, #6
 800a0e4:	d106      	bne.n	800a0f4 <_printf_common+0x48>
 800a0e6:	f104 0a19 	add.w	sl, r4, #25
 800a0ea:	68e3      	ldr	r3, [r4, #12]
 800a0ec:	6832      	ldr	r2, [r6, #0]
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	42ab      	cmp	r3, r5
 800a0f2:	dc26      	bgt.n	800a142 <_printf_common+0x96>
 800a0f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0f8:	1e13      	subs	r3, r2, #0
 800a0fa:	6822      	ldr	r2, [r4, #0]
 800a0fc:	bf18      	it	ne
 800a0fe:	2301      	movne	r3, #1
 800a100:	0692      	lsls	r2, r2, #26
 800a102:	d42b      	bmi.n	800a15c <_printf_common+0xb0>
 800a104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a108:	4649      	mov	r1, r9
 800a10a:	4638      	mov	r0, r7
 800a10c:	47c0      	blx	r8
 800a10e:	3001      	adds	r0, #1
 800a110:	d01e      	beq.n	800a150 <_printf_common+0xa4>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	68e5      	ldr	r5, [r4, #12]
 800a116:	6832      	ldr	r2, [r6, #0]
 800a118:	f003 0306 	and.w	r3, r3, #6
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	bf08      	it	eq
 800a120:	1aad      	subeq	r5, r5, r2
 800a122:	68a3      	ldr	r3, [r4, #8]
 800a124:	6922      	ldr	r2, [r4, #16]
 800a126:	bf0c      	ite	eq
 800a128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a12c:	2500      	movne	r5, #0
 800a12e:	4293      	cmp	r3, r2
 800a130:	bfc4      	itt	gt
 800a132:	1a9b      	subgt	r3, r3, r2
 800a134:	18ed      	addgt	r5, r5, r3
 800a136:	2600      	movs	r6, #0
 800a138:	341a      	adds	r4, #26
 800a13a:	42b5      	cmp	r5, r6
 800a13c:	d11a      	bne.n	800a174 <_printf_common+0xc8>
 800a13e:	2000      	movs	r0, #0
 800a140:	e008      	b.n	800a154 <_printf_common+0xa8>
 800a142:	2301      	movs	r3, #1
 800a144:	4652      	mov	r2, sl
 800a146:	4649      	mov	r1, r9
 800a148:	4638      	mov	r0, r7
 800a14a:	47c0      	blx	r8
 800a14c:	3001      	adds	r0, #1
 800a14e:	d103      	bne.n	800a158 <_printf_common+0xac>
 800a150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a158:	3501      	adds	r5, #1
 800a15a:	e7c6      	b.n	800a0ea <_printf_common+0x3e>
 800a15c:	18e1      	adds	r1, r4, r3
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	2030      	movs	r0, #48	; 0x30
 800a162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a166:	4422      	add	r2, r4
 800a168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a16c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a170:	3302      	adds	r3, #2
 800a172:	e7c7      	b.n	800a104 <_printf_common+0x58>
 800a174:	2301      	movs	r3, #1
 800a176:	4622      	mov	r2, r4
 800a178:	4649      	mov	r1, r9
 800a17a:	4638      	mov	r0, r7
 800a17c:	47c0      	blx	r8
 800a17e:	3001      	adds	r0, #1
 800a180:	d0e6      	beq.n	800a150 <_printf_common+0xa4>
 800a182:	3601      	adds	r6, #1
 800a184:	e7d9      	b.n	800a13a <_printf_common+0x8e>
	...

0800a188 <_printf_i>:
 800a188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a18c:	7e0f      	ldrb	r7, [r1, #24]
 800a18e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a190:	2f78      	cmp	r7, #120	; 0x78
 800a192:	4691      	mov	r9, r2
 800a194:	4680      	mov	r8, r0
 800a196:	460c      	mov	r4, r1
 800a198:	469a      	mov	sl, r3
 800a19a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a19e:	d807      	bhi.n	800a1b0 <_printf_i+0x28>
 800a1a0:	2f62      	cmp	r7, #98	; 0x62
 800a1a2:	d80a      	bhi.n	800a1ba <_printf_i+0x32>
 800a1a4:	2f00      	cmp	r7, #0
 800a1a6:	f000 80d8 	beq.w	800a35a <_printf_i+0x1d2>
 800a1aa:	2f58      	cmp	r7, #88	; 0x58
 800a1ac:	f000 80a3 	beq.w	800a2f6 <_printf_i+0x16e>
 800a1b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1b8:	e03a      	b.n	800a230 <_printf_i+0xa8>
 800a1ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1be:	2b15      	cmp	r3, #21
 800a1c0:	d8f6      	bhi.n	800a1b0 <_printf_i+0x28>
 800a1c2:	a101      	add	r1, pc, #4	; (adr r1, 800a1c8 <_printf_i+0x40>)
 800a1c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1c8:	0800a221 	.word	0x0800a221
 800a1cc:	0800a235 	.word	0x0800a235
 800a1d0:	0800a1b1 	.word	0x0800a1b1
 800a1d4:	0800a1b1 	.word	0x0800a1b1
 800a1d8:	0800a1b1 	.word	0x0800a1b1
 800a1dc:	0800a1b1 	.word	0x0800a1b1
 800a1e0:	0800a235 	.word	0x0800a235
 800a1e4:	0800a1b1 	.word	0x0800a1b1
 800a1e8:	0800a1b1 	.word	0x0800a1b1
 800a1ec:	0800a1b1 	.word	0x0800a1b1
 800a1f0:	0800a1b1 	.word	0x0800a1b1
 800a1f4:	0800a341 	.word	0x0800a341
 800a1f8:	0800a265 	.word	0x0800a265
 800a1fc:	0800a323 	.word	0x0800a323
 800a200:	0800a1b1 	.word	0x0800a1b1
 800a204:	0800a1b1 	.word	0x0800a1b1
 800a208:	0800a363 	.word	0x0800a363
 800a20c:	0800a1b1 	.word	0x0800a1b1
 800a210:	0800a265 	.word	0x0800a265
 800a214:	0800a1b1 	.word	0x0800a1b1
 800a218:	0800a1b1 	.word	0x0800a1b1
 800a21c:	0800a32b 	.word	0x0800a32b
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	1d1a      	adds	r2, r3, #4
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	602a      	str	r2, [r5, #0]
 800a228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a22c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a230:	2301      	movs	r3, #1
 800a232:	e0a3      	b.n	800a37c <_printf_i+0x1f4>
 800a234:	6820      	ldr	r0, [r4, #0]
 800a236:	6829      	ldr	r1, [r5, #0]
 800a238:	0606      	lsls	r6, r0, #24
 800a23a:	f101 0304 	add.w	r3, r1, #4
 800a23e:	d50a      	bpl.n	800a256 <_printf_i+0xce>
 800a240:	680e      	ldr	r6, [r1, #0]
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	2e00      	cmp	r6, #0
 800a246:	da03      	bge.n	800a250 <_printf_i+0xc8>
 800a248:	232d      	movs	r3, #45	; 0x2d
 800a24a:	4276      	negs	r6, r6
 800a24c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a250:	485e      	ldr	r0, [pc, #376]	; (800a3cc <_printf_i+0x244>)
 800a252:	230a      	movs	r3, #10
 800a254:	e019      	b.n	800a28a <_printf_i+0x102>
 800a256:	680e      	ldr	r6, [r1, #0]
 800a258:	602b      	str	r3, [r5, #0]
 800a25a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a25e:	bf18      	it	ne
 800a260:	b236      	sxthne	r6, r6
 800a262:	e7ef      	b.n	800a244 <_printf_i+0xbc>
 800a264:	682b      	ldr	r3, [r5, #0]
 800a266:	6820      	ldr	r0, [r4, #0]
 800a268:	1d19      	adds	r1, r3, #4
 800a26a:	6029      	str	r1, [r5, #0]
 800a26c:	0601      	lsls	r1, r0, #24
 800a26e:	d501      	bpl.n	800a274 <_printf_i+0xec>
 800a270:	681e      	ldr	r6, [r3, #0]
 800a272:	e002      	b.n	800a27a <_printf_i+0xf2>
 800a274:	0646      	lsls	r6, r0, #25
 800a276:	d5fb      	bpl.n	800a270 <_printf_i+0xe8>
 800a278:	881e      	ldrh	r6, [r3, #0]
 800a27a:	4854      	ldr	r0, [pc, #336]	; (800a3cc <_printf_i+0x244>)
 800a27c:	2f6f      	cmp	r7, #111	; 0x6f
 800a27e:	bf0c      	ite	eq
 800a280:	2308      	moveq	r3, #8
 800a282:	230a      	movne	r3, #10
 800a284:	2100      	movs	r1, #0
 800a286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a28a:	6865      	ldr	r5, [r4, #4]
 800a28c:	60a5      	str	r5, [r4, #8]
 800a28e:	2d00      	cmp	r5, #0
 800a290:	bfa2      	ittt	ge
 800a292:	6821      	ldrge	r1, [r4, #0]
 800a294:	f021 0104 	bicge.w	r1, r1, #4
 800a298:	6021      	strge	r1, [r4, #0]
 800a29a:	b90e      	cbnz	r6, 800a2a0 <_printf_i+0x118>
 800a29c:	2d00      	cmp	r5, #0
 800a29e:	d04d      	beq.n	800a33c <_printf_i+0x1b4>
 800a2a0:	4615      	mov	r5, r2
 800a2a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2a6:	fb03 6711 	mls	r7, r3, r1, r6
 800a2aa:	5dc7      	ldrb	r7, [r0, r7]
 800a2ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2b0:	4637      	mov	r7, r6
 800a2b2:	42bb      	cmp	r3, r7
 800a2b4:	460e      	mov	r6, r1
 800a2b6:	d9f4      	bls.n	800a2a2 <_printf_i+0x11a>
 800a2b8:	2b08      	cmp	r3, #8
 800a2ba:	d10b      	bne.n	800a2d4 <_printf_i+0x14c>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	07de      	lsls	r6, r3, #31
 800a2c0:	d508      	bpl.n	800a2d4 <_printf_i+0x14c>
 800a2c2:	6923      	ldr	r3, [r4, #16]
 800a2c4:	6861      	ldr	r1, [r4, #4]
 800a2c6:	4299      	cmp	r1, r3
 800a2c8:	bfde      	ittt	le
 800a2ca:	2330      	movle	r3, #48	; 0x30
 800a2cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a2d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a2d4:	1b52      	subs	r2, r2, r5
 800a2d6:	6122      	str	r2, [r4, #16]
 800a2d8:	f8cd a000 	str.w	sl, [sp]
 800a2dc:	464b      	mov	r3, r9
 800a2de:	aa03      	add	r2, sp, #12
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	f7ff fee2 	bl	800a0ac <_printf_common>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d14c      	bne.n	800a386 <_printf_i+0x1fe>
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2f0:	b004      	add	sp, #16
 800a2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f6:	4835      	ldr	r0, [pc, #212]	; (800a3cc <_printf_i+0x244>)
 800a2f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a2fc:	6829      	ldr	r1, [r5, #0]
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	f851 6b04 	ldr.w	r6, [r1], #4
 800a304:	6029      	str	r1, [r5, #0]
 800a306:	061d      	lsls	r5, r3, #24
 800a308:	d514      	bpl.n	800a334 <_printf_i+0x1ac>
 800a30a:	07df      	lsls	r7, r3, #31
 800a30c:	bf44      	itt	mi
 800a30e:	f043 0320 	orrmi.w	r3, r3, #32
 800a312:	6023      	strmi	r3, [r4, #0]
 800a314:	b91e      	cbnz	r6, 800a31e <_printf_i+0x196>
 800a316:	6823      	ldr	r3, [r4, #0]
 800a318:	f023 0320 	bic.w	r3, r3, #32
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	2310      	movs	r3, #16
 800a320:	e7b0      	b.n	800a284 <_printf_i+0xfc>
 800a322:	6823      	ldr	r3, [r4, #0]
 800a324:	f043 0320 	orr.w	r3, r3, #32
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	2378      	movs	r3, #120	; 0x78
 800a32c:	4828      	ldr	r0, [pc, #160]	; (800a3d0 <_printf_i+0x248>)
 800a32e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a332:	e7e3      	b.n	800a2fc <_printf_i+0x174>
 800a334:	0659      	lsls	r1, r3, #25
 800a336:	bf48      	it	mi
 800a338:	b2b6      	uxthmi	r6, r6
 800a33a:	e7e6      	b.n	800a30a <_printf_i+0x182>
 800a33c:	4615      	mov	r5, r2
 800a33e:	e7bb      	b.n	800a2b8 <_printf_i+0x130>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	6826      	ldr	r6, [r4, #0]
 800a344:	6961      	ldr	r1, [r4, #20]
 800a346:	1d18      	adds	r0, r3, #4
 800a348:	6028      	str	r0, [r5, #0]
 800a34a:	0635      	lsls	r5, r6, #24
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	d501      	bpl.n	800a354 <_printf_i+0x1cc>
 800a350:	6019      	str	r1, [r3, #0]
 800a352:	e002      	b.n	800a35a <_printf_i+0x1d2>
 800a354:	0670      	lsls	r0, r6, #25
 800a356:	d5fb      	bpl.n	800a350 <_printf_i+0x1c8>
 800a358:	8019      	strh	r1, [r3, #0]
 800a35a:	2300      	movs	r3, #0
 800a35c:	6123      	str	r3, [r4, #16]
 800a35e:	4615      	mov	r5, r2
 800a360:	e7ba      	b.n	800a2d8 <_printf_i+0x150>
 800a362:	682b      	ldr	r3, [r5, #0]
 800a364:	1d1a      	adds	r2, r3, #4
 800a366:	602a      	str	r2, [r5, #0]
 800a368:	681d      	ldr	r5, [r3, #0]
 800a36a:	6862      	ldr	r2, [r4, #4]
 800a36c:	2100      	movs	r1, #0
 800a36e:	4628      	mov	r0, r5
 800a370:	f7f5 ff2e 	bl	80001d0 <memchr>
 800a374:	b108      	cbz	r0, 800a37a <_printf_i+0x1f2>
 800a376:	1b40      	subs	r0, r0, r5
 800a378:	6060      	str	r0, [r4, #4]
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	6123      	str	r3, [r4, #16]
 800a37e:	2300      	movs	r3, #0
 800a380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a384:	e7a8      	b.n	800a2d8 <_printf_i+0x150>
 800a386:	6923      	ldr	r3, [r4, #16]
 800a388:	462a      	mov	r2, r5
 800a38a:	4649      	mov	r1, r9
 800a38c:	4640      	mov	r0, r8
 800a38e:	47d0      	blx	sl
 800a390:	3001      	adds	r0, #1
 800a392:	d0ab      	beq.n	800a2ec <_printf_i+0x164>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	079b      	lsls	r3, r3, #30
 800a398:	d413      	bmi.n	800a3c2 <_printf_i+0x23a>
 800a39a:	68e0      	ldr	r0, [r4, #12]
 800a39c:	9b03      	ldr	r3, [sp, #12]
 800a39e:	4298      	cmp	r0, r3
 800a3a0:	bfb8      	it	lt
 800a3a2:	4618      	movlt	r0, r3
 800a3a4:	e7a4      	b.n	800a2f0 <_printf_i+0x168>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4632      	mov	r2, r6
 800a3aa:	4649      	mov	r1, r9
 800a3ac:	4640      	mov	r0, r8
 800a3ae:	47d0      	blx	sl
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	d09b      	beq.n	800a2ec <_printf_i+0x164>
 800a3b4:	3501      	adds	r5, #1
 800a3b6:	68e3      	ldr	r3, [r4, #12]
 800a3b8:	9903      	ldr	r1, [sp, #12]
 800a3ba:	1a5b      	subs	r3, r3, r1
 800a3bc:	42ab      	cmp	r3, r5
 800a3be:	dcf2      	bgt.n	800a3a6 <_printf_i+0x21e>
 800a3c0:	e7eb      	b.n	800a39a <_printf_i+0x212>
 800a3c2:	2500      	movs	r5, #0
 800a3c4:	f104 0619 	add.w	r6, r4, #25
 800a3c8:	e7f5      	b.n	800a3b6 <_printf_i+0x22e>
 800a3ca:	bf00      	nop
 800a3cc:	0800cfe5 	.word	0x0800cfe5
 800a3d0:	0800cff6 	.word	0x0800cff6

0800a3d4 <memmove>:
 800a3d4:	4288      	cmp	r0, r1
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	eb01 0402 	add.w	r4, r1, r2
 800a3dc:	d902      	bls.n	800a3e4 <memmove+0x10>
 800a3de:	4284      	cmp	r4, r0
 800a3e0:	4623      	mov	r3, r4
 800a3e2:	d807      	bhi.n	800a3f4 <memmove+0x20>
 800a3e4:	1e43      	subs	r3, r0, #1
 800a3e6:	42a1      	cmp	r1, r4
 800a3e8:	d008      	beq.n	800a3fc <memmove+0x28>
 800a3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3f2:	e7f8      	b.n	800a3e6 <memmove+0x12>
 800a3f4:	4402      	add	r2, r0
 800a3f6:	4601      	mov	r1, r0
 800a3f8:	428a      	cmp	r2, r1
 800a3fa:	d100      	bne.n	800a3fe <memmove+0x2a>
 800a3fc:	bd10      	pop	{r4, pc}
 800a3fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a406:	e7f7      	b.n	800a3f8 <memmove+0x24>

0800a408 <_free_r>:
 800a408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a40a:	2900      	cmp	r1, #0
 800a40c:	d044      	beq.n	800a498 <_free_r+0x90>
 800a40e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a412:	9001      	str	r0, [sp, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f1a1 0404 	sub.w	r4, r1, #4
 800a41a:	bfb8      	it	lt
 800a41c:	18e4      	addlt	r4, r4, r3
 800a41e:	f000 f913 	bl	800a648 <__malloc_lock>
 800a422:	4a1e      	ldr	r2, [pc, #120]	; (800a49c <_free_r+0x94>)
 800a424:	9801      	ldr	r0, [sp, #4]
 800a426:	6813      	ldr	r3, [r2, #0]
 800a428:	b933      	cbnz	r3, 800a438 <_free_r+0x30>
 800a42a:	6063      	str	r3, [r4, #4]
 800a42c:	6014      	str	r4, [r2, #0]
 800a42e:	b003      	add	sp, #12
 800a430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a434:	f000 b90e 	b.w	800a654 <__malloc_unlock>
 800a438:	42a3      	cmp	r3, r4
 800a43a:	d908      	bls.n	800a44e <_free_r+0x46>
 800a43c:	6825      	ldr	r5, [r4, #0]
 800a43e:	1961      	adds	r1, r4, r5
 800a440:	428b      	cmp	r3, r1
 800a442:	bf01      	itttt	eq
 800a444:	6819      	ldreq	r1, [r3, #0]
 800a446:	685b      	ldreq	r3, [r3, #4]
 800a448:	1949      	addeq	r1, r1, r5
 800a44a:	6021      	streq	r1, [r4, #0]
 800a44c:	e7ed      	b.n	800a42a <_free_r+0x22>
 800a44e:	461a      	mov	r2, r3
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	b10b      	cbz	r3, 800a458 <_free_r+0x50>
 800a454:	42a3      	cmp	r3, r4
 800a456:	d9fa      	bls.n	800a44e <_free_r+0x46>
 800a458:	6811      	ldr	r1, [r2, #0]
 800a45a:	1855      	adds	r5, r2, r1
 800a45c:	42a5      	cmp	r5, r4
 800a45e:	d10b      	bne.n	800a478 <_free_r+0x70>
 800a460:	6824      	ldr	r4, [r4, #0]
 800a462:	4421      	add	r1, r4
 800a464:	1854      	adds	r4, r2, r1
 800a466:	42a3      	cmp	r3, r4
 800a468:	6011      	str	r1, [r2, #0]
 800a46a:	d1e0      	bne.n	800a42e <_free_r+0x26>
 800a46c:	681c      	ldr	r4, [r3, #0]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	6053      	str	r3, [r2, #4]
 800a472:	4421      	add	r1, r4
 800a474:	6011      	str	r1, [r2, #0]
 800a476:	e7da      	b.n	800a42e <_free_r+0x26>
 800a478:	d902      	bls.n	800a480 <_free_r+0x78>
 800a47a:	230c      	movs	r3, #12
 800a47c:	6003      	str	r3, [r0, #0]
 800a47e:	e7d6      	b.n	800a42e <_free_r+0x26>
 800a480:	6825      	ldr	r5, [r4, #0]
 800a482:	1961      	adds	r1, r4, r5
 800a484:	428b      	cmp	r3, r1
 800a486:	bf04      	itt	eq
 800a488:	6819      	ldreq	r1, [r3, #0]
 800a48a:	685b      	ldreq	r3, [r3, #4]
 800a48c:	6063      	str	r3, [r4, #4]
 800a48e:	bf04      	itt	eq
 800a490:	1949      	addeq	r1, r1, r5
 800a492:	6021      	streq	r1, [r4, #0]
 800a494:	6054      	str	r4, [r2, #4]
 800a496:	e7ca      	b.n	800a42e <_free_r+0x26>
 800a498:	b003      	add	sp, #12
 800a49a:	bd30      	pop	{r4, r5, pc}
 800a49c:	20000e34 	.word	0x20000e34

0800a4a0 <sbrk_aligned>:
 800a4a0:	b570      	push	{r4, r5, r6, lr}
 800a4a2:	4e0e      	ldr	r6, [pc, #56]	; (800a4dc <sbrk_aligned+0x3c>)
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	6831      	ldr	r1, [r6, #0]
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	b911      	cbnz	r1, 800a4b2 <sbrk_aligned+0x12>
 800a4ac:	f000 f8bc 	bl	800a628 <_sbrk_r>
 800a4b0:	6030      	str	r0, [r6, #0]
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f000 f8b7 	bl	800a628 <_sbrk_r>
 800a4ba:	1c43      	adds	r3, r0, #1
 800a4bc:	d00a      	beq.n	800a4d4 <sbrk_aligned+0x34>
 800a4be:	1cc4      	adds	r4, r0, #3
 800a4c0:	f024 0403 	bic.w	r4, r4, #3
 800a4c4:	42a0      	cmp	r0, r4
 800a4c6:	d007      	beq.n	800a4d8 <sbrk_aligned+0x38>
 800a4c8:	1a21      	subs	r1, r4, r0
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f000 f8ac 	bl	800a628 <_sbrk_r>
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d101      	bne.n	800a4d8 <sbrk_aligned+0x38>
 800a4d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4d8:	4620      	mov	r0, r4
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	20000e38 	.word	0x20000e38

0800a4e0 <_malloc_r>:
 800a4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	1ccd      	adds	r5, r1, #3
 800a4e6:	f025 0503 	bic.w	r5, r5, #3
 800a4ea:	3508      	adds	r5, #8
 800a4ec:	2d0c      	cmp	r5, #12
 800a4ee:	bf38      	it	cc
 800a4f0:	250c      	movcc	r5, #12
 800a4f2:	2d00      	cmp	r5, #0
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	db01      	blt.n	800a4fc <_malloc_r+0x1c>
 800a4f8:	42a9      	cmp	r1, r5
 800a4fa:	d905      	bls.n	800a508 <_malloc_r+0x28>
 800a4fc:	230c      	movs	r3, #12
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	2600      	movs	r6, #0
 800a502:	4630      	mov	r0, r6
 800a504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a508:	4e2e      	ldr	r6, [pc, #184]	; (800a5c4 <_malloc_r+0xe4>)
 800a50a:	f000 f89d 	bl	800a648 <__malloc_lock>
 800a50e:	6833      	ldr	r3, [r6, #0]
 800a510:	461c      	mov	r4, r3
 800a512:	bb34      	cbnz	r4, 800a562 <_malloc_r+0x82>
 800a514:	4629      	mov	r1, r5
 800a516:	4638      	mov	r0, r7
 800a518:	f7ff ffc2 	bl	800a4a0 <sbrk_aligned>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	4604      	mov	r4, r0
 800a520:	d14d      	bne.n	800a5be <_malloc_r+0xde>
 800a522:	6834      	ldr	r4, [r6, #0]
 800a524:	4626      	mov	r6, r4
 800a526:	2e00      	cmp	r6, #0
 800a528:	d140      	bne.n	800a5ac <_malloc_r+0xcc>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	4631      	mov	r1, r6
 800a52e:	4638      	mov	r0, r7
 800a530:	eb04 0803 	add.w	r8, r4, r3
 800a534:	f000 f878 	bl	800a628 <_sbrk_r>
 800a538:	4580      	cmp	r8, r0
 800a53a:	d13a      	bne.n	800a5b2 <_malloc_r+0xd2>
 800a53c:	6821      	ldr	r1, [r4, #0]
 800a53e:	3503      	adds	r5, #3
 800a540:	1a6d      	subs	r5, r5, r1
 800a542:	f025 0503 	bic.w	r5, r5, #3
 800a546:	3508      	adds	r5, #8
 800a548:	2d0c      	cmp	r5, #12
 800a54a:	bf38      	it	cc
 800a54c:	250c      	movcc	r5, #12
 800a54e:	4629      	mov	r1, r5
 800a550:	4638      	mov	r0, r7
 800a552:	f7ff ffa5 	bl	800a4a0 <sbrk_aligned>
 800a556:	3001      	adds	r0, #1
 800a558:	d02b      	beq.n	800a5b2 <_malloc_r+0xd2>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	442b      	add	r3, r5
 800a55e:	6023      	str	r3, [r4, #0]
 800a560:	e00e      	b.n	800a580 <_malloc_r+0xa0>
 800a562:	6822      	ldr	r2, [r4, #0]
 800a564:	1b52      	subs	r2, r2, r5
 800a566:	d41e      	bmi.n	800a5a6 <_malloc_r+0xc6>
 800a568:	2a0b      	cmp	r2, #11
 800a56a:	d916      	bls.n	800a59a <_malloc_r+0xba>
 800a56c:	1961      	adds	r1, r4, r5
 800a56e:	42a3      	cmp	r3, r4
 800a570:	6025      	str	r5, [r4, #0]
 800a572:	bf18      	it	ne
 800a574:	6059      	strne	r1, [r3, #4]
 800a576:	6863      	ldr	r3, [r4, #4]
 800a578:	bf08      	it	eq
 800a57a:	6031      	streq	r1, [r6, #0]
 800a57c:	5162      	str	r2, [r4, r5]
 800a57e:	604b      	str	r3, [r1, #4]
 800a580:	4638      	mov	r0, r7
 800a582:	f104 060b 	add.w	r6, r4, #11
 800a586:	f000 f865 	bl	800a654 <__malloc_unlock>
 800a58a:	f026 0607 	bic.w	r6, r6, #7
 800a58e:	1d23      	adds	r3, r4, #4
 800a590:	1af2      	subs	r2, r6, r3
 800a592:	d0b6      	beq.n	800a502 <_malloc_r+0x22>
 800a594:	1b9b      	subs	r3, r3, r6
 800a596:	50a3      	str	r3, [r4, r2]
 800a598:	e7b3      	b.n	800a502 <_malloc_r+0x22>
 800a59a:	6862      	ldr	r2, [r4, #4]
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	bf0c      	ite	eq
 800a5a0:	6032      	streq	r2, [r6, #0]
 800a5a2:	605a      	strne	r2, [r3, #4]
 800a5a4:	e7ec      	b.n	800a580 <_malloc_r+0xa0>
 800a5a6:	4623      	mov	r3, r4
 800a5a8:	6864      	ldr	r4, [r4, #4]
 800a5aa:	e7b2      	b.n	800a512 <_malloc_r+0x32>
 800a5ac:	4634      	mov	r4, r6
 800a5ae:	6876      	ldr	r6, [r6, #4]
 800a5b0:	e7b9      	b.n	800a526 <_malloc_r+0x46>
 800a5b2:	230c      	movs	r3, #12
 800a5b4:	603b      	str	r3, [r7, #0]
 800a5b6:	4638      	mov	r0, r7
 800a5b8:	f000 f84c 	bl	800a654 <__malloc_unlock>
 800a5bc:	e7a1      	b.n	800a502 <_malloc_r+0x22>
 800a5be:	6025      	str	r5, [r4, #0]
 800a5c0:	e7de      	b.n	800a580 <_malloc_r+0xa0>
 800a5c2:	bf00      	nop
 800a5c4:	20000e34 	.word	0x20000e34

0800a5c8 <_realloc_r>:
 800a5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	4614      	mov	r4, r2
 800a5d0:	460e      	mov	r6, r1
 800a5d2:	b921      	cbnz	r1, 800a5de <_realloc_r+0x16>
 800a5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d8:	4611      	mov	r1, r2
 800a5da:	f7ff bf81 	b.w	800a4e0 <_malloc_r>
 800a5de:	b92a      	cbnz	r2, 800a5ec <_realloc_r+0x24>
 800a5e0:	f7ff ff12 	bl	800a408 <_free_r>
 800a5e4:	4625      	mov	r5, r4
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ec:	f000 f838 	bl	800a660 <_malloc_usable_size_r>
 800a5f0:	4284      	cmp	r4, r0
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	d802      	bhi.n	800a5fc <_realloc_r+0x34>
 800a5f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5fa:	d812      	bhi.n	800a622 <_realloc_r+0x5a>
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	4640      	mov	r0, r8
 800a600:	f7ff ff6e 	bl	800a4e0 <_malloc_r>
 800a604:	4605      	mov	r5, r0
 800a606:	2800      	cmp	r0, #0
 800a608:	d0ed      	beq.n	800a5e6 <_realloc_r+0x1e>
 800a60a:	42bc      	cmp	r4, r7
 800a60c:	4622      	mov	r2, r4
 800a60e:	4631      	mov	r1, r6
 800a610:	bf28      	it	cs
 800a612:	463a      	movcs	r2, r7
 800a614:	f7ff fba6 	bl	8009d64 <memcpy>
 800a618:	4631      	mov	r1, r6
 800a61a:	4640      	mov	r0, r8
 800a61c:	f7ff fef4 	bl	800a408 <_free_r>
 800a620:	e7e1      	b.n	800a5e6 <_realloc_r+0x1e>
 800a622:	4635      	mov	r5, r6
 800a624:	e7df      	b.n	800a5e6 <_realloc_r+0x1e>
	...

0800a628 <_sbrk_r>:
 800a628:	b538      	push	{r3, r4, r5, lr}
 800a62a:	4d06      	ldr	r5, [pc, #24]	; (800a644 <_sbrk_r+0x1c>)
 800a62c:	2300      	movs	r3, #0
 800a62e:	4604      	mov	r4, r0
 800a630:	4608      	mov	r0, r1
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	f7fb fc1c 	bl	8005e70 <_sbrk>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d102      	bne.n	800a642 <_sbrk_r+0x1a>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	b103      	cbz	r3, 800a642 <_sbrk_r+0x1a>
 800a640:	6023      	str	r3, [r4, #0]
 800a642:	bd38      	pop	{r3, r4, r5, pc}
 800a644:	20000e3c 	.word	0x20000e3c

0800a648 <__malloc_lock>:
 800a648:	4801      	ldr	r0, [pc, #4]	; (800a650 <__malloc_lock+0x8>)
 800a64a:	f000 b811 	b.w	800a670 <__retarget_lock_acquire_recursive>
 800a64e:	bf00      	nop
 800a650:	20000e40 	.word	0x20000e40

0800a654 <__malloc_unlock>:
 800a654:	4801      	ldr	r0, [pc, #4]	; (800a65c <__malloc_unlock+0x8>)
 800a656:	f000 b80c 	b.w	800a672 <__retarget_lock_release_recursive>
 800a65a:	bf00      	nop
 800a65c:	20000e40 	.word	0x20000e40

0800a660 <_malloc_usable_size_r>:
 800a660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a664:	1f18      	subs	r0, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	bfbc      	itt	lt
 800a66a:	580b      	ldrlt	r3, [r1, r0]
 800a66c:	18c0      	addlt	r0, r0, r3
 800a66e:	4770      	bx	lr

0800a670 <__retarget_lock_acquire_recursive>:
 800a670:	4770      	bx	lr

0800a672 <__retarget_lock_release_recursive>:
 800a672:	4770      	bx	lr
 800a674:	0000      	movs	r0, r0
	...

0800a678 <cos>:
 800a678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a67a:	ec53 2b10 	vmov	r2, r3, d0
 800a67e:	4826      	ldr	r0, [pc, #152]	; (800a718 <cos+0xa0>)
 800a680:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a684:	4281      	cmp	r1, r0
 800a686:	dc06      	bgt.n	800a696 <cos+0x1e>
 800a688:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a710 <cos+0x98>
 800a68c:	b005      	add	sp, #20
 800a68e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a692:	f000 bee9 	b.w	800b468 <__kernel_cos>
 800a696:	4821      	ldr	r0, [pc, #132]	; (800a71c <cos+0xa4>)
 800a698:	4281      	cmp	r1, r0
 800a69a:	dd09      	ble.n	800a6b0 <cos+0x38>
 800a69c:	ee10 0a10 	vmov	r0, s0
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	f7f5 fde9 	bl	8000278 <__aeabi_dsub>
 800a6a6:	ec41 0b10 	vmov	d0, r0, r1
 800a6aa:	b005      	add	sp, #20
 800a6ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800a6b0:	4668      	mov	r0, sp
 800a6b2:	f000 fc19 	bl	800aee8 <__ieee754_rem_pio2>
 800a6b6:	f000 0003 	and.w	r0, r0, #3
 800a6ba:	2801      	cmp	r0, #1
 800a6bc:	d00b      	beq.n	800a6d6 <cos+0x5e>
 800a6be:	2802      	cmp	r0, #2
 800a6c0:	d016      	beq.n	800a6f0 <cos+0x78>
 800a6c2:	b9e0      	cbnz	r0, 800a6fe <cos+0x86>
 800a6c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6c8:	ed9d 0b00 	vldr	d0, [sp]
 800a6cc:	f000 fecc 	bl	800b468 <__kernel_cos>
 800a6d0:	ec51 0b10 	vmov	r0, r1, d0
 800a6d4:	e7e7      	b.n	800a6a6 <cos+0x2e>
 800a6d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6da:	ed9d 0b00 	vldr	d0, [sp]
 800a6de:	f001 fadb 	bl	800bc98 <__kernel_sin>
 800a6e2:	ec53 2b10 	vmov	r2, r3, d0
 800a6e6:	ee10 0a10 	vmov	r0, s0
 800a6ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6ee:	e7da      	b.n	800a6a6 <cos+0x2e>
 800a6f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6f4:	ed9d 0b00 	vldr	d0, [sp]
 800a6f8:	f000 feb6 	bl	800b468 <__kernel_cos>
 800a6fc:	e7f1      	b.n	800a6e2 <cos+0x6a>
 800a6fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a702:	ed9d 0b00 	vldr	d0, [sp]
 800a706:	2001      	movs	r0, #1
 800a708:	f001 fac6 	bl	800bc98 <__kernel_sin>
 800a70c:	e7e0      	b.n	800a6d0 <cos+0x58>
 800a70e:	bf00      	nop
	...
 800a718:	3fe921fb 	.word	0x3fe921fb
 800a71c:	7fefffff 	.word	0x7fefffff

0800a720 <round>:
 800a720:	ec51 0b10 	vmov	r0, r1, d0
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a72a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a72e:	2c13      	cmp	r4, #19
 800a730:	ee10 2a10 	vmov	r2, s0
 800a734:	460b      	mov	r3, r1
 800a736:	dc19      	bgt.n	800a76c <round+0x4c>
 800a738:	2c00      	cmp	r4, #0
 800a73a:	da09      	bge.n	800a750 <round+0x30>
 800a73c:	3401      	adds	r4, #1
 800a73e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a742:	d103      	bne.n	800a74c <round+0x2c>
 800a744:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a748:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a74c:	2200      	movs	r2, #0
 800a74e:	e028      	b.n	800a7a2 <round+0x82>
 800a750:	4d15      	ldr	r5, [pc, #84]	; (800a7a8 <round+0x88>)
 800a752:	4125      	asrs	r5, r4
 800a754:	ea01 0605 	and.w	r6, r1, r5
 800a758:	4332      	orrs	r2, r6
 800a75a:	d00e      	beq.n	800a77a <round+0x5a>
 800a75c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a760:	fa42 f404 	asr.w	r4, r2, r4
 800a764:	4423      	add	r3, r4
 800a766:	ea23 0305 	bic.w	r3, r3, r5
 800a76a:	e7ef      	b.n	800a74c <round+0x2c>
 800a76c:	2c33      	cmp	r4, #51	; 0x33
 800a76e:	dd07      	ble.n	800a780 <round+0x60>
 800a770:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a774:	d101      	bne.n	800a77a <round+0x5a>
 800a776:	f7f5 fd81 	bl	800027c <__adddf3>
 800a77a:	ec41 0b10 	vmov	d0, r0, r1
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a784:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a788:	40f5      	lsrs	r5, r6
 800a78a:	4228      	tst	r0, r5
 800a78c:	d0f5      	beq.n	800a77a <round+0x5a>
 800a78e:	2101      	movs	r1, #1
 800a790:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a794:	fa01 f404 	lsl.w	r4, r1, r4
 800a798:	1912      	adds	r2, r2, r4
 800a79a:	bf28      	it	cs
 800a79c:	185b      	addcs	r3, r3, r1
 800a79e:	ea22 0205 	bic.w	r2, r2, r5
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	e7e8      	b.n	800a77a <round+0x5a>
 800a7a8:	000fffff 	.word	0x000fffff
 800a7ac:	00000000 	.word	0x00000000

0800a7b0 <sin>:
 800a7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7b2:	ec53 2b10 	vmov	r2, r3, d0
 800a7b6:	4828      	ldr	r0, [pc, #160]	; (800a858 <sin+0xa8>)
 800a7b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7bc:	4281      	cmp	r1, r0
 800a7be:	dc07      	bgt.n	800a7d0 <sin+0x20>
 800a7c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a850 <sin+0xa0>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	b005      	add	sp, #20
 800a7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7cc:	f001 ba64 	b.w	800bc98 <__kernel_sin>
 800a7d0:	4822      	ldr	r0, [pc, #136]	; (800a85c <sin+0xac>)
 800a7d2:	4281      	cmp	r1, r0
 800a7d4:	dd09      	ble.n	800a7ea <sin+0x3a>
 800a7d6:	ee10 0a10 	vmov	r0, s0
 800a7da:	4619      	mov	r1, r3
 800a7dc:	f7f5 fd4c 	bl	8000278 <__aeabi_dsub>
 800a7e0:	ec41 0b10 	vmov	d0, r0, r1
 800a7e4:	b005      	add	sp, #20
 800a7e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7ea:	4668      	mov	r0, sp
 800a7ec:	f000 fb7c 	bl	800aee8 <__ieee754_rem_pio2>
 800a7f0:	f000 0003 	and.w	r0, r0, #3
 800a7f4:	2801      	cmp	r0, #1
 800a7f6:	d00c      	beq.n	800a812 <sin+0x62>
 800a7f8:	2802      	cmp	r0, #2
 800a7fa:	d011      	beq.n	800a820 <sin+0x70>
 800a7fc:	b9f0      	cbnz	r0, 800a83c <sin+0x8c>
 800a7fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a802:	ed9d 0b00 	vldr	d0, [sp]
 800a806:	2001      	movs	r0, #1
 800a808:	f001 fa46 	bl	800bc98 <__kernel_sin>
 800a80c:	ec51 0b10 	vmov	r0, r1, d0
 800a810:	e7e6      	b.n	800a7e0 <sin+0x30>
 800a812:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a816:	ed9d 0b00 	vldr	d0, [sp]
 800a81a:	f000 fe25 	bl	800b468 <__kernel_cos>
 800a81e:	e7f5      	b.n	800a80c <sin+0x5c>
 800a820:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a824:	ed9d 0b00 	vldr	d0, [sp]
 800a828:	2001      	movs	r0, #1
 800a82a:	f001 fa35 	bl	800bc98 <__kernel_sin>
 800a82e:	ec53 2b10 	vmov	r2, r3, d0
 800a832:	ee10 0a10 	vmov	r0, s0
 800a836:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a83a:	e7d1      	b.n	800a7e0 <sin+0x30>
 800a83c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a840:	ed9d 0b00 	vldr	d0, [sp]
 800a844:	f000 fe10 	bl	800b468 <__kernel_cos>
 800a848:	e7f1      	b.n	800a82e <sin+0x7e>
 800a84a:	bf00      	nop
 800a84c:	f3af 8000 	nop.w
	...
 800a858:	3fe921fb 	.word	0x3fe921fb
 800a85c:	7fefffff 	.word	0x7fefffff

0800a860 <asin>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	ed2d 8b02 	vpush	{d8}
 800a866:	ec55 4b10 	vmov	r4, r5, d0
 800a86a:	f000 f85d 	bl	800a928 <__ieee754_asin>
 800a86e:	4622      	mov	r2, r4
 800a870:	462b      	mov	r3, r5
 800a872:	4620      	mov	r0, r4
 800a874:	4629      	mov	r1, r5
 800a876:	eeb0 8a40 	vmov.f32	s16, s0
 800a87a:	eef0 8a60 	vmov.f32	s17, s1
 800a87e:	f7f6 f94d 	bl	8000b1c <__aeabi_dcmpun>
 800a882:	b9a8      	cbnz	r0, 800a8b0 <asin+0x50>
 800a884:	ec45 4b10 	vmov	d0, r4, r5
 800a888:	f001 fc66 	bl	800c158 <fabs>
 800a88c:	4b0c      	ldr	r3, [pc, #48]	; (800a8c0 <asin+0x60>)
 800a88e:	ec51 0b10 	vmov	r0, r1, d0
 800a892:	2200      	movs	r2, #0
 800a894:	f7f6 f938 	bl	8000b08 <__aeabi_dcmpgt>
 800a898:	b150      	cbz	r0, 800a8b0 <asin+0x50>
 800a89a:	f7ff fa39 	bl	8009d10 <__errno>
 800a89e:	ecbd 8b02 	vpop	{d8}
 800a8a2:	2321      	movs	r3, #33	; 0x21
 800a8a4:	6003      	str	r3, [r0, #0]
 800a8a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8aa:	4806      	ldr	r0, [pc, #24]	; (800a8c4 <asin+0x64>)
 800a8ac:	f001 bce0 	b.w	800c270 <nan>
 800a8b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a8b4:	eef0 0a68 	vmov.f32	s1, s17
 800a8b8:	ecbd 8b02 	vpop	{d8}
 800a8bc:	bd38      	pop	{r3, r4, r5, pc}
 800a8be:	bf00      	nop
 800a8c0:	3ff00000 	.word	0x3ff00000
 800a8c4:	0800cfd9 	.word	0x0800cfd9

0800a8c8 <atan2>:
 800a8c8:	f000 ba42 	b.w	800ad50 <__ieee754_atan2>

0800a8cc <sqrt>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	ed2d 8b02 	vpush	{d8}
 800a8d2:	ec55 4b10 	vmov	r4, r5, d0
 800a8d6:	f000 fd13 	bl	800b300 <__ieee754_sqrt>
 800a8da:	4622      	mov	r2, r4
 800a8dc:	462b      	mov	r3, r5
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	eeb0 8a40 	vmov.f32	s16, s0
 800a8e6:	eef0 8a60 	vmov.f32	s17, s1
 800a8ea:	f7f6 f917 	bl	8000b1c <__aeabi_dcmpun>
 800a8ee:	b990      	cbnz	r0, 800a916 <sqrt+0x4a>
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f6 f8e8 	bl	8000acc <__aeabi_dcmplt>
 800a8fc:	b158      	cbz	r0, 800a916 <sqrt+0x4a>
 800a8fe:	f7ff fa07 	bl	8009d10 <__errno>
 800a902:	2321      	movs	r3, #33	; 0x21
 800a904:	6003      	str	r3, [r0, #0]
 800a906:	2200      	movs	r2, #0
 800a908:	2300      	movs	r3, #0
 800a90a:	4610      	mov	r0, r2
 800a90c:	4619      	mov	r1, r3
 800a90e:	f7f5 ff95 	bl	800083c <__aeabi_ddiv>
 800a912:	ec41 0b18 	vmov	d8, r0, r1
 800a916:	eeb0 0a48 	vmov.f32	s0, s16
 800a91a:	eef0 0a68 	vmov.f32	s1, s17
 800a91e:	ecbd 8b02 	vpop	{d8}
 800a922:	bd38      	pop	{r3, r4, r5, pc}
 800a924:	0000      	movs	r0, r0
	...

0800a928 <__ieee754_asin>:
 800a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	ed2d 8b04 	vpush	{d8-d9}
 800a930:	ec55 4b10 	vmov	r4, r5, d0
 800a934:	4bcc      	ldr	r3, [pc, #816]	; (800ac68 <__ieee754_asin+0x340>)
 800a936:	b083      	sub	sp, #12
 800a938:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a93c:	4598      	cmp	r8, r3
 800a93e:	9501      	str	r5, [sp, #4]
 800a940:	dd35      	ble.n	800a9ae <__ieee754_asin+0x86>
 800a942:	ee10 3a10 	vmov	r3, s0
 800a946:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a94a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a94e:	ea58 0303 	orrs.w	r3, r8, r3
 800a952:	d117      	bne.n	800a984 <__ieee754_asin+0x5c>
 800a954:	a3aa      	add	r3, pc, #680	; (adr r3, 800ac00 <__ieee754_asin+0x2d8>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	ee10 0a10 	vmov	r0, s0
 800a95e:	4629      	mov	r1, r5
 800a960:	f7f5 fe42 	bl	80005e8 <__aeabi_dmul>
 800a964:	a3a8      	add	r3, pc, #672	; (adr r3, 800ac08 <__ieee754_asin+0x2e0>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fe39 	bl	80005e8 <__aeabi_dmul>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4630      	mov	r0, r6
 800a97c:	4639      	mov	r1, r7
 800a97e:	f7f5 fc7d 	bl	800027c <__adddf3>
 800a982:	e00b      	b.n	800a99c <__ieee754_asin+0x74>
 800a984:	ee10 2a10 	vmov	r2, s0
 800a988:	462b      	mov	r3, r5
 800a98a:	ee10 0a10 	vmov	r0, s0
 800a98e:	4629      	mov	r1, r5
 800a990:	f7f5 fc72 	bl	8000278 <__aeabi_dsub>
 800a994:	4602      	mov	r2, r0
 800a996:	460b      	mov	r3, r1
 800a998:	f7f5 ff50 	bl	800083c <__aeabi_ddiv>
 800a99c:	4604      	mov	r4, r0
 800a99e:	460d      	mov	r5, r1
 800a9a0:	ec45 4b10 	vmov	d0, r4, r5
 800a9a4:	b003      	add	sp, #12
 800a9a6:	ecbd 8b04 	vpop	{d8-d9}
 800a9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ae:	4baf      	ldr	r3, [pc, #700]	; (800ac6c <__ieee754_asin+0x344>)
 800a9b0:	4598      	cmp	r8, r3
 800a9b2:	dc11      	bgt.n	800a9d8 <__ieee754_asin+0xb0>
 800a9b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a9b8:	f280 80ae 	bge.w	800ab18 <__ieee754_asin+0x1f0>
 800a9bc:	a394      	add	r3, pc, #592	; (adr r3, 800ac10 <__ieee754_asin+0x2e8>)
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	ee10 0a10 	vmov	r0, s0
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	f7f5 fc58 	bl	800027c <__adddf3>
 800a9cc:	4ba8      	ldr	r3, [pc, #672]	; (800ac70 <__ieee754_asin+0x348>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f7f6 f89a 	bl	8000b08 <__aeabi_dcmpgt>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d1e3      	bne.n	800a9a0 <__ieee754_asin+0x78>
 800a9d8:	ec45 4b10 	vmov	d0, r4, r5
 800a9dc:	f001 fbbc 	bl	800c158 <fabs>
 800a9e0:	49a3      	ldr	r1, [pc, #652]	; (800ac70 <__ieee754_asin+0x348>)
 800a9e2:	ec53 2b10 	vmov	r2, r3, d0
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	f7f5 fc46 	bl	8000278 <__aeabi_dsub>
 800a9ec:	4ba1      	ldr	r3, [pc, #644]	; (800ac74 <__ieee754_asin+0x34c>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f7f5 fdfa 	bl	80005e8 <__aeabi_dmul>
 800a9f4:	a388      	add	r3, pc, #544	; (adr r3, 800ac18 <__ieee754_asin+0x2f0>)
 800a9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	460d      	mov	r5, r1
 800a9fe:	f7f5 fdf3 	bl	80005e8 <__aeabi_dmul>
 800aa02:	a387      	add	r3, pc, #540	; (adr r3, 800ac20 <__ieee754_asin+0x2f8>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fc38 	bl	800027c <__adddf3>
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f7f5 fdea 	bl	80005e8 <__aeabi_dmul>
 800aa14:	a384      	add	r3, pc, #528	; (adr r3, 800ac28 <__ieee754_asin+0x300>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	f7f5 fc2d 	bl	8000278 <__aeabi_dsub>
 800aa1e:	4622      	mov	r2, r4
 800aa20:	462b      	mov	r3, r5
 800aa22:	f7f5 fde1 	bl	80005e8 <__aeabi_dmul>
 800aa26:	a382      	add	r3, pc, #520	; (adr r3, 800ac30 <__ieee754_asin+0x308>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7f5 fc26 	bl	800027c <__adddf3>
 800aa30:	4622      	mov	r2, r4
 800aa32:	462b      	mov	r3, r5
 800aa34:	f7f5 fdd8 	bl	80005e8 <__aeabi_dmul>
 800aa38:	a37f      	add	r3, pc, #508	; (adr r3, 800ac38 <__ieee754_asin+0x310>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	f7f5 fc1b 	bl	8000278 <__aeabi_dsub>
 800aa42:	4622      	mov	r2, r4
 800aa44:	462b      	mov	r3, r5
 800aa46:	f7f5 fdcf 	bl	80005e8 <__aeabi_dmul>
 800aa4a:	a37d      	add	r3, pc, #500	; (adr r3, 800ac40 <__ieee754_asin+0x318>)
 800aa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa50:	f7f5 fc14 	bl	800027c <__adddf3>
 800aa54:	4622      	mov	r2, r4
 800aa56:	462b      	mov	r3, r5
 800aa58:	f7f5 fdc6 	bl	80005e8 <__aeabi_dmul>
 800aa5c:	a37a      	add	r3, pc, #488	; (adr r3, 800ac48 <__ieee754_asin+0x320>)
 800aa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa62:	ec41 0b18 	vmov	d8, r0, r1
 800aa66:	4620      	mov	r0, r4
 800aa68:	4629      	mov	r1, r5
 800aa6a:	f7f5 fdbd 	bl	80005e8 <__aeabi_dmul>
 800aa6e:	a378      	add	r3, pc, #480	; (adr r3, 800ac50 <__ieee754_asin+0x328>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 fc00 	bl	8000278 <__aeabi_dsub>
 800aa78:	4622      	mov	r2, r4
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	f7f5 fdb4 	bl	80005e8 <__aeabi_dmul>
 800aa80:	a375      	add	r3, pc, #468	; (adr r3, 800ac58 <__ieee754_asin+0x330>)
 800aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa86:	f7f5 fbf9 	bl	800027c <__adddf3>
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	f7f5 fdab 	bl	80005e8 <__aeabi_dmul>
 800aa92:	a373      	add	r3, pc, #460	; (adr r3, 800ac60 <__ieee754_asin+0x338>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f7f5 fbee 	bl	8000278 <__aeabi_dsub>
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	462b      	mov	r3, r5
 800aaa0:	f7f5 fda2 	bl	80005e8 <__aeabi_dmul>
 800aaa4:	4b72      	ldr	r3, [pc, #456]	; (800ac70 <__ieee754_asin+0x348>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f7f5 fbe8 	bl	800027c <__adddf3>
 800aaac:	ec45 4b10 	vmov	d0, r4, r5
 800aab0:	4606      	mov	r6, r0
 800aab2:	460f      	mov	r7, r1
 800aab4:	f000 fc24 	bl	800b300 <__ieee754_sqrt>
 800aab8:	4b6f      	ldr	r3, [pc, #444]	; (800ac78 <__ieee754_asin+0x350>)
 800aaba:	4598      	cmp	r8, r3
 800aabc:	ec5b ab10 	vmov	sl, fp, d0
 800aac0:	f340 80dc 	ble.w	800ac7c <__ieee754_asin+0x354>
 800aac4:	4632      	mov	r2, r6
 800aac6:	463b      	mov	r3, r7
 800aac8:	ec51 0b18 	vmov	r0, r1, d8
 800aacc:	f7f5 feb6 	bl	800083c <__aeabi_ddiv>
 800aad0:	4652      	mov	r2, sl
 800aad2:	465b      	mov	r3, fp
 800aad4:	f7f5 fd88 	bl	80005e8 <__aeabi_dmul>
 800aad8:	4652      	mov	r2, sl
 800aada:	465b      	mov	r3, fp
 800aadc:	f7f5 fbce 	bl	800027c <__adddf3>
 800aae0:	4602      	mov	r2, r0
 800aae2:	460b      	mov	r3, r1
 800aae4:	f7f5 fbca 	bl	800027c <__adddf3>
 800aae8:	a347      	add	r3, pc, #284	; (adr r3, 800ac08 <__ieee754_asin+0x2e0>)
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	f7f5 fbc3 	bl	8000278 <__aeabi_dsub>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	a142      	add	r1, pc, #264	; (adr r1, 800ac00 <__ieee754_asin+0x2d8>)
 800aaf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafc:	f7f5 fbbc 	bl	8000278 <__aeabi_dsub>
 800ab00:	9b01      	ldr	r3, [sp, #4]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bfdc      	itt	le
 800ab06:	4602      	movle	r2, r0
 800ab08:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	460d      	mov	r5, r1
 800ab10:	bfdc      	itt	le
 800ab12:	4614      	movle	r4, r2
 800ab14:	461d      	movle	r5, r3
 800ab16:	e743      	b.n	800a9a0 <__ieee754_asin+0x78>
 800ab18:	ee10 2a10 	vmov	r2, s0
 800ab1c:	ee10 0a10 	vmov	r0, s0
 800ab20:	462b      	mov	r3, r5
 800ab22:	4629      	mov	r1, r5
 800ab24:	f7f5 fd60 	bl	80005e8 <__aeabi_dmul>
 800ab28:	a33b      	add	r3, pc, #236	; (adr r3, 800ac18 <__ieee754_asin+0x2f0>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	4606      	mov	r6, r0
 800ab30:	460f      	mov	r7, r1
 800ab32:	f7f5 fd59 	bl	80005e8 <__aeabi_dmul>
 800ab36:	a33a      	add	r3, pc, #232	; (adr r3, 800ac20 <__ieee754_asin+0x2f8>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f7f5 fb9e 	bl	800027c <__adddf3>
 800ab40:	4632      	mov	r2, r6
 800ab42:	463b      	mov	r3, r7
 800ab44:	f7f5 fd50 	bl	80005e8 <__aeabi_dmul>
 800ab48:	a337      	add	r3, pc, #220	; (adr r3, 800ac28 <__ieee754_asin+0x300>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fb93 	bl	8000278 <__aeabi_dsub>
 800ab52:	4632      	mov	r2, r6
 800ab54:	463b      	mov	r3, r7
 800ab56:	f7f5 fd47 	bl	80005e8 <__aeabi_dmul>
 800ab5a:	a335      	add	r3, pc, #212	; (adr r3, 800ac30 <__ieee754_asin+0x308>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f7f5 fb8c 	bl	800027c <__adddf3>
 800ab64:	4632      	mov	r2, r6
 800ab66:	463b      	mov	r3, r7
 800ab68:	f7f5 fd3e 	bl	80005e8 <__aeabi_dmul>
 800ab6c:	a332      	add	r3, pc, #200	; (adr r3, 800ac38 <__ieee754_asin+0x310>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f7f5 fb81 	bl	8000278 <__aeabi_dsub>
 800ab76:	4632      	mov	r2, r6
 800ab78:	463b      	mov	r3, r7
 800ab7a:	f7f5 fd35 	bl	80005e8 <__aeabi_dmul>
 800ab7e:	a330      	add	r3, pc, #192	; (adr r3, 800ac40 <__ieee754_asin+0x318>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f7f5 fb7a 	bl	800027c <__adddf3>
 800ab88:	4632      	mov	r2, r6
 800ab8a:	463b      	mov	r3, r7
 800ab8c:	f7f5 fd2c 	bl	80005e8 <__aeabi_dmul>
 800ab90:	a32d      	add	r3, pc, #180	; (adr r3, 800ac48 <__ieee754_asin+0x320>)
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	4680      	mov	r8, r0
 800ab98:	4689      	mov	r9, r1
 800ab9a:	4630      	mov	r0, r6
 800ab9c:	4639      	mov	r1, r7
 800ab9e:	f7f5 fd23 	bl	80005e8 <__aeabi_dmul>
 800aba2:	a32b      	add	r3, pc, #172	; (adr r3, 800ac50 <__ieee754_asin+0x328>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	f7f5 fb66 	bl	8000278 <__aeabi_dsub>
 800abac:	4632      	mov	r2, r6
 800abae:	463b      	mov	r3, r7
 800abb0:	f7f5 fd1a 	bl	80005e8 <__aeabi_dmul>
 800abb4:	a328      	add	r3, pc, #160	; (adr r3, 800ac58 <__ieee754_asin+0x330>)
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	f7f5 fb5f 	bl	800027c <__adddf3>
 800abbe:	4632      	mov	r2, r6
 800abc0:	463b      	mov	r3, r7
 800abc2:	f7f5 fd11 	bl	80005e8 <__aeabi_dmul>
 800abc6:	a326      	add	r3, pc, #152	; (adr r3, 800ac60 <__ieee754_asin+0x338>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	f7f5 fb54 	bl	8000278 <__aeabi_dsub>
 800abd0:	4632      	mov	r2, r6
 800abd2:	463b      	mov	r3, r7
 800abd4:	f7f5 fd08 	bl	80005e8 <__aeabi_dmul>
 800abd8:	4b25      	ldr	r3, [pc, #148]	; (800ac70 <__ieee754_asin+0x348>)
 800abda:	2200      	movs	r2, #0
 800abdc:	f7f5 fb4e 	bl	800027c <__adddf3>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4640      	mov	r0, r8
 800abe6:	4649      	mov	r1, r9
 800abe8:	f7f5 fe28 	bl	800083c <__aeabi_ddiv>
 800abec:	4622      	mov	r2, r4
 800abee:	462b      	mov	r3, r5
 800abf0:	f7f5 fcfa 	bl	80005e8 <__aeabi_dmul>
 800abf4:	4602      	mov	r2, r0
 800abf6:	460b      	mov	r3, r1
 800abf8:	4620      	mov	r0, r4
 800abfa:	4629      	mov	r1, r5
 800abfc:	e6bf      	b.n	800a97e <__ieee754_asin+0x56>
 800abfe:	bf00      	nop
 800ac00:	54442d18 	.word	0x54442d18
 800ac04:	3ff921fb 	.word	0x3ff921fb
 800ac08:	33145c07 	.word	0x33145c07
 800ac0c:	3c91a626 	.word	0x3c91a626
 800ac10:	8800759c 	.word	0x8800759c
 800ac14:	7e37e43c 	.word	0x7e37e43c
 800ac18:	0dfdf709 	.word	0x0dfdf709
 800ac1c:	3f023de1 	.word	0x3f023de1
 800ac20:	7501b288 	.word	0x7501b288
 800ac24:	3f49efe0 	.word	0x3f49efe0
 800ac28:	b5688f3b 	.word	0xb5688f3b
 800ac2c:	3fa48228 	.word	0x3fa48228
 800ac30:	0e884455 	.word	0x0e884455
 800ac34:	3fc9c155 	.word	0x3fc9c155
 800ac38:	03eb6f7d 	.word	0x03eb6f7d
 800ac3c:	3fd4d612 	.word	0x3fd4d612
 800ac40:	55555555 	.word	0x55555555
 800ac44:	3fc55555 	.word	0x3fc55555
 800ac48:	b12e9282 	.word	0xb12e9282
 800ac4c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ac50:	1b8d0159 	.word	0x1b8d0159
 800ac54:	3fe6066c 	.word	0x3fe6066c
 800ac58:	9c598ac8 	.word	0x9c598ac8
 800ac5c:	40002ae5 	.word	0x40002ae5
 800ac60:	1c8a2d4b 	.word	0x1c8a2d4b
 800ac64:	40033a27 	.word	0x40033a27
 800ac68:	3fefffff 	.word	0x3fefffff
 800ac6c:	3fdfffff 	.word	0x3fdfffff
 800ac70:	3ff00000 	.word	0x3ff00000
 800ac74:	3fe00000 	.word	0x3fe00000
 800ac78:	3fef3332 	.word	0x3fef3332
 800ac7c:	ee10 2a10 	vmov	r2, s0
 800ac80:	ee10 0a10 	vmov	r0, s0
 800ac84:	465b      	mov	r3, fp
 800ac86:	4659      	mov	r1, fp
 800ac88:	f7f5 faf8 	bl	800027c <__adddf3>
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	463b      	mov	r3, r7
 800ac90:	ec41 0b19 	vmov	d9, r0, r1
 800ac94:	ec51 0b18 	vmov	r0, r1, d8
 800ac98:	f7f5 fdd0 	bl	800083c <__aeabi_ddiv>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	ec51 0b19 	vmov	r0, r1, d9
 800aca4:	f7f5 fca0 	bl	80005e8 <__aeabi_dmul>
 800aca8:	f04f 0800 	mov.w	r8, #0
 800acac:	4606      	mov	r6, r0
 800acae:	460f      	mov	r7, r1
 800acb0:	4642      	mov	r2, r8
 800acb2:	465b      	mov	r3, fp
 800acb4:	4640      	mov	r0, r8
 800acb6:	4659      	mov	r1, fp
 800acb8:	f7f5 fc96 	bl	80005e8 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4620      	mov	r0, r4
 800acc2:	4629      	mov	r1, r5
 800acc4:	f7f5 fad8 	bl	8000278 <__aeabi_dsub>
 800acc8:	4642      	mov	r2, r8
 800acca:	4604      	mov	r4, r0
 800accc:	460d      	mov	r5, r1
 800acce:	465b      	mov	r3, fp
 800acd0:	4650      	mov	r0, sl
 800acd2:	4659      	mov	r1, fp
 800acd4:	f7f5 fad2 	bl	800027c <__adddf3>
 800acd8:	4602      	mov	r2, r0
 800acda:	460b      	mov	r3, r1
 800acdc:	4620      	mov	r0, r4
 800acde:	4629      	mov	r1, r5
 800ace0:	f7f5 fdac 	bl	800083c <__aeabi_ddiv>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	f7f5 fac8 	bl	800027c <__adddf3>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	a113      	add	r1, pc, #76	; (adr r1, 800ad40 <__ieee754_asin+0x418>)
 800acf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acf6:	f7f5 fabf 	bl	8000278 <__aeabi_dsub>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4630      	mov	r0, r6
 800ad00:	4639      	mov	r1, r7
 800ad02:	f7f5 fab9 	bl	8000278 <__aeabi_dsub>
 800ad06:	4642      	mov	r2, r8
 800ad08:	4604      	mov	r4, r0
 800ad0a:	460d      	mov	r5, r1
 800ad0c:	465b      	mov	r3, fp
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4659      	mov	r1, fp
 800ad12:	f7f5 fab3 	bl	800027c <__adddf3>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	a10b      	add	r1, pc, #44	; (adr r1, 800ad48 <__ieee754_asin+0x420>)
 800ad1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad20:	f7f5 faaa 	bl	8000278 <__aeabi_dsub>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4629      	mov	r1, r5
 800ad2c:	f7f5 faa4 	bl	8000278 <__aeabi_dsub>
 800ad30:	4602      	mov	r2, r0
 800ad32:	460b      	mov	r3, r1
 800ad34:	a104      	add	r1, pc, #16	; (adr r1, 800ad48 <__ieee754_asin+0x420>)
 800ad36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad3a:	e6df      	b.n	800aafc <__ieee754_asin+0x1d4>
 800ad3c:	f3af 8000 	nop.w
 800ad40:	33145c07 	.word	0x33145c07
 800ad44:	3c91a626 	.word	0x3c91a626
 800ad48:	54442d18 	.word	0x54442d18
 800ad4c:	3fe921fb 	.word	0x3fe921fb

0800ad50 <__ieee754_atan2>:
 800ad50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad54:	ec57 6b11 	vmov	r6, r7, d1
 800ad58:	4273      	negs	r3, r6
 800ad5a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800aee0 <__ieee754_atan2+0x190>
 800ad5e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ad62:	4333      	orrs	r3, r6
 800ad64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ad68:	4573      	cmp	r3, lr
 800ad6a:	ec51 0b10 	vmov	r0, r1, d0
 800ad6e:	ee11 8a10 	vmov	r8, s2
 800ad72:	d80a      	bhi.n	800ad8a <__ieee754_atan2+0x3a>
 800ad74:	4244      	negs	r4, r0
 800ad76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad7a:	4304      	orrs	r4, r0
 800ad7c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ad80:	4574      	cmp	r4, lr
 800ad82:	ee10 9a10 	vmov	r9, s0
 800ad86:	468c      	mov	ip, r1
 800ad88:	d907      	bls.n	800ad9a <__ieee754_atan2+0x4a>
 800ad8a:	4632      	mov	r2, r6
 800ad8c:	463b      	mov	r3, r7
 800ad8e:	f7f5 fa75 	bl	800027c <__adddf3>
 800ad92:	ec41 0b10 	vmov	d0, r0, r1
 800ad96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad9a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ad9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ada2:	4334      	orrs	r4, r6
 800ada4:	d103      	bne.n	800adae <__ieee754_atan2+0x5e>
 800ada6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adaa:	f001 b835 	b.w	800be18 <atan>
 800adae:	17bc      	asrs	r4, r7, #30
 800adb0:	f004 0402 	and.w	r4, r4, #2
 800adb4:	ea53 0909 	orrs.w	r9, r3, r9
 800adb8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800adbc:	d107      	bne.n	800adce <__ieee754_atan2+0x7e>
 800adbe:	2c02      	cmp	r4, #2
 800adc0:	d060      	beq.n	800ae84 <__ieee754_atan2+0x134>
 800adc2:	2c03      	cmp	r4, #3
 800adc4:	d1e5      	bne.n	800ad92 <__ieee754_atan2+0x42>
 800adc6:	a142      	add	r1, pc, #264	; (adr r1, 800aed0 <__ieee754_atan2+0x180>)
 800adc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adcc:	e7e1      	b.n	800ad92 <__ieee754_atan2+0x42>
 800adce:	ea52 0808 	orrs.w	r8, r2, r8
 800add2:	d106      	bne.n	800ade2 <__ieee754_atan2+0x92>
 800add4:	f1bc 0f00 	cmp.w	ip, #0
 800add8:	da5f      	bge.n	800ae9a <__ieee754_atan2+0x14a>
 800adda:	a13f      	add	r1, pc, #252	; (adr r1, 800aed8 <__ieee754_atan2+0x188>)
 800addc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ade0:	e7d7      	b.n	800ad92 <__ieee754_atan2+0x42>
 800ade2:	4572      	cmp	r2, lr
 800ade4:	d10f      	bne.n	800ae06 <__ieee754_atan2+0xb6>
 800ade6:	4293      	cmp	r3, r2
 800ade8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800adec:	d107      	bne.n	800adfe <__ieee754_atan2+0xae>
 800adee:	2c02      	cmp	r4, #2
 800adf0:	d84c      	bhi.n	800ae8c <__ieee754_atan2+0x13c>
 800adf2:	4b35      	ldr	r3, [pc, #212]	; (800aec8 <__ieee754_atan2+0x178>)
 800adf4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800adf8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800adfc:	e7c9      	b.n	800ad92 <__ieee754_atan2+0x42>
 800adfe:	2c02      	cmp	r4, #2
 800ae00:	d848      	bhi.n	800ae94 <__ieee754_atan2+0x144>
 800ae02:	4b32      	ldr	r3, [pc, #200]	; (800aecc <__ieee754_atan2+0x17c>)
 800ae04:	e7f6      	b.n	800adf4 <__ieee754_atan2+0xa4>
 800ae06:	4573      	cmp	r3, lr
 800ae08:	d0e4      	beq.n	800add4 <__ieee754_atan2+0x84>
 800ae0a:	1a9b      	subs	r3, r3, r2
 800ae0c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ae10:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae14:	da1e      	bge.n	800ae54 <__ieee754_atan2+0x104>
 800ae16:	2f00      	cmp	r7, #0
 800ae18:	da01      	bge.n	800ae1e <__ieee754_atan2+0xce>
 800ae1a:	323c      	adds	r2, #60	; 0x3c
 800ae1c:	db1e      	blt.n	800ae5c <__ieee754_atan2+0x10c>
 800ae1e:	4632      	mov	r2, r6
 800ae20:	463b      	mov	r3, r7
 800ae22:	f7f5 fd0b 	bl	800083c <__aeabi_ddiv>
 800ae26:	ec41 0b10 	vmov	d0, r0, r1
 800ae2a:	f001 f995 	bl	800c158 <fabs>
 800ae2e:	f000 fff3 	bl	800be18 <atan>
 800ae32:	ec51 0b10 	vmov	r0, r1, d0
 800ae36:	2c01      	cmp	r4, #1
 800ae38:	d013      	beq.n	800ae62 <__ieee754_atan2+0x112>
 800ae3a:	2c02      	cmp	r4, #2
 800ae3c:	d015      	beq.n	800ae6a <__ieee754_atan2+0x11a>
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	d0a7      	beq.n	800ad92 <__ieee754_atan2+0x42>
 800ae42:	a319      	add	r3, pc, #100	; (adr r3, 800aea8 <__ieee754_atan2+0x158>)
 800ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae48:	f7f5 fa16 	bl	8000278 <__aeabi_dsub>
 800ae4c:	a318      	add	r3, pc, #96	; (adr r3, 800aeb0 <__ieee754_atan2+0x160>)
 800ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae52:	e014      	b.n	800ae7e <__ieee754_atan2+0x12e>
 800ae54:	a118      	add	r1, pc, #96	; (adr r1, 800aeb8 <__ieee754_atan2+0x168>)
 800ae56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae5a:	e7ec      	b.n	800ae36 <__ieee754_atan2+0xe6>
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	2100      	movs	r1, #0
 800ae60:	e7e9      	b.n	800ae36 <__ieee754_atan2+0xe6>
 800ae62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae66:	4619      	mov	r1, r3
 800ae68:	e793      	b.n	800ad92 <__ieee754_atan2+0x42>
 800ae6a:	a30f      	add	r3, pc, #60	; (adr r3, 800aea8 <__ieee754_atan2+0x158>)
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	f7f5 fa02 	bl	8000278 <__aeabi_dsub>
 800ae74:	4602      	mov	r2, r0
 800ae76:	460b      	mov	r3, r1
 800ae78:	a10d      	add	r1, pc, #52	; (adr r1, 800aeb0 <__ieee754_atan2+0x160>)
 800ae7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7e:	f7f5 f9fb 	bl	8000278 <__aeabi_dsub>
 800ae82:	e786      	b.n	800ad92 <__ieee754_atan2+0x42>
 800ae84:	a10a      	add	r1, pc, #40	; (adr r1, 800aeb0 <__ieee754_atan2+0x160>)
 800ae86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae8a:	e782      	b.n	800ad92 <__ieee754_atan2+0x42>
 800ae8c:	a10c      	add	r1, pc, #48	; (adr r1, 800aec0 <__ieee754_atan2+0x170>)
 800ae8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae92:	e77e      	b.n	800ad92 <__ieee754_atan2+0x42>
 800ae94:	2000      	movs	r0, #0
 800ae96:	2100      	movs	r1, #0
 800ae98:	e77b      	b.n	800ad92 <__ieee754_atan2+0x42>
 800ae9a:	a107      	add	r1, pc, #28	; (adr r1, 800aeb8 <__ieee754_atan2+0x168>)
 800ae9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea0:	e777      	b.n	800ad92 <__ieee754_atan2+0x42>
 800aea2:	bf00      	nop
 800aea4:	f3af 8000 	nop.w
 800aea8:	33145c07 	.word	0x33145c07
 800aeac:	3ca1a626 	.word	0x3ca1a626
 800aeb0:	54442d18 	.word	0x54442d18
 800aeb4:	400921fb 	.word	0x400921fb
 800aeb8:	54442d18 	.word	0x54442d18
 800aebc:	3ff921fb 	.word	0x3ff921fb
 800aec0:	54442d18 	.word	0x54442d18
 800aec4:	3fe921fb 	.word	0x3fe921fb
 800aec8:	0800d008 	.word	0x0800d008
 800aecc:	0800d020 	.word	0x0800d020
 800aed0:	54442d18 	.word	0x54442d18
 800aed4:	c00921fb 	.word	0xc00921fb
 800aed8:	54442d18 	.word	0x54442d18
 800aedc:	bff921fb 	.word	0xbff921fb
 800aee0:	7ff00000 	.word	0x7ff00000
 800aee4:	00000000 	.word	0x00000000

0800aee8 <__ieee754_rem_pio2>:
 800aee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeec:	ed2d 8b02 	vpush	{d8}
 800aef0:	ec55 4b10 	vmov	r4, r5, d0
 800aef4:	4bca      	ldr	r3, [pc, #808]	; (800b220 <__ieee754_rem_pio2+0x338>)
 800aef6:	b08b      	sub	sp, #44	; 0x2c
 800aef8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800aefc:	4598      	cmp	r8, r3
 800aefe:	4682      	mov	sl, r0
 800af00:	9502      	str	r5, [sp, #8]
 800af02:	dc08      	bgt.n	800af16 <__ieee754_rem_pio2+0x2e>
 800af04:	2200      	movs	r2, #0
 800af06:	2300      	movs	r3, #0
 800af08:	ed80 0b00 	vstr	d0, [r0]
 800af0c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800af10:	f04f 0b00 	mov.w	fp, #0
 800af14:	e028      	b.n	800af68 <__ieee754_rem_pio2+0x80>
 800af16:	4bc3      	ldr	r3, [pc, #780]	; (800b224 <__ieee754_rem_pio2+0x33c>)
 800af18:	4598      	cmp	r8, r3
 800af1a:	dc78      	bgt.n	800b00e <__ieee754_rem_pio2+0x126>
 800af1c:	9b02      	ldr	r3, [sp, #8]
 800af1e:	4ec2      	ldr	r6, [pc, #776]	; (800b228 <__ieee754_rem_pio2+0x340>)
 800af20:	2b00      	cmp	r3, #0
 800af22:	ee10 0a10 	vmov	r0, s0
 800af26:	a3b0      	add	r3, pc, #704	; (adr r3, 800b1e8 <__ieee754_rem_pio2+0x300>)
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	4629      	mov	r1, r5
 800af2e:	dd39      	ble.n	800afa4 <__ieee754_rem_pio2+0xbc>
 800af30:	f7f5 f9a2 	bl	8000278 <__aeabi_dsub>
 800af34:	45b0      	cmp	r8, r6
 800af36:	4604      	mov	r4, r0
 800af38:	460d      	mov	r5, r1
 800af3a:	d01b      	beq.n	800af74 <__ieee754_rem_pio2+0x8c>
 800af3c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x308>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7f5 f999 	bl	8000278 <__aeabi_dsub>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	e9ca 2300 	strd	r2, r3, [sl]
 800af4e:	4620      	mov	r0, r4
 800af50:	4629      	mov	r1, r5
 800af52:	f7f5 f991 	bl	8000278 <__aeabi_dsub>
 800af56:	a3a6      	add	r3, pc, #664	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x308>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f7f5 f98c 	bl	8000278 <__aeabi_dsub>
 800af60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800af64:	f04f 0b01 	mov.w	fp, #1
 800af68:	4658      	mov	r0, fp
 800af6a:	b00b      	add	sp, #44	; 0x2c
 800af6c:	ecbd 8b02 	vpop	{d8}
 800af70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af74:	a3a0      	add	r3, pc, #640	; (adr r3, 800b1f8 <__ieee754_rem_pio2+0x310>)
 800af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7a:	f7f5 f97d 	bl	8000278 <__aeabi_dsub>
 800af7e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b200 <__ieee754_rem_pio2+0x318>)
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	4604      	mov	r4, r0
 800af86:	460d      	mov	r5, r1
 800af88:	f7f5 f976 	bl	8000278 <__aeabi_dsub>
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	e9ca 2300 	strd	r2, r3, [sl]
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 f96e 	bl	8000278 <__aeabi_dsub>
 800af9c:	a398      	add	r3, pc, #608	; (adr r3, 800b200 <__ieee754_rem_pio2+0x318>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	e7db      	b.n	800af5c <__ieee754_rem_pio2+0x74>
 800afa4:	f7f5 f96a 	bl	800027c <__adddf3>
 800afa8:	45b0      	cmp	r8, r6
 800afaa:	4604      	mov	r4, r0
 800afac:	460d      	mov	r5, r1
 800afae:	d016      	beq.n	800afde <__ieee754_rem_pio2+0xf6>
 800afb0:	a38f      	add	r3, pc, #572	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x308>)
 800afb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb6:	f7f5 f961 	bl	800027c <__adddf3>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	e9ca 2300 	strd	r2, r3, [sl]
 800afc2:	4620      	mov	r0, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	f7f5 f957 	bl	8000278 <__aeabi_dsub>
 800afca:	a389      	add	r3, pc, #548	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x308>)
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 f954 	bl	800027c <__adddf3>
 800afd4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800afd8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800afdc:	e7c4      	b.n	800af68 <__ieee754_rem_pio2+0x80>
 800afde:	a386      	add	r3, pc, #536	; (adr r3, 800b1f8 <__ieee754_rem_pio2+0x310>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f7f5 f94a 	bl	800027c <__adddf3>
 800afe8:	a385      	add	r3, pc, #532	; (adr r3, 800b200 <__ieee754_rem_pio2+0x318>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	4604      	mov	r4, r0
 800aff0:	460d      	mov	r5, r1
 800aff2:	f7f5 f943 	bl	800027c <__adddf3>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	e9ca 2300 	strd	r2, r3, [sl]
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	f7f5 f939 	bl	8000278 <__aeabi_dsub>
 800b006:	a37e      	add	r3, pc, #504	; (adr r3, 800b200 <__ieee754_rem_pio2+0x318>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	e7e0      	b.n	800afd0 <__ieee754_rem_pio2+0xe8>
 800b00e:	4b87      	ldr	r3, [pc, #540]	; (800b22c <__ieee754_rem_pio2+0x344>)
 800b010:	4598      	cmp	r8, r3
 800b012:	f300 80d9 	bgt.w	800b1c8 <__ieee754_rem_pio2+0x2e0>
 800b016:	f001 f89f 	bl	800c158 <fabs>
 800b01a:	ec55 4b10 	vmov	r4, r5, d0
 800b01e:	ee10 0a10 	vmov	r0, s0
 800b022:	a379      	add	r3, pc, #484	; (adr r3, 800b208 <__ieee754_rem_pio2+0x320>)
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	4629      	mov	r1, r5
 800b02a:	f7f5 fadd 	bl	80005e8 <__aeabi_dmul>
 800b02e:	4b80      	ldr	r3, [pc, #512]	; (800b230 <__ieee754_rem_pio2+0x348>)
 800b030:	2200      	movs	r2, #0
 800b032:	f7f5 f923 	bl	800027c <__adddf3>
 800b036:	f7f5 fd87 	bl	8000b48 <__aeabi_d2iz>
 800b03a:	4683      	mov	fp, r0
 800b03c:	f7f5 fa6a 	bl	8000514 <__aeabi_i2d>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	ec43 2b18 	vmov	d8, r2, r3
 800b048:	a367      	add	r3, pc, #412	; (adr r3, 800b1e8 <__ieee754_rem_pio2+0x300>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f7f5 facb 	bl	80005e8 <__aeabi_dmul>
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	4620      	mov	r0, r4
 800b058:	4629      	mov	r1, r5
 800b05a:	f7f5 f90d 	bl	8000278 <__aeabi_dsub>
 800b05e:	a364      	add	r3, pc, #400	; (adr r3, 800b1f0 <__ieee754_rem_pio2+0x308>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	4606      	mov	r6, r0
 800b066:	460f      	mov	r7, r1
 800b068:	ec51 0b18 	vmov	r0, r1, d8
 800b06c:	f7f5 fabc 	bl	80005e8 <__aeabi_dmul>
 800b070:	f1bb 0f1f 	cmp.w	fp, #31
 800b074:	4604      	mov	r4, r0
 800b076:	460d      	mov	r5, r1
 800b078:	dc0d      	bgt.n	800b096 <__ieee754_rem_pio2+0x1ae>
 800b07a:	4b6e      	ldr	r3, [pc, #440]	; (800b234 <__ieee754_rem_pio2+0x34c>)
 800b07c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	4543      	cmp	r3, r8
 800b086:	d006      	beq.n	800b096 <__ieee754_rem_pio2+0x1ae>
 800b088:	4622      	mov	r2, r4
 800b08a:	462b      	mov	r3, r5
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 f8f2 	bl	8000278 <__aeabi_dsub>
 800b094:	e00f      	b.n	800b0b6 <__ieee754_rem_pio2+0x1ce>
 800b096:	462b      	mov	r3, r5
 800b098:	4622      	mov	r2, r4
 800b09a:	4630      	mov	r0, r6
 800b09c:	4639      	mov	r1, r7
 800b09e:	f7f5 f8eb 	bl	8000278 <__aeabi_dsub>
 800b0a2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0ac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b0b0:	f1b8 0f10 	cmp.w	r8, #16
 800b0b4:	dc02      	bgt.n	800b0bc <__ieee754_rem_pio2+0x1d4>
 800b0b6:	e9ca 0100 	strd	r0, r1, [sl]
 800b0ba:	e039      	b.n	800b130 <__ieee754_rem_pio2+0x248>
 800b0bc:	a34e      	add	r3, pc, #312	; (adr r3, 800b1f8 <__ieee754_rem_pio2+0x310>)
 800b0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c2:	ec51 0b18 	vmov	r0, r1, d8
 800b0c6:	f7f5 fa8f 	bl	80005e8 <__aeabi_dmul>
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	f7f5 f8cf 	bl	8000278 <__aeabi_dsub>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	460b      	mov	r3, r1
 800b0de:	4680      	mov	r8, r0
 800b0e0:	4689      	mov	r9, r1
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	f7f5 f8c7 	bl	8000278 <__aeabi_dsub>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	462b      	mov	r3, r5
 800b0ee:	f7f5 f8c3 	bl	8000278 <__aeabi_dsub>
 800b0f2:	a343      	add	r3, pc, #268	; (adr r3, 800b200 <__ieee754_rem_pio2+0x318>)
 800b0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	460d      	mov	r5, r1
 800b0fc:	ec51 0b18 	vmov	r0, r1, d8
 800b100:	f7f5 fa72 	bl	80005e8 <__aeabi_dmul>
 800b104:	4622      	mov	r2, r4
 800b106:	462b      	mov	r3, r5
 800b108:	f7f5 f8b6 	bl	8000278 <__aeabi_dsub>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	4640      	mov	r0, r8
 800b116:	4649      	mov	r1, r9
 800b118:	f7f5 f8ae 	bl	8000278 <__aeabi_dsub>
 800b11c:	9a03      	ldr	r2, [sp, #12]
 800b11e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	2b31      	cmp	r3, #49	; 0x31
 800b126:	dc24      	bgt.n	800b172 <__ieee754_rem_pio2+0x28a>
 800b128:	e9ca 0100 	strd	r0, r1, [sl]
 800b12c:	4646      	mov	r6, r8
 800b12e:	464f      	mov	r7, r9
 800b130:	e9da 8900 	ldrd	r8, r9, [sl]
 800b134:	4630      	mov	r0, r6
 800b136:	4642      	mov	r2, r8
 800b138:	464b      	mov	r3, r9
 800b13a:	4639      	mov	r1, r7
 800b13c:	f7f5 f89c 	bl	8000278 <__aeabi_dsub>
 800b140:	462b      	mov	r3, r5
 800b142:	4622      	mov	r2, r4
 800b144:	f7f5 f898 	bl	8000278 <__aeabi_dsub>
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b150:	f6bf af0a 	bge.w	800af68 <__ieee754_rem_pio2+0x80>
 800b154:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b158:	f8ca 3004 	str.w	r3, [sl, #4]
 800b15c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b160:	f8ca 8000 	str.w	r8, [sl]
 800b164:	f8ca 0008 	str.w	r0, [sl, #8]
 800b168:	f8ca 300c 	str.w	r3, [sl, #12]
 800b16c:	f1cb 0b00 	rsb	fp, fp, #0
 800b170:	e6fa      	b.n	800af68 <__ieee754_rem_pio2+0x80>
 800b172:	a327      	add	r3, pc, #156	; (adr r3, 800b210 <__ieee754_rem_pio2+0x328>)
 800b174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b178:	ec51 0b18 	vmov	r0, r1, d8
 800b17c:	f7f5 fa34 	bl	80005e8 <__aeabi_dmul>
 800b180:	4604      	mov	r4, r0
 800b182:	460d      	mov	r5, r1
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	4640      	mov	r0, r8
 800b18a:	4649      	mov	r1, r9
 800b18c:	f7f5 f874 	bl	8000278 <__aeabi_dsub>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4606      	mov	r6, r0
 800b196:	460f      	mov	r7, r1
 800b198:	4640      	mov	r0, r8
 800b19a:	4649      	mov	r1, r9
 800b19c:	f7f5 f86c 	bl	8000278 <__aeabi_dsub>
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	f7f5 f868 	bl	8000278 <__aeabi_dsub>
 800b1a8:	a31b      	add	r3, pc, #108	; (adr r3, 800b218 <__ieee754_rem_pio2+0x330>)
 800b1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	460d      	mov	r5, r1
 800b1b2:	ec51 0b18 	vmov	r0, r1, d8
 800b1b6:	f7f5 fa17 	bl	80005e8 <__aeabi_dmul>
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	462b      	mov	r3, r5
 800b1be:	f7f5 f85b 	bl	8000278 <__aeabi_dsub>
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	460d      	mov	r5, r1
 800b1c6:	e75f      	b.n	800b088 <__ieee754_rem_pio2+0x1a0>
 800b1c8:	4b1b      	ldr	r3, [pc, #108]	; (800b238 <__ieee754_rem_pio2+0x350>)
 800b1ca:	4598      	cmp	r8, r3
 800b1cc:	dd36      	ble.n	800b23c <__ieee754_rem_pio2+0x354>
 800b1ce:	ee10 2a10 	vmov	r2, s0
 800b1d2:	462b      	mov	r3, r5
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f5 f84e 	bl	8000278 <__aeabi_dsub>
 800b1dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b1e0:	e9ca 0100 	strd	r0, r1, [sl]
 800b1e4:	e694      	b.n	800af10 <__ieee754_rem_pio2+0x28>
 800b1e6:	bf00      	nop
 800b1e8:	54400000 	.word	0x54400000
 800b1ec:	3ff921fb 	.word	0x3ff921fb
 800b1f0:	1a626331 	.word	0x1a626331
 800b1f4:	3dd0b461 	.word	0x3dd0b461
 800b1f8:	1a600000 	.word	0x1a600000
 800b1fc:	3dd0b461 	.word	0x3dd0b461
 800b200:	2e037073 	.word	0x2e037073
 800b204:	3ba3198a 	.word	0x3ba3198a
 800b208:	6dc9c883 	.word	0x6dc9c883
 800b20c:	3fe45f30 	.word	0x3fe45f30
 800b210:	2e000000 	.word	0x2e000000
 800b214:	3ba3198a 	.word	0x3ba3198a
 800b218:	252049c1 	.word	0x252049c1
 800b21c:	397b839a 	.word	0x397b839a
 800b220:	3fe921fb 	.word	0x3fe921fb
 800b224:	4002d97b 	.word	0x4002d97b
 800b228:	3ff921fb 	.word	0x3ff921fb
 800b22c:	413921fb 	.word	0x413921fb
 800b230:	3fe00000 	.word	0x3fe00000
 800b234:	0800d038 	.word	0x0800d038
 800b238:	7fefffff 	.word	0x7fefffff
 800b23c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b240:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b244:	ee10 0a10 	vmov	r0, s0
 800b248:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b24c:	ee10 6a10 	vmov	r6, s0
 800b250:	460f      	mov	r7, r1
 800b252:	f7f5 fc79 	bl	8000b48 <__aeabi_d2iz>
 800b256:	f7f5 f95d 	bl	8000514 <__aeabi_i2d>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4630      	mov	r0, r6
 800b260:	4639      	mov	r1, r7
 800b262:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b266:	f7f5 f807 	bl	8000278 <__aeabi_dsub>
 800b26a:	4b23      	ldr	r3, [pc, #140]	; (800b2f8 <__ieee754_rem_pio2+0x410>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	f7f5 f9bb 	bl	80005e8 <__aeabi_dmul>
 800b272:	460f      	mov	r7, r1
 800b274:	4606      	mov	r6, r0
 800b276:	f7f5 fc67 	bl	8000b48 <__aeabi_d2iz>
 800b27a:	f7f5 f94b 	bl	8000514 <__aeabi_i2d>
 800b27e:	4602      	mov	r2, r0
 800b280:	460b      	mov	r3, r1
 800b282:	4630      	mov	r0, r6
 800b284:	4639      	mov	r1, r7
 800b286:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b28a:	f7f4 fff5 	bl	8000278 <__aeabi_dsub>
 800b28e:	4b1a      	ldr	r3, [pc, #104]	; (800b2f8 <__ieee754_rem_pio2+0x410>)
 800b290:	2200      	movs	r2, #0
 800b292:	f7f5 f9a9 	bl	80005e8 <__aeabi_dmul>
 800b296:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b29a:	ad04      	add	r5, sp, #16
 800b29c:	f04f 0803 	mov.w	r8, #3
 800b2a0:	46a9      	mov	r9, r5
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	2700      	movs	r7, #0
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b2ae:	46c3      	mov	fp, r8
 800b2b0:	3d08      	subs	r5, #8
 800b2b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b2b6:	f7f5 fbff 	bl	8000ab8 <__aeabi_dcmpeq>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d1f3      	bne.n	800b2a6 <__ieee754_rem_pio2+0x3be>
 800b2be:	4b0f      	ldr	r3, [pc, #60]	; (800b2fc <__ieee754_rem_pio2+0x414>)
 800b2c0:	9301      	str	r3, [sp, #4]
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	4622      	mov	r2, r4
 800b2c8:	465b      	mov	r3, fp
 800b2ca:	4651      	mov	r1, sl
 800b2cc:	4648      	mov	r0, r9
 800b2ce:	f000 f993 	bl	800b5f8 <__kernel_rem_pio2>
 800b2d2:	9b02      	ldr	r3, [sp, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	4683      	mov	fp, r0
 800b2d8:	f6bf ae46 	bge.w	800af68 <__ieee754_rem_pio2+0x80>
 800b2dc:	e9da 2100 	ldrd	r2, r1, [sl]
 800b2e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2e4:	e9ca 2300 	strd	r2, r3, [sl]
 800b2e8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b2ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2f0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b2f4:	e73a      	b.n	800b16c <__ieee754_rem_pio2+0x284>
 800b2f6:	bf00      	nop
 800b2f8:	41700000 	.word	0x41700000
 800b2fc:	0800d0b8 	.word	0x0800d0b8

0800b300 <__ieee754_sqrt>:
 800b300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b304:	ec55 4b10 	vmov	r4, r5, d0
 800b308:	4e55      	ldr	r6, [pc, #340]	; (800b460 <__ieee754_sqrt+0x160>)
 800b30a:	43ae      	bics	r6, r5
 800b30c:	ee10 0a10 	vmov	r0, s0
 800b310:	ee10 3a10 	vmov	r3, s0
 800b314:	462a      	mov	r2, r5
 800b316:	4629      	mov	r1, r5
 800b318:	d110      	bne.n	800b33c <__ieee754_sqrt+0x3c>
 800b31a:	ee10 2a10 	vmov	r2, s0
 800b31e:	462b      	mov	r3, r5
 800b320:	f7f5 f962 	bl	80005e8 <__aeabi_dmul>
 800b324:	4602      	mov	r2, r0
 800b326:	460b      	mov	r3, r1
 800b328:	4620      	mov	r0, r4
 800b32a:	4629      	mov	r1, r5
 800b32c:	f7f4 ffa6 	bl	800027c <__adddf3>
 800b330:	4604      	mov	r4, r0
 800b332:	460d      	mov	r5, r1
 800b334:	ec45 4b10 	vmov	d0, r4, r5
 800b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b33c:	2d00      	cmp	r5, #0
 800b33e:	dc10      	bgt.n	800b362 <__ieee754_sqrt+0x62>
 800b340:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b344:	4330      	orrs	r0, r6
 800b346:	d0f5      	beq.n	800b334 <__ieee754_sqrt+0x34>
 800b348:	b15d      	cbz	r5, 800b362 <__ieee754_sqrt+0x62>
 800b34a:	ee10 2a10 	vmov	r2, s0
 800b34e:	462b      	mov	r3, r5
 800b350:	ee10 0a10 	vmov	r0, s0
 800b354:	f7f4 ff90 	bl	8000278 <__aeabi_dsub>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	f7f5 fa6e 	bl	800083c <__aeabi_ddiv>
 800b360:	e7e6      	b.n	800b330 <__ieee754_sqrt+0x30>
 800b362:	1512      	asrs	r2, r2, #20
 800b364:	d074      	beq.n	800b450 <__ieee754_sqrt+0x150>
 800b366:	07d4      	lsls	r4, r2, #31
 800b368:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b36c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b370:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b374:	bf5e      	ittt	pl
 800b376:	0fda      	lsrpl	r2, r3, #31
 800b378:	005b      	lslpl	r3, r3, #1
 800b37a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b37e:	2400      	movs	r4, #0
 800b380:	0fda      	lsrs	r2, r3, #31
 800b382:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b386:	107f      	asrs	r7, r7, #1
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	2516      	movs	r5, #22
 800b38c:	4620      	mov	r0, r4
 800b38e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b392:	1886      	adds	r6, r0, r2
 800b394:	428e      	cmp	r6, r1
 800b396:	bfde      	ittt	le
 800b398:	1b89      	suble	r1, r1, r6
 800b39a:	18b0      	addle	r0, r6, r2
 800b39c:	18a4      	addle	r4, r4, r2
 800b39e:	0049      	lsls	r1, r1, #1
 800b3a0:	3d01      	subs	r5, #1
 800b3a2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b3a6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b3aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b3ae:	d1f0      	bne.n	800b392 <__ieee754_sqrt+0x92>
 800b3b0:	462a      	mov	r2, r5
 800b3b2:	f04f 0e20 	mov.w	lr, #32
 800b3b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b3ba:	4281      	cmp	r1, r0
 800b3bc:	eb06 0c05 	add.w	ip, r6, r5
 800b3c0:	dc02      	bgt.n	800b3c8 <__ieee754_sqrt+0xc8>
 800b3c2:	d113      	bne.n	800b3ec <__ieee754_sqrt+0xec>
 800b3c4:	459c      	cmp	ip, r3
 800b3c6:	d811      	bhi.n	800b3ec <__ieee754_sqrt+0xec>
 800b3c8:	f1bc 0f00 	cmp.w	ip, #0
 800b3cc:	eb0c 0506 	add.w	r5, ip, r6
 800b3d0:	da43      	bge.n	800b45a <__ieee754_sqrt+0x15a>
 800b3d2:	2d00      	cmp	r5, #0
 800b3d4:	db41      	blt.n	800b45a <__ieee754_sqrt+0x15a>
 800b3d6:	f100 0801 	add.w	r8, r0, #1
 800b3da:	1a09      	subs	r1, r1, r0
 800b3dc:	459c      	cmp	ip, r3
 800b3de:	bf88      	it	hi
 800b3e0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800b3e4:	eba3 030c 	sub.w	r3, r3, ip
 800b3e8:	4432      	add	r2, r6
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b3f0:	f1be 0e01 	subs.w	lr, lr, #1
 800b3f4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b3f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b3fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b400:	d1db      	bne.n	800b3ba <__ieee754_sqrt+0xba>
 800b402:	430b      	orrs	r3, r1
 800b404:	d006      	beq.n	800b414 <__ieee754_sqrt+0x114>
 800b406:	1c50      	adds	r0, r2, #1
 800b408:	bf13      	iteet	ne
 800b40a:	3201      	addne	r2, #1
 800b40c:	3401      	addeq	r4, #1
 800b40e:	4672      	moveq	r2, lr
 800b410:	f022 0201 	bicne.w	r2, r2, #1
 800b414:	1063      	asrs	r3, r4, #1
 800b416:	0852      	lsrs	r2, r2, #1
 800b418:	07e1      	lsls	r1, r4, #31
 800b41a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b41e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b422:	bf48      	it	mi
 800b424:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b428:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b42c:	4614      	mov	r4, r2
 800b42e:	e781      	b.n	800b334 <__ieee754_sqrt+0x34>
 800b430:	0ad9      	lsrs	r1, r3, #11
 800b432:	3815      	subs	r0, #21
 800b434:	055b      	lsls	r3, r3, #21
 800b436:	2900      	cmp	r1, #0
 800b438:	d0fa      	beq.n	800b430 <__ieee754_sqrt+0x130>
 800b43a:	02cd      	lsls	r5, r1, #11
 800b43c:	d50a      	bpl.n	800b454 <__ieee754_sqrt+0x154>
 800b43e:	f1c2 0420 	rsb	r4, r2, #32
 800b442:	fa23 f404 	lsr.w	r4, r3, r4
 800b446:	1e55      	subs	r5, r2, #1
 800b448:	4093      	lsls	r3, r2
 800b44a:	4321      	orrs	r1, r4
 800b44c:	1b42      	subs	r2, r0, r5
 800b44e:	e78a      	b.n	800b366 <__ieee754_sqrt+0x66>
 800b450:	4610      	mov	r0, r2
 800b452:	e7f0      	b.n	800b436 <__ieee754_sqrt+0x136>
 800b454:	0049      	lsls	r1, r1, #1
 800b456:	3201      	adds	r2, #1
 800b458:	e7ef      	b.n	800b43a <__ieee754_sqrt+0x13a>
 800b45a:	4680      	mov	r8, r0
 800b45c:	e7bd      	b.n	800b3da <__ieee754_sqrt+0xda>
 800b45e:	bf00      	nop
 800b460:	7ff00000 	.word	0x7ff00000
 800b464:	00000000 	.word	0x00000000

0800b468 <__kernel_cos>:
 800b468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	ec57 6b10 	vmov	r6, r7, d0
 800b470:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b474:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b478:	ed8d 1b00 	vstr	d1, [sp]
 800b47c:	da07      	bge.n	800b48e <__kernel_cos+0x26>
 800b47e:	ee10 0a10 	vmov	r0, s0
 800b482:	4639      	mov	r1, r7
 800b484:	f7f5 fb60 	bl	8000b48 <__aeabi_d2iz>
 800b488:	2800      	cmp	r0, #0
 800b48a:	f000 8088 	beq.w	800b59e <__kernel_cos+0x136>
 800b48e:	4632      	mov	r2, r6
 800b490:	463b      	mov	r3, r7
 800b492:	4630      	mov	r0, r6
 800b494:	4639      	mov	r1, r7
 800b496:	f7f5 f8a7 	bl	80005e8 <__aeabi_dmul>
 800b49a:	4b51      	ldr	r3, [pc, #324]	; (800b5e0 <__kernel_cos+0x178>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	4604      	mov	r4, r0
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	f7f5 f8a1 	bl	80005e8 <__aeabi_dmul>
 800b4a6:	a340      	add	r3, pc, #256	; (adr r3, 800b5a8 <__kernel_cos+0x140>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	4682      	mov	sl, r0
 800b4ae:	468b      	mov	fp, r1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f5 f898 	bl	80005e8 <__aeabi_dmul>
 800b4b8:	a33d      	add	r3, pc, #244	; (adr r3, 800b5b0 <__kernel_cos+0x148>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f4 fedd 	bl	800027c <__adddf3>
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	462b      	mov	r3, r5
 800b4c6:	f7f5 f88f 	bl	80005e8 <__aeabi_dmul>
 800b4ca:	a33b      	add	r3, pc, #236	; (adr r3, 800b5b8 <__kernel_cos+0x150>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f4 fed2 	bl	8000278 <__aeabi_dsub>
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	f7f5 f886 	bl	80005e8 <__aeabi_dmul>
 800b4dc:	a338      	add	r3, pc, #224	; (adr r3, 800b5c0 <__kernel_cos+0x158>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 fecb 	bl	800027c <__adddf3>
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	f7f5 f87d 	bl	80005e8 <__aeabi_dmul>
 800b4ee:	a336      	add	r3, pc, #216	; (adr r3, 800b5c8 <__kernel_cos+0x160>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	f7f4 fec0 	bl	8000278 <__aeabi_dsub>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f5 f874 	bl	80005e8 <__aeabi_dmul>
 800b500:	a333      	add	r3, pc, #204	; (adr r3, 800b5d0 <__kernel_cos+0x168>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f4 feb9 	bl	800027c <__adddf3>
 800b50a:	4622      	mov	r2, r4
 800b50c:	462b      	mov	r3, r5
 800b50e:	f7f5 f86b 	bl	80005e8 <__aeabi_dmul>
 800b512:	4622      	mov	r2, r4
 800b514:	462b      	mov	r3, r5
 800b516:	f7f5 f867 	bl	80005e8 <__aeabi_dmul>
 800b51a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b51e:	4604      	mov	r4, r0
 800b520:	460d      	mov	r5, r1
 800b522:	4630      	mov	r0, r6
 800b524:	4639      	mov	r1, r7
 800b526:	f7f5 f85f 	bl	80005e8 <__aeabi_dmul>
 800b52a:	460b      	mov	r3, r1
 800b52c:	4602      	mov	r2, r0
 800b52e:	4629      	mov	r1, r5
 800b530:	4620      	mov	r0, r4
 800b532:	f7f4 fea1 	bl	8000278 <__aeabi_dsub>
 800b536:	4b2b      	ldr	r3, [pc, #172]	; (800b5e4 <__kernel_cos+0x17c>)
 800b538:	4598      	cmp	r8, r3
 800b53a:	4606      	mov	r6, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	dc10      	bgt.n	800b562 <__kernel_cos+0xfa>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4650      	mov	r0, sl
 800b546:	4659      	mov	r1, fp
 800b548:	f7f4 fe96 	bl	8000278 <__aeabi_dsub>
 800b54c:	460b      	mov	r3, r1
 800b54e:	4926      	ldr	r1, [pc, #152]	; (800b5e8 <__kernel_cos+0x180>)
 800b550:	4602      	mov	r2, r0
 800b552:	2000      	movs	r0, #0
 800b554:	f7f4 fe90 	bl	8000278 <__aeabi_dsub>
 800b558:	ec41 0b10 	vmov	d0, r0, r1
 800b55c:	b003      	add	sp, #12
 800b55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b562:	4b22      	ldr	r3, [pc, #136]	; (800b5ec <__kernel_cos+0x184>)
 800b564:	4920      	ldr	r1, [pc, #128]	; (800b5e8 <__kernel_cos+0x180>)
 800b566:	4598      	cmp	r8, r3
 800b568:	bfcc      	ite	gt
 800b56a:	4d21      	ldrgt	r5, [pc, #132]	; (800b5f0 <__kernel_cos+0x188>)
 800b56c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b570:	2400      	movs	r4, #0
 800b572:	4622      	mov	r2, r4
 800b574:	462b      	mov	r3, r5
 800b576:	2000      	movs	r0, #0
 800b578:	f7f4 fe7e 	bl	8000278 <__aeabi_dsub>
 800b57c:	4622      	mov	r2, r4
 800b57e:	4680      	mov	r8, r0
 800b580:	4689      	mov	r9, r1
 800b582:	462b      	mov	r3, r5
 800b584:	4650      	mov	r0, sl
 800b586:	4659      	mov	r1, fp
 800b588:	f7f4 fe76 	bl	8000278 <__aeabi_dsub>
 800b58c:	4632      	mov	r2, r6
 800b58e:	463b      	mov	r3, r7
 800b590:	f7f4 fe72 	bl	8000278 <__aeabi_dsub>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4640      	mov	r0, r8
 800b59a:	4649      	mov	r1, r9
 800b59c:	e7da      	b.n	800b554 <__kernel_cos+0xec>
 800b59e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b5d8 <__kernel_cos+0x170>
 800b5a2:	e7db      	b.n	800b55c <__kernel_cos+0xf4>
 800b5a4:	f3af 8000 	nop.w
 800b5a8:	be8838d4 	.word	0xbe8838d4
 800b5ac:	bda8fae9 	.word	0xbda8fae9
 800b5b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b5b4:	3e21ee9e 	.word	0x3e21ee9e
 800b5b8:	809c52ad 	.word	0x809c52ad
 800b5bc:	3e927e4f 	.word	0x3e927e4f
 800b5c0:	19cb1590 	.word	0x19cb1590
 800b5c4:	3efa01a0 	.word	0x3efa01a0
 800b5c8:	16c15177 	.word	0x16c15177
 800b5cc:	3f56c16c 	.word	0x3f56c16c
 800b5d0:	5555554c 	.word	0x5555554c
 800b5d4:	3fa55555 	.word	0x3fa55555
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	3ff00000 	.word	0x3ff00000
 800b5e0:	3fe00000 	.word	0x3fe00000
 800b5e4:	3fd33332 	.word	0x3fd33332
 800b5e8:	3ff00000 	.word	0x3ff00000
 800b5ec:	3fe90000 	.word	0x3fe90000
 800b5f0:	3fd20000 	.word	0x3fd20000
 800b5f4:	00000000 	.word	0x00000000

0800b5f8 <__kernel_rem_pio2>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	ed2d 8b02 	vpush	{d8}
 800b600:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b604:	f112 0f14 	cmn.w	r2, #20
 800b608:	9308      	str	r3, [sp, #32]
 800b60a:	9101      	str	r1, [sp, #4]
 800b60c:	4bc4      	ldr	r3, [pc, #784]	; (800b920 <__kernel_rem_pio2+0x328>)
 800b60e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b610:	900b      	str	r0, [sp, #44]	; 0x2c
 800b612:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b616:	9302      	str	r3, [sp, #8]
 800b618:	9b08      	ldr	r3, [sp, #32]
 800b61a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b61e:	bfa8      	it	ge
 800b620:	1ed4      	subge	r4, r2, #3
 800b622:	9306      	str	r3, [sp, #24]
 800b624:	bfb2      	itee	lt
 800b626:	2400      	movlt	r4, #0
 800b628:	2318      	movge	r3, #24
 800b62a:	fb94 f4f3 	sdivge	r4, r4, r3
 800b62e:	f06f 0317 	mvn.w	r3, #23
 800b632:	fb04 3303 	mla	r3, r4, r3, r3
 800b636:	eb03 0a02 	add.w	sl, r3, r2
 800b63a:	9b02      	ldr	r3, [sp, #8]
 800b63c:	9a06      	ldr	r2, [sp, #24]
 800b63e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b910 <__kernel_rem_pio2+0x318>
 800b642:	eb03 0802 	add.w	r8, r3, r2
 800b646:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b648:	1aa7      	subs	r7, r4, r2
 800b64a:	ae22      	add	r6, sp, #136	; 0x88
 800b64c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b650:	2500      	movs	r5, #0
 800b652:	4545      	cmp	r5, r8
 800b654:	dd13      	ble.n	800b67e <__kernel_rem_pio2+0x86>
 800b656:	9b08      	ldr	r3, [sp, #32]
 800b658:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b910 <__kernel_rem_pio2+0x318>
 800b65c:	aa22      	add	r2, sp, #136	; 0x88
 800b65e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b662:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b666:	f04f 0800 	mov.w	r8, #0
 800b66a:	9b02      	ldr	r3, [sp, #8]
 800b66c:	4598      	cmp	r8, r3
 800b66e:	dc2f      	bgt.n	800b6d0 <__kernel_rem_pio2+0xd8>
 800b670:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b674:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800b678:	462f      	mov	r7, r5
 800b67a:	2600      	movs	r6, #0
 800b67c:	e01b      	b.n	800b6b6 <__kernel_rem_pio2+0xbe>
 800b67e:	42ef      	cmn	r7, r5
 800b680:	d407      	bmi.n	800b692 <__kernel_rem_pio2+0x9a>
 800b682:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b686:	f7f4 ff45 	bl	8000514 <__aeabi_i2d>
 800b68a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b68e:	3501      	adds	r5, #1
 800b690:	e7df      	b.n	800b652 <__kernel_rem_pio2+0x5a>
 800b692:	ec51 0b18 	vmov	r0, r1, d8
 800b696:	e7f8      	b.n	800b68a <__kernel_rem_pio2+0x92>
 800b698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b69c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b6a0:	f7f4 ffa2 	bl	80005e8 <__aeabi_dmul>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6ac:	f7f4 fde6 	bl	800027c <__adddf3>
 800b6b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6b4:	3601      	adds	r6, #1
 800b6b6:	9b06      	ldr	r3, [sp, #24]
 800b6b8:	429e      	cmp	r6, r3
 800b6ba:	f1a7 0708 	sub.w	r7, r7, #8
 800b6be:	ddeb      	ble.n	800b698 <__kernel_rem_pio2+0xa0>
 800b6c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b6c4:	f108 0801 	add.w	r8, r8, #1
 800b6c8:	ecab 7b02 	vstmia	fp!, {d7}
 800b6cc:	3508      	adds	r5, #8
 800b6ce:	e7cc      	b.n	800b66a <__kernel_rem_pio2+0x72>
 800b6d0:	9b02      	ldr	r3, [sp, #8]
 800b6d2:	aa0e      	add	r2, sp, #56	; 0x38
 800b6d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6d8:	930d      	str	r3, [sp, #52]	; 0x34
 800b6da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b6dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b6e0:	9c02      	ldr	r4, [sp, #8]
 800b6e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b6e4:	00e3      	lsls	r3, r4, #3
 800b6e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6e8:	ab9a      	add	r3, sp, #616	; 0x268
 800b6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800b6f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800b6f6:	ab72      	add	r3, sp, #456	; 0x1c8
 800b6f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800b6fc:	46c3      	mov	fp, r8
 800b6fe:	46a1      	mov	r9, r4
 800b700:	f1b9 0f00 	cmp.w	r9, #0
 800b704:	f1a5 0508 	sub.w	r5, r5, #8
 800b708:	dc77      	bgt.n	800b7fa <__kernel_rem_pio2+0x202>
 800b70a:	ec47 6b10 	vmov	d0, r6, r7
 800b70e:	4650      	mov	r0, sl
 800b710:	f000 fdb6 	bl	800c280 <scalbn>
 800b714:	ec57 6b10 	vmov	r6, r7, d0
 800b718:	2200      	movs	r2, #0
 800b71a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b71e:	ee10 0a10 	vmov	r0, s0
 800b722:	4639      	mov	r1, r7
 800b724:	f7f4 ff60 	bl	80005e8 <__aeabi_dmul>
 800b728:	ec41 0b10 	vmov	d0, r0, r1
 800b72c:	f000 fd20 	bl	800c170 <floor>
 800b730:	4b7c      	ldr	r3, [pc, #496]	; (800b924 <__kernel_rem_pio2+0x32c>)
 800b732:	ec51 0b10 	vmov	r0, r1, d0
 800b736:	2200      	movs	r2, #0
 800b738:	f7f4 ff56 	bl	80005e8 <__aeabi_dmul>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	4630      	mov	r0, r6
 800b742:	4639      	mov	r1, r7
 800b744:	f7f4 fd98 	bl	8000278 <__aeabi_dsub>
 800b748:	460f      	mov	r7, r1
 800b74a:	4606      	mov	r6, r0
 800b74c:	f7f5 f9fc 	bl	8000b48 <__aeabi_d2iz>
 800b750:	9004      	str	r0, [sp, #16]
 800b752:	f7f4 fedf 	bl	8000514 <__aeabi_i2d>
 800b756:	4602      	mov	r2, r0
 800b758:	460b      	mov	r3, r1
 800b75a:	4630      	mov	r0, r6
 800b75c:	4639      	mov	r1, r7
 800b75e:	f7f4 fd8b 	bl	8000278 <__aeabi_dsub>
 800b762:	f1ba 0f00 	cmp.w	sl, #0
 800b766:	4606      	mov	r6, r0
 800b768:	460f      	mov	r7, r1
 800b76a:	dd6d      	ble.n	800b848 <__kernel_rem_pio2+0x250>
 800b76c:	1e62      	subs	r2, r4, #1
 800b76e:	ab0e      	add	r3, sp, #56	; 0x38
 800b770:	9d04      	ldr	r5, [sp, #16]
 800b772:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b776:	f1ca 0118 	rsb	r1, sl, #24
 800b77a:	fa40 f301 	asr.w	r3, r0, r1
 800b77e:	441d      	add	r5, r3
 800b780:	408b      	lsls	r3, r1
 800b782:	1ac0      	subs	r0, r0, r3
 800b784:	ab0e      	add	r3, sp, #56	; 0x38
 800b786:	9504      	str	r5, [sp, #16]
 800b788:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b78c:	f1ca 0317 	rsb	r3, sl, #23
 800b790:	fa40 fb03 	asr.w	fp, r0, r3
 800b794:	f1bb 0f00 	cmp.w	fp, #0
 800b798:	dd65      	ble.n	800b866 <__kernel_rem_pio2+0x26e>
 800b79a:	9b04      	ldr	r3, [sp, #16]
 800b79c:	2200      	movs	r2, #0
 800b79e:	3301      	adds	r3, #1
 800b7a0:	9304      	str	r3, [sp, #16]
 800b7a2:	4615      	mov	r5, r2
 800b7a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b7a8:	4294      	cmp	r4, r2
 800b7aa:	f300 809c 	bgt.w	800b8e6 <__kernel_rem_pio2+0x2ee>
 800b7ae:	f1ba 0f00 	cmp.w	sl, #0
 800b7b2:	dd07      	ble.n	800b7c4 <__kernel_rem_pio2+0x1cc>
 800b7b4:	f1ba 0f01 	cmp.w	sl, #1
 800b7b8:	f000 80c0 	beq.w	800b93c <__kernel_rem_pio2+0x344>
 800b7bc:	f1ba 0f02 	cmp.w	sl, #2
 800b7c0:	f000 80c6 	beq.w	800b950 <__kernel_rem_pio2+0x358>
 800b7c4:	f1bb 0f02 	cmp.w	fp, #2
 800b7c8:	d14d      	bne.n	800b866 <__kernel_rem_pio2+0x26e>
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	463b      	mov	r3, r7
 800b7ce:	4956      	ldr	r1, [pc, #344]	; (800b928 <__kernel_rem_pio2+0x330>)
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	f7f4 fd51 	bl	8000278 <__aeabi_dsub>
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	460f      	mov	r7, r1
 800b7da:	2d00      	cmp	r5, #0
 800b7dc:	d043      	beq.n	800b866 <__kernel_rem_pio2+0x26e>
 800b7de:	4650      	mov	r0, sl
 800b7e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b918 <__kernel_rem_pio2+0x320>
 800b7e4:	f000 fd4c 	bl	800c280 <scalbn>
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	ec53 2b10 	vmov	r2, r3, d0
 800b7f0:	f7f4 fd42 	bl	8000278 <__aeabi_dsub>
 800b7f4:	4606      	mov	r6, r0
 800b7f6:	460f      	mov	r7, r1
 800b7f8:	e035      	b.n	800b866 <__kernel_rem_pio2+0x26e>
 800b7fa:	4b4c      	ldr	r3, [pc, #304]	; (800b92c <__kernel_rem_pio2+0x334>)
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	f7f4 fef1 	bl	80005e8 <__aeabi_dmul>
 800b806:	f7f5 f99f 	bl	8000b48 <__aeabi_d2iz>
 800b80a:	f7f4 fe83 	bl	8000514 <__aeabi_i2d>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	ec43 2b18 	vmov	d8, r2, r3
 800b816:	4b46      	ldr	r3, [pc, #280]	; (800b930 <__kernel_rem_pio2+0x338>)
 800b818:	2200      	movs	r2, #0
 800b81a:	f7f4 fee5 	bl	80005e8 <__aeabi_dmul>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	4630      	mov	r0, r6
 800b824:	4639      	mov	r1, r7
 800b826:	f7f4 fd27 	bl	8000278 <__aeabi_dsub>
 800b82a:	f7f5 f98d 	bl	8000b48 <__aeabi_d2iz>
 800b82e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b832:	f84b 0b04 	str.w	r0, [fp], #4
 800b836:	ec51 0b18 	vmov	r0, r1, d8
 800b83a:	f7f4 fd1f 	bl	800027c <__adddf3>
 800b83e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b842:	4606      	mov	r6, r0
 800b844:	460f      	mov	r7, r1
 800b846:	e75b      	b.n	800b700 <__kernel_rem_pio2+0x108>
 800b848:	d106      	bne.n	800b858 <__kernel_rem_pio2+0x260>
 800b84a:	1e63      	subs	r3, r4, #1
 800b84c:	aa0e      	add	r2, sp, #56	; 0x38
 800b84e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b852:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b856:	e79d      	b.n	800b794 <__kernel_rem_pio2+0x19c>
 800b858:	4b36      	ldr	r3, [pc, #216]	; (800b934 <__kernel_rem_pio2+0x33c>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	f7f5 f94a 	bl	8000af4 <__aeabi_dcmpge>
 800b860:	2800      	cmp	r0, #0
 800b862:	d13d      	bne.n	800b8e0 <__kernel_rem_pio2+0x2e8>
 800b864:	4683      	mov	fp, r0
 800b866:	2200      	movs	r2, #0
 800b868:	2300      	movs	r3, #0
 800b86a:	4630      	mov	r0, r6
 800b86c:	4639      	mov	r1, r7
 800b86e:	f7f5 f923 	bl	8000ab8 <__aeabi_dcmpeq>
 800b872:	2800      	cmp	r0, #0
 800b874:	f000 80c0 	beq.w	800b9f8 <__kernel_rem_pio2+0x400>
 800b878:	1e65      	subs	r5, r4, #1
 800b87a:	462b      	mov	r3, r5
 800b87c:	2200      	movs	r2, #0
 800b87e:	9902      	ldr	r1, [sp, #8]
 800b880:	428b      	cmp	r3, r1
 800b882:	da6c      	bge.n	800b95e <__kernel_rem_pio2+0x366>
 800b884:	2a00      	cmp	r2, #0
 800b886:	f000 8089 	beq.w	800b99c <__kernel_rem_pio2+0x3a4>
 800b88a:	ab0e      	add	r3, sp, #56	; 0x38
 800b88c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b890:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 80ad 	beq.w	800b9f4 <__kernel_rem_pio2+0x3fc>
 800b89a:	4650      	mov	r0, sl
 800b89c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b918 <__kernel_rem_pio2+0x320>
 800b8a0:	f000 fcee 	bl	800c280 <scalbn>
 800b8a4:	ab9a      	add	r3, sp, #616	; 0x268
 800b8a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b8aa:	ec57 6b10 	vmov	r6, r7, d0
 800b8ae:	00ec      	lsls	r4, r5, #3
 800b8b0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b8b4:	46aa      	mov	sl, r5
 800b8b6:	f1ba 0f00 	cmp.w	sl, #0
 800b8ba:	f280 80d6 	bge.w	800ba6a <__kernel_rem_pio2+0x472>
 800b8be:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b910 <__kernel_rem_pio2+0x318>
 800b8c2:	462e      	mov	r6, r5
 800b8c4:	2e00      	cmp	r6, #0
 800b8c6:	f2c0 8104 	blt.w	800bad2 <__kernel_rem_pio2+0x4da>
 800b8ca:	ab72      	add	r3, sp, #456	; 0x1c8
 800b8cc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b8d0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b938 <__kernel_rem_pio2+0x340>
 800b8d4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b8d8:	f04f 0800 	mov.w	r8, #0
 800b8dc:	1baf      	subs	r7, r5, r6
 800b8de:	e0ea      	b.n	800bab6 <__kernel_rem_pio2+0x4be>
 800b8e0:	f04f 0b02 	mov.w	fp, #2
 800b8e4:	e759      	b.n	800b79a <__kernel_rem_pio2+0x1a2>
 800b8e6:	f8d8 3000 	ldr.w	r3, [r8]
 800b8ea:	b955      	cbnz	r5, 800b902 <__kernel_rem_pio2+0x30a>
 800b8ec:	b123      	cbz	r3, 800b8f8 <__kernel_rem_pio2+0x300>
 800b8ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b8f2:	f8c8 3000 	str.w	r3, [r8]
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	3201      	adds	r2, #1
 800b8fa:	f108 0804 	add.w	r8, r8, #4
 800b8fe:	461d      	mov	r5, r3
 800b900:	e752      	b.n	800b7a8 <__kernel_rem_pio2+0x1b0>
 800b902:	1acb      	subs	r3, r1, r3
 800b904:	f8c8 3000 	str.w	r3, [r8]
 800b908:	462b      	mov	r3, r5
 800b90a:	e7f5      	b.n	800b8f8 <__kernel_rem_pio2+0x300>
 800b90c:	f3af 8000 	nop.w
	...
 800b91c:	3ff00000 	.word	0x3ff00000
 800b920:	0800d200 	.word	0x0800d200
 800b924:	40200000 	.word	0x40200000
 800b928:	3ff00000 	.word	0x3ff00000
 800b92c:	3e700000 	.word	0x3e700000
 800b930:	41700000 	.word	0x41700000
 800b934:	3fe00000 	.word	0x3fe00000
 800b938:	0800d1c0 	.word	0x0800d1c0
 800b93c:	1e62      	subs	r2, r4, #1
 800b93e:	ab0e      	add	r3, sp, #56	; 0x38
 800b940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b944:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b948:	a90e      	add	r1, sp, #56	; 0x38
 800b94a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b94e:	e739      	b.n	800b7c4 <__kernel_rem_pio2+0x1cc>
 800b950:	1e62      	subs	r2, r4, #1
 800b952:	ab0e      	add	r3, sp, #56	; 0x38
 800b954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b958:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b95c:	e7f4      	b.n	800b948 <__kernel_rem_pio2+0x350>
 800b95e:	a90e      	add	r1, sp, #56	; 0x38
 800b960:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b964:	3b01      	subs	r3, #1
 800b966:	430a      	orrs	r2, r1
 800b968:	e789      	b.n	800b87e <__kernel_rem_pio2+0x286>
 800b96a:	3301      	adds	r3, #1
 800b96c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b970:	2900      	cmp	r1, #0
 800b972:	d0fa      	beq.n	800b96a <__kernel_rem_pio2+0x372>
 800b974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b976:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b97a:	446a      	add	r2, sp
 800b97c:	3a98      	subs	r2, #152	; 0x98
 800b97e:	920a      	str	r2, [sp, #40]	; 0x28
 800b980:	9a08      	ldr	r2, [sp, #32]
 800b982:	18e3      	adds	r3, r4, r3
 800b984:	18a5      	adds	r5, r4, r2
 800b986:	aa22      	add	r2, sp, #136	; 0x88
 800b988:	f104 0801 	add.w	r8, r4, #1
 800b98c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b990:	9304      	str	r3, [sp, #16]
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	4543      	cmp	r3, r8
 800b996:	da04      	bge.n	800b9a2 <__kernel_rem_pio2+0x3aa>
 800b998:	461c      	mov	r4, r3
 800b99a:	e6a3      	b.n	800b6e4 <__kernel_rem_pio2+0xec>
 800b99c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e7e4      	b.n	800b96c <__kernel_rem_pio2+0x374>
 800b9a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9a4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b9a8:	f7f4 fdb4 	bl	8000514 <__aeabi_i2d>
 800b9ac:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b9b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9b2:	46ab      	mov	fp, r5
 800b9b4:	461c      	mov	r4, r3
 800b9b6:	f04f 0900 	mov.w	r9, #0
 800b9ba:	2600      	movs	r6, #0
 800b9bc:	2700      	movs	r7, #0
 800b9be:	9b06      	ldr	r3, [sp, #24]
 800b9c0:	4599      	cmp	r9, r3
 800b9c2:	dd06      	ble.n	800b9d2 <__kernel_rem_pio2+0x3da>
 800b9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b9ca:	f108 0801 	add.w	r8, r8, #1
 800b9ce:	930a      	str	r3, [sp, #40]	; 0x28
 800b9d0:	e7df      	b.n	800b992 <__kernel_rem_pio2+0x39a>
 800b9d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b9d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b9da:	f7f4 fe05 	bl	80005e8 <__aeabi_dmul>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	f7f4 fc49 	bl	800027c <__adddf3>
 800b9ea:	f109 0901 	add.w	r9, r9, #1
 800b9ee:	4606      	mov	r6, r0
 800b9f0:	460f      	mov	r7, r1
 800b9f2:	e7e4      	b.n	800b9be <__kernel_rem_pio2+0x3c6>
 800b9f4:	3d01      	subs	r5, #1
 800b9f6:	e748      	b.n	800b88a <__kernel_rem_pio2+0x292>
 800b9f8:	ec47 6b10 	vmov	d0, r6, r7
 800b9fc:	f1ca 0000 	rsb	r0, sl, #0
 800ba00:	f000 fc3e 	bl	800c280 <scalbn>
 800ba04:	ec57 6b10 	vmov	r6, r7, d0
 800ba08:	4ba0      	ldr	r3, [pc, #640]	; (800bc8c <__kernel_rem_pio2+0x694>)
 800ba0a:	ee10 0a10 	vmov	r0, s0
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4639      	mov	r1, r7
 800ba12:	f7f5 f86f 	bl	8000af4 <__aeabi_dcmpge>
 800ba16:	b1f8      	cbz	r0, 800ba58 <__kernel_rem_pio2+0x460>
 800ba18:	4b9d      	ldr	r3, [pc, #628]	; (800bc90 <__kernel_rem_pio2+0x698>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	4639      	mov	r1, r7
 800ba20:	f7f4 fde2 	bl	80005e8 <__aeabi_dmul>
 800ba24:	f7f5 f890 	bl	8000b48 <__aeabi_d2iz>
 800ba28:	4680      	mov	r8, r0
 800ba2a:	f7f4 fd73 	bl	8000514 <__aeabi_i2d>
 800ba2e:	4b97      	ldr	r3, [pc, #604]	; (800bc8c <__kernel_rem_pio2+0x694>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	f7f4 fdd9 	bl	80005e8 <__aeabi_dmul>
 800ba36:	460b      	mov	r3, r1
 800ba38:	4602      	mov	r2, r0
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	f7f4 fc1b 	bl	8000278 <__aeabi_dsub>
 800ba42:	f7f5 f881 	bl	8000b48 <__aeabi_d2iz>
 800ba46:	1c65      	adds	r5, r4, #1
 800ba48:	ab0e      	add	r3, sp, #56	; 0x38
 800ba4a:	f10a 0a18 	add.w	sl, sl, #24
 800ba4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ba56:	e720      	b.n	800b89a <__kernel_rem_pio2+0x2a2>
 800ba58:	4630      	mov	r0, r6
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	f7f5 f874 	bl	8000b48 <__aeabi_d2iz>
 800ba60:	ab0e      	add	r3, sp, #56	; 0x38
 800ba62:	4625      	mov	r5, r4
 800ba64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba68:	e717      	b.n	800b89a <__kernel_rem_pio2+0x2a2>
 800ba6a:	ab0e      	add	r3, sp, #56	; 0x38
 800ba6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ba70:	f7f4 fd50 	bl	8000514 <__aeabi_i2d>
 800ba74:	4632      	mov	r2, r6
 800ba76:	463b      	mov	r3, r7
 800ba78:	f7f4 fdb6 	bl	80005e8 <__aeabi_dmul>
 800ba7c:	4b84      	ldr	r3, [pc, #528]	; (800bc90 <__kernel_rem_pio2+0x698>)
 800ba7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ba82:	2200      	movs	r2, #0
 800ba84:	4630      	mov	r0, r6
 800ba86:	4639      	mov	r1, r7
 800ba88:	f7f4 fdae 	bl	80005e8 <__aeabi_dmul>
 800ba8c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba90:	4606      	mov	r6, r0
 800ba92:	460f      	mov	r7, r1
 800ba94:	e70f      	b.n	800b8b6 <__kernel_rem_pio2+0x2be>
 800ba96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ba9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ba9e:	f7f4 fda3 	bl	80005e8 <__aeabi_dmul>
 800baa2:	4602      	mov	r2, r0
 800baa4:	460b      	mov	r3, r1
 800baa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baaa:	f7f4 fbe7 	bl	800027c <__adddf3>
 800baae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bab2:	f108 0801 	add.w	r8, r8, #1
 800bab6:	9b02      	ldr	r3, [sp, #8]
 800bab8:	4598      	cmp	r8, r3
 800baba:	dc01      	bgt.n	800bac0 <__kernel_rem_pio2+0x4c8>
 800babc:	45b8      	cmp	r8, r7
 800babe:	ddea      	ble.n	800ba96 <__kernel_rem_pio2+0x49e>
 800bac0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bac4:	ab4a      	add	r3, sp, #296	; 0x128
 800bac6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800baca:	ed87 7b00 	vstr	d7, [r7]
 800bace:	3e01      	subs	r6, #1
 800bad0:	e6f8      	b.n	800b8c4 <__kernel_rem_pio2+0x2cc>
 800bad2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	dc0b      	bgt.n	800baf0 <__kernel_rem_pio2+0x4f8>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	dc35      	bgt.n	800bb48 <__kernel_rem_pio2+0x550>
 800badc:	d059      	beq.n	800bb92 <__kernel_rem_pio2+0x59a>
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	f003 0007 	and.w	r0, r3, #7
 800bae4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bae8:	ecbd 8b02 	vpop	{d8}
 800baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800baf2:	2b03      	cmp	r3, #3
 800baf4:	d1f3      	bne.n	800bade <__kernel_rem_pio2+0x4e6>
 800baf6:	ab4a      	add	r3, sp, #296	; 0x128
 800baf8:	4423      	add	r3, r4
 800bafa:	9306      	str	r3, [sp, #24]
 800bafc:	461c      	mov	r4, r3
 800bafe:	469a      	mov	sl, r3
 800bb00:	9502      	str	r5, [sp, #8]
 800bb02:	9b02      	ldr	r3, [sp, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f1aa 0a08 	sub.w	sl, sl, #8
 800bb0a:	dc6b      	bgt.n	800bbe4 <__kernel_rem_pio2+0x5ec>
 800bb0c:	46aa      	mov	sl, r5
 800bb0e:	f1ba 0f01 	cmp.w	sl, #1
 800bb12:	f1a4 0408 	sub.w	r4, r4, #8
 800bb16:	f300 8085 	bgt.w	800bc24 <__kernel_rem_pio2+0x62c>
 800bb1a:	9c06      	ldr	r4, [sp, #24]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	3408      	adds	r4, #8
 800bb20:	2100      	movs	r1, #0
 800bb22:	2d01      	cmp	r5, #1
 800bb24:	f300 809d 	bgt.w	800bc62 <__kernel_rem_pio2+0x66a>
 800bb28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800bb2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800bb30:	f1bb 0f00 	cmp.w	fp, #0
 800bb34:	f040 809b 	bne.w	800bc6e <__kernel_rem_pio2+0x676>
 800bb38:	9b01      	ldr	r3, [sp, #4]
 800bb3a:	e9c3 5600 	strd	r5, r6, [r3]
 800bb3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bb42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bb46:	e7ca      	b.n	800bade <__kernel_rem_pio2+0x4e6>
 800bb48:	3408      	adds	r4, #8
 800bb4a:	ab4a      	add	r3, sp, #296	; 0x128
 800bb4c:	441c      	add	r4, r3
 800bb4e:	462e      	mov	r6, r5
 800bb50:	2000      	movs	r0, #0
 800bb52:	2100      	movs	r1, #0
 800bb54:	2e00      	cmp	r6, #0
 800bb56:	da36      	bge.n	800bbc6 <__kernel_rem_pio2+0x5ce>
 800bb58:	f1bb 0f00 	cmp.w	fp, #0
 800bb5c:	d039      	beq.n	800bbd2 <__kernel_rem_pio2+0x5da>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb64:	9c01      	ldr	r4, [sp, #4]
 800bb66:	e9c4 2300 	strd	r2, r3, [r4]
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bb72:	f7f4 fb81 	bl	8000278 <__aeabi_dsub>
 800bb76:	ae4c      	add	r6, sp, #304	; 0x130
 800bb78:	2401      	movs	r4, #1
 800bb7a:	42a5      	cmp	r5, r4
 800bb7c:	da2c      	bge.n	800bbd8 <__kernel_rem_pio2+0x5e0>
 800bb7e:	f1bb 0f00 	cmp.w	fp, #0
 800bb82:	d002      	beq.n	800bb8a <__kernel_rem_pio2+0x592>
 800bb84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb88:	4619      	mov	r1, r3
 800bb8a:	9b01      	ldr	r3, [sp, #4]
 800bb8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bb90:	e7a5      	b.n	800bade <__kernel_rem_pio2+0x4e6>
 800bb92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800bb96:	eb0d 0403 	add.w	r4, sp, r3
 800bb9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bb9e:	2000      	movs	r0, #0
 800bba0:	2100      	movs	r1, #0
 800bba2:	2d00      	cmp	r5, #0
 800bba4:	da09      	bge.n	800bbba <__kernel_rem_pio2+0x5c2>
 800bba6:	f1bb 0f00 	cmp.w	fp, #0
 800bbaa:	d002      	beq.n	800bbb2 <__kernel_rem_pio2+0x5ba>
 800bbac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	9b01      	ldr	r3, [sp, #4]
 800bbb4:	e9c3 0100 	strd	r0, r1, [r3]
 800bbb8:	e791      	b.n	800bade <__kernel_rem_pio2+0x4e6>
 800bbba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bbbe:	f7f4 fb5d 	bl	800027c <__adddf3>
 800bbc2:	3d01      	subs	r5, #1
 800bbc4:	e7ed      	b.n	800bba2 <__kernel_rem_pio2+0x5aa>
 800bbc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bbca:	f7f4 fb57 	bl	800027c <__adddf3>
 800bbce:	3e01      	subs	r6, #1
 800bbd0:	e7c0      	b.n	800bb54 <__kernel_rem_pio2+0x55c>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	e7c5      	b.n	800bb64 <__kernel_rem_pio2+0x56c>
 800bbd8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bbdc:	f7f4 fb4e 	bl	800027c <__adddf3>
 800bbe0:	3401      	adds	r4, #1
 800bbe2:	e7ca      	b.n	800bb7a <__kernel_rem_pio2+0x582>
 800bbe4:	e9da 8900 	ldrd	r8, r9, [sl]
 800bbe8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bbec:	9b02      	ldr	r3, [sp, #8]
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	9302      	str	r3, [sp, #8]
 800bbf2:	4632      	mov	r2, r6
 800bbf4:	463b      	mov	r3, r7
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	f7f4 fb3f 	bl	800027c <__adddf3>
 800bbfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc02:	4602      	mov	r2, r0
 800bc04:	460b      	mov	r3, r1
 800bc06:	4640      	mov	r0, r8
 800bc08:	4649      	mov	r1, r9
 800bc0a:	f7f4 fb35 	bl	8000278 <__aeabi_dsub>
 800bc0e:	4632      	mov	r2, r6
 800bc10:	463b      	mov	r3, r7
 800bc12:	f7f4 fb33 	bl	800027c <__adddf3>
 800bc16:	ed9d 7b08 	vldr	d7, [sp, #32]
 800bc1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc1e:	ed8a 7b00 	vstr	d7, [sl]
 800bc22:	e76e      	b.n	800bb02 <__kernel_rem_pio2+0x50a>
 800bc24:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bc28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4632      	mov	r2, r6
 800bc30:	463b      	mov	r3, r7
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 fb22 	bl	800027c <__adddf3>
 800bc38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4640      	mov	r0, r8
 800bc42:	4649      	mov	r1, r9
 800bc44:	f7f4 fb18 	bl	8000278 <__aeabi_dsub>
 800bc48:	4632      	mov	r2, r6
 800bc4a:	463b      	mov	r3, r7
 800bc4c:	f7f4 fb16 	bl	800027c <__adddf3>
 800bc50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc58:	ed84 7b00 	vstr	d7, [r4]
 800bc5c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bc60:	e755      	b.n	800bb0e <__kernel_rem_pio2+0x516>
 800bc62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc66:	f7f4 fb09 	bl	800027c <__adddf3>
 800bc6a:	3d01      	subs	r5, #1
 800bc6c:	e759      	b.n	800bb22 <__kernel_rem_pio2+0x52a>
 800bc6e:	9b01      	ldr	r3, [sp, #4]
 800bc70:	9a01      	ldr	r2, [sp, #4]
 800bc72:	601d      	str	r5, [r3, #0]
 800bc74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800bc78:	605c      	str	r4, [r3, #4]
 800bc7a:	609f      	str	r7, [r3, #8]
 800bc7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800bc80:	60d3      	str	r3, [r2, #12]
 800bc82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc86:	6110      	str	r0, [r2, #16]
 800bc88:	6153      	str	r3, [r2, #20]
 800bc8a:	e728      	b.n	800bade <__kernel_rem_pio2+0x4e6>
 800bc8c:	41700000 	.word	0x41700000
 800bc90:	3e700000 	.word	0x3e700000
 800bc94:	00000000 	.word	0x00000000

0800bc98 <__kernel_sin>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	ed2d 8b04 	vpush	{d8-d9}
 800bca0:	eeb0 8a41 	vmov.f32	s16, s2
 800bca4:	eef0 8a61 	vmov.f32	s17, s3
 800bca8:	ec55 4b10 	vmov	r4, r5, d0
 800bcac:	b083      	sub	sp, #12
 800bcae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bcb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bcb6:	9001      	str	r0, [sp, #4]
 800bcb8:	da06      	bge.n	800bcc8 <__kernel_sin+0x30>
 800bcba:	ee10 0a10 	vmov	r0, s0
 800bcbe:	4629      	mov	r1, r5
 800bcc0:	f7f4 ff42 	bl	8000b48 <__aeabi_d2iz>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	d051      	beq.n	800bd6c <__kernel_sin+0xd4>
 800bcc8:	4622      	mov	r2, r4
 800bcca:	462b      	mov	r3, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fc8a 	bl	80005e8 <__aeabi_dmul>
 800bcd4:	4682      	mov	sl, r0
 800bcd6:	468b      	mov	fp, r1
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4620      	mov	r0, r4
 800bcde:	4629      	mov	r1, r5
 800bce0:	f7f4 fc82 	bl	80005e8 <__aeabi_dmul>
 800bce4:	a341      	add	r3, pc, #260	; (adr r3, 800bdec <__kernel_sin+0x154>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	4680      	mov	r8, r0
 800bcec:	4689      	mov	r9, r1
 800bcee:	4650      	mov	r0, sl
 800bcf0:	4659      	mov	r1, fp
 800bcf2:	f7f4 fc79 	bl	80005e8 <__aeabi_dmul>
 800bcf6:	a33f      	add	r3, pc, #252	; (adr r3, 800bdf4 <__kernel_sin+0x15c>)
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f7f4 fabc 	bl	8000278 <__aeabi_dsub>
 800bd00:	4652      	mov	r2, sl
 800bd02:	465b      	mov	r3, fp
 800bd04:	f7f4 fc70 	bl	80005e8 <__aeabi_dmul>
 800bd08:	a33c      	add	r3, pc, #240	; (adr r3, 800bdfc <__kernel_sin+0x164>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f7f4 fab5 	bl	800027c <__adddf3>
 800bd12:	4652      	mov	r2, sl
 800bd14:	465b      	mov	r3, fp
 800bd16:	f7f4 fc67 	bl	80005e8 <__aeabi_dmul>
 800bd1a:	a33a      	add	r3, pc, #232	; (adr r3, 800be04 <__kernel_sin+0x16c>)
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	f7f4 faaa 	bl	8000278 <__aeabi_dsub>
 800bd24:	4652      	mov	r2, sl
 800bd26:	465b      	mov	r3, fp
 800bd28:	f7f4 fc5e 	bl	80005e8 <__aeabi_dmul>
 800bd2c:	a337      	add	r3, pc, #220	; (adr r3, 800be0c <__kernel_sin+0x174>)
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f7f4 faa3 	bl	800027c <__adddf3>
 800bd36:	9b01      	ldr	r3, [sp, #4]
 800bd38:	4606      	mov	r6, r0
 800bd3a:	460f      	mov	r7, r1
 800bd3c:	b9eb      	cbnz	r3, 800bd7a <__kernel_sin+0xe2>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	4650      	mov	r0, sl
 800bd44:	4659      	mov	r1, fp
 800bd46:	f7f4 fc4f 	bl	80005e8 <__aeabi_dmul>
 800bd4a:	a325      	add	r3, pc, #148	; (adr r3, 800bde0 <__kernel_sin+0x148>)
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	f7f4 fa92 	bl	8000278 <__aeabi_dsub>
 800bd54:	4642      	mov	r2, r8
 800bd56:	464b      	mov	r3, r9
 800bd58:	f7f4 fc46 	bl	80005e8 <__aeabi_dmul>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4620      	mov	r0, r4
 800bd62:	4629      	mov	r1, r5
 800bd64:	f7f4 fa8a 	bl	800027c <__adddf3>
 800bd68:	4604      	mov	r4, r0
 800bd6a:	460d      	mov	r5, r1
 800bd6c:	ec45 4b10 	vmov	d0, r4, r5
 800bd70:	b003      	add	sp, #12
 800bd72:	ecbd 8b04 	vpop	{d8-d9}
 800bd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7a:	4b1b      	ldr	r3, [pc, #108]	; (800bde8 <__kernel_sin+0x150>)
 800bd7c:	ec51 0b18 	vmov	r0, r1, d8
 800bd80:	2200      	movs	r2, #0
 800bd82:	f7f4 fc31 	bl	80005e8 <__aeabi_dmul>
 800bd86:	4632      	mov	r2, r6
 800bd88:	ec41 0b19 	vmov	d9, r0, r1
 800bd8c:	463b      	mov	r3, r7
 800bd8e:	4640      	mov	r0, r8
 800bd90:	4649      	mov	r1, r9
 800bd92:	f7f4 fc29 	bl	80005e8 <__aeabi_dmul>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	ec51 0b19 	vmov	r0, r1, d9
 800bd9e:	f7f4 fa6b 	bl	8000278 <__aeabi_dsub>
 800bda2:	4652      	mov	r2, sl
 800bda4:	465b      	mov	r3, fp
 800bda6:	f7f4 fc1f 	bl	80005e8 <__aeabi_dmul>
 800bdaa:	ec53 2b18 	vmov	r2, r3, d8
 800bdae:	f7f4 fa63 	bl	8000278 <__aeabi_dsub>
 800bdb2:	a30b      	add	r3, pc, #44	; (adr r3, 800bde0 <__kernel_sin+0x148>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	4606      	mov	r6, r0
 800bdba:	460f      	mov	r7, r1
 800bdbc:	4640      	mov	r0, r8
 800bdbe:	4649      	mov	r1, r9
 800bdc0:	f7f4 fc12 	bl	80005e8 <__aeabi_dmul>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4630      	mov	r0, r6
 800bdca:	4639      	mov	r1, r7
 800bdcc:	f7f4 fa56 	bl	800027c <__adddf3>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	4629      	mov	r1, r5
 800bdd8:	f7f4 fa4e 	bl	8000278 <__aeabi_dsub>
 800bddc:	e7c4      	b.n	800bd68 <__kernel_sin+0xd0>
 800bdde:	bf00      	nop
 800bde0:	55555549 	.word	0x55555549
 800bde4:	3fc55555 	.word	0x3fc55555
 800bde8:	3fe00000 	.word	0x3fe00000
 800bdec:	5acfd57c 	.word	0x5acfd57c
 800bdf0:	3de5d93a 	.word	0x3de5d93a
 800bdf4:	8a2b9ceb 	.word	0x8a2b9ceb
 800bdf8:	3e5ae5e6 	.word	0x3e5ae5e6
 800bdfc:	57b1fe7d 	.word	0x57b1fe7d
 800be00:	3ec71de3 	.word	0x3ec71de3
 800be04:	19c161d5 	.word	0x19c161d5
 800be08:	3f2a01a0 	.word	0x3f2a01a0
 800be0c:	1110f8a6 	.word	0x1110f8a6
 800be10:	3f811111 	.word	0x3f811111
 800be14:	00000000 	.word	0x00000000

0800be18 <atan>:
 800be18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	ec55 4b10 	vmov	r4, r5, d0
 800be20:	4bc3      	ldr	r3, [pc, #780]	; (800c130 <atan+0x318>)
 800be22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be26:	429e      	cmp	r6, r3
 800be28:	46ab      	mov	fp, r5
 800be2a:	dd18      	ble.n	800be5e <atan+0x46>
 800be2c:	4bc1      	ldr	r3, [pc, #772]	; (800c134 <atan+0x31c>)
 800be2e:	429e      	cmp	r6, r3
 800be30:	dc01      	bgt.n	800be36 <atan+0x1e>
 800be32:	d109      	bne.n	800be48 <atan+0x30>
 800be34:	b144      	cbz	r4, 800be48 <atan+0x30>
 800be36:	4622      	mov	r2, r4
 800be38:	462b      	mov	r3, r5
 800be3a:	4620      	mov	r0, r4
 800be3c:	4629      	mov	r1, r5
 800be3e:	f7f4 fa1d 	bl	800027c <__adddf3>
 800be42:	4604      	mov	r4, r0
 800be44:	460d      	mov	r5, r1
 800be46:	e006      	b.n	800be56 <atan+0x3e>
 800be48:	f1bb 0f00 	cmp.w	fp, #0
 800be4c:	f300 8131 	bgt.w	800c0b2 <atan+0x29a>
 800be50:	a59b      	add	r5, pc, #620	; (adr r5, 800c0c0 <atan+0x2a8>)
 800be52:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be56:	ec45 4b10 	vmov	d0, r4, r5
 800be5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5e:	4bb6      	ldr	r3, [pc, #728]	; (800c138 <atan+0x320>)
 800be60:	429e      	cmp	r6, r3
 800be62:	dc14      	bgt.n	800be8e <atan+0x76>
 800be64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800be68:	429e      	cmp	r6, r3
 800be6a:	dc0d      	bgt.n	800be88 <atan+0x70>
 800be6c:	a396      	add	r3, pc, #600	; (adr r3, 800c0c8 <atan+0x2b0>)
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	ee10 0a10 	vmov	r0, s0
 800be76:	4629      	mov	r1, r5
 800be78:	f7f4 fa00 	bl	800027c <__adddf3>
 800be7c:	4baf      	ldr	r3, [pc, #700]	; (800c13c <atan+0x324>)
 800be7e:	2200      	movs	r2, #0
 800be80:	f7f4 fe42 	bl	8000b08 <__aeabi_dcmpgt>
 800be84:	2800      	cmp	r0, #0
 800be86:	d1e6      	bne.n	800be56 <atan+0x3e>
 800be88:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800be8c:	e02b      	b.n	800bee6 <atan+0xce>
 800be8e:	f000 f963 	bl	800c158 <fabs>
 800be92:	4bab      	ldr	r3, [pc, #684]	; (800c140 <atan+0x328>)
 800be94:	429e      	cmp	r6, r3
 800be96:	ec55 4b10 	vmov	r4, r5, d0
 800be9a:	f300 80bf 	bgt.w	800c01c <atan+0x204>
 800be9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bea2:	429e      	cmp	r6, r3
 800bea4:	f300 80a0 	bgt.w	800bfe8 <atan+0x1d0>
 800bea8:	ee10 2a10 	vmov	r2, s0
 800beac:	ee10 0a10 	vmov	r0, s0
 800beb0:	462b      	mov	r3, r5
 800beb2:	4629      	mov	r1, r5
 800beb4:	f7f4 f9e2 	bl	800027c <__adddf3>
 800beb8:	4ba0      	ldr	r3, [pc, #640]	; (800c13c <atan+0x324>)
 800beba:	2200      	movs	r2, #0
 800bebc:	f7f4 f9dc 	bl	8000278 <__aeabi_dsub>
 800bec0:	2200      	movs	r2, #0
 800bec2:	4606      	mov	r6, r0
 800bec4:	460f      	mov	r7, r1
 800bec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800beca:	4620      	mov	r0, r4
 800becc:	4629      	mov	r1, r5
 800bece:	f7f4 f9d5 	bl	800027c <__adddf3>
 800bed2:	4602      	mov	r2, r0
 800bed4:	460b      	mov	r3, r1
 800bed6:	4630      	mov	r0, r6
 800bed8:	4639      	mov	r1, r7
 800beda:	f7f4 fcaf 	bl	800083c <__aeabi_ddiv>
 800bede:	f04f 0a00 	mov.w	sl, #0
 800bee2:	4604      	mov	r4, r0
 800bee4:	460d      	mov	r5, r1
 800bee6:	4622      	mov	r2, r4
 800bee8:	462b      	mov	r3, r5
 800beea:	4620      	mov	r0, r4
 800beec:	4629      	mov	r1, r5
 800beee:	f7f4 fb7b 	bl	80005e8 <__aeabi_dmul>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4680      	mov	r8, r0
 800bef8:	4689      	mov	r9, r1
 800befa:	f7f4 fb75 	bl	80005e8 <__aeabi_dmul>
 800befe:	a374      	add	r3, pc, #464	; (adr r3, 800c0d0 <atan+0x2b8>)
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	4606      	mov	r6, r0
 800bf06:	460f      	mov	r7, r1
 800bf08:	f7f4 fb6e 	bl	80005e8 <__aeabi_dmul>
 800bf0c:	a372      	add	r3, pc, #456	; (adr r3, 800c0d8 <atan+0x2c0>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 f9b3 	bl	800027c <__adddf3>
 800bf16:	4632      	mov	r2, r6
 800bf18:	463b      	mov	r3, r7
 800bf1a:	f7f4 fb65 	bl	80005e8 <__aeabi_dmul>
 800bf1e:	a370      	add	r3, pc, #448	; (adr r3, 800c0e0 <atan+0x2c8>)
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	f7f4 f9aa 	bl	800027c <__adddf3>
 800bf28:	4632      	mov	r2, r6
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	f7f4 fb5c 	bl	80005e8 <__aeabi_dmul>
 800bf30:	a36d      	add	r3, pc, #436	; (adr r3, 800c0e8 <atan+0x2d0>)
 800bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf36:	f7f4 f9a1 	bl	800027c <__adddf3>
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	463b      	mov	r3, r7
 800bf3e:	f7f4 fb53 	bl	80005e8 <__aeabi_dmul>
 800bf42:	a36b      	add	r3, pc, #428	; (adr r3, 800c0f0 <atan+0x2d8>)
 800bf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf48:	f7f4 f998 	bl	800027c <__adddf3>
 800bf4c:	4632      	mov	r2, r6
 800bf4e:	463b      	mov	r3, r7
 800bf50:	f7f4 fb4a 	bl	80005e8 <__aeabi_dmul>
 800bf54:	a368      	add	r3, pc, #416	; (adr r3, 800c0f8 <atan+0x2e0>)
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	f7f4 f98f 	bl	800027c <__adddf3>
 800bf5e:	4642      	mov	r2, r8
 800bf60:	464b      	mov	r3, r9
 800bf62:	f7f4 fb41 	bl	80005e8 <__aeabi_dmul>
 800bf66:	a366      	add	r3, pc, #408	; (adr r3, 800c100 <atan+0x2e8>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	4680      	mov	r8, r0
 800bf6e:	4689      	mov	r9, r1
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 fb38 	bl	80005e8 <__aeabi_dmul>
 800bf78:	a363      	add	r3, pc, #396	; (adr r3, 800c108 <atan+0x2f0>)
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f7f4 f97b 	bl	8000278 <__aeabi_dsub>
 800bf82:	4632      	mov	r2, r6
 800bf84:	463b      	mov	r3, r7
 800bf86:	f7f4 fb2f 	bl	80005e8 <__aeabi_dmul>
 800bf8a:	a361      	add	r3, pc, #388	; (adr r3, 800c110 <atan+0x2f8>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f7f4 f972 	bl	8000278 <__aeabi_dsub>
 800bf94:	4632      	mov	r2, r6
 800bf96:	463b      	mov	r3, r7
 800bf98:	f7f4 fb26 	bl	80005e8 <__aeabi_dmul>
 800bf9c:	a35e      	add	r3, pc, #376	; (adr r3, 800c118 <atan+0x300>)
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f7f4 f969 	bl	8000278 <__aeabi_dsub>
 800bfa6:	4632      	mov	r2, r6
 800bfa8:	463b      	mov	r3, r7
 800bfaa:	f7f4 fb1d 	bl	80005e8 <__aeabi_dmul>
 800bfae:	a35c      	add	r3, pc, #368	; (adr r3, 800c120 <atan+0x308>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f960 	bl	8000278 <__aeabi_dsub>
 800bfb8:	4632      	mov	r2, r6
 800bfba:	463b      	mov	r3, r7
 800bfbc:	f7f4 fb14 	bl	80005e8 <__aeabi_dmul>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	f7f4 f958 	bl	800027c <__adddf3>
 800bfcc:	4622      	mov	r2, r4
 800bfce:	462b      	mov	r3, r5
 800bfd0:	f7f4 fb0a 	bl	80005e8 <__aeabi_dmul>
 800bfd4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	d14b      	bne.n	800c076 <atan+0x25e>
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	f7f4 f949 	bl	8000278 <__aeabi_dsub>
 800bfe6:	e72c      	b.n	800be42 <atan+0x2a>
 800bfe8:	ee10 0a10 	vmov	r0, s0
 800bfec:	4b53      	ldr	r3, [pc, #332]	; (800c13c <atan+0x324>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	4629      	mov	r1, r5
 800bff2:	f7f4 f941 	bl	8000278 <__aeabi_dsub>
 800bff6:	4b51      	ldr	r3, [pc, #324]	; (800c13c <atan+0x324>)
 800bff8:	4606      	mov	r6, r0
 800bffa:	460f      	mov	r7, r1
 800bffc:	2200      	movs	r2, #0
 800bffe:	4620      	mov	r0, r4
 800c000:	4629      	mov	r1, r5
 800c002:	f7f4 f93b 	bl	800027c <__adddf3>
 800c006:	4602      	mov	r2, r0
 800c008:	460b      	mov	r3, r1
 800c00a:	4630      	mov	r0, r6
 800c00c:	4639      	mov	r1, r7
 800c00e:	f7f4 fc15 	bl	800083c <__aeabi_ddiv>
 800c012:	f04f 0a01 	mov.w	sl, #1
 800c016:	4604      	mov	r4, r0
 800c018:	460d      	mov	r5, r1
 800c01a:	e764      	b.n	800bee6 <atan+0xce>
 800c01c:	4b49      	ldr	r3, [pc, #292]	; (800c144 <atan+0x32c>)
 800c01e:	429e      	cmp	r6, r3
 800c020:	da1d      	bge.n	800c05e <atan+0x246>
 800c022:	ee10 0a10 	vmov	r0, s0
 800c026:	4b48      	ldr	r3, [pc, #288]	; (800c148 <atan+0x330>)
 800c028:	2200      	movs	r2, #0
 800c02a:	4629      	mov	r1, r5
 800c02c:	f7f4 f924 	bl	8000278 <__aeabi_dsub>
 800c030:	4b45      	ldr	r3, [pc, #276]	; (800c148 <atan+0x330>)
 800c032:	4606      	mov	r6, r0
 800c034:	460f      	mov	r7, r1
 800c036:	2200      	movs	r2, #0
 800c038:	4620      	mov	r0, r4
 800c03a:	4629      	mov	r1, r5
 800c03c:	f7f4 fad4 	bl	80005e8 <__aeabi_dmul>
 800c040:	4b3e      	ldr	r3, [pc, #248]	; (800c13c <atan+0x324>)
 800c042:	2200      	movs	r2, #0
 800c044:	f7f4 f91a 	bl	800027c <__adddf3>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	4630      	mov	r0, r6
 800c04e:	4639      	mov	r1, r7
 800c050:	f7f4 fbf4 	bl	800083c <__aeabi_ddiv>
 800c054:	f04f 0a02 	mov.w	sl, #2
 800c058:	4604      	mov	r4, r0
 800c05a:	460d      	mov	r5, r1
 800c05c:	e743      	b.n	800bee6 <atan+0xce>
 800c05e:	462b      	mov	r3, r5
 800c060:	ee10 2a10 	vmov	r2, s0
 800c064:	4939      	ldr	r1, [pc, #228]	; (800c14c <atan+0x334>)
 800c066:	2000      	movs	r0, #0
 800c068:	f7f4 fbe8 	bl	800083c <__aeabi_ddiv>
 800c06c:	f04f 0a03 	mov.w	sl, #3
 800c070:	4604      	mov	r4, r0
 800c072:	460d      	mov	r5, r1
 800c074:	e737      	b.n	800bee6 <atan+0xce>
 800c076:	4b36      	ldr	r3, [pc, #216]	; (800c150 <atan+0x338>)
 800c078:	4e36      	ldr	r6, [pc, #216]	; (800c154 <atan+0x33c>)
 800c07a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c07e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c082:	e9da 2300 	ldrd	r2, r3, [sl]
 800c086:	f7f4 f8f7 	bl	8000278 <__aeabi_dsub>
 800c08a:	4622      	mov	r2, r4
 800c08c:	462b      	mov	r3, r5
 800c08e:	f7f4 f8f3 	bl	8000278 <__aeabi_dsub>
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c09a:	f7f4 f8ed 	bl	8000278 <__aeabi_dsub>
 800c09e:	f1bb 0f00 	cmp.w	fp, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	460d      	mov	r5, r1
 800c0a6:	f6bf aed6 	bge.w	800be56 <atan+0x3e>
 800c0aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ae:	461d      	mov	r5, r3
 800c0b0:	e6d1      	b.n	800be56 <atan+0x3e>
 800c0b2:	a51d      	add	r5, pc, #116	; (adr r5, 800c128 <atan+0x310>)
 800c0b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c0b8:	e6cd      	b.n	800be56 <atan+0x3e>
 800c0ba:	bf00      	nop
 800c0bc:	f3af 8000 	nop.w
 800c0c0:	54442d18 	.word	0x54442d18
 800c0c4:	bff921fb 	.word	0xbff921fb
 800c0c8:	8800759c 	.word	0x8800759c
 800c0cc:	7e37e43c 	.word	0x7e37e43c
 800c0d0:	e322da11 	.word	0xe322da11
 800c0d4:	3f90ad3a 	.word	0x3f90ad3a
 800c0d8:	24760deb 	.word	0x24760deb
 800c0dc:	3fa97b4b 	.word	0x3fa97b4b
 800c0e0:	a0d03d51 	.word	0xa0d03d51
 800c0e4:	3fb10d66 	.word	0x3fb10d66
 800c0e8:	c54c206e 	.word	0xc54c206e
 800c0ec:	3fb745cd 	.word	0x3fb745cd
 800c0f0:	920083ff 	.word	0x920083ff
 800c0f4:	3fc24924 	.word	0x3fc24924
 800c0f8:	5555550d 	.word	0x5555550d
 800c0fc:	3fd55555 	.word	0x3fd55555
 800c100:	2c6a6c2f 	.word	0x2c6a6c2f
 800c104:	bfa2b444 	.word	0xbfa2b444
 800c108:	52defd9a 	.word	0x52defd9a
 800c10c:	3fadde2d 	.word	0x3fadde2d
 800c110:	af749a6d 	.word	0xaf749a6d
 800c114:	3fb3b0f2 	.word	0x3fb3b0f2
 800c118:	fe231671 	.word	0xfe231671
 800c11c:	3fbc71c6 	.word	0x3fbc71c6
 800c120:	9998ebc4 	.word	0x9998ebc4
 800c124:	3fc99999 	.word	0x3fc99999
 800c128:	54442d18 	.word	0x54442d18
 800c12c:	3ff921fb 	.word	0x3ff921fb
 800c130:	440fffff 	.word	0x440fffff
 800c134:	7ff00000 	.word	0x7ff00000
 800c138:	3fdbffff 	.word	0x3fdbffff
 800c13c:	3ff00000 	.word	0x3ff00000
 800c140:	3ff2ffff 	.word	0x3ff2ffff
 800c144:	40038000 	.word	0x40038000
 800c148:	3ff80000 	.word	0x3ff80000
 800c14c:	bff00000 	.word	0xbff00000
 800c150:	0800d230 	.word	0x0800d230
 800c154:	0800d210 	.word	0x0800d210

0800c158 <fabs>:
 800c158:	ec51 0b10 	vmov	r0, r1, d0
 800c15c:	ee10 2a10 	vmov	r2, s0
 800c160:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c164:	ec43 2b10 	vmov	d0, r2, r3
 800c168:	4770      	bx	lr
 800c16a:	0000      	movs	r0, r0
 800c16c:	0000      	movs	r0, r0
	...

0800c170 <floor>:
 800c170:	ec51 0b10 	vmov	r0, r1, d0
 800c174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c178:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c17c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c180:	2e13      	cmp	r6, #19
 800c182:	ee10 5a10 	vmov	r5, s0
 800c186:	ee10 8a10 	vmov	r8, s0
 800c18a:	460c      	mov	r4, r1
 800c18c:	dc32      	bgt.n	800c1f4 <floor+0x84>
 800c18e:	2e00      	cmp	r6, #0
 800c190:	da14      	bge.n	800c1bc <floor+0x4c>
 800c192:	a333      	add	r3, pc, #204	; (adr r3, 800c260 <floor+0xf0>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f7f4 f870 	bl	800027c <__adddf3>
 800c19c:	2200      	movs	r2, #0
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f7f4 fcb2 	bl	8000b08 <__aeabi_dcmpgt>
 800c1a4:	b138      	cbz	r0, 800c1b6 <floor+0x46>
 800c1a6:	2c00      	cmp	r4, #0
 800c1a8:	da57      	bge.n	800c25a <floor+0xea>
 800c1aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c1ae:	431d      	orrs	r5, r3
 800c1b0:	d001      	beq.n	800c1b6 <floor+0x46>
 800c1b2:	4c2d      	ldr	r4, [pc, #180]	; (800c268 <floor+0xf8>)
 800c1b4:	2500      	movs	r5, #0
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	e025      	b.n	800c208 <floor+0x98>
 800c1bc:	4f2b      	ldr	r7, [pc, #172]	; (800c26c <floor+0xfc>)
 800c1be:	4137      	asrs	r7, r6
 800c1c0:	ea01 0307 	and.w	r3, r1, r7
 800c1c4:	4303      	orrs	r3, r0
 800c1c6:	d01f      	beq.n	800c208 <floor+0x98>
 800c1c8:	a325      	add	r3, pc, #148	; (adr r3, 800c260 <floor+0xf0>)
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	f7f4 f855 	bl	800027c <__adddf3>
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	f7f4 fc97 	bl	8000b08 <__aeabi_dcmpgt>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d0eb      	beq.n	800c1b6 <floor+0x46>
 800c1de:	2c00      	cmp	r4, #0
 800c1e0:	bfbe      	ittt	lt
 800c1e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c1e6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c1ea:	19a4      	addlt	r4, r4, r6
 800c1ec:	ea24 0407 	bic.w	r4, r4, r7
 800c1f0:	2500      	movs	r5, #0
 800c1f2:	e7e0      	b.n	800c1b6 <floor+0x46>
 800c1f4:	2e33      	cmp	r6, #51	; 0x33
 800c1f6:	dd0b      	ble.n	800c210 <floor+0xa0>
 800c1f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c1fc:	d104      	bne.n	800c208 <floor+0x98>
 800c1fe:	ee10 2a10 	vmov	r2, s0
 800c202:	460b      	mov	r3, r1
 800c204:	f7f4 f83a 	bl	800027c <__adddf3>
 800c208:	ec41 0b10 	vmov	d0, r0, r1
 800c20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c210:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c218:	fa23 f707 	lsr.w	r7, r3, r7
 800c21c:	4207      	tst	r7, r0
 800c21e:	d0f3      	beq.n	800c208 <floor+0x98>
 800c220:	a30f      	add	r3, pc, #60	; (adr r3, 800c260 <floor+0xf0>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	f7f4 f829 	bl	800027c <__adddf3>
 800c22a:	2200      	movs	r2, #0
 800c22c:	2300      	movs	r3, #0
 800c22e:	f7f4 fc6b 	bl	8000b08 <__aeabi_dcmpgt>
 800c232:	2800      	cmp	r0, #0
 800c234:	d0bf      	beq.n	800c1b6 <floor+0x46>
 800c236:	2c00      	cmp	r4, #0
 800c238:	da02      	bge.n	800c240 <floor+0xd0>
 800c23a:	2e14      	cmp	r6, #20
 800c23c:	d103      	bne.n	800c246 <floor+0xd6>
 800c23e:	3401      	adds	r4, #1
 800c240:	ea25 0507 	bic.w	r5, r5, r7
 800c244:	e7b7      	b.n	800c1b6 <floor+0x46>
 800c246:	2301      	movs	r3, #1
 800c248:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c24c:	fa03 f606 	lsl.w	r6, r3, r6
 800c250:	4435      	add	r5, r6
 800c252:	4545      	cmp	r5, r8
 800c254:	bf38      	it	cc
 800c256:	18e4      	addcc	r4, r4, r3
 800c258:	e7f2      	b.n	800c240 <floor+0xd0>
 800c25a:	2500      	movs	r5, #0
 800c25c:	462c      	mov	r4, r5
 800c25e:	e7aa      	b.n	800c1b6 <floor+0x46>
 800c260:	8800759c 	.word	0x8800759c
 800c264:	7e37e43c 	.word	0x7e37e43c
 800c268:	bff00000 	.word	0xbff00000
 800c26c:	000fffff 	.word	0x000fffff

0800c270 <nan>:
 800c270:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c278 <nan+0x8>
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	00000000 	.word	0x00000000
 800c27c:	7ff80000 	.word	0x7ff80000

0800c280 <scalbn>:
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	ec55 4b10 	vmov	r4, r5, d0
 800c286:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c28a:	4606      	mov	r6, r0
 800c28c:	462b      	mov	r3, r5
 800c28e:	b99a      	cbnz	r2, 800c2b8 <scalbn+0x38>
 800c290:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c294:	4323      	orrs	r3, r4
 800c296:	d036      	beq.n	800c306 <scalbn+0x86>
 800c298:	4b39      	ldr	r3, [pc, #228]	; (800c380 <scalbn+0x100>)
 800c29a:	4629      	mov	r1, r5
 800c29c:	ee10 0a10 	vmov	r0, s0
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f7f4 f9a1 	bl	80005e8 <__aeabi_dmul>
 800c2a6:	4b37      	ldr	r3, [pc, #220]	; (800c384 <scalbn+0x104>)
 800c2a8:	429e      	cmp	r6, r3
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	460d      	mov	r5, r1
 800c2ae:	da10      	bge.n	800c2d2 <scalbn+0x52>
 800c2b0:	a32b      	add	r3, pc, #172	; (adr r3, 800c360 <scalbn+0xe0>)
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	e03a      	b.n	800c32e <scalbn+0xae>
 800c2b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c2bc:	428a      	cmp	r2, r1
 800c2be:	d10c      	bne.n	800c2da <scalbn+0x5a>
 800c2c0:	ee10 2a10 	vmov	r2, s0
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f3 ffd8 	bl	800027c <__adddf3>
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	460d      	mov	r5, r1
 800c2d0:	e019      	b.n	800c306 <scalbn+0x86>
 800c2d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	3a36      	subs	r2, #54	; 0x36
 800c2da:	4432      	add	r2, r6
 800c2dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c2e0:	428a      	cmp	r2, r1
 800c2e2:	dd08      	ble.n	800c2f6 <scalbn+0x76>
 800c2e4:	2d00      	cmp	r5, #0
 800c2e6:	a120      	add	r1, pc, #128	; (adr r1, 800c368 <scalbn+0xe8>)
 800c2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2ec:	da1c      	bge.n	800c328 <scalbn+0xa8>
 800c2ee:	a120      	add	r1, pc, #128	; (adr r1, 800c370 <scalbn+0xf0>)
 800c2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f4:	e018      	b.n	800c328 <scalbn+0xa8>
 800c2f6:	2a00      	cmp	r2, #0
 800c2f8:	dd08      	ble.n	800c30c <scalbn+0x8c>
 800c2fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c302:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c306:	ec45 4b10 	vmov	d0, r4, r5
 800c30a:	bd70      	pop	{r4, r5, r6, pc}
 800c30c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c310:	da19      	bge.n	800c346 <scalbn+0xc6>
 800c312:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c316:	429e      	cmp	r6, r3
 800c318:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c31c:	dd0a      	ble.n	800c334 <scalbn+0xb4>
 800c31e:	a112      	add	r1, pc, #72	; (adr r1, 800c368 <scalbn+0xe8>)
 800c320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1e2      	bne.n	800c2ee <scalbn+0x6e>
 800c328:	a30f      	add	r3, pc, #60	; (adr r3, 800c368 <scalbn+0xe8>)
 800c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32e:	f7f4 f95b 	bl	80005e8 <__aeabi_dmul>
 800c332:	e7cb      	b.n	800c2cc <scalbn+0x4c>
 800c334:	a10a      	add	r1, pc, #40	; (adr r1, 800c360 <scalbn+0xe0>)
 800c336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d0b8      	beq.n	800c2b0 <scalbn+0x30>
 800c33e:	a10e      	add	r1, pc, #56	; (adr r1, 800c378 <scalbn+0xf8>)
 800c340:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c344:	e7b4      	b.n	800c2b0 <scalbn+0x30>
 800c346:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c34a:	3236      	adds	r2, #54	; 0x36
 800c34c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c350:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c354:	4620      	mov	r0, r4
 800c356:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <scalbn+0x108>)
 800c358:	2200      	movs	r2, #0
 800c35a:	e7e8      	b.n	800c32e <scalbn+0xae>
 800c35c:	f3af 8000 	nop.w
 800c360:	c2f8f359 	.word	0xc2f8f359
 800c364:	01a56e1f 	.word	0x01a56e1f
 800c368:	8800759c 	.word	0x8800759c
 800c36c:	7e37e43c 	.word	0x7e37e43c
 800c370:	8800759c 	.word	0x8800759c
 800c374:	fe37e43c 	.word	0xfe37e43c
 800c378:	c2f8f359 	.word	0xc2f8f359
 800c37c:	81a56e1f 	.word	0x81a56e1f
 800c380:	43500000 	.word	0x43500000
 800c384:	ffff3cb0 	.word	0xffff3cb0
 800c388:	3c900000 	.word	0x3c900000

0800c38c <_init>:
 800c38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38e:	bf00      	nop
 800c390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c392:	bc08      	pop	{r3}
 800c394:	469e      	mov	lr, r3
 800c396:	4770      	bx	lr

0800c398 <_fini>:
 800c398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c39a:	bf00      	nop
 800c39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39e:	bc08      	pop	{r3}
 800c3a0:	469e      	mov	lr, r3
 800c3a2:	4770      	bx	lr
