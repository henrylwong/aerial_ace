
imu_adc_merge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f83c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001300  0800f9d0  0800f9d0  0001f9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cd0  08010cd0  0003022c  2**0
                  CONTENTS
  4 .ARM          00000000  08010cd0  08010cd0  0003022c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010cd0  08010cd0  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cd0  08010cd0  00020cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cd4  08010cd4  00020cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08010cd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003022c  2**0
                  CONTENTS
 10 .bss          00000d34  20000230  20000230  00030230  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000f64  20000f64  00030230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c410  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003541  00000000  00000000  0004c66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001990  00000000  00000000  0004fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  00051540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000056f4  00000000  00000000  00052d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d4d7  00000000  00000000  0005842c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4c55  00000000  00000000  00075903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a558  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000834c  00000000  00000000  0013a5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f9b4 	.word	0x0800f9b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800f9b4 	.word	0x0800f9b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <calculate_gestures>:
extern float resistance_max[4];

//====================================================================================================
// Functions

void calculate_gestures() {
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 4; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	e00d      	b.n	8000cb0 <calculate_gestures+0x28>
        finger_angles[i] = calculate_finger_angle(i);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f000 f8c5 	bl	8000e24 <calculate_finger_angle>
 8000c9a:	eef0 7a40 	vmov.f32	s15, s0
 8000c9e:	4a40      	ldr	r2, [pc, #256]	; (8000da0 <calculate_gestures+0x118>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3301      	adds	r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b03      	cmp	r3, #3
 8000cb4:	ddee      	ble.n	8000c94 <calculate_gestures+0xc>
    }

    int gesture_key = detect_gestures(finger_angles);
 8000cb6:	483a      	ldr	r0, [pc, #232]	; (8000da0 <calculate_gestures+0x118>)
 8000cb8:	f000 f87e 	bl	8000db8 <detect_gestures>
 8000cbc:	6038      	str	r0, [r7, #0]
    gimbal_throttle = 0;
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <calculate_gestures+0x11c>)
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
// //            gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
//     } else if (gesture_key && 1 >> 3) {
// 		gimbal_yaw = 0.5 - lerp(0, 0.5, finger_angles[0] / 90);
// //		gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
// 	}
    gimbal_yaw = 0.5 - lerp(0, 0.5, finger_angles[3] / 90) + lerp(0, 0.5, finger_angles[0] / 90);
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <calculate_gestures+0x118>)
 8000cc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ccc:	eddf 6a36 	vldr	s13, [pc, #216]	; 8000da8 <calculate_gestures+0x120>
 8000cd0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cd4:	eeb0 1a47 	vmov.f32	s2, s14
 8000cd8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000cdc:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8000dac <calculate_gestures+0x124>
 8000ce0:	f005 ff19 	bl	8006b16 <lerp>
 8000ce4:	ee10 3a10 	vmov	r3, s0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc2d 	bl	8000548 <__aeabi_f2d>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	492e      	ldr	r1, [pc, #184]	; (8000db0 <calculate_gestures+0x128>)
 8000cf8:	f7ff fac6 	bl	8000288 <__aeabi_dsub>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4614      	mov	r4, r2
 8000d02:	461d      	mov	r5, r3
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <calculate_gestures+0x118>)
 8000d06:	edd3 7a00 	vldr	s15, [r3]
 8000d0a:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000da8 <calculate_gestures+0x120>
 8000d0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d12:	eeb0 1a47 	vmov.f32	s2, s14
 8000d16:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000d1a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8000dac <calculate_gestures+0x124>
 8000d1e:	f005 fefa 	bl	8006b16 <lerp>
 8000d22:	ee10 3a10 	vmov	r3, s0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fc0e 	bl	8000548 <__aeabi_f2d>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4620      	mov	r0, r4
 8000d32:	4629      	mov	r1, r5
 8000d34:	f7ff faaa 	bl	800028c <__adddf3>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4610      	mov	r0, r2
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f7ff ff52 	bl	8000be8 <__aeabi_d2f>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <calculate_gestures+0x12c>)
 8000d48:	6013      	str	r3, [r2, #0]

    if (gesture_key >> 2 && gesture_key >> 1) {
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	109b      	asrs	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d022      	beq.n	8000d98 <calculate_gestures+0x110>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	105b      	asrs	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d01e      	beq.n	8000d98 <calculate_gestures+0x110>
    	gimbal_throttle = lerp(0, 1, max(finger_angles[FINGER_MIDDLE_IDX], finger_angles[FINGER_RING_IDX]) / 90);
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <calculate_gestures+0x118>)
 8000d5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d60:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <calculate_gestures+0x118>)
 8000d62:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d66:	eef0 0a47 	vmov.f32	s1, s14
 8000d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6e:	f005 fe71 	bl	8006a54 <max>
 8000d72:	eeb0 7a40 	vmov.f32	s14, s0
 8000d76:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000da8 <calculate_gestures+0x120>
 8000d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d7e:	eeb0 1a67 	vmov.f32	s2, s15
 8000d82:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000d86:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8000dac <calculate_gestures+0x124>
 8000d8a:	f005 fec4 	bl	8006b16 <lerp>
 8000d8e:	eef0 7a40 	vmov.f32	s15, s0
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <calculate_gestures+0x11c>)
 8000d94:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8000da0:	2000024c 	.word	0x2000024c
 8000da4:	20000c64 	.word	0x20000c64
 8000da8:	42b40000 	.word	0x42b40000
 8000dac:	00000000 	.word	0x00000000
 8000db0:	3fe00000 	.word	0x3fe00000
 8000db4:	20000c60 	.word	0x20000c60

08000db8 <detect_gestures>:

int detect_gestures(float* finger_angles) {
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    short gesture_key = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	e021      	b.n	8000e0e <detect_gestures+0x56>
        if (finger_angles[i] > ANGLE_THRESH) {
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	edd3 7a00 	vldr	s15, [r3]
 8000dd6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de2:	dd0a      	ble.n	8000dfa <detect_gestures+0x42>
            gesture_key |= 1 << (3 - i);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	f1c3 0303 	rsb	r3, r3, #3
 8000dea:	2201      	movs	r2, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	89fb      	ldrh	r3, [r7, #14]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	81fb      	strh	r3, [r7, #14]
 8000df8:	e006      	b.n	8000e08 <detect_gestures+0x50>
        } else {
            finger_angles[i] = 0;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	f04f 0200 	mov.w	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	ddda      	ble.n	8000dca <detect_gestures+0x12>
        }
    }
    return gesture_key;
 8000e14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <calculate_finger_angle>:

/*
 * Calculate finger angles
 * ADC_flex read by "analogRead(flexPin)" // analogRead later defined in flex sensor interface
 */
float calculate_finger_angle(int finger_num) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    float resistance_flex = calculate_finger_resistance(finger_num);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f833 	bl	8000e98 <calculate_finger_resistance>
 8000e32:	ed87 0a03 	vstr	s0, [r7, #12]
    float angle = 90 - map(resistance_flex, resistance_min[finger_num], resistance_max[finger_num], 0, 90);
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <calculate_finger_angle+0x64>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	edd3 7a00 	vldr	s15, [r3]
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <calculate_finger_angle+0x68>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	ed93 7a00 	vldr	s14, [r3]
 8000e4e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8000e90 <calculate_finger_angle+0x6c>
 8000e52:	eddf 1a10 	vldr	s3, [pc, #64]	; 8000e94 <calculate_finger_angle+0x70>
 8000e56:	eeb0 1a47 	vmov.f32	s2, s14
 8000e5a:	eef0 0a67 	vmov.f32	s1, s15
 8000e5e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e62:	f005 fe76 	bl	8006b52 <map>
 8000e66:	eef0 7a40 	vmov.f32	s15, s0
 8000e6a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000e90 <calculate_finger_angle+0x6c>
 8000e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e72:	edc7 7a02 	vstr	s15, [r7, #8]
    return angle;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	ee07 3a90 	vmov	s15, r3
}
 8000e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000c9c 	.word	0x20000c9c
 8000e8c:	20000cac 	.word	0x20000cac
 8000e90:	42b40000 	.word	0x42b40000
 8000e94:	00000000 	.word	0x00000000

08000e98 <calculate_finger_resistance>:

float calculate_finger_resistance(int finger_num) {
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	float voltage_flex = ADC_vals[finger_num] * VCC / ADC_MAX_VAL;
 8000ea0:	4a29      	ldr	r2, [pc, #164]	; (8000f48 <calculate_finger_resistance+0xb0>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb3b 	bl	8000524 <__aeabi_i2d>
 8000eae:	a324      	add	r3, pc, #144	; (adr r3, 8000f40 <calculate_finger_resistance+0xa8>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff fba0 	bl	80005f8 <__aeabi_dmul>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4614      	mov	r4, r2
 8000ebe:	461d      	mov	r5, r3
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <calculate_finger_resistance+0xb4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fb2d 	bl	8000524 <__aeabi_i2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4620      	mov	r0, r4
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	f7ff fcbb 	bl	800084c <__aeabi_ddiv>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe83 	bl	8000be8 <__aeabi_d2f>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	60fb      	str	r3, [r7, #12]
	float resistance_flex = (RESISTANCE_PULLDOWN * voltage_flex) / (VCC - voltage_flex);
 8000ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f50 <calculate_finger_resistance+0xb8>
 8000eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef2:	ee17 0a90 	vmov	r0, s15
 8000ef6:	f7ff fb27 	bl	8000548 <__aeabi_f2d>
 8000efa:	4604      	mov	r4, r0
 8000efc:	460d      	mov	r5, r1
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff fb22 	bl	8000548 <__aeabi_f2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	a10d      	add	r1, pc, #52	; (adr r1, 8000f40 <calculate_finger_resistance+0xa8>)
 8000f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f0e:	f7ff f9bb 	bl	8000288 <__aeabi_dsub>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4620      	mov	r0, r4
 8000f18:	4629      	mov	r1, r5
 8000f1a:	f7ff fc97 	bl	800084c <__aeabi_ddiv>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fe5f 	bl	8000be8 <__aeabi_d2f>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	60bb      	str	r3, [r7, #8]
	return resistance_flex;
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	ee07 3a90 	vmov	s15, r3
}
 8000f34:	eeb0 0a67 	vmov.f32	s0, s15
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	66666666 	.word	0x66666666
 8000f44:	400a6666 	.word	0x400a6666
 8000f48:	20000c8c 	.word	0x20000c8c
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	469c4000 	.word	0x469c4000

08000f54 <calibrate_init>:

void calibrate_init() {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	e00e      	b.n	8000f7e <calibrate_init+0x2a>
		resistance_min[i] = RESISTANCE_FLEXED;
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <calibrate_init+0x40>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <calibrate_init+0x44>)
 8000f6a:	601a      	str	r2, [r3, #0]
		resistance_max[i] = RESISTANCE_UNFLEXED;
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <calibrate_init+0x48>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <calibrate_init+0x4c>)
 8000f76:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	dded      	ble.n	8000f60 <calibrate_init+0xc>
	}
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000c9c 	.word	0x20000c9c
 8000f98:	472fc800 	.word	0x472fc800
 8000f9c:	20000cac 	.word	0x20000cac
 8000fa0:	461c4000 	.word	0x461c4000

08000fa4 <calculate_orientation>:

/*
 * Estimate orientation based on previous quaternion values. 
 * Runs Madgwick, Madgwick output quaternion to relative Euler angles, and remaps angles to gimbal potentiometer percentages.
 */
void calculate_orientation(float delta_time) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	ed87 0a01 	vstr	s0, [r7, #4]
	float sample_freq;
	#ifdef sampleFreq
	sample_freq = sampleFreq;
	#else
	sample_freq = convert_period_to_freq(delta_time);
 8000fae:	ed97 0a01 	vldr	s0, [r7, #4]
 8000fb2:	f005 fe14 	bl	8006bde <convert_period_to_freq>
 8000fb6:	ed87 0a03 	vstr	s0, [r7, #12]
	#endif /* sampleFreq */

	MadgwickAHRSupdate(gyro.gyro.x, gyro.gyro.y, gyro.gyro.z, accel.acceleration.x, accel.acceleration.y, accel.acceleration.z, mag.magnetic.x, mag.magnetic.y, mag.magnetic.z, sample_freq); // gyro, accel, mag are sensors_type_t
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <calculate_orientation+0x7c>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <calculate_orientation+0x7c>)
 8000fc2:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <calculate_orientation+0x7c>)
 8000fc8:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <calculate_orientation+0x80>)
 8000fce:	ed93 6a00 	vldr	s12, [r3]
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <calculate_orientation+0x80>)
 8000fd4:	edd3 5a01 	vldr	s11, [r3, #4]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <calculate_orientation+0x80>)
 8000fda:	ed93 5a02 	vldr	s10, [r3, #8]
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <calculate_orientation+0x84>)
 8000fe0:	ed93 3a00 	vldr	s6, [r3]
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <calculate_orientation+0x84>)
 8000fe6:	edd3 3a01 	vldr	s7, [r3, #4]
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <calculate_orientation+0x84>)
 8000fec:	ed93 4a02 	vldr	s8, [r3, #8]
 8000ff0:	edd7 4a03 	vldr	s9, [r7, #12]
 8000ff4:	eef0 2a45 	vmov.f32	s5, s10
 8000ff8:	eeb0 2a65 	vmov.f32	s4, s11
 8000ffc:	eef0 1a46 	vmov.f32	s3, s12
 8001000:	eeb0 1a66 	vmov.f32	s2, s13
 8001004:	eef0 0a47 	vmov.f32	s1, s14
 8001008:	eeb0 0a67 	vmov.f32	s0, s15
 800100c:	f000 f9ec 	bl	80013e8 <MadgwickAHRSupdate>
	convert_quaternion_to_euler();
 8001010:	f000 f91e 	bl	8001250 <convert_quaternion_to_euler>
	remap_angles_to_gimbals();
 8001014:	f000 f80c 	bl	8001030 <remap_angles_to_gimbals>
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000c68 	.word	0x20000c68
 8001024:	20000c74 	.word	0x20000c74
 8001028:	20000c80 	.word	0x20000c80
 800102c:	00000000 	.word	0x00000000

08001030 <remap_angles_to_gimbals>:

/*
 * Remapping only consists of pitch and roll
 */
void remap_angles_to_gimbals() {
 8001030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001034:	af00      	add	r7, sp, #0
	remapped_angle_x = (angle_x + atan2_offset) / (2 * M_PI);
 8001036:	4b6e      	ldr	r3, [pc, #440]	; (80011f0 <remap_angles_to_gimbals+0x1c0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa84 	bl	8000548 <__aeabi_f2d>
 8001040:	a363      	add	r3, pc, #396	; (adr r3, 80011d0 <remap_angles_to_gimbals+0x1a0>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff f921 	bl	800028c <__adddf3>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	a361      	add	r3, pc, #388	; (adr r3, 80011d8 <remap_angles_to_gimbals+0x1a8>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff fbf8 	bl	800084c <__aeabi_ddiv>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fdc0 	bl	8000be8 <__aeabi_d2f>
 8001068:	4603      	mov	r3, r0
 800106a:	4a62      	ldr	r2, [pc, #392]	; (80011f4 <remap_angles_to_gimbals+0x1c4>)
 800106c:	6013      	str	r3, [r2, #0]
	remapped_angle_y = (angle_y + asin_offset) / (M_PI);
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <remap_angles_to_gimbals+0x1c8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa68 	bl	8000548 <__aeabi_f2d>
 8001078:	a359      	add	r3, pc, #356	; (adr r3, 80011e0 <remap_angles_to_gimbals+0x1b0>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff f905 	bl	800028c <__adddf3>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	a351      	add	r3, pc, #324	; (adr r3, 80011d0 <remap_angles_to_gimbals+0x1a0>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fbdc 	bl	800084c <__aeabi_ddiv>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fda4 	bl	8000be8 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a56      	ldr	r2, [pc, #344]	; (80011fc <remap_angles_to_gimbals+0x1cc>)
 80010a4:	6013      	str	r3, [r2, #0]
	gimbal_roll = map(clamp(lerp(0, 1, remapped_angle_x), 0.25, 0.75), 0.25, 0.75, 0, 1);
 80010a6:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <remap_angles_to_gimbals+0x1c4>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	eeb0 1a67 	vmov.f32	s2, s15
 80010b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80010b4:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001200 <remap_angles_to_gimbals+0x1d0>
 80010b8:	f005 fd2d 	bl	8006b16 <lerp>
 80010bc:	eef0 7a40 	vmov.f32	s15, s0
 80010c0:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 80010c4:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 80010c8:	eeb0 0a67 	vmov.f32	s0, s15
 80010cc:	f005 fcfa 	bl	8006ac4 <clamp>
 80010d0:	eef0 7a40 	vmov.f32	s15, s0
 80010d4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 80010d8:	eddf 1a49 	vldr	s3, [pc, #292]	; 8001200 <remap_angles_to_gimbals+0x1d0>
 80010dc:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 80010e0:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	f005 fd33 	bl	8006b52 <map>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	4b44      	ldr	r3, [pc, #272]	; (8001204 <remap_angles_to_gimbals+0x1d4>)
 80010f2:	edc3 7a00 	vstr	s15, [r3]
	if (fabs(gimbal_roll - 0.5) <= GIMBAL_IDLE_THRESH) {
 80010f6:	4b43      	ldr	r3, [pc, #268]	; (8001204 <remap_angles_to_gimbals+0x1d4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa24 	bl	8000548 <__aeabi_f2d>
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b40      	ldr	r3, [pc, #256]	; (8001208 <remap_angles_to_gimbals+0x1d8>)
 8001106:	f7ff f8bf 	bl	8000288 <__aeabi_dsub>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4690      	mov	r8, r2
 8001110:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001114:	a334      	add	r3, pc, #208	; (adr r3, 80011e8 <remap_angles_to_gimbals+0x1b8>)
 8001116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111a:	4640      	mov	r0, r8
 800111c:	4649      	mov	r1, r9
 800111e:	f7ff fce7 	bl	8000af0 <__aeabi_dcmple>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <remap_angles_to_gimbals+0x100>
		gimbal_roll = 0.5;
 8001128:	4b36      	ldr	r3, [pc, #216]	; (8001204 <remap_angles_to_gimbals+0x1d4>)
 800112a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800112e:	601a      	str	r2, [r3, #0]
	}
	gimbal_pitch = 1 - map(clamp(lerp(0, 1, remapped_angle_y), 0.25, 0.75), 0.25, 0.75, 0, 1);
 8001130:	4b32      	ldr	r3, [pc, #200]	; (80011fc <remap_angles_to_gimbals+0x1cc>)
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	eeb0 1a67 	vmov.f32	s2, s15
 800113a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800113e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8001200 <remap_angles_to_gimbals+0x1d0>
 8001142:	f005 fce8 	bl	8006b16 <lerp>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 800114e:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	f005 fcb5 	bl	8006ac4 <clamp>
 800115a:	eef0 7a40 	vmov.f32	s15, s0
 800115e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8001162:	eddf 1a27 	vldr	s3, [pc, #156]	; 8001200 <remap_angles_to_gimbals+0x1d0>
 8001166:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 800116a:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	f005 fcee 	bl	8006b52 <map>
 8001176:	eef0 7a40 	vmov.f32	s15, s0
 800117a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800117e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001182:	4b22      	ldr	r3, [pc, #136]	; (800120c <remap_angles_to_gimbals+0x1dc>)
 8001184:	edc3 7a00 	vstr	s15, [r3]
	if (fabs(gimbal_pitch - 0.5) <= GIMBAL_IDLE_THRESH) {
 8001188:	4b20      	ldr	r3, [pc, #128]	; (800120c <remap_angles_to_gimbals+0x1dc>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <remap_angles_to_gimbals+0x1d8>)
 8001198:	f7ff f876 	bl	8000288 <__aeabi_dsub>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4614      	mov	r4, r2
 80011a2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80011a6:	a310      	add	r3, pc, #64	; (adr r3, 80011e8 <remap_angles_to_gimbals+0x1b8>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff fc9e 	bl	8000af0 <__aeabi_dcmple>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d100      	bne.n	80011bc <remap_angles_to_gimbals+0x18c>
		gimbal_pitch = 0.5;
	}
}
 80011ba:	e003      	b.n	80011c4 <remap_angles_to_gimbals+0x194>
		gimbal_pitch = 0.5;
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <remap_angles_to_gimbals+0x1dc>)
 80011be:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80011c2:	601a      	str	r2, [r3, #0]
}
 80011c4:	bf00      	nop
 80011c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	54442d18 	.word	0x54442d18
 80011d4:	400921fb 	.word	0x400921fb
 80011d8:	54442d18 	.word	0x54442d18
 80011dc:	401921fb 	.word	0x401921fb
 80011e0:	54442d18 	.word	0x54442d18
 80011e4:	3ff921fb 	.word	0x3ff921fb
 80011e8:	9999999a 	.word	0x9999999a
 80011ec:	3fb99999 	.word	0x3fb99999
 80011f0:	20000c50 	.word	0x20000c50
 80011f4:	2000025c 	.word	0x2000025c
 80011f8:	20000c54 	.word	0x20000c54
 80011fc:	20000260 	.word	0x20000260
 8001200:	00000000 	.word	0x00000000
 8001204:	20000c58 	.word	0x20000c58
 8001208:	3fe00000 	.word	0x3fe00000
 800120c:	20000c5c 	.word	0x20000c5c

08001210 <reset_aux_frame>:

/*
 * Reset aux frame (identity)
 */
void reset_aux_frame() {
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	q0 = 1.0f;
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <reset_aux_frame+0x30>)
 8001216:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800121a:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <reset_aux_frame+0x34>)
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <reset_aux_frame+0x38>)
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <reset_aux_frame+0x3c>)
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	2000002c 	.word	0x2000002c
 8001244:	20000c44 	.word	0x20000c44
 8001248:	20000c48 	.word	0x20000c48
 800124c:	20000c4c 	.word	0x20000c4c

08001250 <convert_quaternion_to_euler>:

/*
 * Convert quaternion to euler angles
 */
void convert_quaternion_to_euler() {
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
	// angle_x is roll; angle_y is pitch; angle_z is yaw
	double q2sqr = q2 * q2;
 8001256:	4b5c      	ldr	r3, [pc, #368]	; (80013c8 <convert_quaternion_to_euler+0x178>)
 8001258:	ed93 7a00 	vldr	s14, [r3]
 800125c:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <convert_quaternion_to_euler+0x178>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001266:	ee17 0a90 	vmov	r0, s15
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	e9c7 2306 	strd	r2, r3, [r7, #24]
	// double t0 = -2.0 * (q2sqr + q3 * q3) + 1.0;
	// double t1 = +2.0 * (q1 * q2 + q0 * q3);
	double t2 = -2.0 * (q1 * q3 - q0 * q2);
 8001276:	4b55      	ldr	r3, [pc, #340]	; (80013cc <convert_quaternion_to_euler+0x17c>)
 8001278:	ed93 7a00 	vldr	s14, [r3]
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <convert_quaternion_to_euler+0x180>)
 800127e:	edd3 7a00 	vldr	s15, [r3]
 8001282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001286:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <convert_quaternion_to_euler+0x184>)
 8001288:	edd3 6a00 	vldr	s13, [r3]
 800128c:	4b4e      	ldr	r3, [pc, #312]	; (80013c8 <convert_quaternion_to_euler+0x178>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129a:	ee17 0a90 	vmov	r0, s15
 800129e:	f7ff f953 	bl	8000548 <__aeabi_f2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012aa:	f7ff f9a5 	bl	80005f8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double t3 = +2.0 * (q2 * q3 + q0 * q1);
 80012b6:	4b44      	ldr	r3, [pc, #272]	; (80013c8 <convert_quaternion_to_euler+0x178>)
 80012b8:	ed93 7a00 	vldr	s14, [r3]
 80012bc:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <convert_quaternion_to_euler+0x180>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <convert_quaternion_to_euler+0x184>)
 80012c8:	edd3 6a00 	vldr	s13, [r3]
 80012cc:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <convert_quaternion_to_euler+0x17c>)
 80012ce:	edd3 7a00 	vldr	s15, [r3]
 80012d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	ee17 0a90 	vmov	r0, s15
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	f7fe ffd1 	bl	800028c <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double t4 = -2.0 * (q1 * q1 + q2sqr) + 1.0;
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <convert_quaternion_to_euler+0x17c>)
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <convert_quaternion_to_euler+0x17c>)
 80012fa:	edd3 7a00 	vldr	s15, [r3]
 80012fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001302:	ee17 0a90 	vmov	r0, s15
 8001306:	f7ff f91f 	bl	8000548 <__aeabi_f2d>
 800130a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800130e:	f7fe ffbd 	bl	800028c <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001322:	f7ff f969 	bl	80005f8 <__aeabi_dmul>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <convert_quaternion_to_euler+0x188>)
 8001334:	f7fe ffaa 	bl	800028c <__adddf3>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	e9c7 2300 	strd	r2, r3, [r7]

	t2 = t2 > 1.0 ? 1.0 : t2;
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <convert_quaternion_to_euler+0x188>)
 8001346:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800134a:	f7ff fbe5 	bl	8000b18 <__aeabi_dcmpgt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <convert_quaternion_to_euler+0x10c>
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b1f      	ldr	r3, [pc, #124]	; (80013d8 <convert_quaternion_to_euler+0x188>)
 800135a:	e001      	b.n	8001360 <convert_quaternion_to_euler+0x110>
 800135c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001360:	e9c7 2304 	strd	r2, r3, [r7, #16]
	t2 = t2 < -1.0 ? -1.0 : t2;
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <convert_quaternion_to_euler+0x18c>)
 800136a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800136e:	f7ff fbb5 	bl	8000adc <__aeabi_dcmplt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <convert_quaternion_to_euler+0x130>
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <convert_quaternion_to_euler+0x18c>)
 800137e:	e001      	b.n	8001384 <convert_quaternion_to_euler+0x134>
 8001380:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001384:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// @henry: switch x, y for roll/pitch
	angle_x = asin(t2);
 8001388:	ed97 0b04 	vldr	d0, [r7, #16]
 800138c:	f00c fd7c 	bl	800de88 <asin>
 8001390:	ec53 2b10 	vmov	r2, r3, d0
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fc26 	bl	8000be8 <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <convert_quaternion_to_euler+0x190>)
 80013a0:	6013      	str	r3, [r2, #0]
	angle_y = atan2(t3, t4);
 80013a2:	ed97 1b00 	vldr	d1, [r7]
 80013a6:	ed97 0b02 	vldr	d0, [r7, #8]
 80013aa:	f00c fda1 	bl	800def0 <atan2>
 80013ae:	ec53 2b10 	vmov	r2, r3, d0
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fc17 	bl	8000be8 <__aeabi_d2f>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <convert_quaternion_to_euler+0x194>)
 80013be:	6013      	str	r3, [r2, #0]
	// angle_z = atan2(t1, t0);
}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000c48 	.word	0x20000c48
 80013cc:	20000c44 	.word	0x20000c44
 80013d0:	20000c4c 	.word	0x20000c4c
 80013d4:	2000002c 	.word	0x2000002c
 80013d8:	3ff00000 	.word	0x3ff00000
 80013dc:	bff00000 	.word	0xbff00000
 80013e0:	20000c50 	.word	0x20000c50
 80013e4:	20000c54 	.word	0x20000c54

080013e8 <MadgwickAHRSupdate>:


//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float sample_freq) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0ae      	sub	sp, #184	; 0xb8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80013f2:	edc7 0a08 	vstr	s1, [r7, #32]
 80013f6:	ed87 1a07 	vstr	s2, [r7, #28]
 80013fa:	edc7 1a06 	vstr	s3, [r7, #24]
 80013fe:	ed87 2a05 	vstr	s4, [r7, #20]
 8001402:	edc7 2a04 	vstr	s5, [r7, #16]
 8001406:	ed87 3a03 	vstr	s6, [r7, #12]
 800140a:	edc7 3a02 	vstr	s7, [r7, #8]
 800140e:	ed87 4a01 	vstr	s8, [r7, #4]
 8001412:	edc7 4a00 	vstr	s9, [r7]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001416:	edd7 7a03 	vldr	s15, [r7, #12]
 800141a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	d11f      	bne.n	8001464 <MadgwickAHRSupdate+0x7c>
 8001424:	edd7 7a02 	vldr	s15, [r7, #8]
 8001428:	eef5 7a40 	vcmp.f32	s15, #0.0
 800142c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001430:	d118      	bne.n	8001464 <MadgwickAHRSupdate+0x7c>
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef5 7a40 	vcmp.f32	s15, #0.0
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	d111      	bne.n	8001464 <MadgwickAHRSupdate+0x7c>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az, sample_freq);
 8001440:	ed97 3a00 	vldr	s6, [r7]
 8001444:	edd7 2a04 	vldr	s5, [r7, #16]
 8001448:	ed97 2a05 	vldr	s4, [r7, #20]
 800144c:	edd7 1a06 	vldr	s3, [r7, #24]
 8001450:	ed97 1a07 	vldr	s2, [r7, #28]
 8001454:	edd7 0a08 	vldr	s1, [r7, #32]
 8001458:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800145c:	f000 feec 	bl	8002238 <MadgwickAHRSupdateIMU>
		return;
 8001460:	f000 bedc 	b.w	800221c <MadgwickAHRSupdate+0xe34>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001464:	4be4      	ldr	r3, [pc, #912]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eeb1 7a67 	vneg.f32	s14, s15
 800146e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001476:	4be1      	ldr	r3, [pc, #900]	; (80017fc <MadgwickAHRSupdate+0x414>)
 8001478:	edd3 6a00 	vldr	s13, [r3]
 800147c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001484:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001488:	4bdd      	ldr	r3, [pc, #884]	; (8001800 <MadgwickAHRSupdate+0x418>)
 800148a:	edd3 6a00 	vldr	s13, [r3]
 800148e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80014a6:	4bd7      	ldr	r3, [pc, #860]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80014b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b4:	4bd1      	ldr	r3, [pc, #836]	; (80017fc <MadgwickAHRSupdate+0x414>)
 80014b6:	edd3 6a00 	vldr	s13, [r3]
 80014ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80014be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c6:	4bce      	ldr	r3, [pc, #824]	; (8001800 <MadgwickAHRSupdate+0x418>)
 80014c8:	edd3 6a00 	vldr	s13, [r3]
 80014cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80014d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80014e4:	4bc7      	ldr	r3, [pc, #796]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80014ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014f2:	4bc1      	ldr	r3, [pc, #772]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 80014f4:	edd3 6a00 	vldr	s13, [r3]
 80014f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001504:	4bbe      	ldr	r3, [pc, #760]	; (8001800 <MadgwickAHRSupdate+0x418>)
 8001506:	edd3 6a00 	vldr	s13, [r3]
 800150a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800150e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800151a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001522:	4bb8      	ldr	r3, [pc, #736]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	edd7 7a07 	vldr	s15, [r7, #28]
 800152c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001530:	4bb1      	ldr	r3, [pc, #708]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 8001532:	edd3 6a00 	vldr	s13, [r3]
 8001536:	edd7 7a08 	vldr	s15, [r7, #32]
 800153a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001542:	4bae      	ldr	r3, [pc, #696]	; (80017fc <MadgwickAHRSupdate+0x414>)
 8001544:	edd3 6a00 	vldr	s13, [r3]
 8001548:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800154c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001554:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001560:	edd7 7a06 	vldr	s15, [r7, #24]
 8001564:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	d10e      	bne.n	800158c <MadgwickAHRSupdate+0x1a4>
 800156e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001572:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157a:	d107      	bne.n	800158c <MadgwickAHRSupdate+0x1a4>
 800157c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001580:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	f000 85ac 	beq.w	80020e4 <MadgwickAHRSupdate+0xcfc>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800158c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001590:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001594:	edd7 7a05 	vldr	s15, [r7, #20]
 8001598:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	f001 f976 	bl	80028a0 <invSqrt>
 80015b4:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		ax *= recipNorm;
 80015b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80015bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 80015c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015cc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 80015d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80015dc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80015e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e4:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80015e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80015f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001600:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	eeb0 0a67 	vmov.f32	s0, s15
 800160c:	f001 f948 	bl	80028a0 <invSqrt>
 8001610:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		mx *= recipNorm;
 8001614:	ed97 7a03 	vldr	s14, [r7, #12]
 8001618:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800161c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001620:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001624:	ed97 7a02 	vldr	s14, [r7, #8]
 8001628:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800162c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001630:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001634:	ed97 7a01 	vldr	s14, [r7, #4]
 8001638:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800163c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001640:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001644:	4b6f      	ldr	r3, [pc, #444]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800164e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		_2q0my = 2.0f * q0 * my;
 800165a:	4b6a      	ldr	r3, [pc, #424]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001664:	ed97 7a02 	vldr	s14, [r7, #8]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8001670:	4b64      	ldr	r3, [pc, #400]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800167a:	ed97 7a01 	vldr	s14, [r7, #4]
 800167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001682:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		_2q1mx = 2.0f * q1 * mx;
 8001686:	4b5c      	ldr	r3, [pc, #368]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001690:	ed97 7a03 	vldr	s14, [r7, #12]
 8001694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001698:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		_2q0 = 2.0f * q0;
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016a6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		_2q1 = 2.0f * q1;
 80016aa:	4b53      	ldr	r3, [pc, #332]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016b4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		_2q2 = 2.0f * q2;
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <MadgwickAHRSupdate+0x414>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016c2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		_2q3 = 2.0f * q3;
 80016c6:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <MadgwickAHRSupdate+0x418>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016d0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		_2q0q2 = 2.0f * q0 * q2;
 80016d4:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <MadgwickAHRSupdate+0x414>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80016ec:	4b43      	ldr	r3, [pc, #268]	; (80017fc <MadgwickAHRSupdate+0x414>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016f6:	4b42      	ldr	r3, [pc, #264]	; (8001800 <MadgwickAHRSupdate+0x418>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q0q0 = q0 * q0;
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 8001706:	ed93 7a00 	vldr	s14, [r3]
 800170a:	4b3e      	ldr	r3, [pc, #248]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 800170c:	edd3 7a00 	vldr	s15, [r3]
 8001710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001714:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q0q1 = q0 * q1;
 8001718:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 800171a:	ed93 7a00 	vldr	s14, [r3]
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001728:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q0q2 = q0 * q2;
 800172c:	4b35      	ldr	r3, [pc, #212]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 800172e:	ed93 7a00 	vldr	s14, [r3]
 8001732:	4b32      	ldr	r3, [pc, #200]	; (80017fc <MadgwickAHRSupdate+0x414>)
 8001734:	edd3 7a00 	vldr	s15, [r3]
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q0q3 = q0 * q3;
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <MadgwickAHRSupdate+0x41c>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <MadgwickAHRSupdate+0x418>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001750:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		q1q1 = q1 * q1;
 8001754:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 8001756:	ed93 7a00 	vldr	s14, [r3]
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001764:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		q1q2 = q1 * q2;
 8001768:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <MadgwickAHRSupdate+0x414>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001778:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		q1q3 = q1 * q3;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <MadgwickAHRSupdate+0x410>)
 800177e:	ed93 7a00 	vldr	s14, [r3]
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MadgwickAHRSupdate+0x418>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		q2q2 = q2 * q2;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MadgwickAHRSupdate+0x414>)
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MadgwickAHRSupdate+0x414>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		q2q3 = q2 * q3;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MadgwickAHRSupdate+0x414>)
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MadgwickAHRSupdate+0x418>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		q3q3 = q3 * q3;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MadgwickAHRSupdate+0x418>)
 80017ba:	ed93 7a00 	vldr	s14, [r3]
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MadgwickAHRSupdate+0x418>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 80017cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80017d0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MadgwickAHRSupdate+0x418>)
 80017da:	edd3 6a00 	vldr	s13, [r3]
 80017de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80017e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <MadgwickAHRSupdate+0x414>)
 80017ec:	edd3 6a00 	vldr	s13, [r3]
 80017f0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80017f4:	e008      	b.n	8001808 <MadgwickAHRSupdate+0x420>
 80017f6:	bf00      	nop
 80017f8:	20000c44 	.word	0x20000c44
 80017fc:	20000c48 	.word	0x20000c48
 8001800:	20000c4c 	.word	0x20000c4c
 8001804:	2000002c 	.word	0x2000002c
 8001808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001810:	edd7 6a03 	vldr	s13, [r7, #12]
 8001814:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001820:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001824:	edd7 7a02 	vldr	s15, [r7, #8]
 8001828:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800182c:	4bf5      	ldr	r3, [pc, #980]	; (8001c04 <MadgwickAHRSupdate+0x81c>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001836:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183a:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800183e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001842:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001846:	4bf0      	ldr	r3, [pc, #960]	; (8001c08 <MadgwickAHRSupdate+0x820>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001854:	edd7 6a03 	vldr	s13, [r7, #12]
 8001858:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800185c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001860:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001864:	edd7 6a03 	vldr	s13, [r7, #12]
 8001868:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800186c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001874:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001878:	4be3      	ldr	r3, [pc, #908]	; (8001c08 <MadgwickAHRSupdate+0x820>)
 800187a:	ed93 7a00 	vldr	s14, [r3]
 800187e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001882:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001886:	edd7 6a02 	vldr	s13, [r7, #8]
 800188a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800188e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001896:	4bdd      	ldr	r3, [pc, #884]	; (8001c0c <MadgwickAHRSupdate+0x824>)
 8001898:	edd3 6a00 	vldr	s13, [r3]
 800189c:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80018a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018a8:	4bd6      	ldr	r3, [pc, #856]	; (8001c04 <MadgwickAHRSupdate+0x81c>)
 80018aa:	edd3 6a00 	vldr	s13, [r3]
 80018ae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80018b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ba:	edd7 6a02 	vldr	s13, [r7, #8]
 80018be:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80018c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ca:	edd7 6a02 	vldr	s13, [r7, #8]
 80018ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018da:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80018de:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018e6:	4bc8      	ldr	r3, [pc, #800]	; (8001c08 <MadgwickAHRSupdate+0x820>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f4:	edd7 6a02 	vldr	s13, [r7, #8]
 80018f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001904:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001908:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800190c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001910:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001914:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	ee17 0a90 	vmov	r0, s15
 8001920:	f7fe fe12 	bl	8000548 <__aeabi_f2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	ec43 2b10 	vmov	d0, r2, r3
 800192c:	f00c fae2 	bl	800def4 <sqrt>
 8001930:	ec53 2b10 	vmov	r2, r3, d0
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7ff f956 	bl	8000be8 <__aeabi_d2f>
 800193c:	4603      	mov	r3, r0
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001940:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001944:	eeb1 7a67 	vneg.f32	s14, s15
 8001948:	4bae      	ldr	r3, [pc, #696]	; (8001c04 <MadgwickAHRSupdate+0x81c>)
 800194a:	edd3 7a00 	vldr	s15, [r3]
 800194e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001952:	4bae      	ldr	r3, [pc, #696]	; (8001c0c <MadgwickAHRSupdate+0x824>)
 8001954:	edd3 6a00 	vldr	s13, [r3]
 8001958:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800195c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	edd7 6a01 	vldr	s13, [r7, #4]
 8001968:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800196c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001974:	4ba4      	ldr	r3, [pc, #656]	; (8001c08 <MadgwickAHRSupdate+0x820>)
 8001976:	edd3 6a00 	vldr	s13, [r3]
 800197a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800197e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001982:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001986:	edd7 6a01 	vldr	s13, [r7, #4]
 800198a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001996:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 800199a:	edd7 7a02 	vldr	s15, [r7, #8]
 800199e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019a2:	4b99      	ldr	r3, [pc, #612]	; (8001c08 <MadgwickAHRSupdate+0x820>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019b0:	edd7 6a01 	vldr	s13, [r7, #4]
 80019b4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c0:	edd7 6a01 	vldr	s13, [r7, #4]
 80019c4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80019c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_4bx = 2.0f * _2bx;
 80019d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019dc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		_4bz = 2.0f * _2bz;
 80019e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80019e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80019ec:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019f0:	eeb1 7a67 	vneg.f32	s14, s15
 80019f4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001a00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a10:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001a14:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a18:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a1c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a28:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a34:	4b73      	ldr	r3, [pc, #460]	; (8001c04 <MadgwickAHRSupdate+0x81c>)
 8001a36:	edd3 6a00 	vldr	s13, [r3]
 8001a3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a42:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001a46:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001a4a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a4e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001a52:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a56:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a5a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a5e:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001a62:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001a66:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a6e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a72:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a7a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a86:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a8a:	eef1 6a67 	vneg.f32	s13, s15
 8001a8e:	4b5e      	ldr	r3, [pc, #376]	; (8001c08 <MadgwickAHRSupdate+0x820>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a98:	4b5c      	ldr	r3, [pc, #368]	; (8001c0c <MadgwickAHRSupdate+0x824>)
 8001a9a:	ed93 6a00 	vldr	s12, [r3]
 8001a9e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001aa2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001aa6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001aaa:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001aae:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ab2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ab6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001aba:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001abe:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001ac2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ac6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001aca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ace:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ad2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ad6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ada:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <MadgwickAHRSupdate+0x81c>)
 8001ae8:	edd3 6a00 	vldr	s13, [r3]
 8001aec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001af0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001af4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001af8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001afc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b00:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001b04:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b08:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001b0c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b10:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b14:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b18:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001b20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b24:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b3c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b44:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001b48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b54:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b5c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001b60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b64:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001b68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b74:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001b78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <MadgwickAHRSupdate+0x824>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b8e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b96:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001b9a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b9e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ba2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ba6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001baa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bae:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bba:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MadgwickAHRSupdate+0x820>)
 8001bbc:	edd3 6a00 	vldr	s13, [r3]
 8001bc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001bcc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001bd0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bd4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bd8:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bdc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001be0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001be4:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001be8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001bec:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bf0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001bf4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bf8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c00:	e006      	b.n	8001c10 <MadgwickAHRSupdate+0x828>
 8001c02:	bf00      	nop
 8001c04:	20000c48 	.word	0x20000c48
 8001c08:	20000c4c 	.word	0x20000c4c
 8001c0c:	20000c44 	.word	0x20000c44
 8001c10:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1c:	4bf6      	ldr	r3, [pc, #984]	; (8001ff8 <MadgwickAHRSupdate+0xc10>)
 8001c1e:	edd3 6a00 	vldr	s13, [r3]
 8001c22:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c2a:	4bf4      	ldr	r3, [pc, #976]	; (8001ffc <MadgwickAHRSupdate+0xc14>)
 8001c2c:	ed93 6a00 	vldr	s12, [r3]
 8001c30:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c34:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c38:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c3c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001c40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001c44:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c4c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c50:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001c54:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c58:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c5c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001c60:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c68:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c78:	4be1      	ldr	r3, [pc, #900]	; (8002000 <MadgwickAHRSupdate+0xc18>)
 8001c7a:	edd3 6a00 	vldr	s13, [r3]
 8001c7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c82:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c86:	4bdf      	ldr	r3, [pc, #892]	; (8002004 <MadgwickAHRSupdate+0xc1c>)
 8001c88:	ed93 6a00 	vldr	s12, [r3]
 8001c8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c94:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c98:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001c9c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ca0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ca8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001cb0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cb4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cb8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cbc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cc0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001cc4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ccc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cd0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cdc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ce0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001ce4:	eeb1 7a67 	vneg.f32	s14, s15
 8001ce8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001cec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001cf0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001cf4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d04:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001d08:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d0c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001d10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d14:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d1c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d28:	4bb3      	ldr	r3, [pc, #716]	; (8001ff8 <MadgwickAHRSupdate+0xc10>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001d32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d36:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001d3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d3e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d42:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d46:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d52:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d56:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d62:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d66:	eef1 6a67 	vneg.f32	s13, s15
 8001d6a:	4ba3      	ldr	r3, [pc, #652]	; (8001ff8 <MadgwickAHRSupdate+0xc10>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d74:	4ba1      	ldr	r3, [pc, #644]	; (8001ffc <MadgwickAHRSupdate+0xc14>)
 8001d76:	ed93 6a00 	vldr	s12, [r3]
 8001d7a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d86:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001d8a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001d8e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d92:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d96:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d9a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d9e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001da2:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001da6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001daa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001dae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001db2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001db6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001dba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dbe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dca:	4b8e      	ldr	r3, [pc, #568]	; (8002004 <MadgwickAHRSupdate+0xc1c>)
 8001dcc:	edd3 6a00 	vldr	s13, [r3]
 8001dd0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dd8:	4b89      	ldr	r3, [pc, #548]	; (8002000 <MadgwickAHRSupdate+0xc18>)
 8001dda:	ed93 6a00 	vldr	s12, [r3]
 8001dde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001de2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001de6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dea:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001dee:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001df2:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001df6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001dfa:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dfe:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001e02:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001e06:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001e0a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e0e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e12:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e16:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e26:	4b75      	ldr	r3, [pc, #468]	; (8001ffc <MadgwickAHRSupdate+0xc14>)
 8001e28:	edd3 6a00 	vldr	s13, [r3]
 8001e2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e34:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <MadgwickAHRSupdate+0xc10>)
 8001e36:	ed93 6a00 	vldr	s12, [r3]
 8001e3a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e42:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e46:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001e4a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e4e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e52:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e56:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e5a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001e5e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e62:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e66:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001e6a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e6e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e72:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e76:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001e8e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001e92:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e96:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001e9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ea2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ea6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001eaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eae:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001eb2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001eb6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001eba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ebe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ec2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ec6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ed2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ed6:	eef1 6a67 	vneg.f32	s13, s15
 8001eda:	4b49      	ldr	r3, [pc, #292]	; (8002000 <MadgwickAHRSupdate+0xc18>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ee4:	4b47      	ldr	r3, [pc, #284]	; (8002004 <MadgwickAHRSupdate+0xc1c>)
 8001ee6:	ed93 6a00 	vldr	s12, [r3]
 8001eea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001eee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ef2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ef6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001efa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001efe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f02:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001f06:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f0a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f12:	edd7 5a18 	vldr	s11, [r7, #96]	; 0x60
 8001f16:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f1a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001f1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f22:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f26:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001f2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f2e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f3a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f3e:	eef1 6a67 	vneg.f32	s13, s15
 8001f42:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <MadgwickAHRSupdate+0xc14>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <MadgwickAHRSupdate+0xc10>)
 8001f4e:	ed93 6a00 	vldr	s12, [r3]
 8001f52:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f5e:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 8001f62:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001f66:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001f6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f6e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f72:	edd7 5a1d 	vldr	s11, [r7, #116]	; 0x74
 8001f76:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f7a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001f7e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f82:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001f86:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <MadgwickAHRSupdate+0xc1c>)
 8001f9c:	edd3 6a00 	vldr	s13, [r3]
 8001fa0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001fa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fa8:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 8001fac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001fb0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001fb4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001fb8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fbc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001fc0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001fc4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001fc8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fcc:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001fd0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fd4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fd8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001fdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fe0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001fe4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001ff0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ff4:	e008      	b.n	8002008 <MadgwickAHRSupdate+0xc20>
 8001ff6:	bf00      	nop
 8001ff8:	20000c48 	.word	0x20000c48
 8001ffc:	2000002c 	.word	0x2000002c
 8002000:	20000c4c 	.word	0x20000c4c
 8002004:	20000c44 	.word	0x20000c44
 8002008:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800200c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002010:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002018:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800201c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002024:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002028:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800202c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002030:	eeb0 0a67 	vmov.f32	s0, s15
 8002034:	f000 fc34 	bl	80028a0 <invSqrt>
 8002038:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
		s0 *= recipNorm;
 800203c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002040:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002048:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		s1 *= recipNorm;
 800204c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002050:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		s2 *= recipNorm;
 800205c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002060:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002068:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		s3 *= recipNorm;
 800206c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002070:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 800207c:	4b69      	ldr	r3, [pc, #420]	; (8002224 <MadgwickAHRSupdate+0xe3c>)
 800207e:	ed93 7a00 	vldr	s14, [r3]
 8002082:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002092:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		qDot2 -= beta * s1;
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <MadgwickAHRSupdate+0xe3c>)
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80020a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ac:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		qDot3 -= beta * s2;
 80020b0:	4b5c      	ldr	r3, [pc, #368]	; (8002224 <MadgwickAHRSupdate+0xe3c>)
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80020c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
		qDot4 -= beta * s3;
 80020ca:	4b56      	ldr	r3, [pc, #344]	; (8002224 <MadgwickAHRSupdate+0xe3c>)
 80020cc:	ed93 7a00 	vldr	s14, [r3]
 80020d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80020d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020d8:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80020dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 80020e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020e8:	edd7 7a00 	vldr	s15, [r7]
 80020ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020f0:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80020f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <MadgwickAHRSupdate+0xe40>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002102:	4b49      	ldr	r3, [pc, #292]	; (8002228 <MadgwickAHRSupdate+0xe40>)
 8002104:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 8002108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800210c:	edd7 7a00 	vldr	s15, [r7]
 8002110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002114:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211c:	4b43      	ldr	r3, [pc, #268]	; (800222c <MadgwickAHRSupdate+0xe44>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <MadgwickAHRSupdate+0xe44>)
 8002128:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 800212c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002130:	edd7 7a00 	vldr	s15, [r7]
 8002134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002138:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800213c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002140:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <MadgwickAHRSupdate+0xe48>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214a:	4b39      	ldr	r3, [pc, #228]	; (8002230 <MadgwickAHRSupdate+0xe48>)
 800214c:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 8002150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002154:	edd7 7a00 	vldr	s15, [r7]
 8002158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800215c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <MadgwickAHRSupdate+0xe4c>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	4b31      	ldr	r3, [pc, #196]	; (8002234 <MadgwickAHRSupdate+0xe4c>)
 8002170:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <MadgwickAHRSupdate+0xe40>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <MadgwickAHRSupdate+0xe40>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002184:	4b29      	ldr	r3, [pc, #164]	; (800222c <MadgwickAHRSupdate+0xe44>)
 8002186:	edd3 6a00 	vldr	s13, [r3]
 800218a:	4b28      	ldr	r3, [pc, #160]	; (800222c <MadgwickAHRSupdate+0xe44>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002198:	4b25      	ldr	r3, [pc, #148]	; (8002230 <MadgwickAHRSupdate+0xe48>)
 800219a:	edd3 6a00 	vldr	s13, [r3]
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <MadgwickAHRSupdate+0xe48>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <MadgwickAHRSupdate+0xe4c>)
 80021ae:	edd3 6a00 	vldr	s13, [r3]
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <MadgwickAHRSupdate+0xe4c>)
 80021b4:	edd3 7a00 	vldr	s15, [r3]
 80021b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021c0:	eeb0 0a67 	vmov.f32	s0, s15
 80021c4:	f000 fb6c 	bl	80028a0 <invSqrt>
 80021c8:	ed87 0a29 	vstr	s0, [r7, #164]	; 0xa4
	q0 *= recipNorm;
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <MadgwickAHRSupdate+0xe40>)
 80021ce:	ed93 7a00 	vldr	s14, [r3]
 80021d2:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <MadgwickAHRSupdate+0xe40>)
 80021dc:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <MadgwickAHRSupdate+0xe44>)
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <MadgwickAHRSupdate+0xe44>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MadgwickAHRSupdate+0xe48>)
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <MadgwickAHRSupdate+0xe48>)
 8002204:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <MadgwickAHRSupdate+0xe4c>)
 800220a:	ed93 7a00 	vldr	s14, [r3]
 800220e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <MadgwickAHRSupdate+0xe4c>)
 8002218:	edc3 7a00 	vstr	s15, [r3]
}
 800221c:	37b8      	adds	r7, #184	; 0xb8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000004 	.word	0x20000004
 8002228:	2000002c 	.word	0x2000002c
 800222c:	20000c44 	.word	0x20000c44
 8002230:	20000c48 	.word	0x20000c48
 8002234:	20000c4c 	.word	0x20000c4c

08002238 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az, float sample_freq) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b09e      	sub	sp, #120	; 0x78
 800223c:	af00      	add	r7, sp, #0
 800223e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002242:	edc7 0a06 	vstr	s1, [r7, #24]
 8002246:	ed87 1a05 	vstr	s2, [r7, #20]
 800224a:	edc7 1a04 	vstr	s3, [r7, #16]
 800224e:	ed87 2a03 	vstr	s4, [r7, #12]
 8002252:	edc7 2a02 	vstr	s5, [r7, #8]
 8002256:	ed87 3a01 	vstr	s6, [r7, #4]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800225a:	4bec      	ldr	r3, [pc, #944]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	eeb1 7a67 	vneg.f32	s14, s15
 8002264:	edd7 7a07 	vldr	s15, [r7, #28]
 8002268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800226c:	4be8      	ldr	r3, [pc, #928]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 800226e:	edd3 6a00 	vldr	s13, [r3]
 8002272:	edd7 7a06 	vldr	s15, [r7, #24]
 8002276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800227e:	4be5      	ldr	r3, [pc, #916]	; (8002614 <MadgwickAHRSupdateIMU+0x3dc>)
 8002280:	edd3 6a00 	vldr	s13, [r3]
 8002284:	edd7 7a05 	vldr	s15, [r7, #20]
 8002288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800228c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002290:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002298:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800229c:	4bde      	ldr	r3, [pc, #888]	; (8002618 <MadgwickAHRSupdateIMU+0x3e0>)
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80022a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022aa:	4bd9      	ldr	r3, [pc, #868]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 80022ac:	edd3 6a00 	vldr	s13, [r3]
 80022b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80022b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022bc:	4bd5      	ldr	r3, [pc, #852]	; (8002614 <MadgwickAHRSupdateIMU+0x3dc>)
 80022be:	edd3 6a00 	vldr	s13, [r3]
 80022c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80022da:	4bcf      	ldr	r3, [pc, #828]	; (8002618 <MadgwickAHRSupdateIMU+0x3e0>)
 80022dc:	ed93 7a00 	vldr	s14, [r3]
 80022e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e8:	4bc8      	ldr	r3, [pc, #800]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 80022ea:	edd3 6a00 	vldr	s13, [r3]
 80022ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80022f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022fa:	4bc6      	ldr	r3, [pc, #792]	; (8002614 <MadgwickAHRSupdateIMU+0x3dc>)
 80022fc:	edd3 6a00 	vldr	s13, [r3]
 8002300:	edd7 7a07 	vldr	s15, [r7, #28]
 8002304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002314:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002318:	4bbf      	ldr	r3, [pc, #764]	; (8002618 <MadgwickAHRSupdateIMU+0x3e0>)
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002326:	4bb9      	ldr	r3, [pc, #740]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 8002328:	edd3 6a00 	vldr	s13, [r3]
 800232c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002334:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002338:	4bb5      	ldr	r3, [pc, #724]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 800233a:	edd3 6a00 	vldr	s13, [r3]
 800233e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800234a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002356:	edd7 7a04 	vldr	s15, [r7, #16]
 800235a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800235e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002362:	d10e      	bne.n	8002382 <MadgwickAHRSupdateIMU+0x14a>
 8002364:	edd7 7a03 	vldr	s15, [r7, #12]
 8002368:	eef5 7a40 	vcmp.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d107      	bne.n	8002382 <MadgwickAHRSupdateIMU+0x14a>
 8002372:	edd7 7a02 	vldr	s15, [r7, #8]
 8002376:	eef5 7a40 	vcmp.f32	s15, #0.0
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	f000 81e5 	beq.w	800274c <MadgwickAHRSupdateIMU+0x514>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002382:	edd7 7a04 	vldr	s15, [r7, #16]
 8002386:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800238a:	edd7 7a03 	vldr	s15, [r7, #12]
 800238e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002396:	edd7 7a02 	vldr	s15, [r7, #8]
 800239a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800239e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a2:	eeb0 0a67 	vmov.f32	s0, s15
 80023a6:	f000 fa7b 	bl	80028a0 <invSqrt>
 80023aa:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 80023ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80023b2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ba:	edc7 7a04 	vstr	s15, [r7, #16]
		ay *= recipNorm;
 80023be:	ed97 7a03 	vldr	s14, [r7, #12]
 80023c2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ca:	edc7 7a03 	vstr	s15, [r7, #12]
		az *= recipNorm;   
 80023ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80023d2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80023d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023da:	edc7 7a02 	vstr	s15, [r7, #8]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80023de:	4b8e      	ldr	r3, [pc, #568]	; (8002618 <MadgwickAHRSupdateIMU+0x3e0>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023e8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 80023ec:	4b87      	ldr	r3, [pc, #540]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80023f6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002404:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 8002408:	4b82      	ldr	r3, [pc, #520]	; (8002614 <MadgwickAHRSupdateIMU+0x3dc>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002412:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 8002416:	4b80      	ldr	r3, [pc, #512]	; (8002618 <MadgwickAHRSupdateIMU+0x3e0>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002424:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 8002428:	4b78      	ldr	r3, [pc, #480]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002436:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 800243a:	4b75      	ldr	r3, [pc, #468]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002448:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 800245e:	4b6c      	ldr	r3, [pc, #432]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 8002470:	4b69      	ldr	r3, [pc, #420]	; (8002618 <MadgwickAHRSupdateIMU+0x3e0>)
 8002472:	ed93 7a00 	vldr	s14, [r3]
 8002476:	4b68      	ldr	r3, [pc, #416]	; (8002618 <MadgwickAHRSupdateIMU+0x3e0>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002480:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 8002484:	4b61      	ldr	r3, [pc, #388]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 8002486:	ed93 7a00 	vldr	s14, [r3]
 800248a:	4b60      	ldr	r3, [pc, #384]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002494:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 8002498:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 800249a:	ed93 7a00 	vldr	s14, [r3]
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <MadgwickAHRSupdateIMU+0x3dc>)
 80024ae:	ed93 7a00 	vldr	s14, [r3]
 80024b2:	4b58      	ldr	r3, [pc, #352]	; (8002614 <MadgwickAHRSupdateIMU+0x3dc>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024bc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80024c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024c4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024cc:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80024d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80024d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80024e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ec:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80024f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002500:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002504:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002510:	edd7 7a04 	vldr	s15, [r7, #16]
 8002514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002518:	ee37 7a67 	vsub.f32	s14, s14, s15
 800251c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002520:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002524:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002528:	4b38      	ldr	r3, [pc, #224]	; (800260c <MadgwickAHRSupdateIMU+0x3d4>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002536:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800253a:	edd7 7a03 	vldr	s15, [r7, #12]
 800253e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002542:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002546:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800254a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800254e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002552:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800255e:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8002562:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800256e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002572:	edd7 7a02 	vldr	s15, [r7, #8]
 8002576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002582:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002586:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800258a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <MadgwickAHRSupdateIMU+0x3d8>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002598:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800259c:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a8:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80025ac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025b8:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80025bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80025c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80025cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025d0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80025d4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80025d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e0:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80025e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f0:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 80025f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002600:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002604:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002608:	e008      	b.n	800261c <MadgwickAHRSupdateIMU+0x3e4>
 800260a:	bf00      	nop
 800260c:	20000c44 	.word	0x20000c44
 8002610:	20000c48 	.word	0x20000c48
 8002614:	20000c4c 	.word	0x20000c4c
 8002618:	2000002c 	.word	0x2000002c
 800261c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002620:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002624:	4b99      	ldr	r3, [pc, #612]	; (800288c <MadgwickAHRSupdateIMU+0x654>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002632:	edd7 7a04 	vldr	s15, [r7, #16]
 8002636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800263e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002642:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002646:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800264a:	4b90      	ldr	r3, [pc, #576]	; (800288c <MadgwickAHRSupdateIMU+0x654>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002654:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002658:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800265c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002668:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800266c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002670:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002674:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002678:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800267c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002680:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002684:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002688:	ee37 7a27 	vadd.f32	s14, s14, s15
 800268c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002690:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002698:	eeb0 0a67 	vmov.f32	s0, s15
 800269c:	f000 f900 	bl	80028a0 <invSqrt>
 80026a0:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 80026a4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80026a8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 80026b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80026b8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 80026c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80026c8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 80026d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80026d8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e0:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <MadgwickAHRSupdateIMU+0x658>)
 80026e6:	ed93 7a00 	vldr	s14, [r3]
 80026ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80026f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026fa:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 80026fe:	4b64      	ldr	r3, [pc, #400]	; (8002890 <MadgwickAHRSupdateIMU+0x658>)
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002714:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 8002718:	4b5d      	ldr	r3, [pc, #372]	; (8002890 <MadgwickAHRSupdateIMU+0x658>)
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800272a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 8002732:	4b57      	ldr	r3, [pc, #348]	; (8002890 <MadgwickAHRSupdateIMU+0x658>)
 8002734:	ed93 7a00 	vldr	s14, [r3]
 8002738:	edd7 7a08 	vldr	s15, [r7, #32]
 800273c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002740:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002748:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sample_freq);
 800274c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002750:	edd7 7a01 	vldr	s15, [r7, #4]
 8002754:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002758:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800275c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <MadgwickAHRSupdateIMU+0x65c>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	4b4a      	ldr	r3, [pc, #296]	; (8002894 <MadgwickAHRSupdateIMU+0x65c>)
 800276c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sample_freq);
 8002770:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002774:	edd7 7a01 	vldr	s15, [r7, #4]
 8002778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800277c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <MadgwickAHRSupdateIMU+0x660>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278e:	4b42      	ldr	r3, [pc, #264]	; (8002898 <MadgwickAHRSupdateIMU+0x660>)
 8002790:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sample_freq);
 8002794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002798:	edd7 7a01 	vldr	s15, [r7, #4]
 800279c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b3c      	ldr	r3, [pc, #240]	; (800289c <MadgwickAHRSupdateIMU+0x664>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b2:	4b3a      	ldr	r3, [pc, #232]	; (800289c <MadgwickAHRSupdateIMU+0x664>)
 80027b4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sample_freq);
 80027b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80027c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027cc:	4b2f      	ldr	r3, [pc, #188]	; (800288c <MadgwickAHRSupdateIMU+0x654>)
 80027ce:	edd3 7a00 	vldr	s15, [r3]
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	4b2d      	ldr	r3, [pc, #180]	; (800288c <MadgwickAHRSupdateIMU+0x654>)
 80027d8:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <MadgwickAHRSupdateIMU+0x65c>)
 80027de:	ed93 7a00 	vldr	s14, [r3]
 80027e2:	4b2c      	ldr	r3, [pc, #176]	; (8002894 <MadgwickAHRSupdateIMU+0x65c>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <MadgwickAHRSupdateIMU+0x660>)
 80027ee:	edd3 6a00 	vldr	s13, [r3]
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <MadgwickAHRSupdateIMU+0x660>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002800:	4b26      	ldr	r3, [pc, #152]	; (800289c <MadgwickAHRSupdateIMU+0x664>)
 8002802:	edd3 6a00 	vldr	s13, [r3]
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <MadgwickAHRSupdateIMU+0x664>)
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <MadgwickAHRSupdateIMU+0x654>)
 8002816:	edd3 6a00 	vldr	s13, [r3]
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <MadgwickAHRSupdateIMU+0x654>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002828:	eeb0 0a67 	vmov.f32	s0, s15
 800282c:	f000 f838 	bl	80028a0 <invSqrt>
 8002830:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <MadgwickAHRSupdateIMU+0x65c>)
 8002836:	ed93 7a00 	vldr	s14, [r3]
 800283a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <MadgwickAHRSupdateIMU+0x65c>)
 8002844:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <MadgwickAHRSupdateIMU+0x660>)
 800284a:	ed93 7a00 	vldr	s14, [r3]
 800284e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	4b10      	ldr	r3, [pc, #64]	; (8002898 <MadgwickAHRSupdateIMU+0x660>)
 8002858:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <MadgwickAHRSupdateIMU+0x664>)
 800285e:	ed93 7a00 	vldr	s14, [r3]
 8002862:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286a:	4b0c      	ldr	r3, [pc, #48]	; (800289c <MadgwickAHRSupdateIMU+0x664>)
 800286c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <MadgwickAHRSupdateIMU+0x654>)
 8002872:	ed93 7a00 	vldr	s14, [r3]
 8002876:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800287a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287e:	4b03      	ldr	r3, [pc, #12]	; (800288c <MadgwickAHRSupdateIMU+0x654>)
 8002880:	edc3 7a00 	vstr	s15, [r3]
}
 8002884:	bf00      	nop
 8002886:	3778      	adds	r7, #120	; 0x78
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000c4c 	.word	0x20000c4c
 8002890:	20000004 	.word	0x20000004
 8002894:	2000002c 	.word	0x2000002c
 8002898:	20000c44 	.word	0x20000c44
 800289c:	20000c48 	.word	0x20000c48

080028a0 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80028aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80028be:	f107 0310 	add.w	r3, r7, #16
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	105a      	asrs	r2, r3, #1
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <invSqrt+0x74>)
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80028d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80028e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ec:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80028f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80028f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fc:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	ee07 3a90 	vmov	s15, r3
}
 8002906:	eeb0 0a67 	vmov.f32	s0, s15
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	5f3759df 	.word	0x5f3759df

08002918 <MCP4728_Write_GeneralCall>:
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, data, sizeof(data), HAL_MAX_DELAY);
	return ret;
}

void MCP4728_Write_GeneralCall(I2C_HandleTypeDef *I2CHandler, uint8_t command) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	70fb      	strb	r3, [r7, #3]
	uint16_t zeoo = 0x00;
 8002924:	2300      	movs	r3, #0
 8002926:	81fb      	strh	r3, [r7, #14]
	uint16_t sizey = 0x1;
 8002928:	2301      	movs	r3, #1
 800292a:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(I2CHandler, zeoo, &command, sizey, HAL_MAX_DELAY);
 800292c:	89bb      	ldrh	r3, [r7, #12]
 800292e:	1cfa      	adds	r2, r7, #3
 8002930:	89f9      	ldrh	r1, [r7, #14]
 8002932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002936:	9000      	str	r0, [sp, #0]
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f005 fcc7 	bl	80082cc <HAL_I2C_Master_Transmit>

}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <MCP4728_Write_AllChannels_Diff>:
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Write_AllChannels_Diff(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 8002946:	b580      	push	{r7, lr}
 8002948:	b08a      	sub	sp, #40	; 0x28
 800294a:	af02      	add	r7, sp, #8
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	4638      	mov	r0, r7
 8002950:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t buf[8];
	for(uint8_t i = 0; i < 4; i++){
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	e024      	b.n	80029a4 <MCP4728_Write_AllChannels_Diff+0x5e>
		uint8_t lowByte = output.channel_Val[i] & 0xff;
 800295a:	7ffb      	ldrb	r3, [r7, #31]
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	3320      	adds	r3, #32
 8002960:	443b      	add	r3, r7
 8002962:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8002966:	77bb      	strb	r3, [r7, #30]
		uint8_t highByte = (output.channel_Val[i] >> 8);
 8002968:	7ffb      	ldrb	r3, [r7, #31]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	3320      	adds	r3, #32
 800296e:	443b      	add	r3, r7
 8002970:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29b      	uxth	r3, r3
 8002978:	777b      	strb	r3, [r7, #29]
		buf[i*2] =  0x0f&highByte;
 800297a:	7ffb      	ldrb	r3, [r7, #31]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	7f7a      	ldrb	r2, [r7, #29]
 8002980:	f002 020f 	and.w	r2, r2, #15
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	3320      	adds	r3, #32
 8002988:	443b      	add	r3, r7
 800298a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)+1] = lowByte;
 800298e:	7ffb      	ldrb	r3, [r7, #31]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	3301      	adds	r3, #1
 8002994:	3320      	adds	r3, #32
 8002996:	443b      	add	r3, r7
 8002998:	7fba      	ldrb	r2, [r7, #30]
 800299a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 0; i < 4; i++){
 800299e:	7ffb      	ldrb	r3, [r7, #31]
 80029a0:	3301      	adds	r3, #1
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	7ffb      	ldrb	r3, [r7, #31]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d9d7      	bls.n	800295a <MCP4728_Write_AllChannels_Diff+0x14>
	}
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 80029aa:	f107 0214 	add.w	r2, r7, #20
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2308      	movs	r3, #8
 80029b6:	21c8      	movs	r1, #200	; 0xc8
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f005 fc87 	bl	80082cc <HAL_I2C_Master_Transmit>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 80029be:	2108      	movs	r1, #8
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ffa9 	bl	8002918 <MCP4728_Write_GeneralCall>
}
 80029c6:	bf00      	nop
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <MCP4728_Init>:
	buf[2] = lowByte;
	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
}

void MCP4728_Init(I2C_HandleTypeDef *I2CHandler, dacChannelConfig output) {
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08a      	sub	sp, #40	; 0x28
 80029d2:	af02      	add	r7, sp, #8
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	4638      	mov	r0, r7
 80029d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_RESET);
 80029dc:	2106      	movs	r1, #6
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff ff9a 	bl	8002918 <MCP4728_Write_GeneralCall>
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_WAKEUP);
 80029e4:	2109      	movs	r1, #9
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff ff96 	bl	8002918 <MCP4728_Write_GeneralCall>
	//MCP4728_Write_GeneralCall(I2CHandler, 0x0C);

	uint8_t buf[9];
	buf[0] = MCP4728_CMD_DACWRITE_SEQ;
 80029ec:	2350      	movs	r3, #80	; 0x50
 80029ee:	753b      	strb	r3, [r7, #20]
	for(uint8_t i = 1; i <= 4; i++){
 80029f0:	2301      	movs	r3, #1
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e015      	b.n	8002a22 <MCP4728_Init+0x54>
		buf[(i*2)+1] = 0x00;
 80029f6:	7ffb      	ldrb	r3, [r7, #31]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	3301      	adds	r3, #1
 80029fc:	3320      	adds	r3, #32
 80029fe:	443b      	add	r3, r7
 8002a00:	2200      	movs	r2, #0
 8002a02:	f803 2c0c 	strb.w	r2, [r3, #-12]
		buf[(i*2)] = (0 << 7) | ((i-1)<<4) | 0x0;
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	7ffb      	ldrb	r3, [r7, #31]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	3320      	adds	r3, #32
 8002a16:	443b      	add	r3, r7
 8002a18:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t i = 1; i <= 4; i++){
 8002a1c:	7ffb      	ldrb	r3, [r7, #31]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d9e6      	bls.n	80029f6 <MCP4728_Init+0x28>
	}

	HAL_I2C_Master_Transmit(I2CHandler, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY);
 8002a28:	f107 0214 	add.w	r2, r7, #20
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2309      	movs	r3, #9
 8002a34:	21c8      	movs	r1, #200	; 0xc8
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f005 fc48 	bl	80082cc <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(I2CHandler, 0xC8, buf, sizeof(buf), HAL_MAX_DELAY);
	//C0, C2, C4, C6, C8, CA, CC, CE
	//60, 61, 62, 63, 64, 65, 66, 67
	MCP4728_Write_GeneralCall(I2CHandler,MCP4728_GENERAL_SWUPDATE);
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7ff ff6a 	bl	8002918 <MCP4728_Write_GeneralCall>
}
 8002a44:	bf00      	nop
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <LCD_Reset>:
            "repeat: sub r0,#83\n"
            "        bgt repeat\n" : : "r"(n) : "r0", "cc");
}

void LCD_Reset(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
	int i;
    lcddev.reset(1);      // Assert reset
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <LCD_Reset+0x48>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2001      	movs	r0, #1
 8002a58:	4798      	blx	r3
    //nano_wait(100000000); // Wait
    for(i=0; i<100000;i++);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	e002      	b.n	8002a66 <LCD_Reset+0x1a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3301      	adds	r3, #1
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <LCD_Reset+0x4c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	ddf8      	ble.n	8002a60 <LCD_Reset+0x14>
    //nano_wait(10);
    lcddev.reset(0);      // De-assert reset
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <LCD_Reset+0x48>)
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	2000      	movs	r0, #0
 8002a74:	4798      	blx	r3
    //nano_wait(50000000);  // Wait
    //nano_wait(10);
    for(i=0;i<1000000;i++);
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	e002      	b.n	8002a82 <LCD_Reset+0x36>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <LCD_Reset+0x50>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	ddf8      	ble.n	8002a7c <LCD_Reset+0x30>
}
 8002a8a:	bf00      	nop
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000270 	.word	0x20000270
 8002a98:	0001869f 	.word	0x0001869f
 8002a9c:	000f423f 	.word	0x000f423f

08002aa0 <LCD_WR_REG>:

#else /* not SLOW_SPI */

// Write to an LCD "register"
void LCD_WR_REG(uint8_t data)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8002aaa:	bf00      	nop
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <LCD_WR_REG+0x30>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1f9      	bne.n	8002aac <LCD_WR_REG+0xc>
        ;
    // Don't clear RS until the previous operation is done.
    lcddev.reg_select(1);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <LCD_WR_REG+0x34>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	2001      	movs	r0, #1
 8002abe:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8002ac0:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <LCD_WR_REG+0x38>)
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	7013      	strb	r3, [r2, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40013000 	.word	0x40013000
 8002ad4:	20000270 	.word	0x20000270
 8002ad8:	4001300c 	.word	0x4001300c

08002adc <LCD_WR_DATA>:

// Write 8-bit data to the LCD
void LCD_WR_DATA(uint8_t data)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
    while((SPI->SR & SPI_SR_BSY) != 0)
 8002ae6:	bf00      	nop
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <LCD_WR_DATA+0x30>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1f9      	bne.n	8002ae8 <LCD_WR_DATA+0xc>
        ;
    // Don't set RS until the previous operation is done.
    lcddev.reg_select(0);
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <LCD_WR_DATA+0x34>)
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2000      	movs	r0, #0
 8002afa:	4798      	blx	r3
    *((uint8_t*)&SPI->DR) = data;
 8002afc:	4a05      	ldr	r2, [pc, #20]	; (8002b14 <LCD_WR_DATA+0x38>)
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	7013      	strb	r3, [r2, #0]
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40013000 	.word	0x40013000
 8002b10:	20000270 	.word	0x20000270
 8002b14:	4001300c 	.word	0x4001300c

08002b18 <LCD_WriteData16_Prepare>:

// Prepare to write 16-bit data to the LCD
void LCD_WriteData16_Prepare()
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
    lcddev.reg_select(0);
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <LCD_WriteData16_Prepare+0x1c>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2000      	movs	r0, #0
 8002b22:	4798      	blx	r3
    SPI->CR2 |= SPI_CR2_DS;
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <LCD_WriteData16_Prepare+0x20>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a03      	ldr	r2, [pc, #12]	; (8002b38 <LCD_WriteData16_Prepare+0x20>)
 8002b2a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002b2e:	6053      	str	r3, [r2, #4]
}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20000270 	.word	0x20000270
 8002b38:	40013000 	.word	0x40013000

08002b3c <LCD_WriteData16>:

// Write 16-bit data
void LCD_WriteData16(u16 data)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
    while((SPI->SR & SPI_SR_TXE) == 0)
 8002b46:	bf00      	nop
 8002b48:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <LCD_WriteData16+0x2c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f9      	beq.n	8002b48 <LCD_WriteData16+0xc>
        ;
    SPI->DR = data;
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <LCD_WriteData16+0x2c>)
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	60d3      	str	r3, [r2, #12]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40013000 	.word	0x40013000

08002b6c <LCD_WriteData16_End>:

// Finish writing 16-bit data
void LCD_WriteData16_End()
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
    SPI->CR2 &= ~SPI_CR2_DS; // bad value forces it back to 8-bit mode
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <LCD_WriteData16_End+0x1c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <LCD_WriteData16_End+0x1c>)
 8002b76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b7a:	6053      	str	r3, [r2, #4]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40013000 	.word	0x40013000

08002b8c <LCD_WriteReg>:
#endif /* not SLOW_SPI */

// Select an LCD "register" and write 8-bit data to it.
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	460a      	mov	r2, r1
 8002b96:	71fb      	strb	r3, [r7, #7]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	80bb      	strh	r3, [r7, #4]
    LCD_WR_REG(LCD_Reg);
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff7e 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(LCD_RegValue);
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff97 	bl	8002adc <LCD_WR_DATA>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <LCD_WriteRAM_Prepare>:

// Issue the "write RAM" command configured for the display.
void LCD_WriteRAM_Prepare(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
    LCD_WR_REG(lcddev.wramcmd);
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <LCD_WriteRAM_Prepare+0x14>)
 8002bbe:	891b      	ldrh	r3, [r3, #8]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff6c 	bl	8002aa0 <LCD_WR_REG>
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000270 	.word	0x20000270

08002bd0 <LCD_direction>:

// Configure the lcddev fields for the display orientation.
void LCD_direction(u8 direction)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
    lcddev.setxcmd=0x2A;
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <LCD_direction+0xa4>)
 8002bdc:	222a      	movs	r2, #42	; 0x2a
 8002bde:	815a      	strh	r2, [r3, #10]
    lcddev.setycmd=0x2B;
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <LCD_direction+0xa4>)
 8002be2:	222b      	movs	r2, #43	; 0x2b
 8002be4:	819a      	strh	r2, [r3, #12]
    lcddev.wramcmd=0x2C;
 8002be6:	4b23      	ldr	r3, [pc, #140]	; (8002c74 <LCD_direction+0xa4>)
 8002be8:	222c      	movs	r2, #44	; 0x2c
 8002bea:	811a      	strh	r2, [r3, #8]
    switch(direction){
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d83a      	bhi.n	8002c68 <LCD_direction+0x98>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <LCD_direction+0x28>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c09 	.word	0x08002c09
 8002bfc:	08002c21 	.word	0x08002c21
 8002c00:	08002c39 	.word	0x08002c39
 8002c04:	08002c51 	.word	0x08002c51
    case 0:
        lcddev.width=LCD_W;
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <LCD_direction+0xa4>)
 8002c0a:	22f0      	movs	r2, #240	; 0xf0
 8002c0c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <LCD_direction+0xa4>)
 8002c10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c14:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<6)|(0<<7));//BGR==1,MY==0,MX==0,MV==0
 8002c16:	2108      	movs	r1, #8
 8002c18:	2036      	movs	r0, #54	; 0x36
 8002c1a:	f7ff ffb7 	bl	8002b8c <LCD_WriteReg>
        break;
 8002c1e:	e024      	b.n	8002c6a <LCD_direction+0x9a>
    case 1:
        lcddev.width=LCD_H;
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <LCD_direction+0xa4>)
 8002c22:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c26:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <LCD_direction+0xa4>)
 8002c2a:	22f0      	movs	r2, #240	; 0xf0
 8002c2c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(0<<7)|(1<<6)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8002c2e:	2168      	movs	r1, #104	; 0x68
 8002c30:	2036      	movs	r0, #54	; 0x36
 8002c32:	f7ff ffab 	bl	8002b8c <LCD_WriteReg>
        break;
 8002c36:	e018      	b.n	8002c6a <LCD_direction+0x9a>
    case 2:
        lcddev.width=LCD_W;
 8002c38:	4b0e      	ldr	r3, [pc, #56]	; (8002c74 <LCD_direction+0xa4>)
 8002c3a:	22f0      	movs	r2, #240	; 0xf0
 8002c3c:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_H;
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <LCD_direction+0xa4>)
 8002c40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c44:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<6)|(1<<7));//BGR==1,MY==0,MX==0,MV==0
 8002c46:	21c8      	movs	r1, #200	; 0xc8
 8002c48:	2036      	movs	r0, #54	; 0x36
 8002c4a:	f7ff ff9f 	bl	8002b8c <LCD_WriteReg>
        break;
 8002c4e:	e00c      	b.n	8002c6a <LCD_direction+0x9a>
    case 3:
        lcddev.width=LCD_H;
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <LCD_direction+0xa4>)
 8002c52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c56:	801a      	strh	r2, [r3, #0]
        lcddev.height=LCD_W;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <LCD_direction+0xa4>)
 8002c5a:	22f0      	movs	r2, #240	; 0xf0
 8002c5c:	805a      	strh	r2, [r3, #2]
        LCD_WriteReg(0x36,(1<<3)|(1<<7)|(1<<5));//BGR==1,MY==1,MX==0,MV==1
 8002c5e:	21a8      	movs	r1, #168	; 0xa8
 8002c60:	2036      	movs	r0, #54	; 0x36
 8002c62:	f7ff ff93 	bl	8002b8c <LCD_WriteReg>
        break;
 8002c66:	e000      	b.n	8002c6a <LCD_direction+0x9a>
    default:break;
 8002c68:	bf00      	nop
    }
}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000270 	.word	0x20000270

08002c78 <tft_select>:

static void tft_select(int val)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    if (val == 0) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <tft_select+0x26>
        while(SPI1->SR & SPI_SR_BSY)
 8002c86:	bf00      	nop
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <tft_select+0x4c>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f9      	bne.n	8002c88 <tft_select+0x10>
            ;
        GPIOA->BSRR = 1<<4;
 8002c94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002c98:	2210      	movs	r2, #16
 8002c9a:	619a      	str	r2, [r3, #24]
            // This is a common mistake made by students.
            // This is what catches the problem early.
        }
        GPIOA->BRR = 1<<4;
    }
}
 8002c9c:	e00b      	b.n	8002cb6 <tft_select+0x3e>
    	while((GPIOA->ODR & (1<<4)) == 0) {
 8002c9e:	bf00      	nop
 8002ca0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f8      	beq.n	8002ca0 <tft_select+0x28>
        GPIOA->BRR = 1<<4;
 8002cae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40013000 	.word	0x40013000

08002cc8 <tft_reset>:

static void tft_reset(int val)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
    if (val) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <tft_reset+0x16>
        GPIOB->BRR = 1<<0;
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <tft_reset+0x28>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
    } else {
        GPIOB->BSRR = 1<<0;
    }
}
 8002cdc:	e002      	b.n	8002ce4 <tft_reset+0x1c>
        GPIOB->BSRR = 1<<0;
 8002cde:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <tft_reset+0x28>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	619a      	str	r2, [r3, #24]
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <tft_reg_select>:

static void tft_reg_select(int val)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
    if (val == 1) { // select registers
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d104      	bne.n	8002d0c <tft_reg_select+0x18>
        GPIOA->BRR = 1<<3; // clear
 8002d02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d06:	2208      	movs	r2, #8
 8002d08:	629a      	str	r2, [r3, #40]	; 0x28
    } else { // select data
        GPIOA->BSRR = 1<<3; // set
    }
}
 8002d0a:	e003      	b.n	8002d14 <tft_reg_select+0x20>
        GPIOA->BSRR = 1<<3; // set
 8002d0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002d10:	2208      	movs	r2, #8
 8002d12:	619a      	str	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LCD_Init>:

// Do the initialization sequence for the display.
void LCD_Init(void (*reset)(int), void (*select)(int), void (*reg_select)(int))
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
	int i;

    lcddev.reset = tft_reset;
 8002d2c:	4ba3      	ldr	r3, [pc, #652]	; (8002fbc <LCD_Init+0x29c>)
 8002d2e:	4aa4      	ldr	r2, [pc, #656]	; (8002fc0 <LCD_Init+0x2a0>)
 8002d30:	611a      	str	r2, [r3, #16]
    lcddev.select = tft_select;
 8002d32:	4ba2      	ldr	r3, [pc, #648]	; (8002fbc <LCD_Init+0x29c>)
 8002d34:	4aa3      	ldr	r2, [pc, #652]	; (8002fc4 <LCD_Init+0x2a4>)
 8002d36:	615a      	str	r2, [r3, #20]
    lcddev.reg_select = tft_reg_select;
 8002d38:	4ba0      	ldr	r3, [pc, #640]	; (8002fbc <LCD_Init+0x29c>)
 8002d3a:	4aa3      	ldr	r2, [pc, #652]	; (8002fc8 <LCD_Init+0x2a8>)
 8002d3c:	619a      	str	r2, [r3, #24]
    if (reset)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <LCD_Init+0x2a>
        lcddev.reset = reset;
 8002d44:	4a9d      	ldr	r2, [pc, #628]	; (8002fbc <LCD_Init+0x29c>)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6113      	str	r3, [r2, #16]
    if (select)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <LCD_Init+0x36>
        lcddev.select = select;
 8002d50:	4a9a      	ldr	r2, [pc, #616]	; (8002fbc <LCD_Init+0x29c>)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6153      	str	r3, [r2, #20]
    if (reg_select)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <LCD_Init+0x42>
        lcddev.reg_select = reg_select;
 8002d5c:	4a97      	ldr	r2, [pc, #604]	; (8002fbc <LCD_Init+0x29c>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6193      	str	r3, [r2, #24]
    lcddev.select(1);
 8002d62:	4b96      	ldr	r3, [pc, #600]	; (8002fbc <LCD_Init+0x29c>)
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	2001      	movs	r0, #1
 8002d68:	4798      	blx	r3
    LCD_Reset();
 8002d6a:	f7ff fe6f 	bl	8002a4c <LCD_Reset>
    // Initialization sequence for 2.2inch ILI9341
    LCD_WR_REG(0xCF);
 8002d6e:	20cf      	movs	r0, #207	; 0xcf
 8002d70:	f7ff fe96 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7ff feb1 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0xD9); // C1
 8002d7a:	20d9      	movs	r0, #217	; 0xd9
 8002d7c:	f7ff feae 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0X30);
 8002d80:	2030      	movs	r0, #48	; 0x30
 8002d82:	f7ff feab 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xED);
 8002d86:	20ed      	movs	r0, #237	; 0xed
 8002d88:	f7ff fe8a 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x64);
 8002d8c:	2064      	movs	r0, #100	; 0x64
 8002d8e:	f7ff fea5 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x03);
 8002d92:	2003      	movs	r0, #3
 8002d94:	f7ff fea2 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0X12);
 8002d98:	2012      	movs	r0, #18
 8002d9a:	f7ff fe9f 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0X81);
 8002d9e:	2081      	movs	r0, #129	; 0x81
 8002da0:	f7ff fe9c 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xE8);
 8002da4:	20e8      	movs	r0, #232	; 0xe8
 8002da6:	f7ff fe7b 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x85);
 8002daa:	2085      	movs	r0, #133	; 0x85
 8002dac:	f7ff fe96 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002db0:	2010      	movs	r0, #16
 8002db2:	f7ff fe93 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x7A);
 8002db6:	207a      	movs	r0, #122	; 0x7a
 8002db8:	f7ff fe90 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xCB);
 8002dbc:	20cb      	movs	r0, #203	; 0xcb
 8002dbe:	f7ff fe6f 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x39);
 8002dc2:	2039      	movs	r0, #57	; 0x39
 8002dc4:	f7ff fe8a 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x2C);
 8002dc8:	202c      	movs	r0, #44	; 0x2c
 8002dca:	f7ff fe87 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7ff fe84 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8002dd4:	2034      	movs	r0, #52	; 0x34
 8002dd6:	f7ff fe81 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x02);
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f7ff fe7e 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xF7);
 8002de0:	20f7      	movs	r0, #247	; 0xf7
 8002de2:	f7ff fe5d 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x20);
 8002de6:	2020      	movs	r0, #32
 8002de8:	f7ff fe78 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xEA);
 8002dec:	20ea      	movs	r0, #234	; 0xea
 8002dee:	f7ff fe57 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7ff fe72 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002df8:	2000      	movs	r0, #0
 8002dfa:	f7ff fe6f 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xC0);    // Power control
 8002dfe:	20c0      	movs	r0, #192	; 0xc0
 8002e00:	f7ff fe4e 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x21);   // VRH[5:0]  //1B
 8002e04:	2021      	movs	r0, #33	; 0x21
 8002e06:	f7ff fe69 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xC1);    // Power control
 8002e0a:	20c1      	movs	r0, #193	; 0xc1
 8002e0c:	f7ff fe48 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x12);   // SAP[2:0];BT[3:0] //01
 8002e10:	2012      	movs	r0, #18
 8002e12:	f7ff fe63 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xC5);    // VCM control
 8002e16:	20c5      	movs	r0, #197	; 0xc5
 8002e18:	f7ff fe42 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x39);   // 3F
 8002e1c:	2039      	movs	r0, #57	; 0x39
 8002e1e:	f7ff fe5d 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x37);   // 3C
 8002e22:	2037      	movs	r0, #55	; 0x37
 8002e24:	f7ff fe5a 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xC7);    // VCM control2
 8002e28:	20c7      	movs	r0, #199	; 0xc7
 8002e2a:	f7ff fe39 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0XAB);   // B0
 8002e2e:	20ab      	movs	r0, #171	; 0xab
 8002e30:	f7ff fe54 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0x36);    // Memory Access Control
 8002e34:	2036      	movs	r0, #54	; 0x36
 8002e36:	f7ff fe33 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x48);
 8002e3a:	2048      	movs	r0, #72	; 0x48
 8002e3c:	f7ff fe4e 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0x3A);
 8002e40:	203a      	movs	r0, #58	; 0x3a
 8002e42:	f7ff fe2d 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x55);
 8002e46:	2055      	movs	r0, #85	; 0x55
 8002e48:	f7ff fe48 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xB1);
 8002e4c:	20b1      	movs	r0, #177	; 0xb1
 8002e4e:	f7ff fe27 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7ff fe42 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x1B);   // 1A
 8002e58:	201b      	movs	r0, #27
 8002e5a:	f7ff fe3f 	bl	8002adc <LCD_WR_DATA>



    LCD_WR_REG(0xB6);    // Display Function Control
 8002e5e:	20b6      	movs	r0, #182	; 0xb6
 8002e60:	f7ff fe1e 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x0A);
 8002e64:	200a      	movs	r0, #10
 8002e66:	f7ff fe39 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0xA2);
 8002e6a:	20a2      	movs	r0, #162	; 0xa2
 8002e6c:	f7ff fe36 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002e70:	20f2      	movs	r0, #242	; 0xf2
 8002e72:	f7ff fe15 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7ff fe30 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0x26);    // Gamma curve selected
 8002e7c:	2026      	movs	r0, #38	; 0x26
 8002e7e:	f7ff fe0f 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x01);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f7ff fe2a 	bl	8002adc <LCD_WR_DATA>

    LCD_WR_REG(0xE0);     // Set Gamma
 8002e88:	20e0      	movs	r0, #224	; 0xe0
 8002e8a:	f7ff fe09 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x0F);
 8002e8e:	200f      	movs	r0, #15
 8002e90:	f7ff fe24 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x23);
 8002e94:	2023      	movs	r0, #35	; 0x23
 8002e96:	f7ff fe21 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x1F);
 8002e9a:	201f      	movs	r0, #31
 8002e9c:	f7ff fe1e 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8002ea0:	200b      	movs	r0, #11
 8002ea2:	f7ff fe1b 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x0E);
 8002ea6:	200e      	movs	r0, #14
 8002ea8:	f7ff fe18 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8002eac:	2008      	movs	r0, #8
 8002eae:	f7ff fe15 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x4B);
 8002eb2:	204b      	movs	r0, #75	; 0x4b
 8002eb4:	f7ff fe12 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0XA8);
 8002eb8:	20a8      	movs	r0, #168	; 0xa8
 8002eba:	f7ff fe0f 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x3B);
 8002ebe:	203b      	movs	r0, #59	; 0x3b
 8002ec0:	f7ff fe0c 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x0A);
 8002ec4:	200a      	movs	r0, #10
 8002ec6:	f7ff fe09 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x14);
 8002eca:	2014      	movs	r0, #20
 8002ecc:	f7ff fe06 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x06);
 8002ed0:	2006      	movs	r0, #6
 8002ed2:	f7ff fe03 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002ed6:	2010      	movs	r0, #16
 8002ed8:	f7ff fe00 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8002edc:	2009      	movs	r0, #9
 8002ede:	f7ff fdfd 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7ff fdfa 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0XE1);      // Set Gamma
 8002ee8:	20e1      	movs	r0, #225	; 0xe1
 8002eea:	f7ff fdd9 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f7ff fdf4 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x1C);
 8002ef4:	201c      	movs	r0, #28
 8002ef6:	f7ff fdf1 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x20);
 8002efa:	2020      	movs	r0, #32
 8002efc:	f7ff fdee 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x04);
 8002f00:	2004      	movs	r0, #4
 8002f02:	f7ff fdeb 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x10);
 8002f06:	2010      	movs	r0, #16
 8002f08:	f7ff fde8 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x08);
 8002f0c:	2008      	movs	r0, #8
 8002f0e:	f7ff fde5 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x34);
 8002f12:	2034      	movs	r0, #52	; 0x34
 8002f14:	f7ff fde2 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x47);
 8002f18:	2047      	movs	r0, #71	; 0x47
 8002f1a:	f7ff fddf 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x44);
 8002f1e:	2044      	movs	r0, #68	; 0x44
 8002f20:	f7ff fddc 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x05);
 8002f24:	2005      	movs	r0, #5
 8002f26:	f7ff fdd9 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x0B);
 8002f2a:	200b      	movs	r0, #11
 8002f2c:	f7ff fdd6 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x09);
 8002f30:	2009      	movs	r0, #9
 8002f32:	f7ff fdd3 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x2F);
 8002f36:	202f      	movs	r0, #47	; 0x2f
 8002f38:	f7ff fdd0 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x36);
 8002f3c:	2036      	movs	r0, #54	; 0x36
 8002f3e:	f7ff fdcd 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x0F);
 8002f42:	200f      	movs	r0, #15
 8002f44:	f7ff fdca 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0x2B);
 8002f48:	202b      	movs	r0, #43	; 0x2b
 8002f4a:	f7ff fda9 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f7ff fdc4 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff fdc1 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x01);
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f7ff fdbe 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x3f);
 8002f60:	203f      	movs	r0, #63	; 0x3f
 8002f62:	f7ff fdbb 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0x2A);
 8002f66:	202a      	movs	r0, #42	; 0x2a
 8002f68:	f7ff fd9a 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7ff fdb5 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7ff fdb2 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7ff fdaf 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0xef);
 8002f7e:	20ef      	movs	r0, #239	; 0xef
 8002f80:	f7ff fdac 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_REG(0x11);     // Exit Sleep
 8002f84:	2011      	movs	r0, #17
 8002f86:	f7ff fd8b 	bl	8002aa0 <LCD_WR_REG>
    //nano_wait(120000000); // Wait 120 ms
    for(i=0; i<10000;i++);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e002      	b.n	8002f96 <LCD_Init+0x276>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	3301      	adds	r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	ddf7      	ble.n	8002f90 <LCD_Init+0x270>
    LCD_WR_REG(0x29);     // Display on
 8002fa0:	2029      	movs	r0, #41	; 0x29
 8002fa2:	f7ff fd7d 	bl	8002aa0 <LCD_WR_REG>

    LCD_direction(USE_HORIZONTAL);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7ff fe12 	bl	8002bd0 <LCD_direction>
    lcddev.select(0);
 8002fac:	4b03      	ldr	r3, [pc, #12]	; (8002fbc <LCD_Init+0x29c>)
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	4798      	blx	r3
}
 8002fb4:	bf00      	nop
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	20000270 	.word	0x20000270
 8002fc0:	08002cc9 	.word	0x08002cc9
 8002fc4:	08002c79 	.word	0x08002c79
 8002fc8:	08002cf5 	.word	0x08002cf5

08002fcc <LCD_SetWindow>:
//===========================================================================
// Select a subset of the display to work on, and issue the "Write RAM"
// command to prepare to send pixel data to it.
//===========================================================================
void LCD_SetWindow(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	4608      	mov	r0, r1
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4623      	mov	r3, r4
 8002fdc:	80fb      	strh	r3, [r7, #6]
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80bb      	strh	r3, [r7, #4]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	807b      	strh	r3, [r7, #2]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	803b      	strh	r3, [r7, #0]
    LCD_WR_REG(lcddev.setxcmd);
 8002fea:	4b21      	ldr	r3, [pc, #132]	; (8003070 <LCD_SetWindow+0xa4>)
 8002fec:	895b      	ldrh	r3, [r3, #10]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fd55 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(xStart>>8);
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	0a1b      	lsrs	r3, r3, #8
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fd6c 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xStart);
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fd67 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(xEnd>>8);
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	0a1b      	lsrs	r3, r3, #8
 8003012:	b29b      	uxth	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fd60 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&xEnd);
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fd5b 	bl	8002adc <LCD_WR_DATA>

    LCD_WR_REG(lcddev.setycmd);
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <LCD_SetWindow+0xa4>)
 8003028:	899b      	ldrh	r3, [r3, #12]
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fd37 	bl	8002aa0 <LCD_WR_REG>
    LCD_WR_DATA(yStart>>8);
 8003032:	88bb      	ldrh	r3, [r7, #4]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	b29b      	uxth	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fd4e 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yStart);
 8003040:	88bb      	ldrh	r3, [r7, #4]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fd49 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(yEnd>>8);
 800304a:	883b      	ldrh	r3, [r7, #0]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	b29b      	uxth	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff fd42 	bl	8002adc <LCD_WR_DATA>
    LCD_WR_DATA(0x00FF&yEnd);
 8003058:	883b      	ldrh	r3, [r7, #0]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fd3d 	bl	8002adc <LCD_WR_DATA>

    LCD_WriteRAM_Prepare();
 8003062:	f7ff fda9 	bl	8002bb8 <LCD_WriteRAM_Prepare>
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bd90      	pop	{r4, r7, pc}
 800306e:	bf00      	nop
 8003070:	20000270 	.word	0x20000270

08003074 <LCD_Clear>:

//===========================================================================
// Set the entire display to one color
//===========================================================================
void LCD_Clear(u16 Color)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	80fb      	strh	r3, [r7, #6]
	int j;

    lcddev.select(1);
 800307e:	4b22      	ldr	r3, [pc, #136]	; (8003108 <LCD_Clear+0x94>)
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2001      	movs	r0, #1
 8003084:	4798      	blx	r3
    unsigned int i,m;
    LCD_SetWindow(0,0,lcddev.width-1,lcddev.height-1);
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <LCD_Clear+0x94>)
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	3b01      	subs	r3, #1
 800308c:	b29a      	uxth	r2, r3
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <LCD_Clear+0x94>)
 8003090:	885b      	ldrh	r3, [r3, #2]
 8003092:	3b01      	subs	r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	2100      	movs	r1, #0
 8003098:	2000      	movs	r0, #0
 800309a:	f7ff ff97 	bl	8002fcc <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 800309e:	f7ff fd3b 	bl	8002b18 <LCD_WriteData16_Prepare>
    for(i=0;i<lcddev.height;i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	e012      	b.n	80030ce <LCD_Clear+0x5a>
    {
        for(m=0;m<lcddev.width;m++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e006      	b.n	80030bc <LCD_Clear+0x48>
        {
            LCD_WriteData16(Color);
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fd43 	bl	8002b3c <LCD_WriteData16>
        for(m=0;m<lcddev.width;m++)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3301      	adds	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	4b12      	ldr	r3, [pc, #72]	; (8003108 <LCD_Clear+0x94>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d3f2      	bcc.n	80030ae <LCD_Clear+0x3a>
    for(i=0;i<lcddev.height;i++)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	3301      	adds	r3, #1
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <LCD_Clear+0x94>)
 80030d0:	885b      	ldrh	r3, [r3, #2]
 80030d2:	461a      	mov	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d3e6      	bcc.n	80030a8 <LCD_Clear+0x34>
        }
    }
    LCD_WriteData16_End();
 80030da:	f7ff fd47 	bl	8002b6c <LCD_WriteData16_End>
    lcddev.select(0);
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <LCD_Clear+0x94>)
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2000      	movs	r0, #0
 80030e4:	4798      	blx	r3
    for(j = 0; j < 10000; j++);
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e002      	b.n	80030f2 <LCD_Clear+0x7e>
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3301      	adds	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80030f8:	4293      	cmp	r3, r2
 80030fa:	ddf7      	ble.n	80030ec <LCD_Clear+0x78>
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000270 	.word	0x20000270

0800310c <_LCD_DrawPoint>:

//===========================================================================
// Draw a single dot of color c at (x,y)
//===========================================================================
static void _LCD_DrawPoint(u16 x, u16 y, u16 c)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
 8003116:	460b      	mov	r3, r1
 8003118:	80bb      	strh	r3, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	807b      	strh	r3, [r7, #2]
    LCD_SetWindow(x,y,x,y);
 800311e:	88bb      	ldrh	r3, [r7, #4]
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	88b9      	ldrh	r1, [r7, #4]
 8003124:	88f8      	ldrh	r0, [r7, #6]
 8003126:	f7ff ff51 	bl	8002fcc <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 800312a:	f7ff fcf5 	bl	8002b18 <LCD_WriteData16_Prepare>
    LCD_WriteData16(c);
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fd03 	bl	8002b3c <LCD_WriteData16>
    LCD_WriteData16_End();
 8003136:	f7ff fd19 	bl	8002b6c <LCD_WriteData16_End>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_LCD_DrawLine>:

//===========================================================================
// Draw a line of color c from (x1,y1) to (x2,y2).
//===========================================================================
static void _LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 8003142:	b590      	push	{r4, r7, lr}
 8003144:	b08d      	sub	sp, #52	; 0x34
 8003146:	af00      	add	r7, sp, #0
 8003148:	4604      	mov	r4, r0
 800314a:	4608      	mov	r0, r1
 800314c:	4611      	mov	r1, r2
 800314e:	461a      	mov	r2, r3
 8003150:	4623      	mov	r3, r4
 8003152:	80fb      	strh	r3, [r7, #6]
 8003154:	4603      	mov	r3, r0
 8003156:	80bb      	strh	r3, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
 800315c:	4613      	mov	r3, r2
 800315e:	803b      	strh	r3, [r7, #0]
    u16 t;
    int xerr=0,yerr=0,delta_x,delta_y,distance;
 8003160:	2300      	movs	r3, #0
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
    int incx,incy,uRow,uCol;

    delta_x=x2-x1;
 8003168:	887a      	ldrh	r2, [r7, #2]
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	623b      	str	r3, [r7, #32]
    delta_y=y2-y1;
 8003170:	883a      	ldrh	r2, [r7, #0]
 8003172:	88bb      	ldrh	r3, [r7, #4]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	61fb      	str	r3, [r7, #28]
    uRow=x1;
 8003178:	88fb      	ldrh	r3, [r7, #6]
 800317a:	60fb      	str	r3, [r7, #12]
    uCol=y1;
 800317c:	88bb      	ldrh	r3, [r7, #4]
 800317e:	60bb      	str	r3, [r7, #8]
    if(delta_x>0)incx=1;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	2b00      	cmp	r3, #0
 8003184:	dd02      	ble.n	800318c <_LCD_DrawLine+0x4a>
 8003186:	2301      	movs	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e00b      	b.n	80031a4 <_LCD_DrawLine+0x62>
    else if(delta_x==0)incx=0;
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <_LCD_DrawLine+0x56>
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e005      	b.n	80031a4 <_LCD_DrawLine+0x62>
    else {incx=-1;delta_x=-delta_x;}
 8003198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	425b      	negs	r3, r3
 80031a2:	623b      	str	r3, [r7, #32]
    if(delta_y>0)incy=1;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	dd02      	ble.n	80031b0 <_LCD_DrawLine+0x6e>
 80031aa:	2301      	movs	r3, #1
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	e00b      	b.n	80031c8 <_LCD_DrawLine+0x86>
    else if(delta_y==0)incy=0;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <_LCD_DrawLine+0x7a>
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e005      	b.n	80031c8 <_LCD_DrawLine+0x86>
    else{incy=-1;delta_y=-delta_y;}
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	425b      	negs	r3, r3
 80031c6:	61fb      	str	r3, [r7, #28]
    if( delta_x>delta_y)distance=delta_x;
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dd02      	ble.n	80031d6 <_LCD_DrawLine+0x94>
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	e001      	b.n	80031da <_LCD_DrawLine+0x98>
    else distance=delta_y;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	61bb      	str	r3, [r7, #24]
    for(t=0;t<=distance+1;t++ )
 80031da:	2300      	movs	r3, #0
 80031dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80031de:	e02b      	b.n	8003238 <_LCD_DrawLine+0xf6>
    {
        _LCD_DrawPoint(uRow,uCol,c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	b291      	uxth	r1, r2
 80031e8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff8d 	bl	800310c <_LCD_DrawPoint>
        xerr+=delta_x ;
 80031f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	4413      	add	r3, r2
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
        yerr+=delta_y ;
 80031fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
        if(xerr>distance)
 8003202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	429a      	cmp	r2, r3
 8003208:	dd07      	ble.n	800321a <_LCD_DrawLine+0xd8>
        {
            xerr-=distance;
 800320a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	62bb      	str	r3, [r7, #40]	; 0x28
            uRow+=incx;
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	4413      	add	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
        }
        if(yerr>distance)
 800321a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	429a      	cmp	r2, r3
 8003220:	dd07      	ble.n	8003232 <_LCD_DrawLine+0xf0>
        {
            yerr-=distance;
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
            uCol+=incy;
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4413      	add	r3, r2
 8003230:	60bb      	str	r3, [r7, #8]
    for(t=0;t<=distance+1;t++ )
 8003232:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003234:	3301      	adds	r3, #1
 8003236:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003238:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3301      	adds	r3, #1
 800323e:	429a      	cmp	r2, r3
 8003240:	ddce      	ble.n	80031e0 <_LCD_DrawLine+0x9e>
        }
    }
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	3734      	adds	r7, #52	; 0x34
 8003248:	46bd      	mov	sp, r7
 800324a:	bd90      	pop	{r4, r7, pc}

0800324c <LCD_DrawLine>:

void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b085      	sub	sp, #20
 8003250:	af02      	add	r7, sp, #8
 8003252:	4604      	mov	r4, r0
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4623      	mov	r3, r4
 800325c:	80fb      	strh	r3, [r7, #6]
 800325e:	4603      	mov	r3, r0
 8003260:	80bb      	strh	r3, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	807b      	strh	r3, [r7, #2]
 8003266:	4613      	mov	r3, r2
 8003268:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <LCD_DrawLine+0x48>)
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2001      	movs	r0, #1
 8003270:	4798      	blx	r3
    _LCD_DrawLine(x1,y1,x2,y2,c);
 8003272:	883c      	ldrh	r4, [r7, #0]
 8003274:	887a      	ldrh	r2, [r7, #2]
 8003276:	88b9      	ldrh	r1, [r7, #4]
 8003278:	88f8      	ldrh	r0, [r7, #6]
 800327a:	8b3b      	ldrh	r3, [r7, #24]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	4623      	mov	r3, r4
 8003280:	f7ff ff5f 	bl	8003142 <_LCD_DrawLine>
    lcddev.select(0);
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <LCD_DrawLine+0x48>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	2000      	movs	r0, #0
 800328a:	4798      	blx	r3
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}
 8003294:	20000270 	.word	0x20000270

08003298 <_LCD_Fill>:

//===========================================================================
// Fill a rectangle with color c from (x1,y1) to (x2,y2).
//===========================================================================
static void _LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u16 color)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	4604      	mov	r4, r0
 80032a0:	4608      	mov	r0, r1
 80032a2:	4611      	mov	r1, r2
 80032a4:	461a      	mov	r2, r3
 80032a6:	4623      	mov	r3, r4
 80032a8:	80fb      	strh	r3, [r7, #6]
 80032aa:	4603      	mov	r3, r0
 80032ac:	80bb      	strh	r3, [r7, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	807b      	strh	r3, [r7, #2]
 80032b2:	4613      	mov	r3, r2
 80032b4:	803b      	strh	r3, [r7, #0]
    u16 i,j;
    u16 width=ex-sx+1;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	817b      	strh	r3, [r7, #10]
    u16 height=ey-sy+1;
 80032c2:	883a      	ldrh	r2, [r7, #0]
 80032c4:	88bb      	ldrh	r3, [r7, #4]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	813b      	strh	r3, [r7, #8]
    LCD_SetWindow(sx,sy,ex,ey);
 80032ce:	883b      	ldrh	r3, [r7, #0]
 80032d0:	887a      	ldrh	r2, [r7, #2]
 80032d2:	88b9      	ldrh	r1, [r7, #4]
 80032d4:	88f8      	ldrh	r0, [r7, #6]
 80032d6:	f7ff fe79 	bl	8002fcc <LCD_SetWindow>
    LCD_WriteData16_Prepare();
 80032da:	f7ff fc1d 	bl	8002b18 <LCD_WriteData16_Prepare>
    for(i=0;i<height;i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	81fb      	strh	r3, [r7, #14]
 80032e2:	e010      	b.n	8003306 <_LCD_Fill+0x6e>
    {
        for(j=0;j<width;j++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	81bb      	strh	r3, [r7, #12]
 80032e8:	e006      	b.n	80032f8 <_LCD_Fill+0x60>
        LCD_WriteData16(color);
 80032ea:	8c3b      	ldrh	r3, [r7, #32]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fc25 	bl	8002b3c <LCD_WriteData16>
        for(j=0;j<width;j++)
 80032f2:	89bb      	ldrh	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	81bb      	strh	r3, [r7, #12]
 80032f8:	89ba      	ldrh	r2, [r7, #12]
 80032fa:	897b      	ldrh	r3, [r7, #10]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d3f4      	bcc.n	80032ea <_LCD_Fill+0x52>
    for(i=0;i<height;i++)
 8003300:	89fb      	ldrh	r3, [r7, #14]
 8003302:	3301      	adds	r3, #1
 8003304:	81fb      	strh	r3, [r7, #14]
 8003306:	89fa      	ldrh	r2, [r7, #14]
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	d3ea      	bcc.n	80032e4 <_LCD_Fill+0x4c>
    }
    LCD_WriteData16_End();
 800330e:	f7ff fc2d 	bl	8002b6c <LCD_WriteData16_End>
}
 8003312:	bf00      	nop
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	bd90      	pop	{r4, r7, pc}
	...

0800331c <LCD_DrawFillRectangle>:

//===========================================================================
// Draw a filled rectangle of lines of color c from (x1,y1) to (x2,y2).
//===========================================================================
void LCD_DrawFillRectangle(u16 x1, u16 y1, u16 x2, u16 y2, u16 c)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b085      	sub	sp, #20
 8003320:	af02      	add	r7, sp, #8
 8003322:	4604      	mov	r4, r0
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4623      	mov	r3, r4
 800332c:	80fb      	strh	r3, [r7, #6]
 800332e:	4603      	mov	r3, r0
 8003330:	80bb      	strh	r3, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	807b      	strh	r3, [r7, #2]
 8003336:	4613      	mov	r3, r2
 8003338:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <LCD_DrawFillRectangle+0x48>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2001      	movs	r0, #1
 8003340:	4798      	blx	r3
    _LCD_Fill(x1,y1,x2,y2,c);
 8003342:	883c      	ldrh	r4, [r7, #0]
 8003344:	887a      	ldrh	r2, [r7, #2]
 8003346:	88b9      	ldrh	r1, [r7, #4]
 8003348:	88f8      	ldrh	r0, [r7, #6]
 800334a:	8b3b      	ldrh	r3, [r7, #24]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	4623      	mov	r3, r4
 8003350:	f7ff ffa2 	bl	8003298 <_LCD_Fill>
    lcddev.select(0);
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <LCD_DrawFillRectangle+0x48>)
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	2000      	movs	r0, #0
 800335a:	4798      	blx	r3
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}
 8003364:	20000270 	.word	0x20000270

08003368 <_swap>:
    _LCD_DrawLine(x2,y2,x0,y0,c);
    lcddev.select(0);
}

static void _swap(u16 *a, u16 *b)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
    u16 tmp;
    tmp = *a;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	81fb      	strh	r3, [r7, #14]
    *a = *b;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	881a      	ldrh	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	801a      	strh	r2, [r3, #0]
    *b = tmp;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	89fa      	ldrh	r2, [r7, #14]
 8003384:	801a      	strh	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <LCD_DrawFillTriangle>:

//===========================================================================
// Draw a filled triangle of color c with vertices at (x0,y0), (x1,y1), (x2,y2).
//===========================================================================
void LCD_DrawFillTriangle(u16 x0,u16 y0, u16 x1,u16 y1, u16 x2,u16 y2, u16 c)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b08f      	sub	sp, #60	; 0x3c
 8003398:	af02      	add	r7, sp, #8
 800339a:	4604      	mov	r4, r0
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	80fb      	strh	r3, [r7, #6]
 80033a6:	4603      	mov	r3, r0
 80033a8:	80bb      	strh	r3, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	807b      	strh	r3, [r7, #2]
 80033ae:	4613      	mov	r3, r2
 80033b0:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 80033b2:	4b92      	ldr	r3, [pc, #584]	; (80035fc <LCD_DrawFillTriangle+0x268>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2001      	movs	r0, #1
 80033b8:	4798      	blx	r3
    u16 a, b, y, last;
    int dx01, dy01, dx02, dy02, dx12, dy12;
    long sa = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    long sb = 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (y0 > y1)
 80033c2:	88ba      	ldrh	r2, [r7, #4]
 80033c4:	883b      	ldrh	r3, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90b      	bls.n	80033e2 <LCD_DrawFillTriangle+0x4e>
    {
    _swap(&y0,&y1);
 80033ca:	463a      	mov	r2, r7
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffc9 	bl	8003368 <_swap>
        _swap(&x0,&x1);
 80033d6:	1cba      	adds	r2, r7, #2
 80033d8:	1dbb      	adds	r3, r7, #6
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ffc3 	bl	8003368 <_swap>
    }
    if (y1 > y2)
 80033e2:	883a      	ldrh	r2, [r7, #0]
 80033e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d90c      	bls.n	8003406 <LCD_DrawFillTriangle+0x72>
    {
    _swap(&y2,&y1);
 80033ec:	463a      	mov	r2, r7
 80033ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ffb7 	bl	8003368 <_swap>
        _swap(&x2,&x1);
 80033fa:	1cbb      	adds	r3, r7, #2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8003402:	f7ff ffb1 	bl	8003368 <_swap>
    }
  if (y0 > y1)
 8003406:	88ba      	ldrh	r2, [r7, #4]
 8003408:	883b      	ldrh	r3, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d90b      	bls.n	8003426 <LCD_DrawFillTriangle+0x92>
    {
    _swap(&y0,&y1);
 800340e:	463a      	mov	r2, r7
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ffa7 	bl	8003368 <_swap>
        _swap(&x0,&x1);
 800341a:	1cba      	adds	r2, r7, #2
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ffa1 	bl	8003368 <_swap>
  }
    if(y0 == y2)
 8003426:	88ba      	ldrh	r2, [r7, #4]
 8003428:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800342c:	429a      	cmp	r2, r3
 800342e:	d130      	bne.n	8003492 <LCD_DrawFillTriangle+0xfe>
    {
        a = b = x0;
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	813b      	strh	r3, [r7, #8]
 8003434:	893b      	ldrh	r3, [r7, #8]
 8003436:	817b      	strh	r3, [r7, #10]
        if(x1 < a)
 8003438:	887a      	ldrh	r2, [r7, #2]
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	429a      	cmp	r2, r3
 800343e:	d202      	bcs.n	8003446 <LCD_DrawFillTriangle+0xb2>
    {
            a = x1;
 8003440:	887b      	ldrh	r3, [r7, #2]
 8003442:	817b      	strh	r3, [r7, #10]
 8003444:	e005      	b.n	8003452 <LCD_DrawFillTriangle+0xbe>
    }
    else if(x1 > b)
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	893b      	ldrh	r3, [r7, #8]
 800344a:	429a      	cmp	r2, r3
 800344c:	d901      	bls.n	8003452 <LCD_DrawFillTriangle+0xbe>
    {
            b = x1;
 800344e:	887b      	ldrh	r3, [r7, #2]
 8003450:	813b      	strh	r3, [r7, #8]
    }
    if(x2 < a)
 8003452:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	429a      	cmp	r2, r3
 800345a:	d203      	bcs.n	8003464 <LCD_DrawFillTriangle+0xd0>
    {
            a = x2;
 800345c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003460:	817b      	strh	r3, [r7, #10]
 8003462:	e007      	b.n	8003474 <LCD_DrawFillTriangle+0xe0>
    }
        else if(x2 > b)
 8003464:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003468:	893b      	ldrh	r3, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d902      	bls.n	8003474 <LCD_DrawFillTriangle+0xe0>
    {
            b = x2;
 800346e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003472:	813b      	strh	r3, [r7, #8]
    }
        _LCD_Fill(a,y0,b,y0,c);
 8003474:	8978      	ldrh	r0, [r7, #10]
 8003476:	88b9      	ldrh	r1, [r7, #4]
 8003478:	893a      	ldrh	r2, [r7, #8]
 800347a:	88bc      	ldrh	r4, [r7, #4]
 800347c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4623      	mov	r3, r4
 8003484:	f7ff ff08 	bl	8003298 <_LCD_Fill>
    lcddev.select(0); // @henry: added in select()
 8003488:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <LCD_DrawFillTriangle+0x268>)
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	2000      	movs	r0, #0
 800348e:	4798      	blx	r3
 8003490:	e0b1      	b.n	80035f6 <LCD_DrawFillTriangle+0x262>
    return;
    }
    dx01 = x1 - x0;
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	461a      	mov	r2, r3
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	623b      	str	r3, [r7, #32]
    dy01 = y1 - y0;
 800349c:	883b      	ldrh	r3, [r7, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	88bb      	ldrh	r3, [r7, #4]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	61fb      	str	r3, [r7, #28]
    dx02 = x2 - x0;
 80034a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034aa:	461a      	mov	r2, r3
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	61bb      	str	r3, [r7, #24]
    dy02 = y2 - y0;
 80034b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034b6:	461a      	mov	r2, r3
 80034b8:	88bb      	ldrh	r3, [r7, #4]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	617b      	str	r3, [r7, #20]
    dx12 = x2 - x1;
 80034be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034c2:	461a      	mov	r2, r3
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	613b      	str	r3, [r7, #16]
    dy12 = y2 - y1;
 80034ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034ce:	461a      	mov	r2, r3
 80034d0:	883b      	ldrh	r3, [r7, #0]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	60fb      	str	r3, [r7, #12]

    if(y1 == y2)
 80034d6:	883a      	ldrh	r2, [r7, #0]
 80034d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80034dc:	429a      	cmp	r2, r3
 80034de:	d102      	bne.n	80034e6 <LCD_DrawFillTriangle+0x152>
    {
        last = y1;
 80034e0:	883b      	ldrh	r3, [r7, #0]
 80034e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80034e4:	e002      	b.n	80034ec <LCD_DrawFillTriangle+0x158>
    }
  else
    {
        last = y1-1;
 80034e6:	883b      	ldrh	r3, [r7, #0]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    for(y=y0; y<=last; y++)
 80034ec:	88bb      	ldrh	r3, [r7, #4]
 80034ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80034f0:	e032      	b.n	8003558 <LCD_DrawFillTriangle+0x1c4>
    {
        a = x0 + sa / dy01;
 80034f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	4413      	add	r3, r2
 8003500:	b29b      	uxth	r3, r3
 8003502:	817b      	strh	r3, [r7, #10]
        b = x0 + sb / dy02;
 8003504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	fb92 f3f3 	sdiv	r3, r2, r3
 800350c:	b29a      	uxth	r2, r3
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	4413      	add	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	813b      	strh	r3, [r7, #8]
        sa += dx01;
 8003516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	4413      	add	r3, r2
 800351c:	62bb      	str	r3, [r7, #40]	; 0x28
    sb += dx02;
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    if(a > b)
 8003526:	897a      	ldrh	r2, [r7, #10]
 8003528:	893b      	ldrh	r3, [r7, #8]
 800352a:	429a      	cmp	r2, r3
 800352c:	d907      	bls.n	800353e <LCD_DrawFillTriangle+0x1aa>
    {
            _swap(&a,&b);
 800352e:	f107 0208 	add.w	r2, r7, #8
 8003532:	f107 030a 	add.w	r3, r7, #10
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff15 	bl	8003368 <_swap>
        }
        _LCD_Fill(a,y,b,y,c);
 800353e:	8978      	ldrh	r0, [r7, #10]
 8003540:	893a      	ldrh	r2, [r7, #8]
 8003542:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 8003544:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003546:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	4623      	mov	r3, r4
 800354e:	f7ff fea3 	bl	8003298 <_LCD_Fill>
    for(y=y0; y<=last; y++)
 8003552:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003554:	3301      	adds	r3, #1
 8003556:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003558:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800355a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800355c:	429a      	cmp	r2, r3
 800355e:	d9c8      	bls.n	80034f2 <LCD_DrawFillTriangle+0x15e>
    }
    sa = dx12 * (y - y1);
 8003560:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003562:	883a      	ldrh	r2, [r7, #0]
 8003564:	1a9a      	subs	r2, r3, r2
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
    sb = dx02 * (y - y0);
 800356e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003570:	88ba      	ldrh	r2, [r7, #4]
 8003572:	1a9a      	subs	r2, r3, r2
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
    for(; y<=y2; y++)
 800357c:	e032      	b.n	80035e4 <LCD_DrawFillTriangle+0x250>
    {
        a = x1 + sa / dy12;
 800357e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	fb92 f3f3 	sdiv	r3, r2, r3
 8003586:	b29a      	uxth	r2, r3
 8003588:	887b      	ldrh	r3, [r7, #2]
 800358a:	4413      	add	r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	817b      	strh	r3, [r7, #10]
        b = x0 + sb / dy02;
 8003590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	fb92 f3f3 	sdiv	r3, r2, r3
 8003598:	b29a      	uxth	r2, r3
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	4413      	add	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	813b      	strh	r3, [r7, #8]
        sa += dx12;
 80035a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	62bb      	str	r3, [r7, #40]	; 0x28
        sb += dx02;
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4413      	add	r3, r2
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
        if(a > b)
 80035b2:	897a      	ldrh	r2, [r7, #10]
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d907      	bls.n	80035ca <LCD_DrawFillTriangle+0x236>
        {
            _swap(&a,&b);
 80035ba:	f107 0208 	add.w	r2, r7, #8
 80035be:	f107 030a 	add.w	r3, r7, #10
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fecf 	bl	8003368 <_swap>
        }
        _LCD_Fill(a,y,b,y,c);
 80035ca:	8978      	ldrh	r0, [r7, #10]
 80035cc:	893a      	ldrh	r2, [r7, #8]
 80035ce:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80035d0:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80035d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4623      	mov	r3, r4
 80035da:	f7ff fe5d 	bl	8003298 <_LCD_Fill>
    for(; y<=y2; y++)
 80035de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035e0:	3301      	adds	r3, #1
 80035e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80035e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d9c7      	bls.n	800357e <LCD_DrawFillTriangle+0x1ea>
    }
    lcddev.select(0);
 80035ee:	4b03      	ldr	r3, [pc, #12]	; (80035fc <LCD_DrawFillTriangle+0x268>)
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2000      	movs	r0, #0
 80035f4:	4798      	blx	r3
}
 80035f6:	3734      	adds	r7, #52	; 0x34
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	20000270 	.word	0x20000270

08003600 <_LCD_DrawChar>:
// num is the ASCII character number
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void _LCD_DrawChar(u16 x,u16 y,u16 fc, u16 bc, char num, u8 size, u8 mode)
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	461a      	mov	r2, r3
 800360e:	4623      	mov	r3, r4
 8003610:	80fb      	strh	r3, [r7, #6]
 8003612:	4603      	mov	r3, r0
 8003614:	80bb      	strh	r3, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	807b      	strh	r3, [r7, #2]
 800361a:	4613      	mov	r3, r2
 800361c:	803b      	strh	r3, [r7, #0]
    u8 temp;
    u8 pos,t;
    num=num-' ';
 800361e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003622:	3b20      	subs	r3, #32
 8003624:	f887 3020 	strb.w	r3, [r7, #32]
    LCD_SetWindow(x,y,x+size/2-1,y+size-1);
 8003628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	b2db      	uxtb	r3, r3
 8003630:	b29a      	uxth	r2, r3
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	4413      	add	r3, r2
 8003636:	b29b      	uxth	r3, r3
 8003638:	3b01      	subs	r3, #1
 800363a:	b29c      	uxth	r4, r3
 800363c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003640:	b29a      	uxth	r2, r3
 8003642:	88bb      	ldrh	r3, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	b29b      	uxth	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	88b9      	ldrh	r1, [r7, #4]
 800364e:	88f8      	ldrh	r0, [r7, #6]
 8003650:	4622      	mov	r2, r4
 8003652:	f7ff fcbb 	bl	8002fcc <LCD_SetWindow>
    if (!mode) {
 8003656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800365a:	2b00      	cmp	r3, #0
 800365c:	d147      	bne.n	80036ee <_LCD_DrawChar+0xee>
        LCD_WriteData16_Prepare();
 800365e:	f7ff fa5b 	bl	8002b18 <LCD_WriteData16_Prepare>
        for(pos=0;pos<size;pos++) {
 8003662:	2300      	movs	r3, #0
 8003664:	73bb      	strb	r3, [r7, #14]
 8003666:	e03a      	b.n	80036de <_LCD_DrawChar+0xde>
            if (size==12)
 8003668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800366c:	2b0c      	cmp	r3, #12
 800366e:	d10c      	bne.n	800368a <_LCD_DrawChar+0x8a>
                temp=asc2_1206[num][pos];
 8003670:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003674:	7bb9      	ldrb	r1, [r7, #14]
 8003676:	4844      	ldr	r0, [pc, #272]	; (8003788 <_LCD_DrawChar+0x188>)
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	440b      	add	r3, r1
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	e008      	b.n	800369c <_LCD_DrawChar+0x9c>
            else
                temp=asc2_1608[num][pos];
 800368a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800368e:	7bbb      	ldrb	r3, [r7, #14]
 8003690:	493e      	ldr	r1, [pc, #248]	; (800378c <_LCD_DrawChar+0x18c>)
 8003692:	0112      	lsls	r2, r2, #4
 8003694:	440a      	add	r2, r1
 8003696:	4413      	add	r3, r2
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++) {
 800369c:	2300      	movs	r3, #0
 800369e:	737b      	strb	r3, [r7, #13]
 80036a0:	e013      	b.n	80036ca <_LCD_DrawChar+0xca>
                if (temp&0x01)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <_LCD_DrawChar+0xb6>
                    LCD_WriteData16(fc);
 80036ac:	887b      	ldrh	r3, [r7, #2]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fa44 	bl	8002b3c <LCD_WriteData16>
 80036b4:	e003      	b.n	80036be <_LCD_DrawChar+0xbe>
                else
                    LCD_WriteData16(bc);
 80036b6:	883b      	ldrh	r3, [r7, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fa3f 	bl	8002b3c <LCD_WriteData16>
                temp>>=1;
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++) {
 80036c4:	7b7b      	ldrb	r3, [r7, #13]
 80036c6:	3301      	adds	r3, #1
 80036c8:	737b      	strb	r3, [r7, #13]
 80036ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	7b7a      	ldrb	r2, [r7, #13]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d3e4      	bcc.n	80036a2 <_LCD_DrawChar+0xa2>
        for(pos=0;pos<size;pos++) {
 80036d8:	7bbb      	ldrb	r3, [r7, #14]
 80036da:	3301      	adds	r3, #1
 80036dc:	73bb      	strb	r3, [r7, #14]
 80036de:	7bba      	ldrb	r2, [r7, #14]
 80036e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d3bf      	bcc.n	8003668 <_LCD_DrawChar+0x68>

            }
        }
        LCD_WriteData16_End();
 80036e8:	f7ff fa40 	bl	8002b6c <LCD_WriteData16_End>
                    _LCD_DrawPoint(x+t,y+pos,fc);
                temp>>=1;
            }
        }
    }
}
 80036ec:	e047      	b.n	800377e <_LCD_DrawChar+0x17e>
        for(pos=0;pos<size;pos++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	73bb      	strb	r3, [r7, #14]
 80036f2:	e03f      	b.n	8003774 <_LCD_DrawChar+0x174>
            if (size==12)
 80036f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d10c      	bne.n	8003716 <_LCD_DrawChar+0x116>
                temp=asc2_1206[num][pos];
 80036fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003700:	7bb9      	ldrb	r1, [r7, #14]
 8003702:	4821      	ldr	r0, [pc, #132]	; (8003788 <_LCD_DrawChar+0x188>)
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4403      	add	r3, r0
 800370e:	440b      	add	r3, r1
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e008      	b.n	8003728 <_LCD_DrawChar+0x128>
                temp=asc2_1608[num][pos];
 8003716:	f897 2020 	ldrb.w	r2, [r7, #32]
 800371a:	7bbb      	ldrb	r3, [r7, #14]
 800371c:	491b      	ldr	r1, [pc, #108]	; (800378c <_LCD_DrawChar+0x18c>)
 800371e:	0112      	lsls	r2, r2, #4
 8003720:	440a      	add	r2, r1
 8003722:	4413      	add	r3, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++)
 8003728:	2300      	movs	r3, #0
 800372a:	737b      	strb	r3, [r7, #13]
 800372c:	e018      	b.n	8003760 <_LCD_DrawChar+0x160>
                if(temp&0x01)
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00d      	beq.n	8003754 <_LCD_DrawChar+0x154>
                    _LCD_DrawPoint(x+t,y+pos,fc);
 8003738:	7b7b      	ldrb	r3, [r7, #13]
 800373a:	b29a      	uxth	r2, r3
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	4413      	add	r3, r2
 8003740:	b298      	uxth	r0, r3
 8003742:	7bbb      	ldrb	r3, [r7, #14]
 8003744:	b29a      	uxth	r2, r3
 8003746:	88bb      	ldrh	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	887a      	ldrh	r2, [r7, #2]
 800374e:	4619      	mov	r1, r3
 8003750:	f7ff fcdc 	bl	800310c <_LCD_DrawPoint>
                temp>>=1;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	085b      	lsrs	r3, r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
            for (t=0;t<size/2;t++)
 800375a:	7b7b      	ldrb	r3, [r7, #13]
 800375c:	3301      	adds	r3, #1
 800375e:	737b      	strb	r3, [r7, #13]
 8003760:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	7b7a      	ldrb	r2, [r7, #13]
 800376a:	429a      	cmp	r2, r3
 800376c:	d3df      	bcc.n	800372e <_LCD_DrawChar+0x12e>
        for(pos=0;pos<size;pos++)
 800376e:	7bbb      	ldrb	r3, [r7, #14]
 8003770:	3301      	adds	r3, #1
 8003772:	73bb      	strb	r3, [r7, #14]
 8003774:	7bba      	ldrb	r2, [r7, #14]
 8003776:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800377a:	429a      	cmp	r2, r3
 800377c:	d3ba      	bcc.n	80036f4 <_LCD_DrawChar+0xf4>
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}
 8003786:	bf00      	nop
 8003788:	0800fc18 	.word	0x0800fc18
 800378c:	0801008c 	.word	0x0801008c

08003790 <LCD_DrawString>:
// p is the pointer to the string.
// size is the height of the character (either 12 or 16)
// When mode is set, the background will be transparent.
//===========================================================================
void LCD_DrawString(u16 x,u16 y, u16 fc, u16 bg, const char *p, u8 size, u8 mode)
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af04      	add	r7, sp, #16
 8003796:	4604      	mov	r4, r0
 8003798:	4608      	mov	r0, r1
 800379a:	4611      	mov	r1, r2
 800379c:	461a      	mov	r2, r3
 800379e:	4623      	mov	r3, r4
 80037a0:	80fb      	strh	r3, [r7, #6]
 80037a2:	4603      	mov	r3, r0
 80037a4:	80bb      	strh	r3, [r7, #4]
 80037a6:	460b      	mov	r3, r1
 80037a8:	807b      	strh	r3, [r7, #2]
 80037aa:	4613      	mov	r3, r2
 80037ac:	803b      	strh	r3, [r7, #0]
    lcddev.select(1);
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <LCD_DrawString+0x94>)
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2001      	movs	r0, #1
 80037b4:	4798      	blx	r3
    while((*p<='~')&&(*p>=' '))
 80037b6:	e023      	b.n	8003800 <LCD_DrawString+0x70>
    {
        if(x>(lcddev.width-1)||y>(lcddev.height-1))
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <LCD_DrawString+0x94>)
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	88fa      	ldrh	r2, [r7, #6]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d22b      	bcs.n	800381a <LCD_DrawString+0x8a>
 80037c2:	4b18      	ldr	r3, [pc, #96]	; (8003824 <LCD_DrawString+0x94>)
 80037c4:	885b      	ldrh	r3, [r3, #2]
 80037c6:	88ba      	ldrh	r2, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d226      	bcs.n	800381a <LCD_DrawString+0x8a>
        return;
        _LCD_DrawChar(x,y,fc,bg,*p,size,mode);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	883d      	ldrh	r5, [r7, #0]
 80037d2:	887c      	ldrh	r4, [r7, #2]
 80037d4:	88b9      	ldrh	r1, [r7, #4]
 80037d6:	88f8      	ldrh	r0, [r7, #6]
 80037d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80037dc:	9202      	str	r2, [sp, #8]
 80037de:	7f3a      	ldrb	r2, [r7, #28]
 80037e0:	9201      	str	r2, [sp, #4]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	462b      	mov	r3, r5
 80037e6:	4622      	mov	r2, r4
 80037e8:	f7ff ff0a 	bl	8003600 <_LCD_DrawChar>
        x+=size/2;
 80037ec:	7f3b      	ldrb	r3, [r7, #28]
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	4413      	add	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
        p++;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61bb      	str	r3, [r7, #24]
    while((*p<='~')&&(*p>=' '))
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b7e      	cmp	r3, #126	; 0x7e
 8003806:	d803      	bhi.n	8003810 <LCD_DrawString+0x80>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b1f      	cmp	r3, #31
 800380e:	d8d3      	bhi.n	80037b8 <LCD_DrawString+0x28>
    }
    lcddev.select(0);
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <LCD_DrawString+0x94>)
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	2000      	movs	r0, #0
 8003816:	4798      	blx	r3
 8003818:	e000      	b.n	800381c <LCD_DrawString+0x8c>
        return;
 800381a:	bf00      	nop
}
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bdb0      	pop	{r4, r5, r7, pc}
 8003822:	bf00      	nop
 8003824:	20000270 	.word	0x20000270

08003828 <LCD_print_labels>:
void LCD_small_delay() {
    nano_wait(10000);
    return;
}

void LCD_print_labels() {
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af04      	add	r7, sp, #16
	LCD_DrawString(5, 10, WHITE, BLACK, "Aerial Ace Status Window", 16, 0);
 800382e:	2300      	movs	r3, #0
 8003830:	9302      	str	r3, [sp, #8]
 8003832:	2310      	movs	r3, #16
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <LCD_print_labels+0x7c>)
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2300      	movs	r3, #0
 800383c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003840:	210a      	movs	r1, #10
 8003842:	2005      	movs	r0, #5
 8003844:	f7ff ffa4 	bl	8003790 <LCD_DrawString>
	LCD_DrawFillRectangle(2, 35, 300, 110, currDisp.color);
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <LCD_print_labels+0x80>)
 800384a:	885b      	ldrh	r3, [r3, #2]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	236e      	movs	r3, #110	; 0x6e
 8003850:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003854:	2123      	movs	r1, #35	; 0x23
 8003856:	2002      	movs	r0, #2
 8003858:	f7ff fd60 	bl	800331c <LCD_DrawFillRectangle>
	LCD_DrawString(5, 45, BLACK, currDisp.color, "Current Mode", 16, 0);
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <LCD_print_labels+0x80>)
 800385e:	885b      	ldrh	r3, [r3, #2]
 8003860:	2200      	movs	r2, #0
 8003862:	9202      	str	r2, [sp, #8]
 8003864:	2210      	movs	r2, #16
 8003866:	9201      	str	r2, [sp, #4]
 8003868:	4a10      	ldr	r2, [pc, #64]	; (80038ac <LCD_print_labels+0x84>)
 800386a:	9200      	str	r2, [sp, #0]
 800386c:	2200      	movs	r2, #0
 800386e:	212d      	movs	r1, #45	; 0x2d
 8003870:	2005      	movs	r0, #5
 8003872:	f7ff ff8d 	bl	8003790 <LCD_DrawString>
	LCD_DrawLine(2, 30, 300, 30, WHITE);
 8003876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	231e      	movs	r3, #30
 800387e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003882:	211e      	movs	r1, #30
 8003884:	2002      	movs	r0, #2
 8003886:	f7ff fce1 	bl	800324c <LCD_DrawLine>
	LCD_DrawLine(2, 160, 300, 160, WHITE);
 800388a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	23a0      	movs	r3, #160	; 0xa0
 8003892:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003896:	21a0      	movs	r1, #160	; 0xa0
 8003898:	2002      	movs	r0, #2
 800389a:	f7ff fcd7 	bl	800324c <LCD_DrawLine>
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	0800f9d0 	.word	0x0800f9d0
 80038a8:	20000d00 	.word	0x20000d00
 80038ac:	0800f9ec 	.word	0x0800f9ec

080038b0 <LCD_print_title>:

void LCD_print_title(DispState currDisp) {
 80038b0:	b084      	sub	sp, #16
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af04      	add	r7, sp, #16
 80038b8:	f107 0c08 	add.w	ip, r7, #8
 80038bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_DrawString(50, 70, BLACK, currDisp.color, currDisp.title, 16, 0);
 80038c0:	897a      	ldrh	r2, [r7, #10]
 80038c2:	2300      	movs	r3, #0
 80038c4:	9302      	str	r3, [sp, #8]
 80038c6:	2310      	movs	r3, #16
 80038c8:	9301      	str	r3, [sp, #4]
 80038ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	4613      	mov	r3, r2
 80038d2:	2200      	movs	r2, #0
 80038d4:	2146      	movs	r1, #70	; 0x46
 80038d6:	2032      	movs	r0, #50	; 0x32
 80038d8:	f7ff ff5a 	bl	8003790 <LCD_DrawString>
	return;
 80038dc:	bf00      	nop
}
 80038de:	46bd      	mov	sp, r7
 80038e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038e4:	b004      	add	sp, #16
 80038e6:	4770      	bx	lr

080038e8 <LCD_print_command>:

void LCD_print_command(DispState currDisp) {
 80038e8:	b084      	sub	sp, #16
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af04      	add	r7, sp, #16
 80038f0:	f107 0c10 	add.w	ip, r7, #16
 80038f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	
	LCD_DrawString(0, 120,  WHITE, BLACK, currDisp.command_ln1, 12, 0);
 80038f8:	2300      	movs	r3, #0
 80038fa:	9302      	str	r3, [sp, #8]
 80038fc:	230c      	movs	r3, #12
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	f107 03ba 	add.w	r3, r7, #186	; 0xba
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2300      	movs	r3, #0
 8003908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800390c:	2178      	movs	r1, #120	; 0x78
 800390e:	2000      	movs	r0, #0
 8003910:	f7ff ff3e 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(0, 130,  WHITE, BLACK, currDisp.command_ln2, 12, 0);
 8003914:	2300      	movs	r3, #0
 8003916:	9302      	str	r3, [sp, #8]
 8003918:	230c      	movs	r3, #12
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	f507 73c1 	add.w	r3, r7, #386	; 0x182
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003928:	2182      	movs	r1, #130	; 0x82
 800392a:	2000      	movs	r0, #0
 800392c:	f7ff ff30 	bl	8003790 <LCD_DrawString>
	for(int i = 0; i < 1000; i++);
 8003930:	2300      	movs	r3, #0
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	e002      	b.n	800393c <LCD_print_command+0x54>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3301      	adds	r3, #1
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003942:	dbf8      	blt.n	8003936 <LCD_print_command+0x4e>
	return;
 8003944:	bf00      	nop
}
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800394e:	b004      	add	sp, #16
 8003950:	4770      	bx	lr
	...

08003954 <LCD_print_stats>:

void LCD_print_stats(DispState currDisp) {
 8003954:	b084      	sub	sp, #16
 8003956:	b580      	push	{r7, lr}
 8003958:	b0a4      	sub	sp, #144	; 0x90
 800395a:	af04      	add	r7, sp, #16
 800395c:	f107 0c88 	add.w	ip, r7, #136	; 0x88
 8003960:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char yaw[30];
	char roll[30];
	char pitch[30];
	char throttle[30];

	sprintf(yaw, "%.3f", currDisp.yaw_num);
 8003964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fded 	bl	8000548 <__aeabi_f2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8003976:	4973      	ldr	r1, [pc, #460]	; (8003b44 <LCD_print_stats+0x1f0>)
 8003978:	f007 ff14 	bl	800b7a4 <siprintf>
	sprintf(roll, "%.3f", currDisp.roll_num);
 800397c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fde1 	bl	8000548 <__aeabi_f2d>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800398e:	496d      	ldr	r1, [pc, #436]	; (8003b44 <LCD_print_stats+0x1f0>)
 8003990:	f007 ff08 	bl	800b7a4 <siprintf>
	sprintf(pitch, "%.3f", currDisp.pitch_num);
 8003994:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003998:	4618      	mov	r0, r3
 800399a:	f7fc fdd5 	bl	8000548 <__aeabi_f2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	f107 0020 	add.w	r0, r7, #32
 80039a6:	4967      	ldr	r1, [pc, #412]	; (8003b44 <LCD_print_stats+0x1f0>)
 80039a8:	f007 fefc 	bl	800b7a4 <siprintf>
	sprintf(throttle, "%.3f", currDisp.throttle_num);
 80039ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fdc9 	bl	8000548 <__aeabi_f2d>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4638      	mov	r0, r7
 80039bc:	4961      	ldr	r1, [pc, #388]	; (8003b44 <LCD_print_stats+0x1f0>)
 80039be:	f007 fef1 	bl	800b7a4 <siprintf>

	LCD_DrawLine(90, 165, 90, 330, WHITE);
 80039c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80039cc:	225a      	movs	r2, #90	; 0x5a
 80039ce:	21a5      	movs	r1, #165	; 0xa5
 80039d0:	205a      	movs	r0, #90	; 0x5a
 80039d2:	f7ff fc3b 	bl	800324c <LCD_DrawLine>
	LCD_DrawLine(160, 165, 160, 330, WHITE);
 80039d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 80039e0:	22a0      	movs	r2, #160	; 0xa0
 80039e2:	21a5      	movs	r1, #165	; 0xa5
 80039e4:	20a0      	movs	r0, #160	; 0xa0
 80039e6:	f7ff fc31 	bl	800324c <LCD_DrawLine>

	LCD_DrawString(10, 175, WHITE, BLACK, "PITCH", 16, 0); //90
 80039ea:	2300      	movs	r3, #0
 80039ec:	9302      	str	r3, [sp, #8]
 80039ee:	2310      	movs	r3, #16
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	4b55      	ldr	r3, [pc, #340]	; (8003b48 <LCD_print_stats+0x1f4>)
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2300      	movs	r3, #0
 80039f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039fc:	21af      	movs	r1, #175	; 0xaf
 80039fe:	200a      	movs	r0, #10
 8003a00:	f7ff fec6 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(10, 210, WHITE, BLACK, "ROLL", 16, 0); //150
 8003a04:	2300      	movs	r3, #0
 8003a06:	9302      	str	r3, [sp, #8]
 8003a08:	2310      	movs	r3, #16
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <LCD_print_stats+0x1f8>)
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	2300      	movs	r3, #0
 8003a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a16:	21d2      	movs	r1, #210	; 0xd2
 8003a18:	200a      	movs	r0, #10
 8003a1a:	f7ff feb9 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(10, 245, WHITE, BLACK, "THROTTLE", 16, 0); //200
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	2310      	movs	r3, #16
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	4b4a      	ldr	r3, [pc, #296]	; (8003b50 <LCD_print_stats+0x1fc>)
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a30:	21f5      	movs	r1, #245	; 0xf5
 8003a32:	200a      	movs	r0, #10
 8003a34:	f7ff feac 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(10, 280, WHITE, BLACK, "YAW", 16, 0); //250
 8003a38:	2300      	movs	r3, #0
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	9301      	str	r3, [sp, #4]
 8003a40:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <LCD_print_stats+0x200>)
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	2300      	movs	r3, #0
 8003a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003a4e:	200a      	movs	r0, #10
 8003a50:	f7ff fe9e 	bl	8003790 <LCD_DrawString>

	LCD_DrawString(100, 175, WHITE, BLACK, pitch , 16, 0);
 8003a54:	2300      	movs	r3, #0
 8003a56:	9302      	str	r3, [sp, #8]
 8003a58:	2310      	movs	r3, #16
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	f107 0320 	add.w	r3, r7, #32
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	2300      	movs	r3, #0
 8003a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a68:	21af      	movs	r1, #175	; 0xaf
 8003a6a:	2064      	movs	r0, #100	; 0x64
 8003a6c:	f7ff fe90 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(100, 210, WHITE, BLACK, roll, 16, 0);
 8003a70:	2300      	movs	r3, #0
 8003a72:	9302      	str	r3, [sp, #8]
 8003a74:	2310      	movs	r3, #16
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a84:	21d2      	movs	r1, #210	; 0xd2
 8003a86:	2064      	movs	r0, #100	; 0x64
 8003a88:	f7ff fe82 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(100, 245, WHITE, BLACK, throttle, 16, 0);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9302      	str	r3, [sp, #8]
 8003a90:	2310      	movs	r3, #16
 8003a92:	9301      	str	r3, [sp, #4]
 8003a94:	463b      	mov	r3, r7
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a9e:	21f5      	movs	r1, #245	; 0xf5
 8003aa0:	2064      	movs	r0, #100	; 0x64
 8003aa2:	f7ff fe75 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(100, 280, WHITE, BLACK, yaw , 16, 0);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9302      	str	r3, [sp, #8]
 8003aaa:	2310      	movs	r3, #16
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aba:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003abe:	2064      	movs	r0, #100	; 0x64
 8003ac0:	f7ff fe66 	bl	8003790 <LCD_DrawString>

	LCD_DrawString(170, 175, WHITE, BLACK, currDisp.pitch_mode, 16, 0);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9302      	str	r3, [sp, #8]
 8003ac8:	2310      	movs	r3, #16
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	f107 03e6 	add.w	r3, r7, #230	; 0xe6
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad8:	21af      	movs	r1, #175	; 0xaf
 8003ada:	20aa      	movs	r0, #170	; 0xaa
 8003adc:	f7ff fe58 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(170, 210, WHITE, BLACK, currDisp.roll_mode, 16, 0);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	9302      	str	r3, [sp, #8]
 8003ae4:	2310      	movs	r3, #16
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	f107 03aa 	add.w	r3, r7, #170	; 0xaa
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2300      	movs	r3, #0
 8003af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af4:	21d2      	movs	r1, #210	; 0xd2
 8003af6:	20aa      	movs	r0, #170	; 0xaa
 8003af8:	f7ff fe4a 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(170, 245, WHITE, BLACK, currDisp.throttle_mode, 16, 0);
 8003afc:	2300      	movs	r3, #0
 8003afe:	9302      	str	r3, [sp, #8]
 8003b00:	2310      	movs	r3, #16
 8003b02:	9301      	str	r3, [sp, #4]
 8003b04:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b10:	21f5      	movs	r1, #245	; 0xf5
 8003b12:	20aa      	movs	r0, #170	; 0xaa
 8003b14:	f7ff fe3c 	bl	8003790 <LCD_DrawString>
	LCD_DrawString(170, 280, WHITE, BLACK, currDisp.yaw_mode, 16, 0);
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9302      	str	r3, [sp, #8]
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	2300      	movs	r3, #0
 8003b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b2c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8003b30:	20aa      	movs	r0, #170	; 0xaa
 8003b32:	f7ff fe2d 	bl	8003790 <LCD_DrawString>
	return;
 8003b36:	bf00      	nop
}
 8003b38:	3780      	adds	r7, #128	; 0x80
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b40:	b004      	add	sp, #16
 8003b42:	4770      	bx	lr
 8003b44:	0800f9fc 	.word	0x0800f9fc
 8003b48:	0800fa04 	.word	0x0800fa04
 8003b4c:	0800fa0c 	.word	0x0800fa0c
 8003b50:	0800fa14 	.word	0x0800fa14
 8003b54:	0800fa20 	.word	0x0800fa20

08003b58 <LCD_print_progress>:

void LCD_print_progress(int time_secs, int curTim) {
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5a:	b08b      	sub	sp, #44	; 0x2c
 8003b5c:	af04      	add	r7, sp, #16
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
	char strs[3];
	sprintf(strs, "%d", curTim);
 8003b62:	f107 0314 	add.w	r3, r7, #20
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4933      	ldr	r1, [pc, #204]	; (8003c38 <LCD_print_progress+0xe0>)
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f007 fe1a 	bl	800b7a4 <siprintf>

	if (curTim < time_secs) {
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	da45      	bge.n	8003c04 <LCD_print_progress+0xac>
		LCD_DrawFillTriangle(sectors[curTim][0], sectors[curTim][1], sectors[curTim][2], sectors[curTim][3], sectors[curTim][4], sectors[curTim][5], BLACK);
 8003b78:	4930      	ldr	r1, [pc, #192]	; (8003c3c <LCD_print_progress+0xe4>)
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	440b      	add	r3, r1
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b298      	uxth	r0, r3
 8003b8a:	492c      	ldr	r1, [pc, #176]	; (8003c3c <LCD_print_progress+0xe4>)
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	b29c      	uxth	r4, r3
 8003b9e:	4927      	ldr	r1, [pc, #156]	; (8003c3c <LCD_print_progress+0xe4>)
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	440b      	add	r3, r1
 8003bac:	3308      	adds	r3, #8
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b29d      	uxth	r5, r3
 8003bb2:	4922      	ldr	r1, [pc, #136]	; (8003c3c <LCD_print_progress+0xe4>)
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	330c      	adds	r3, #12
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b29e      	uxth	r6, r3
 8003bc6:	491d      	ldr	r1, [pc, #116]	; (8003c3c <LCD_print_progress+0xe4>)
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3310      	adds	r3, #16
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	b299      	uxth	r1, r3
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <LCD_print_progress+0xe4>)
 8003bdc:	607b      	str	r3, [r7, #4]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4413      	add	r3, r2
 8003bec:	3314      	adds	r3, #20
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	9202      	str	r2, [sp, #8]
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	9100      	str	r1, [sp, #0]
 8003bfa:	4633      	mov	r3, r6
 8003bfc:	462a      	mov	r2, r5
 8003bfe:	4621      	mov	r1, r4
 8003c00:	f7ff fbc8 	bl	8003394 <LCD_DrawFillTriangle>
	}
	LCD_DrawFillRectangle(CAL_CIRCLE_X - 8, CAL_CIRCLE_Y - 8, CAL_CIRCLE_X + 8, CAL_CIRCLE_Y + 8, BLACK);
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	23f8      	movs	r3, #248	; 0xf8
 8003c0a:	2280      	movs	r2, #128	; 0x80
 8003c0c:	21e8      	movs	r1, #232	; 0xe8
 8003c0e:	2070      	movs	r0, #112	; 0x70
 8003c10:	f7ff fb84 	bl	800331c <LCD_DrawFillRectangle>
	LCD_DrawString(CAL_CIRCLE_X - 8, CAL_CIRCLE_Y - 8, WHITE, BLACK, strs, 16, 1);
 8003c14:	2301      	movs	r3, #1
 8003c16:	9302      	str	r3, [sp, #8]
 8003c18:	2310      	movs	r3, #16
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c28:	21e8      	movs	r1, #232	; 0xe8
 8003c2a:	2070      	movs	r0, #112	; 0x70
 8003c2c:	f7ff fdb0 	bl	8003790 <LCD_DrawString>
}
 8003c30:	bf00      	nop
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c38:	0800fa24 	.word	0x0800fa24
 8003c3c:	200008d0 	.word	0x200008d0

08003c40 <LCD_print_circle>:

void LCD_print_circle(int time_secs, int CX, int CY, int radius, u16 color) {
 8003c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c42:	b08d      	sub	sp, #52	; 0x34
 8003c44:	af04      	add	r7, sp, #16
 8003c46:	6178      	str	r0, [r7, #20]
 8003c48:	6139      	str	r1, [r7, #16]
 8003c4a:	60fa      	str	r2, [r7, #12]
 8003c4c:	60bb      	str	r3, [r7, #8]
	LCD_generate_sectors(time_secs, CX, CY, radius);
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	6939      	ldr	r1, [r7, #16]
 8003c54:	6978      	ldr	r0, [r7, #20]
 8003c56:	f000 f857 	bl	8003d08 <LCD_generate_sectors>
	for(int i = 0; i < time_secs; i++) {
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	e048      	b.n	8003cf2 <LCD_print_circle+0xb2>
		LCD_DrawFillTriangle(sectors[i][0], sectors[i][1], sectors[i][2], sectors[i][3], sectors[i][4], sectors[i][5], color);
 8003c60:	4928      	ldr	r1, [pc, #160]	; (8003d04 <LCD_print_circle+0xc4>)
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	4613      	mov	r3, r2
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	4413      	add	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	440b      	add	r3, r1
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	b298      	uxth	r0, r3
 8003c72:	4924      	ldr	r1, [pc, #144]	; (8003d04 <LCD_print_circle+0xc4>)
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	4613      	mov	r3, r2
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4413      	add	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	440b      	add	r3, r1
 8003c80:	3304      	adds	r3, #4
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	b29c      	uxth	r4, r3
 8003c86:	491f      	ldr	r1, [pc, #124]	; (8003d04 <LCD_print_circle+0xc4>)
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4413      	add	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	440b      	add	r3, r1
 8003c94:	3308      	adds	r3, #8
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	b29d      	uxth	r5, r3
 8003c9a:	491a      	ldr	r1, [pc, #104]	; (8003d04 <LCD_print_circle+0xc4>)
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	440b      	add	r3, r1
 8003ca8:	330c      	adds	r3, #12
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b29e      	uxth	r6, r3
 8003cae:	4915      	ldr	r1, [pc, #84]	; (8003d04 <LCD_print_circle+0xc4>)
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	3310      	adds	r3, #16
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b299      	uxth	r1, r3
 8003cc2:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <LCD_print_circle+0xc4>)
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3314      	adds	r3, #20
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003cdc:	9202      	str	r2, [sp, #8]
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	9100      	str	r1, [sp, #0]
 8003ce2:	4633      	mov	r3, r6
 8003ce4:	462a      	mov	r2, r5
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	f7ff fb54 	bl	8003394 <LCD_DrawFillTriangle>
	for(int i = 0; i < time_secs; i++) {
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	69fa      	ldr	r2, [r7, #28]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	dbb2      	blt.n	8003c60 <LCD_print_circle+0x20>
	}
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3724      	adds	r7, #36	; 0x24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d04:	200008d0 	.word	0x200008d0

08003d08 <LCD_generate_sectors>:

void LCD_generate_sectors(int time_secs, int CX, int CY, int radius) {
 8003d08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d0c:	b0a0      	sub	sp, #128	; 0x80
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	603b      	str	r3, [r7, #0]
	int X2;
	int Y0;
	int Y1;
	int Y2;

	int sidesAB = radius;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
	double Cy;
	double Cx;
	int CyR;
	int CxR;

	int startX = CX;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	66bb      	str	r3, [r7, #104]	; 0x68
	int startY = CY - radius;
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	667b      	str	r3, [r7, #100]	; 0x64

	double central_angleD = 360 / time_secs;
 8003d28:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fbf6 	bl	8000524 <__aeabi_i2d>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double other_angleD = (180 - central_angleD) / 2;
 8003d40:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	4963      	ldr	r1, [pc, #396]	; (8003ed8 <LCD_generate_sectors+0x1d0>)
 8003d4a:	f7fc fa9d 	bl	8000288 <__aeabi_dsub>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4610      	mov	r0, r2
 8003d54:	4619      	mov	r1, r3
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d5e:	f7fc fd75 	bl	800084c <__aeabi_ddiv>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	double central_angleR = central_angleD * M_PI / 180;
 8003d6a:	a359      	add	r3, pc, #356	; (adr r3, 8003ed0 <LCD_generate_sectors+0x1c8>)
 8003d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d70:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d74:	f7fc fc40 	bl	80005f8 <__aeabi_dmul>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	4b54      	ldr	r3, [pc, #336]	; (8003ed8 <LCD_generate_sectors+0x1d0>)
 8003d86:	f7fc fd61 	bl	800084c <__aeabi_ddiv>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double other_angleR = other_angleD * M_PI / 180;
 8003d92:	a34f      	add	r3, pc, #316	; (adr r3, 8003ed0 <LCD_generate_sectors+0x1c8>)
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d9c:	f7fc fc2c 	bl	80005f8 <__aeabi_dmul>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <LCD_generate_sectors+0x1d0>)
 8003dae:	f7fc fd4d 	bl	800084c <__aeabi_ddiv>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

	//For progress indicator
	for(int i = 0; i < time_secs; i++) {
 8003dba:	2300      	movs	r3, #0
 8003dbc:	677b      	str	r3, [r7, #116]	; 0x74
 8003dbe:	e078      	b.n	8003eb2 <LCD_generate_sectors+0x1aa>
		if (i == 0) {
 8003dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d12b      	bne.n	8003e1e <LCD_generate_sectors+0x116>
			a[i] = (90 - other_angleD);
 8003dc6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	4943      	ldr	r1, [pc, #268]	; (8003edc <LCD_generate_sectors+0x1d4>)
 8003dd0:	f7fc fa5a 	bl	8000288 <__aeabi_dsub>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4841      	ldr	r0, [pc, #260]	; (8003ee0 <LCD_generate_sectors+0x1d8>)
 8003dda:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003ddc:	00c9      	lsls	r1, r1, #3
 8003dde:	4401      	add	r1, r0
 8003de0:	e9c1 2300 	strd	r2, r3, [r1]
			b[i] = a[i] * M_PI / 180;
 8003de4:	4a3e      	ldr	r2, [pc, #248]	; (8003ee0 <LCD_generate_sectors+0x1d8>)
 8003de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df0:	a337      	add	r3, pc, #220	; (adr r3, 8003ed0 <LCD_generate_sectors+0x1c8>)
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f7fc fbff 	bl	80005f8 <__aeabi_dmul>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <LCD_generate_sectors+0x1d0>)
 8003e08:	f7fc fd20 	bl	800084c <__aeabi_ddiv>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4834      	ldr	r0, [pc, #208]	; (8003ee4 <LCD_generate_sectors+0x1dc>)
 8003e12:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003e14:	00c9      	lsls	r1, r1, #3
 8003e16:	4401      	add	r1, r0
 8003e18:	e9c1 2300 	strd	r2, r3, [r1]
 8003e1c:	e046      	b.n	8003eac <LCD_generate_sectors+0x1a4>
		} else {
			a[i] = (360 - ((180 - a[i - 1]) + 2 * other_angleD));
 8003e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e20:	3b01      	subs	r3, #1
 8003e22:	4a2f      	ldr	r2, [pc, #188]	; (8003ee0 <LCD_generate_sectors+0x1d8>)
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f04f 0000 	mov.w	r0, #0
 8003e30:	4929      	ldr	r1, [pc, #164]	; (8003ed8 <LCD_generate_sectors+0x1d0>)
 8003e32:	f7fc fa29 	bl	8000288 <__aeabi_dsub>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	461d      	mov	r5, r3
 8003e3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	f7fc fa21 	bl	800028c <__adddf3>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4620      	mov	r0, r4
 8003e50:	4629      	mov	r1, r5
 8003e52:	f7fc fa1b 	bl	800028c <__adddf3>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	f04f 0000 	mov.w	r0, #0
 8003e5e:	4922      	ldr	r1, [pc, #136]	; (8003ee8 <LCD_generate_sectors+0x1e0>)
 8003e60:	f7fc fa12 	bl	8000288 <__aeabi_dsub>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	481d      	ldr	r0, [pc, #116]	; (8003ee0 <LCD_generate_sectors+0x1d8>)
 8003e6a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003e6c:	00c9      	lsls	r1, r1, #3
 8003e6e:	4401      	add	r1, r0
 8003e70:	e9c1 2300 	strd	r2, r3, [r1]
			b[i] = a[i] * M_PI / 180;
 8003e74:	4a1a      	ldr	r2, [pc, #104]	; (8003ee0 <LCD_generate_sectors+0x1d8>)
 8003e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e80:	a313      	add	r3, pc, #76	; (adr r3, 8003ed0 <LCD_generate_sectors+0x1c8>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc fbb7 	bl	80005f8 <__aeabi_dmul>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <LCD_generate_sectors+0x1d0>)
 8003e98:	f7fc fcd8 	bl	800084c <__aeabi_ddiv>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4810      	ldr	r0, [pc, #64]	; (8003ee4 <LCD_generate_sectors+0x1dc>)
 8003ea2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003ea4:	00c9      	lsls	r1, r1, #3
 8003ea6:	4401      	add	r1, r0
 8003ea8:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0; i < time_secs; i++) {
 8003eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eae:	3301      	adds	r3, #1
 8003eb0:	677b      	str	r3, [r7, #116]	; 0x74
 8003eb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	db82      	blt.n	8003dc0 <LCD_generate_sectors+0xb8>
		}
	}

	X0 = startX;
 8003eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebc:	67fb      	str	r3, [r7, #124]	; 0x7c
	Y0 = startY;
 8003ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ec0:	67bb      	str	r3, [r7, #120]	; 0x78
	X1 = CX;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
	Y1 = CY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	63bb      	str	r3, [r7, #56]	; 0x38

	for(int i = 0; i < time_secs; i++) {
 8003eca:	2300      	movs	r3, #0
 8003ecc:	673b      	str	r3, [r7, #112]	; 0x70
 8003ece:	e0c9      	b.n	8004064 <LCD_generate_sectors+0x35c>
 8003ed0:	54442d18 	.word	0x54442d18
 8003ed4:	400921fb 	.word	0x400921fb
 8003ed8:	40668000 	.word	0x40668000
 8003edc:	40568000 	.word	0x40568000
 8003ee0:	20000290 	.word	0x20000290
 8003ee4:	200005b0 	.word	0x200005b0
 8003ee8:	40768000 	.word	0x40768000
		sideC = sqrt(2 * (sidesAB * sidesAB) - 2 * (sidesAB * sidesAB) * cos(central_angleR));
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	fb03 f303 	mul.w	r3, r3, r3
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc fb15 	bl	8000524 <__aeabi_i2d>
 8003efa:	4604      	mov	r4, r0
 8003efc:	460d      	mov	r5, r1
 8003efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f00:	fb03 f303 	mul.w	r3, r3, r3
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7fc fb0c 	bl	8000524 <__aeabi_i2d>
 8003f0c:	4680      	mov	r8, r0
 8003f0e:	4689      	mov	r9, r1
 8003f10:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 8003f14:	f009 fec4 	bl	800dca0 <cos>
 8003f18:	ec53 2b10 	vmov	r2, r3, d0
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	4649      	mov	r1, r9
 8003f20:	f7fc fb6a 	bl	80005f8 <__aeabi_dmul>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4620      	mov	r0, r4
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	f7fc f9ac 	bl	8000288 <__aeabi_dsub>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	ec43 2b17 	vmov	d7, r2, r3
 8003f38:	eeb0 0a47 	vmov.f32	s0, s14
 8003f3c:	eef0 0a67 	vmov.f32	s1, s15
 8003f40:	f009 ffd8 	bl	800def4 <sqrt>
 8003f44:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30

		Cy = sin(b[i]) * sideC;
 8003f48:	4a56      	ldr	r2, [pc, #344]	; (80040a4 <LCD_generate_sectors+0x39c>)
 8003f4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	ed93 7b00 	vldr	d7, [r3]
 8003f54:	eeb0 0a47 	vmov.f32	s0, s14
 8003f58:	eef0 0a67 	vmov.f32	s1, s15
 8003f5c:	f009 ff3c 	bl	800ddd8 <sin>
 8003f60:	ec53 2b10 	vmov	r2, r3, d0
 8003f64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f68:	f7fc fb46 	bl	80005f8 <__aeabi_dmul>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		Cx = cos(b[i]) * sideC;
 8003f74:	4a4b      	ldr	r2, [pc, #300]	; (80040a4 <LCD_generate_sectors+0x39c>)
 8003f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	ed93 7b00 	vldr	d7, [r3]
 8003f80:	eeb0 0a47 	vmov.f32	s0, s14
 8003f84:	eef0 0a67 	vmov.f32	s1, s15
 8003f88:	f009 fe8a 	bl	800dca0 <cos>
 8003f8c:	ec53 2b10 	vmov	r2, r3, d0
 8003f90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003f94:	f7fc fb30 	bl	80005f8 <__aeabi_dmul>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	e9c7 2308 	strd	r2, r3, [r7, #32]

		CyR = round(Cy);
 8003fa0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8003fa4:	f009 fed0 	bl	800dd48 <round>
 8003fa8:	ec53 2b10 	vmov	r2, r3, d0
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f7fc fdd2 	bl	8000b58 <__aeabi_d2iz>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	61fb      	str	r3, [r7, #28]
		CxR = round(Cx);
 8003fb8:	ed97 0b08 	vldr	d0, [r7, #32]
 8003fbc:	f009 fec4 	bl	800dd48 <round>
 8003fc0:	ec53 2b10 	vmov	r2, r3, d0
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	f7fc fdc6 	bl	8000b58 <__aeabi_d2iz>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	61bb      	str	r3, [r7, #24]

		X2 = X0 + CxR;
 8003fd0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
		Y2 = Y0 + CyR;
 8003fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

		sectors[i][0] = X0;
 8003fe0:	4931      	ldr	r1, [pc, #196]	; (80040a8 <LCD_generate_sectors+0x3a0>)
 8003fe2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	440b      	add	r3, r1
 8003fee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003ff0:	601a      	str	r2, [r3, #0]
		sectors[i][1] = Y0;
 8003ff2:	492d      	ldr	r1, [pc, #180]	; (80040a8 <LCD_generate_sectors+0x3a0>)
 8003ff4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	440b      	add	r3, r1
 8004000:	3304      	adds	r3, #4
 8004002:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004004:	601a      	str	r2, [r3, #0]
		sectors[i][2] = X1;
 8004006:	4928      	ldr	r1, [pc, #160]	; (80040a8 <LCD_generate_sectors+0x3a0>)
 8004008:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	440b      	add	r3, r1
 8004014:	3308      	adds	r3, #8
 8004016:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004018:	601a      	str	r2, [r3, #0]
		sectors[i][3] = Y1;
 800401a:	4923      	ldr	r1, [pc, #140]	; (80040a8 <LCD_generate_sectors+0x3a0>)
 800401c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	440b      	add	r3, r1
 8004028:	330c      	adds	r3, #12
 800402a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800402c:	601a      	str	r2, [r3, #0]
		sectors[i][4] = X2;
 800402e:	491e      	ldr	r1, [pc, #120]	; (80040a8 <LCD_generate_sectors+0x3a0>)
 8004030:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004032:	4613      	mov	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4413      	add	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	440b      	add	r3, r1
 800403c:	3310      	adds	r3, #16
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	601a      	str	r2, [r3, #0]
		sectors[i][5] = Y2;
 8004042:	4919      	ldr	r1, [pc, #100]	; (80040a8 <LCD_generate_sectors+0x3a0>)
 8004044:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	3314      	adds	r3, #20
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	601a      	str	r2, [r3, #0]
		X0 = X2;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	67fb      	str	r3, [r7, #124]	; 0x7c
		Y0 = Y2;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < time_secs; i++) {
 800405e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004060:	3301      	adds	r3, #1
 8004062:	673b      	str	r3, [r7, #112]	; 0x70
 8004064:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	429a      	cmp	r2, r3
 800406a:	f6ff af3f 	blt.w	8003eec <LCD_generate_sectors+0x1e4>
	}

	sectors[time_secs - 1][5] = startX;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1e5a      	subs	r2, r3, #1
 8004072:	490d      	ldr	r1, [pc, #52]	; (80040a8 <LCD_generate_sectors+0x3a0>)
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	3314      	adds	r3, #20
 8004080:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004082:	601a      	str	r2, [r3, #0]
	sectors[time_secs - 1][5] = startY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	4907      	ldr	r1, [pc, #28]	; (80040a8 <LCD_generate_sectors+0x3a0>)
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	440b      	add	r3, r1
 8004094:	3314      	adds	r3, #20
 8004096:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004098:	601a      	str	r2, [r3, #0]

	return;
 800409a:	bf00      	nop
}
 800409c:	3780      	adds	r7, #128	; 0x80
 800409e:	46bd      	mov	sp, r7
 80040a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040a4:	200005b0 	.word	0x200005b0
 80040a8:	200008d0 	.word	0x200008d0
 80040ac:	00000000 	.word	0x00000000

080040b0 <LCD_update>:

void LCD_update(float roll, float pitch, float throttle, float yaw, int state, int total_time_sec, int cnt_sec) {
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 80040b6:	af8e      	add	r7, sp, #568	; 0x238
 80040b8:	ed87 0a07 	vstr	s0, [r7, #28]
 80040bc:	edc7 0a06 	vstr	s1, [r7, #24]
 80040c0:	ed87 1a05 	vstr	s2, [r7, #20]
 80040c4:	edc7 1a04 	vstr	s3, [r7, #16]
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
	currDisp.state = state;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4ba9      	ldr	r3, [pc, #676]	; (8004378 <LCD_update+0x2c8>)
 80040d4:	701a      	strb	r2, [r3, #0]
	if (currDisp.state == INIT) {
 80040d6:	4ba8      	ldr	r3, [pc, #672]	; (8004378 <LCD_update+0x2c8>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d113      	bne.n	8004106 <LCD_update+0x56>
		strncpy(currDisp.title, "INITIALISING        ", 29);
 80040de:	221d      	movs	r2, #29
 80040e0:	49a6      	ldr	r1, [pc, #664]	; (800437c <LCD_update+0x2cc>)
 80040e2:	48a7      	ldr	r0, [pc, #668]	; (8004380 <LCD_update+0x2d0>)
 80040e4:	f007 fb7e 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln1, " .            ...loading...            ", 199);
 80040e8:	22c7      	movs	r2, #199	; 0xc7
 80040ea:	49a6      	ldr	r1, [pc, #664]	; (8004384 <LCD_update+0x2d4>)
 80040ec:	48a6      	ldr	r0, [pc, #664]	; (8004388 <LCD_update+0x2d8>)
 80040ee:	f007 fb79 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln2, "                                       ", 199);
 80040f2:	22c7      	movs	r2, #199	; 0xc7
 80040f4:	49a5      	ldr	r1, [pc, #660]	; (800438c <LCD_update+0x2dc>)
 80040f6:	48a6      	ldr	r0, [pc, #664]	; (8004390 <LCD_update+0x2e0>)
 80040f8:	f007 fb74 	bl	800b7e4 <strncpy>
		currDisp.color = LGRAY;
 80040fc:	4b9e      	ldr	r3, [pc, #632]	; (8004378 <LCD_update+0x2c8>)
 80040fe:	f24c 6218 	movw	r2, #50712	; 0xc618
 8004102:	805a      	strh	r2, [r3, #2]
 8004104:	e05e      	b.n	80041c4 <LCD_update+0x114>
	} else if(currDisp.state == CAL_UNFLEXED) {
 8004106:	4b9c      	ldr	r3, [pc, #624]	; (8004378 <LCD_update+0x2c8>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d113      	bne.n	8004136 <LCD_update+0x86>
		strncpy(currDisp.title, "CALIBRATION - UNFLEX", 29);
 800410e:	221d      	movs	r2, #29
 8004110:	49a0      	ldr	r1, [pc, #640]	; (8004394 <LCD_update+0x2e4>)
 8004112:	489b      	ldr	r0, [pc, #620]	; (8004380 <LCD_update+0x2d0>)
 8004114:	f007 fb66 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln1, "Please unflex your fingers until finger", 199);
 8004118:	22c7      	movs	r2, #199	; 0xc7
 800411a:	499f      	ldr	r1, [pc, #636]	; (8004398 <LCD_update+0x2e8>)
 800411c:	489a      	ldr	r0, [pc, #616]	; (8004388 <LCD_update+0x2d8>)
 800411e:	f007 fb61 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln2, "angles are 0 degrees.                  ", 199);
 8004122:	22c7      	movs	r2, #199	; 0xc7
 8004124:	499d      	ldr	r1, [pc, #628]	; (800439c <LCD_update+0x2ec>)
 8004126:	489a      	ldr	r0, [pc, #616]	; (8004390 <LCD_update+0x2e0>)
 8004128:	f007 fb5c 	bl	800b7e4 <strncpy>
		currDisp.color = GRED;
 800412c:	4b92      	ldr	r3, [pc, #584]	; (8004378 <LCD_update+0x2c8>)
 800412e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8004132:	805a      	strh	r2, [r3, #2]
 8004134:	e046      	b.n	80041c4 <LCD_update+0x114>
	} else if(currDisp.state == CAL_FLEXED) {
 8004136:	4b90      	ldr	r3, [pc, #576]	; (8004378 <LCD_update+0x2c8>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d113      	bne.n	8004166 <LCD_update+0xb6>
		strncpy(currDisp.title, "CALIBRATION - FLEX  ", 29);
 800413e:	221d      	movs	r2, #29
 8004140:	4997      	ldr	r1, [pc, #604]	; (80043a0 <LCD_update+0x2f0>)
 8004142:	488f      	ldr	r0, [pc, #572]	; (8004380 <LCD_update+0x2d0>)
 8004144:	f007 fb4e 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln1, "Please flex your fingers until finger  ", 199);
 8004148:	22c7      	movs	r2, #199	; 0xc7
 800414a:	4996      	ldr	r1, [pc, #600]	; (80043a4 <LCD_update+0x2f4>)
 800414c:	488e      	ldr	r0, [pc, #568]	; (8004388 <LCD_update+0x2d8>)
 800414e:	f007 fb49 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln2, "angles are 90 degrees.                 ", 199);
 8004152:	22c7      	movs	r2, #199	; 0xc7
 8004154:	4994      	ldr	r1, [pc, #592]	; (80043a8 <LCD_update+0x2f8>)
 8004156:	488e      	ldr	r0, [pc, #568]	; (8004390 <LCD_update+0x2e0>)
 8004158:	f007 fb44 	bl	800b7e4 <strncpy>
		currDisp.color = GBLUE;
 800415c:	4b86      	ldr	r3, [pc, #536]	; (8004378 <LCD_update+0x2c8>)
 800415e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004162:	805a      	strh	r2, [r3, #2]
 8004164:	e02e      	b.n	80041c4 <LCD_update+0x114>
	} else if(currDisp.state == MODE_STANDARD) {
 8004166:	4b84      	ldr	r3, [pc, #528]	; (8004378 <LCD_update+0x2c8>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d113      	bne.n	8004196 <LCD_update+0xe6>
		strncpy(currDisp.title, "STANDARD            ", 29);
 800416e:	221d      	movs	r2, #29
 8004170:	498e      	ldr	r1, [pc, #568]	; (80043ac <LCD_update+0x2fc>)
 8004172:	4883      	ldr	r0, [pc, #524]	; (8004380 <LCD_update+0x2d0>)
 8004174:	f007 fb36 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln1, "Toggle switch for advanced mode!       ", 199);
 8004178:	22c7      	movs	r2, #199	; 0xc7
 800417a:	498d      	ldr	r1, [pc, #564]	; (80043b0 <LCD_update+0x300>)
 800417c:	4882      	ldr	r0, [pc, #520]	; (8004388 <LCD_update+0x2d8>)
 800417e:	f007 fb31 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln2, "                                       ", 199);
 8004182:	22c7      	movs	r2, #199	; 0xc7
 8004184:	4981      	ldr	r1, [pc, #516]	; (800438c <LCD_update+0x2dc>)
 8004186:	4882      	ldr	r0, [pc, #520]	; (8004390 <LCD_update+0x2e0>)
 8004188:	f007 fb2c 	bl	800b7e4 <strncpy>
		currDisp.color = BROWN;
 800418c:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <LCD_update+0x2c8>)
 800418e:	f64b 4240 	movw	r2, #48192	; 0xbc40
 8004192:	805a      	strh	r2, [r3, #2]
 8004194:	e016      	b.n	80041c4 <LCD_update+0x114>
	} else if(currDisp.state == MODE_ADVANCED) {
 8004196:	4b78      	ldr	r3, [pc, #480]	; (8004378 <LCD_update+0x2c8>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d112      	bne.n	80041c4 <LCD_update+0x114>
		strncpy(currDisp.title, "ADVANCED            ", 29);
 800419e:	221d      	movs	r2, #29
 80041a0:	4984      	ldr	r1, [pc, #528]	; (80043b4 <LCD_update+0x304>)
 80041a2:	4877      	ldr	r0, [pc, #476]	; (8004380 <LCD_update+0x2d0>)
 80041a4:	f007 fb1e 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln1, "Toggle switch for standard mode!       ", 199);
 80041a8:	22c7      	movs	r2, #199	; 0xc7
 80041aa:	4983      	ldr	r1, [pc, #524]	; (80043b8 <LCD_update+0x308>)
 80041ac:	4876      	ldr	r0, [pc, #472]	; (8004388 <LCD_update+0x2d8>)
 80041ae:	f007 fb19 	bl	800b7e4 <strncpy>
		strncpy(currDisp.command_ln2, "                                       ", 199);
 80041b2:	22c7      	movs	r2, #199	; 0xc7
 80041b4:	4975      	ldr	r1, [pc, #468]	; (800438c <LCD_update+0x2dc>)
 80041b6:	4876      	ldr	r0, [pc, #472]	; (8004390 <LCD_update+0x2e0>)
 80041b8:	f007 fb14 	bl	800b7e4 <strncpy>
		currDisp.color = CYAN;
 80041bc:	4b6e      	ldr	r3, [pc, #440]	; (8004378 <LCD_update+0x2c8>)
 80041be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80041c2:	805a      	strh	r2, [r3, #2]
	}

	LCD_print_labels(); // @henry: can be done in init?
 80041c4:	f7ff fb30 	bl	8003828 <LCD_print_labels>
	LCD_print_title(currDisp);
 80041c8:	4c6b      	ldr	r4, [pc, #428]	; (8004378 <LCD_update+0x2c8>)
 80041ca:	4668      	mov	r0, sp
 80041cc:	f104 0310 	add.w	r3, r4, #16
 80041d0:	f44f 720d 	mov.w	r2, #564	; 0x234
 80041d4:	4619      	mov	r1, r3
 80041d6:	f006 fe65 	bl	800aea4 <memcpy>
 80041da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80041de:	f7ff fb67 	bl	80038b0 <LCD_print_title>

	if (currDisp.state == CAL_FLEXED || currDisp.state == CAL_UNFLEXED) {
 80041e2:	4b65      	ldr	r3, [pc, #404]	; (8004378 <LCD_update+0x2c8>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d003      	beq.n	80041f2 <LCD_update+0x142>
 80041ea:	4b63      	ldr	r3, [pc, #396]	; (8004378 <LCD_update+0x2c8>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d11f      	bne.n	8004232 <LCD_update+0x182>
		if (cnt_sec == CAL_TIME_SEC) {
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	d117      	bne.n	8004228 <LCD_update+0x178>
			LCD_print_circle(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS, currDisp.color);
 80041f8:	4b5f      	ldr	r3, [pc, #380]	; (8004378 <LCD_update+0x2c8>)
 80041fa:	885b      	ldrh	r3, [r3, #2]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	233c      	movs	r3, #60	; 0x3c
 8004200:	22f0      	movs	r2, #240	; 0xf0
 8004202:	2178      	movs	r1, #120	; 0x78
 8004204:	2005      	movs	r0, #5
 8004206:	f7ff fd1b 	bl	8003c40 <LCD_print_circle>
			LCD_print_circle(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS_INNER, BLACK);
 800420a:	4b6c      	ldr	r3, [pc, #432]	; (80043bc <LCD_update+0x30c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	9200      	str	r2, [sp, #0]
 8004212:	22f0      	movs	r2, #240	; 0xf0
 8004214:	2178      	movs	r1, #120	; 0x78
 8004216:	2005      	movs	r0, #5
 8004218:	f7ff fd12 	bl	8003c40 <LCD_print_circle>
			LCD_generate_sectors(CAL_TIME_SEC, CAL_CIRCLE_X, CAL_CIRCLE_Y, CAL_CIRCLE_RADIUS);
 800421c:	233c      	movs	r3, #60	; 0x3c
 800421e:	22f0      	movs	r2, #240	; 0xf0
 8004220:	2178      	movs	r1, #120	; 0x78
 8004222:	2005      	movs	r0, #5
 8004224:	f7ff fd70 	bl	8003d08 <LCD_generate_sectors>
		}
		LCD_print_progress(CAL_TIME_SEC, cnt_sec);
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	2005      	movs	r0, #5
 800422c:	f7ff fc94 	bl	8003b58 <LCD_print_progress>
 8004230:	e10d      	b.n	800444e <LCD_update+0x39e>

	} else if (currDisp.state == MODE_ADVANCED) {
 8004232:	4b51      	ldr	r3, [pc, #324]	; (8004378 <LCD_update+0x2c8>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b04      	cmp	r3, #4
 8004238:	f040 80fc 	bne.w	8004434 <LCD_update+0x384>
		currDisp.pitch_num = pitch;
 800423c:	4a4e      	ldr	r2, [pc, #312]	; (8004378 <LCD_update+0x2c8>)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
		currDisp.yaw_num = yaw;
 8004244:	4a4c      	ldr	r2, [pc, #304]	; (8004378 <LCD_update+0x2c8>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	67d3      	str	r3, [r2, #124]	; 0x7c
		currDisp.roll_num = roll;
 800424a:	4a4b      	ldr	r2, [pc, #300]	; (8004378 <LCD_update+0x2c8>)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		currDisp.throttle_num = throttle;
 8004252:	4a49      	ldr	r2, [pc, #292]	; (8004378 <LCD_update+0x2c8>)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		if (roll >= 0.5 + GIMBAL_IDLE_THRESH) {
 800425a:	69f8      	ldr	r0, [r7, #28]
 800425c:	f7fc f974 	bl	8000548 <__aeabi_f2d>
 8004260:	a341      	add	r3, pc, #260	; (adr r3, 8004368 <LCD_update+0x2b8>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f7fc fc4d 	bl	8000b04 <__aeabi_dcmpge>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <LCD_update+0x1cc>
			strncpy(currDisp.roll_mode, "RIGHT", 29);
 8004270:	221d      	movs	r2, #29
 8004272:	4953      	ldr	r1, [pc, #332]	; (80043c0 <LCD_update+0x310>)
 8004274:	4853      	ldr	r0, [pc, #332]	; (80043c4 <LCD_update+0x314>)
 8004276:	f007 fab5 	bl	800b7e4 <strncpy>
 800427a:	e015      	b.n	80042a8 <LCD_update+0x1f8>
		} else if (roll <= 0.5 - GIMBAL_IDLE_THRESH) {
 800427c:	69f8      	ldr	r0, [r7, #28]
 800427e:	f7fc f963 	bl	8000548 <__aeabi_f2d>
 8004282:	a33b      	add	r3, pc, #236	; (adr r3, 8004370 <LCD_update+0x2c0>)
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f7fc fc32 	bl	8000af0 <__aeabi_dcmple>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <LCD_update+0x1ee>
			strncpy(currDisp.roll_mode, "LEFT ", 29);
 8004292:	221d      	movs	r2, #29
 8004294:	494c      	ldr	r1, [pc, #304]	; (80043c8 <LCD_update+0x318>)
 8004296:	484b      	ldr	r0, [pc, #300]	; (80043c4 <LCD_update+0x314>)
 8004298:	f007 faa4 	bl	800b7e4 <strncpy>
 800429c:	e004      	b.n	80042a8 <LCD_update+0x1f8>
		} else {
			strncpy(currDisp.roll_mode, "-----", 29);
 800429e:	221d      	movs	r2, #29
 80042a0:	494a      	ldr	r1, [pc, #296]	; (80043cc <LCD_update+0x31c>)
 80042a2:	4848      	ldr	r0, [pc, #288]	; (80043c4 <LCD_update+0x314>)
 80042a4:	f007 fa9e 	bl	800b7e4 <strncpy>
		}

		if (pitch >= 0.5 + GIMBAL_IDLE_THRESH) {
 80042a8:	69b8      	ldr	r0, [r7, #24]
 80042aa:	f7fc f94d 	bl	8000548 <__aeabi_f2d>
 80042ae:	a32e      	add	r3, pc, #184	; (adr r3, 8004368 <LCD_update+0x2b8>)
 80042b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b4:	f7fc fc26 	bl	8000b04 <__aeabi_dcmpge>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <LCD_update+0x21a>
			strncpy(currDisp.pitch_mode, "UP   ", 29);
 80042be:	221d      	movs	r2, #29
 80042c0:	4943      	ldr	r1, [pc, #268]	; (80043d0 <LCD_update+0x320>)
 80042c2:	4844      	ldr	r0, [pc, #272]	; (80043d4 <LCD_update+0x324>)
 80042c4:	f007 fa8e 	bl	800b7e4 <strncpy>
 80042c8:	e015      	b.n	80042f6 <LCD_update+0x246>
		} else if (pitch <= 0.5 - GIMBAL_IDLE_THRESH) {
 80042ca:	69b8      	ldr	r0, [r7, #24]
 80042cc:	f7fc f93c 	bl	8000548 <__aeabi_f2d>
 80042d0:	a327      	add	r3, pc, #156	; (adr r3, 8004370 <LCD_update+0x2c0>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fc fc0b 	bl	8000af0 <__aeabi_dcmple>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <LCD_update+0x23c>
			strncpy(currDisp.pitch_mode, "DOWN ", 29);
 80042e0:	221d      	movs	r2, #29
 80042e2:	493d      	ldr	r1, [pc, #244]	; (80043d8 <LCD_update+0x328>)
 80042e4:	483b      	ldr	r0, [pc, #236]	; (80043d4 <LCD_update+0x324>)
 80042e6:	f007 fa7d 	bl	800b7e4 <strncpy>
 80042ea:	e004      	b.n	80042f6 <LCD_update+0x246>
		} else {
			strncpy(currDisp.pitch_mode, "-----", 29);	
 80042ec:	221d      	movs	r2, #29
 80042ee:	4937      	ldr	r1, [pc, #220]	; (80043cc <LCD_update+0x31c>)
 80042f0:	4838      	ldr	r0, [pc, #224]	; (80043d4 <LCD_update+0x324>)
 80042f2:	f007 fa77 	bl	800b7e4 <strncpy>
		}

		if (yaw >= 0.5 + GIMBAL_IDLE_THRESH) {
 80042f6:	6938      	ldr	r0, [r7, #16]
 80042f8:	f7fc f926 	bl	8000548 <__aeabi_f2d>
 80042fc:	a31a      	add	r3, pc, #104	; (adr r3, 8004368 <LCD_update+0x2b8>)
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f7fc fbff 	bl	8000b04 <__aeabi_dcmpge>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <LCD_update+0x268>
			strncpy(currDisp.yaw_mode, "LEFT", 29);
 800430c:	221d      	movs	r2, #29
 800430e:	4933      	ldr	r1, [pc, #204]	; (80043dc <LCD_update+0x32c>)
 8004310:	4833      	ldr	r0, [pc, #204]	; (80043e0 <LCD_update+0x330>)
 8004312:	f007 fa67 	bl	800b7e4 <strncpy>
 8004316:	e015      	b.n	8004344 <LCD_update+0x294>
		} else if (yaw <= 0.5 - GIMBAL_IDLE_THRESH) {
 8004318:	6938      	ldr	r0, [r7, #16]
 800431a:	f7fc f915 	bl	8000548 <__aeabi_f2d>
 800431e:	a314      	add	r3, pc, #80	; (adr r3, 8004370 <LCD_update+0x2c0>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fc fbe4 	bl	8000af0 <__aeabi_dcmple>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <LCD_update+0x28a>
			strncpy(currDisp.yaw_mode, "RIGHT ", 29);
 800432e:	221d      	movs	r2, #29
 8004330:	492c      	ldr	r1, [pc, #176]	; (80043e4 <LCD_update+0x334>)
 8004332:	482b      	ldr	r0, [pc, #172]	; (80043e0 <LCD_update+0x330>)
 8004334:	f007 fa56 	bl	800b7e4 <strncpy>
 8004338:	e004      	b.n	8004344 <LCD_update+0x294>
		} else {
			strncpy(currDisp.yaw_mode, "-----", 29);
 800433a:	221d      	movs	r2, #29
 800433c:	4923      	ldr	r1, [pc, #140]	; (80043cc <LCD_update+0x31c>)
 800433e:	4828      	ldr	r0, [pc, #160]	; (80043e0 <LCD_update+0x330>)
 8004340:	f007 fa50 	bl	800b7e4 <strncpy>
		}

		if (throttle >= 0.5) {
 8004344:	edd7 7a05 	vldr	s15, [r7, #20]
 8004348:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800434c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	db4a      	blt.n	80043ec <LCD_update+0x33c>
			strncpy(currDisp.throttle_mode, "UP   ", 29);
 8004356:	221d      	movs	r2, #29
 8004358:	491d      	ldr	r1, [pc, #116]	; (80043d0 <LCD_update+0x320>)
 800435a:	4823      	ldr	r0, [pc, #140]	; (80043e8 <LCD_update+0x338>)
 800435c:	f007 fa42 	bl	800b7e4 <strncpy>
 8004360:	e05a      	b.n	8004418 <LCD_update+0x368>
 8004362:	bf00      	nop
 8004364:	f3af 8000 	nop.w
 8004368:	33333333 	.word	0x33333333
 800436c:	3fe33333 	.word	0x3fe33333
 8004370:	9999999a 	.word	0x9999999a
 8004374:	3fd99999 	.word	0x3fd99999
 8004378:	20000d00 	.word	0x20000d00
 800437c:	0800fa28 	.word	0x0800fa28
 8004380:	20000d8c 	.word	0x20000d8c
 8004384:	0800fa40 	.word	0x0800fa40
 8004388:	20000daa 	.word	0x20000daa
 800438c:	0800fa68 	.word	0x0800fa68
 8004390:	20000e72 	.word	0x20000e72
 8004394:	0800fa90 	.word	0x0800fa90
 8004398:	0800faa8 	.word	0x0800faa8
 800439c:	0800fad0 	.word	0x0800fad0
 80043a0:	0800faf8 	.word	0x0800faf8
 80043a4:	0800fb10 	.word	0x0800fb10
 80043a8:	0800fb38 	.word	0x0800fb38
 80043ac:	0800fb60 	.word	0x0800fb60
 80043b0:	0800fb78 	.word	0x0800fb78
 80043b4:	0800fba0 	.word	0x0800fba0
 80043b8:	0800fbb8 	.word	0x0800fbb8
 80043bc:	20000008 	.word	0x20000008
 80043c0:	0800fbe0 	.word	0x0800fbe0
 80043c4:	20000d22 	.word	0x20000d22
 80043c8:	0800fbe8 	.word	0x0800fbe8
 80043cc:	0800fbf0 	.word	0x0800fbf0
 80043d0:	0800fbf8 	.word	0x0800fbf8
 80043d4:	20000d5e 	.word	0x20000d5e
 80043d8:	0800fc00 	.word	0x0800fc00
 80043dc:	0800fc08 	.word	0x0800fc08
 80043e0:	20000d04 	.word	0x20000d04
 80043e4:	0800fc10 	.word	0x0800fc10
 80043e8:	20000d40 	.word	0x20000d40
		} else if (throttle < 0 + GIMBAL_IDLE_THRESH) {
 80043ec:	6978      	ldr	r0, [r7, #20]
 80043ee:	f7fc f8ab 	bl	8000548 <__aeabi_f2d>
 80043f2:	a323      	add	r3, pc, #140	; (adr r3, 8004480 <LCD_update+0x3d0>)
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f7fc fb70 	bl	8000adc <__aeabi_dcmplt>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <LCD_update+0x35e>
			strncpy(currDisp.throttle_mode, "-----", 29);	
 8004402:	221d      	movs	r2, #29
 8004404:	491a      	ldr	r1, [pc, #104]	; (8004470 <LCD_update+0x3c0>)
 8004406:	481b      	ldr	r0, [pc, #108]	; (8004474 <LCD_update+0x3c4>)
 8004408:	f007 f9ec 	bl	800b7e4 <strncpy>
 800440c:	e004      	b.n	8004418 <LCD_update+0x368>
		} else {
			strncpy(currDisp.throttle_mode, "DOWN ", 29);	
 800440e:	221d      	movs	r2, #29
 8004410:	4919      	ldr	r1, [pc, #100]	; (8004478 <LCD_update+0x3c8>)
 8004412:	4818      	ldr	r0, [pc, #96]	; (8004474 <LCD_update+0x3c4>)
 8004414:	f007 f9e6 	bl	800b7e4 <strncpy>
		}

		LCD_print_stats(currDisp);
 8004418:	4c18      	ldr	r4, [pc, #96]	; (800447c <LCD_update+0x3cc>)
 800441a:	4668      	mov	r0, sp
 800441c:	f104 0310 	add.w	r3, r4, #16
 8004420:	f44f 720d 	mov.w	r2, #564	; 0x234
 8004424:	4619      	mov	r1, r3
 8004426:	f006 fd3d 	bl	800aea4 <memcpy>
 800442a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800442e:	f7ff fa91 	bl	8003954 <LCD_print_stats>
 8004432:	e00c      	b.n	800444e <LCD_update+0x39e>
	} else if (currDisp.state == MODE_STANDARD) {
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <LCD_update+0x3cc>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b03      	cmp	r3, #3
 800443a:	d108      	bne.n	800444e <LCD_update+0x39e>
		LCD_DrawFillRectangle(10, 165, 230, 330, BLACK);
 800443c:	2300      	movs	r3, #0
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 8004444:	22e6      	movs	r2, #230	; 0xe6
 8004446:	21a5      	movs	r1, #165	; 0xa5
 8004448:	200a      	movs	r0, #10
 800444a:	f7fe ff67 	bl	800331c <LCD_DrawFillRectangle>
	}

	LCD_print_command(currDisp);
 800444e:	4c0b      	ldr	r4, [pc, #44]	; (800447c <LCD_update+0x3cc>)
 8004450:	4668      	mov	r0, sp
 8004452:	f104 0310 	add.w	r3, r4, #16
 8004456:	f44f 720d 	mov.w	r2, #564	; 0x234
 800445a:	4619      	mov	r1, r3
 800445c:	f006 fd22 	bl	800aea4 <memcpy>
 8004460:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004464:	f7ff fa40 	bl	80038e8 <LCD_print_command>
}
 8004468:	bf00      	nop
 800446a:	3724      	adds	r7, #36	; 0x24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd90      	pop	{r4, r7, pc}
 8004470:	0800fbf0 	.word	0x0800fbf0
 8004474:	20000d40 	.word	0x20000d40
 8004478:	0800fc00 	.word	0x0800fc00
 800447c:	20000d00 	.word	0x20000d00
 8004480:	9999999a 	.word	0x9999999a
 8004484:	3fb99999 	.word	0x3fb99999

08004488 <lsm9ds1_read_reg>:
  *
  */
int32_t __weak lsm9ds1_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	461a      	mov	r2, r3
 8004494:	460b      	mov	r3, r1
 8004496:	72fb      	strb	r3, [r7, #11]
 8004498:	4613      	mov	r3, r2
 800449a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685c      	ldr	r4, [r3, #4]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68d8      	ldr	r0, [r3, #12]
 80044a4:	893b      	ldrh	r3, [r7, #8]
 80044a6:	7af9      	ldrb	r1, [r7, #11]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	47a0      	blx	r4
 80044ac:	6178      	str	r0, [r7, #20]

  return ret;
 80044ae:	697b      	ldr	r3, [r7, #20]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd90      	pop	{r4, r7, pc}

080044b8 <lsm9ds1_write_reg>:
  *
  */
int32_t __weak lsm9ds1_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	461a      	mov	r2, r3
 80044c4:	460b      	mov	r3, r1
 80044c6:	72fb      	strb	r3, [r7, #11]
 80044c8:	4613      	mov	r3, r2
 80044ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681c      	ldr	r4, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68d8      	ldr	r0, [r3, #12]
 80044d4:	893b      	ldrh	r3, [r7, #8]
 80044d6:	7af9      	ldrb	r1, [r7, #11]
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	47a0      	blx	r4
 80044dc:	6178      	str	r0, [r7, #20]

  return ret;
 80044de:	697b      	ldr	r3, [r7, #20]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	371c      	adds	r7, #28
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd90      	pop	{r4, r7, pc}

080044e8 <lsm9ds1_from_fs4g_to_mg>:
{
  return ((float_t)lsb * 0.061f);
}

float_t lsm9ds1_from_fs4g_to_mg(int16_t lsb)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.122f);
 80044f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004514 <lsm9ds1_from_fs4g_to_mg+0x2c>
 8004502:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004506:	eeb0 0a67 	vmov.f32	s0, s15
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	3df9db23 	.word	0x3df9db23

08004518 <lsm9ds1_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 17.50f);
}

float_t lsm9ds1_from_fs2000dps_to_mdps(int16_t lsb)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8004522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800452e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004544 <lsm9ds1_from_fs2000dps_to_mdps+0x2c>
 8004532:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004536:	eeb0 0a67 	vmov.f32	s0, s15
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	428c0000 	.word	0x428c0000

08004548 <lsm9ds1_from_fs16gauss_to_mG>:
{
  return ((float_t)lsb * 0.43f);
}

float_t lsm9ds1_from_fs16gauss_to_mG(int16_t lsb)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.58f);
 8004552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800455e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004574 <lsm9ds1_from_fs16gauss_to_mG+0x2c>
 8004562:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004566:	eeb0 0a67 	vmov.f32	s0, s15
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	3f147ae1 	.word	0x3f147ae1

08004578 <lsm9ds1_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_gy_fs_t val)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8004584:	f107 0208 	add.w	r2, r7, #8
 8004588:	2301      	movs	r3, #1
 800458a:	2110      	movs	r1, #16
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff7b 	bl	8004488 <lsm9ds1_read_reg>
 8004592:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <lsm9ds1_gy_full_scale_set+0x42>
  {
    ctrl_reg1_g.fs_g = (uint8_t)val;
 800459a:	78fb      	ldrb	r3, [r7, #3]
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	7a3b      	ldrb	r3, [r7, #8]
 80045a4:	f362 03c4 	bfi	r3, r2, #3, #2
 80045a8:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80045aa:	f107 0208 	add.w	r2, r7, #8
 80045ae:	2301      	movs	r3, #1
 80045b0:	2110      	movs	r1, #16
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff80 	bl	80044b8 <lsm9ds1_write_reg>
 80045b8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 80045ba:	68fb      	ldr	r3, [r7, #12]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <lsm9ds1_imu_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_imu_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_imu_odr_t val)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80045d0:	f107 0210 	add.w	r2, r7, #16
 80045d4:	2301      	movs	r3, #1
 80045d6:	2110      	movs	r1, #16
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ff55 	bl	8004488 <lsm9ds1_read_reg>
 80045de:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <lsm9ds1_imu_data_rate_set+0x42>
  {
    ctrl_reg1_g.odr_g = (uint8_t)val & 0x07U;
 80045e6:	78fb      	ldrb	r3, [r7, #3]
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	7c3b      	ldrb	r3, [r7, #16]
 80045f0:	f362 1347 	bfi	r3, r2, #5, #3
 80045f4:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 80045f6:	f107 0210 	add.w	r2, r7, #16
 80045fa:	2301      	movs	r3, #1
 80045fc:	2110      	movs	r1, #16
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ff5a 	bl	80044b8 <lsm9ds1_write_reg>
 8004604:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  if (ret == 0)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d107      	bne.n	800461c <lsm9ds1_imu_data_rate_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800460c:	f107 020c 	add.w	r2, r7, #12
 8004610:	2301      	movs	r3, #1
 8004612:	2120      	movs	r1, #32
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff37 	bl	8004488 <lsm9ds1_read_reg>
 800461a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d110      	bne.n	8004644 <lsm9ds1_imu_data_rate_set+0x80>
  {
    ctrl_reg6_xl.odr_xl = (((uint8_t)val & 0x70U) >> 4);
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	b2da      	uxtb	r2, r3
 800462c:	7b3b      	ldrb	r3, [r7, #12]
 800462e:	f362 1347 	bfi	r3, r2, #5, #3
 8004632:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8004634:	f107 020c 	add.w	r2, r7, #12
 8004638:	2301      	movs	r3, #1
 800463a:	2120      	movs	r1, #32
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff3b 	bl	80044b8 <lsm9ds1_write_reg>
 8004642:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  if (ret == 0)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <lsm9ds1_imu_data_rate_set+0x96>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 800464a:	f107 0208 	add.w	r2, r7, #8
 800464e:	2301      	movs	r3, #1
 8004650:	2112      	movs	r1, #18
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff ff18 	bl	8004488 <lsm9ds1_read_reg>
 8004658:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d111      	bne.n	8004684 <lsm9ds1_imu_data_rate_set+0xc0>
  {
    ctrl_reg3_g.lp_mode = (((uint8_t)val & 0x80U) >> 7);
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	09db      	lsrs	r3, r3, #7
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	b2da      	uxtb	r2, r3
 800466c:	7a3b      	ldrb	r3, [r7, #8]
 800466e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004672:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004674:	f107 0208 	add.w	r2, r7, #8
 8004678:	2301      	movs	r3, #1
 800467a:	2112      	movs	r1, #18
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff ff1b 	bl	80044b8 <lsm9ds1_write_reg>
 8004682:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8004684:	697b      	ldr	r3, [r7, #20]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <lsm9ds1_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_xl_fs_t val)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	460b      	mov	r3, r1
 8004698:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 800469a:	f107 0208 	add.w	r2, r7, #8
 800469e:	2301      	movs	r3, #1
 80046a0:	2120      	movs	r1, #32
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fef0 	bl	8004488 <lsm9ds1_read_reg>
 80046a8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10f      	bne.n	80046d0 <lsm9ds1_xl_full_scale_set+0x42>
  {
    ctrl_reg6_xl.fs_xl = (uint8_t)val;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	7a3b      	ldrb	r3, [r7, #8]
 80046ba:	f362 03c4 	bfi	r3, r2, #3, #2
 80046be:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 80046c0:	f107 0208 	add.w	r2, r7, #8
 80046c4:	2301      	movs	r3, #1
 80046c6:	2120      	movs	r1, #32
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff fef5 	bl	80044b8 <lsm9ds1_write_reg>
 80046ce:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 80046d0:	68fb      	ldr	r3, [r7, #12]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <lsm9ds1_block_data_update_set>:
  * @retval           Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_block_data_update_set(stmdev_ctx_t *ctx_mag,
                                      stmdev_ctx_t *ctx_imu, uint8_t val)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b088      	sub	sp, #32
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	4613      	mov	r3, r2
 80046e6:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  lsm9ds1_ctrl_reg5_m_t ctrl_reg5_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 80046e8:	f107 0218 	add.w	r2, r7, #24
 80046ec:	2301      	movs	r3, #1
 80046ee:	2122      	movs	r1, #34	; 0x22
 80046f0:	68b8      	ldr	r0, [r7, #8]
 80046f2:	f7ff fec9 	bl	8004488 <lsm9ds1_read_reg>
 80046f6:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10f      	bne.n	800471e <lsm9ds1_block_data_update_set+0x44>
  {
    ctrl_reg8.bdu = (uint8_t)val;
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	b2da      	uxtb	r2, r3
 8004706:	7e3b      	ldrb	r3, [r7, #24]
 8004708:	f362 1386 	bfi	r3, r2, #6, #1
 800470c:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 800470e:	f107 0218 	add.w	r2, r7, #24
 8004712:	2301      	movs	r3, #1
 8004714:	2122      	movs	r1, #34	; 0x22
 8004716:	68b8      	ldr	r0, [r7, #8]
 8004718:	f7ff fece 	bl	80044b8 <lsm9ds1_write_reg>
 800471c:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <lsm9ds1_block_data_update_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 8004724:	f107 0214 	add.w	r2, r7, #20
 8004728:	2301      	movs	r3, #1
 800472a:	2124      	movs	r1, #36	; 0x24
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff feab 	bl	8004488 <lsm9ds1_read_reg>
 8004732:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg5_m, 1);
  }

  if (ret == 0)
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d119      	bne.n	800476e <lsm9ds1_block_data_update_set+0x94>
  {
    ctrl_reg5_m.fast_read = (uint8_t)(~val);
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	43db      	mvns	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	b2da      	uxtb	r2, r3
 8004746:	7d3b      	ldrb	r3, [r7, #20]
 8004748:	f362 13c7 	bfi	r3, r2, #7, #1
 800474c:	753b      	strb	r3, [r7, #20]
    ctrl_reg5_m.bdu = (uint8_t)val;
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	b2da      	uxtb	r2, r3
 8004756:	7d3b      	ldrb	r3, [r7, #20]
 8004758:	f362 1386 	bfi	r3, r2, #6, #1
 800475c:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG5_M,
 800475e:	f107 0214 	add.w	r2, r7, #20
 8004762:	2301      	movs	r3, #1
 8004764:	2124      	movs	r1, #36	; 0x24
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fea6 	bl	80044b8 <lsm9ds1_write_reg>
 800476c:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg5_m, 1);
  }

  return ret;
 800476e:	69fb      	ldr	r3, [r7, #28]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3720      	adds	r7, #32
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <lsm9ds1_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_data_rate_set(stmdev_ctx_t *ctx,
                                  lsm9ds1_mag_data_rate_t val)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_m_t ctrl_reg1_m;
  lsm9ds1_ctrl_reg3_m_t ctrl_reg3_m;
  lsm9ds1_ctrl_reg4_m_t ctrl_reg4_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_M,
 8004784:	f107 0210 	add.w	r2, r7, #16
 8004788:	2301      	movs	r3, #1
 800478a:	2120      	movs	r1, #32
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff fe7b 	bl	8004488 <lsm9ds1_read_reg>
 8004792:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg1_m, 1);

  if (ret == 0)
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d125      	bne.n	80047e6 <lsm9ds1_mag_data_rate_set+0x6e>
  {
    ctrl_reg1_m.fast_odr = (((uint8_t)val & 0x08U) >> 3);
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	7c3b      	ldrb	r3, [r7, #16]
 80047a6:	f362 0341 	bfi	r3, r2, #1, #1
 80047aa:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m._do = ((uint8_t)val & 0x07U);
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	7c3b      	ldrb	r3, [r7, #16]
 80047b6:	f362 0384 	bfi	r3, r2, #2, #3
 80047ba:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.om = (((uint8_t)val & 0x30U) >> 4);
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	7c3b      	ldrb	r3, [r7, #16]
 80047c8:	f362 1346 	bfi	r3, r2, #5, #2
 80047cc:	743b      	strb	r3, [r7, #16]
    ctrl_reg1_m.temp_comp = PROPERTY_ENABLE;
 80047ce:	7c3b      	ldrb	r3, [r7, #16]
 80047d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d4:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_M,
 80047d6:	f107 0210 	add.w	r2, r7, #16
 80047da:	2301      	movs	r3, #1
 80047dc:	2120      	movs	r1, #32
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff fe6a 	bl	80044b8 <lsm9ds1_write_reg>
 80047e4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg1_m, 1);
  }

  if (ret == 0)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d107      	bne.n	80047fc <lsm9ds1_mag_data_rate_set+0x84>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_M,
 80047ec:	f107 020c 	add.w	r2, r7, #12
 80047f0:	2301      	movs	r3, #1
 80047f2:	2122      	movs	r1, #34	; 0x22
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff fe47 	bl	8004488 <lsm9ds1_read_reg>
 80047fa:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d111      	bne.n	8004826 <lsm9ds1_mag_data_rate_set+0xae>
  {
    ctrl_reg3_m.md = (((uint8_t)val & 0xC0U) >> 6);
 8004802:	78fb      	ldrb	r3, [r7, #3]
 8004804:	099b      	lsrs	r3, r3, #6
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	b2da      	uxtb	r2, r3
 800480e:	7b3b      	ldrb	r3, [r7, #12]
 8004810:	f362 0301 	bfi	r3, r2, #0, #2
 8004814:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_M,
 8004816:	f107 020c 	add.w	r2, r7, #12
 800481a:	2301      	movs	r3, #1
 800481c:	2122      	movs	r1, #34	; 0x22
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff fe4a 	bl	80044b8 <lsm9ds1_write_reg>
 8004824:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_m, 1);
  }

  if (ret == 0)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d107      	bne.n	800483c <lsm9ds1_mag_data_rate_set+0xc4>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG4_M,
 800482c:	f107 0208 	add.w	r2, r7, #8
 8004830:	2301      	movs	r3, #1
 8004832:	2123      	movs	r1, #35	; 0x23
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff fe27 	bl	8004488 <lsm9ds1_read_reg>
 800483a:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg4_m, 1);
  }

  if (ret == 0)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d110      	bne.n	8004864 <lsm9ds1_mag_data_rate_set+0xec>
  {
    ctrl_reg4_m.omz = (((uint8_t)val & 0x30U) >> 4);;
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	b2da      	uxtb	r2, r3
 800484c:	7a3b      	ldrb	r3, [r7, #8]
 800484e:	f362 0383 	bfi	r3, r2, #2, #2
 8004852:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG4_M,
 8004854:	f107 0208 	add.w	r2, r7, #8
 8004858:	2301      	movs	r3, #1
 800485a:	2123      	movs	r1, #35	; 0x23
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f7ff fe2b 	bl	80044b8 <lsm9ds1_write_reg>
 8004862:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4_m, 1);
  }

  return ret;
 8004864:	697b      	ldr	r3, [r7, #20]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <lsm9ds1_mag_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_mag_full_scale_set(stmdev_ctx_t *ctx,
                                   lsm9ds1_mag_fs_t val)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_M,
 800487a:	f107 0208 	add.w	r2, r7, #8
 800487e:	2301      	movs	r3, #1
 8004880:	2121      	movs	r1, #33	; 0x21
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fe00 	bl	8004488 <lsm9ds1_read_reg>
 8004888:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg2_m, 1);

  if (ret == 0)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10f      	bne.n	80048b0 <lsm9ds1_mag_full_scale_set+0x42>
  {
    ctrl_reg2_m.fs = (uint8_t)val;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	b2da      	uxtb	r2, r3
 8004898:	7a3b      	ldrb	r3, [r7, #8]
 800489a:	f362 1346 	bfi	r3, r2, #5, #2
 800489e:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_M,
 80048a0:	f107 0208 	add.w	r2, r7, #8
 80048a4:	2301      	movs	r3, #1
 80048a6:	2121      	movs	r1, #33	; 0x21
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fe05 	bl	80044b8 <lsm9ds1_write_reg>
 80048ae:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <lsm9ds1_angular_rate_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b086      	sub	sp, #24
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_G, buff, 6);
 80048c4:	f107 020c 	add.w	r2, r7, #12
 80048c8:	2306      	movs	r3, #6
 80048ca:	2118      	movs	r1, #24
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff fddb 	bl	8004488 <lsm9ds1_read_reg>
 80048d2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80048d4:	7b7b      	ldrb	r3, [r7, #13]
 80048d6:	b21a      	sxth	r2, r3
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	7b3b      	ldrb	r3, [r7, #12]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	4413      	add	r3, r2
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	b21a      	sxth	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80048f6:	7bfa      	ldrb	r2, [r7, #15]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	3302      	adds	r3, #2
 80048fc:	b212      	sxth	r2, r2
 80048fe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	3302      	adds	r3, #2
 8004904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004908:	b29b      	uxth	r3, r3
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	b29a      	uxth	r2, r3
 800490e:	7bbb      	ldrb	r3, [r7, #14]
 8004910:	b29b      	uxth	r3, r3
 8004912:	4413      	add	r3, r2
 8004914:	b29a      	uxth	r2, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	3302      	adds	r3, #2
 800491a:	b212      	sxth	r2, r2
 800491c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800491e:	7c7a      	ldrb	r2, [r7, #17]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	3304      	adds	r3, #4
 8004924:	b212      	sxth	r2, r2
 8004926:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	3304      	adds	r3, #4
 800492c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004930:	b29b      	uxth	r3, r3
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	b29a      	uxth	r2, r3
 8004936:	7c3b      	ldrb	r3, [r7, #16]
 8004938:	b29b      	uxth	r3, r3
 800493a:	4413      	add	r3, r2
 800493c:	b29a      	uxth	r2, r3
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	3304      	adds	r3, #4
 8004942:	b212      	sxth	r2, r2
 8004944:	801a      	strh	r2, [r3, #0]

  return ret;
 8004946:	697b      	ldr	r3, [r7, #20]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <lsm9ds1_acceleration_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_XL, buff, 6);
 800495a:	f107 020c 	add.w	r2, r7, #12
 800495e:	2306      	movs	r3, #6
 8004960:	2128      	movs	r1, #40	; 0x28
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fd90 	bl	8004488 <lsm9ds1_read_reg>
 8004968:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800496a:	7b7b      	ldrb	r3, [r7, #13]
 800496c:	b21a      	sxth	r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004978:	b29b      	uxth	r3, r3
 800497a:	021b      	lsls	r3, r3, #8
 800497c:	b29a      	uxth	r2, r3
 800497e:	7b3b      	ldrb	r3, [r7, #12]
 8004980:	b29b      	uxth	r3, r3
 8004982:	4413      	add	r3, r2
 8004984:	b29b      	uxth	r3, r3
 8004986:	b21a      	sxth	r2, r3
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800498c:	7bfa      	ldrb	r2, [r7, #15]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	3302      	adds	r3, #2
 8004992:	b212      	sxth	r2, r2
 8004994:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	3302      	adds	r3, #2
 800499a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	3302      	adds	r3, #2
 80049b0:	b212      	sxth	r2, r2
 80049b2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80049b4:	7c7a      	ldrb	r2, [r7, #17]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	3304      	adds	r3, #4
 80049ba:	b212      	sxth	r2, r2
 80049bc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	3304      	adds	r3, #4
 80049c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	7c3b      	ldrb	r3, [r7, #16]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	4413      	add	r3, r2
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	3304      	adds	r3, #4
 80049d8:	b212      	sxth	r2, r2
 80049da:	801a      	strh	r2, [r3, #0]

  return ret;
 80049dc:	697b      	ldr	r3, [r7, #20]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <lsm9ds1_magnetic_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_OUT_X_L_M, buff, 6);
 80049f0:	f107 020c 	add.w	r2, r7, #12
 80049f4:	2306      	movs	r3, #6
 80049f6:	2128      	movs	r1, #40	; 0x28
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fd45 	bl	8004488 <lsm9ds1_read_reg>
 80049fe:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004a00:	7b7b      	ldrb	r3, [r7, #13]
 8004a02:	b21a      	sxth	r2, r3
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	7b3b      	ldrb	r3, [r7, #12]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4413      	add	r3, r2
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	b21a      	sxth	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	3302      	adds	r3, #2
 8004a28:	b212      	sxth	r2, r2
 8004a2a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	3302      	adds	r3, #2
 8004a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	7bbb      	ldrb	r3, [r7, #14]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4413      	add	r3, r2
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	3302      	adds	r3, #2
 8004a46:	b212      	sxth	r2, r2
 8004a48:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004a4a:	7c7a      	ldrb	r2, [r7, #17]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	b212      	sxth	r2, r2
 8004a52:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	3304      	adds	r3, #4
 8004a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	7c3b      	ldrb	r3, [r7, #16]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	b212      	sxth	r2, r2
 8004a70:	801a      	strh	r2, [r3, #0]

  return ret;
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <lsm9ds1_dev_id_get>:
  *
  */
int32_t lsm9ds1_dev_id_get(stmdev_ctx_t *ctx_mag,
                           stmdev_ctx_t *ctx_imu,
                           lsm9ds1_id_t *buff)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_WHO_AM_I,
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	210f      	movs	r1, #15
 8004a8e:	68b8      	ldr	r0, [r7, #8]
 8004a90:	f7ff fcfa 	bl	8004488 <lsm9ds1_read_reg>
 8004a94:	6178      	str	r0, [r7, #20]
                         (uint8_t *) & (buff->imu), 1);

  if (ret == 0)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <lsm9ds1_dev_id_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_WHO_AM_I_M,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	210f      	movs	r1, #15
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f7ff fcef 	bl	8004488 <lsm9ds1_read_reg>
 8004aaa:	6178      	str	r0, [r7, #20]
                           (uint8_t *) & (buff->mag), 1);
  }

  return ret;
 8004aac:	697b      	ldr	r3, [r7, #20]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <lsm9ds1_dev_status_get>:
  *
  */
int32_t lsm9ds1_dev_status_get(stmdev_ctx_t *ctx_mag,
                               stmdev_ctx_t *ctx_imu,
                               lsm9ds1_status_t *val)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	607a      	str	r2, [r7, #4]
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
                         (uint8_t *) & (val->status_imu), 1);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	1c5a      	adds	r2, r3, #1
  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_STATUS_REG,
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	2117      	movs	r1, #23
 8004aca:	68b8      	ldr	r0, [r7, #8]
 8004acc:	f7ff fcdc 	bl	8004488 <lsm9ds1_read_reg>
 8004ad0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <lsm9ds1_dev_status_get+0x30>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
                           (uint8_t *) & (val->status_mag), 1);
 8004ad8:	687a      	ldr	r2, [r7, #4]
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_STATUS_REG_M,
 8004ada:	2301      	movs	r3, #1
 8004adc:	2127      	movs	r1, #39	; 0x27
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f7ff fcd2 	bl	8004488 <lsm9ds1_read_reg>
 8004ae4:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004ae6:	697b      	ldr	r3, [r7, #20]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <lsm9ds1_dev_reset_set>:
  *
  */
int32_t lsm9ds1_dev_reset_set(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t val)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	71fb      	strb	r3, [r7, #7]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8004afe:	f107 0214 	add.w	r2, r7, #20
 8004b02:	2301      	movs	r3, #1
 8004b04:	2122      	movs	r1, #34	; 0x22
 8004b06:	68b8      	ldr	r0, [r7, #8]
 8004b08:	f7ff fcbe 	bl	8004488 <lsm9ds1_read_reg>
 8004b0c:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10f      	bne.n	8004b34 <lsm9ds1_dev_reset_set+0x44>
  {
    ctrl_reg8.sw_reset = (uint8_t)val;
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	7d3b      	ldrb	r3, [r7, #20]
 8004b1e:	f362 0300 	bfi	r3, r2, #0, #1
 8004b22:	753b      	strb	r3, [r7, #20]
    ret = lsm9ds1_write_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8004b24:	f107 0214 	add.w	r2, r7, #20
 8004b28:	2301      	movs	r3, #1
 8004b2a:	2122      	movs	r1, #34	; 0x22
 8004b2c:	68b8      	ldr	r0, [r7, #8]
 8004b2e:	f7ff fcc3 	bl	80044b8 <lsm9ds1_write_reg>
 8004b32:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg8, 1);
  }

  if (ret == 0)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d107      	bne.n	8004b4a <lsm9ds1_dev_reset_set+0x5a>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8004b3a:	f107 0218 	add.w	r2, r7, #24
 8004b3e:	2301      	movs	r3, #1
 8004b40:	2121      	movs	r1, #33	; 0x21
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff fca0 	bl	8004488 <lsm9ds1_read_reg>
 8004b48:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
  }

  if (ret == 0)
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10f      	bne.n	8004b70 <lsm9ds1_dev_reset_set+0x80>
  {
    ctrl_reg2_m.soft_rst = (uint8_t)val;
 8004b50:	79fb      	ldrb	r3, [r7, #7]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	7e3b      	ldrb	r3, [r7, #24]
 8004b5a:	f362 0382 	bfi	r3, r2, #2, #1
 8004b5e:	763b      	strb	r3, [r7, #24]
    ret = lsm9ds1_write_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8004b60:	f107 0218 	add.w	r2, r7, #24
 8004b64:	2301      	movs	r3, #1
 8004b66:	2121      	movs	r1, #33	; 0x21
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff fca5 	bl	80044b8 <lsm9ds1_write_reg>
 8004b6e:	61f8      	str	r0, [r7, #28]
                            (uint8_t *)&ctrl_reg2_m, 1);
  }

  return ret;
 8004b70:	69fb      	ldr	r3, [r7, #28]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <lsm9ds1_dev_reset_get>:
  *
  */
int32_t lsm9ds1_dev_reset_get(stmdev_ctx_t *ctx_mag,
                              stmdev_ctx_t *ctx_imu,
                              uint8_t *val)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b088      	sub	sp, #32
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
  lsm9ds1_ctrl_reg2_m_t ctrl_reg2_m;
  lsm9ds1_ctrl_reg8_t ctrl_reg8;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx_imu, LSM9DS1_CTRL_REG8,
 8004b86:	f107 0214 	add.w	r2, r7, #20
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	2122      	movs	r1, #34	; 0x22
 8004b8e:	68b8      	ldr	r0, [r7, #8]
 8004b90:	f7ff fc7a 	bl	8004488 <lsm9ds1_read_reg>
 8004b94:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg8, 1);

  if (ret == 0)
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d114      	bne.n	8004bc6 <lsm9ds1_dev_reset_get+0x4c>
  {
    ret = lsm9ds1_read_reg(ctx_mag, LSM9DS1_CTRL_REG2_M,
 8004b9c:	f107 0218 	add.w	r2, r7, #24
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	2121      	movs	r1, #33	; 0x21
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fc6f 	bl	8004488 <lsm9ds1_read_reg>
 8004baa:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&ctrl_reg2_m, 1);
    *val = (uint8_t)(ctrl_reg2_m.soft_rst | ctrl_reg8.sw_reset);
 8004bac:	7e3b      	ldrb	r3, [r7, #24]
 8004bae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	7d3b      	ldrb	r3, [r7, #20]
 8004bb6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <lsm9ds1_gy_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_lp_bw_t val)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg1_g_t ctrl_reg1_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8004bdc:	f107 0208 	add.w	r2, r7, #8
 8004be0:	2301      	movs	r3, #1
 8004be2:	2110      	movs	r1, #16
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7ff fc4f 	bl	8004488 <lsm9ds1_read_reg>
 8004bea:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg1_g, 1);

  if (ret == 0)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10f      	bne.n	8004c12 <lsm9ds1_gy_filter_lp_bandwidth_set+0x42>
  {
    ctrl_reg1_g.bw_g = (uint8_t)val;
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	7a3b      	ldrb	r3, [r7, #8]
 8004bfc:	f362 0301 	bfi	r3, r2, #0, #2
 8004c00:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG1_G,
 8004c02:	f107 0208 	add.w	r2, r7, #8
 8004c06:	2301      	movs	r3, #1
 8004c08:	2110      	movs	r1, #16
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7ff fc54 	bl	80044b8 <lsm9ds1_write_reg>
 8004c10:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1_g, 1);
  }

  return ret;
 8004c12:	68fb      	ldr	r3, [r7, #12]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <lsm9ds1_gy_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_gy_out_path_t val)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg2_g_t ctrl_reg2_g;
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8004c28:	f107 0210 	add.w	r2, r7, #16
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	2111      	movs	r1, #17
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fc29 	bl	8004488 <lsm9ds1_read_reg>
 8004c36:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&ctrl_reg2_g, 1);

  if (ret == 0)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <lsm9ds1_gy_filter_out_path_set+0x42>
  {
    ctrl_reg2_g.out_sel = ((uint8_t)val & 0x03U);
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 0303 	and.w	r3, r3, #3
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	7c3b      	ldrb	r3, [r7, #16]
 8004c48:	f362 0301 	bfi	r3, r2, #0, #2
 8004c4c:	743b      	strb	r3, [r7, #16]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG2_G,
 8004c4e:	f107 0210 	add.w	r2, r7, #16
 8004c52:	2301      	movs	r3, #1
 8004c54:	2111      	movs	r1, #17
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fc2e 	bl	80044b8 <lsm9ds1_write_reg>
 8004c5c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg2_g, 1);
  }

  if (ret == 0)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <lsm9ds1_gy_filter_out_path_set+0x58>
  {
    ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004c64:	f107 020c 	add.w	r2, r7, #12
 8004c68:	2301      	movs	r3, #1
 8004c6a:	2112      	movs	r1, #18
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff fc0b 	bl	8004488 <lsm9ds1_read_reg>
 8004c72:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg3_g, 1);
  }

  if (ret == 0)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d110      	bne.n	8004c9c <lsm9ds1_gy_filter_out_path_set+0x80>
  {
    ctrl_reg3_g.hp_en = (((uint8_t)val & 0x10U) >> 4);
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	7b3b      	ldrb	r3, [r7, #12]
 8004c86:	f362 1386 	bfi	r3, r2, #6, #1
 8004c8a:	733b      	strb	r3, [r7, #12]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004c8c:	f107 020c 	add.w	r2, r7, #12
 8004c90:	2301      	movs	r3, #1
 8004c92:	2112      	movs	r1, #18
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fc0f 	bl	80044b8 <lsm9ds1_write_reg>
 8004c9a:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8004c9c:	697b      	ldr	r3, [r7, #20]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <lsm9ds1_gy_filter_hp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_gy_filter_hp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_gy_hp_bw_t val)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg3_g_t ctrl_reg3_g;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004cb2:	f107 0208 	add.w	r2, r7, #8
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	2112      	movs	r1, #18
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fbe4 	bl	8004488 <lsm9ds1_read_reg>
 8004cc0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg3_g, 1);

  if (ret == 0)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10f      	bne.n	8004ce8 <lsm9ds1_gy_filter_hp_bandwidth_set+0x42>
  {
    ctrl_reg3_g.hpcf_g = (uint8_t)val;
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	7a3b      	ldrb	r3, [r7, #8]
 8004cd2:	f362 0303 	bfi	r3, r2, #0, #4
 8004cd6:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG3_G,
 8004cd8:	f107 0208 	add.w	r2, r7, #8
 8004cdc:	2301      	movs	r3, #1
 8004cde:	2112      	movs	r1, #18
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fbe9 	bl	80044b8 <lsm9ds1_write_reg>
 8004ce6:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg3_g, 1);
  }

  return ret;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <lsm9ds1_xl_filter_aalias_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_aalias_bandwidth_set(stmdev_ctx_t *ctx,
                                               lsm9ds1_xl_aa_bw_t val)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg6_xl_t ctrl_reg6_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8004cfe:	f107 0208 	add.w	r2, r7, #8
 8004d02:	2301      	movs	r3, #1
 8004d04:	2120      	movs	r1, #32
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fbbe 	bl	8004488 <lsm9ds1_read_reg>
 8004d0c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg6_xl, 1);

  if (ret == 0)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d118      	bne.n	8004d46 <lsm9ds1_xl_filter_aalias_bandwidth_set+0x54>
  {
    ctrl_reg6_xl.bw_xl = ((uint8_t)val & 0x03U);
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	7a3b      	ldrb	r3, [r7, #8]
 8004d1e:	f362 0301 	bfi	r3, r2, #0, #2
 8004d22:	723b      	strb	r3, [r7, #8]
    ctrl_reg6_xl.bw_scal_odr = (((uint8_t)val & 0x10U) >> 4);
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	091b      	lsrs	r3, r3, #4
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	7a3b      	ldrb	r3, [r7, #8]
 8004d30:	f362 0382 	bfi	r3, r2, #2, #1
 8004d34:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG6_XL,
 8004d36:	f107 0208 	add.w	r2, r7, #8
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	2120      	movs	r1, #32
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fbba 	bl	80044b8 <lsm9ds1_write_reg>
 8004d44:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg6_xl, 1);
  }

  return ret;
 8004d46:	68fb      	ldr	r3, [r7, #12]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <lsm9ds1_xl_filter_out_path_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_out_path_set(stmdev_ctx_t *ctx,
                                       lsm9ds1_xl_out_path_t val)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8004d5c:	f107 0208 	add.w	r2, r7, #8
 8004d60:	2301      	movs	r3, #1
 8004d62:	2121      	movs	r1, #33	; 0x21
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fb8f 	bl	8004488 <lsm9ds1_read_reg>
 8004d6a:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <lsm9ds1_xl_filter_out_path_set+0x42>
  {
    ctrl_reg7_xl.fds = (uint8_t)val;
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	7a3b      	ldrb	r3, [r7, #8]
 8004d7c:	f362 0382 	bfi	r3, r2, #2, #1
 8004d80:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8004d82:	f107 0208 	add.w	r2, r7, #8
 8004d86:	2301      	movs	r3, #1
 8004d88:	2121      	movs	r1, #33	; 0x21
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fb94 	bl	80044b8 <lsm9ds1_write_reg>
 8004d90:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8004d92:	68fb      	ldr	r3, [r7, #12]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <lsm9ds1_xl_filter_lp_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm9ds1_xl_filter_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                           lsm9ds1_xl_lp_bw_t val)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
  lsm9ds1_ctrl_reg7_xl_t ctrl_reg7_xl;
  int32_t ret;

  ret = lsm9ds1_read_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8004da8:	f107 0208 	add.w	r2, r7, #8
 8004dac:	2301      	movs	r3, #1
 8004dae:	2121      	movs	r1, #33	; 0x21
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fb69 	bl	8004488 <lsm9ds1_read_reg>
 8004db6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl_reg7_xl, 1);

  if (ret == 0)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d118      	bne.n	8004df0 <lsm9ds1_xl_filter_lp_bandwidth_set+0x54>
  {
    ctrl_reg7_xl.hr = ((uint8_t)val & 0x10U) >> 4;
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	091b      	lsrs	r3, r3, #4
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	7a3b      	ldrb	r3, [r7, #8]
 8004dca:	f362 13c7 	bfi	r3, r2, #7, #1
 8004dce:	723b      	strb	r3, [r7, #8]
    ctrl_reg7_xl.dcf = ((uint8_t)val & 0x03U);
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	7a3b      	ldrb	r3, [r7, #8]
 8004dda:	f362 1346 	bfi	r3, r2, #5, #2
 8004dde:	723b      	strb	r3, [r7, #8]
    ret = lsm9ds1_write_reg(ctx, LSM9DS1_CTRL_REG7_XL,
 8004de0:	f107 0208 	add.w	r2, r7, #8
 8004de4:	2301      	movs	r3, #1
 8004de6:	2121      	movs	r1, #33	; 0x21
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff fb65 	bl	80044b8 <lsm9ds1_write_reg>
 8004dee:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg7_xl, 1);
  }

  return ret;
 8004df0:	68fb      	ldr	r3, [r7, #12]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <ADC_Read>:
static void ADC_ADVREGEN(ADC_TypeDef* adc) {
	adc->CR &= ~ADC_CR_ADVREGEN;
	adc->CR |= 0x1UL << ADC_CR_ADVREGEN_Pos;
}

static void ADC_Read(void) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
//	ADC1_val = ADC_GetVal(ADC1);
//	ADC2_val = ADC_GetVal(ADC2);
//	ADC3_val = ADC_GetVal(ADC3);
//	ADC4_val = ADC_GetVal(ADC4);
	ADC_vals[0] = ADC_GetVal(ADC1);
 8004e00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004e04:	f000 f858 	bl	8004eb8 <ADC_GetVal>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4a0b      	ldr	r2, [pc, #44]	; (8004e38 <ADC_Read+0x3c>)
 8004e0c:	6013      	str	r3, [r2, #0]
	ADC_vals[1] = ADC_GetVal(ADC2);
 8004e0e:	480b      	ldr	r0, [pc, #44]	; (8004e3c <ADC_Read+0x40>)
 8004e10:	f000 f852 	bl	8004eb8 <ADC_GetVal>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <ADC_Read+0x3c>)
 8004e18:	6053      	str	r3, [r2, #4]
	ADC_vals[2] = ADC_GetVal(ADC3);
 8004e1a:	4809      	ldr	r0, [pc, #36]	; (8004e40 <ADC_Read+0x44>)
 8004e1c:	f000 f84c 	bl	8004eb8 <ADC_GetVal>
 8004e20:	4603      	mov	r3, r0
 8004e22:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <ADC_Read+0x3c>)
 8004e24:	6093      	str	r3, [r2, #8]
	ADC_vals[3] = ADC_GetVal(ADC4);
 8004e26:	4807      	ldr	r0, [pc, #28]	; (8004e44 <ADC_Read+0x48>)
 8004e28:	f000 f846 	bl	8004eb8 <ADC_GetVal>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4a02      	ldr	r2, [pc, #8]	; (8004e38 <ADC_Read+0x3c>)
 8004e30:	60d3      	str	r3, [r2, #12]
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20000c8c 	.word	0x20000c8c
 8004e3c:	50000100 	.word	0x50000100
 8004e40:	50000400 	.word	0x50000400
 8004e44:	50000500 	.word	0x50000500

08004e48 <ADC_Calibrate>:

static void ADC_Calibrate(ADC_TypeDef* adc) {
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e56:	d00b      	beq.n	8004e70 <ADC_Calibrate+0x28>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a14      	ldr	r2, [pc, #80]	; (8004eac <ADC_Calibrate+0x64>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <ADC_Calibrate+0x28>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <ADC_Calibrate+0x68>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <ADC_Calibrate+0x28>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a12      	ldr	r2, [pc, #72]	; (8004eb4 <ADC_Calibrate+0x6c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d117      	bne.n	8004ea0 <ADC_Calibrate+0x58>
	  return;
  }

  adc->CR &= ~ADC_CR_ADEN; // Disable ADC
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f023 0201 	bic.w	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCALDIF; // Calibration for Single-ended input mode
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	609a      	str	r2, [r3, #8]
  adc->CR |= ADC_CR_ADCAL; // Start ADC calibration
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	609a      	str	r2, [r3, #8]
  while (adc->CR & ADC_CR_ADCAL);
 8004e94:	bf00      	nop
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	dbfb      	blt.n	8004e96 <ADC_Calibrate+0x4e>
 8004e9e:	e000      	b.n	8004ea2 <ADC_Calibrate+0x5a>
	  return;
 8004ea0:	bf00      	nop
}
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	50000100 	.word	0x50000100
 8004eb0:	50000400 	.word	0x50000400
 8004eb4:	50000500 	.word	0x50000500

08004eb8 <ADC_GetVal>:

static int ADC_GetVal(ADC_TypeDef* adc) {
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	if (adc != ADC1 && adc != ADC2 && adc != ADC3 && adc != ADC4) {
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ec6:	d00d      	beq.n	8004ee4 <ADC_GetVal+0x2c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <ADC_GetVal+0x3c>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d009      	beq.n	8004ee4 <ADC_GetVal+0x2c>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <ADC_GetVal+0x40>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d005      	beq.n	8004ee4 <ADC_GetVal+0x2c>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a08      	ldr	r2, [pc, #32]	; (8004efc <ADC_GetVal+0x44>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d001      	beq.n	8004ee4 <ADC_GetVal+0x2c>
		return 0;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e001      	b.n	8004ee8 <ADC_GetVal+0x30>
	}
	return adc->DR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	50000100 	.word	0x50000100
 8004ef8:	50000400 	.word	0x50000400
 8004efc:	50000500 	.word	0x50000500

08004f00 <IMU_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void IMU_Read(void) {
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
	lsm9ds1_dev_status_get(&dev_ctx_mag, &dev_ctx_imu, &reg);
 8004f04:	4aa4      	ldr	r2, [pc, #656]	; (8005198 <IMU_Read+0x298>)
 8004f06:	49a5      	ldr	r1, [pc, #660]	; (800519c <IMU_Read+0x29c>)
 8004f08:	48a5      	ldr	r0, [pc, #660]	; (80051a0 <IMU_Read+0x2a0>)
 8004f0a:	f7ff fdd4 	bl	8004ab6 <lsm9ds1_dev_status_get>

	if (reg.status_imu.xlda && reg.status_imu.gda) {
 8004f0e:	4ba2      	ldr	r3, [pc, #648]	; (8005198 <IMU_Read+0x298>)
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80ef 	beq.w	80050fc <IMU_Read+0x1fc>
 8004f1e:	4b9e      	ldr	r3, [pc, #632]	; (8005198 <IMU_Read+0x298>)
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80e7 	beq.w	80050fc <IMU_Read+0x1fc>
		/* Read accelerometer and gyroscope data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8004f2e:	2206      	movs	r2, #6
 8004f30:	2100      	movs	r1, #0
 8004f32:	489c      	ldr	r0, [pc, #624]	; (80051a4 <IMU_Read+0x2a4>)
 8004f34:	f005 ffc4 	bl	800aec0 <memset>
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8004f38:	2206      	movs	r2, #6
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	489a      	ldr	r0, [pc, #616]	; (80051a8 <IMU_Read+0x2a8>)
 8004f3e:	f005 ffbf 	bl	800aec0 <memset>
		lsm9ds1_acceleration_raw_get(&dev_ctx_imu, data_raw_acceleration);
 8004f42:	4998      	ldr	r1, [pc, #608]	; (80051a4 <IMU_Read+0x2a4>)
 8004f44:	4895      	ldr	r0, [pc, #596]	; (800519c <IMU_Read+0x29c>)
 8004f46:	f7ff fd03 	bl	8004950 <lsm9ds1_acceleration_raw_get>
		lsm9ds1_angular_rate_raw_get(&dev_ctx_imu, data_raw_angular_rate);
 8004f4a:	4997      	ldr	r1, [pc, #604]	; (80051a8 <IMU_Read+0x2a8>)
 8004f4c:	4893      	ldr	r0, [pc, #588]	; (800519c <IMU_Read+0x29c>)
 8004f4e:	f7ff fcb4 	bl	80048ba <lsm9ds1_angular_rate_raw_get>
		 accel.acceleration.x = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[0]) * 9.807) / 1000;
 8004f52:	4b94      	ldr	r3, [pc, #592]	; (80051a4 <IMU_Read+0x2a4>)
 8004f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff fac5 	bl	80044e8 <lsm9ds1_from_fs4g_to_mg>
 8004f5e:	ee10 3a10 	vmov	r3, s0
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fb faf0 	bl	8000548 <__aeabi_f2d>
 8004f68:	a385      	add	r3, pc, #532	; (adr r3, 8005180 <IMU_Read+0x280>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb fb43 	bl	80005f8 <__aeabi_dmul>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	4b8b      	ldr	r3, [pc, #556]	; (80051ac <IMU_Read+0x2ac>)
 8004f80:	f7fb fc64 	bl	800084c <__aeabi_ddiv>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f7fb fe2c 	bl	8000be8 <__aeabi_d2f>
 8004f90:	4603      	mov	r3, r0
 8004f92:	4a87      	ldr	r2, [pc, #540]	; (80051b0 <IMU_Read+0x2b0>)
 8004f94:	6013      	str	r3, [r2, #0]
		 accel.acceleration.y = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[1]) * 9.807) / 1000;
 8004f96:	4b83      	ldr	r3, [pc, #524]	; (80051a4 <IMU_Read+0x2a4>)
 8004f98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff faa3 	bl	80044e8 <lsm9ds1_from_fs4g_to_mg>
 8004fa2:	ee10 3a10 	vmov	r3, s0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fb face 	bl	8000548 <__aeabi_f2d>
 8004fac:	a374      	add	r3, pc, #464	; (adr r3, 8005180 <IMU_Read+0x280>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb fb21 	bl	80005f8 <__aeabi_dmul>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	4b7a      	ldr	r3, [pc, #488]	; (80051ac <IMU_Read+0x2ac>)
 8004fc4:	f7fb fc42 	bl	800084c <__aeabi_ddiv>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7fb fe0a 	bl	8000be8 <__aeabi_d2f>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	4a76      	ldr	r2, [pc, #472]	; (80051b0 <IMU_Read+0x2b0>)
 8004fd8:	6053      	str	r3, [r2, #4]
		 accel.acceleration.z = (lsm9ds1_from_fs4g_to_mg(data_raw_acceleration[2]) * 9.807) / 1000;
 8004fda:	4b72      	ldr	r3, [pc, #456]	; (80051a4 <IMU_Read+0x2a4>)
 8004fdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fa81 	bl	80044e8 <lsm9ds1_from_fs4g_to_mg>
 8004fe6:	ee10 3a10 	vmov	r3, s0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fb faac 	bl	8000548 <__aeabi_f2d>
 8004ff0:	a363      	add	r3, pc, #396	; (adr r3, 8005180 <IMU_Read+0x280>)
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f7fb faff 	bl	80005f8 <__aeabi_dmul>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	4b69      	ldr	r3, [pc, #420]	; (80051ac <IMU_Read+0x2ac>)
 8005008:	f7fb fc20 	bl	800084c <__aeabi_ddiv>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	f7fb fde8 	bl	8000be8 <__aeabi_d2f>
 8005018:	4603      	mov	r3, r0
 800501a:	4a65      	ldr	r2, [pc, #404]	; (80051b0 <IMU_Read+0x2b0>)
 800501c:	6093      	str	r3, [r2, #8]
		 gyro.gyro.x = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]) * 2 * M_PI)/360000;
 800501e:	4b62      	ldr	r3, [pc, #392]	; (80051a8 <IMU_Read+0x2a8>)
 8005020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fa77 	bl	8004518 <lsm9ds1_from_fs2000dps_to_mdps>
 800502a:	eef0 7a40 	vmov.f32	s15, s0
 800502e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005032:	ee17 0a90 	vmov	r0, s15
 8005036:	f7fb fa87 	bl	8000548 <__aeabi_f2d>
 800503a:	a353      	add	r3, pc, #332	; (adr r3, 8005188 <IMU_Read+0x288>)
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f7fb fada 	bl	80005f8 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4610      	mov	r0, r2
 800504a:	4619      	mov	r1, r3
 800504c:	a350      	add	r3, pc, #320	; (adr r3, 8005190 <IMU_Read+0x290>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f7fb fbfb 	bl	800084c <__aeabi_ddiv>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	f7fb fdc3 	bl	8000be8 <__aeabi_d2f>
 8005062:	4603      	mov	r3, r0
 8005064:	4a53      	ldr	r2, [pc, #332]	; (80051b4 <IMU_Read+0x2b4>)
 8005066:	6013      	str	r3, [r2, #0]
		 gyro.gyro.y = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]) * 2 * M_PI)/360000;
 8005068:	4b4f      	ldr	r3, [pc, #316]	; (80051a8 <IMU_Read+0x2a8>)
 800506a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fa52 	bl	8004518 <lsm9ds1_from_fs2000dps_to_mdps>
 8005074:	eef0 7a40 	vmov.f32	s15, s0
 8005078:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800507c:	ee17 0a90 	vmov	r0, s15
 8005080:	f7fb fa62 	bl	8000548 <__aeabi_f2d>
 8005084:	a340      	add	r3, pc, #256	; (adr r3, 8005188 <IMU_Read+0x288>)
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	f7fb fab5 	bl	80005f8 <__aeabi_dmul>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	a33e      	add	r3, pc, #248	; (adr r3, 8005190 <IMU_Read+0x290>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f7fb fbd6 	bl	800084c <__aeabi_ddiv>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7fb fd9e 	bl	8000be8 <__aeabi_d2f>
 80050ac:	4603      	mov	r3, r0
 80050ae:	4a41      	ldr	r2, [pc, #260]	; (80051b4 <IMU_Read+0x2b4>)
 80050b0:	6053      	str	r3, [r2, #4]
		 gyro.gyro.z = (lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]) * 2 * M_PI)/360000;
 80050b2:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <IMU_Read+0x2a8>)
 80050b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7ff fa2d 	bl	8004518 <lsm9ds1_from_fs2000dps_to_mdps>
 80050be:	eef0 7a40 	vmov.f32	s15, s0
 80050c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80050c6:	ee17 0a90 	vmov	r0, s15
 80050ca:	f7fb fa3d 	bl	8000548 <__aeabi_f2d>
 80050ce:	a32e      	add	r3, pc, #184	; (adr r3, 8005188 <IMU_Read+0x288>)
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f7fb fa90 	bl	80005f8 <__aeabi_dmul>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	a32b      	add	r3, pc, #172	; (adr r3, 8005190 <IMU_Read+0x290>)
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f7fb fbb1 	bl	800084c <__aeabi_ddiv>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	f7fb fd79 	bl	8000be8 <__aeabi_d2f>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a2e      	ldr	r2, [pc, #184]	; (80051b4 <IMU_Read+0x2b4>)
 80050fa:	6093      	str	r3, [r2, #8]
//		gyro.gyro.x = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
//		gyro.gyro.y = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
//		gyro.gyro.z = lsm9ds1_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
	}

	if (reg.status_mag.zyxda) {
 80050fc:	4b26      	ldr	r3, [pc, #152]	; (8005198 <IMU_Read+0x298>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d035      	beq.n	8005176 <IMU_Read+0x276>
		/* Read magnetometer data */
		memset(data_raw_magnetic_field, 0x00, 3 * sizeof(int16_t));
 800510a:	2206      	movs	r2, #6
 800510c:	2100      	movs	r1, #0
 800510e:	482a      	ldr	r0, [pc, #168]	; (80051b8 <IMU_Read+0x2b8>)
 8005110:	f005 fed6 	bl	800aec0 <memset>
		lsm9ds1_magnetic_raw_get(&dev_ctx_mag, data_raw_magnetic_field);
 8005114:	4928      	ldr	r1, [pc, #160]	; (80051b8 <IMU_Read+0x2b8>)
 8005116:	4822      	ldr	r0, [pc, #136]	; (80051a0 <IMU_Read+0x2a0>)
 8005118:	f7ff fc65 	bl	80049e6 <lsm9ds1_magnetic_raw_get>
		mag.magnetic.x = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[0]) / 10;
 800511c:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <IMU_Read+0x2b8>)
 800511e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005122:	4618      	mov	r0, r3
 8005124:	f7ff fa10 	bl	8004548 <lsm9ds1_from_fs16gauss_to_mG>
 8005128:	eeb0 7a40 	vmov.f32	s14, s0
 800512c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <IMU_Read+0x2bc>)
 8005136:	edc3 7a00 	vstr	s15, [r3]
		mag.magnetic.y = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[1]) / 10;
 800513a:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <IMU_Read+0x2b8>)
 800513c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fa01 	bl	8004548 <lsm9ds1_from_fs16gauss_to_mG>
 8005146:	eeb0 7a40 	vmov.f32	s14, s0
 800514a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800514e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005152:	4b1a      	ldr	r3, [pc, #104]	; (80051bc <IMU_Read+0x2bc>)
 8005154:	edc3 7a01 	vstr	s15, [r3, #4]
		mag.magnetic.z = lsm9ds1_from_fs16gauss_to_mG(data_raw_magnetic_field[2]) / 10;
 8005158:	4b17      	ldr	r3, [pc, #92]	; (80051b8 <IMU_Read+0x2b8>)
 800515a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff f9f2 	bl	8004548 <lsm9ds1_from_fs16gauss_to_mG>
 8005164:	eeb0 7a40 	vmov.f32	s14, s0
 8005168:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800516c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005170:	4b12      	ldr	r3, [pc, #72]	; (80051bc <IMU_Read+0x2bc>)
 8005172:	edc3 7a02 	vstr	s15, [r3, #8]
	}
}
 8005176:	bf00      	nop
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	f3af 8000 	nop.w
 8005180:	1a9fbe77 	.word	0x1a9fbe77
 8005184:	40239d2f 	.word	0x40239d2f
 8005188:	54442d18 	.word	0x54442d18
 800518c:	400921fb 	.word	0x400921fb
 8005190:	00000000 	.word	0x00000000
 8005194:	4115f900 	.word	0x4115f900
 8005198:	20000964 	.word	0x20000964
 800519c:	20000cbc 	.word	0x20000cbc
 80051a0:	20000ccc 	.word	0x20000ccc
 80051a4:	20000948 	.word	0x20000948
 80051a8:	20000950 	.word	0x20000950
 80051ac:	408f4000 	.word	0x408f4000
 80051b0:	20000c74 	.word	0x20000c74
 80051b4:	20000c68 	.word	0x20000c68
 80051b8:	20000958 	.word	0x20000958
 80051bc:	20000c80 	.word	0x20000c80

080051c0 <IMU_Setup>:

static int IMU_Setup(void) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Initialize inertial sensors (IMU) driver interface */
  dev_ctx_imu.write_reg = platform_write_imu;
 80051c4:	4b31      	ldr	r3, [pc, #196]	; (800528c <IMU_Setup+0xcc>)
 80051c6:	4a32      	ldr	r2, [pc, #200]	; (8005290 <IMU_Setup+0xd0>)
 80051c8:	601a      	str	r2, [r3, #0]
  dev_ctx_imu.read_reg = platform_read_imu;
 80051ca:	4b30      	ldr	r3, [pc, #192]	; (800528c <IMU_Setup+0xcc>)
 80051cc:	4a31      	ldr	r2, [pc, #196]	; (8005294 <IMU_Setup+0xd4>)
 80051ce:	605a      	str	r2, [r3, #4]
  dev_ctx_imu.handle = (void *)&imu_bus;
 80051d0:	4b2e      	ldr	r3, [pc, #184]	; (800528c <IMU_Setup+0xcc>)
 80051d2:	4a31      	ldr	r2, [pc, #196]	; (8005298 <IMU_Setup+0xd8>)
 80051d4:	60da      	str	r2, [r3, #12]
  /* Initialize magnetic sensors driver interface */
  dev_ctx_mag.write_reg = platform_write_mag;
 80051d6:	4b31      	ldr	r3, [pc, #196]	; (800529c <IMU_Setup+0xdc>)
 80051d8:	4a31      	ldr	r2, [pc, #196]	; (80052a0 <IMU_Setup+0xe0>)
 80051da:	601a      	str	r2, [r3, #0]
  dev_ctx_mag.read_reg = platform_read_mag;
 80051dc:	4b2f      	ldr	r3, [pc, #188]	; (800529c <IMU_Setup+0xdc>)
 80051de:	4a31      	ldr	r2, [pc, #196]	; (80052a4 <IMU_Setup+0xe4>)
 80051e0:	605a      	str	r2, [r3, #4]
  dev_ctx_mag.handle = (void *)&mag_bus;
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <IMU_Setup+0xdc>)
 80051e4:	4a30      	ldr	r2, [pc, #192]	; (80052a8 <IMU_Setup+0xe8>)
 80051e6:	60da      	str	r2, [r3, #12]

  platform_delay(BOOT_TIME);
 80051e8:	2014      	movs	r0, #20
 80051ea:	f000 f8f3 	bl	80053d4 <platform_delay>
  /* Check device ID */
  lsm9ds1_dev_id_get(&dev_ctx_mag, &dev_ctx_imu, &whoamI);
 80051ee:	4a2f      	ldr	r2, [pc, #188]	; (80052ac <IMU_Setup+0xec>)
 80051f0:	4926      	ldr	r1, [pc, #152]	; (800528c <IMU_Setup+0xcc>)
 80051f2:	482a      	ldr	r0, [pc, #168]	; (800529c <IMU_Setup+0xdc>)
 80051f4:	f7ff fc42 	bl	8004a7c <lsm9ds1_dev_id_get>

//  if (whoamI.imu != LSM9DS1_IMU_ID || whoamI.mag != LSM9DS1_MAG_ID) {
  if (whoamI.imu != LSM9DS1_IMU_ID) {
 80051f8:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <IMU_Setup+0xec>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b68      	cmp	r3, #104	; 0x68
 80051fe:	d002      	beq.n	8005206 <IMU_Setup+0x46>
	  while (1) {
		  /* Device not found management */
		  return SETUP_FAIL;
 8005200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005204:	e03f      	b.n	8005286 <IMU_Setup+0xc6>
	  }
  }

  /* Restore default configuration */
  lsm9ds1_dev_reset_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8005206:	2201      	movs	r2, #1
 8005208:	4920      	ldr	r1, [pc, #128]	; (800528c <IMU_Setup+0xcc>)
 800520a:	4824      	ldr	r0, [pc, #144]	; (800529c <IMU_Setup+0xdc>)
 800520c:	f7ff fc70 	bl	8004af0 <lsm9ds1_dev_reset_set>

  do {
	  lsm9ds1_dev_reset_get(&dev_ctx_mag, &dev_ctx_imu, &rst);
 8005210:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <IMU_Setup+0xf0>)
 8005212:	491e      	ldr	r1, [pc, #120]	; (800528c <IMU_Setup+0xcc>)
 8005214:	4821      	ldr	r0, [pc, #132]	; (800529c <IMU_Setup+0xdc>)
 8005216:	f7ff fcb0 	bl	8004b7a <lsm9ds1_dev_reset_get>
  } while (rst);
 800521a:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <IMU_Setup+0xf0>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1f6      	bne.n	8005210 <IMU_Setup+0x50>

  /* Enable Block Data Update */
  lsm9ds1_block_data_update_set(&dev_ctx_mag, &dev_ctx_imu, PROPERTY_ENABLE);
 8005222:	2201      	movs	r2, #1
 8005224:	4919      	ldr	r1, [pc, #100]	; (800528c <IMU_Setup+0xcc>)
 8005226:	481d      	ldr	r0, [pc, #116]	; (800529c <IMU_Setup+0xdc>)
 8005228:	f7ff fa57 	bl	80046da <lsm9ds1_block_data_update_set>

  /* Set full scale */
  lsm9ds1_xl_full_scale_set(&dev_ctx_imu, LSM9DS1_4g);
 800522c:	2102      	movs	r1, #2
 800522e:	4817      	ldr	r0, [pc, #92]	; (800528c <IMU_Setup+0xcc>)
 8005230:	f7ff fa2d 	bl	800468e <lsm9ds1_xl_full_scale_set>
  lsm9ds1_gy_full_scale_set(&dev_ctx_imu, LSM9DS1_2000dps);
 8005234:	2103      	movs	r1, #3
 8005236:	4815      	ldr	r0, [pc, #84]	; (800528c <IMU_Setup+0xcc>)
 8005238:	f7ff f99e 	bl	8004578 <lsm9ds1_gy_full_scale_set>
  lsm9ds1_mag_full_scale_set(&dev_ctx_mag, LSM9DS1_16Ga);
 800523c:	2103      	movs	r1, #3
 800523e:	4817      	ldr	r0, [pc, #92]	; (800529c <IMU_Setup+0xdc>)
 8005240:	f7ff fb15 	bl	800486e <lsm9ds1_mag_full_scale_set>
  /* Configure filtering chain - See datasheet for filtering chain details */
  /* Accelerometer filtering chain */
  lsm9ds1_xl_filter_aalias_bandwidth_set(&dev_ctx_imu, LSM9DS1_AUTO);
 8005244:	2100      	movs	r1, #0
 8005246:	4811      	ldr	r0, [pc, #68]	; (800528c <IMU_Setup+0xcc>)
 8005248:	f7ff fd53 	bl	8004cf2 <lsm9ds1_xl_filter_aalias_bandwidth_set>
  lsm9ds1_xl_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ODR_DIV_50);
 800524c:	2110      	movs	r1, #16
 800524e:	480f      	ldr	r0, [pc, #60]	; (800528c <IMU_Setup+0xcc>)
 8005250:	f7ff fda4 	bl	8004d9c <lsm9ds1_xl_filter_lp_bandwidth_set>
  lsm9ds1_xl_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LP_OUT);
 8005254:	2100      	movs	r1, #0
 8005256:	480d      	ldr	r0, [pc, #52]	; (800528c <IMU_Setup+0xcc>)
 8005258:	f7ff fd7a 	bl	8004d50 <lsm9ds1_xl_filter_out_path_set>
  /* Gyroscope filtering chain */
  lsm9ds1_gy_filter_lp_bandwidth_set(&dev_ctx_imu, LSM9DS1_LP_ULTRA_LIGHT);
 800525c:	2103      	movs	r1, #3
 800525e:	480b      	ldr	r0, [pc, #44]	; (800528c <IMU_Setup+0xcc>)
 8005260:	f7ff fcb6 	bl	8004bd0 <lsm9ds1_gy_filter_lp_bandwidth_set>
  lsm9ds1_gy_filter_hp_bandwidth_set(&dev_ctx_imu, LSM9DS1_HP_MEDIUM);
 8005264:	2105      	movs	r1, #5
 8005266:	4809      	ldr	r0, [pc, #36]	; (800528c <IMU_Setup+0xcc>)
 8005268:	f7ff fd1d 	bl	8004ca6 <lsm9ds1_gy_filter_hp_bandwidth_set>
  lsm9ds1_gy_filter_out_path_set(&dev_ctx_imu, LSM9DS1_LPF1_HPF_LPF2_OUT);
 800526c:	2112      	movs	r1, #18
 800526e:	4807      	ldr	r0, [pc, #28]	; (800528c <IMU_Setup+0xcc>)
 8005270:	f7ff fcd4 	bl	8004c1c <lsm9ds1_gy_filter_out_path_set>
  /* Set Output Data Rate / Power mode */
  lsm9ds1_imu_data_rate_set(&dev_ctx_imu, LSM9DS1_IMU_59Hz5);
 8005274:	2122      	movs	r1, #34	; 0x22
 8005276:	4805      	ldr	r0, [pc, #20]	; (800528c <IMU_Setup+0xcc>)
 8005278:	f7ff f9a4 	bl	80045c4 <lsm9ds1_imu_data_rate_set>
  lsm9ds1_mag_data_rate_set(&dev_ctx_mag, LSM9DS1_MAG_UHP_10Hz);
 800527c:	2134      	movs	r1, #52	; 0x34
 800527e:	4807      	ldr	r0, [pc, #28]	; (800529c <IMU_Setup+0xdc>)
 8005280:	f7ff fa7a 	bl	8004778 <lsm9ds1_mag_data_rate_set>

  return SETUP_SUCCESS;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000cbc 	.word	0x20000cbc
 8005290:	080052b5 	.word	0x080052b5
 8005294:	08005345 	.word	0x08005345
 8005298:	2000001c 	.word	0x2000001c
 800529c:	20000ccc 	.word	0x20000ccc
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	08005389 	.word	0x08005389
 80052a8:	2000000c 	.word	0x2000000c
 80052ac:	20000960 	.word	0x20000960
 80052b0:	20000966 	.word	0x20000966

080052b4 <platform_write_imu>:

static int32_t platform_write_imu(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08a      	sub	sp, #40	; 0x28
 80052b8:	af04      	add	r7, sp, #16
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	461a      	mov	r2, r3
 80052c0:	460b      	mov	r3, r1
 80052c2:	72fb      	strb	r3, [r7, #11]
 80052c4:	4613      	mov	r3, r2
 80052c6:	813b      	strh	r3, [r7, #8]
  sensbus_t *sensbus = (sensbus_t *)handle;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	617b      	str	r3, [r7, #20]

  HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	b299      	uxth	r1, r3
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80052de:	9302      	str	r3, [sp, #8]
 80052e0:	893b      	ldrh	r3, [r7, #8]
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	2301      	movs	r3, #1
 80052ea:	f003 f8e3 	bl	80084b4 <HAL_I2C_Mem_Write>
  return 0;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <platform_write_mag>:

static int32_t platform_write_mag(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	; 0x28
 80052fc:	af04      	add	r7, sp, #16
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	461a      	mov	r2, r3
 8005304:	460b      	mov	r3, r1
 8005306:	72fb      	strb	r3, [r7, #11]
 8005308:	4613      	mov	r3, r2
 800530a:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	617b      	str	r3, [r7, #20]
	reg |= 0x80;
 8005310:	7afb      	ldrb	r3, [r7, #11]
 8005312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005316:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	791b      	ldrb	r3, [r3, #4]
 8005320:	b299      	uxth	r1, r3
 8005322:	7afb      	ldrb	r3, [r7, #11]
 8005324:	b29a      	uxth	r2, r3
 8005326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800532a:	9302      	str	r3, [sp, #8]
 800532c:	893b      	ldrh	r3, [r7, #8]
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	2301      	movs	r3, #1
 8005336:	f003 f8bd 	bl	80084b4 <HAL_I2C_Mem_Write>
	  return 0;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <platform_read_imu>:

static int32_t platform_read_imu(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af04      	add	r7, sp, #16
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	460b      	mov	r3, r1
 8005352:	72fb      	strb	r3, [r7, #11]
 8005354:	4613      	mov	r3, r2
 8005356:	813b      	strh	r3, [r7, #8]
	  sensbus_t *sensbus = (sensbus_t *)handle;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	617b      	str	r3, [r7, #20]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	791b      	ldrb	r3, [r3, #4]
 8005364:	b299      	uxth	r1, r3
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	b29a      	uxth	r2, r3
 800536a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800536e:	9302      	str	r3, [sp, #8]
 8005370:	893b      	ldrh	r3, [r7, #8]
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	2301      	movs	r3, #1
 800537a:	f003 f9af 	bl	80086dc <HAL_I2C_Mem_Read>
	  return 0;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <platform_read_mag>:

static int32_t platform_read_mag(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af04      	add	r7, sp, #16
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	461a      	mov	r2, r3
 8005394:	460b      	mov	r3, r1
 8005396:	72fb      	strb	r3, [r7, #11]
 8005398:	4613      	mov	r3, r2
 800539a:	813b      	strh	r3, [r7, #8]
	sensbus_t *sensbus = (sensbus_t *)handle;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	617b      	str	r3, [r7, #20]
	  reg |= 0x80;
 80053a0:	7afb      	ldrb	r3, [r7, #11]
 80053a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053a6:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(sensbus->hbus, sensbus->i2c_address, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	791b      	ldrb	r3, [r3, #4]
 80053b0:	b299      	uxth	r1, r3
 80053b2:	7afb      	ldrb	r3, [r7, #11]
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053ba:	9302      	str	r3, [sp, #8]
 80053bc:	893b      	ldrh	r3, [r7, #8]
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2301      	movs	r3, #1
 80053c6:	f003 f989 	bl	80086dc <HAL_I2C_Mem_Read>
	  return 0;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 fca3 	bl	8006d28 <HAL_Delay>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10a      	bne.n	8005412 <HAL_GPIO_EXTI_Callback+0x26>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) {
 80053fc:	2101      	movs	r1, #1
 80053fe:	480d      	ldr	r0, [pc, #52]	; (8005434 <HAL_GPIO_EXTI_Callback+0x48>)
 8005400:	f002 fe8c 	bl	800811c <HAL_GPIO_ReadPin>
 8005404:	4603      	mov	r3, r0
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10f      	bne.n	800542a <HAL_GPIO_EXTI_Callback+0x3e>
			Set_AdvancedMode(1);
 800540a:	2001      	movs	r0, #1
 800540c:	f000 f814 	bl	8005438 <Set_AdvancedMode>
    		Set_StandardMode();
    	}
    }
//    exti_test1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
//    exti_test2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
}
 8005410:	e00b      	b.n	800542a <HAL_GPIO_EXTI_Callback+0x3e>
    } else if (GPIO_Pin == GPIO_PIN_1) {
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	2b02      	cmp	r3, #2
 8005416:	d108      	bne.n	800542a <HAL_GPIO_EXTI_Callback+0x3e>
    	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) {
 8005418:	2102      	movs	r1, #2
 800541a:	4806      	ldr	r0, [pc, #24]	; (8005434 <HAL_GPIO_EXTI_Callback+0x48>)
 800541c:	f002 fe7e 	bl	800811c <HAL_GPIO_ReadPin>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_GPIO_EXTI_Callback+0x3e>
    		Set_StandardMode();
 8005426:	f000 f819 	bl	800545c <Set_StandardMode>
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	48000800 	.word	0x48000800

08005438 <Set_AdvancedMode>:

void Set_AdvancedMode(int start_adv) {
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	state = MODE_ADVANCED;
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <Set_AdvancedMode+0x20>)
 8005442:	2204      	movs	r2, #4
 8005444:	701a      	strb	r2, [r3, #0]
  if (start_adv == 1) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <Set_AdvancedMode+0x18>
	  Start_AdvancedMode();
 800544c:	f000 f9d8 	bl	8005800 <Start_AdvancedMode>
  }
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000cf4 	.word	0x20000cf4

0800545c <Set_StandardMode>:
void Set_StandardMode() {
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
	state = MODE_STANDARD;
 8005460:	4b03      	ldr	r3, [pc, #12]	; (8005470 <Set_StandardMode+0x14>)
 8005462:	2203      	movs	r2, #3
 8005464:	701a      	strb	r2, [r3, #0]
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000cf4 	.word	0x20000cf4

08005474 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005474:	b580      	push	{r7, lr}
 8005476:	ed2d 8b02 	vpush	{d8}
 800547a:	b088      	sub	sp, #32
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a80      	ldr	r2, [pc, #512]	; (8005684 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005484:	4293      	cmp	r3, r2
 8005486:	f040 80f7 	bne.w	8005678 <HAL_TIM_PeriodElapsedCallback+0x204>
  did_state_change = 0;
 800548a:	4b7f      	ldr	r3, [pc, #508]	; (8005688 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800548c:	2200      	movs	r2, #0
 800548e:	601a      	str	r2, [r3, #0]
	if (state == INIT) { // State: INIT
 8005490:	4b7e      	ldr	r3, [pc, #504]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d115      	bne.n	80054c4 <HAL_TIM_PeriodElapsedCallback+0x50>
		if (cnt_sec <= 0) {
 8005498:	4b7d      	ldr	r3, [pc, #500]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	dc0b      	bgt.n	80054b8 <HAL_TIM_PeriodElapsedCallback+0x44>
			calibrate_init();
 80054a0:	f7fb fd58 	bl	8000f54 <calibrate_init>
			state = CAL_UNFLEXED;
 80054a4:	4b79      	ldr	r3, [pc, #484]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
			cnt_sec = CAL_TIME_SEC;
 80054aa:	4b79      	ldr	r3, [pc, #484]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80054ac:	2205      	movs	r2, #5
 80054ae:	601a      	str	r2, [r3, #0]
      did_state_change = 1;
 80054b0:	4b75      	ldr	r3, [pc, #468]	; (8005688 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e0c2      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0x1ca>
		} else {
			cnt_sec -= 1;
 80054b8:	4b75      	ldr	r3, [pc, #468]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3b01      	subs	r3, #1
 80054be:	4a74      	ldr	r2, [pc, #464]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	e0bc      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0x1ca>
		}
	} else if (state == CAL_UNFLEXED) { // State: CAL_UNFLEXED
 80054c4:	4b71      	ldr	r3, [pc, #452]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x218>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d137      	bne.n	800553c <HAL_TIM_PeriodElapsedCallback+0xc8>
      ADC_Read();
 80054cc:	f7ff fc96 	bl	8004dfc <ADC_Read>
	  for (int i = 0; i < 4; i++) {
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e01b      	b.n	800550e <HAL_TIM_PeriodElapsedCallback+0x9a>
      resistance_max[i] = max(resistance_max[i], calculate_finger_resistance(i));
 80054d6:	4a6f      	ldr	r2, [pc, #444]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	ed93 8a00 	vldr	s16, [r3]
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f7fb fcd8 	bl	8000e98 <calculate_finger_resistance>
 80054e8:	eef0 7a40 	vmov.f32	s15, s0
 80054ec:	eef0 0a67 	vmov.f32	s1, s15
 80054f0:	eeb0 0a48 	vmov.f32	s0, s16
 80054f4:	f001 faae 	bl	8006a54 <max>
 80054f8:	eef0 7a40 	vmov.f32	s15, s0
 80054fc:	4a65      	ldr	r2, [pc, #404]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 4; i++) {
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2b03      	cmp	r3, #3
 8005512:	dde0      	ble.n	80054d6 <HAL_TIM_PeriodElapsedCallback+0x62>
	  }
      if (cnt_sec <= 0) {
 8005514:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	dc09      	bgt.n	8005530 <HAL_TIM_PeriodElapsedCallback+0xbc>
        state = CAL_FLEXED;
 800551c:	4b5b      	ldr	r3, [pc, #364]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800551e:	2202      	movs	r2, #2
 8005520:	701a      	strb	r2, [r3, #0]
        cnt_sec = CAL_TIME_SEC;
 8005522:	4b5b      	ldr	r3, [pc, #364]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005524:	2205      	movs	r2, #5
 8005526:	601a      	str	r2, [r3, #0]
        did_state_change = 1;
 8005528:	4b57      	ldr	r3, [pc, #348]	; (8005688 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e086      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0x1ca>
      } else {
        cnt_sec -= 1;
 8005530:	4b57      	ldr	r3, [pc, #348]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3b01      	subs	r3, #1
 8005536:	4a56      	ldr	r2, [pc, #344]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e080      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0x1ca>
      }
    } else if (state == CAL_FLEXED) { // State: CAL_FLEXED
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d17c      	bne.n	800563e <HAL_TIM_PeriodElapsedCallback+0x1ca>
      ADC_Read();
 8005544:	f7ff fc5a 	bl	8004dfc <ADC_Read>
      for (int i = 0; i < 4; i++) {
 8005548:	2300      	movs	r3, #0
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	e01b      	b.n	8005586 <HAL_TIM_PeriodElapsedCallback+0x112>
    		resistance_min[i] = min(resistance_min[i], calculate_finger_resistance(i));
 800554e:	4a52      	ldr	r2, [pc, #328]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	ed93 8a00 	vldr	s16, [r3]
 800555a:	6938      	ldr	r0, [r7, #16]
 800555c:	f7fb fc9c 	bl	8000e98 <calculate_finger_resistance>
 8005560:	eef0 7a40 	vmov.f32	s15, s0
 8005564:	eef0 0a67 	vmov.f32	s1, s15
 8005568:	eeb0 0a48 	vmov.f32	s0, s16
 800556c:	f001 fa8e 	bl	8006a8c <min>
 8005570:	eef0 7a40 	vmov.f32	s15, s0
 8005574:	4a48      	ldr	r2, [pc, #288]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	edc3 7a00 	vstr	s15, [r3]
      for (int i = 0; i < 4; i++) {
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	3301      	adds	r3, #1
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b03      	cmp	r3, #3
 800558a:	dde0      	ble.n	800554e <HAL_TIM_PeriodElapsedCallback+0xda>
      }
      if (cnt_sec <= 0) {
 800558c:	4b40      	ldr	r3, [pc, #256]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	dc4f      	bgt.n	8005634 <HAL_TIM_PeriodElapsedCallback+0x1c0>
    	int is_resistance_range_valid = 1;
 8005594:	2301      	movs	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]
    	for (int i = 0; i < 4; i++) {
 8005598:	2300      	movs	r3, #0
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	e01a      	b.n	80055d4 <HAL_TIM_PeriodElapsedCallback+0x160>
    		if (resistance_max[i] - resistance_min[i] < RESISTANCE_RANGE_THRESH) {
 800559e:	4a3d      	ldr	r2, [pc, #244]	; (8005694 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	ed93 7a00 	vldr	s14, [r3]
 80055aa:	4a3b      	ldr	r2, [pc, #236]	; (8005698 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055ba:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800569c <HAL_TIM_PeriodElapsedCallback+0x228>
 80055be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c6:	d502      	bpl.n	80055ce <HAL_TIM_PeriodElapsedCallback+0x15a>
    			is_resistance_range_valid = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	60fb      	str	r3, [r7, #12]
    			break;
 80055cc:	e005      	b.n	80055da <HAL_TIM_PeriodElapsedCallback+0x166>
    	for (int i = 0; i < 4; i++) {
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	3301      	adds	r3, #1
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	dde1      	ble.n	800559e <HAL_TIM_PeriodElapsedCallback+0x12a>
    		}
    	}
    	if (is_resistance_range_valid != 0) {
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01f      	beq.n	8005620 <HAL_TIM_PeriodElapsedCallback+0x1ac>
//    		HAL_TIM_Base_Stop_IT(&htim16);
      htim16.Init.Period = 1000 - 1;
 80055e0:	4b28      	ldr	r3, [pc, #160]	; (8005684 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80055e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80055e6:	60da      	str	r2, [r3, #12]
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80055e8:	2006      	movs	r0, #6
 80055ea:	f002 fadc 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
			HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80055ee:	2007      	movs	r0, #7
 80055f0:	f002 fad9 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_SET) { // @henry: check PC0 IDR for starting mode
 80055f4:	2101      	movs	r1, #1
 80055f6:	482a      	ldr	r0, [pc, #168]	; (80056a0 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80055f8:	f002 fd90 	bl	800811c <HAL_GPIO_ReadPin>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d103      	bne.n	800560a <HAL_TIM_PeriodElapsedCallback+0x196>
        Set_AdvancedMode(0);
 8005602:	2000      	movs	r0, #0
 8005604:	f7ff ff18 	bl	8005438 <Set_AdvancedMode>
 8005608:	e001      	b.n	800560e <HAL_TIM_PeriodElapsedCallback+0x19a>
			} else {
	      Set_StandardMode();
 800560a:	f7ff ff27 	bl	800545c <Set_StandardMode>
			}
			LCD_DrawFillRectangle(CAL_CIRCLE_X - 8, CAL_CIRCLE_Y - 8, CAL_CIRCLE_X + 8, CAL_CIRCLE_Y + 8, BLACK); // hides countdown from calibration stages
 800560e:	2300      	movs	r3, #0
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	23f8      	movs	r3, #248	; 0xf8
 8005614:	2280      	movs	r2, #128	; 0x80
 8005616:	21e8      	movs	r1, #232	; 0xe8
 8005618:	2070      	movs	r0, #112	; 0x70
 800561a:	f7fd fe7f 	bl	800331c <LCD_DrawFillRectangle>
 800561e:	e005      	b.n	800562c <HAL_TIM_PeriodElapsedCallback+0x1b8>
    	} else {
    		state = CAL_UNFLEXED;
 8005620:	4b1a      	ldr	r3, [pc, #104]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005622:	2201      	movs	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
    		cnt_sec = CAL_TIME_SEC;
 8005626:	4b1a      	ldr	r3, [pc, #104]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005628:	2205      	movs	r2, #5
 800562a:	601a      	str	r2, [r3, #0]
    	}
      did_state_change = 1;
 800562c:	4b16      	ldr	r3, [pc, #88]	; (8005688 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800562e:	2201      	movs	r2, #1
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e004      	b.n	800563e <HAL_TIM_PeriodElapsedCallback+0x1ca>
      } else {
        cnt_sec -= 1;
 8005634:	4b16      	ldr	r3, [pc, #88]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3b01      	subs	r3, #1
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800563c:	6013      	str	r3, [r2, #0]
      }
    }
  LCD_update(gimbal_roll, gimbal_pitch, gimbal_throttle, gimbal_yaw, state, CAL_TIME_SEC, cnt_sec);
 800563e:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005640:	edd3 7a00 	vldr	s15, [r3]
 8005644:	4b18      	ldr	r3, [pc, #96]	; (80056a8 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005646:	ed93 7a00 	vldr	s14, [r3]
 800564a:	4b18      	ldr	r3, [pc, #96]	; (80056ac <HAL_TIM_PeriodElapsedCallback+0x238>)
 800564c:	edd3 6a00 	vldr	s13, [r3]
 8005650:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005652:	ed93 6a00 	vldr	s12, [r3]
 8005656:	4b0d      	ldr	r3, [pc, #52]	; (800568c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	2105      	movs	r1, #5
 8005664:	eef0 1a46 	vmov.f32	s3, s12
 8005668:	eeb0 1a66 	vmov.f32	s2, s13
 800566c:	eef0 0a47 	vmov.f32	s1, s14
 8005670:	eeb0 0a67 	vmov.f32	s0, s15
 8005674:	f7fe fd1c 	bl	80040b0 <LCD_update>
  }
}
 8005678:	bf00      	nop
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	ecbd 8b02 	vpop	{d8}
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20000bf8 	.word	0x20000bf8
 8005688:	20000cf8 	.word	0x20000cf8
 800568c:	20000cf4 	.word	0x20000cf4
 8005690:	20000cfc 	.word	0x20000cfc
 8005694:	20000cac 	.word	0x20000cac
 8005698:	20000c9c 	.word	0x20000c9c
 800569c:	461c4000 	.word	0x461c4000
 80056a0:	48000800 	.word	0x48000800
 80056a4:	20000c58 	.word	0x20000c58
 80056a8:	20000c5c 	.word	0x20000c5c
 80056ac:	20000c64 	.word	0x20000c64
 80056b0:	20000c60 	.word	0x20000c60

080056b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80056b8:	f001 fad0 	bl	8006c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056bc:	f000 f99c 	bl	80059f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056c0:	f000 fd94 	bl	80061ec <MX_GPIO_Init>
  MX_DMA_Init();
 80056c4:	f000 fd74 	bl	80061b0 <MX_DMA_Init>
  MX_ADC1_Init();
 80056c8:	f000 f9f4 	bl	8005ab4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80056cc:	f000 fa9e 	bl	8005c0c <MX_ADC2_Init>
  MX_ADC3_Init();
 80056d0:	f000 fb28 	bl	8005d24 <MX_ADC3_Init>
  MX_ADC4_Init();
 80056d4:	f000 fbc4 	bl	8005e60 <MX_ADC4_Init>
  MX_I2C1_Init();
 80056d8:	f000 fc4e 	bl	8005f78 <MX_I2C1_Init>
  MX_I2C2_Init();
 80056dc:	f000 fc8c 	bl	8005ff8 <MX_I2C2_Init>
  MX_TIM16_Init();
 80056e0:	f000 fd3e 	bl	8006160 <MX_TIM16_Init>
  MX_SPI1_Init();
 80056e4:	f000 fcc8 	bl	8006078 <MX_SPI1_Init>
//  SPI1_Setup();
  LCD_Init(0,0,0);
 80056e8:	2200      	movs	r2, #0
 80056ea:	2100      	movs	r1, #0
 80056ec:	2000      	movs	r0, #0
 80056ee:	f7fd fb17 	bl	8002d20 <LCD_Init>
  LCD_Clear(BLACK);
 80056f2:	2000      	movs	r0, #0
 80056f4:	f7fd fcbe 	bl	8003074 <LCD_Clear>

  /* USER CODE BEGIN 2 */
  if (IMU_Setup() != SETUP_SUCCESS) {
 80056f8:	f7ff fd62 	bl	80051c0 <IMU_Setup>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <main+0x52>
	  return 1;
 8005702:	2301      	movs	r3, #1
 8005704:	e033      	b.n	800576e <main+0xba>
  }
  MCP4728_Init(&hi2c2, output);
 8005706:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <main+0xc0>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4611      	mov	r1, r2
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	4610      	mov	r0, r2
 8005710:	891a      	ldrh	r2, [r3, #8]
 8005712:	2300      	movs	r3, #0
 8005714:	f362 030f 	bfi	r3, r2, #0, #16
 8005718:	4602      	mov	r2, r0
 800571a:	4817      	ldr	r0, [pc, #92]	; (8005778 <main+0xc4>)
 800571c:	f7fd f957 	bl	80029ce <MCP4728_Init>
  output.channelVref = 0x00;
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <main+0xc0>)
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
  output.channel_Gain = 0x00;
 8005726:	4b13      	ldr	r3, [pc, #76]	; (8005774 <main+0xc0>)
 8005728:	2200      	movs	r2, #0
 800572a:	705a      	strb	r2, [r3, #1]
  convert_voltage_to_ADC(voltage_vals);
 800572c:	4813      	ldr	r0, [pc, #76]	; (800577c <main+0xc8>)
 800572e:	f000 f82f 	bl	8005790 <convert_voltage_to_ADC>
  output.channel_Val[0] = DAC_resting[0]; // pitch
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <main+0xcc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b29a      	uxth	r2, r3
 8005738:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <main+0xc0>)
 800573a:	805a      	strh	r2, [r3, #2]
  output.channel_Val[1] = DAC_resting[1]; // roll
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <main+0xcc>)
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	b29a      	uxth	r2, r3
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <main+0xc0>)
 8005744:	809a      	strh	r2, [r3, #4]
  output.channel_Val[2] = DAC_resting[2]; // throttle
 8005746:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <main+0xcc>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	b29a      	uxth	r2, r3
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <main+0xc0>)
 800574e:	80da      	strh	r2, [r3, #6]
  output.channel_Val[3] = DAC_resting[3]; // yaw
 8005750:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <main+0xcc>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	b29a      	uxth	r2, r3
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <main+0xc0>)
 8005758:	811a      	strh	r2, [r3, #8]

  state = INIT;
 800575a:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <main+0xd0>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
  cnt_sec = INIT_TIME_SEC;
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <main+0xd4>)
 8005762:	2202      	movs	r2, #2
 8005764:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16); // @henry: starting timer
 8005766:	4809      	ldr	r0, [pc, #36]	; (800578c <main+0xd8>)
 8005768:	f005 f912 	bl	800a990 <HAL_TIM_Base_Start_IT>
//  state = MODE_ADVANCED;
//  Start_AdvancedMode();
  /* USER CODE END 2 */

  while (1);
 800576c:	e7fe      	b.n	800576c <main+0xb8>
}
 800576e:	4618      	mov	r0, r3
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000264 	.word	0x20000264
 8005778:	20000afc 	.word	0x20000afc
 800577c:	20000030 	.word	0x20000030
 8005780:	20000ce4 	.word	0x20000ce4
 8005784:	20000cf4 	.word	0x20000cf4
 8005788:	20000cfc 	.word	0x20000cfc
 800578c:	20000bf8 	.word	0x20000bf8

08005790 <convert_voltage_to_ADC>:

int convert_voltage_to_ADC(float* voltage_vals) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e020      	b.n	80057e0 <convert_voltage_to_ADC+0x50>
		DAC_resting[i] = voltage_vals[i] * ((2 << ADC_NUM_BITS - 1) - 1) / VCC;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	edd3 7a00 	vldr	s15, [r3]
 80057aa:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80057f8 <convert_voltage_to_ADC+0x68>
 80057ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b2:	ee17 0a90 	vmov	r0, s15
 80057b6:	f7fa fec7 	bl	8000548 <__aeabi_f2d>
 80057ba:	a30d      	add	r3, pc, #52	; (adr r3, 80057f0 <convert_voltage_to_ADC+0x60>)
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f7fb f844 	bl	800084c <__aeabi_ddiv>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	f7fb f9c4 	bl	8000b58 <__aeabi_d2iz>
 80057d0:	4602      	mov	r2, r0
 80057d2:	490a      	ldr	r1, [pc, #40]	; (80057fc <convert_voltage_to_ADC+0x6c>)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; i++) {
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3301      	adds	r3, #1
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	dddb      	ble.n	800579e <convert_voltage_to_ADC+0xe>
	}
}
 80057e6:	bf00      	nop
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	66666666 	.word	0x66666666
 80057f4:	400a6666 	.word	0x400a6666
 80057f8:	457ff000 	.word	0x457ff000
 80057fc:	20000ce4 	.word	0x20000ce4

08005800 <Start_AdvancedMode>:

void Start_AdvancedMode(void) {
 8005800:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005804:	af00      	add	r7, sp, #0
  reset_aux_frame();
 8005806:	f7fb fd03 	bl	8001210 <reset_aux_frame>
  t1 = HAL_GetTick();
 800580a:	f001 fa81 	bl	8006d10 <HAL_GetTick>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	4b6c      	ldr	r3, [pc, #432]	; (80059c4 <Start_AdvancedMode+0x1c4>)
 8005814:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (state == MODE_ADVANCED) {
 8005816:	e0cc      	b.n	80059b2 <Start_AdvancedMode+0x1b2>
	  /* SENSOR READ BEGIN */
	  ADC_Read();
 8005818:	f7ff faf0 	bl	8004dfc <ADC_Read>
	  IMU_Read();
 800581c:	f7ff fb70 	bl	8004f00 <IMU_Read>

	  /* SENSOR READ END */

	  /* CALCULATIONS BEGIN */
	  t2 = HAL_GetTick();
 8005820:	f001 fa76 	bl	8006d10 <HAL_GetTick>
 8005824:	4603      	mov	r3, r0
 8005826:	461a      	mov	r2, r3
 8005828:	4b67      	ldr	r3, [pc, #412]	; (80059c8 <Start_AdvancedMode+0x1c8>)
 800582a:	601a      	str	r2, [r3, #0]
//	  calculate_orientation((t2 - t1) / 1000.0f); // @henry: adaptive frequency was way too fast
	  calculate_orientation(0.02);
 800582c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80059cc <Start_AdvancedMode+0x1cc>
 8005830:	f7fb fbb8 	bl	8000fa4 <calculate_orientation>
	  t1 = t2;
 8005834:	4b64      	ldr	r3, [pc, #400]	; (80059c8 <Start_AdvancedMode+0x1c8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a62      	ldr	r2, [pc, #392]	; (80059c4 <Start_AdvancedMode+0x1c4>)
 800583a:	6013      	str	r3, [r2, #0]
	  calculate_gestures();
 800583c:	f7fb fa24 	bl	8000c88 <calculate_gestures>

	  /* CALCULATIONS END*/

	  /* OUTPUT BEGIN */
	  output.channel_Val[0] = DAC_resting[0] + (gimbal_pitch - 0.5) * DAC_factor[0]; // pitch
 8005840:	4b63      	ldr	r3, [pc, #396]	; (80059d0 <Start_AdvancedMode+0x1d0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f7fa fe6d 	bl	8000524 <__aeabi_i2d>
 800584a:	4604      	mov	r4, r0
 800584c:	460d      	mov	r5, r1
 800584e:	4b61      	ldr	r3, [pc, #388]	; (80059d4 <Start_AdvancedMode+0x1d4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fa fe78 	bl	8000548 <__aeabi_f2d>
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	4b5e      	ldr	r3, [pc, #376]	; (80059d8 <Start_AdvancedMode+0x1d8>)
 800585e:	f7fa fd13 	bl	8000288 <__aeabi_dsub>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4690      	mov	r8, r2
 8005868:	4699      	mov	r9, r3
 800586a:	4b5c      	ldr	r3, [pc, #368]	; (80059dc <Start_AdvancedMode+0x1dc>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f7fa fe58 	bl	8000524 <__aeabi_i2d>
 8005874:	4602      	mov	r2, r0
 8005876:	460b      	mov	r3, r1
 8005878:	4640      	mov	r0, r8
 800587a:	4649      	mov	r1, r9
 800587c:	f7fa febc 	bl	80005f8 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4620      	mov	r0, r4
 8005886:	4629      	mov	r1, r5
 8005888:	f7fa fd00 	bl	800028c <__adddf3>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4610      	mov	r0, r2
 8005892:	4619      	mov	r1, r3
 8005894:	f7fb f988 	bl	8000ba8 <__aeabi_d2uiz>
 8005898:	4603      	mov	r3, r0
 800589a:	b29a      	uxth	r2, r3
 800589c:	4b50      	ldr	r3, [pc, #320]	; (80059e0 <Start_AdvancedMode+0x1e0>)
 800589e:	805a      	strh	r2, [r3, #2]
	  output.channel_Val[1] = DAC_resting[1] + (gimbal_roll - 0.5) * DAC_factor[1]; // roll
 80058a0:	4b4b      	ldr	r3, [pc, #300]	; (80059d0 <Start_AdvancedMode+0x1d0>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fa fe3d 	bl	8000524 <__aeabi_i2d>
 80058aa:	4604      	mov	r4, r0
 80058ac:	460d      	mov	r5, r1
 80058ae:	4b4d      	ldr	r3, [pc, #308]	; (80059e4 <Start_AdvancedMode+0x1e4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fa fe48 	bl	8000548 <__aeabi_f2d>
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	4b46      	ldr	r3, [pc, #280]	; (80059d8 <Start_AdvancedMode+0x1d8>)
 80058be:	f7fa fce3 	bl	8000288 <__aeabi_dsub>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4690      	mov	r8, r2
 80058c8:	4699      	mov	r9, r3
 80058ca:	4b44      	ldr	r3, [pc, #272]	; (80059dc <Start_AdvancedMode+0x1dc>)
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fa fe28 	bl	8000524 <__aeabi_i2d>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	4640      	mov	r0, r8
 80058da:	4649      	mov	r1, r9
 80058dc:	f7fa fe8c 	bl	80005f8 <__aeabi_dmul>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4620      	mov	r0, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	f7fa fcd0 	bl	800028c <__adddf3>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4610      	mov	r0, r2
 80058f2:	4619      	mov	r1, r3
 80058f4:	f7fb f958 	bl	8000ba8 <__aeabi_d2uiz>
 80058f8:	4603      	mov	r3, r0
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	4b38      	ldr	r3, [pc, #224]	; (80059e0 <Start_AdvancedMode+0x1e0>)
 80058fe:	809a      	strh	r2, [r3, #4]
	  output.channel_Val[2] = DAC_resting[2] + (gimbal_throttle * 2) * DAC_factor[2]; // throttle
 8005900:	4b33      	ldr	r3, [pc, #204]	; (80059d0 <Start_AdvancedMode+0x1d0>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800590c:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <Start_AdvancedMode+0x1e8>)
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005916:	4b31      	ldr	r3, [pc, #196]	; (80059dc <Start_AdvancedMode+0x1dc>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800592a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592e:	ee17 3a90 	vmov	r3, s15
 8005932:	b29a      	uxth	r2, r3
 8005934:	4b2a      	ldr	r3, [pc, #168]	; (80059e0 <Start_AdvancedMode+0x1e0>)
 8005936:	80da      	strh	r2, [r3, #6]
	  output.channel_Val[3] = DAC_resting[3] + (gimbal_yaw - 0.5) * DAC_factor[3]; // yaw
 8005938:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <Start_AdvancedMode+0x1d0>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4618      	mov	r0, r3
 800593e:	f7fa fdf1 	bl	8000524 <__aeabi_i2d>
 8005942:	4604      	mov	r4, r0
 8005944:	460d      	mov	r5, r1
 8005946:	4b29      	ldr	r3, [pc, #164]	; (80059ec <Start_AdvancedMode+0x1ec>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f7fa fdfc 	bl	8000548 <__aeabi_f2d>
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <Start_AdvancedMode+0x1d8>)
 8005956:	f7fa fc97 	bl	8000288 <__aeabi_dsub>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4690      	mov	r8, r2
 8005960:	4699      	mov	r9, r3
 8005962:	4b1e      	ldr	r3, [pc, #120]	; (80059dc <Start_AdvancedMode+0x1dc>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	4618      	mov	r0, r3
 8005968:	f7fa fddc 	bl	8000524 <__aeabi_i2d>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4640      	mov	r0, r8
 8005972:	4649      	mov	r1, r9
 8005974:	f7fa fe40 	bl	80005f8 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fc84 	bl	800028c <__adddf3>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4610      	mov	r0, r2
 800598a:	4619      	mov	r1, r3
 800598c:	f7fb f90c 	bl	8000ba8 <__aeabi_d2uiz>
 8005990:	4603      	mov	r3, r0
 8005992:	b29a      	uxth	r2, r3
 8005994:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <Start_AdvancedMode+0x1e0>)
 8005996:	811a      	strh	r2, [r3, #8]
	  MCP4728_Write_AllChannels_Diff(&hi2c2, output);
 8005998:	4b11      	ldr	r3, [pc, #68]	; (80059e0 <Start_AdvancedMode+0x1e0>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	4611      	mov	r1, r2
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	4610      	mov	r0, r2
 80059a2:	891a      	ldrh	r2, [r3, #8]
 80059a4:	2300      	movs	r3, #0
 80059a6:	f362 030f 	bfi	r3, r2, #0, #16
 80059aa:	4602      	mov	r2, r0
 80059ac:	4810      	ldr	r0, [pc, #64]	; (80059f0 <Start_AdvancedMode+0x1f0>)
 80059ae:	f7fc ffca 	bl	8002946 <MCP4728_Write_AllChannels_Diff>
  while (state == MODE_ADVANCED) {
 80059b2:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <Start_AdvancedMode+0x1f4>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	f43f af2e 	beq.w	8005818 <Start_AdvancedMode+0x18>

	  /* OUTPUT END */
  }
}
 80059bc:	bf00      	nop
 80059be:	bf00      	nop
 80059c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80059c4:	20000cdc 	.word	0x20000cdc
 80059c8:	20000ce0 	.word	0x20000ce0
 80059cc:	3ca3d70a 	.word	0x3ca3d70a
 80059d0:	20000ce4 	.word	0x20000ce4
 80059d4:	20000c5c 	.word	0x20000c5c
 80059d8:	3fe00000 	.word	0x3fe00000
 80059dc:	20000040 	.word	0x20000040
 80059e0:	20000264 	.word	0x20000264
 80059e4:	20000c58 	.word	0x20000c58
 80059e8:	20000c64 	.word	0x20000c64
 80059ec:	20000c60 	.word	0x20000c60
 80059f0:	20000afc 	.word	0x20000afc
 80059f4:	20000cf4 	.word	0x20000cf4

080059f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b09e      	sub	sp, #120	; 0x78
 80059fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a02:	2228      	movs	r2, #40	; 0x28
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f005 fa5a 	bl	800aec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a1c:	463b      	mov	r3, r7
 8005a1e:	223c      	movs	r2, #60	; 0x3c
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f005 fa4c 	bl	800aec0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a30:	2310      	movs	r3, #16
 8005a32:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a34:	2302      	movs	r3, #2
 8005a36:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8005a3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005a40:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005a46:	4618      	mov	r0, r3
 8005a48:	f003 facc 	bl	8008fe4 <HAL_RCC_OscConfig>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8005a52:	f000 fc5b 	bl	800630c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a56:	230f      	movs	r3, #15
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a62:	2300      	movs	r3, #0
 8005a64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a66:	2300      	movs	r3, #0
 8005a68:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005a6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a6e:	2100      	movs	r1, #0
 8005a70:	4618      	mov	r0, r3
 8005a72:	f004 faf5 	bl	800a060 <HAL_RCC_ClockConfig>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8005a7c:	f000 fc46 	bl	800630c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 8005a80:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005a84:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8005a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a8a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8005a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8005a92:	2300      	movs	r3, #0
 8005a94:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8005a96:	2300      	movs	r3, #0
 8005a98:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a9a:	463b      	mov	r3, r7
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f004 fcc5 	bl	800a42c <HAL_RCCEx_PeriphCLKConfig>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8005aa8:	f000 fc30 	bl	800630c <Error_Handler>
  }
}
 8005aac:	bf00      	nop
 8005aae:	3778      	adds	r7, #120	; 0x78
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08a      	sub	sp, #40	; 0x28
 8005ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005aba:	f107 031c 	add.w	r3, r7, #28
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	609a      	str	r2, [r3, #8]
 8005ad0:	60da      	str	r2, [r3, #12]
 8005ad2:	611a      	str	r2, [r3, #16]
 8005ad4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8005ad6:	4b4c      	ldr	r3, [pc, #304]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005ad8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005adc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005ade:	4b4a      	ldr	r3, [pc, #296]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005ae4:	4b48      	ldr	r3, [pc, #288]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005aea:	4b47      	ldr	r3, [pc, #284]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005af0:	4b45      	ldr	r3, [pc, #276]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005af6:	4b44      	ldr	r3, [pc, #272]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005afe:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005b04:	4b40      	ldr	r3, [pc, #256]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b06:	2201      	movs	r2, #1
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005b0a:	4b3f      	ldr	r3, [pc, #252]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005b10:	4b3d      	ldr	r3, [pc, #244]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005b16:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005b1e:	4b3a      	ldr	r3, [pc, #232]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b20:	2204      	movs	r2, #4
 8005b22:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005b24:	4b38      	ldr	r3, [pc, #224]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005b2a:	4b37      	ldr	r3, [pc, #220]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b30:	4835      	ldr	r0, [pc, #212]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b32:	f001 f91d 	bl	8006d70 <HAL_ADC_Init>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8005b3c:	f000 fbe6 	bl	800630c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005b44:	f107 031c 	add.w	r3, r7, #28
 8005b48:	4619      	mov	r1, r3
 8005b4a:	482f      	ldr	r0, [pc, #188]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b4c:	f001 fddc 	bl	8007708 <HAL_ADCEx_MultiModeConfigChannel>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8005b56:	f000 fbd9 	bl	800630c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005b62:	2300      	movs	r3, #0
 8005b64:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4824      	ldr	r0, [pc, #144]	; (8005c08 <MX_ADC1_Init+0x154>)
 8005b78:	f001 fada 	bl	8007130 <HAL_ADC_ConfigChannel>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8005b82:	f000 fbc3 	bl	800630c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC_Calibrate(ADC1);
 8005b86:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005b8a:	f7ff f95d 	bl	8004e48 <ADC_Calibrate>
//  ADC_ADVREGEN(ADC1); // @henry
//  ADC12_COMMON->CCR|= ADC_CCR_VREFEN; // @henry

  ADC1->CR |= ADC_CR_ADEN; // Enable ADC
 8005b8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b98:	f043 0301 	orr.w	r3, r3, #1
 8005b9c:	6093      	str	r3, [r2, #8]
//  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC1->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005b9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005ba8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bac:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR &= ~0xC; // 12-bit Resolution
 8005bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005bb8:	f023 030c 	bic.w	r3, r3, #12
 8005bbc:	60d3      	str	r3, [r2, #12]

  ADC1->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005bbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005bc8:	f023 030f 	bic.w	r3, r3, #15
 8005bcc:	6313      	str	r3, [r2, #48]	; 0x30
  ADC1->SQR1 |= 0x1 << 6; // Channel 1 of ADC1
 8005bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bdc:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC1->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005bde:	bf00      	nop
 8005be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f8      	beq.n	8005be0 <MX_ADC1_Init+0x12c>
  ADC1->CR |= ADC_CR_ADSTART; // Start the ADC
 8005bee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005bf8:	f043 0304 	orr.w	r3, r3, #4
 8005bfc:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC1_Init 2 */

}
 8005bfe:	bf00      	nop
 8005c00:	3728      	adds	r7, #40	; 0x28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000968 	.word	0x20000968

08005c0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005c12:	463b      	mov	r3, r7
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
 8005c1c:	60da      	str	r2, [r3, #12]
 8005c1e:	611a      	str	r2, [r3, #16]
 8005c20:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8005c22:	4b3e      	ldr	r3, [pc, #248]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c24:	4a3e      	ldr	r2, [pc, #248]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005c26:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005c28:	4b3c      	ldr	r3, [pc, #240]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005c2e:	4b3b      	ldr	r3, [pc, #236]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005c34:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005c3a:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005c40:	4b36      	ldr	r3, [pc, #216]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005c48:	4b34      	ldr	r3, [pc, #208]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005c4e:	4b33      	ldr	r3, [pc, #204]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005c54:	4b31      	ldr	r3, [pc, #196]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005c5a:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005c60:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005c68:	4b2c      	ldr	r3, [pc, #176]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8005c6e:	4b2b      	ldr	r3, [pc, #172]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005c74:	4b29      	ldr	r3, [pc, #164]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005c7a:	4828      	ldr	r0, [pc, #160]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005c7c:	f001 f878 	bl	8006d70 <HAL_ADC_Init>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8005c86:	f000 fb41 	bl	800630c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	481d      	ldr	r0, [pc, #116]	; (8005d1c <MX_ADC2_Init+0x110>)
 8005ca8:	f001 fa42 	bl	8007130 <HAL_ADC_ConfigChannel>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8005cb2:	f000 fb2b 	bl	800630c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC_Calibrate(ADC2);
 8005cb6:	481a      	ldr	r0, [pc, #104]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cb8:	f7ff f8c6 	bl	8004e48 <ADC_Calibrate>

  ADC2->CR |= ADC_CR_ADEN; // Enable ADC
 8005cbc:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	6093      	str	r3, [r2, #8]
//  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC2->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005cc8:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cd2:	60d3      	str	r3, [r2, #12]
  ADC2->CFGR &= ~0xC; // 12-bit Resolution
 8005cd4:	4b12      	ldr	r3, [pc, #72]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4a11      	ldr	r2, [pc, #68]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cda:	f023 030c 	bic.w	r3, r3, #12
 8005cde:	60d3      	str	r3, [r2, #12]

  ADC2->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	4a0e      	ldr	r2, [pc, #56]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005ce6:	f023 030f 	bic.w	r3, r3, #15
 8005cea:	6313      	str	r3, [r2, #48]	; 0x30
  ADC2->SQR1 |= 0x3 << 6; // Channel 3 of ADC2
 8005cec:	4b0c      	ldr	r3, [pc, #48]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	4a0b      	ldr	r2, [pc, #44]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cf6:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC2->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005cf8:	bf00      	nop
 8005cfa:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f9      	beq.n	8005cfa <MX_ADC2_Init+0xee>
  ADC2->CR |= ADC_CR_ADSTART; // Start the ADC
 8005d06:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	4a05      	ldr	r2, [pc, #20]	; (8005d20 <MX_ADC2_Init+0x114>)
 8005d0c:	f043 0304 	orr.w	r3, r3, #4
 8005d10:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC2_Init 2 */

}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	200009b8 	.word	0x200009b8
 8005d20:	50000100 	.word	0x50000100

08005d24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	; 0x28
 8005d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8005d2a:	f107 031c 	add.w	r3, r7, #28
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005d36:	1d3b      	adds	r3, r7, #4
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8005d46:	4b44      	ldr	r3, [pc, #272]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d48:	4a44      	ldr	r2, [pc, #272]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005d4a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005d4c:	4b42      	ldr	r3, [pc, #264]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005d52:	4b41      	ldr	r3, [pc, #260]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005d58:	4b3f      	ldr	r3, [pc, #252]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005d5e:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005d64:	4b3c      	ldr	r3, [pc, #240]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005d6c:	4b3a      	ldr	r3, [pc, #232]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d72:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d78:	4b37      	ldr	r3, [pc, #220]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8005d7e:	4b36      	ldr	r3, [pc, #216]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005d84:	4b34      	ldr	r3, [pc, #208]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005d8c:	4b32      	ldr	r3, [pc, #200]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d8e:	2204      	movs	r2, #4
 8005d90:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8005d92:	4b31      	ldr	r3, [pc, #196]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005d98:	4b2f      	ldr	r3, [pc, #188]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005d9e:	482e      	ldr	r0, [pc, #184]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005da0:	f000 ffe6 	bl	8006d70 <HAL_ADC_Init>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8005daa:	f000 faaf 	bl	800630c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8005db2:	f107 031c 	add.w	r3, r7, #28
 8005db6:	4619      	mov	r1, r3
 8005db8:	4827      	ldr	r0, [pc, #156]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005dba:	f001 fca5 	bl	8007708 <HAL_ADCEx_MultiModeConfigChannel>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8005dc4:	f000 faa2 	bl	800630c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005de0:	1d3b      	adds	r3, r7, #4
 8005de2:	4619      	mov	r1, r3
 8005de4:	481c      	ldr	r0, [pc, #112]	; (8005e58 <MX_ADC3_Init+0x134>)
 8005de6:	f001 f9a3 	bl	8007130 <HAL_ADC_ConfigChannel>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8005df0:	f000 fa8c 	bl	800630c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  ADC_Calibrate(ADC3);
 8005df4:	4819      	ldr	r0, [pc, #100]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005df6:	f7ff f827 	bl	8004e48 <ADC_Calibrate>

  ADC3->CR |= ADC_CR_ADEN; // Enable ADC
 8005dfa:	4b18      	ldr	r3, [pc, #96]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	4a17      	ldr	r2, [pc, #92]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e00:	f043 0301 	orr.w	r3, r3, #1
 8005e04:	6093      	str	r3, [r2, #8]
//  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC3->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005e06:	4b15      	ldr	r3, [pc, #84]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	4a14      	ldr	r2, [pc, #80]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005e10:	60d3      	str	r3, [r2, #12]
  ADC3->CFGR &= ~0xC; // 12-bit Resolution
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4a11      	ldr	r2, [pc, #68]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e18:	f023 030c 	bic.w	r3, r3, #12
 8005e1c:	60d3      	str	r3, [r2, #12]

  ADC3->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a0e      	ldr	r2, [pc, #56]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e24:	f023 030f 	bic.w	r3, r3, #15
 8005e28:	6313      	str	r3, [r2, #48]	; 0x30
  ADC3->SQR1 |= 0x1 << 6; // Channel 1 of ADC3
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	4a0b      	ldr	r2, [pc, #44]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e34:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC3->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005e36:	bf00      	nop
 8005e38:	4b08      	ldr	r3, [pc, #32]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f9      	beq.n	8005e38 <MX_ADC3_Init+0x114>
  ADC3->CR |= ADC_CR_ADSTART; // Start the ADC
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <MX_ADC3_Init+0x138>)
 8005e4a:	f043 0304 	orr.w	r3, r3, #4
 8005e4e:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC3_Init 2 */

}
 8005e50:	bf00      	nop
 8005e52:	3728      	adds	r7, #40	; 0x28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000a08 	.word	0x20000a08
 8005e5c:	50000400 	.word	0x50000400

08005e60 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005e66:	463b      	mov	r3, r7
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	611a      	str	r2, [r3, #16]
 8005e74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8005e76:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005e78:	4a3e      	ldr	r2, [pc, #248]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005e7a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005e7c:	4b3c      	ldr	r3, [pc, #240]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8005e82:	4b3b      	ldr	r3, [pc, #236]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005e88:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8005e8e:	4b38      	ldr	r3, [pc, #224]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8005e94:	4b36      	ldr	r3, [pc, #216]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005e9c:	4b34      	ldr	r3, [pc, #208]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ea2:	4b33      	ldr	r3, [pc, #204]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ea8:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8005eae:	4b30      	ldr	r3, [pc, #192]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8005eb4:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005ebc:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005ebe:	2204      	movs	r2, #4
 8005ec0:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8005ec2:	4b2b      	ldr	r3, [pc, #172]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005ec8:	4b29      	ldr	r3, [pc, #164]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8005ece:	4828      	ldr	r0, [pc, #160]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005ed0:	f000 ff4e 	bl	8006d70 <HAL_ADC_Init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8005eda:	f000 fa17 	bl	800630c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8005ef6:	463b      	mov	r3, r7
 8005ef8:	4619      	mov	r1, r3
 8005efa:	481d      	ldr	r0, [pc, #116]	; (8005f70 <MX_ADC4_Init+0x110>)
 8005efc:	f001 f918 	bl	8007130 <HAL_ADC_ConfigChannel>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8005f06:	f000 fa01 	bl	800630c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */
  ADC_Calibrate(ADC4);
 8005f0a:	481a      	ldr	r0, [pc, #104]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f0c:	f7fe ff9c 	bl	8004e48 <ADC_Calibrate>

  ADC4->CR |= ADC_CR_ADEN; // Enable ADC
 8005f10:	4b18      	ldr	r3, [pc, #96]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a17      	ldr	r2, [pc, #92]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	6093      	str	r3, [r2, #8]
//  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready

  ADC4->CFGR |= ADC_CFGR_CONT; //Continuous Conversion Mode
 8005f1c:	4b15      	ldr	r3, [pc, #84]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a14      	ldr	r2, [pc, #80]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f26:	60d3      	str	r3, [r2, #12]
  ADC4->CFGR &= ~0xC; // 12-bit Resolution
 8005f28:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a11      	ldr	r2, [pc, #68]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f2e:	f023 030c 	bic.w	r3, r3, #12
 8005f32:	60d3      	str	r3, [r2, #12]

  ADC4->SQR1 &= ~0xF; // 1 conversion in regular channel conversion sequence
 8005f34:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	4a0e      	ldr	r2, [pc, #56]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f3a:	f023 030f 	bic.w	r3, r3, #15
 8005f3e:	6313      	str	r3, [r2, #48]	; 0x30
  ADC4->SQR1 |= 0x1 << 6; // Channel 1 of ADC4
 8005f40:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	4a0b      	ldr	r2, [pc, #44]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f4a:	6313      	str	r3, [r2, #48]	; 0x30

  while ((ADC4->ISR & ADC_ISR_ADRDY) == 0); // Wait for ADC to be ready
 8005f4c:	bf00      	nop
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f9      	beq.n	8005f4e <MX_ADC4_Init+0xee>
  ADC4->CR |= ADC_CR_ADSTART; // Start the ADC
 8005f5a:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	4a05      	ldr	r2, [pc, #20]	; (8005f74 <MX_ADC4_Init+0x114>)
 8005f60:	f043 0304 	orr.w	r3, r3, #4
 8005f64:	6093      	str	r3, [r2, #8]
  /* USER CODE END ADC4_Init 2 */

}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000a58 	.word	0x20000a58
 8005f74:	50000500 	.word	0x50000500

08005f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <MX_I2C1_Init+0x74>)
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <MX_I2C1_Init+0x78>)
 8005f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8005f82:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <MX_I2C1_Init+0x74>)
 8005f84:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <MX_I2C1_Init+0x7c>)
 8005f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005f88:	4b18      	ldr	r3, [pc, #96]	; (8005fec <MX_I2C1_Init+0x74>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f8e:	4b17      	ldr	r3, [pc, #92]	; (8005fec <MX_I2C1_Init+0x74>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f94:	4b15      	ldr	r3, [pc, #84]	; (8005fec <MX_I2C1_Init+0x74>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005f9a:	4b14      	ldr	r3, [pc, #80]	; (8005fec <MX_I2C1_Init+0x74>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005fa0:	4b12      	ldr	r3, [pc, #72]	; (8005fec <MX_I2C1_Init+0x74>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fa6:	4b11      	ldr	r3, [pc, #68]	; (8005fec <MX_I2C1_Init+0x74>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <MX_I2C1_Init+0x74>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fb2:	480e      	ldr	r0, [pc, #56]	; (8005fec <MX_I2C1_Init+0x74>)
 8005fb4:	f002 f8fa 	bl	80081ac <HAL_I2C_Init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005fbe:	f000 f9a5 	bl	800630c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4809      	ldr	r0, [pc, #36]	; (8005fec <MX_I2C1_Init+0x74>)
 8005fc6:	f002 ff75 	bl	8008eb4 <HAL_I2CEx_ConfigAnalogFilter>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005fd0:	f000 f99c 	bl	800630c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4805      	ldr	r0, [pc, #20]	; (8005fec <MX_I2C1_Init+0x74>)
 8005fd8:	f002 ffb7 	bl	8008f4a <HAL_I2CEx_ConfigDigitalFilter>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005fe2:	f000 f993 	bl	800630c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005fe6:	bf00      	nop
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000aa8 	.word	0x20000aa8
 8005ff0:	40005400 	.word	0x40005400
 8005ff4:	2000090e 	.word	0x2000090e

08005ff8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005ffc:	4b1b      	ldr	r3, [pc, #108]	; (800606c <MX_I2C2_Init+0x74>)
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <MX_I2C2_Init+0x78>)
 8006000:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8006002:	4b1a      	ldr	r3, [pc, #104]	; (800606c <MX_I2C2_Init+0x74>)
 8006004:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <MX_I2C2_Init+0x7c>)
 8006006:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006008:	4b18      	ldr	r3, [pc, #96]	; (800606c <MX_I2C2_Init+0x74>)
 800600a:	2200      	movs	r2, #0
 800600c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800600e:	4b17      	ldr	r3, [pc, #92]	; (800606c <MX_I2C2_Init+0x74>)
 8006010:	2201      	movs	r2, #1
 8006012:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006014:	4b15      	ldr	r3, [pc, #84]	; (800606c <MX_I2C2_Init+0x74>)
 8006016:	2200      	movs	r2, #0
 8006018:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <MX_I2C2_Init+0x74>)
 800601c:	2200      	movs	r2, #0
 800601e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006020:	4b12      	ldr	r3, [pc, #72]	; (800606c <MX_I2C2_Init+0x74>)
 8006022:	2200      	movs	r2, #0
 8006024:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006026:	4b11      	ldr	r3, [pc, #68]	; (800606c <MX_I2C2_Init+0x74>)
 8006028:	2200      	movs	r2, #0
 800602a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800602c:	4b0f      	ldr	r3, [pc, #60]	; (800606c <MX_I2C2_Init+0x74>)
 800602e:	2200      	movs	r2, #0
 8006030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006032:	480e      	ldr	r0, [pc, #56]	; (800606c <MX_I2C2_Init+0x74>)
 8006034:	f002 f8ba 	bl	80081ac <HAL_I2C_Init>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800603e:	f000 f965 	bl	800630c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006042:	2100      	movs	r1, #0
 8006044:	4809      	ldr	r0, [pc, #36]	; (800606c <MX_I2C2_Init+0x74>)
 8006046:	f002 ff35 	bl	8008eb4 <HAL_I2CEx_ConfigAnalogFilter>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006050:	f000 f95c 	bl	800630c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006054:	2100      	movs	r1, #0
 8006056:	4805      	ldr	r0, [pc, #20]	; (800606c <MX_I2C2_Init+0x74>)
 8006058:	f002 ff77 	bl	8008f4a <HAL_I2CEx_ConfigDigitalFilter>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006062:	f000 f953 	bl	800630c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006066:	bf00      	nop
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000afc 	.word	0x20000afc
 8006070:	40005800 	.word	0x40005800
 8006074:	2000090e 	.word	0x2000090e

08006078 <MX_SPI1_Init>:
* @brief SPI1 Initialization Function
* @param None
* @retval None
*/
static void MX_SPI1_Init(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SPI1_Init 0 */
	/* USER CODE END SPI1_Init 0 */
	/* USER CODE BEGIN SPI1_Init 1 */
	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800607c:	4b34      	ldr	r3, [pc, #208]	; (8006150 <MX_SPI1_Init+0xd8>)
 800607e:	4a35      	ldr	r2, [pc, #212]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006080:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8006082:	4b33      	ldr	r3, [pc, #204]	; (8006150 <MX_SPI1_Init+0xd8>)
 8006084:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006088:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800608a:	4b31      	ldr	r3, [pc, #196]	; (8006150 <MX_SPI1_Init+0xd8>)
 800608c:	2200      	movs	r2, #0
 800608e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8006090:	4b2f      	ldr	r3, [pc, #188]	; (8006150 <MX_SPI1_Init+0xd8>)
 8006092:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006096:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006098:	4b2d      	ldr	r3, [pc, #180]	; (8006150 <MX_SPI1_Init+0xd8>)
 800609a:	2200      	movs	r2, #0
 800609c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800609e:	4b2c      	ldr	r3, [pc, #176]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80060a4:	4b2a      	ldr	r3, [pc, #168]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80060aa:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80060ac:	4b28      	ldr	r3, [pc, #160]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060ae:	2208      	movs	r2, #8
 80060b0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80060b2:	4b27      	ldr	r3, [pc, #156]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80060b8:	4b25      	ldr	r3, [pc, #148]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060be:	4b24      	ldr	r3, [pc, #144]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80060c4:	4b22      	ldr	r3, [pc, #136]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060c6:	2207      	movs	r2, #7
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80060ca:	4b21      	ldr	r3, [pc, #132]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80060d0:	4b1f      	ldr	r3, [pc, #124]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060d2:	2208      	movs	r2, #8
 80060d4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80060d6:	481e      	ldr	r0, [pc, #120]	; (8006150 <MX_SPI1_Init+0xd8>)
 80060d8:	f004 fb58 	bl	800a78c <HAL_SPI_Init>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <MX_SPI1_Init+0x6e>
	{
	Error_Handler();
 80060e2:	f000 f913 	bl	800630c <Error_Handler>
	}
	GPIOB->ODR |= 0x1;
 80060e6:	4b1c      	ldr	r3, [pc, #112]	; (8006158 <MX_SPI1_Init+0xe0>)
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <MX_SPI1_Init+0xe0>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= 0x18;
 80060f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80060fc:	f043 0318 	orr.w	r3, r3, #24
 8006100:	6153      	str	r3, [r2, #20]

	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006102:	4b16      	ldr	r3, [pc, #88]	; (800615c <MX_SPI1_Init+0xe4>)
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	4a15      	ldr	r2, [pc, #84]	; (800615c <MX_SPI1_Init+0xe4>)
 8006108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800610c:	6193      	str	r3, [r2, #24]
	SPI1->CR2 &= ~SPI_CR2_DS;
 800610e:	4b11      	ldr	r3, [pc, #68]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4a10      	ldr	r2, [pc, #64]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006118:	6053      	str	r3, [r2, #4]
	SPI1->CR1 &= ~(SPI_CR1_BR);
 800611a:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <MX_SPI1_Init+0xdc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a0d      	ldr	r2, [pc, #52]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006120:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006124:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_MSTR;
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a0a      	ldr	r2, [pc, #40]	; (8006154 <MX_SPI1_Init+0xdc>)
 800612c:	f043 0304 	orr.w	r3, r3, #4
 8006130:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI;
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a07      	ldr	r2, [pc, #28]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006138:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800613c:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SPE;
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a04      	ldr	r2, [pc, #16]	; (8006154 <MX_SPI1_Init+0xdc>)
 8006144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006148:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN SPI1_Init 2 */
	/* USER CODE END SPI1_Init 2 */
}
 800614a:	bf00      	nop
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000b50 	.word	0x20000b50
 8006154:	40013000 	.word	0x40013000
 8006158:	48000400 	.word	0x48000400
 800615c:	40021000 	.word	0x40021000

08006160 <MX_TIM16_Init>:
* @brief TIM16 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM16_Init(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM16_Init 0 */
	/* USER CODE END TIM16_Init 0 */
	/* USER CODE BEGIN TIM16_Init 1 */
	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8006164:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <MX_TIM16_Init+0x48>)
 8006166:	4a11      	ldr	r2, [pc, #68]	; (80061ac <MX_TIM16_Init+0x4c>)
 8006168:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 8000 - 1;
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <MX_TIM16_Init+0x48>)
 800616c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006170:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <MX_TIM16_Init+0x48>)
 8006174:	2200      	movs	r2, #0
 8006176:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 1000 - 1;
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <MX_TIM16_Init+0x48>)
 800617a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800617e:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <MX_TIM16_Init+0x48>)
 8006182:	2200      	movs	r2, #0
 8006184:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8006186:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <MX_TIM16_Init+0x48>)
 8006188:	2200      	movs	r2, #0
 800618a:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <MX_TIM16_Init+0x48>)
 800618e:	2200      	movs	r2, #0
 8006190:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <MX_TIM16_Init+0x48>)
 8006194:	f004 fba5 	bl	800a8e2 <HAL_TIM_Base_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <MX_TIM16_Init+0x42>
	{
	Error_Handler();
 800619e:	f000 f8b5 	bl	800630c <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	/* USER CODE END TIM16_Init 2 */
}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000bf8 	.word	0x20000bf8
 80061ac:	40014400 	.word	0x40014400

080061b0 <MX_DMA_Init>:

/**
* Enable DMA controller clock
*/
static void MX_DMA_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80061b6:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <MX_DMA_Init+0x38>)
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4a0b      	ldr	r2, [pc, #44]	; (80061e8 <MX_DMA_Init+0x38>)
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	6153      	str	r3, [r2, #20]
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <MX_DMA_Init+0x38>)
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80061ce:	2200      	movs	r2, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	200d      	movs	r0, #13
 80061d4:	f001 fccb 	bl	8007b6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80061d8:	200d      	movs	r0, #13
 80061da:	f001 fce4 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40021000 	.word	0x40021000

080061ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f2:	f107 0314 	add.w	r3, r7, #20
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	605a      	str	r2, [r3, #4]
 80061fc:	609a      	str	r2, [r3, #8]
 80061fe:	60da      	str	r2, [r3, #12]
 8006200:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006202:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <MX_GPIO_Init+0x114>)
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	4a3e      	ldr	r2, [pc, #248]	; (8006300 <MX_GPIO_Init+0x114>)
 8006208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800620c:	6153      	str	r3, [r2, #20]
 800620e:	4b3c      	ldr	r3, [pc, #240]	; (8006300 <MX_GPIO_Init+0x114>)
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800621a:	4b39      	ldr	r3, [pc, #228]	; (8006300 <MX_GPIO_Init+0x114>)
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	4a38      	ldr	r2, [pc, #224]	; (8006300 <MX_GPIO_Init+0x114>)
 8006220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006224:	6153      	str	r3, [r2, #20]
 8006226:	4b36      	ldr	r3, [pc, #216]	; (8006300 <MX_GPIO_Init+0x114>)
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006232:	4b33      	ldr	r3, [pc, #204]	; (8006300 <MX_GPIO_Init+0x114>)
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	4a32      	ldr	r2, [pc, #200]	; (8006300 <MX_GPIO_Init+0x114>)
 8006238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800623c:	6153      	str	r3, [r2, #20]
 800623e:	4b30      	ldr	r3, [pc, #192]	; (8006300 <MX_GPIO_Init+0x114>)
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006246:	60bb      	str	r3, [r7, #8]
 8006248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800624a:	4b2d      	ldr	r3, [pc, #180]	; (8006300 <MX_GPIO_Init+0x114>)
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	4a2c      	ldr	r2, [pc, #176]	; (8006300 <MX_GPIO_Init+0x114>)
 8006250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006254:	6153      	str	r3, [r2, #20]
 8006256:	4b2a      	ldr	r3, [pc, #168]	; (8006300 <MX_GPIO_Init+0x114>)
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800625e:	607b      	str	r3, [r7, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006262:	4b27      	ldr	r3, [pc, #156]	; (8006300 <MX_GPIO_Init+0x114>)
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	4a26      	ldr	r2, [pc, #152]	; (8006300 <MX_GPIO_Init+0x114>)
 8006268:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800626c:	6153      	str	r3, [r2, #20]
 800626e:	4b24      	ldr	r3, [pc, #144]	; (8006300 <MX_GPIO_Init+0x114>)
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800627a:	2200      	movs	r2, #0
 800627c:	2108      	movs	r1, #8
 800627e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006282:	f001 ff63 	bl	800814c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8006286:	2200      	movs	r2, #0
 8006288:	2101      	movs	r1, #1
 800628a:	481e      	ldr	r0, [pc, #120]	; (8006304 <MX_GPIO_Init+0x118>)
 800628c:	f001 ff5e 	bl	800814c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006290:	2308      	movs	r3, #8
 8006292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006294:	2301      	movs	r3, #1
 8006296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006298:	2300      	movs	r3, #0
 800629a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629c:	2300      	movs	r3, #0
 800629e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062a0:	f107 0314 	add.w	r3, r7, #20
 80062a4:	4619      	mov	r1, r3
 80062a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062aa:	f001 fdbd 	bl	8007e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80062ae:	2301      	movs	r3, #1
 80062b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062b2:	2301      	movs	r3, #1
 80062b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ba:	2300      	movs	r3, #0
 80062bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062be:	f107 0314 	add.w	r3, r7, #20
 80062c2:	4619      	mov	r1, r3
 80062c4:	480f      	ldr	r0, [pc, #60]	; (8006304 <MX_GPIO_Init+0x118>)
 80062c6:	f001 fdaf 	bl	8007e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80062ca:	2303      	movs	r3, #3
 80062cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80062d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80062d4:	2302      	movs	r3, #2
 80062d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4619      	mov	r1, r3
 80062de:	480a      	ldr	r0, [pc, #40]	; (8006308 <MX_GPIO_Init+0x11c>)
 80062e0:	f001 fda2 	bl	8007e28 <HAL_GPIO_Init>
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80062e4:	2200      	movs	r2, #0
 80062e6:	2101      	movs	r1, #1
 80062e8:	2006      	movs	r0, #6
 80062ea:	f001 fc40 	bl	8007b6e <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80062ee:	2200      	movs	r2, #0
 80062f0:	2100      	movs	r1, #0
 80062f2:	2007      	movs	r0, #7
 80062f4:	f001 fc3b 	bl	8007b6e <HAL_NVIC_SetPriority>
//  HAL_NVIC_EnableIRQ(EXTI1_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80062f8:	bf00      	nop
 80062fa:	3728      	adds	r7, #40	; 0x28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40021000 	.word	0x40021000
 8006304:	48000400 	.word	0x48000400
 8006308:	48000800 	.word	0x48000800

0800630c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006310:	b672      	cpsid	i
}
 8006312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006314:	e7fe      	b.n	8006314 <Error_Handler+0x8>
	...

08006318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800631e:	4b0f      	ldr	r3, [pc, #60]	; (800635c <HAL_MspInit+0x44>)
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	4a0e      	ldr	r2, [pc, #56]	; (800635c <HAL_MspInit+0x44>)
 8006324:	f043 0301 	orr.w	r3, r3, #1
 8006328:	6193      	str	r3, [r2, #24]
 800632a:	4b0c      	ldr	r3, [pc, #48]	; (800635c <HAL_MspInit+0x44>)
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006336:	4b09      	ldr	r3, [pc, #36]	; (800635c <HAL_MspInit+0x44>)
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	4a08      	ldr	r2, [pc, #32]	; (800635c <HAL_MspInit+0x44>)
 800633c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006340:	61d3      	str	r3, [r2, #28]
 8006342:	4b06      	ldr	r3, [pc, #24]	; (800635c <HAL_MspInit+0x44>)
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40021000 	.word	0x40021000

08006360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b090      	sub	sp, #64	; 0x40
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006380:	d12e      	bne.n	80063e0 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8006382:	4b66      	ldr	r3, [pc, #408]	; (800651c <HAL_ADC_MspInit+0x1bc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3301      	adds	r3, #1
 8006388:	4a64      	ldr	r2, [pc, #400]	; (800651c <HAL_ADC_MspInit+0x1bc>)
 800638a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800638c:	4b63      	ldr	r3, [pc, #396]	; (800651c <HAL_ADC_MspInit+0x1bc>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d10b      	bne.n	80063ac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8006394:	4b62      	ldr	r3, [pc, #392]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	4a61      	ldr	r2, [pc, #388]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 800639a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639e:	6153      	str	r3, [r2, #20]
 80063a0:	4b5f      	ldr	r3, [pc, #380]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ac:	4b5c      	ldr	r3, [pc, #368]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	4a5b      	ldr	r2, [pc, #364]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80063b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b6:	6153      	str	r3, [r2, #20]
 80063b8:	4b59      	ldr	r3, [pc, #356]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80063c4:	2301      	movs	r3, #1
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063c8:	2303      	movs	r3, #3
 80063ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063cc:	2300      	movs	r3, #0
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063d4:	4619      	mov	r1, r3
 80063d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063da:	f001 fd25 	bl	8007e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80063de:	e099      	b.n	8006514 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a4f      	ldr	r2, [pc, #316]	; (8006524 <HAL_ADC_MspInit+0x1c4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d12e      	bne.n	8006448 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80063ea:	4b4c      	ldr	r3, [pc, #304]	; (800651c <HAL_ADC_MspInit+0x1bc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3301      	adds	r3, #1
 80063f0:	4a4a      	ldr	r2, [pc, #296]	; (800651c <HAL_ADC_MspInit+0x1bc>)
 80063f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80063f4:	4b49      	ldr	r3, [pc, #292]	; (800651c <HAL_ADC_MspInit+0x1bc>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d10b      	bne.n	8006414 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80063fc:	4b48      	ldr	r3, [pc, #288]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	4a47      	ldr	r2, [pc, #284]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 8006402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006406:	6153      	str	r3, [r2, #20]
 8006408:	4b45      	ldr	r3, [pc, #276]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006410:	623b      	str	r3, [r7, #32]
 8006412:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006414:	4b42      	ldr	r3, [pc, #264]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	4a41      	ldr	r2, [pc, #260]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641e:	6153      	str	r3, [r2, #20]
 8006420:	4b3f      	ldr	r3, [pc, #252]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006430:	2303      	movs	r3, #3
 8006432:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006434:	2300      	movs	r3, #0
 8006436:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800643c:	4619      	mov	r1, r3
 800643e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006442:	f001 fcf1 	bl	8007e28 <HAL_GPIO_Init>
}
 8006446:	e065      	b.n	8006514 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC3)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a36      	ldr	r2, [pc, #216]	; (8006528 <HAL_ADC_MspInit+0x1c8>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d12d      	bne.n	80064ae <HAL_ADC_MspInit+0x14e>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8006452:	4b36      	ldr	r3, [pc, #216]	; (800652c <HAL_ADC_MspInit+0x1cc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3301      	adds	r3, #1
 8006458:	4a34      	ldr	r2, [pc, #208]	; (800652c <HAL_ADC_MspInit+0x1cc>)
 800645a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800645c:	4b33      	ldr	r3, [pc, #204]	; (800652c <HAL_ADC_MspInit+0x1cc>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d10b      	bne.n	800647c <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8006464:	4b2e      	ldr	r3, [pc, #184]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	4a2d      	ldr	r2, [pc, #180]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 800646a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800646e:	6153      	str	r3, [r2, #20]
 8006470:	4b2b      	ldr	r3, [pc, #172]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006478:	61bb      	str	r3, [r7, #24]
 800647a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800647c:	4b28      	ldr	r3, [pc, #160]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	4a27      	ldr	r2, [pc, #156]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 8006482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006486:	6153      	str	r3, [r2, #20]
 8006488:	4b25      	ldr	r3, [pc, #148]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006494:	2302      	movs	r3, #2
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006498:	2303      	movs	r3, #3
 800649a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649c:	2300      	movs	r3, #0
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064a4:	4619      	mov	r1, r3
 80064a6:	4822      	ldr	r0, [pc, #136]	; (8006530 <HAL_ADC_MspInit+0x1d0>)
 80064a8:	f001 fcbe 	bl	8007e28 <HAL_GPIO_Init>
}
 80064ac:	e032      	b.n	8006514 <HAL_ADC_MspInit+0x1b4>
  else if(hadc->Instance==ADC4)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a20      	ldr	r2, [pc, #128]	; (8006534 <HAL_ADC_MspInit+0x1d4>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d12d      	bne.n	8006514 <HAL_ADC_MspInit+0x1b4>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80064b8:	4b1c      	ldr	r3, [pc, #112]	; (800652c <HAL_ADC_MspInit+0x1cc>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	4a1b      	ldr	r2, [pc, #108]	; (800652c <HAL_ADC_MspInit+0x1cc>)
 80064c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80064c2:	4b1a      	ldr	r3, [pc, #104]	; (800652c <HAL_ADC_MspInit+0x1cc>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10b      	bne.n	80064e2 <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80064ca:	4b15      	ldr	r3, [pc, #84]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	4a14      	ldr	r2, [pc, #80]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80064d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064d4:	6153      	str	r3, [r2, #20]
 80064d6:	4b12      	ldr	r3, [pc, #72]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80064e2:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	4a0e      	ldr	r2, [pc, #56]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80064e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064ec:	6153      	str	r3, [r2, #20]
 80064ee:	4b0c      	ldr	r3, [pc, #48]	; (8006520 <HAL_ADC_MspInit+0x1c0>)
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80064fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80064fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006500:	2303      	movs	r3, #3
 8006502:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006504:	2300      	movs	r3, #0
 8006506:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800650c:	4619      	mov	r1, r3
 800650e:	480a      	ldr	r0, [pc, #40]	; (8006538 <HAL_ADC_MspInit+0x1d8>)
 8006510:	f001 fc8a 	bl	8007e28 <HAL_GPIO_Init>
}
 8006514:	bf00      	nop
 8006516:	3740      	adds	r7, #64	; 0x40
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20000f44 	.word	0x20000f44
 8006520:	40021000 	.word	0x40021000
 8006524:	50000100 	.word	0x50000100
 8006528:	50000400 	.word	0x50000400
 800652c:	20000f48 	.word	0x20000f48
 8006530:	48000400 	.word	0x48000400
 8006534:	50000500 	.word	0x50000500
 8006538:	48001000 	.word	0x48001000

0800653c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b08e      	sub	sp, #56	; 0x38
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	609a      	str	r2, [r3, #8]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a54      	ldr	r2, [pc, #336]	; (80066ac <HAL_I2C_MspInit+0x170>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d14e      	bne.n	80065fc <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800655e:	4b54      	ldr	r3, [pc, #336]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	4a53      	ldr	r2, [pc, #332]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006568:	6153      	str	r3, [r2, #20]
 800656a:	4b51      	ldr	r3, [pc, #324]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006572:	623b      	str	r3, [r7, #32]
 8006574:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006576:	4b4e      	ldr	r3, [pc, #312]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4a4d      	ldr	r2, [pc, #308]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 800657c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006580:	6153      	str	r3, [r2, #20]
 8006582:	4b4b      	ldr	r3, [pc, #300]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800658e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006594:	2312      	movs	r3, #18
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006598:	2300      	movs	r3, #0
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800659c:	2303      	movs	r3, #3
 800659e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80065a0:	2304      	movs	r3, #4
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a8:	4619      	mov	r1, r3
 80065aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065ae:	f001 fc3b 	bl	8007e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80065b2:	2380      	movs	r3, #128	; 0x80
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065b6:	2312      	movs	r3, #18
 80065b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80065be:	2303      	movs	r3, #3
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80065c2:	2304      	movs	r3, #4
 80065c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ca:	4619      	mov	r1, r3
 80065cc:	4839      	ldr	r0, [pc, #228]	; (80066b4 <HAL_I2C_MspInit+0x178>)
 80065ce:	f001 fc2b 	bl	8007e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80065d2:	4b37      	ldr	r3, [pc, #220]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	4a36      	ldr	r2, [pc, #216]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 80065d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065dc:	61d3      	str	r3, [r2, #28]
 80065de:	4b34      	ldr	r3, [pc, #208]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	69bb      	ldr	r3, [r7, #24]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80065ea:	2200      	movs	r2, #0
 80065ec:	2100      	movs	r1, #0
 80065ee:	201f      	movs	r0, #31
 80065f0:	f001 fabd 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80065f4:	201f      	movs	r0, #31
 80065f6:	f001 fad6 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80065fa:	e052      	b.n	80066a2 <HAL_I2C_MspInit+0x166>
  else if(hi2c->Instance==I2C2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2d      	ldr	r2, [pc, #180]	; (80066b8 <HAL_I2C_MspInit+0x17c>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d14d      	bne.n	80066a2 <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006606:	4b2a      	ldr	r3, [pc, #168]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	4a29      	ldr	r2, [pc, #164]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 800660c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006610:	6153      	str	r3, [r2, #20]
 8006612:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800661e:	4b24      	ldr	r3, [pc, #144]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	4a23      	ldr	r2, [pc, #140]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006628:	6153      	str	r3, [r2, #20]
 800662a:	4b21      	ldr	r3, [pc, #132]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800663a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800663c:	2312      	movs	r3, #18
 800663e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006640:	2300      	movs	r3, #0
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006644:	2303      	movs	r3, #3
 8006646:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006648:	2304      	movs	r3, #4
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800664c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006650:	4619      	mov	r1, r3
 8006652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006656:	f001 fbe7 	bl	8007e28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800665a:	2340      	movs	r3, #64	; 0x40
 800665c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800665e:	2312      	movs	r3, #18
 8006660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006662:	2300      	movs	r3, #0
 8006664:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006666:	2303      	movs	r3, #3
 8006668:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800666a:	2304      	movs	r3, #4
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800666e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006672:	4619      	mov	r1, r3
 8006674:	4811      	ldr	r0, [pc, #68]	; (80066bc <HAL_I2C_MspInit+0x180>)
 8006676:	f001 fbd7 	bl	8007e28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800667a:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006684:	61d3      	str	r3, [r2, #28]
 8006686:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <HAL_I2C_MspInit+0x174>)
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8006692:	2200      	movs	r2, #0
 8006694:	2100      	movs	r1, #0
 8006696:	2021      	movs	r0, #33	; 0x21
 8006698:	f001 fa69 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800669c:	2021      	movs	r0, #33	; 0x21
 800669e:	f001 fa82 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
}
 80066a2:	bf00      	nop
 80066a4:	3738      	adds	r7, #56	; 0x38
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40005400 	.word	0x40005400
 80066b0:	40021000 	.word	0x40021000
 80066b4:	48000400 	.word	0x48000400
 80066b8:	40005800 	.word	0x40005800
 80066bc:	48001400 	.word	0x48001400

080066c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066c8:	f107 0314 	add.w	r3, r7, #20
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	605a      	str	r2, [r3, #4]
 80066d2:	609a      	str	r2, [r3, #8]
 80066d4:	60da      	str	r2, [r3, #12]
 80066d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2a      	ldr	r2, [pc, #168]	; (8006788 <HAL_SPI_MspInit+0xc8>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d14e      	bne.n	8006780 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80066e2:	4b2a      	ldr	r3, [pc, #168]	; (800678c <HAL_SPI_MspInit+0xcc>)
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	4a29      	ldr	r2, [pc, #164]	; (800678c <HAL_SPI_MspInit+0xcc>)
 80066e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066ec:	6193      	str	r3, [r2, #24]
 80066ee:	4b27      	ldr	r3, [pc, #156]	; (800678c <HAL_SPI_MspInit+0xcc>)
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066fa:	4b24      	ldr	r3, [pc, #144]	; (800678c <HAL_SPI_MspInit+0xcc>)
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	4a23      	ldr	r2, [pc, #140]	; (800678c <HAL_SPI_MspInit+0xcc>)
 8006700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006704:	6153      	str	r3, [r2, #20]
 8006706:	4b21      	ldr	r3, [pc, #132]	; (800678c <HAL_SPI_MspInit+0xcc>)
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670e:	60fb      	str	r3, [r7, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8006712:	23b0      	movs	r3, #176	; 0xb0
 8006714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006716:	2302      	movs	r3, #2
 8006718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800671e:	2303      	movs	r3, #3
 8006720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006722:	2305      	movs	r3, #5
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006726:	f107 0314 	add.w	r3, r7, #20
 800672a:	4619      	mov	r1, r3
 800672c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006730:	f001 fb7a 	bl	8007e28 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8006734:	4b16      	ldr	r3, [pc, #88]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 8006736:	4a17      	ldr	r2, [pc, #92]	; (8006794 <HAL_SPI_MspInit+0xd4>)
 8006738:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800673a:	4b15      	ldr	r3, [pc, #84]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 800673c:	2210      	movs	r2, #16
 800673e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006740:	4b13      	ldr	r3, [pc, #76]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 8006742:	2200      	movs	r2, #0
 8006744:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006746:	4b12      	ldr	r3, [pc, #72]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 8006748:	2280      	movs	r2, #128	; 0x80
 800674a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800674c:	4b10      	ldr	r3, [pc, #64]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 800674e:	2200      	movs	r2, #0
 8006750:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006752:	4b0f      	ldr	r3, [pc, #60]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 8006754:	2200      	movs	r2, #0
 8006756:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006758:	4b0d      	ldr	r3, [pc, #52]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 800675a:	2200      	movs	r2, #0
 800675c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800675e:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 8006760:	2200      	movs	r2, #0
 8006762:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006764:	480a      	ldr	r0, [pc, #40]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 8006766:	f001 fa38 	bl	8007bda <HAL_DMA_Init>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8006770:	f7ff fdcc 	bl	800630c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a06      	ldr	r2, [pc, #24]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
 800677a:	4a05      	ldr	r2, [pc, #20]	; (8006790 <HAL_SPI_MspInit+0xd0>)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006780:	bf00      	nop
 8006782:	3728      	adds	r7, #40	; 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40013000 	.word	0x40013000
 800678c:	40021000 	.word	0x40021000
 8006790:	20000bb4 	.word	0x20000bb4
 8006794:	40020030 	.word	0x40020030

08006798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0d      	ldr	r2, [pc, #52]	; (80067dc <HAL_TIM_Base_MspInit+0x44>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d113      	bne.n	80067d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80067aa:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <HAL_TIM_Base_MspInit+0x48>)
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <HAL_TIM_Base_MspInit+0x48>)
 80067b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b4:	6193      	str	r3, [r2, #24]
 80067b6:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <HAL_TIM_Base_MspInit+0x48>)
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80067c2:	2200      	movs	r2, #0
 80067c4:	2100      	movs	r1, #0
 80067c6:	2019      	movs	r0, #25
 80067c8:	f001 f9d1 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80067cc:	2019      	movs	r0, #25
 80067ce:	f001 f9ea 	bl	8007ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40014400 	.word	0x40014400
 80067e0:	40021000 	.word	0x40021000

080067e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80067e8:	e7fe      	b.n	80067e8 <NMI_Handler+0x4>

080067ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067ea:	b480      	push	{r7}
 80067ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067ee:	e7fe      	b.n	80067ee <HardFault_Handler+0x4>

080067f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067f4:	e7fe      	b.n	80067f4 <MemManage_Handler+0x4>

080067f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067f6:	b480      	push	{r7}
 80067f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067fa:	e7fe      	b.n	80067fa <BusFault_Handler+0x4>

080067fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006800:	e7fe      	b.n	8006800 <UsageFault_Handler+0x4>

08006802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006802:	b480      	push	{r7}
 8006804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006806:	bf00      	nop
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006814:	bf00      	nop
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800681e:	b480      	push	{r7}
 8006820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006822:	bf00      	nop
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006830:	f000 fa5a 	bl	8006ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006834:	bf00      	nop
 8006836:	bd80      	pop	{r7, pc}

08006838 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800683c:	2001      	movs	r0, #1
 800683e:	f001 fc9d 	bl	800817c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}

08006846 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800684a:	2002      	movs	r0, #2
 800684c:	f001 fc96 	bl	800817c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006850:	bf00      	nop
 8006852:	bd80      	pop	{r7, pc}

08006854 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006858:	4802      	ldr	r0, [pc, #8]	; (8006864 <DMA1_Channel3_IRQHandler+0x10>)
 800685a:	f001 fa05 	bl	8007c68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800685e:	bf00      	nop
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20000bb4 	.word	0x20000bb4

08006868 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800686c:	4802      	ldr	r0, [pc, #8]	; (8006878 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800686e:	f004 f8f9 	bl	800aa64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006872:	bf00      	nop
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000bf8 	.word	0x20000bf8

0800687c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8006880:	4802      	ldr	r0, [pc, #8]	; (800688c <I2C1_EV_IRQHandler+0x10>)
 8006882:	f002 f845 	bl	8008910 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006886:	bf00      	nop
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000aa8 	.word	0x20000aa8

08006890 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8006894:	4802      	ldr	r0, [pc, #8]	; (80068a0 <I2C2_EV_IRQHandler+0x10>)
 8006896:	f002 f83b 	bl	8008910 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800689a:	bf00      	nop
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000afc 	.word	0x20000afc

080068a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  return 1;
 80068a8:	2301      	movs	r3, #1
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <_kill>:

int _kill(int pid, int sig)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80068be:	f004 fac7 	bl	800ae50 <__errno>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2216      	movs	r2, #22
 80068c6:	601a      	str	r2, [r3, #0]
  return -1;
 80068c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <_exit>:

void _exit (int status)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80068dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff ffe7 	bl	80068b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80068e6:	e7fe      	b.n	80068e6 <_exit+0x12>

080068e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]
 80068f8:	e00a      	b.n	8006910 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80068fa:	f3af 8000 	nop.w
 80068fe:	4601      	mov	r1, r0
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	60ba      	str	r2, [r7, #8]
 8006906:	b2ca      	uxtb	r2, r1
 8006908:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	3301      	adds	r3, #1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	429a      	cmp	r2, r3
 8006916:	dbf0      	blt.n	80068fa <_read+0x12>
  }

  return len;
 8006918:	687b      	ldr	r3, [r7, #4]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b086      	sub	sp, #24
 8006926:	af00      	add	r7, sp, #0
 8006928:	60f8      	str	r0, [r7, #12]
 800692a:	60b9      	str	r1, [r7, #8]
 800692c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	e009      	b.n	8006948 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	60ba      	str	r2, [r7, #8]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	3301      	adds	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	dbf1      	blt.n	8006934 <_write+0x12>
  }
  return len;
 8006950:	687b      	ldr	r3, [r7, #4]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <_close>:

int _close(int file)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006966:	4618      	mov	r0, r3
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006982:	605a      	str	r2, [r3, #4]
  return 0;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <_isatty>:

int _isatty(int file)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800699a:	2301      	movs	r3, #1
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069cc:	4a14      	ldr	r2, [pc, #80]	; (8006a20 <_sbrk+0x5c>)
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <_sbrk+0x60>)
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069d8:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <_sbrk+0x64>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d102      	bne.n	80069e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069e0:	4b11      	ldr	r3, [pc, #68]	; (8006a28 <_sbrk+0x64>)
 80069e2:	4a12      	ldr	r2, [pc, #72]	; (8006a2c <_sbrk+0x68>)
 80069e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069e6:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <_sbrk+0x64>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d207      	bcs.n	8006a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069f4:	f004 fa2c 	bl	800ae50 <__errno>
 80069f8:	4603      	mov	r3, r0
 80069fa:	220c      	movs	r2, #12
 80069fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a02:	e009      	b.n	8006a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a04:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <_sbrk+0x64>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a0a:	4b07      	ldr	r3, [pc, #28]	; (8006a28 <_sbrk+0x64>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	4a05      	ldr	r2, [pc, #20]	; (8006a28 <_sbrk+0x64>)
 8006a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a16:	68fb      	ldr	r3, [r7, #12]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	2000a000 	.word	0x2000a000
 8006a24:	00000400 	.word	0x00000400
 8006a28:	20000f4c 	.word	0x20000f4c
 8006a2c:	20000f68 	.word	0x20000f68

08006a30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a34:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <SystemInit+0x20>)
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3a:	4a05      	ldr	r2, [pc, #20]	; (8006a50 <SystemInit+0x20>)
 8006a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e000ed00 	.word	0xe000ed00

08006a54 <max>:
#include "utils.h"

float max(float a, float b) {
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	ed87 0a01 	vstr	s0, [r7, #4]
 8006a5e:	edc7 0a00 	vstr	s1, [r7]
    if (a >= b) {
 8006a62:	ed97 7a01 	vldr	s14, [r7, #4]
 8006a66:	edd7 7a00 	vldr	s15, [r7]
 8006a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a72:	db01      	blt.n	8006a78 <max+0x24>
        return a;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	e000      	b.n	8006a7a <max+0x26>
    }
    return b;
 8006a78:	683b      	ldr	r3, [r7, #0]
}
 8006a7a:	ee07 3a90 	vmov	s15, r3
 8006a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <min>:

float min(float a, float b) {
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	ed87 0a01 	vstr	s0, [r7, #4]
 8006a96:	edc7 0a00 	vstr	s1, [r7]
    if (a <= b) {
 8006a9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8006a9e:	edd7 7a00 	vldr	s15, [r7]
 8006aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aaa:	d801      	bhi.n	8006ab0 <min+0x24>
        return a;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	e000      	b.n	8006ab2 <min+0x26>
    }
    return b;
 8006ab0:	683b      	ldr	r3, [r7, #0]
}
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <clamp>:

float clamp(float val, float min, float max) {
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	ed87 0a03 	vstr	s0, [r7, #12]
 8006ace:	edc7 0a02 	vstr	s1, [r7, #8]
 8006ad2:	ed87 1a01 	vstr	s2, [r7, #4]
    if (val < min) {
 8006ad6:	ed97 7a03 	vldr	s14, [r7, #12]
 8006ada:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae6:	d501      	bpl.n	8006aec <clamp+0x28>
        return min;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	e00b      	b.n	8006b04 <clamp+0x40>
    }
    if (val > max) {
 8006aec:	ed97 7a03 	vldr	s14, [r7, #12]
 8006af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8006af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afc:	dd01      	ble.n	8006b02 <clamp+0x3e>
        return max;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	e000      	b.n	8006b04 <clamp+0x40>
    }
    return val;
 8006b02:	68fb      	ldr	r3, [r7, #12]
}
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eeb0 0a67 	vmov.f32	s0, s15
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <lerp>:

float lerp(float a, float b, float t)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	ed87 0a03 	vstr	s0, [r7, #12]
 8006b20:	edc7 0a02 	vstr	s1, [r7, #8]
 8006b24:	ed87 1a01 	vstr	s2, [r7, #4]
    return a + (b - a) * t;
 8006b28:	ed97 7a02 	vldr	s14, [r7, #8]
 8006b2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b34:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b40:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006b44:	eeb0 0a67 	vmov.f32	s0, s15
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <map>:

float map(float value, float in_min, float in_max, float out_min, float out_max) {
 8006b52:	b480      	push	{r7}
 8006b54:	b087      	sub	sp, #28
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	ed87 0a05 	vstr	s0, [r7, #20]
 8006b5c:	edc7 0a04 	vstr	s1, [r7, #16]
 8006b60:	ed87 1a03 	vstr	s2, [r7, #12]
 8006b64:	edc7 1a02 	vstr	s3, [r7, #8]
 8006b68:	ed87 2a01 	vstr	s4, [r7, #4]
    if (value >= in_max) {
 8006b6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b70:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7c:	db02      	blt.n	8006b84 <map+0x32>
        return out_max;
 8006b7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b82:	e025      	b.n	8006bd0 <map+0x7e>
    }
    if (value <= in_min) {
 8006b84:	ed97 7a05 	vldr	s14, [r7, #20]
 8006b88:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b94:	d802      	bhi.n	8006b9c <map+0x4a>
        return out_min;
 8006b96:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b9a:	e019      	b.n	8006bd0 <map+0x7e>
    }
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006b9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ba0:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ba4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006ba8:	edd7 6a01 	vldr	s13, [r7, #4]
 8006bac:	edd7 7a02 	vldr	s15, [r7, #8]
 8006bb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006bb4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006bb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8006bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <convert_period_to_freq>:

float convert_period_to_freq(float period) {
 8006bde:	b480      	push	{r7}
 8006be0:	b083      	sub	sp, #12
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	ed87 0a01 	vstr	s0, [r7, #4]
    return 1 / period;
 8006be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bf0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006bf4:	eef0 7a66 	vmov.f32	s15, s13
}
 8006bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
	...

08006c08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006c08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c40 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8006c0c:	f7ff ff10 	bl	8006a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006c10:	480c      	ldr	r0, [pc, #48]	; (8006c44 <LoopForever+0x6>)
  ldr r1, =_edata
 8006c12:	490d      	ldr	r1, [pc, #52]	; (8006c48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006c14:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <LoopForever+0xe>)
  movs r3, #0
 8006c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c18:	e002      	b.n	8006c20 <LoopCopyDataInit>

08006c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c1e:	3304      	adds	r3, #4

08006c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c24:	d3f9      	bcc.n	8006c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c26:	4a0a      	ldr	r2, [pc, #40]	; (8006c50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006c28:	4c0a      	ldr	r4, [pc, #40]	; (8006c54 <LoopForever+0x16>)
  movs r3, #0
 8006c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c2c:	e001      	b.n	8006c32 <LoopFillZerobss>

08006c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c30:	3204      	adds	r2, #4

08006c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c34:	d3fb      	bcc.n	8006c2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006c36:	f004 f911 	bl	800ae5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006c3a:	f7fe fd3b 	bl	80056b4 <main>

08006c3e <LoopForever>:

LoopForever:
    b LoopForever
 8006c3e:	e7fe      	b.n	8006c3e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006c40:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8006c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c48:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8006c4c:	08010cd8 	.word	0x08010cd8
  ldr r2, =_sbss
 8006c50:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8006c54:	20000f64 	.word	0x20000f64

08006c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006c58:	e7fe      	b.n	8006c58 <ADC1_2_IRQHandler>
	...

08006c5c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006c60:	4b08      	ldr	r3, [pc, #32]	; (8006c84 <HAL_Init+0x28>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a07      	ldr	r2, [pc, #28]	; (8006c84 <HAL_Init+0x28>)
 8006c66:	f043 0310 	orr.w	r3, r3, #16
 8006c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c6c:	2003      	movs	r0, #3
 8006c6e:	f000 ff73 	bl	8007b58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006c72:	200f      	movs	r0, #15
 8006c74:	f000 f808 	bl	8006c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006c78:	f7ff fb4e 	bl	8006318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	40022000 	.word	0x40022000

08006c88 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006c90:	4b12      	ldr	r3, [pc, #72]	; (8006cdc <HAL_InitTick+0x54>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <HAL_InitTick+0x58>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 ff8b 	bl	8007bc2 <HAL_SYSTICK_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e00e      	b.n	8006cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b0f      	cmp	r3, #15
 8006cba:	d80a      	bhi.n	8006cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cc4:	f000 ff53 	bl	8007b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006cc8:	4a06      	ldr	r2, [pc, #24]	; (8006ce4 <HAL_InitTick+0x5c>)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	e000      	b.n	8006cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20000050 	.word	0x20000050
 8006ce0:	20000058 	.word	0x20000058
 8006ce4:	20000054 	.word	0x20000054

08006ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006cec:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <HAL_IncTick+0x20>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	4b06      	ldr	r3, [pc, #24]	; (8006d0c <HAL_IncTick+0x24>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	4a04      	ldr	r2, [pc, #16]	; (8006d0c <HAL_IncTick+0x24>)
 8006cfa:	6013      	str	r3, [r2, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000058 	.word	0x20000058
 8006d0c:	20000f50 	.word	0x20000f50

08006d10 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  return uwTick;  
 8006d14:	4b03      	ldr	r3, [pc, #12]	; (8006d24 <HAL_GetTick+0x14>)
 8006d16:	681b      	ldr	r3, [r3, #0]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	20000f50 	.word	0x20000f50

08006d28 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d30:	f7ff ffee 	bl	8006d10 <HAL_GetTick>
 8006d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d40:	d005      	beq.n	8006d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d42:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <HAL_Delay+0x44>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006d4e:	bf00      	nop
 8006d50:	f7ff ffde 	bl	8006d10 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d8f7      	bhi.n	8006d50 <HAL_Delay+0x28>
  {
  }
}
 8006d60:	bf00      	nop
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000058 	.word	0x20000058

08006d70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b09a      	sub	sp, #104	; 0x68
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e1c9      	b.n	8007124 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d176      	bne.n	8006e90 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d152      	bne.n	8006e50 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff facb 	bl	8006360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d13b      	bne.n	8006e50 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fd87 	bl	80078ec <ADC_Disable>
 8006dde:	4603      	mov	r3, r0
 8006de0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	f003 0310 	and.w	r3, r3, #16
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d12f      	bne.n	8006e50 <HAL_ADC_Init+0xe0>
 8006df0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d12b      	bne.n	8006e50 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e00:	f023 0302 	bic.w	r3, r3, #2
 8006e04:	f043 0202 	orr.w	r2, r3, #2
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689a      	ldr	r2, [r3, #8]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e1a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689a      	ldr	r2, [r3, #8]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006e2a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e2c:	4b86      	ldr	r3, [pc, #536]	; (8007048 <HAL_ADC_Init+0x2d8>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a86      	ldr	r2, [pc, #536]	; (800704c <HAL_ADC_Init+0x2dc>)
 8006e32:	fba2 2303 	umull	r2, r3, r2, r3
 8006e36:	0c9a      	lsrs	r2, r3, #18
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006e42:	e002      	b.n	8006e4a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1f9      	bne.n	8006e44 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6c:	d110      	bne.n	8006e90 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f023 0312 	bic.w	r3, r3, #18
 8006e76:	f043 0210 	orr.w	r2, r3, #16
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	f043 0201 	orr.w	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f040 8136 	bne.w	800710a <HAL_ADC_Init+0x39a>
 8006e9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f040 8131 	bne.w	800710a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f040 8129 	bne.w	800710a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006ec0:	f043 0202 	orr.w	r2, r3, #2
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed0:	d004      	beq.n	8006edc <HAL_ADC_Init+0x16c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a5e      	ldr	r2, [pc, #376]	; (8007050 <HAL_ADC_Init+0x2e0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d101      	bne.n	8006ee0 <HAL_ADC_Init+0x170>
 8006edc:	4b5d      	ldr	r3, [pc, #372]	; (8007054 <HAL_ADC_Init+0x2e4>)
 8006ede:	e000      	b.n	8006ee2 <HAL_ADC_Init+0x172>
 8006ee0:	4b5d      	ldr	r3, [pc, #372]	; (8007058 <HAL_ADC_Init+0x2e8>)
 8006ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eec:	d102      	bne.n	8006ef4 <HAL_ADC_Init+0x184>
 8006eee:	4b58      	ldr	r3, [pc, #352]	; (8007050 <HAL_ADC_Init+0x2e0>)
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e01a      	b.n	8006f2a <HAL_ADC_Init+0x1ba>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a55      	ldr	r2, [pc, #340]	; (8007050 <HAL_ADC_Init+0x2e0>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d103      	bne.n	8006f06 <HAL_ADC_Init+0x196>
 8006efe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e011      	b.n	8006f2a <HAL_ADC_Init+0x1ba>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a54      	ldr	r2, [pc, #336]	; (800705c <HAL_ADC_Init+0x2ec>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d102      	bne.n	8006f16 <HAL_ADC_Init+0x1a6>
 8006f10:	4b53      	ldr	r3, [pc, #332]	; (8007060 <HAL_ADC_Init+0x2f0>)
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e009      	b.n	8006f2a <HAL_ADC_Init+0x1ba>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a51      	ldr	r2, [pc, #324]	; (8007060 <HAL_ADC_Init+0x2f0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d102      	bne.n	8006f26 <HAL_ADC_Init+0x1b6>
 8006f20:	4b4e      	ldr	r3, [pc, #312]	; (800705c <HAL_ADC_Init+0x2ec>)
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e001      	b.n	8006f2a <HAL_ADC_Init+0x1ba>
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 0303 	and.w	r3, r3, #3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d108      	bne.n	8006f4a <HAL_ADC_Init+0x1da>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_ADC_Init+0x1da>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <HAL_ADC_Init+0x1dc>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d11c      	bne.n	8006f8a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006f50:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d010      	beq.n	8006f78 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d107      	bne.n	8006f72 <HAL_ADC_Init+0x202>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <HAL_ADC_Init+0x202>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <HAL_ADC_Init+0x204>
 8006f72:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d108      	bne.n	8006f8a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8006f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	431a      	orrs	r2, r3
 8006f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f88:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	7e5b      	ldrb	r3, [r3, #25]
 8006f8e:	035b      	lsls	r3, r3, #13
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f94:	2a01      	cmp	r2, #1
 8006f96:	d002      	beq.n	8006f9e <HAL_ADC_Init+0x22e>
 8006f98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f9c:	e000      	b.n	8006fa0 <HAL_ADC_Init+0x230>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d11b      	bne.n	8006ff6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7e5b      	ldrb	r3, [r3, #25]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	045a      	lsls	r2, r3, #17
 8006fce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd6:	663b      	str	r3, [r7, #96]	; 0x60
 8006fd8:	e00d      	b.n	8006ff6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fee:	f043 0201 	orr.w	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d03a      	beq.n	8007074 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a16      	ldr	r2, [pc, #88]	; (800705c <HAL_ADC_Init+0x2ec>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_ADC_Init+0x2a2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a14      	ldr	r2, [pc, #80]	; (8007060 <HAL_ADC_Init+0x2f0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d128      	bne.n	8007064 <HAL_ADC_Init+0x2f4>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007016:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800701a:	d012      	beq.n	8007042 <HAL_ADC_Init+0x2d2>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007024:	d00a      	beq.n	800703c <HAL_ADC_Init+0x2cc>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800702e:	d002      	beq.n	8007036 <HAL_ADC_Init+0x2c6>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	e018      	b.n	8007068 <HAL_ADC_Init+0x2f8>
 8007036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800703a:	e015      	b.n	8007068 <HAL_ADC_Init+0x2f8>
 800703c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007040:	e012      	b.n	8007068 <HAL_ADC_Init+0x2f8>
 8007042:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8007046:	e00f      	b.n	8007068 <HAL_ADC_Init+0x2f8>
 8007048:	20000050 	.word	0x20000050
 800704c:	431bde83 	.word	0x431bde83
 8007050:	50000100 	.word	0x50000100
 8007054:	50000300 	.word	0x50000300
 8007058:	50000700 	.word	0x50000700
 800705c:	50000400 	.word	0x50000400
 8007060:	50000500 	.word	0x50000500
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800706c:	4313      	orrs	r3, r2
 800706e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007070:	4313      	orrs	r3, r2
 8007072:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f003 030c 	and.w	r3, r3, #12
 800707e:	2b00      	cmp	r3, #0
 8007080:	d114      	bne.n	80070ac <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007090:	f023 0302 	bic.w	r3, r3, #2
 8007094:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7e1b      	ldrb	r3, [r3, #24]
 800709a:	039a      	lsls	r2, r3, #14
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4313      	orrs	r3, r2
 80070a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070a8:	4313      	orrs	r3, r2
 80070aa:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	4b1e      	ldr	r3, [pc, #120]	; (800712c <HAL_ADC_Init+0x3bc>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6812      	ldr	r2, [r2, #0]
 80070ba:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80070bc:	430b      	orrs	r3, r1
 80070be:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d10c      	bne.n	80070e2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	f023 010f 	bic.w	r1, r3, #15
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	1e5a      	subs	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
 80070e0:	e007      	b.n	80070f2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 020f 	bic.w	r2, r2, #15
 80070f0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	f023 0303 	bic.w	r3, r3, #3
 8007100:	f043 0201 	orr.w	r2, r3, #1
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
 8007108:	e00a      	b.n	8007120 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f023 0312 	bic.w	r3, r3, #18
 8007112:	f043 0210 	orr.w	r2, r3, #16
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800711a:	2301      	movs	r3, #1
 800711c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8007120:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007124:	4618      	mov	r0, r3
 8007126:	3768      	adds	r7, #104	; 0x68
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	fff0c007 	.word	0xfff0c007

08007130 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007130:	b480      	push	{r7}
 8007132:	b09b      	sub	sp, #108	; 0x6c
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_ADC_ConfigChannel+0x22>
 800714e:	2302      	movs	r3, #2
 8007150:	e2ca      	b.n	80076e8 <HAL_ADC_ConfigChannel+0x5b8>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	f040 82ae 	bne.w	80076c6 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	2b04      	cmp	r3, #4
 8007170:	d81c      	bhi.n	80071ac <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	4613      	mov	r3, r2
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	4413      	add	r3, r2
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	461a      	mov	r2, r3
 8007186:	231f      	movs	r3, #31
 8007188:	4093      	lsls	r3, r2
 800718a:	43db      	mvns	r3, r3
 800718c:	4019      	ands	r1, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	4413      	add	r3, r2
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	fa00 f203 	lsl.w	r2, r0, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	631a      	str	r2, [r3, #48]	; 0x30
 80071aa:	e063      	b.n	8007274 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b09      	cmp	r3, #9
 80071b2:	d81e      	bhi.n	80071f2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	4613      	mov	r3, r2
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	4413      	add	r3, r2
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	3b1e      	subs	r3, #30
 80071c8:	221f      	movs	r2, #31
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	43db      	mvns	r3, r3
 80071d0:	4019      	ands	r1, r3
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	6818      	ldr	r0, [r3, #0]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	4613      	mov	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	3b1e      	subs	r3, #30
 80071e4:	fa00 f203 	lsl.w	r2, r0, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	635a      	str	r2, [r3, #52]	; 0x34
 80071f0:	e040      	b.n	8007274 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b0e      	cmp	r3, #14
 80071f8:	d81e      	bhi.n	8007238 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	4613      	mov	r3, r2
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	4413      	add	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	3b3c      	subs	r3, #60	; 0x3c
 800720e:	221f      	movs	r2, #31
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	4019      	ands	r1, r3
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	6818      	ldr	r0, [r3, #0]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	4613      	mov	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4413      	add	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	3b3c      	subs	r3, #60	; 0x3c
 800722a:	fa00 f203 	lsl.w	r2, r0, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	639a      	str	r2, [r3, #56]	; 0x38
 8007236:	e01d      	b.n	8007274 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4413      	add	r3, r2
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	3b5a      	subs	r3, #90	; 0x5a
 800724c:	221f      	movs	r2, #31
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	43db      	mvns	r3, r3
 8007254:	4019      	ands	r1, r3
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4413      	add	r3, r2
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	3b5a      	subs	r3, #90	; 0x5a
 8007268:	fa00 f203 	lsl.w	r2, r0, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f003 030c 	and.w	r3, r3, #12
 800727e:	2b00      	cmp	r3, #0
 8007280:	f040 80e5 	bne.w	800744e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b09      	cmp	r3, #9
 800728a:	d91c      	bls.n	80072c6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6999      	ldr	r1, [r3, #24]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4613      	mov	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4413      	add	r3, r2
 800729c:	3b1e      	subs	r3, #30
 800729e:	2207      	movs	r2, #7
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	43db      	mvns	r3, r3
 80072a6:	4019      	ands	r1, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	6898      	ldr	r0, [r3, #8]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	4413      	add	r3, r2
 80072b6:	3b1e      	subs	r3, #30
 80072b8:	fa00 f203 	lsl.w	r2, r0, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	619a      	str	r2, [r3, #24]
 80072c4:	e019      	b.n	80072fa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6959      	ldr	r1, [r3, #20]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	4613      	mov	r3, r2
 80072d2:	005b      	lsls	r3, r3, #1
 80072d4:	4413      	add	r3, r2
 80072d6:	2207      	movs	r2, #7
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	43db      	mvns	r3, r3
 80072de:	4019      	ands	r1, r3
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	6898      	ldr	r0, [r3, #8]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	fa00 f203 	lsl.w	r2, r0, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695a      	ldr	r2, [r3, #20]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	08db      	lsrs	r3, r3, #3
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	fa02 f303 	lsl.w	r3, r2, r3
 8007310:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	3b01      	subs	r3, #1
 8007318:	2b03      	cmp	r3, #3
 800731a:	d84f      	bhi.n	80073bc <HAL_ADC_ConfigChannel+0x28c>
 800731c:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <HAL_ADC_ConfigChannel+0x1f4>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007335 	.word	0x08007335
 8007328:	08007357 	.word	0x08007357
 800732c:	08007379 	.word	0x08007379
 8007330:	0800739b 	.word	0x0800739b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800733a:	4b9a      	ldr	r3, [pc, #616]	; (80075a4 <HAL_ADC_ConfigChannel+0x474>)
 800733c:	4013      	ands	r3, r2
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	0691      	lsls	r1, r2, #26
 8007344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007346:	430a      	orrs	r2, r1
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007352:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007354:	e07e      	b.n	8007454 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800735c:	4b91      	ldr	r3, [pc, #580]	; (80075a4 <HAL_ADC_ConfigChannel+0x474>)
 800735e:	4013      	ands	r3, r2
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	6812      	ldr	r2, [r2, #0]
 8007364:	0691      	lsls	r1, r2, #26
 8007366:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007368:	430a      	orrs	r2, r1
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007374:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007376:	e06d      	b.n	8007454 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800737e:	4b89      	ldr	r3, [pc, #548]	; (80075a4 <HAL_ADC_ConfigChannel+0x474>)
 8007380:	4013      	ands	r3, r2
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	0691      	lsls	r1, r2, #26
 8007388:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800738a:	430a      	orrs	r2, r1
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007396:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8007398:	e05c      	b.n	8007454 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80073a0:	4b80      	ldr	r3, [pc, #512]	; (80075a4 <HAL_ADC_ConfigChannel+0x474>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	6812      	ldr	r2, [r2, #0]
 80073a8:	0691      	lsls	r1, r2, #26
 80073aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073ac:	430a      	orrs	r2, r1
 80073ae:	431a      	orrs	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80073b8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80073ba:	e04b      	b.n	8007454 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	069b      	lsls	r3, r3, #26
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d107      	bne.n	80073e0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80073de:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	069b      	lsls	r3, r3, #26
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d107      	bne.n	8007404 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007402:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800740a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	069b      	lsls	r3, r3, #26
 8007414:	429a      	cmp	r2, r3
 8007416:	d107      	bne.n	8007428 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007426:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	069b      	lsls	r3, r3, #26
 8007438:	429a      	cmp	r2, r3
 800743a:	d10a      	bne.n	8007452 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800744a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800744c:	e001      	b.n	8007452 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800744e:	bf00      	nop
 8007450:	e000      	b.n	8007454 <HAL_ADC_ConfigChannel+0x324>
      break;
 8007452:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	2b01      	cmp	r3, #1
 8007460:	d108      	bne.n	8007474 <HAL_ADC_ConfigChannel+0x344>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_ADC_ConfigChannel+0x344>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <HAL_ADC_ConfigChannel+0x346>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	f040 8130 	bne.w	80076dc <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d00f      	beq.n	80074a4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2201      	movs	r2, #1
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	43da      	mvns	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	400a      	ands	r2, r1
 800749e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80074a2:	e049      	b.n	8007538 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2201      	movs	r2, #1
 80074b2:	409a      	lsls	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b09      	cmp	r3, #9
 80074c4:	d91c      	bls.n	8007500 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6999      	ldr	r1, [r3, #24]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	4413      	add	r3, r2
 80074d6:	3b1b      	subs	r3, #27
 80074d8:	2207      	movs	r2, #7
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43db      	mvns	r3, r3
 80074e0:	4019      	ands	r1, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	6898      	ldr	r0, [r3, #8]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4613      	mov	r3, r2
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	4413      	add	r3, r2
 80074f0:	3b1b      	subs	r3, #27
 80074f2:	fa00 f203 	lsl.w	r2, r0, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	430a      	orrs	r2, r1
 80074fc:	619a      	str	r2, [r3, #24]
 80074fe:	e01b      	b.n	8007538 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6959      	ldr	r1, [r3, #20]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	4613      	mov	r3, r2
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	2207      	movs	r2, #7
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	43db      	mvns	r3, r3
 800751a:	4019      	ands	r1, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	6898      	ldr	r0, [r3, #8]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	4613      	mov	r3, r2
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	4413      	add	r3, r2
 800752c:	fa00 f203 	lsl.w	r2, r0, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007540:	d004      	beq.n	800754c <HAL_ADC_ConfigChannel+0x41c>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a18      	ldr	r2, [pc, #96]	; (80075a8 <HAL_ADC_ConfigChannel+0x478>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d101      	bne.n	8007550 <HAL_ADC_ConfigChannel+0x420>
 800754c:	4b17      	ldr	r3, [pc, #92]	; (80075ac <HAL_ADC_ConfigChannel+0x47c>)
 800754e:	e000      	b.n	8007552 <HAL_ADC_ConfigChannel+0x422>
 8007550:	4b17      	ldr	r3, [pc, #92]	; (80075b0 <HAL_ADC_ConfigChannel+0x480>)
 8007552:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b10      	cmp	r3, #16
 800755a:	d105      	bne.n	8007568 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800755c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800756c:	2b11      	cmp	r3, #17
 800756e:	d105      	bne.n	800757c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8007570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00b      	beq.n	8007594 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8007580:	2b12      	cmp	r3, #18
 8007582:	f040 80ab 	bne.w	80076dc <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8007586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800758e:	2b00      	cmp	r3, #0
 8007590:	f040 80a4 	bne.w	80076dc <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800759c:	d10a      	bne.n	80075b4 <HAL_ADC_ConfigChannel+0x484>
 800759e:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <HAL_ADC_ConfigChannel+0x478>)
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e022      	b.n	80075ea <HAL_ADC_ConfigChannel+0x4ba>
 80075a4:	83fff000 	.word	0x83fff000
 80075a8:	50000100 	.word	0x50000100
 80075ac:	50000300 	.word	0x50000300
 80075b0:	50000700 	.word	0x50000700
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a4e      	ldr	r2, [pc, #312]	; (80076f4 <HAL_ADC_ConfigChannel+0x5c4>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d103      	bne.n	80075c6 <HAL_ADC_ConfigChannel+0x496>
 80075be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	e011      	b.n	80075ea <HAL_ADC_ConfigChannel+0x4ba>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a4b      	ldr	r2, [pc, #300]	; (80076f8 <HAL_ADC_ConfigChannel+0x5c8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d102      	bne.n	80075d6 <HAL_ADC_ConfigChannel+0x4a6>
 80075d0:	4b4a      	ldr	r3, [pc, #296]	; (80076fc <HAL_ADC_ConfigChannel+0x5cc>)
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e009      	b.n	80075ea <HAL_ADC_ConfigChannel+0x4ba>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a48      	ldr	r2, [pc, #288]	; (80076fc <HAL_ADC_ConfigChannel+0x5cc>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d102      	bne.n	80075e6 <HAL_ADC_ConfigChannel+0x4b6>
 80075e0:	4b45      	ldr	r3, [pc, #276]	; (80076f8 <HAL_ADC_ConfigChannel+0x5c8>)
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	e001      	b.n	80075ea <HAL_ADC_ConfigChannel+0x4ba>
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0303 	and.w	r3, r3, #3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d108      	bne.n	800760a <HAL_ADC_ConfigChannel+0x4da>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b01      	cmp	r3, #1
 8007604:	d101      	bne.n	800760a <HAL_ADC_ConfigChannel+0x4da>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <HAL_ADC_ConfigChannel+0x4dc>
 800760a:	2300      	movs	r3, #0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d150      	bne.n	80076b2 <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007610:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8007612:	2b00      	cmp	r3, #0
 8007614:	d010      	beq.n	8007638 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	2b01      	cmp	r3, #1
 8007620:	d107      	bne.n	8007632 <HAL_ADC_ConfigChannel+0x502>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b01      	cmp	r3, #1
 800762c:	d101      	bne.n	8007632 <HAL_ADC_ConfigChannel+0x502>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <HAL_ADC_ConfigChannel+0x504>
 8007632:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007634:	2b00      	cmp	r3, #0
 8007636:	d13c      	bne.n	80076b2 <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b10      	cmp	r3, #16
 800763e:	d11d      	bne.n	800767c <HAL_ADC_ConfigChannel+0x54c>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007648:	d118      	bne.n	800767c <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800764a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007654:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007656:	4b2a      	ldr	r3, [pc, #168]	; (8007700 <HAL_ADC_ConfigChannel+0x5d0>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a2a      	ldr	r2, [pc, #168]	; (8007704 <HAL_ADC_ConfigChannel+0x5d4>)
 800765c:	fba2 2303 	umull	r2, r3, r2, r3
 8007660:	0c9a      	lsrs	r2, r3, #18
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800766c:	e002      	b.n	8007674 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	3b01      	subs	r3, #1
 8007672:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1f9      	bne.n	800766e <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800767a:	e02e      	b.n	80076da <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b11      	cmp	r3, #17
 8007682:	d10b      	bne.n	800769c <HAL_ADC_ConfigChannel+0x56c>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800768c:	d106      	bne.n	800769c <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800768e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8007696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007698:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800769a:	e01e      	b.n	80076da <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b12      	cmp	r3, #18
 80076a2:	d11a      	bne.n	80076da <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80076a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80076ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ae:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80076b0:	e013      	b.n	80076da <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	f043 0220 	orr.w	r2, r3, #32
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076c4:	e00a      	b.n	80076dc <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f043 0220 	orr.w	r2, r3, #32
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076d8:	e000      	b.n	80076dc <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80076da:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80076e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	376c      	adds	r7, #108	; 0x6c
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	50000100 	.word	0x50000100
 80076f8:	50000400 	.word	0x50000400
 80076fc:	50000500 	.word	0x50000500
 8007700:	20000050 	.word	0x20000050
 8007704:	431bde83 	.word	0x431bde83

08007708 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8007708:	b480      	push	{r7}
 800770a:	b099      	sub	sp, #100	; 0x64
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007720:	d102      	bne.n	8007728 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8007722:	4b6d      	ldr	r3, [pc, #436]	; (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8007724:	60bb      	str	r3, [r7, #8]
 8007726:	e01a      	b.n	800775e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a6a      	ldr	r2, [pc, #424]	; (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d103      	bne.n	800773a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8007732:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007736:	60bb      	str	r3, [r7, #8]
 8007738:	e011      	b.n	800775e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a67      	ldr	r2, [pc, #412]	; (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d102      	bne.n	800774a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007744:	4b66      	ldr	r3, [pc, #408]	; (80078e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8007746:	60bb      	str	r3, [r7, #8]
 8007748:	e009      	b.n	800775e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a64      	ldr	r2, [pc, #400]	; (80078e0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d102      	bne.n	800775a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007754:	4b61      	ldr	r3, [pc, #388]	; (80078dc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8007756:	60bb      	str	r3, [r7, #8]
 8007758:	e001      	b.n	800775e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800775a:	2300      	movs	r3, #0
 800775c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0b0      	b.n	80078ca <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8007772:	2302      	movs	r3, #2
 8007774:	e0a9      	b.n	80078ca <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 0304 	and.w	r3, r3, #4
 8007788:	2b00      	cmp	r3, #0
 800778a:	f040 808d 	bne.w	80078a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 8086 	bne.w	80078a8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077a4:	d004      	beq.n	80077b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a4b      	ldr	r2, [pc, #300]	; (80078d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d101      	bne.n	80077b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80077b0:	4b4c      	ldr	r3, [pc, #304]	; (80078e4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80077b2:	e000      	b.n	80077b6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80077b4:	4b4c      	ldr	r3, [pc, #304]	; (80078e8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80077b6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d040      	beq.n	8007842 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80077c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	6859      	ldr	r1, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077d2:	035b      	lsls	r3, r3, #13
 80077d4:	430b      	orrs	r3, r1
 80077d6:	431a      	orrs	r2, r3
 80077d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077da:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d108      	bne.n	80077fc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0301 	and.w	r3, r3, #1
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80077fc:	2300      	movs	r3, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d15c      	bne.n	80078bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b01      	cmp	r3, #1
 800780c:	d107      	bne.n	800781e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800781a:	2301      	movs	r3, #1
 800781c:	e000      	b.n	8007820 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800781e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007820:	2b00      	cmp	r3, #0
 8007822:	d14b      	bne.n	80078bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8007824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800782c:	f023 030f 	bic.w	r3, r3, #15
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	6811      	ldr	r1, [r2, #0]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	6892      	ldr	r2, [r2, #8]
 8007838:	430a      	orrs	r2, r1
 800783a:	431a      	orrs	r2, r3
 800783c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800783e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8007840:	e03c      	b.n	80078bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800784a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800784c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 0303 	and.w	r3, r3, #3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d108      	bne.n	800786e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b01      	cmp	r3, #1
 8007868:	d101      	bne.n	800786e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d123      	bne.n	80078bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	f003 0303 	and.w	r3, r3, #3
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b01      	cmp	r3, #1
 800788a:	d101      	bne.n	8007890 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8007890:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007892:	2b00      	cmp	r3, #0
 8007894:	d112      	bne.n	80078bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8007896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800789e:	f023 030f 	bic.w	r3, r3, #15
 80078a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078a4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80078a6:	e009      	b.n	80078bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f043 0220 	orr.w	r2, r3, #32
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80078ba:	e000      	b.n	80078be <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80078bc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80078c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80078ca:	4618      	mov	r0, r3
 80078cc:	3764      	adds	r7, #100	; 0x64
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	50000100 	.word	0x50000100
 80078dc:	50000400 	.word	0x50000400
 80078e0:	50000500 	.word	0x50000500
 80078e4:	50000300 	.word	0x50000300
 80078e8:	50000700 	.word	0x50000700

080078ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078f4:	2300      	movs	r3, #0
 80078f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b01      	cmp	r3, #1
 8007904:	d108      	bne.n	8007918 <ADC_Disable+0x2c>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <ADC_Disable+0x2c>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <ADC_Disable+0x2e>
 8007918:	2300      	movs	r3, #0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d047      	beq.n	80079ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 030d 	and.w	r3, r3, #13
 8007928:	2b01      	cmp	r3, #1
 800792a:	d10f      	bne.n	800794c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0202 	orr.w	r2, r2, #2
 800793a:	609a      	str	r2, [r3, #8]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2203      	movs	r2, #3
 8007942:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8007944:	f7ff f9e4 	bl	8006d10 <HAL_GetTick>
 8007948:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800794a:	e029      	b.n	80079a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	f043 0210 	orr.w	r2, r3, #16
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795c:	f043 0201 	orr.w	r2, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e023      	b.n	80079b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007968:	f7ff f9d2 	bl	8006d10 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d914      	bls.n	80079a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10d      	bne.n	80079a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	f043 0210 	orr.w	r2, r3, #16
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	f043 0201 	orr.w	r2, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e007      	b.n	80079b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d0dc      	beq.n	8007968 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <__NVIC_SetPriorityGrouping+0x44>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079d4:	4013      	ands	r3, r2
 80079d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079ea:	4a04      	ldr	r2, [pc, #16]	; (80079fc <__NVIC_SetPriorityGrouping+0x44>)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	60d3      	str	r3, [r2, #12]
}
 80079f0:	bf00      	nop
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	e000ed00 	.word	0xe000ed00

08007a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <__NVIC_GetPriorityGrouping+0x18>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	0a1b      	lsrs	r3, r3, #8
 8007a0a:	f003 0307 	and.w	r3, r3, #7
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	e000ed00 	.word	0xe000ed00

08007a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	db0b      	blt.n	8007a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	f003 021f 	and.w	r2, r3, #31
 8007a34:	4907      	ldr	r1, [pc, #28]	; (8007a54 <__NVIC_EnableIRQ+0x38>)
 8007a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8007a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	e000e100 	.word	0xe000e100

08007a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	db0a      	blt.n	8007a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	490c      	ldr	r1, [pc, #48]	; (8007aa4 <__NVIC_SetPriority+0x4c>)
 8007a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a76:	0112      	lsls	r2, r2, #4
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a80:	e00a      	b.n	8007a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	4908      	ldr	r1, [pc, #32]	; (8007aa8 <__NVIC_SetPriority+0x50>)
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	3b04      	subs	r3, #4
 8007a90:	0112      	lsls	r2, r2, #4
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	440b      	add	r3, r1
 8007a96:	761a      	strb	r2, [r3, #24]
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	e000e100 	.word	0xe000e100
 8007aa8:	e000ed00 	.word	0xe000ed00

08007aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b089      	sub	sp, #36	; 0x24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f1c3 0307 	rsb	r3, r3, #7
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	bf28      	it	cs
 8007aca:	2304      	movcs	r3, #4
 8007acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	2b06      	cmp	r3, #6
 8007ad4:	d902      	bls.n	8007adc <NVIC_EncodePriority+0x30>
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3b03      	subs	r3, #3
 8007ada:	e000      	b.n	8007ade <NVIC_EncodePriority+0x32>
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	43da      	mvns	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	401a      	ands	r2, r3
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007af4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	fa01 f303 	lsl.w	r3, r1, r3
 8007afe:	43d9      	mvns	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b04:	4313      	orrs	r3, r2
         );
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3724      	adds	r7, #36	; 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b24:	d301      	bcc.n	8007b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b26:	2301      	movs	r3, #1
 8007b28:	e00f      	b.n	8007b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b2a:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <SysTick_Config+0x40>)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b32:	210f      	movs	r1, #15
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b38:	f7ff ff8e 	bl	8007a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <SysTick_Config+0x40>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b42:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <SysTick_Config+0x40>)
 8007b44:	2207      	movs	r2, #7
 8007b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	e000e010 	.word	0xe000e010

08007b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ff29 	bl	80079b8 <__NVIC_SetPriorityGrouping>
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b086      	sub	sp, #24
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	4603      	mov	r3, r0
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007b80:	f7ff ff3e 	bl	8007a00 <__NVIC_GetPriorityGrouping>
 8007b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	6978      	ldr	r0, [r7, #20]
 8007b8c:	f7ff ff8e 	bl	8007aac <NVIC_EncodePriority>
 8007b90:	4602      	mov	r2, r0
 8007b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b96:	4611      	mov	r1, r2
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff5d 	bl	8007a58 <__NVIC_SetPriority>
}
 8007b9e:	bf00      	nop
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b082      	sub	sp, #8
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	4603      	mov	r3, r0
 8007bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff ff31 	bl	8007a1c <__NVIC_EnableIRQ>
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff ffa2 	bl	8007b14 <SysTick_Config>
 8007bd0:	4603      	mov	r3, r0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d101      	bne.n	8007bf0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e037      	b.n	8007c60 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007c06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007c0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f8b4 	bl	8007db0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}  
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	2204      	movs	r2, #4
 8007c86:	409a      	lsls	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d024      	beq.n	8007cda <HAL_DMA_IRQHandler+0x72>
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d01f      	beq.n	8007cda <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0320 	and.w	r3, r3, #32
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d107      	bne.n	8007cb8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0204 	bic.w	r2, r2, #4
 8007cb6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc0:	2104      	movs	r1, #4
 8007cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8007cc6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d06a      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8007cd8:	e065      	b.n	8007da6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	2202      	movs	r2, #2
 8007ce0:	409a      	lsls	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d02c      	beq.n	8007d44 <HAL_DMA_IRQHandler+0xdc>
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d027      	beq.n	8007d44 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10b      	bne.n	8007d1a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 020a 	bic.w	r2, r2, #10
 8007d10:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d22:	2102      	movs	r1, #2
 8007d24:	fa01 f202 	lsl.w	r2, r1, r2
 8007d28:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d035      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8007d42:	e030      	b.n	8007da6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d48:	2208      	movs	r2, #8
 8007d4a:	409a      	lsls	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d028      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x13e>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d023      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 020e 	bic.w	r2, r2, #14
 8007d6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d76:	2101      	movs	r1, #1
 8007d78:	fa01 f202 	lsl.w	r2, r1, r2
 8007d7c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
    }
  }
}  
 8007da4:	e7ff      	b.n	8007da6 <HAL_DMA_IRQHandler+0x13e>
 8007da6:	bf00      	nop
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <DMA_CalcBaseAndBitshift+0x60>)
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d80f      	bhi.n	8007de4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <DMA_CalcBaseAndBitshift+0x64>)
 8007dcc:	4413      	add	r3, r2
 8007dce:	4a12      	ldr	r2, [pc, #72]	; (8007e18 <DMA_CalcBaseAndBitshift+0x68>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	091b      	lsrs	r3, r3, #4
 8007dd6:	009a      	lsls	r2, r3, #2
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a0f      	ldr	r2, [pc, #60]	; (8007e1c <DMA_CalcBaseAndBitshift+0x6c>)
 8007de0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8007de2:	e00e      	b.n	8007e02 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <DMA_CalcBaseAndBitshift+0x70>)
 8007dec:	4413      	add	r3, r2
 8007dee:	4a0a      	ldr	r2, [pc, #40]	; (8007e18 <DMA_CalcBaseAndBitshift+0x68>)
 8007df0:	fba2 2303 	umull	r2, r3, r2, r3
 8007df4:	091b      	lsrs	r3, r3, #4
 8007df6:	009a      	lsls	r2, r3, #2
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a09      	ldr	r2, [pc, #36]	; (8007e24 <DMA_CalcBaseAndBitshift+0x74>)
 8007e00:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40020407 	.word	0x40020407
 8007e14:	bffdfff8 	.word	0xbffdfff8
 8007e18:	cccccccd 	.word	0xcccccccd
 8007e1c:	40020000 	.word	0x40020000
 8007e20:	bffdfbf8 	.word	0xbffdfbf8
 8007e24:	40020400 	.word	0x40020400

08007e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007e32:	2300      	movs	r3, #0
 8007e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e36:	e154      	b.n	80080e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	fa01 f303 	lsl.w	r3, r1, r3
 8007e44:	4013      	ands	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 8146 	beq.w	80080dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f003 0303 	and.w	r3, r3, #3
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d005      	beq.n	8007e68 <HAL_GPIO_Init+0x40>
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d130      	bne.n	8007eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	2203      	movs	r2, #3
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	43db      	mvns	r3, r3
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	091b      	lsrs	r3, r3, #4
 8007eb4:	f003 0201 	and.w	r2, r3, #1
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d017      	beq.n	8007f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	43db      	mvns	r3, r3
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4013      	ands	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d123      	bne.n	8007f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	08da      	lsrs	r2, r3, #3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	3208      	adds	r2, #8
 8007f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	220f      	movs	r2, #15
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4013      	ands	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	08da      	lsrs	r2, r3, #3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	3208      	adds	r2, #8
 8007f54:	6939      	ldr	r1, [r7, #16]
 8007f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	2203      	movs	r2, #3
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	43db      	mvns	r3, r3
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f003 0203 	and.w	r2, r3, #3
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 80a0 	beq.w	80080dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f9c:	4b58      	ldr	r3, [pc, #352]	; (8008100 <HAL_GPIO_Init+0x2d8>)
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	4a57      	ldr	r2, [pc, #348]	; (8008100 <HAL_GPIO_Init+0x2d8>)
 8007fa2:	f043 0301 	orr.w	r3, r3, #1
 8007fa6:	6193      	str	r3, [r2, #24]
 8007fa8:	4b55      	ldr	r3, [pc, #340]	; (8008100 <HAL_GPIO_Init+0x2d8>)
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	f003 0301 	and.w	r3, r3, #1
 8007fb0:	60bb      	str	r3, [r7, #8]
 8007fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007fb4:	4a53      	ldr	r2, [pc, #332]	; (8008104 <HAL_GPIO_Init+0x2dc>)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	089b      	lsrs	r3, r3, #2
 8007fba:	3302      	adds	r3, #2
 8007fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f003 0303 	and.w	r3, r3, #3
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	220f      	movs	r2, #15
 8007fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007fde:	d019      	beq.n	8008014 <HAL_GPIO_Init+0x1ec>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a49      	ldr	r2, [pc, #292]	; (8008108 <HAL_GPIO_Init+0x2e0>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d013      	beq.n	8008010 <HAL_GPIO_Init+0x1e8>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a48      	ldr	r2, [pc, #288]	; (800810c <HAL_GPIO_Init+0x2e4>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00d      	beq.n	800800c <HAL_GPIO_Init+0x1e4>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a47      	ldr	r2, [pc, #284]	; (8008110 <HAL_GPIO_Init+0x2e8>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d007      	beq.n	8008008 <HAL_GPIO_Init+0x1e0>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a46      	ldr	r2, [pc, #280]	; (8008114 <HAL_GPIO_Init+0x2ec>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d101      	bne.n	8008004 <HAL_GPIO_Init+0x1dc>
 8008000:	2304      	movs	r3, #4
 8008002:	e008      	b.n	8008016 <HAL_GPIO_Init+0x1ee>
 8008004:	2305      	movs	r3, #5
 8008006:	e006      	b.n	8008016 <HAL_GPIO_Init+0x1ee>
 8008008:	2303      	movs	r3, #3
 800800a:	e004      	b.n	8008016 <HAL_GPIO_Init+0x1ee>
 800800c:	2302      	movs	r3, #2
 800800e:	e002      	b.n	8008016 <HAL_GPIO_Init+0x1ee>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <HAL_GPIO_Init+0x1ee>
 8008014:	2300      	movs	r3, #0
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	f002 0203 	and.w	r2, r2, #3
 800801c:	0092      	lsls	r2, r2, #2
 800801e:	4093      	lsls	r3, r2
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008026:	4937      	ldr	r1, [pc, #220]	; (8008104 <HAL_GPIO_Init+0x2dc>)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	089b      	lsrs	r3, r3, #2
 800802c:	3302      	adds	r3, #2
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008034:	4b38      	ldr	r3, [pc, #224]	; (8008118 <HAL_GPIO_Init+0x2f0>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	43db      	mvns	r3, r3
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4013      	ands	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008058:	4a2f      	ldr	r2, [pc, #188]	; (8008118 <HAL_GPIO_Init+0x2f0>)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800805e:	4b2e      	ldr	r3, [pc, #184]	; (8008118 <HAL_GPIO_Init+0x2f0>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	43db      	mvns	r3, r3
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4013      	ands	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008082:	4a25      	ldr	r2, [pc, #148]	; (8008118 <HAL_GPIO_Init+0x2f0>)
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008088:	4b23      	ldr	r3, [pc, #140]	; (8008118 <HAL_GPIO_Init+0x2f0>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	43db      	mvns	r3, r3
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4013      	ands	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80080ac:	4a1a      	ldr	r2, [pc, #104]	; (8008118 <HAL_GPIO_Init+0x2f0>)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080b2:	4b19      	ldr	r3, [pc, #100]	; (8008118 <HAL_GPIO_Init+0x2f0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	43db      	mvns	r3, r3
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	4013      	ands	r3, r2
 80080c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80080d6:	4a10      	ldr	r2, [pc, #64]	; (8008118 <HAL_GPIO_Init+0x2f0>)
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	3301      	adds	r3, #1
 80080e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f47f aea3 	bne.w	8007e38 <HAL_GPIO_Init+0x10>
  }
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	40021000 	.word	0x40021000
 8008104:	40010000 	.word	0x40010000
 8008108:	48000400 	.word	0x48000400
 800810c:	48000800 	.word	0x48000800
 8008110:	48000c00 	.word	0x48000c00
 8008114:	48001000 	.word	0x48001000
 8008118:	40010400 	.word	0x40010400

0800811c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691a      	ldr	r2, [r3, #16]
 800812c:	887b      	ldrh	r3, [r7, #2]
 800812e:	4013      	ands	r3, r2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008134:	2301      	movs	r3, #1
 8008136:	73fb      	strb	r3, [r7, #15]
 8008138:	e001      	b.n	800813e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	807b      	strh	r3, [r7, #2]
 8008158:	4613      	mov	r3, r2
 800815a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800815c:	787b      	ldrb	r3, [r7, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008162:	887a      	ldrh	r2, [r7, #2]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008168:	e002      	b.n	8008170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800816a:	887a      	ldrh	r2, [r7, #2]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008186:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008188:	695a      	ldr	r2, [r3, #20]
 800818a:	88fb      	ldrh	r3, [r7, #6]
 800818c:	4013      	ands	r3, r2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d006      	beq.n	80081a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008192:	4a05      	ldr	r2, [pc, #20]	; (80081a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008198:	88fb      	ldrh	r3, [r7, #6]
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd f926 	bl	80053ec <HAL_GPIO_EXTI_Callback>
  }
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	40010400 	.word	0x40010400

080081ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e081      	b.n	80082c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fe f9b2 	bl	800653c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2224      	movs	r2, #36	; 0x24
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0201 	bic.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800820c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d107      	bne.n	8008226 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008222:	609a      	str	r2, [r3, #8]
 8008224:	e006      	b.n	8008234 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008232:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d104      	bne.n	8008246 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008244:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	6812      	ldr	r2, [r2, #0]
 8008250:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008258:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008268:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691a      	ldr	r2, [r3, #16]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	69d9      	ldr	r1, [r3, #28]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1a      	ldr	r2, [r3, #32]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f042 0201 	orr.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af02      	add	r7, sp, #8
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	461a      	mov	r2, r3
 80082d8:	460b      	mov	r3, r1
 80082da:	817b      	strh	r3, [r7, #10]
 80082dc:	4613      	mov	r3, r2
 80082de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	f040 80da 	bne.w	80084a2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_I2C_Master_Transmit+0x30>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e0d3      	b.n	80084a4 <HAL_I2C_Master_Transmit+0x1d8>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008304:	f7fe fd04 	bl	8006d10 <HAL_GetTick>
 8008308:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	2319      	movs	r3, #25
 8008310:	2201      	movs	r2, #1
 8008312:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fbe0 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e0be      	b.n	80084a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2221      	movs	r2, #33	; 0x21
 800832a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2210      	movs	r2, #16
 8008332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2200      	movs	r2, #0
 800833a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	893a      	ldrh	r2, [r7, #8]
 8008346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008352:	b29b      	uxth	r3, r3
 8008354:	2bff      	cmp	r3, #255	; 0xff
 8008356:	d90e      	bls.n	8008376 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	22ff      	movs	r2, #255	; 0xff
 800835c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008362:	b2da      	uxtb	r2, r3
 8008364:	8979      	ldrh	r1, [r7, #10]
 8008366:	4b51      	ldr	r3, [pc, #324]	; (80084ac <HAL_I2C_Master_Transmit+0x1e0>)
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fd6e 	bl	8008e50 <I2C_TransferConfig>
 8008374:	e06c      	b.n	8008450 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008384:	b2da      	uxtb	r2, r3
 8008386:	8979      	ldrh	r1, [r7, #10]
 8008388:	4b48      	ldr	r3, [pc, #288]	; (80084ac <HAL_I2C_Master_Transmit+0x1e0>)
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 fd5d 	bl	8008e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008396:	e05b      	b.n	8008450 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	6a39      	ldr	r1, [r7, #32]
 800839c:	68f8      	ldr	r0, [r7, #12]
 800839e:	f000 fbec 	bl	8008b7a <I2C_WaitOnTXISFlagUntilTimeout>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e07b      	b.n	80084a4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	781a      	ldrb	r2, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d034      	beq.n	8008450 <HAL_I2C_Master_Transmit+0x184>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d130      	bne.n	8008450 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	2200      	movs	r2, #0
 80083f6:	2180      	movs	r1, #128	; 0x80
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fb6f 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d001      	beq.n	8008408 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e04d      	b.n	80084a4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800840c:	b29b      	uxth	r3, r3
 800840e:	2bff      	cmp	r3, #255	; 0xff
 8008410:	d90e      	bls.n	8008430 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	22ff      	movs	r2, #255	; 0xff
 8008416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841c:	b2da      	uxtb	r2, r3
 800841e:	8979      	ldrh	r1, [r7, #10]
 8008420:	2300      	movs	r3, #0
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 fd11 	bl	8008e50 <I2C_TransferConfig>
 800842e:	e00f      	b.n	8008450 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008434:	b29a      	uxth	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800843e:	b2da      	uxtb	r2, r3
 8008440:	8979      	ldrh	r1, [r7, #10]
 8008442:	2300      	movs	r3, #0
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 fd00 	bl	8008e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008454:	b29b      	uxth	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d19e      	bne.n	8008398 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	6a39      	ldr	r1, [r7, #32]
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fbd2 	bl	8008c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e01a      	b.n	80084a4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2220      	movs	r2, #32
 8008474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6859      	ldr	r1, [r3, #4]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <HAL_I2C_Master_Transmit+0x1e4>)
 8008482:	400b      	ands	r3, r1
 8008484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2220      	movs	r2, #32
 800848a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800849e:	2300      	movs	r3, #0
 80084a0:	e000      	b.n	80084a4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80084a2:	2302      	movs	r3, #2
  }
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	80002000 	.word	0x80002000
 80084b0:	fe00e800 	.word	0xfe00e800

080084b4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af02      	add	r7, sp, #8
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	461a      	mov	r2, r3
 80084c2:	4603      	mov	r3, r0
 80084c4:	817b      	strh	r3, [r7, #10]
 80084c6:	460b      	mov	r3, r1
 80084c8:	813b      	strh	r3, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	f040 80f9 	bne.w	80086ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <HAL_I2C_Mem_Write+0x34>
 80084e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d105      	bne.n	80084f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0ed      	b.n	80086d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d101      	bne.n	8008502 <HAL_I2C_Mem_Write+0x4e>
 80084fe:	2302      	movs	r3, #2
 8008500:	e0e6      	b.n	80086d0 <HAL_I2C_Mem_Write+0x21c>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800850a:	f7fe fc01 	bl	8006d10 <HAL_GetTick>
 800850e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	2319      	movs	r3, #25
 8008516:	2201      	movs	r2, #1
 8008518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 fadd 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e0d1      	b.n	80086d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2221      	movs	r2, #33	; 0x21
 8008530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2240      	movs	r2, #64	; 0x40
 8008538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2200      	movs	r2, #0
 8008540:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a3a      	ldr	r2, [r7, #32]
 8008546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800854c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008554:	88f8      	ldrh	r0, [r7, #6]
 8008556:	893a      	ldrh	r2, [r7, #8]
 8008558:	8979      	ldrh	r1, [r7, #10]
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	4603      	mov	r3, r0
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f9ed 	bl	8008944 <I2C_RequestMemoryWrite>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	e0a9      	b.n	80086d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008580:	b29b      	uxth	r3, r3
 8008582:	2bff      	cmp	r3, #255	; 0xff
 8008584:	d90e      	bls.n	80085a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	22ff      	movs	r2, #255	; 0xff
 800858a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008590:	b2da      	uxtb	r2, r3
 8008592:	8979      	ldrh	r1, [r7, #10]
 8008594:	2300      	movs	r3, #0
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 fc57 	bl	8008e50 <I2C_TransferConfig>
 80085a2:	e00f      	b.n	80085c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	8979      	ldrh	r1, [r7, #10]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 fc46 	bl	8008e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 fad6 	bl	8008b7a <I2C_WaitOnTXISFlagUntilTimeout>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e07b      	b.n	80086d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	781a      	ldrb	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800860c:	b29b      	uxth	r3, r3
 800860e:	2b00      	cmp	r3, #0
 8008610:	d034      	beq.n	800867c <HAL_I2C_Mem_Write+0x1c8>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d130      	bne.n	800867c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	2200      	movs	r2, #0
 8008622:	2180      	movs	r1, #128	; 0x80
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 fa59 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e04d      	b.n	80086d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008638:	b29b      	uxth	r3, r3
 800863a:	2bff      	cmp	r3, #255	; 0xff
 800863c:	d90e      	bls.n	800865c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	22ff      	movs	r2, #255	; 0xff
 8008642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008648:	b2da      	uxtb	r2, r3
 800864a:	8979      	ldrh	r1, [r7, #10]
 800864c:	2300      	movs	r3, #0
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 fbfb 	bl	8008e50 <I2C_TransferConfig>
 800865a:	e00f      	b.n	800867c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800866a:	b2da      	uxtb	r2, r3
 800866c:	8979      	ldrh	r1, [r7, #10]
 800866e:	2300      	movs	r3, #0
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 fbea 	bl	8008e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d19e      	bne.n	80085c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 fabc 	bl	8008c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e01a      	b.n	80086d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2220      	movs	r2, #32
 80086a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6859      	ldr	r1, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <HAL_I2C_Mem_Write+0x224>)
 80086ae:	400b      	ands	r3, r1
 80086b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2220      	movs	r2, #32
 80086b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e000      	b.n	80086d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80086ce:	2302      	movs	r3, #2
  }
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	fe00e800 	.word	0xfe00e800

080086dc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	4608      	mov	r0, r1
 80086e6:	4611      	mov	r1, r2
 80086e8:	461a      	mov	r2, r3
 80086ea:	4603      	mov	r3, r0
 80086ec:	817b      	strh	r3, [r7, #10]
 80086ee:	460b      	mov	r3, r1
 80086f0:	813b      	strh	r3, [r7, #8]
 80086f2:	4613      	mov	r3, r2
 80086f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b20      	cmp	r3, #32
 8008700:	f040 80fd 	bne.w	80088fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <HAL_I2C_Mem_Read+0x34>
 800870a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008716:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e0f1      	b.n	8008900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <HAL_I2C_Mem_Read+0x4e>
 8008726:	2302      	movs	r3, #2
 8008728:	e0ea      	b.n	8008900 <HAL_I2C_Mem_Read+0x224>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008732:	f7fe faed 	bl	8006d10 <HAL_GetTick>
 8008736:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	2319      	movs	r3, #25
 800873e:	2201      	movs	r2, #1
 8008740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 f9c9 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e0d5      	b.n	8008900 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2222      	movs	r2, #34	; 0x22
 8008758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2240      	movs	r2, #64	; 0x40
 8008760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6a3a      	ldr	r2, [r7, #32]
 800876e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800877c:	88f8      	ldrh	r0, [r7, #6]
 800877e:	893a      	ldrh	r2, [r7, #8]
 8008780:	8979      	ldrh	r1, [r7, #10]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	4603      	mov	r3, r0
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f92d 	bl	80089ec <I2C_RequestMemoryRead>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e0ad      	b.n	8008900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2bff      	cmp	r3, #255	; 0xff
 80087ac:	d90e      	bls.n	80087cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	22ff      	movs	r2, #255	; 0xff
 80087b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b8:	b2da      	uxtb	r2, r3
 80087ba:	8979      	ldrh	r1, [r7, #10]
 80087bc:	4b52      	ldr	r3, [pc, #328]	; (8008908 <HAL_I2C_Mem_Read+0x22c>)
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 fb43 	bl	8008e50 <I2C_TransferConfig>
 80087ca:	e00f      	b.n	80087ec <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087da:	b2da      	uxtb	r2, r3
 80087dc:	8979      	ldrh	r1, [r7, #10]
 80087de:	4b4a      	ldr	r3, [pc, #296]	; (8008908 <HAL_I2C_Mem_Read+0x22c>)
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 fb32 	bl	8008e50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	2200      	movs	r2, #0
 80087f4:	2104      	movs	r1, #4
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f000 f970 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d001      	beq.n	8008806 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e07c      	b.n	8008900 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	1c5a      	adds	r2, r3, #1
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008822:	3b01      	subs	r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	3b01      	subs	r3, #1
 8008832:	b29a      	uxth	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883c:	b29b      	uxth	r3, r3
 800883e:	2b00      	cmp	r3, #0
 8008840:	d034      	beq.n	80088ac <HAL_I2C_Mem_Read+0x1d0>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008846:	2b00      	cmp	r3, #0
 8008848:	d130      	bne.n	80088ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008850:	2200      	movs	r2, #0
 8008852:	2180      	movs	r1, #128	; 0x80
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 f941 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e04d      	b.n	8008900 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008868:	b29b      	uxth	r3, r3
 800886a:	2bff      	cmp	r3, #255	; 0xff
 800886c:	d90e      	bls.n	800888c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	22ff      	movs	r2, #255	; 0xff
 8008872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008878:	b2da      	uxtb	r2, r3
 800887a:	8979      	ldrh	r1, [r7, #10]
 800887c:	2300      	movs	r3, #0
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 fae3 	bl	8008e50 <I2C_TransferConfig>
 800888a:	e00f      	b.n	80088ac <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008890:	b29a      	uxth	r2, r3
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800889a:	b2da      	uxtb	r2, r3
 800889c:	8979      	ldrh	r1, [r7, #10]
 800889e:	2300      	movs	r3, #0
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	f000 fad2 	bl	8008e50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d19a      	bne.n	80087ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f000 f9a4 	bl	8008c08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d001      	beq.n	80088ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e01a      	b.n	8008900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2220      	movs	r2, #32
 80088d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6859      	ldr	r1, [r3, #4]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	4b0b      	ldr	r3, [pc, #44]	; (800890c <HAL_I2C_Mem_Read+0x230>)
 80088de:	400b      	ands	r3, r1
 80088e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e000      	b.n	8008900 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80088fe:	2302      	movs	r3, #2
  }
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	80002400 	.word	0x80002400
 800890c:	fe00e800 	.word	0xfe00e800

08008910 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008934:	68ba      	ldr	r2, [r7, #8]
 8008936:	68f9      	ldr	r1, [r7, #12]
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
  }
}
 800893c:	bf00      	nop
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af02      	add	r7, sp, #8
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	4608      	mov	r0, r1
 800894e:	4611      	mov	r1, r2
 8008950:	461a      	mov	r2, r3
 8008952:	4603      	mov	r3, r0
 8008954:	817b      	strh	r3, [r7, #10]
 8008956:	460b      	mov	r3, r1
 8008958:	813b      	strh	r3, [r7, #8]
 800895a:	4613      	mov	r3, r2
 800895c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	b2da      	uxtb	r2, r3
 8008962:	8979      	ldrh	r1, [r7, #10]
 8008964:	4b20      	ldr	r3, [pc, #128]	; (80089e8 <I2C_RequestMemoryWrite+0xa4>)
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 fa6f 	bl	8008e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008972:	69fa      	ldr	r2, [r7, #28]
 8008974:	69b9      	ldr	r1, [r7, #24]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 f8ff 	bl	8008b7a <I2C_WaitOnTXISFlagUntilTimeout>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e02c      	b.n	80089e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008986:	88fb      	ldrh	r3, [r7, #6]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d105      	bne.n	8008998 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800898c:	893b      	ldrh	r3, [r7, #8]
 800898e:	b2da      	uxtb	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	629a      	str	r2, [r3, #40]	; 0x28
 8008996:	e015      	b.n	80089c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008998:	893b      	ldrh	r3, [r7, #8]
 800899a:	0a1b      	lsrs	r3, r3, #8
 800899c:	b29b      	uxth	r3, r3
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	69b9      	ldr	r1, [r7, #24]
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 f8e5 	bl	8008b7a <I2C_WaitOnTXISFlagUntilTimeout>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e012      	b.n	80089e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089ba:	893b      	ldrh	r3, [r7, #8]
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	2200      	movs	r2, #0
 80089cc:	2180      	movs	r1, #128	; 0x80
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 f884 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e000      	b.n	80089e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	80002000 	.word	0x80002000

080089ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af02      	add	r7, sp, #8
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	4608      	mov	r0, r1
 80089f6:	4611      	mov	r1, r2
 80089f8:	461a      	mov	r2, r3
 80089fa:	4603      	mov	r3, r0
 80089fc:	817b      	strh	r3, [r7, #10]
 80089fe:	460b      	mov	r3, r1
 8008a00:	813b      	strh	r3, [r7, #8]
 8008a02:	4613      	mov	r3, r2
 8008a04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008a06:	88fb      	ldrh	r3, [r7, #6]
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	8979      	ldrh	r1, [r7, #10]
 8008a0c:	4b20      	ldr	r3, [pc, #128]	; (8008a90 <I2C_RequestMemoryRead+0xa4>)
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	2300      	movs	r3, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fa1c 	bl	8008e50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	69b9      	ldr	r1, [r7, #24]
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f8ac 	bl	8008b7a <I2C_WaitOnTXISFlagUntilTimeout>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e02c      	b.n	8008a86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a2c:	88fb      	ldrh	r3, [r7, #6]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d105      	bne.n	8008a3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a32:	893b      	ldrh	r3, [r7, #8]
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	629a      	str	r2, [r3, #40]	; 0x28
 8008a3c:	e015      	b.n	8008a6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a3e:	893b      	ldrh	r3, [r7, #8]
 8008a40:	0a1b      	lsrs	r3, r3, #8
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	69b9      	ldr	r1, [r7, #24]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f892 	bl	8008b7a <I2C_WaitOnTXISFlagUntilTimeout>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e012      	b.n	8008a86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a60:	893b      	ldrh	r3, [r7, #8]
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	2200      	movs	r2, #0
 8008a72:	2140      	movs	r1, #64	; 0x40
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f831 	bl	8008adc <I2C_WaitOnFlagUntilTimeout>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e000      	b.n	8008a86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	80002000 	.word	0x80002000

08008a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d103      	bne.n	8008ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f003 0301 	and.w	r3, r3, #1
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d007      	beq.n	8008ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f042 0201 	orr.w	r2, r2, #1
 8008ace:	619a      	str	r2, [r3, #24]
  }
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	603b      	str	r3, [r7, #0]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008aec:	e031      	b.n	8008b52 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af4:	d02d      	beq.n	8008b52 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af6:	f7fe f90b 	bl	8006d10 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	683a      	ldr	r2, [r7, #0]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d302      	bcc.n	8008b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d122      	bne.n	8008b52 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	699a      	ldr	r2, [r3, #24]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	4013      	ands	r3, r2
 8008b16:	68ba      	ldr	r2, [r7, #8]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	bf0c      	ite	eq
 8008b1c:	2301      	moveq	r3, #1
 8008b1e:	2300      	movne	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	461a      	mov	r2, r3
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d113      	bne.n	8008b52 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2e:	f043 0220 	orr.w	r2, r3, #32
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2220      	movs	r2, #32
 8008b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e00f      	b.n	8008b72 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	699a      	ldr	r2, [r3, #24]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	bf0c      	ite	eq
 8008b62:	2301      	moveq	r3, #1
 8008b64:	2300      	movne	r3, #0
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	461a      	mov	r2, r3
 8008b6a:	79fb      	ldrb	r3, [r7, #7]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d0be      	beq.n	8008aee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	60f8      	str	r0, [r7, #12]
 8008b82:	60b9      	str	r1, [r7, #8]
 8008b84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b86:	e033      	b.n	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	68b9      	ldr	r1, [r7, #8]
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 f87f 	bl	8008c90 <I2C_IsErrorOccurred>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e031      	b.n	8008c00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ba2:	d025      	beq.n	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ba4:	f7fe f8b4 	bl	8006d10 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d302      	bcc.n	8008bba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d11a      	bne.n	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d013      	beq.n	8008bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bcc:	f043 0220 	orr.w	r2, r3, #32
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2220      	movs	r2, #32
 8008bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e007      	b.n	8008c00 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	f003 0302 	and.w	r3, r3, #2
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d1c4      	bne.n	8008b88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c14:	e02f      	b.n	8008c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	68b9      	ldr	r1, [r7, #8]
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 f838 	bl	8008c90 <I2C_IsErrorOccurred>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e02d      	b.n	8008c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c2a:	f7fe f871 	bl	8006d10 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d302      	bcc.n	8008c40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d11a      	bne.n	8008c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f003 0320 	and.w	r3, r3, #32
 8008c4a:	2b20      	cmp	r3, #32
 8008c4c:	d013      	beq.n	8008c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c52:	f043 0220 	orr.w	r2, r3, #32
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e007      	b.n	8008c86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	2b20      	cmp	r3, #32
 8008c82:	d1c8      	bne.n	8008c16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	; 0x28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	f003 0310 	and.w	r3, r3, #16
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d068      	beq.n	8008d8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2210      	movs	r2, #16
 8008cc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008cc4:	e049      	b.n	8008d5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ccc:	d045      	beq.n	8008d5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008cce:	f7fe f81f 	bl	8006d10 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d302      	bcc.n	8008ce4 <I2C_IsErrorOccurred+0x54>
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d13a      	bne.n	8008d5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d06:	d121      	bne.n	8008d4c <I2C_IsErrorOccurred+0xbc>
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d0e:	d01d      	beq.n	8008d4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d10:	7cfb      	ldrb	r3, [r7, #19]
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	d01a      	beq.n	8008d4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008d26:	f7fd fff3 	bl	8006d10 <HAL_GetTick>
 8008d2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d2c:	e00e      	b.n	8008d4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008d2e:	f7fd ffef 	bl	8006d10 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	2b19      	cmp	r3, #25
 8008d3a:	d907      	bls.n	8008d4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	f043 0320 	orr.w	r3, r3, #32
 8008d42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008d4a:	e006      	b.n	8008d5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b20      	cmp	r3, #32
 8008d58:	d1e9      	bne.n	8008d2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	f003 0320 	and.w	r3, r3, #32
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d003      	beq.n	8008d70 <I2C_IsErrorOccurred+0xe0>
 8008d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d0aa      	beq.n	8008cc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d103      	bne.n	8008d80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	f043 0304 	orr.w	r3, r3, #4
 8008d86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	699b      	ldr	r3, [r3, #24]
 8008d94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00b      	beq.n	8008db8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	f043 0301 	orr.w	r3, r3, #1
 8008da6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008db0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00b      	beq.n	8008dda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	f043 0308 	orr.w	r3, r3, #8
 8008dc8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008dd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	f043 0302 	orr.w	r3, r3, #2
 8008dea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008df4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01c      	beq.n	8008e3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f7ff fe45 	bl	8008a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6859      	ldr	r1, [r3, #4]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	4b0d      	ldr	r3, [pc, #52]	; (8008e4c <I2C_IsErrorOccurred+0x1bc>)
 8008e16:	400b      	ands	r3, r1
 8008e18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	431a      	orrs	r2, r3
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3728      	adds	r7, #40	; 0x28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	fe00e800 	.word	0xfe00e800

08008e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	607b      	str	r3, [r7, #4]
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	817b      	strh	r3, [r7, #10]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e62:	897b      	ldrh	r3, [r7, #10]
 8008e64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e68:	7a7b      	ldrb	r3, [r7, #9]
 8008e6a:	041b      	lsls	r3, r3, #16
 8008e6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e70:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e7e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685a      	ldr	r2, [r3, #4]
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	0d5b      	lsrs	r3, r3, #21
 8008e8a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008e8e:	4b08      	ldr	r3, [pc, #32]	; (8008eb0 <I2C_TransferConfig+0x60>)
 8008e90:	430b      	orrs	r3, r1
 8008e92:	43db      	mvns	r3, r3
 8008e94:	ea02 0103 	and.w	r1, r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008ea2:	bf00      	nop
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	03ff63ff 	.word	0x03ff63ff

08008eb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	d138      	bne.n	8008f3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d101      	bne.n	8008ed8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e032      	b.n	8008f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2224      	movs	r2, #36	; 0x24
 8008ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 0201 	bic.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6819      	ldr	r1, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	430a      	orrs	r2, r1
 8008f16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f042 0201 	orr.w	r2, r2, #1
 8008f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2220      	movs	r2, #32
 8008f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e000      	b.n	8008f3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008f3c:	2302      	movs	r3, #2
  }
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	370c      	adds	r7, #12
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b085      	sub	sp, #20
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d139      	bne.n	8008fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d101      	bne.n	8008f6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e033      	b.n	8008fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2224      	movs	r2, #36	; 0x24
 8008f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0201 	bic.w	r2, r2, #1
 8008f8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008f9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	021b      	lsls	r3, r3, #8
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0201 	orr.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e000      	b.n	8008fd6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008fd4:	2302      	movs	r3, #2
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ff0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ff4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008ffa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d102      	bne.n	800900a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	f001 b823 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800900a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800900e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 817d 	beq.w	800931a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8009020:	4bbc      	ldr	r3, [pc, #752]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f003 030c 	and.w	r3, r3, #12
 8009028:	2b04      	cmp	r3, #4
 800902a:	d00c      	beq.n	8009046 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800902c:	4bb9      	ldr	r3, [pc, #740]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f003 030c 	and.w	r3, r3, #12
 8009034:	2b08      	cmp	r3, #8
 8009036:	d15c      	bne.n	80090f2 <HAL_RCC_OscConfig+0x10e>
 8009038:	4bb6      	ldr	r3, [pc, #728]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009044:	d155      	bne.n	80090f2 <HAL_RCC_OscConfig+0x10e>
 8009046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800904a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800904e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8009052:	fa93 f3a3 	rbit	r3, r3
 8009056:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800905a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800905e:	fab3 f383 	clz	r3, r3
 8009062:	b2db      	uxtb	r3, r3
 8009064:	095b      	lsrs	r3, r3, #5
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f043 0301 	orr.w	r3, r3, #1
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b01      	cmp	r3, #1
 8009070:	d102      	bne.n	8009078 <HAL_RCC_OscConfig+0x94>
 8009072:	4ba8      	ldr	r3, [pc, #672]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	e015      	b.n	80090a4 <HAL_RCC_OscConfig+0xc0>
 8009078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800907c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009080:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8009084:	fa93 f3a3 	rbit	r3, r3
 8009088:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800908c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009090:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8009094:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8009098:	fa93 f3a3 	rbit	r3, r3
 800909c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80090a0:	4b9c      	ldr	r3, [pc, #624]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 80090a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80090a8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80090ac:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80090b0:	fa92 f2a2 	rbit	r2, r2
 80090b4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80090b8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80090bc:	fab2 f282 	clz	r2, r2
 80090c0:	b2d2      	uxtb	r2, r2
 80090c2:	f042 0220 	orr.w	r2, r2, #32
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	f002 021f 	and.w	r2, r2, #31
 80090cc:	2101      	movs	r1, #1
 80090ce:	fa01 f202 	lsl.w	r2, r1, r2
 80090d2:	4013      	ands	r3, r2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 811f 	beq.w	8009318 <HAL_RCC_OscConfig+0x334>
 80090da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80090de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f040 8116 	bne.w	8009318 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f000 bfaf 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80090f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80090f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009102:	d106      	bne.n	8009112 <HAL_RCC_OscConfig+0x12e>
 8009104:	4b83      	ldr	r3, [pc, #524]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a82      	ldr	r2, [pc, #520]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 800910a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	e036      	b.n	8009180 <HAL_RCC_OscConfig+0x19c>
 8009112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009116:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10c      	bne.n	800913c <HAL_RCC_OscConfig+0x158>
 8009122:	4b7c      	ldr	r3, [pc, #496]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a7b      	ldr	r2, [pc, #492]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	4b79      	ldr	r3, [pc, #484]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a78      	ldr	r2, [pc, #480]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	e021      	b.n	8009180 <HAL_RCC_OscConfig+0x19c>
 800913c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009140:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800914c:	d10c      	bne.n	8009168 <HAL_RCC_OscConfig+0x184>
 800914e:	4b71      	ldr	r3, [pc, #452]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a70      	ldr	r2, [pc, #448]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	4b6e      	ldr	r3, [pc, #440]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a6d      	ldr	r2, [pc, #436]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009164:	6013      	str	r3, [r2, #0]
 8009166:	e00b      	b.n	8009180 <HAL_RCC_OscConfig+0x19c>
 8009168:	4b6a      	ldr	r3, [pc, #424]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a69      	ldr	r2, [pc, #420]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 800916e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	4b67      	ldr	r3, [pc, #412]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a66      	ldr	r2, [pc, #408]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 800917a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800917e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009180:	4b64      	ldr	r3, [pc, #400]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	f023 020f 	bic.w	r2, r3, #15
 8009188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800918c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	495f      	ldr	r1, [pc, #380]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009196:	4313      	orrs	r3, r2
 8009198:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800919a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800919e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d059      	beq.n	800925e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091aa:	f7fd fdb1 	bl	8006d10 <HAL_GetTick>
 80091ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091b2:	e00a      	b.n	80091ca <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091b4:	f7fd fdac 	bl	8006d10 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	2b64      	cmp	r3, #100	; 0x64
 80091c2:	d902      	bls.n	80091ca <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	f000 bf43 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>
 80091ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091d2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80091d6:	fa93 f3a3 	rbit	r3, r3
 80091da:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80091de:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091e2:	fab3 f383 	clz	r3, r3
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	095b      	lsrs	r3, r3, #5
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	f043 0301 	orr.w	r3, r3, #1
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d102      	bne.n	80091fc <HAL_RCC_OscConfig+0x218>
 80091f6:	4b47      	ldr	r3, [pc, #284]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	e015      	b.n	8009228 <HAL_RCC_OscConfig+0x244>
 80091fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009200:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009204:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8009208:	fa93 f3a3 	rbit	r3, r3
 800920c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8009210:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009214:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8009218:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800921c:	fa93 f3a3 	rbit	r3, r3
 8009220:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8009224:	4b3b      	ldr	r3, [pc, #236]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800922c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8009230:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8009234:	fa92 f2a2 	rbit	r2, r2
 8009238:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800923c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8009240:	fab2 f282 	clz	r2, r2
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	f042 0220 	orr.w	r2, r2, #32
 800924a:	b2d2      	uxtb	r2, r2
 800924c:	f002 021f 	and.w	r2, r2, #31
 8009250:	2101      	movs	r1, #1
 8009252:	fa01 f202 	lsl.w	r2, r1, r2
 8009256:	4013      	ands	r3, r2
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0ab      	beq.n	80091b4 <HAL_RCC_OscConfig+0x1d0>
 800925c:	e05d      	b.n	800931a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800925e:	f7fd fd57 	bl	8006d10 <HAL_GetTick>
 8009262:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009266:	e00a      	b.n	800927e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009268:	f7fd fd52 	bl	8006d10 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	2b64      	cmp	r3, #100	; 0x64
 8009276:	d902      	bls.n	800927e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	f000 bee9 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>
 800927e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009282:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009286:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800928a:	fa93 f3a3 	rbit	r3, r3
 800928e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8009292:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009296:	fab3 f383 	clz	r3, r3
 800929a:	b2db      	uxtb	r3, r3
 800929c:	095b      	lsrs	r3, r3, #5
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f043 0301 	orr.w	r3, r3, #1
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d102      	bne.n	80092b0 <HAL_RCC_OscConfig+0x2cc>
 80092aa:	4b1a      	ldr	r3, [pc, #104]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	e015      	b.n	80092dc <HAL_RCC_OscConfig+0x2f8>
 80092b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80092b4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092b8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80092bc:	fa93 f3a3 	rbit	r3, r3
 80092c0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80092c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80092c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80092cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80092d0:	fa93 f3a3 	rbit	r3, r3
 80092d4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80092d8:	4b0e      	ldr	r3, [pc, #56]	; (8009314 <HAL_RCC_OscConfig+0x330>)
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80092e0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80092e4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80092e8:	fa92 f2a2 	rbit	r2, r2
 80092ec:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80092f0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80092f4:	fab2 f282 	clz	r2, r2
 80092f8:	b2d2      	uxtb	r2, r2
 80092fa:	f042 0220 	orr.w	r2, r2, #32
 80092fe:	b2d2      	uxtb	r2, r2
 8009300:	f002 021f 	and.w	r2, r2, #31
 8009304:	2101      	movs	r1, #1
 8009306:	fa01 f202 	lsl.w	r2, r1, r2
 800930a:	4013      	ands	r3, r2
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1ab      	bne.n	8009268 <HAL_RCC_OscConfig+0x284>
 8009310:	e003      	b.n	800931a <HAL_RCC_OscConfig+0x336>
 8009312:	bf00      	nop
 8009314:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800931a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800931e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 817d 	beq.w	800962a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009330:	4ba6      	ldr	r3, [pc, #664]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f003 030c 	and.w	r3, r3, #12
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800933c:	4ba3      	ldr	r3, [pc, #652]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	f003 030c 	and.w	r3, r3, #12
 8009344:	2b08      	cmp	r3, #8
 8009346:	d172      	bne.n	800942e <HAL_RCC_OscConfig+0x44a>
 8009348:	4ba0      	ldr	r3, [pc, #640]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d16c      	bne.n	800942e <HAL_RCC_OscConfig+0x44a>
 8009354:	2302      	movs	r3, #2
 8009356:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800935a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800935e:	fa93 f3a3 	rbit	r3, r3
 8009362:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8009366:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800936a:	fab3 f383 	clz	r3, r3
 800936e:	b2db      	uxtb	r3, r3
 8009370:	095b      	lsrs	r3, r3, #5
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f043 0301 	orr.w	r3, r3, #1
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b01      	cmp	r3, #1
 800937c:	d102      	bne.n	8009384 <HAL_RCC_OscConfig+0x3a0>
 800937e:	4b93      	ldr	r3, [pc, #588]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	e013      	b.n	80093ac <HAL_RCC_OscConfig+0x3c8>
 8009384:	2302      	movs	r3, #2
 8009386:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800938a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800938e:	fa93 f3a3 	rbit	r3, r3
 8009392:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8009396:	2302      	movs	r3, #2
 8009398:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800939c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80093a0:	fa93 f3a3 	rbit	r3, r3
 80093a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80093a8:	4b88      	ldr	r3, [pc, #544]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 80093aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ac:	2202      	movs	r2, #2
 80093ae:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80093b2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80093b6:	fa92 f2a2 	rbit	r2, r2
 80093ba:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80093be:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80093c2:	fab2 f282 	clz	r2, r2
 80093c6:	b2d2      	uxtb	r2, r2
 80093c8:	f042 0220 	orr.w	r2, r2, #32
 80093cc:	b2d2      	uxtb	r2, r2
 80093ce:	f002 021f 	and.w	r2, r2, #31
 80093d2:	2101      	movs	r1, #1
 80093d4:	fa01 f202 	lsl.w	r2, r1, r2
 80093d8:	4013      	ands	r3, r2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <HAL_RCC_OscConfig+0x410>
 80093de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80093e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d002      	beq.n	80093f4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	f000 be2e 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093f4:	4b75      	ldr	r3, [pc, #468]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009400:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	21f8      	movs	r1, #248	; 0xf8
 800940a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8009412:	fa91 f1a1 	rbit	r1, r1
 8009416:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800941a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800941e:	fab1 f181 	clz	r1, r1
 8009422:	b2c9      	uxtb	r1, r1
 8009424:	408b      	lsls	r3, r1
 8009426:	4969      	ldr	r1, [pc, #420]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 8009428:	4313      	orrs	r3, r2
 800942a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800942c:	e0fd      	b.n	800962a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800942e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 8088 	beq.w	8009550 <HAL_RCC_OscConfig+0x56c>
 8009440:	2301      	movs	r3, #1
 8009442:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009446:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800944a:	fa93 f3a3 	rbit	r3, r3
 800944e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8009452:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009456:	fab3 f383 	clz	r3, r3
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	461a      	mov	r2, r3
 8009468:	2301      	movs	r3, #1
 800946a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800946c:	f7fd fc50 	bl	8006d10 <HAL_GetTick>
 8009470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009474:	e00a      	b.n	800948c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009476:	f7fd fc4b 	bl	8006d10 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d902      	bls.n	800948c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	f000 bde2 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>
 800948c:	2302      	movs	r3, #2
 800948e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009492:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8009496:	fa93 f3a3 	rbit	r3, r3
 800949a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800949e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80094a2:	fab3 f383 	clz	r3, r3
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	095b      	lsrs	r3, r3, #5
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f043 0301 	orr.w	r3, r3, #1
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d102      	bne.n	80094bc <HAL_RCC_OscConfig+0x4d8>
 80094b6:	4b45      	ldr	r3, [pc, #276]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	e013      	b.n	80094e4 <HAL_RCC_OscConfig+0x500>
 80094bc:	2302      	movs	r3, #2
 80094be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80094c6:	fa93 f3a3 	rbit	r3, r3
 80094ca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80094ce:	2302      	movs	r3, #2
 80094d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80094d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80094d8:	fa93 f3a3 	rbit	r3, r3
 80094dc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80094e0:	4b3a      	ldr	r3, [pc, #232]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 80094e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e4:	2202      	movs	r2, #2
 80094e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80094ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80094ee:	fa92 f2a2 	rbit	r2, r2
 80094f2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80094f6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80094fa:	fab2 f282 	clz	r2, r2
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	f042 0220 	orr.w	r2, r2, #32
 8009504:	b2d2      	uxtb	r2, r2
 8009506:	f002 021f 	and.w	r2, r2, #31
 800950a:	2101      	movs	r1, #1
 800950c:	fa01 f202 	lsl.w	r2, r1, r2
 8009510:	4013      	ands	r3, r2
 8009512:	2b00      	cmp	r3, #0
 8009514:	d0af      	beq.n	8009476 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009516:	4b2d      	ldr	r3, [pc, #180]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800951e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009522:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	21f8      	movs	r1, #248	; 0xf8
 800952c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009530:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009534:	fa91 f1a1 	rbit	r1, r1
 8009538:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800953c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8009540:	fab1 f181 	clz	r1, r1
 8009544:	b2c9      	uxtb	r1, r1
 8009546:	408b      	lsls	r3, r1
 8009548:	4920      	ldr	r1, [pc, #128]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 800954a:	4313      	orrs	r3, r2
 800954c:	600b      	str	r3, [r1, #0]
 800954e:	e06c      	b.n	800962a <HAL_RCC_OscConfig+0x646>
 8009550:	2301      	movs	r3, #1
 8009552:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009556:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800955a:	fa93 f3a3 	rbit	r3, r3
 800955e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8009562:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009566:	fab3 f383 	clz	r3, r3
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009570:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	461a      	mov	r2, r3
 8009578:	2300      	movs	r3, #0
 800957a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800957c:	f7fd fbc8 	bl	8006d10 <HAL_GetTick>
 8009580:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009584:	e00a      	b.n	800959c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009586:	f7fd fbc3 	bl	8006d10 <HAL_GetTick>
 800958a:	4602      	mov	r2, r0
 800958c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009590:	1ad3      	subs	r3, r2, r3
 8009592:	2b02      	cmp	r3, #2
 8009594:	d902      	bls.n	800959c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	f000 bd5a 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>
 800959c:	2302      	movs	r3, #2
 800959e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095a6:	fa93 f3a3 	rbit	r3, r3
 80095aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80095ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095b2:	fab3 f383 	clz	r3, r3
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	095b      	lsrs	r3, r3, #5
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	f043 0301 	orr.w	r3, r3, #1
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d104      	bne.n	80095d0 <HAL_RCC_OscConfig+0x5ec>
 80095c6:	4b01      	ldr	r3, [pc, #4]	; (80095cc <HAL_RCC_OscConfig+0x5e8>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	e015      	b.n	80095f8 <HAL_RCC_OscConfig+0x614>
 80095cc:	40021000 	.word	0x40021000
 80095d0:	2302      	movs	r3, #2
 80095d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095da:	fa93 f3a3 	rbit	r3, r3
 80095de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80095e2:	2302      	movs	r3, #2
 80095e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80095e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095ec:	fa93 f3a3 	rbit	r3, r3
 80095f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80095f4:	4bc8      	ldr	r3, [pc, #800]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2202      	movs	r2, #2
 80095fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80095fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009602:	fa92 f2a2 	rbit	r2, r2
 8009606:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800960a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800960e:	fab2 f282 	clz	r2, r2
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	f042 0220 	orr.w	r2, r2, #32
 8009618:	b2d2      	uxtb	r2, r2
 800961a:	f002 021f 	and.w	r2, r2, #31
 800961e:	2101      	movs	r1, #1
 8009620:	fa01 f202 	lsl.w	r2, r1, r2
 8009624:	4013      	ands	r3, r2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d1ad      	bne.n	8009586 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800962a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800962e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0308 	and.w	r3, r3, #8
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 8110 	beq.w	8009860 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009644:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d079      	beq.n	8009744 <HAL_RCC_OscConfig+0x760>
 8009650:	2301      	movs	r3, #1
 8009652:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009656:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800965a:	fa93 f3a3 	rbit	r3, r3
 800965e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8009662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009666:	fab3 f383 	clz	r3, r3
 800966a:	b2db      	uxtb	r3, r3
 800966c:	461a      	mov	r2, r3
 800966e:	4bab      	ldr	r3, [pc, #684]	; (800991c <HAL_RCC_OscConfig+0x938>)
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	461a      	mov	r2, r3
 8009676:	2301      	movs	r3, #1
 8009678:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800967a:	f7fd fb49 	bl	8006d10 <HAL_GetTick>
 800967e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009682:	e00a      	b.n	800969a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009684:	f7fd fb44 	bl	8006d10 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b02      	cmp	r3, #2
 8009692:	d902      	bls.n	800969a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	f000 bcdb 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>
 800969a:	2302      	movs	r3, #2
 800969c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096a4:	fa93 f3a3 	rbit	r3, r3
 80096a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80096ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80096b4:	2202      	movs	r2, #2
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	fa93 f2a3 	rbit	r2, r3
 80096c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096ce:	601a      	str	r2, [r3, #0]
 80096d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d8:	2202      	movs	r2, #2
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	fa93 f2a3 	rbit	r2, r3
 80096ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80096f2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096f4:	4b88      	ldr	r3, [pc, #544]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 80096f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80096fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8009700:	2102      	movs	r1, #2
 8009702:	6019      	str	r1, [r3, #0]
 8009704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009708:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	fa93 f1a3 	rbit	r1, r3
 8009712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009716:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800971a:	6019      	str	r1, [r3, #0]
  return result;
 800971c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009720:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	fab3 f383 	clz	r3, r3
 800972a:	b2db      	uxtb	r3, r3
 800972c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009730:	b2db      	uxtb	r3, r3
 8009732:	f003 031f 	and.w	r3, r3, #31
 8009736:	2101      	movs	r1, #1
 8009738:	fa01 f303 	lsl.w	r3, r1, r3
 800973c:	4013      	ands	r3, r2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0a0      	beq.n	8009684 <HAL_RCC_OscConfig+0x6a0>
 8009742:	e08d      	b.n	8009860 <HAL_RCC_OscConfig+0x87c>
 8009744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009748:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800974c:	2201      	movs	r2, #1
 800974e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009754:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	fa93 f2a3 	rbit	r2, r3
 800975e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009762:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009766:	601a      	str	r2, [r3, #0]
  return result;
 8009768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800976c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8009770:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009772:	fab3 f383 	clz	r3, r3
 8009776:	b2db      	uxtb	r3, r3
 8009778:	461a      	mov	r2, r3
 800977a:	4b68      	ldr	r3, [pc, #416]	; (800991c <HAL_RCC_OscConfig+0x938>)
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	461a      	mov	r2, r3
 8009782:	2300      	movs	r3, #0
 8009784:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009786:	f7fd fac3 	bl	8006d10 <HAL_GetTick>
 800978a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800978e:	e00a      	b.n	80097a6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009790:	f7fd fabe 	bl	8006d10 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	2b02      	cmp	r3, #2
 800979e:	d902      	bls.n	80097a6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	f000 bc55 	b.w	800a050 <HAL_RCC_OscConfig+0x106c>
 80097a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80097ae:	2202      	movs	r2, #2
 80097b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	fa93 f2a3 	rbit	r2, r3
 80097c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097c4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80097d2:	2202      	movs	r2, #2
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	fa93 f2a3 	rbit	r2, r3
 80097e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80097f6:	2202      	movs	r2, #2
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80097fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	fa93 f2a3 	rbit	r2, r3
 8009808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800980c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009810:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009812:	4b41      	ldr	r3, [pc, #260]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 8009814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800981a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800981e:	2102      	movs	r1, #2
 8009820:	6019      	str	r1, [r3, #0]
 8009822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009826:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	fa93 f1a3 	rbit	r1, r3
 8009830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009834:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009838:	6019      	str	r1, [r3, #0]
  return result;
 800983a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800983e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	fab3 f383 	clz	r3, r3
 8009848:	b2db      	uxtb	r3, r3
 800984a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800984e:	b2db      	uxtb	r3, r3
 8009850:	f003 031f 	and.w	r3, r3, #31
 8009854:	2101      	movs	r1, #1
 8009856:	fa01 f303 	lsl.w	r3, r1, r3
 800985a:	4013      	ands	r3, r2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d197      	bne.n	8009790 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009860:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009864:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 81a1 	beq.w	8009bb8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009876:	2300      	movs	r3, #0
 8009878:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800987c:	4b26      	ldr	r3, [pc, #152]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d116      	bne.n	80098b6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009888:	4b23      	ldr	r3, [pc, #140]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	4a22      	ldr	r2, [pc, #136]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 800988e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009892:	61d3      	str	r3, [r2, #28]
 8009894:	4b20      	ldr	r3, [pc, #128]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 8009896:	69db      	ldr	r3, [r3, #28]
 8009898:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800989c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098a0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80098a4:	601a      	str	r2, [r3, #0]
 80098a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098aa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80098ae:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80098b0:	2301      	movs	r3, #1
 80098b2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098b6:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <HAL_RCC_OscConfig+0x93c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d11a      	bne.n	80098f8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <HAL_RCC_OscConfig+0x93c>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a16      	ldr	r2, [pc, #88]	; (8009920 <HAL_RCC_OscConfig+0x93c>)
 80098c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098cc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098ce:	f7fd fa1f 	bl	8006d10 <HAL_GetTick>
 80098d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098d6:	e009      	b.n	80098ec <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098d8:	f7fd fa1a 	bl	8006d10 <HAL_GetTick>
 80098dc:	4602      	mov	r2, r0
 80098de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b64      	cmp	r3, #100	; 0x64
 80098e6:	d901      	bls.n	80098ec <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e3b1      	b.n	800a050 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80098ec:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <HAL_RCC_OscConfig+0x93c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0ef      	beq.n	80098d8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80098f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80098fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d10d      	bne.n	8009924 <HAL_RCC_OscConfig+0x940>
 8009908:	4b03      	ldr	r3, [pc, #12]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	4a02      	ldr	r2, [pc, #8]	; (8009918 <HAL_RCC_OscConfig+0x934>)
 800990e:	f043 0301 	orr.w	r3, r3, #1
 8009912:	6213      	str	r3, [r2, #32]
 8009914:	e03c      	b.n	8009990 <HAL_RCC_OscConfig+0x9ac>
 8009916:	bf00      	nop
 8009918:	40021000 	.word	0x40021000
 800991c:	10908120 	.word	0x10908120
 8009920:	40007000 	.word	0x40007000
 8009924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009928:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10c      	bne.n	800994e <HAL_RCC_OscConfig+0x96a>
 8009934:	4bc1      	ldr	r3, [pc, #772]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	4ac0      	ldr	r2, [pc, #768]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 800993a:	f023 0301 	bic.w	r3, r3, #1
 800993e:	6213      	str	r3, [r2, #32]
 8009940:	4bbe      	ldr	r3, [pc, #760]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009942:	6a1b      	ldr	r3, [r3, #32]
 8009944:	4abd      	ldr	r2, [pc, #756]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009946:	f023 0304 	bic.w	r3, r3, #4
 800994a:	6213      	str	r3, [r2, #32]
 800994c:	e020      	b.n	8009990 <HAL_RCC_OscConfig+0x9ac>
 800994e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68db      	ldr	r3, [r3, #12]
 800995a:	2b05      	cmp	r3, #5
 800995c:	d10c      	bne.n	8009978 <HAL_RCC_OscConfig+0x994>
 800995e:	4bb7      	ldr	r3, [pc, #732]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009960:	6a1b      	ldr	r3, [r3, #32]
 8009962:	4ab6      	ldr	r2, [pc, #728]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009964:	f043 0304 	orr.w	r3, r3, #4
 8009968:	6213      	str	r3, [r2, #32]
 800996a:	4bb4      	ldr	r3, [pc, #720]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 800996c:	6a1b      	ldr	r3, [r3, #32]
 800996e:	4ab3      	ldr	r2, [pc, #716]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009970:	f043 0301 	orr.w	r3, r3, #1
 8009974:	6213      	str	r3, [r2, #32]
 8009976:	e00b      	b.n	8009990 <HAL_RCC_OscConfig+0x9ac>
 8009978:	4bb0      	ldr	r3, [pc, #704]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	4aaf      	ldr	r2, [pc, #700]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 800997e:	f023 0301 	bic.w	r3, r3, #1
 8009982:	6213      	str	r3, [r2, #32]
 8009984:	4bad      	ldr	r3, [pc, #692]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009986:	6a1b      	ldr	r3, [r3, #32]
 8009988:	4aac      	ldr	r2, [pc, #688]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 800998a:	f023 0304 	bic.w	r3, r3, #4
 800998e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009994:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 8081 	beq.w	8009aa4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80099a2:	f7fd f9b5 	bl	8006d10 <HAL_GetTick>
 80099a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099aa:	e00b      	b.n	80099c4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099ac:	f7fd f9b0 	bl	8006d10 <HAL_GetTick>
 80099b0:	4602      	mov	r2, r0
 80099b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099bc:	4293      	cmp	r3, r2
 80099be:	d901      	bls.n	80099c4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e345      	b.n	800a050 <HAL_RCC_OscConfig+0x106c>
 80099c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80099cc:	2202      	movs	r2, #2
 80099ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	fa93 f2a3 	rbit	r2, r3
 80099de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099e2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80099f0:	2202      	movs	r2, #2
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80099f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	fa93 f2a3 	rbit	r2, r3
 8009a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a06:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009a0a:	601a      	str	r2, [r3, #0]
  return result;
 8009a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a10:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8009a14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a16:	fab3 f383 	clz	r3, r3
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	095b      	lsrs	r3, r3, #5
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f043 0302 	orr.w	r3, r3, #2
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d102      	bne.n	8009a30 <HAL_RCC_OscConfig+0xa4c>
 8009a2a:	4b84      	ldr	r3, [pc, #528]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	e013      	b.n	8009a58 <HAL_RCC_OscConfig+0xa74>
 8009a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a34:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009a38:	2202      	movs	r2, #2
 8009a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a40:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	fa93 f2a3 	rbit	r2, r3
 8009a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009a4e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	4b79      	ldr	r3, [pc, #484]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a5c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009a60:	2102      	movs	r1, #2
 8009a62:	6011      	str	r1, [r2, #0]
 8009a64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a68:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8009a6c:	6812      	ldr	r2, [r2, #0]
 8009a6e:	fa92 f1a2 	rbit	r1, r2
 8009a72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a76:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009a7a:	6011      	str	r1, [r2, #0]
  return result;
 8009a7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009a80:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8009a84:	6812      	ldr	r2, [r2, #0]
 8009a86:	fab2 f282 	clz	r2, r2
 8009a8a:	b2d2      	uxtb	r2, r2
 8009a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	f002 021f 	and.w	r2, r2, #31
 8009a96:	2101      	movs	r1, #1
 8009a98:	fa01 f202 	lsl.w	r2, r1, r2
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d084      	beq.n	80099ac <HAL_RCC_OscConfig+0x9c8>
 8009aa2:	e07f      	b.n	8009ba4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009aa4:	f7fd f934 	bl	8006d10 <HAL_GetTick>
 8009aa8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009aac:	e00b      	b.n	8009ac6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009aae:	f7fd f92f 	bl	8006d10 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e2c4      	b.n	800a050 <HAL_RCC_OscConfig+0x106c>
 8009ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009ace:	2202      	movs	r2, #2
 8009ad0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ad6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	fa93 f2a3 	rbit	r2, r3
 8009ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ae4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009aee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009af2:	2202      	movs	r2, #2
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009afa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	fa93 f2a3 	rbit	r2, r3
 8009b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b08:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009b0c:	601a      	str	r2, [r3, #0]
  return result;
 8009b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b12:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8009b16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b18:	fab3 f383 	clz	r3, r3
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	095b      	lsrs	r3, r3, #5
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	f043 0302 	orr.w	r3, r3, #2
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d102      	bne.n	8009b32 <HAL_RCC_OscConfig+0xb4e>
 8009b2c:	4b43      	ldr	r3, [pc, #268]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	e013      	b.n	8009b5a <HAL_RCC_OscConfig+0xb76>
 8009b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b36:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	fa93 f2a3 	rbit	r2, r3
 8009b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009b50:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	4b39      	ldr	r3, [pc, #228]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b5e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009b62:	2102      	movs	r1, #2
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b6a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8009b6e:	6812      	ldr	r2, [r2, #0]
 8009b70:	fa92 f1a2 	rbit	r1, r2
 8009b74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b78:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009b7c:	6011      	str	r1, [r2, #0]
  return result;
 8009b7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009b82:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8009b86:	6812      	ldr	r2, [r2, #0]
 8009b88:	fab2 f282 	clz	r2, r2
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b92:	b2d2      	uxtb	r2, r2
 8009b94:	f002 021f 	and.w	r2, r2, #31
 8009b98:	2101      	movs	r1, #1
 8009b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d184      	bne.n	8009aae <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ba4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d105      	bne.n	8009bb8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bac:	4b23      	ldr	r3, [pc, #140]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009bae:	69db      	ldr	r3, [r3, #28]
 8009bb0:	4a22      	ldr	r2, [pc, #136]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bb6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f000 8242 	beq.w	800a04e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009bca:	4b1c      	ldr	r3, [pc, #112]	; (8009c3c <HAL_RCC_OscConfig+0xc58>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f003 030c 	and.w	r3, r3, #12
 8009bd2:	2b08      	cmp	r3, #8
 8009bd4:	f000 8213 	beq.w	8009ffe <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	f040 8162 	bne.w	8009eae <HAL_RCC_OscConfig+0xeca>
 8009bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bee:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009bf2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009bfc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	fa93 f2a3 	rbit	r2, r3
 8009c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c0a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009c0e:	601a      	str	r2, [r3, #0]
  return result;
 8009c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c14:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8009c18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c1a:	fab3 f383 	clz	r3, r3
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c30:	f7fd f86e 	bl	8006d10 <HAL_GetTick>
 8009c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c38:	e00c      	b.n	8009c54 <HAL_RCC_OscConfig+0xc70>
 8009c3a:	bf00      	nop
 8009c3c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c40:	f7fd f866 	bl	8006d10 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d901      	bls.n	8009c54 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e1fd      	b.n	800a050 <HAL_RCC_OscConfig+0x106c>
 8009c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c58:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c66:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	fa93 f2a3 	rbit	r2, r3
 8009c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c74:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009c78:	601a      	str	r2, [r3, #0]
  return result;
 8009c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009c7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8009c82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009c84:	fab3 f383 	clz	r3, r3
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	095b      	lsrs	r3, r3, #5
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f043 0301 	orr.w	r3, r3, #1
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d102      	bne.n	8009c9e <HAL_RCC_OscConfig+0xcba>
 8009c98:	4bb0      	ldr	r3, [pc, #704]	; (8009f5c <HAL_RCC_OscConfig+0xf78>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	e027      	b.n	8009cee <HAL_RCC_OscConfig+0xd0a>
 8009c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ca2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009caa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cb0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	fa93 f2a3 	rbit	r2, r3
 8009cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cbe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cc8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009cd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	fa93 f2a3 	rbit	r2, r3
 8009ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ce4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	4b9c      	ldr	r3, [pc, #624]	; (8009f5c <HAL_RCC_OscConfig+0xf78>)
 8009cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009cf2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009cf6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009cfa:	6011      	str	r1, [r2, #0]
 8009cfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d00:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8009d04:	6812      	ldr	r2, [r2, #0]
 8009d06:	fa92 f1a2 	rbit	r1, r2
 8009d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d0e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009d12:	6011      	str	r1, [r2, #0]
  return result;
 8009d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009d18:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	fab2 f282 	clz	r2, r2
 8009d22:	b2d2      	uxtb	r2, r2
 8009d24:	f042 0220 	orr.w	r2, r2, #32
 8009d28:	b2d2      	uxtb	r2, r2
 8009d2a:	f002 021f 	and.w	r2, r2, #31
 8009d2e:	2101      	movs	r1, #1
 8009d30:	fa01 f202 	lsl.w	r2, r1, r2
 8009d34:	4013      	ands	r3, r2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d182      	bne.n	8009c40 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d3a:	4b88      	ldr	r3, [pc, #544]	; (8009f5c <HAL_RCC_OscConfig+0xf78>)
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009d42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	430b      	orrs	r3, r1
 8009d5c:	497f      	ldr	r1, [pc, #508]	; (8009f5c <HAL_RCC_OscConfig+0xf78>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	604b      	str	r3, [r1, #4]
 8009d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d66:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009d6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d74:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	fa93 f2a3 	rbit	r2, r3
 8009d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d82:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009d86:	601a      	str	r2, [r3, #0]
  return result;
 8009d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009d8c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8009d90:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d92:	fab3 f383 	clz	r3, r3
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009d9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	461a      	mov	r2, r3
 8009da4:	2301      	movs	r3, #1
 8009da6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009da8:	f7fc ffb2 	bl	8006d10 <HAL_GetTick>
 8009dac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009db0:	e009      	b.n	8009dc6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009db2:	f7fc ffad 	bl	8006d10 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d901      	bls.n	8009dc6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e144      	b.n	800a050 <HAL_RCC_OscConfig+0x106c>
 8009dc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dca:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009dce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009dd8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	fa93 f2a3 	rbit	r2, r3
 8009de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009de6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009dea:	601a      	str	r2, [r3, #0]
  return result;
 8009dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009df0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8009df4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009df6:	fab3 f383 	clz	r3, r3
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	095b      	lsrs	r3, r3, #5
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	f043 0301 	orr.w	r3, r3, #1
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d102      	bne.n	8009e10 <HAL_RCC_OscConfig+0xe2c>
 8009e0a:	4b54      	ldr	r3, [pc, #336]	; (8009f5c <HAL_RCC_OscConfig+0xf78>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	e027      	b.n	8009e60 <HAL_RCC_OscConfig+0xe7c>
 8009e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e14:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e22:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	fa93 f2a3 	rbit	r2, r3
 8009e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e3a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009e42:	601a      	str	r2, [r3, #0]
 8009e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e48:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	fa93 f2a3 	rbit	r2, r3
 8009e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009e56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	4b3f      	ldr	r3, [pc, #252]	; (8009f5c <HAL_RCC_OscConfig+0xf78>)
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e64:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009e68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009e6c:	6011      	str	r1, [r2, #0]
 8009e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e72:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8009e76:	6812      	ldr	r2, [r2, #0]
 8009e78:	fa92 f1a2 	rbit	r1, r2
 8009e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009e84:	6011      	str	r1, [r2, #0]
  return result;
 8009e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009e8a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8009e8e:	6812      	ldr	r2, [r2, #0]
 8009e90:	fab2 f282 	clz	r2, r2
 8009e94:	b2d2      	uxtb	r2, r2
 8009e96:	f042 0220 	orr.w	r2, r2, #32
 8009e9a:	b2d2      	uxtb	r2, r2
 8009e9c:	f002 021f 	and.w	r2, r2, #31
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d082      	beq.n	8009db2 <HAL_RCC_OscConfig+0xdce>
 8009eac:	e0cf      	b.n	800a04e <HAL_RCC_OscConfig+0x106a>
 8009eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009eb2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009eb6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ec0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	fa93 f2a3 	rbit	r2, r3
 8009eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ece:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009ed2:	601a      	str	r2, [r3, #0]
  return result;
 8009ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009ed8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8009edc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ede:	fab3 f383 	clz	r3, r3
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009ee8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	461a      	mov	r2, r3
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ef4:	f7fc ff0c 	bl	8006d10 <HAL_GetTick>
 8009ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009efc:	e009      	b.n	8009f12 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009efe:	f7fc ff07 	bl	8006d10 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d901      	bls.n	8009f12 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	e09e      	b.n	800a050 <HAL_RCC_OscConfig+0x106c>
 8009f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f16:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009f1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f24:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	fa93 f2a3 	rbit	r2, r3
 8009f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009f36:	601a      	str	r2, [r3, #0]
  return result;
 8009f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f3c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8009f40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009f42:	fab3 f383 	clz	r3, r3
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	095b      	lsrs	r3, r3, #5
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	f043 0301 	orr.w	r3, r3, #1
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d104      	bne.n	8009f60 <HAL_RCC_OscConfig+0xf7c>
 8009f56:	4b01      	ldr	r3, [pc, #4]	; (8009f5c <HAL_RCC_OscConfig+0xf78>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	e029      	b.n	8009fb0 <HAL_RCC_OscConfig+0xfcc>
 8009f5c:	40021000 	.word	0x40021000
 8009f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f64:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f72:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	fa93 f2a3 	rbit	r2, r3
 8009f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f80:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009f8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009f98:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	fa93 f2a3 	rbit	r2, r3
 8009fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8009fa6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	4b2b      	ldr	r3, [pc, #172]	; (800a05c <HAL_RCC_OscConfig+0x1078>)
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fb4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009fb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009fbc:	6011      	str	r1, [r2, #0]
 8009fbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fc2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8009fc6:	6812      	ldr	r2, [r2, #0]
 8009fc8:	fa92 f1a2 	rbit	r1, r2
 8009fcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fd0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009fd4:	6011      	str	r1, [r2, #0]
  return result;
 8009fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8009fda:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8009fde:	6812      	ldr	r2, [r2, #0]
 8009fe0:	fab2 f282 	clz	r2, r2
 8009fe4:	b2d2      	uxtb	r2, r2
 8009fe6:	f042 0220 	orr.w	r2, r2, #32
 8009fea:	b2d2      	uxtb	r2, r2
 8009fec:	f002 021f 	and.w	r2, r2, #31
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d180      	bne.n	8009efe <HAL_RCC_OscConfig+0xf1a>
 8009ffc:	e027      	b.n	800a04e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d101      	bne.n	800a012 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e01e      	b.n	800a050 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <HAL_RCC_OscConfig+0x1078>)
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a01a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a01e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d10b      	bne.n	800a04a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800a032:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800a036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a03a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800a03e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800a046:	429a      	cmp	r2, r3
 800a048:	d001      	beq.n	800a04e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	40021000 	.word	0x40021000

0800a060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b09e      	sub	sp, #120	; 0x78
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e162      	b.n	800a33e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a078:	4b90      	ldr	r3, [pc, #576]	; (800a2bc <HAL_RCC_ClockConfig+0x25c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0307 	and.w	r3, r3, #7
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d910      	bls.n	800a0a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a086:	4b8d      	ldr	r3, [pc, #564]	; (800a2bc <HAL_RCC_ClockConfig+0x25c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f023 0207 	bic.w	r2, r3, #7
 800a08e:	498b      	ldr	r1, [pc, #556]	; (800a2bc <HAL_RCC_ClockConfig+0x25c>)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	4313      	orrs	r3, r2
 800a094:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a096:	4b89      	ldr	r3, [pc, #548]	; (800a2bc <HAL_RCC_ClockConfig+0x25c>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d001      	beq.n	800a0a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e14a      	b.n	800a33e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d008      	beq.n	800a0c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0b4:	4b82      	ldr	r3, [pc, #520]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	497f      	ldr	r1, [pc, #508]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 80dc 	beq.w	800a28c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d13c      	bne.n	800a156 <HAL_RCC_ClockConfig+0xf6>
 800a0dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a0e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0e4:	fa93 f3a3 	rbit	r3, r3
 800a0e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800a0ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0ec:	fab3 f383 	clz	r3, r3
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	095b      	lsrs	r3, r3, #5
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	f043 0301 	orr.w	r3, r3, #1
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d102      	bne.n	800a106 <HAL_RCC_ClockConfig+0xa6>
 800a100:	4b6f      	ldr	r3, [pc, #444]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	e00f      	b.n	800a126 <HAL_RCC_ClockConfig+0xc6>
 800a106:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a10a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a10c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a10e:	fa93 f3a3 	rbit	r3, r3
 800a112:	667b      	str	r3, [r7, #100]	; 0x64
 800a114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a118:	663b      	str	r3, [r7, #96]	; 0x60
 800a11a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a11c:	fa93 f3a3 	rbit	r3, r3
 800a120:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a122:	4b67      	ldr	r3, [pc, #412]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a126:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a12a:	65ba      	str	r2, [r7, #88]	; 0x58
 800a12c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a12e:	fa92 f2a2 	rbit	r2, r2
 800a132:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800a134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a136:	fab2 f282 	clz	r2, r2
 800a13a:	b2d2      	uxtb	r2, r2
 800a13c:	f042 0220 	orr.w	r2, r2, #32
 800a140:	b2d2      	uxtb	r2, r2
 800a142:	f002 021f 	and.w	r2, r2, #31
 800a146:	2101      	movs	r1, #1
 800a148:	fa01 f202 	lsl.w	r2, r1, r2
 800a14c:	4013      	ands	r3, r2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d17b      	bne.n	800a24a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e0f3      	b.n	800a33e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d13c      	bne.n	800a1d8 <HAL_RCC_ClockConfig+0x178>
 800a15e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a162:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a166:	fa93 f3a3 	rbit	r3, r3
 800a16a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800a16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a16e:	fab3 f383 	clz	r3, r3
 800a172:	b2db      	uxtb	r3, r3
 800a174:	095b      	lsrs	r3, r3, #5
 800a176:	b2db      	uxtb	r3, r3
 800a178:	f043 0301 	orr.w	r3, r3, #1
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b01      	cmp	r3, #1
 800a180:	d102      	bne.n	800a188 <HAL_RCC_ClockConfig+0x128>
 800a182:	4b4f      	ldr	r3, [pc, #316]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	e00f      	b.n	800a1a8 <HAL_RCC_ClockConfig+0x148>
 800a188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a18c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a190:	fa93 f3a3 	rbit	r3, r3
 800a194:	647b      	str	r3, [r7, #68]	; 0x44
 800a196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a19a:	643b      	str	r3, [r7, #64]	; 0x40
 800a19c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a19e:	fa93 f3a3 	rbit	r3, r3
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1a4:	4b46      	ldr	r3, [pc, #280]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a1ac:	63ba      	str	r2, [r7, #56]	; 0x38
 800a1ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1b0:	fa92 f2a2 	rbit	r2, r2
 800a1b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800a1b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b8:	fab2 f282 	clz	r2, r2
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	f042 0220 	orr.w	r2, r2, #32
 800a1c2:	b2d2      	uxtb	r2, r2
 800a1c4:	f002 021f 	and.w	r2, r2, #31
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	fa01 f202 	lsl.w	r2, r1, r2
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d13a      	bne.n	800a24a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e0b2      	b.n	800a33e <HAL_RCC_ClockConfig+0x2de>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1de:	fa93 f3a3 	rbit	r3, r3
 800a1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1e6:	fab3 f383 	clz	r3, r3
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	095b      	lsrs	r3, r3, #5
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	f043 0301 	orr.w	r3, r3, #1
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d102      	bne.n	800a200 <HAL_RCC_ClockConfig+0x1a0>
 800a1fa:	4b31      	ldr	r3, [pc, #196]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	e00d      	b.n	800a21c <HAL_RCC_ClockConfig+0x1bc>
 800a200:	2302      	movs	r3, #2
 800a202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a206:	fa93 f3a3 	rbit	r3, r3
 800a20a:	627b      	str	r3, [r7, #36]	; 0x24
 800a20c:	2302      	movs	r3, #2
 800a20e:	623b      	str	r3, [r7, #32]
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	fa93 f3a3 	rbit	r3, r3
 800a216:	61fb      	str	r3, [r7, #28]
 800a218:	4b29      	ldr	r3, [pc, #164]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	2202      	movs	r2, #2
 800a21e:	61ba      	str	r2, [r7, #24]
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	fa92 f2a2 	rbit	r2, r2
 800a226:	617a      	str	r2, [r7, #20]
  return result;
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	fab2 f282 	clz	r2, r2
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	f042 0220 	orr.w	r2, r2, #32
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	f002 021f 	and.w	r2, r2, #31
 800a23a:	2101      	movs	r1, #1
 800a23c:	fa01 f202 	lsl.w	r2, r1, r2
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d101      	bne.n	800a24a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	e079      	b.n	800a33e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	f023 0203 	bic.w	r2, r3, #3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	491a      	ldr	r1, [pc, #104]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a25c:	f7fc fd58 	bl	8006d10 <HAL_GetTick>
 800a260:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a262:	e00a      	b.n	800a27a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a264:	f7fc fd54 	bl	8006d10 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a272:	4293      	cmp	r3, r2
 800a274:	d901      	bls.n	800a27a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e061      	b.n	800a33e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a27a:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <HAL_RCC_ClockConfig+0x260>)
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	f003 020c 	and.w	r2, r3, #12
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	429a      	cmp	r2, r3
 800a28a:	d1eb      	bne.n	800a264 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a28c:	4b0b      	ldr	r3, [pc, #44]	; (800a2bc <HAL_RCC_ClockConfig+0x25c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0307 	and.w	r3, r3, #7
 800a294:	683a      	ldr	r2, [r7, #0]
 800a296:	429a      	cmp	r2, r3
 800a298:	d214      	bcs.n	800a2c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a29a:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <HAL_RCC_ClockConfig+0x25c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f023 0207 	bic.w	r2, r3, #7
 800a2a2:	4906      	ldr	r1, [pc, #24]	; (800a2bc <HAL_RCC_ClockConfig+0x25c>)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2aa:	4b04      	ldr	r3, [pc, #16]	; (800a2bc <HAL_RCC_ClockConfig+0x25c>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0307 	and.w	r3, r3, #7
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d005      	beq.n	800a2c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e040      	b.n	800a33e <HAL_RCC_ClockConfig+0x2de>
 800a2bc:	40022000 	.word	0x40022000
 800a2c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d008      	beq.n	800a2e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2d0:	4b1d      	ldr	r3, [pc, #116]	; (800a348 <HAL_RCC_ClockConfig+0x2e8>)
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	491a      	ldr	r1, [pc, #104]	; (800a348 <HAL_RCC_ClockConfig+0x2e8>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d009      	beq.n	800a302 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a2ee:	4b16      	ldr	r3, [pc, #88]	; (800a348 <HAL_RCC_ClockConfig+0x2e8>)
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	4912      	ldr	r1, [pc, #72]	; (800a348 <HAL_RCC_ClockConfig+0x2e8>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a302:	f000 f829 	bl	800a358 <HAL_RCC_GetSysClockFreq>
 800a306:	4601      	mov	r1, r0
 800a308:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <HAL_RCC_ClockConfig+0x2e8>)
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a310:	22f0      	movs	r2, #240	; 0xf0
 800a312:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	fa92 f2a2 	rbit	r2, r2
 800a31a:	60fa      	str	r2, [r7, #12]
  return result;
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	fab2 f282 	clz	r2, r2
 800a322:	b2d2      	uxtb	r2, r2
 800a324:	40d3      	lsrs	r3, r2
 800a326:	4a09      	ldr	r2, [pc, #36]	; (800a34c <HAL_RCC_ClockConfig+0x2ec>)
 800a328:	5cd3      	ldrb	r3, [r2, r3]
 800a32a:	fa21 f303 	lsr.w	r3, r1, r3
 800a32e:	4a08      	ldr	r2, [pc, #32]	; (800a350 <HAL_RCC_ClockConfig+0x2f0>)
 800a330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800a332:	4b08      	ldr	r3, [pc, #32]	; (800a354 <HAL_RCC_ClockConfig+0x2f4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4618      	mov	r0, r3
 800a338:	f7fc fca6 	bl	8006c88 <HAL_InitTick>
  
  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3778      	adds	r7, #120	; 0x78
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	40021000 	.word	0x40021000
 800a34c:	0801067c 	.word	0x0801067c
 800a350:	20000050 	.word	0x20000050
 800a354:	20000054 	.word	0x20000054

0800a358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a358:	b480      	push	{r7}
 800a35a:	b08b      	sub	sp, #44	; 0x2c
 800a35c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	61fb      	str	r3, [r7, #28]
 800a362:	2300      	movs	r3, #0
 800a364:	61bb      	str	r3, [r7, #24]
 800a366:	2300      	movs	r3, #0
 800a368:	627b      	str	r3, [r7, #36]	; 0x24
 800a36a:	2300      	movs	r3, #0
 800a36c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800a36e:	2300      	movs	r3, #0
 800a370:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800a372:	4b29      	ldr	r3, [pc, #164]	; (800a418 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	f003 030c 	and.w	r3, r3, #12
 800a37e:	2b04      	cmp	r3, #4
 800a380:	d002      	beq.n	800a388 <HAL_RCC_GetSysClockFreq+0x30>
 800a382:	2b08      	cmp	r3, #8
 800a384:	d003      	beq.n	800a38e <HAL_RCC_GetSysClockFreq+0x36>
 800a386:	e03c      	b.n	800a402 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a388:	4b24      	ldr	r3, [pc, #144]	; (800a41c <HAL_RCC_GetSysClockFreq+0xc4>)
 800a38a:	623b      	str	r3, [r7, #32]
      break;
 800a38c:	e03c      	b.n	800a408 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800a394:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800a398:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	fa92 f2a2 	rbit	r2, r2
 800a3a0:	607a      	str	r2, [r7, #4]
  return result;
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	fab2 f282 	clz	r2, r2
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	40d3      	lsrs	r3, r2
 800a3ac:	4a1c      	ldr	r2, [pc, #112]	; (800a420 <HAL_RCC_GetSysClockFreq+0xc8>)
 800a3ae:	5cd3      	ldrb	r3, [r2, r3]
 800a3b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800a3b2:	4b19      	ldr	r3, [pc, #100]	; (800a418 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	f003 030f 	and.w	r3, r3, #15
 800a3ba:	220f      	movs	r2, #15
 800a3bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	fa92 f2a2 	rbit	r2, r2
 800a3c4:	60fa      	str	r2, [r7, #12]
  return result;
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	fab2 f282 	clz	r2, r2
 800a3cc:	b2d2      	uxtb	r2, r2
 800a3ce:	40d3      	lsrs	r3, r2
 800a3d0:	4a14      	ldr	r2, [pc, #80]	; (800a424 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a3d2:	5cd3      	ldrb	r3, [r2, r3]
 800a3d4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d008      	beq.n	800a3f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a3e0:	4a0e      	ldr	r2, [pc, #56]	; (800a41c <HAL_RCC_GetSysClockFreq+0xc4>)
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	fb02 f303 	mul.w	r3, r2, r3
 800a3ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a3f0:	e004      	b.n	800a3fc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	4a0c      	ldr	r2, [pc, #48]	; (800a428 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a3f6:	fb02 f303 	mul.w	r3, r2, r3
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	623b      	str	r3, [r7, #32]
      break;
 800a400:	e002      	b.n	800a408 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a402:	4b06      	ldr	r3, [pc, #24]	; (800a41c <HAL_RCC_GetSysClockFreq+0xc4>)
 800a404:	623b      	str	r3, [r7, #32]
      break;
 800a406:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a408:	6a3b      	ldr	r3, [r7, #32]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	372c      	adds	r7, #44	; 0x2c
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	40021000 	.word	0x40021000
 800a41c:	007a1200 	.word	0x007a1200
 800a420:	0801068c 	.word	0x0801068c
 800a424:	0801069c 	.word	0x0801069c
 800a428:	003d0900 	.word	0x003d0900

0800a42c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b092      	sub	sp, #72	; 0x48
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a434:	2300      	movs	r3, #0
 800a436:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800a438:	2300      	movs	r3, #0
 800a43a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800a43c:	2300      	movs	r3, #0
 800a43e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f000 80d4 	beq.w	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a450:	4b4e      	ldr	r3, [pc, #312]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a452:	69db      	ldr	r3, [r3, #28]
 800a454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10e      	bne.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a45c:	4b4b      	ldr	r3, [pc, #300]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	4a4a      	ldr	r2, [pc, #296]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a466:	61d3      	str	r3, [r2, #28]
 800a468:	4b48      	ldr	r3, [pc, #288]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a470:	60bb      	str	r3, [r7, #8]
 800a472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a474:	2301      	movs	r3, #1
 800a476:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a47a:	4b45      	ldr	r3, [pc, #276]	; (800a590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a482:	2b00      	cmp	r3, #0
 800a484:	d118      	bne.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a486:	4b42      	ldr	r3, [pc, #264]	; (800a590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a41      	ldr	r2, [pc, #260]	; (800a590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a48c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a490:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a492:	f7fc fc3d 	bl	8006d10 <HAL_GetTick>
 800a496:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a498:	e008      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a49a:	f7fc fc39 	bl	8006d10 <HAL_GetTick>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4a2:	1ad3      	subs	r3, r2, r3
 800a4a4:	2b64      	cmp	r3, #100	; 0x64
 800a4a6:	d901      	bls.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e169      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4ac:	4b38      	ldr	r3, [pc, #224]	; (800a590 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d0f0      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a4b8:	4b34      	ldr	r3, [pc, #208]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 8084 	beq.w	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d07c      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4d8:	4b2c      	ldr	r3, [pc, #176]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a4da:	6a1b      	ldr	r3, [r3, #32]
 800a4dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a4e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ea:	fa93 f3a3 	rbit	r3, r3
 800a4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800a4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a4f2:	fab3 f383 	clz	r3, r3
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	4b26      	ldr	r3, [pc, #152]	; (800a594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a4fc:	4413      	add	r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	461a      	mov	r2, r3
 800a502:	2301      	movs	r3, #1
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a50a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	fa93 f3a3 	rbit	r3, r3
 800a512:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800a514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a516:	fab3 f383 	clz	r3, r3
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	461a      	mov	r2, r3
 800a51e:	4b1d      	ldr	r3, [pc, #116]	; (800a594 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800a520:	4413      	add	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	461a      	mov	r2, r3
 800a526:	2300      	movs	r3, #0
 800a528:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a52a:	4a18      	ldr	r2, [pc, #96]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a52e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d04b      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a53a:	f7fc fbe9 	bl	8006d10 <HAL_GetTick>
 800a53e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a540:	e00a      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a542:	f7fc fbe5 	bl	8006d10 <HAL_GetTick>
 800a546:	4602      	mov	r2, r0
 800a548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a54a:	1ad3      	subs	r3, r2, r3
 800a54c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a550:	4293      	cmp	r3, r2
 800a552:	d901      	bls.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a554:	2303      	movs	r3, #3
 800a556:	e113      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800a558:	2302      	movs	r3, #2
 800a55a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55e:	fa93 f3a3 	rbit	r3, r3
 800a562:	627b      	str	r3, [r7, #36]	; 0x24
 800a564:	2302      	movs	r3, #2
 800a566:	623b      	str	r3, [r7, #32]
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	fa93 f3a3 	rbit	r3, r3
 800a56e:	61fb      	str	r3, [r7, #28]
  return result;
 800a570:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a572:	fab3 f383 	clz	r3, r3
 800a576:	b2db      	uxtb	r3, r3
 800a578:	095b      	lsrs	r3, r3, #5
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	f043 0302 	orr.w	r3, r3, #2
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b02      	cmp	r3, #2
 800a584:	d108      	bne.n	800a598 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a586:	4b01      	ldr	r3, [pc, #4]	; (800a58c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	e00d      	b.n	800a5a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800a58c:	40021000 	.word	0x40021000
 800a590:	40007000 	.word	0x40007000
 800a594:	10908100 	.word	0x10908100
 800a598:	2302      	movs	r3, #2
 800a59a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	fa93 f3a3 	rbit	r3, r3
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	4b78      	ldr	r3, [pc, #480]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	613a      	str	r2, [r7, #16]
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	fa92 f2a2 	rbit	r2, r2
 800a5b2:	60fa      	str	r2, [r7, #12]
  return result;
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	fab2 f282 	clz	r2, r2
 800a5ba:	b2d2      	uxtb	r2, r2
 800a5bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5c0:	b2d2      	uxtb	r2, r2
 800a5c2:	f002 021f 	and.w	r2, r2, #31
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	fa01 f202 	lsl.w	r2, r1, r2
 800a5cc:	4013      	ands	r3, r2
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d0b7      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800a5d2:	4b6d      	ldr	r3, [pc, #436]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5d4:	6a1b      	ldr	r3, [r3, #32]
 800a5d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	496a      	ldr	r1, [pc, #424]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a5e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d105      	bne.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5ec:	4b66      	ldr	r3, [pc, #408]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5ee:	69db      	ldr	r3, [r3, #28]
 800a5f0:	4a65      	ldr	r2, [pc, #404]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a5f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d008      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a604:	4b60      	ldr	r3, [pc, #384]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a608:	f023 0203 	bic.w	r2, r3, #3
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	495d      	ldr	r1, [pc, #372]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a612:	4313      	orrs	r3, r2
 800a614:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d008      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a622:	4b59      	ldr	r3, [pc, #356]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	4956      	ldr	r1, [pc, #344]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a630:	4313      	orrs	r3, r2
 800a632:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0304 	and.w	r3, r3, #4
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d008      	beq.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a640:	4b51      	ldr	r3, [pc, #324]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	494e      	ldr	r1, [pc, #312]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d008      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a65e:	4b4a      	ldr	r3, [pc, #296]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a662:	f023 0210 	bic.w	r2, r3, #16
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	69db      	ldr	r3, [r3, #28]
 800a66a:	4947      	ldr	r1, [pc, #284]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a66c:	4313      	orrs	r3, r2
 800a66e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d008      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a67c:	4b42      	ldr	r3, [pc, #264]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a688:	493f      	ldr	r1, [pc, #252]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a696:	2b00      	cmp	r3, #0
 800a698:	d008      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a69a:	4b3b      	ldr	r3, [pc, #236]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69e:	f023 0220 	bic.w	r2, r3, #32
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6a1b      	ldr	r3, [r3, #32]
 800a6a6:	4938      	ldr	r1, [pc, #224]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d008      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a6b8:	4b33      	ldr	r3, [pc, #204]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	4930      	ldr	r1, [pc, #192]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0310 	and.w	r3, r3, #16
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d008      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a6d6:	4b2c      	ldr	r3, [pc, #176]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	4929      	ldr	r1, [pc, #164]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d008      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a6f4:	4b24      	ldr	r3, [pc, #144]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a700:	4921      	ldr	r1, [pc, #132]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a702:	4313      	orrs	r3, r2
 800a704:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d008      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a712:	4b1d      	ldr	r3, [pc, #116]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a716:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71e:	491a      	ldr	r1, [pc, #104]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a720:	4313      	orrs	r3, r2
 800a722:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d008      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a730:	4b15      	ldr	r3, [pc, #84]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a734:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73c:	4912      	ldr	r1, [pc, #72]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d008      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a74e:	4b0e      	ldr	r3, [pc, #56]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75a:	490b      	ldr	r1, [pc, #44]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d008      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a770:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a778:	4903      	ldr	r1, [pc, #12]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3748      	adds	r7, #72	; 0x48
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	40021000 	.word	0x40021000

0800a78c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d101      	bne.n	800a79e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e09d      	b.n	800a8da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d108      	bne.n	800a7b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7ae:	d009      	beq.n	800a7c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	61da      	str	r2, [r3, #28]
 800a7b6:	e005      	b.n	800a7c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d106      	bne.n	800a7e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7fb ff6e 	bl	80066c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	68db      	ldr	r3, [r3, #12]
 800a800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a804:	d902      	bls.n	800a80c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	e002      	b.n	800a812 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a80c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a810:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68db      	ldr	r3, [r3, #12]
 800a816:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a81a:	d007      	beq.n	800a82c <HAL_SPI_Init+0xa0>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a824:	d002      	beq.n	800a82c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a83c:	431a      	orrs	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	f003 0302 	and.w	r3, r3, #2
 800a846:	431a      	orrs	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	431a      	orrs	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	699b      	ldr	r3, [r3, #24]
 800a856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a85a:	431a      	orrs	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	69db      	ldr	r3, [r3, #28]
 800a860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a864:	431a      	orrs	r2, r3
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86e:	ea42 0103 	orr.w	r1, r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a876:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	430a      	orrs	r2, r1
 800a880:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	0c1b      	lsrs	r3, r3, #16
 800a888:	f003 0204 	and.w	r2, r3, #4
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	f003 0310 	and.w	r3, r3, #16
 800a894:	431a      	orrs	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89a:	f003 0308 	and.w	r3, r3, #8
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a8a8:	ea42 0103 	orr.w	r1, r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	430a      	orrs	r2, r1
 800a8b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	69da      	ldr	r2, [r3, #28]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d101      	bne.n	800a8f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e049      	b.n	800a988 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d106      	bne.n	800a90e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7fb ff45 	bl	8006798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2202      	movs	r2, #2
 800a912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	3304      	adds	r3, #4
 800a91e:	4619      	mov	r1, r3
 800a920:	4610      	mov	r0, r2
 800a922:	f000 f9e7 	bl	800acf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2201      	movs	r2, #1
 800a94a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2201      	movs	r2, #1
 800a952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a986:	2300      	movs	r3, #0
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d001      	beq.n	800a9a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e04a      	b.n	800aa3e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0201 	orr.w	r2, r2, #1
 800a9be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a21      	ldr	r2, [pc, #132]	; (800aa4c <HAL_TIM_Base_Start_IT+0xbc>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d018      	beq.n	800a9fc <HAL_TIM_Base_Start_IT+0x6c>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9d2:	d013      	beq.n	800a9fc <HAL_TIM_Base_Start_IT+0x6c>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a1d      	ldr	r2, [pc, #116]	; (800aa50 <HAL_TIM_Base_Start_IT+0xc0>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d00e      	beq.n	800a9fc <HAL_TIM_Base_Start_IT+0x6c>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a1c      	ldr	r2, [pc, #112]	; (800aa54 <HAL_TIM_Base_Start_IT+0xc4>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d009      	beq.n	800a9fc <HAL_TIM_Base_Start_IT+0x6c>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a1a      	ldr	r2, [pc, #104]	; (800aa58 <HAL_TIM_Base_Start_IT+0xc8>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d004      	beq.n	800a9fc <HAL_TIM_Base_Start_IT+0x6c>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a19      	ldr	r2, [pc, #100]	; (800aa5c <HAL_TIM_Base_Start_IT+0xcc>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d115      	bne.n	800aa28 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	689a      	ldr	r2, [r3, #8]
 800aa02:	4b17      	ldr	r3, [pc, #92]	; (800aa60 <HAL_TIM_Base_Start_IT+0xd0>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b06      	cmp	r3, #6
 800aa0c:	d015      	beq.n	800aa3a <HAL_TIM_Base_Start_IT+0xaa>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa14:	d011      	beq.n	800aa3a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f042 0201 	orr.w	r2, r2, #1
 800aa24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa26:	e008      	b.n	800aa3a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f042 0201 	orr.w	r2, r2, #1
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	e000      	b.n	800aa3c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	40012c00 	.word	0x40012c00
 800aa50:	40000400 	.word	0x40000400
 800aa54:	40000800 	.word	0x40000800
 800aa58:	40013400 	.word	0x40013400
 800aa5c:	40014000 	.word	0x40014000
 800aa60:	00010007 	.word	0x00010007

0800aa64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d122      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f003 0302 	and.w	r3, r3, #2
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d11b      	bne.n	800aac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f06f 0202 	mvn.w	r2, #2
 800aa90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2201      	movs	r2, #1
 800aa96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f905 	bl	800acb6 <HAL_TIM_IC_CaptureCallback>
 800aaac:	e005      	b.n	800aaba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f8f7 	bl	800aca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f908 	bl	800acca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2200      	movs	r2, #0
 800aabe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f003 0304 	and.w	r3, r3, #4
 800aaca:	2b04      	cmp	r3, #4
 800aacc:	d122      	bne.n	800ab14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d11b      	bne.n	800ab14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f06f 0204 	mvn.w	r2, #4
 800aae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2202      	movs	r2, #2
 800aaea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 f8db 	bl	800acb6 <HAL_TIM_IC_CaptureCallback>
 800ab00:	e005      	b.n	800ab0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f8cd 	bl	800aca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 f8de 	bl	800acca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	f003 0308 	and.w	r3, r3, #8
 800ab1e:	2b08      	cmp	r3, #8
 800ab20:	d122      	bne.n	800ab68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d11b      	bne.n	800ab68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f06f 0208 	mvn.w	r2, #8
 800ab38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2204      	movs	r2, #4
 800ab3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	f003 0303 	and.w	r3, r3, #3
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f8b1 	bl	800acb6 <HAL_TIM_IC_CaptureCallback>
 800ab54:	e005      	b.n	800ab62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f8a3 	bl	800aca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f8b4 	bl	800acca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	f003 0310 	and.w	r3, r3, #16
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d122      	bne.n	800abbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f003 0310 	and.w	r3, r3, #16
 800ab80:	2b10      	cmp	r3, #16
 800ab82:	d11b      	bne.n	800abbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f06f 0210 	mvn.w	r2, #16
 800ab8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2208      	movs	r2, #8
 800ab92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f887 	bl	800acb6 <HAL_TIM_IC_CaptureCallback>
 800aba8:	e005      	b.n	800abb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f879 	bl	800aca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f88a 	bl	800acca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d10e      	bne.n	800abe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d107      	bne.n	800abe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f06f 0201 	mvn.w	r2, #1
 800abe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7fa fc46 	bl	8005474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf2:	2b80      	cmp	r3, #128	; 0x80
 800abf4:	d10e      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac00:	2b80      	cmp	r3, #128	; 0x80
 800ac02:	d107      	bne.n	800ac14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f90a 	bl	800ae28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac22:	d10e      	bne.n	800ac42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2e:	2b80      	cmp	r3, #128	; 0x80
 800ac30:	d107      	bne.n	800ac42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f8fd 	bl	800ae3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4c:	2b40      	cmp	r3, #64	; 0x40
 800ac4e:	d10e      	bne.n	800ac6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b40      	cmp	r3, #64	; 0x40
 800ac5c:	d107      	bne.n	800ac6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f838 	bl	800acde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	f003 0320 	and.w	r3, r3, #32
 800ac78:	2b20      	cmp	r3, #32
 800ac7a:	d10e      	bne.n	800ac9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	f003 0320 	and.w	r3, r3, #32
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	d107      	bne.n	800ac9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f06f 0220 	mvn.w	r2, #32
 800ac92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f8bd 	bl	800ae14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b083      	sub	sp, #12
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acbe:	bf00      	nop
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acca:	b480      	push	{r7}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acd2:	bf00      	nop
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acde:	b480      	push	{r7}
 800ace0:	b083      	sub	sp, #12
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a3c      	ldr	r2, [pc, #240]	; (800adf8 <TIM_Base_SetConfig+0x104>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00f      	beq.n	800ad2c <TIM_Base_SetConfig+0x38>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad12:	d00b      	beq.n	800ad2c <TIM_Base_SetConfig+0x38>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a39      	ldr	r2, [pc, #228]	; (800adfc <TIM_Base_SetConfig+0x108>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d007      	beq.n	800ad2c <TIM_Base_SetConfig+0x38>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a38      	ldr	r2, [pc, #224]	; (800ae00 <TIM_Base_SetConfig+0x10c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d003      	beq.n	800ad2c <TIM_Base_SetConfig+0x38>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a37      	ldr	r2, [pc, #220]	; (800ae04 <TIM_Base_SetConfig+0x110>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d108      	bne.n	800ad3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a2d      	ldr	r2, [pc, #180]	; (800adf8 <TIM_Base_SetConfig+0x104>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d01b      	beq.n	800ad7e <TIM_Base_SetConfig+0x8a>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad4c:	d017      	beq.n	800ad7e <TIM_Base_SetConfig+0x8a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a2a      	ldr	r2, [pc, #168]	; (800adfc <TIM_Base_SetConfig+0x108>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d013      	beq.n	800ad7e <TIM_Base_SetConfig+0x8a>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a29      	ldr	r2, [pc, #164]	; (800ae00 <TIM_Base_SetConfig+0x10c>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d00f      	beq.n	800ad7e <TIM_Base_SetConfig+0x8a>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a28      	ldr	r2, [pc, #160]	; (800ae04 <TIM_Base_SetConfig+0x110>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d00b      	beq.n	800ad7e <TIM_Base_SetConfig+0x8a>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a27      	ldr	r2, [pc, #156]	; (800ae08 <TIM_Base_SetConfig+0x114>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d007      	beq.n	800ad7e <TIM_Base_SetConfig+0x8a>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a26      	ldr	r2, [pc, #152]	; (800ae0c <TIM_Base_SetConfig+0x118>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d003      	beq.n	800ad7e <TIM_Base_SetConfig+0x8a>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a25      	ldr	r2, [pc, #148]	; (800ae10 <TIM_Base_SetConfig+0x11c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d108      	bne.n	800ad90 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	689a      	ldr	r2, [r3, #8]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a10      	ldr	r2, [pc, #64]	; (800adf8 <TIM_Base_SetConfig+0x104>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d00f      	beq.n	800addc <TIM_Base_SetConfig+0xe8>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a11      	ldr	r2, [pc, #68]	; (800ae04 <TIM_Base_SetConfig+0x110>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d00b      	beq.n	800addc <TIM_Base_SetConfig+0xe8>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a10      	ldr	r2, [pc, #64]	; (800ae08 <TIM_Base_SetConfig+0x114>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d007      	beq.n	800addc <TIM_Base_SetConfig+0xe8>
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a0f      	ldr	r2, [pc, #60]	; (800ae0c <TIM_Base_SetConfig+0x118>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d003      	beq.n	800addc <TIM_Base_SetConfig+0xe8>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a0e      	ldr	r2, [pc, #56]	; (800ae10 <TIM_Base_SetConfig+0x11c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d103      	bne.n	800ade4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	691a      	ldr	r2, [r3, #16]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2201      	movs	r2, #1
 800ade8:	615a      	str	r2, [r3, #20]
}
 800adea:	bf00      	nop
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	40012c00 	.word	0x40012c00
 800adfc:	40000400 	.word	0x40000400
 800ae00:	40000800 	.word	0x40000800
 800ae04:	40013400 	.word	0x40013400
 800ae08:	40014000 	.word	0x40014000
 800ae0c:	40014400 	.word	0x40014400
 800ae10:	40014800 	.word	0x40014800

0800ae14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae44:	bf00      	nop
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <__errno>:
 800ae50:	4b01      	ldr	r3, [pc, #4]	; (800ae58 <__errno+0x8>)
 800ae52:	6818      	ldr	r0, [r3, #0]
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	2000005c 	.word	0x2000005c

0800ae5c <__libc_init_array>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	4d0d      	ldr	r5, [pc, #52]	; (800ae94 <__libc_init_array+0x38>)
 800ae60:	4c0d      	ldr	r4, [pc, #52]	; (800ae98 <__libc_init_array+0x3c>)
 800ae62:	1b64      	subs	r4, r4, r5
 800ae64:	10a4      	asrs	r4, r4, #2
 800ae66:	2600      	movs	r6, #0
 800ae68:	42a6      	cmp	r6, r4
 800ae6a:	d109      	bne.n	800ae80 <__libc_init_array+0x24>
 800ae6c:	4d0b      	ldr	r5, [pc, #44]	; (800ae9c <__libc_init_array+0x40>)
 800ae6e:	4c0c      	ldr	r4, [pc, #48]	; (800aea0 <__libc_init_array+0x44>)
 800ae70:	f004 fda0 	bl	800f9b4 <_init>
 800ae74:	1b64      	subs	r4, r4, r5
 800ae76:	10a4      	asrs	r4, r4, #2
 800ae78:	2600      	movs	r6, #0
 800ae7a:	42a6      	cmp	r6, r4
 800ae7c:	d105      	bne.n	800ae8a <__libc_init_array+0x2e>
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae84:	4798      	blx	r3
 800ae86:	3601      	adds	r6, #1
 800ae88:	e7ee      	b.n	800ae68 <__libc_init_array+0xc>
 800ae8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae8e:	4798      	blx	r3
 800ae90:	3601      	adds	r6, #1
 800ae92:	e7f2      	b.n	800ae7a <__libc_init_array+0x1e>
 800ae94:	08010cd0 	.word	0x08010cd0
 800ae98:	08010cd0 	.word	0x08010cd0
 800ae9c:	08010cd0 	.word	0x08010cd0
 800aea0:	08010cd4 	.word	0x08010cd4

0800aea4 <memcpy>:
 800aea4:	440a      	add	r2, r1
 800aea6:	4291      	cmp	r1, r2
 800aea8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aeac:	d100      	bne.n	800aeb0 <memcpy+0xc>
 800aeae:	4770      	bx	lr
 800aeb0:	b510      	push	{r4, lr}
 800aeb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aeba:	4291      	cmp	r1, r2
 800aebc:	d1f9      	bne.n	800aeb2 <memcpy+0xe>
 800aebe:	bd10      	pop	{r4, pc}

0800aec0 <memset>:
 800aec0:	4402      	add	r2, r0
 800aec2:	4603      	mov	r3, r0
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d100      	bne.n	800aeca <memset+0xa>
 800aec8:	4770      	bx	lr
 800aeca:	f803 1b01 	strb.w	r1, [r3], #1
 800aece:	e7f9      	b.n	800aec4 <memset+0x4>

0800aed0 <__cvt>:
 800aed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aed4:	ec55 4b10 	vmov	r4, r5, d0
 800aed8:	2d00      	cmp	r5, #0
 800aeda:	460e      	mov	r6, r1
 800aedc:	4619      	mov	r1, r3
 800aede:	462b      	mov	r3, r5
 800aee0:	bfbb      	ittet	lt
 800aee2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aee6:	461d      	movlt	r5, r3
 800aee8:	2300      	movge	r3, #0
 800aeea:	232d      	movlt	r3, #45	; 0x2d
 800aeec:	700b      	strb	r3, [r1, #0]
 800aeee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aef0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aef4:	4691      	mov	r9, r2
 800aef6:	f023 0820 	bic.w	r8, r3, #32
 800aefa:	bfbc      	itt	lt
 800aefc:	4622      	movlt	r2, r4
 800aefe:	4614      	movlt	r4, r2
 800af00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af04:	d005      	beq.n	800af12 <__cvt+0x42>
 800af06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af0a:	d100      	bne.n	800af0e <__cvt+0x3e>
 800af0c:	3601      	adds	r6, #1
 800af0e:	2102      	movs	r1, #2
 800af10:	e000      	b.n	800af14 <__cvt+0x44>
 800af12:	2103      	movs	r1, #3
 800af14:	ab03      	add	r3, sp, #12
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	ab02      	add	r3, sp, #8
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	ec45 4b10 	vmov	d0, r4, r5
 800af20:	4653      	mov	r3, sl
 800af22:	4632      	mov	r2, r6
 800af24:	f000 fcfc 	bl	800b920 <_dtoa_r>
 800af28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af2c:	4607      	mov	r7, r0
 800af2e:	d102      	bne.n	800af36 <__cvt+0x66>
 800af30:	f019 0f01 	tst.w	r9, #1
 800af34:	d022      	beq.n	800af7c <__cvt+0xac>
 800af36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af3a:	eb07 0906 	add.w	r9, r7, r6
 800af3e:	d110      	bne.n	800af62 <__cvt+0x92>
 800af40:	783b      	ldrb	r3, [r7, #0]
 800af42:	2b30      	cmp	r3, #48	; 0x30
 800af44:	d10a      	bne.n	800af5c <__cvt+0x8c>
 800af46:	2200      	movs	r2, #0
 800af48:	2300      	movs	r3, #0
 800af4a:	4620      	mov	r0, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	f7f5 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800af52:	b918      	cbnz	r0, 800af5c <__cvt+0x8c>
 800af54:	f1c6 0601 	rsb	r6, r6, #1
 800af58:	f8ca 6000 	str.w	r6, [sl]
 800af5c:	f8da 3000 	ldr.w	r3, [sl]
 800af60:	4499      	add	r9, r3
 800af62:	2200      	movs	r2, #0
 800af64:	2300      	movs	r3, #0
 800af66:	4620      	mov	r0, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 800af6e:	b108      	cbz	r0, 800af74 <__cvt+0xa4>
 800af70:	f8cd 900c 	str.w	r9, [sp, #12]
 800af74:	2230      	movs	r2, #48	; 0x30
 800af76:	9b03      	ldr	r3, [sp, #12]
 800af78:	454b      	cmp	r3, r9
 800af7a:	d307      	bcc.n	800af8c <__cvt+0xbc>
 800af7c:	9b03      	ldr	r3, [sp, #12]
 800af7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af80:	1bdb      	subs	r3, r3, r7
 800af82:	4638      	mov	r0, r7
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	b004      	add	sp, #16
 800af88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8c:	1c59      	adds	r1, r3, #1
 800af8e:	9103      	str	r1, [sp, #12]
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	e7f0      	b.n	800af76 <__cvt+0xa6>

0800af94 <__exponent>:
 800af94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af96:	4603      	mov	r3, r0
 800af98:	2900      	cmp	r1, #0
 800af9a:	bfb8      	it	lt
 800af9c:	4249      	neglt	r1, r1
 800af9e:	f803 2b02 	strb.w	r2, [r3], #2
 800afa2:	bfb4      	ite	lt
 800afa4:	222d      	movlt	r2, #45	; 0x2d
 800afa6:	222b      	movge	r2, #43	; 0x2b
 800afa8:	2909      	cmp	r1, #9
 800afaa:	7042      	strb	r2, [r0, #1]
 800afac:	dd2a      	ble.n	800b004 <__exponent+0x70>
 800afae:	f10d 0407 	add.w	r4, sp, #7
 800afb2:	46a4      	mov	ip, r4
 800afb4:	270a      	movs	r7, #10
 800afb6:	46a6      	mov	lr, r4
 800afb8:	460a      	mov	r2, r1
 800afba:	fb91 f6f7 	sdiv	r6, r1, r7
 800afbe:	fb07 1516 	mls	r5, r7, r6, r1
 800afc2:	3530      	adds	r5, #48	; 0x30
 800afc4:	2a63      	cmp	r2, #99	; 0x63
 800afc6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800afca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800afce:	4631      	mov	r1, r6
 800afd0:	dcf1      	bgt.n	800afb6 <__exponent+0x22>
 800afd2:	3130      	adds	r1, #48	; 0x30
 800afd4:	f1ae 0502 	sub.w	r5, lr, #2
 800afd8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800afdc:	1c44      	adds	r4, r0, #1
 800afde:	4629      	mov	r1, r5
 800afe0:	4561      	cmp	r1, ip
 800afe2:	d30a      	bcc.n	800affa <__exponent+0x66>
 800afe4:	f10d 0209 	add.w	r2, sp, #9
 800afe8:	eba2 020e 	sub.w	r2, r2, lr
 800afec:	4565      	cmp	r5, ip
 800afee:	bf88      	it	hi
 800aff0:	2200      	movhi	r2, #0
 800aff2:	4413      	add	r3, r2
 800aff4:	1a18      	subs	r0, r3, r0
 800aff6:	b003      	add	sp, #12
 800aff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800affa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800affe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b002:	e7ed      	b.n	800afe0 <__exponent+0x4c>
 800b004:	2330      	movs	r3, #48	; 0x30
 800b006:	3130      	adds	r1, #48	; 0x30
 800b008:	7083      	strb	r3, [r0, #2]
 800b00a:	70c1      	strb	r1, [r0, #3]
 800b00c:	1d03      	adds	r3, r0, #4
 800b00e:	e7f1      	b.n	800aff4 <__exponent+0x60>

0800b010 <_printf_float>:
 800b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b014:	ed2d 8b02 	vpush	{d8}
 800b018:	b08d      	sub	sp, #52	; 0x34
 800b01a:	460c      	mov	r4, r1
 800b01c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b020:	4616      	mov	r6, r2
 800b022:	461f      	mov	r7, r3
 800b024:	4605      	mov	r5, r0
 800b026:	f001 fa69 	bl	800c4fc <_localeconv_r>
 800b02a:	f8d0 a000 	ldr.w	sl, [r0]
 800b02e:	4650      	mov	r0, sl
 800b030:	f7f5 f8ce 	bl	80001d0 <strlen>
 800b034:	2300      	movs	r3, #0
 800b036:	930a      	str	r3, [sp, #40]	; 0x28
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	9305      	str	r3, [sp, #20]
 800b03c:	f8d8 3000 	ldr.w	r3, [r8]
 800b040:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b044:	3307      	adds	r3, #7
 800b046:	f023 0307 	bic.w	r3, r3, #7
 800b04a:	f103 0208 	add.w	r2, r3, #8
 800b04e:	f8c8 2000 	str.w	r2, [r8]
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b05a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b05e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b062:	9307      	str	r3, [sp, #28]
 800b064:	f8cd 8018 	str.w	r8, [sp, #24]
 800b068:	ee08 0a10 	vmov	s16, r0
 800b06c:	4b9f      	ldr	r3, [pc, #636]	; (800b2ec <_printf_float+0x2dc>)
 800b06e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b076:	f7f5 fd59 	bl	8000b2c <__aeabi_dcmpun>
 800b07a:	bb88      	cbnz	r0, 800b0e0 <_printf_float+0xd0>
 800b07c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b080:	4b9a      	ldr	r3, [pc, #616]	; (800b2ec <_printf_float+0x2dc>)
 800b082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b086:	f7f5 fd33 	bl	8000af0 <__aeabi_dcmple>
 800b08a:	bb48      	cbnz	r0, 800b0e0 <_printf_float+0xd0>
 800b08c:	2200      	movs	r2, #0
 800b08e:	2300      	movs	r3, #0
 800b090:	4640      	mov	r0, r8
 800b092:	4649      	mov	r1, r9
 800b094:	f7f5 fd22 	bl	8000adc <__aeabi_dcmplt>
 800b098:	b110      	cbz	r0, 800b0a0 <_printf_float+0x90>
 800b09a:	232d      	movs	r3, #45	; 0x2d
 800b09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a0:	4b93      	ldr	r3, [pc, #588]	; (800b2f0 <_printf_float+0x2e0>)
 800b0a2:	4894      	ldr	r0, [pc, #592]	; (800b2f4 <_printf_float+0x2e4>)
 800b0a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0a8:	bf94      	ite	ls
 800b0aa:	4698      	movls	r8, r3
 800b0ac:	4680      	movhi	r8, r0
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	6123      	str	r3, [r4, #16]
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	f023 0204 	bic.w	r2, r3, #4
 800b0b8:	6022      	str	r2, [r4, #0]
 800b0ba:	f04f 0900 	mov.w	r9, #0
 800b0be:	9700      	str	r7, [sp, #0]
 800b0c0:	4633      	mov	r3, r6
 800b0c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0c4:	4621      	mov	r1, r4
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f000 f9d8 	bl	800b47c <_printf_common>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	f040 8090 	bne.w	800b1f2 <_printf_float+0x1e2>
 800b0d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0d6:	b00d      	add	sp, #52	; 0x34
 800b0d8:	ecbd 8b02 	vpop	{d8}
 800b0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	464b      	mov	r3, r9
 800b0e4:	4640      	mov	r0, r8
 800b0e6:	4649      	mov	r1, r9
 800b0e8:	f7f5 fd20 	bl	8000b2c <__aeabi_dcmpun>
 800b0ec:	b140      	cbz	r0, 800b100 <_printf_float+0xf0>
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	bfbc      	itt	lt
 800b0f4:	232d      	movlt	r3, #45	; 0x2d
 800b0f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0fa:	487f      	ldr	r0, [pc, #508]	; (800b2f8 <_printf_float+0x2e8>)
 800b0fc:	4b7f      	ldr	r3, [pc, #508]	; (800b2fc <_printf_float+0x2ec>)
 800b0fe:	e7d1      	b.n	800b0a4 <_printf_float+0x94>
 800b100:	6863      	ldr	r3, [r4, #4]
 800b102:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b106:	9206      	str	r2, [sp, #24]
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	d13f      	bne.n	800b18c <_printf_float+0x17c>
 800b10c:	2306      	movs	r3, #6
 800b10e:	6063      	str	r3, [r4, #4]
 800b110:	9b05      	ldr	r3, [sp, #20]
 800b112:	6861      	ldr	r1, [r4, #4]
 800b114:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b118:	2300      	movs	r3, #0
 800b11a:	9303      	str	r3, [sp, #12]
 800b11c:	ab0a      	add	r3, sp, #40	; 0x28
 800b11e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b122:	ab09      	add	r3, sp, #36	; 0x24
 800b124:	ec49 8b10 	vmov	d0, r8, r9
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	6022      	str	r2, [r4, #0]
 800b12c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b130:	4628      	mov	r0, r5
 800b132:	f7ff fecd 	bl	800aed0 <__cvt>
 800b136:	9b06      	ldr	r3, [sp, #24]
 800b138:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b13a:	2b47      	cmp	r3, #71	; 0x47
 800b13c:	4680      	mov	r8, r0
 800b13e:	d108      	bne.n	800b152 <_printf_float+0x142>
 800b140:	1cc8      	adds	r0, r1, #3
 800b142:	db02      	blt.n	800b14a <_printf_float+0x13a>
 800b144:	6863      	ldr	r3, [r4, #4]
 800b146:	4299      	cmp	r1, r3
 800b148:	dd41      	ble.n	800b1ce <_printf_float+0x1be>
 800b14a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b14e:	fa5f fb8b 	uxtb.w	fp, fp
 800b152:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b156:	d820      	bhi.n	800b19a <_printf_float+0x18a>
 800b158:	3901      	subs	r1, #1
 800b15a:	465a      	mov	r2, fp
 800b15c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b160:	9109      	str	r1, [sp, #36]	; 0x24
 800b162:	f7ff ff17 	bl	800af94 <__exponent>
 800b166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b168:	1813      	adds	r3, r2, r0
 800b16a:	2a01      	cmp	r2, #1
 800b16c:	4681      	mov	r9, r0
 800b16e:	6123      	str	r3, [r4, #16]
 800b170:	dc02      	bgt.n	800b178 <_printf_float+0x168>
 800b172:	6822      	ldr	r2, [r4, #0]
 800b174:	07d2      	lsls	r2, r2, #31
 800b176:	d501      	bpl.n	800b17c <_printf_float+0x16c>
 800b178:	3301      	adds	r3, #1
 800b17a:	6123      	str	r3, [r4, #16]
 800b17c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b180:	2b00      	cmp	r3, #0
 800b182:	d09c      	beq.n	800b0be <_printf_float+0xae>
 800b184:	232d      	movs	r3, #45	; 0x2d
 800b186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b18a:	e798      	b.n	800b0be <_printf_float+0xae>
 800b18c:	9a06      	ldr	r2, [sp, #24]
 800b18e:	2a47      	cmp	r2, #71	; 0x47
 800b190:	d1be      	bne.n	800b110 <_printf_float+0x100>
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1bc      	bne.n	800b110 <_printf_float+0x100>
 800b196:	2301      	movs	r3, #1
 800b198:	e7b9      	b.n	800b10e <_printf_float+0xfe>
 800b19a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b19e:	d118      	bne.n	800b1d2 <_printf_float+0x1c2>
 800b1a0:	2900      	cmp	r1, #0
 800b1a2:	6863      	ldr	r3, [r4, #4]
 800b1a4:	dd0b      	ble.n	800b1be <_printf_float+0x1ae>
 800b1a6:	6121      	str	r1, [r4, #16]
 800b1a8:	b913      	cbnz	r3, 800b1b0 <_printf_float+0x1a0>
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	07d0      	lsls	r0, r2, #31
 800b1ae:	d502      	bpl.n	800b1b6 <_printf_float+0x1a6>
 800b1b0:	3301      	adds	r3, #1
 800b1b2:	440b      	add	r3, r1
 800b1b4:	6123      	str	r3, [r4, #16]
 800b1b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1b8:	f04f 0900 	mov.w	r9, #0
 800b1bc:	e7de      	b.n	800b17c <_printf_float+0x16c>
 800b1be:	b913      	cbnz	r3, 800b1c6 <_printf_float+0x1b6>
 800b1c0:	6822      	ldr	r2, [r4, #0]
 800b1c2:	07d2      	lsls	r2, r2, #31
 800b1c4:	d501      	bpl.n	800b1ca <_printf_float+0x1ba>
 800b1c6:	3302      	adds	r3, #2
 800b1c8:	e7f4      	b.n	800b1b4 <_printf_float+0x1a4>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e7f2      	b.n	800b1b4 <_printf_float+0x1a4>
 800b1ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	db05      	blt.n	800b1e4 <_printf_float+0x1d4>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	6121      	str	r1, [r4, #16]
 800b1dc:	07d8      	lsls	r0, r3, #31
 800b1de:	d5ea      	bpl.n	800b1b6 <_printf_float+0x1a6>
 800b1e0:	1c4b      	adds	r3, r1, #1
 800b1e2:	e7e7      	b.n	800b1b4 <_printf_float+0x1a4>
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	bfd4      	ite	le
 800b1e8:	f1c1 0202 	rsble	r2, r1, #2
 800b1ec:	2201      	movgt	r2, #1
 800b1ee:	4413      	add	r3, r2
 800b1f0:	e7e0      	b.n	800b1b4 <_printf_float+0x1a4>
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	055a      	lsls	r2, r3, #21
 800b1f6:	d407      	bmi.n	800b208 <_printf_float+0x1f8>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	4642      	mov	r2, r8
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	d12c      	bne.n	800b260 <_printf_float+0x250>
 800b206:	e764      	b.n	800b0d2 <_printf_float+0xc2>
 800b208:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b20c:	f240 80e0 	bls.w	800b3d0 <_printf_float+0x3c0>
 800b210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b214:	2200      	movs	r2, #0
 800b216:	2300      	movs	r3, #0
 800b218:	f7f5 fc56 	bl	8000ac8 <__aeabi_dcmpeq>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d034      	beq.n	800b28a <_printf_float+0x27a>
 800b220:	4a37      	ldr	r2, [pc, #220]	; (800b300 <_printf_float+0x2f0>)
 800b222:	2301      	movs	r3, #1
 800b224:	4631      	mov	r1, r6
 800b226:	4628      	mov	r0, r5
 800b228:	47b8      	blx	r7
 800b22a:	3001      	adds	r0, #1
 800b22c:	f43f af51 	beq.w	800b0d2 <_printf_float+0xc2>
 800b230:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b234:	429a      	cmp	r2, r3
 800b236:	db02      	blt.n	800b23e <_printf_float+0x22e>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	07d8      	lsls	r0, r3, #31
 800b23c:	d510      	bpl.n	800b260 <_printf_float+0x250>
 800b23e:	ee18 3a10 	vmov	r3, s16
 800b242:	4652      	mov	r2, sl
 800b244:	4631      	mov	r1, r6
 800b246:	4628      	mov	r0, r5
 800b248:	47b8      	blx	r7
 800b24a:	3001      	adds	r0, #1
 800b24c:	f43f af41 	beq.w	800b0d2 <_printf_float+0xc2>
 800b250:	f04f 0800 	mov.w	r8, #0
 800b254:	f104 091a 	add.w	r9, r4, #26
 800b258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b25a:	3b01      	subs	r3, #1
 800b25c:	4543      	cmp	r3, r8
 800b25e:	dc09      	bgt.n	800b274 <_printf_float+0x264>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	079b      	lsls	r3, r3, #30
 800b264:	f100 8105 	bmi.w	800b472 <_printf_float+0x462>
 800b268:	68e0      	ldr	r0, [r4, #12]
 800b26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b26c:	4298      	cmp	r0, r3
 800b26e:	bfb8      	it	lt
 800b270:	4618      	movlt	r0, r3
 800b272:	e730      	b.n	800b0d6 <_printf_float+0xc6>
 800b274:	2301      	movs	r3, #1
 800b276:	464a      	mov	r2, r9
 800b278:	4631      	mov	r1, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	47b8      	blx	r7
 800b27e:	3001      	adds	r0, #1
 800b280:	f43f af27 	beq.w	800b0d2 <_printf_float+0xc2>
 800b284:	f108 0801 	add.w	r8, r8, #1
 800b288:	e7e6      	b.n	800b258 <_printf_float+0x248>
 800b28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dc39      	bgt.n	800b304 <_printf_float+0x2f4>
 800b290:	4a1b      	ldr	r2, [pc, #108]	; (800b300 <_printf_float+0x2f0>)
 800b292:	2301      	movs	r3, #1
 800b294:	4631      	mov	r1, r6
 800b296:	4628      	mov	r0, r5
 800b298:	47b8      	blx	r7
 800b29a:	3001      	adds	r0, #1
 800b29c:	f43f af19 	beq.w	800b0d2 <_printf_float+0xc2>
 800b2a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	d102      	bne.n	800b2ae <_printf_float+0x29e>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	07d9      	lsls	r1, r3, #31
 800b2ac:	d5d8      	bpl.n	800b260 <_printf_float+0x250>
 800b2ae:	ee18 3a10 	vmov	r3, s16
 800b2b2:	4652      	mov	r2, sl
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	47b8      	blx	r7
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	f43f af09 	beq.w	800b0d2 <_printf_float+0xc2>
 800b2c0:	f04f 0900 	mov.w	r9, #0
 800b2c4:	f104 0a1a 	add.w	sl, r4, #26
 800b2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ca:	425b      	negs	r3, r3
 800b2cc:	454b      	cmp	r3, r9
 800b2ce:	dc01      	bgt.n	800b2d4 <_printf_float+0x2c4>
 800b2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d2:	e792      	b.n	800b1fa <_printf_float+0x1ea>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	4652      	mov	r2, sl
 800b2d8:	4631      	mov	r1, r6
 800b2da:	4628      	mov	r0, r5
 800b2dc:	47b8      	blx	r7
 800b2de:	3001      	adds	r0, #1
 800b2e0:	f43f aef7 	beq.w	800b0d2 <_printf_float+0xc2>
 800b2e4:	f109 0901 	add.w	r9, r9, #1
 800b2e8:	e7ee      	b.n	800b2c8 <_printf_float+0x2b8>
 800b2ea:	bf00      	nop
 800b2ec:	7fefffff 	.word	0x7fefffff
 800b2f0:	080106b0 	.word	0x080106b0
 800b2f4:	080106b4 	.word	0x080106b4
 800b2f8:	080106bc 	.word	0x080106bc
 800b2fc:	080106b8 	.word	0x080106b8
 800b300:	080106c0 	.word	0x080106c0
 800b304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b306:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b308:	429a      	cmp	r2, r3
 800b30a:	bfa8      	it	ge
 800b30c:	461a      	movge	r2, r3
 800b30e:	2a00      	cmp	r2, #0
 800b310:	4691      	mov	r9, r2
 800b312:	dc37      	bgt.n	800b384 <_printf_float+0x374>
 800b314:	f04f 0b00 	mov.w	fp, #0
 800b318:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b31c:	f104 021a 	add.w	r2, r4, #26
 800b320:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b322:	9305      	str	r3, [sp, #20]
 800b324:	eba3 0309 	sub.w	r3, r3, r9
 800b328:	455b      	cmp	r3, fp
 800b32a:	dc33      	bgt.n	800b394 <_printf_float+0x384>
 800b32c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b330:	429a      	cmp	r2, r3
 800b332:	db3b      	blt.n	800b3ac <_printf_float+0x39c>
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	07da      	lsls	r2, r3, #31
 800b338:	d438      	bmi.n	800b3ac <_printf_float+0x39c>
 800b33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33c:	9a05      	ldr	r2, [sp, #20]
 800b33e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b340:	1a9a      	subs	r2, r3, r2
 800b342:	eba3 0901 	sub.w	r9, r3, r1
 800b346:	4591      	cmp	r9, r2
 800b348:	bfa8      	it	ge
 800b34a:	4691      	movge	r9, r2
 800b34c:	f1b9 0f00 	cmp.w	r9, #0
 800b350:	dc35      	bgt.n	800b3be <_printf_float+0x3ae>
 800b352:	f04f 0800 	mov.w	r8, #0
 800b356:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b35a:	f104 0a1a 	add.w	sl, r4, #26
 800b35e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b362:	1a9b      	subs	r3, r3, r2
 800b364:	eba3 0309 	sub.w	r3, r3, r9
 800b368:	4543      	cmp	r3, r8
 800b36a:	f77f af79 	ble.w	800b260 <_printf_float+0x250>
 800b36e:	2301      	movs	r3, #1
 800b370:	4652      	mov	r2, sl
 800b372:	4631      	mov	r1, r6
 800b374:	4628      	mov	r0, r5
 800b376:	47b8      	blx	r7
 800b378:	3001      	adds	r0, #1
 800b37a:	f43f aeaa 	beq.w	800b0d2 <_printf_float+0xc2>
 800b37e:	f108 0801 	add.w	r8, r8, #1
 800b382:	e7ec      	b.n	800b35e <_printf_float+0x34e>
 800b384:	4613      	mov	r3, r2
 800b386:	4631      	mov	r1, r6
 800b388:	4642      	mov	r2, r8
 800b38a:	4628      	mov	r0, r5
 800b38c:	47b8      	blx	r7
 800b38e:	3001      	adds	r0, #1
 800b390:	d1c0      	bne.n	800b314 <_printf_float+0x304>
 800b392:	e69e      	b.n	800b0d2 <_printf_float+0xc2>
 800b394:	2301      	movs	r3, #1
 800b396:	4631      	mov	r1, r6
 800b398:	4628      	mov	r0, r5
 800b39a:	9205      	str	r2, [sp, #20]
 800b39c:	47b8      	blx	r7
 800b39e:	3001      	adds	r0, #1
 800b3a0:	f43f ae97 	beq.w	800b0d2 <_printf_float+0xc2>
 800b3a4:	9a05      	ldr	r2, [sp, #20]
 800b3a6:	f10b 0b01 	add.w	fp, fp, #1
 800b3aa:	e7b9      	b.n	800b320 <_printf_float+0x310>
 800b3ac:	ee18 3a10 	vmov	r3, s16
 800b3b0:	4652      	mov	r2, sl
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	47b8      	blx	r7
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d1be      	bne.n	800b33a <_printf_float+0x32a>
 800b3bc:	e689      	b.n	800b0d2 <_printf_float+0xc2>
 800b3be:	9a05      	ldr	r2, [sp, #20]
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	4442      	add	r2, r8
 800b3c4:	4631      	mov	r1, r6
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	47b8      	blx	r7
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	d1c1      	bne.n	800b352 <_printf_float+0x342>
 800b3ce:	e680      	b.n	800b0d2 <_printf_float+0xc2>
 800b3d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3d2:	2a01      	cmp	r2, #1
 800b3d4:	dc01      	bgt.n	800b3da <_printf_float+0x3ca>
 800b3d6:	07db      	lsls	r3, r3, #31
 800b3d8:	d538      	bpl.n	800b44c <_printf_float+0x43c>
 800b3da:	2301      	movs	r3, #1
 800b3dc:	4642      	mov	r2, r8
 800b3de:	4631      	mov	r1, r6
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	47b8      	blx	r7
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	f43f ae74 	beq.w	800b0d2 <_printf_float+0xc2>
 800b3ea:	ee18 3a10 	vmov	r3, s16
 800b3ee:	4652      	mov	r2, sl
 800b3f0:	4631      	mov	r1, r6
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	47b8      	blx	r7
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	f43f ae6b 	beq.w	800b0d2 <_printf_float+0xc2>
 800b3fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b400:	2200      	movs	r2, #0
 800b402:	2300      	movs	r3, #0
 800b404:	f7f5 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 800b408:	b9d8      	cbnz	r0, 800b442 <_printf_float+0x432>
 800b40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b40c:	f108 0201 	add.w	r2, r8, #1
 800b410:	3b01      	subs	r3, #1
 800b412:	4631      	mov	r1, r6
 800b414:	4628      	mov	r0, r5
 800b416:	47b8      	blx	r7
 800b418:	3001      	adds	r0, #1
 800b41a:	d10e      	bne.n	800b43a <_printf_float+0x42a>
 800b41c:	e659      	b.n	800b0d2 <_printf_float+0xc2>
 800b41e:	2301      	movs	r3, #1
 800b420:	4652      	mov	r2, sl
 800b422:	4631      	mov	r1, r6
 800b424:	4628      	mov	r0, r5
 800b426:	47b8      	blx	r7
 800b428:	3001      	adds	r0, #1
 800b42a:	f43f ae52 	beq.w	800b0d2 <_printf_float+0xc2>
 800b42e:	f108 0801 	add.w	r8, r8, #1
 800b432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b434:	3b01      	subs	r3, #1
 800b436:	4543      	cmp	r3, r8
 800b438:	dcf1      	bgt.n	800b41e <_printf_float+0x40e>
 800b43a:	464b      	mov	r3, r9
 800b43c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b440:	e6dc      	b.n	800b1fc <_printf_float+0x1ec>
 800b442:	f04f 0800 	mov.w	r8, #0
 800b446:	f104 0a1a 	add.w	sl, r4, #26
 800b44a:	e7f2      	b.n	800b432 <_printf_float+0x422>
 800b44c:	2301      	movs	r3, #1
 800b44e:	4642      	mov	r2, r8
 800b450:	e7df      	b.n	800b412 <_printf_float+0x402>
 800b452:	2301      	movs	r3, #1
 800b454:	464a      	mov	r2, r9
 800b456:	4631      	mov	r1, r6
 800b458:	4628      	mov	r0, r5
 800b45a:	47b8      	blx	r7
 800b45c:	3001      	adds	r0, #1
 800b45e:	f43f ae38 	beq.w	800b0d2 <_printf_float+0xc2>
 800b462:	f108 0801 	add.w	r8, r8, #1
 800b466:	68e3      	ldr	r3, [r4, #12]
 800b468:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b46a:	1a5b      	subs	r3, r3, r1
 800b46c:	4543      	cmp	r3, r8
 800b46e:	dcf0      	bgt.n	800b452 <_printf_float+0x442>
 800b470:	e6fa      	b.n	800b268 <_printf_float+0x258>
 800b472:	f04f 0800 	mov.w	r8, #0
 800b476:	f104 0919 	add.w	r9, r4, #25
 800b47a:	e7f4      	b.n	800b466 <_printf_float+0x456>

0800b47c <_printf_common>:
 800b47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b480:	4616      	mov	r6, r2
 800b482:	4699      	mov	r9, r3
 800b484:	688a      	ldr	r2, [r1, #8]
 800b486:	690b      	ldr	r3, [r1, #16]
 800b488:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b48c:	4293      	cmp	r3, r2
 800b48e:	bfb8      	it	lt
 800b490:	4613      	movlt	r3, r2
 800b492:	6033      	str	r3, [r6, #0]
 800b494:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b498:	4607      	mov	r7, r0
 800b49a:	460c      	mov	r4, r1
 800b49c:	b10a      	cbz	r2, 800b4a2 <_printf_common+0x26>
 800b49e:	3301      	adds	r3, #1
 800b4a0:	6033      	str	r3, [r6, #0]
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	0699      	lsls	r1, r3, #26
 800b4a6:	bf42      	ittt	mi
 800b4a8:	6833      	ldrmi	r3, [r6, #0]
 800b4aa:	3302      	addmi	r3, #2
 800b4ac:	6033      	strmi	r3, [r6, #0]
 800b4ae:	6825      	ldr	r5, [r4, #0]
 800b4b0:	f015 0506 	ands.w	r5, r5, #6
 800b4b4:	d106      	bne.n	800b4c4 <_printf_common+0x48>
 800b4b6:	f104 0a19 	add.w	sl, r4, #25
 800b4ba:	68e3      	ldr	r3, [r4, #12]
 800b4bc:	6832      	ldr	r2, [r6, #0]
 800b4be:	1a9b      	subs	r3, r3, r2
 800b4c0:	42ab      	cmp	r3, r5
 800b4c2:	dc26      	bgt.n	800b512 <_printf_common+0x96>
 800b4c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4c8:	1e13      	subs	r3, r2, #0
 800b4ca:	6822      	ldr	r2, [r4, #0]
 800b4cc:	bf18      	it	ne
 800b4ce:	2301      	movne	r3, #1
 800b4d0:	0692      	lsls	r2, r2, #26
 800b4d2:	d42b      	bmi.n	800b52c <_printf_common+0xb0>
 800b4d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4d8:	4649      	mov	r1, r9
 800b4da:	4638      	mov	r0, r7
 800b4dc:	47c0      	blx	r8
 800b4de:	3001      	adds	r0, #1
 800b4e0:	d01e      	beq.n	800b520 <_printf_common+0xa4>
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	68e5      	ldr	r5, [r4, #12]
 800b4e6:	6832      	ldr	r2, [r6, #0]
 800b4e8:	f003 0306 	and.w	r3, r3, #6
 800b4ec:	2b04      	cmp	r3, #4
 800b4ee:	bf08      	it	eq
 800b4f0:	1aad      	subeq	r5, r5, r2
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	bf0c      	ite	eq
 800b4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4fc:	2500      	movne	r5, #0
 800b4fe:	4293      	cmp	r3, r2
 800b500:	bfc4      	itt	gt
 800b502:	1a9b      	subgt	r3, r3, r2
 800b504:	18ed      	addgt	r5, r5, r3
 800b506:	2600      	movs	r6, #0
 800b508:	341a      	adds	r4, #26
 800b50a:	42b5      	cmp	r5, r6
 800b50c:	d11a      	bne.n	800b544 <_printf_common+0xc8>
 800b50e:	2000      	movs	r0, #0
 800b510:	e008      	b.n	800b524 <_printf_common+0xa8>
 800b512:	2301      	movs	r3, #1
 800b514:	4652      	mov	r2, sl
 800b516:	4649      	mov	r1, r9
 800b518:	4638      	mov	r0, r7
 800b51a:	47c0      	blx	r8
 800b51c:	3001      	adds	r0, #1
 800b51e:	d103      	bne.n	800b528 <_printf_common+0xac>
 800b520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b528:	3501      	adds	r5, #1
 800b52a:	e7c6      	b.n	800b4ba <_printf_common+0x3e>
 800b52c:	18e1      	adds	r1, r4, r3
 800b52e:	1c5a      	adds	r2, r3, #1
 800b530:	2030      	movs	r0, #48	; 0x30
 800b532:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b536:	4422      	add	r2, r4
 800b538:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b53c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b540:	3302      	adds	r3, #2
 800b542:	e7c7      	b.n	800b4d4 <_printf_common+0x58>
 800b544:	2301      	movs	r3, #1
 800b546:	4622      	mov	r2, r4
 800b548:	4649      	mov	r1, r9
 800b54a:	4638      	mov	r0, r7
 800b54c:	47c0      	blx	r8
 800b54e:	3001      	adds	r0, #1
 800b550:	d0e6      	beq.n	800b520 <_printf_common+0xa4>
 800b552:	3601      	adds	r6, #1
 800b554:	e7d9      	b.n	800b50a <_printf_common+0x8e>
	...

0800b558 <_printf_i>:
 800b558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b55c:	7e0f      	ldrb	r7, [r1, #24]
 800b55e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b560:	2f78      	cmp	r7, #120	; 0x78
 800b562:	4691      	mov	r9, r2
 800b564:	4680      	mov	r8, r0
 800b566:	460c      	mov	r4, r1
 800b568:	469a      	mov	sl, r3
 800b56a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b56e:	d807      	bhi.n	800b580 <_printf_i+0x28>
 800b570:	2f62      	cmp	r7, #98	; 0x62
 800b572:	d80a      	bhi.n	800b58a <_printf_i+0x32>
 800b574:	2f00      	cmp	r7, #0
 800b576:	f000 80d8 	beq.w	800b72a <_printf_i+0x1d2>
 800b57a:	2f58      	cmp	r7, #88	; 0x58
 800b57c:	f000 80a3 	beq.w	800b6c6 <_printf_i+0x16e>
 800b580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b584:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b588:	e03a      	b.n	800b600 <_printf_i+0xa8>
 800b58a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b58e:	2b15      	cmp	r3, #21
 800b590:	d8f6      	bhi.n	800b580 <_printf_i+0x28>
 800b592:	a101      	add	r1, pc, #4	; (adr r1, 800b598 <_printf_i+0x40>)
 800b594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b598:	0800b5f1 	.word	0x0800b5f1
 800b59c:	0800b605 	.word	0x0800b605
 800b5a0:	0800b581 	.word	0x0800b581
 800b5a4:	0800b581 	.word	0x0800b581
 800b5a8:	0800b581 	.word	0x0800b581
 800b5ac:	0800b581 	.word	0x0800b581
 800b5b0:	0800b605 	.word	0x0800b605
 800b5b4:	0800b581 	.word	0x0800b581
 800b5b8:	0800b581 	.word	0x0800b581
 800b5bc:	0800b581 	.word	0x0800b581
 800b5c0:	0800b581 	.word	0x0800b581
 800b5c4:	0800b711 	.word	0x0800b711
 800b5c8:	0800b635 	.word	0x0800b635
 800b5cc:	0800b6f3 	.word	0x0800b6f3
 800b5d0:	0800b581 	.word	0x0800b581
 800b5d4:	0800b581 	.word	0x0800b581
 800b5d8:	0800b733 	.word	0x0800b733
 800b5dc:	0800b581 	.word	0x0800b581
 800b5e0:	0800b635 	.word	0x0800b635
 800b5e4:	0800b581 	.word	0x0800b581
 800b5e8:	0800b581 	.word	0x0800b581
 800b5ec:	0800b6fb 	.word	0x0800b6fb
 800b5f0:	682b      	ldr	r3, [r5, #0]
 800b5f2:	1d1a      	adds	r2, r3, #4
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	602a      	str	r2, [r5, #0]
 800b5f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b600:	2301      	movs	r3, #1
 800b602:	e0a3      	b.n	800b74c <_printf_i+0x1f4>
 800b604:	6820      	ldr	r0, [r4, #0]
 800b606:	6829      	ldr	r1, [r5, #0]
 800b608:	0606      	lsls	r6, r0, #24
 800b60a:	f101 0304 	add.w	r3, r1, #4
 800b60e:	d50a      	bpl.n	800b626 <_printf_i+0xce>
 800b610:	680e      	ldr	r6, [r1, #0]
 800b612:	602b      	str	r3, [r5, #0]
 800b614:	2e00      	cmp	r6, #0
 800b616:	da03      	bge.n	800b620 <_printf_i+0xc8>
 800b618:	232d      	movs	r3, #45	; 0x2d
 800b61a:	4276      	negs	r6, r6
 800b61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b620:	485e      	ldr	r0, [pc, #376]	; (800b79c <_printf_i+0x244>)
 800b622:	230a      	movs	r3, #10
 800b624:	e019      	b.n	800b65a <_printf_i+0x102>
 800b626:	680e      	ldr	r6, [r1, #0]
 800b628:	602b      	str	r3, [r5, #0]
 800b62a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b62e:	bf18      	it	ne
 800b630:	b236      	sxthne	r6, r6
 800b632:	e7ef      	b.n	800b614 <_printf_i+0xbc>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	6820      	ldr	r0, [r4, #0]
 800b638:	1d19      	adds	r1, r3, #4
 800b63a:	6029      	str	r1, [r5, #0]
 800b63c:	0601      	lsls	r1, r0, #24
 800b63e:	d501      	bpl.n	800b644 <_printf_i+0xec>
 800b640:	681e      	ldr	r6, [r3, #0]
 800b642:	e002      	b.n	800b64a <_printf_i+0xf2>
 800b644:	0646      	lsls	r6, r0, #25
 800b646:	d5fb      	bpl.n	800b640 <_printf_i+0xe8>
 800b648:	881e      	ldrh	r6, [r3, #0]
 800b64a:	4854      	ldr	r0, [pc, #336]	; (800b79c <_printf_i+0x244>)
 800b64c:	2f6f      	cmp	r7, #111	; 0x6f
 800b64e:	bf0c      	ite	eq
 800b650:	2308      	moveq	r3, #8
 800b652:	230a      	movne	r3, #10
 800b654:	2100      	movs	r1, #0
 800b656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b65a:	6865      	ldr	r5, [r4, #4]
 800b65c:	60a5      	str	r5, [r4, #8]
 800b65e:	2d00      	cmp	r5, #0
 800b660:	bfa2      	ittt	ge
 800b662:	6821      	ldrge	r1, [r4, #0]
 800b664:	f021 0104 	bicge.w	r1, r1, #4
 800b668:	6021      	strge	r1, [r4, #0]
 800b66a:	b90e      	cbnz	r6, 800b670 <_printf_i+0x118>
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	d04d      	beq.n	800b70c <_printf_i+0x1b4>
 800b670:	4615      	mov	r5, r2
 800b672:	fbb6 f1f3 	udiv	r1, r6, r3
 800b676:	fb03 6711 	mls	r7, r3, r1, r6
 800b67a:	5dc7      	ldrb	r7, [r0, r7]
 800b67c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b680:	4637      	mov	r7, r6
 800b682:	42bb      	cmp	r3, r7
 800b684:	460e      	mov	r6, r1
 800b686:	d9f4      	bls.n	800b672 <_printf_i+0x11a>
 800b688:	2b08      	cmp	r3, #8
 800b68a:	d10b      	bne.n	800b6a4 <_printf_i+0x14c>
 800b68c:	6823      	ldr	r3, [r4, #0]
 800b68e:	07de      	lsls	r6, r3, #31
 800b690:	d508      	bpl.n	800b6a4 <_printf_i+0x14c>
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	6861      	ldr	r1, [r4, #4]
 800b696:	4299      	cmp	r1, r3
 800b698:	bfde      	ittt	le
 800b69a:	2330      	movle	r3, #48	; 0x30
 800b69c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b6a4:	1b52      	subs	r2, r2, r5
 800b6a6:	6122      	str	r2, [r4, #16]
 800b6a8:	f8cd a000 	str.w	sl, [sp]
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	aa03      	add	r2, sp, #12
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	f7ff fee2 	bl	800b47c <_printf_common>
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d14c      	bne.n	800b756 <_printf_i+0x1fe>
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6c0:	b004      	add	sp, #16
 800b6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c6:	4835      	ldr	r0, [pc, #212]	; (800b79c <_printf_i+0x244>)
 800b6c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b6cc:	6829      	ldr	r1, [r5, #0]
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6d4:	6029      	str	r1, [r5, #0]
 800b6d6:	061d      	lsls	r5, r3, #24
 800b6d8:	d514      	bpl.n	800b704 <_printf_i+0x1ac>
 800b6da:	07df      	lsls	r7, r3, #31
 800b6dc:	bf44      	itt	mi
 800b6de:	f043 0320 	orrmi.w	r3, r3, #32
 800b6e2:	6023      	strmi	r3, [r4, #0]
 800b6e4:	b91e      	cbnz	r6, 800b6ee <_printf_i+0x196>
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	f023 0320 	bic.w	r3, r3, #32
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	2310      	movs	r3, #16
 800b6f0:	e7b0      	b.n	800b654 <_printf_i+0xfc>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	f043 0320 	orr.w	r3, r3, #32
 800b6f8:	6023      	str	r3, [r4, #0]
 800b6fa:	2378      	movs	r3, #120	; 0x78
 800b6fc:	4828      	ldr	r0, [pc, #160]	; (800b7a0 <_printf_i+0x248>)
 800b6fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b702:	e7e3      	b.n	800b6cc <_printf_i+0x174>
 800b704:	0659      	lsls	r1, r3, #25
 800b706:	bf48      	it	mi
 800b708:	b2b6      	uxthmi	r6, r6
 800b70a:	e7e6      	b.n	800b6da <_printf_i+0x182>
 800b70c:	4615      	mov	r5, r2
 800b70e:	e7bb      	b.n	800b688 <_printf_i+0x130>
 800b710:	682b      	ldr	r3, [r5, #0]
 800b712:	6826      	ldr	r6, [r4, #0]
 800b714:	6961      	ldr	r1, [r4, #20]
 800b716:	1d18      	adds	r0, r3, #4
 800b718:	6028      	str	r0, [r5, #0]
 800b71a:	0635      	lsls	r5, r6, #24
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	d501      	bpl.n	800b724 <_printf_i+0x1cc>
 800b720:	6019      	str	r1, [r3, #0]
 800b722:	e002      	b.n	800b72a <_printf_i+0x1d2>
 800b724:	0670      	lsls	r0, r6, #25
 800b726:	d5fb      	bpl.n	800b720 <_printf_i+0x1c8>
 800b728:	8019      	strh	r1, [r3, #0]
 800b72a:	2300      	movs	r3, #0
 800b72c:	6123      	str	r3, [r4, #16]
 800b72e:	4615      	mov	r5, r2
 800b730:	e7ba      	b.n	800b6a8 <_printf_i+0x150>
 800b732:	682b      	ldr	r3, [r5, #0]
 800b734:	1d1a      	adds	r2, r3, #4
 800b736:	602a      	str	r2, [r5, #0]
 800b738:	681d      	ldr	r5, [r3, #0]
 800b73a:	6862      	ldr	r2, [r4, #4]
 800b73c:	2100      	movs	r1, #0
 800b73e:	4628      	mov	r0, r5
 800b740:	f7f4 fd4e 	bl	80001e0 <memchr>
 800b744:	b108      	cbz	r0, 800b74a <_printf_i+0x1f2>
 800b746:	1b40      	subs	r0, r0, r5
 800b748:	6060      	str	r0, [r4, #4]
 800b74a:	6863      	ldr	r3, [r4, #4]
 800b74c:	6123      	str	r3, [r4, #16]
 800b74e:	2300      	movs	r3, #0
 800b750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b754:	e7a8      	b.n	800b6a8 <_printf_i+0x150>
 800b756:	6923      	ldr	r3, [r4, #16]
 800b758:	462a      	mov	r2, r5
 800b75a:	4649      	mov	r1, r9
 800b75c:	4640      	mov	r0, r8
 800b75e:	47d0      	blx	sl
 800b760:	3001      	adds	r0, #1
 800b762:	d0ab      	beq.n	800b6bc <_printf_i+0x164>
 800b764:	6823      	ldr	r3, [r4, #0]
 800b766:	079b      	lsls	r3, r3, #30
 800b768:	d413      	bmi.n	800b792 <_printf_i+0x23a>
 800b76a:	68e0      	ldr	r0, [r4, #12]
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	4298      	cmp	r0, r3
 800b770:	bfb8      	it	lt
 800b772:	4618      	movlt	r0, r3
 800b774:	e7a4      	b.n	800b6c0 <_printf_i+0x168>
 800b776:	2301      	movs	r3, #1
 800b778:	4632      	mov	r2, r6
 800b77a:	4649      	mov	r1, r9
 800b77c:	4640      	mov	r0, r8
 800b77e:	47d0      	blx	sl
 800b780:	3001      	adds	r0, #1
 800b782:	d09b      	beq.n	800b6bc <_printf_i+0x164>
 800b784:	3501      	adds	r5, #1
 800b786:	68e3      	ldr	r3, [r4, #12]
 800b788:	9903      	ldr	r1, [sp, #12]
 800b78a:	1a5b      	subs	r3, r3, r1
 800b78c:	42ab      	cmp	r3, r5
 800b78e:	dcf2      	bgt.n	800b776 <_printf_i+0x21e>
 800b790:	e7eb      	b.n	800b76a <_printf_i+0x212>
 800b792:	2500      	movs	r5, #0
 800b794:	f104 0619 	add.w	r6, r4, #25
 800b798:	e7f5      	b.n	800b786 <_printf_i+0x22e>
 800b79a:	bf00      	nop
 800b79c:	080106c2 	.word	0x080106c2
 800b7a0:	080106d3 	.word	0x080106d3

0800b7a4 <siprintf>:
 800b7a4:	b40e      	push	{r1, r2, r3}
 800b7a6:	b500      	push	{lr}
 800b7a8:	b09c      	sub	sp, #112	; 0x70
 800b7aa:	ab1d      	add	r3, sp, #116	; 0x74
 800b7ac:	9002      	str	r0, [sp, #8]
 800b7ae:	9006      	str	r0, [sp, #24]
 800b7b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7b4:	4809      	ldr	r0, [pc, #36]	; (800b7dc <siprintf+0x38>)
 800b7b6:	9107      	str	r1, [sp, #28]
 800b7b8:	9104      	str	r1, [sp, #16]
 800b7ba:	4909      	ldr	r1, [pc, #36]	; (800b7e0 <siprintf+0x3c>)
 800b7bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c0:	9105      	str	r1, [sp, #20]
 800b7c2:	6800      	ldr	r0, [r0, #0]
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	a902      	add	r1, sp, #8
 800b7c8:	f001 fb7a 	bl	800cec0 <_svfiprintf_r>
 800b7cc:	9b02      	ldr	r3, [sp, #8]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	701a      	strb	r2, [r3, #0]
 800b7d2:	b01c      	add	sp, #112	; 0x70
 800b7d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7d8:	b003      	add	sp, #12
 800b7da:	4770      	bx	lr
 800b7dc:	2000005c 	.word	0x2000005c
 800b7e0:	ffff0208 	.word	0xffff0208

0800b7e4 <strncpy>:
 800b7e4:	b510      	push	{r4, lr}
 800b7e6:	3901      	subs	r1, #1
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	b132      	cbz	r2, 800b7fa <strncpy+0x16>
 800b7ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b7f0:	f803 4b01 	strb.w	r4, [r3], #1
 800b7f4:	3a01      	subs	r2, #1
 800b7f6:	2c00      	cmp	r4, #0
 800b7f8:	d1f7      	bne.n	800b7ea <strncpy+0x6>
 800b7fa:	441a      	add	r2, r3
 800b7fc:	2100      	movs	r1, #0
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d100      	bne.n	800b804 <strncpy+0x20>
 800b802:	bd10      	pop	{r4, pc}
 800b804:	f803 1b01 	strb.w	r1, [r3], #1
 800b808:	e7f9      	b.n	800b7fe <strncpy+0x1a>

0800b80a <quorem>:
 800b80a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80e:	6903      	ldr	r3, [r0, #16]
 800b810:	690c      	ldr	r4, [r1, #16]
 800b812:	42a3      	cmp	r3, r4
 800b814:	4607      	mov	r7, r0
 800b816:	f2c0 8081 	blt.w	800b91c <quorem+0x112>
 800b81a:	3c01      	subs	r4, #1
 800b81c:	f101 0814 	add.w	r8, r1, #20
 800b820:	f100 0514 	add.w	r5, r0, #20
 800b824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b828:	9301      	str	r3, [sp, #4]
 800b82a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b82e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b832:	3301      	adds	r3, #1
 800b834:	429a      	cmp	r2, r3
 800b836:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b83a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b83e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b842:	d331      	bcc.n	800b8a8 <quorem+0x9e>
 800b844:	f04f 0e00 	mov.w	lr, #0
 800b848:	4640      	mov	r0, r8
 800b84a:	46ac      	mov	ip, r5
 800b84c:	46f2      	mov	sl, lr
 800b84e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b852:	b293      	uxth	r3, r2
 800b854:	fb06 e303 	mla	r3, r6, r3, lr
 800b858:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	ebaa 0303 	sub.w	r3, sl, r3
 800b862:	f8dc a000 	ldr.w	sl, [ip]
 800b866:	0c12      	lsrs	r2, r2, #16
 800b868:	fa13 f38a 	uxtah	r3, r3, sl
 800b86c:	fb06 e202 	mla	r2, r6, r2, lr
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	9b00      	ldr	r3, [sp, #0]
 800b874:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b878:	b292      	uxth	r2, r2
 800b87a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b87e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b882:	f8bd 3000 	ldrh.w	r3, [sp]
 800b886:	4581      	cmp	r9, r0
 800b888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b88c:	f84c 3b04 	str.w	r3, [ip], #4
 800b890:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b894:	d2db      	bcs.n	800b84e <quorem+0x44>
 800b896:	f855 300b 	ldr.w	r3, [r5, fp]
 800b89a:	b92b      	cbnz	r3, 800b8a8 <quorem+0x9e>
 800b89c:	9b01      	ldr	r3, [sp, #4]
 800b89e:	3b04      	subs	r3, #4
 800b8a0:	429d      	cmp	r5, r3
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	d32e      	bcc.n	800b904 <quorem+0xfa>
 800b8a6:	613c      	str	r4, [r7, #16]
 800b8a8:	4638      	mov	r0, r7
 800b8aa:	f001 f8b5 	bl	800ca18 <__mcmp>
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	db24      	blt.n	800b8fc <quorem+0xf2>
 800b8b2:	3601      	adds	r6, #1
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f04f 0c00 	mov.w	ip, #0
 800b8ba:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8be:	f8d0 e000 	ldr.w	lr, [r0]
 800b8c2:	b293      	uxth	r3, r2
 800b8c4:	ebac 0303 	sub.w	r3, ip, r3
 800b8c8:	0c12      	lsrs	r2, r2, #16
 800b8ca:	fa13 f38e 	uxtah	r3, r3, lr
 800b8ce:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8dc:	45c1      	cmp	r9, r8
 800b8de:	f840 3b04 	str.w	r3, [r0], #4
 800b8e2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8e6:	d2e8      	bcs.n	800b8ba <quorem+0xb0>
 800b8e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8f0:	b922      	cbnz	r2, 800b8fc <quorem+0xf2>
 800b8f2:	3b04      	subs	r3, #4
 800b8f4:	429d      	cmp	r5, r3
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	d30a      	bcc.n	800b910 <quorem+0x106>
 800b8fa:	613c      	str	r4, [r7, #16]
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	b003      	add	sp, #12
 800b900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b904:	6812      	ldr	r2, [r2, #0]
 800b906:	3b04      	subs	r3, #4
 800b908:	2a00      	cmp	r2, #0
 800b90a:	d1cc      	bne.n	800b8a6 <quorem+0x9c>
 800b90c:	3c01      	subs	r4, #1
 800b90e:	e7c7      	b.n	800b8a0 <quorem+0x96>
 800b910:	6812      	ldr	r2, [r2, #0]
 800b912:	3b04      	subs	r3, #4
 800b914:	2a00      	cmp	r2, #0
 800b916:	d1f0      	bne.n	800b8fa <quorem+0xf0>
 800b918:	3c01      	subs	r4, #1
 800b91a:	e7eb      	b.n	800b8f4 <quorem+0xea>
 800b91c:	2000      	movs	r0, #0
 800b91e:	e7ee      	b.n	800b8fe <quorem+0xf4>

0800b920 <_dtoa_r>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	ed2d 8b04 	vpush	{d8-d9}
 800b928:	ec57 6b10 	vmov	r6, r7, d0
 800b92c:	b093      	sub	sp, #76	; 0x4c
 800b92e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b934:	9106      	str	r1, [sp, #24]
 800b936:	ee10 aa10 	vmov	sl, s0
 800b93a:	4604      	mov	r4, r0
 800b93c:	9209      	str	r2, [sp, #36]	; 0x24
 800b93e:	930c      	str	r3, [sp, #48]	; 0x30
 800b940:	46bb      	mov	fp, r7
 800b942:	b975      	cbnz	r5, 800b962 <_dtoa_r+0x42>
 800b944:	2010      	movs	r0, #16
 800b946:	f000 fddd 	bl	800c504 <malloc>
 800b94a:	4602      	mov	r2, r0
 800b94c:	6260      	str	r0, [r4, #36]	; 0x24
 800b94e:	b920      	cbnz	r0, 800b95a <_dtoa_r+0x3a>
 800b950:	4ba7      	ldr	r3, [pc, #668]	; (800bbf0 <_dtoa_r+0x2d0>)
 800b952:	21ea      	movs	r1, #234	; 0xea
 800b954:	48a7      	ldr	r0, [pc, #668]	; (800bbf4 <_dtoa_r+0x2d4>)
 800b956:	f001 fbc3 	bl	800d0e0 <__assert_func>
 800b95a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b95e:	6005      	str	r5, [r0, #0]
 800b960:	60c5      	str	r5, [r0, #12]
 800b962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b964:	6819      	ldr	r1, [r3, #0]
 800b966:	b151      	cbz	r1, 800b97e <_dtoa_r+0x5e>
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	604a      	str	r2, [r1, #4]
 800b96c:	2301      	movs	r3, #1
 800b96e:	4093      	lsls	r3, r2
 800b970:	608b      	str	r3, [r1, #8]
 800b972:	4620      	mov	r0, r4
 800b974:	f000 fe0e 	bl	800c594 <_Bfree>
 800b978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b97a:	2200      	movs	r2, #0
 800b97c:	601a      	str	r2, [r3, #0]
 800b97e:	1e3b      	subs	r3, r7, #0
 800b980:	bfaa      	itet	ge
 800b982:	2300      	movge	r3, #0
 800b984:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b988:	f8c8 3000 	strge.w	r3, [r8]
 800b98c:	4b9a      	ldr	r3, [pc, #616]	; (800bbf8 <_dtoa_r+0x2d8>)
 800b98e:	bfbc      	itt	lt
 800b990:	2201      	movlt	r2, #1
 800b992:	f8c8 2000 	strlt.w	r2, [r8]
 800b996:	ea33 030b 	bics.w	r3, r3, fp
 800b99a:	d11b      	bne.n	800b9d4 <_dtoa_r+0xb4>
 800b99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b99e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9a8:	4333      	orrs	r3, r6
 800b9aa:	f000 8592 	beq.w	800c4d2 <_dtoa_r+0xbb2>
 800b9ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b0:	b963      	cbnz	r3, 800b9cc <_dtoa_r+0xac>
 800b9b2:	4b92      	ldr	r3, [pc, #584]	; (800bbfc <_dtoa_r+0x2dc>)
 800b9b4:	e022      	b.n	800b9fc <_dtoa_r+0xdc>
 800b9b6:	4b92      	ldr	r3, [pc, #584]	; (800bc00 <_dtoa_r+0x2e0>)
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	9801      	ldr	r0, [sp, #4]
 800b9c2:	b013      	add	sp, #76	; 0x4c
 800b9c4:	ecbd 8b04 	vpop	{d8-d9}
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	4b8b      	ldr	r3, [pc, #556]	; (800bbfc <_dtoa_r+0x2dc>)
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	3303      	adds	r3, #3
 800b9d2:	e7f3      	b.n	800b9bc <_dtoa_r+0x9c>
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4650      	mov	r0, sl
 800b9da:	4659      	mov	r1, fp
 800b9dc:	f7f5 f874 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9e0:	ec4b ab19 	vmov	d9, sl, fp
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	b158      	cbz	r0, 800ba00 <_dtoa_r+0xe0>
 800b9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 856b 	beq.w	800c4cc <_dtoa_r+0xbac>
 800b9f6:	4883      	ldr	r0, [pc, #524]	; (800bc04 <_dtoa_r+0x2e4>)
 800b9f8:	6018      	str	r0, [r3, #0]
 800b9fa:	1e43      	subs	r3, r0, #1
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	e7df      	b.n	800b9c0 <_dtoa_r+0xa0>
 800ba00:	ec4b ab10 	vmov	d0, sl, fp
 800ba04:	aa10      	add	r2, sp, #64	; 0x40
 800ba06:	a911      	add	r1, sp, #68	; 0x44
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f001 f8ab 	bl	800cb64 <__d2b>
 800ba0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ba12:	ee08 0a10 	vmov	s16, r0
 800ba16:	2d00      	cmp	r5, #0
 800ba18:	f000 8084 	beq.w	800bb24 <_dtoa_r+0x204>
 800ba1c:	ee19 3a90 	vmov	r3, s19
 800ba20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba28:	4656      	mov	r6, sl
 800ba2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ba36:	4b74      	ldr	r3, [pc, #464]	; (800bc08 <_dtoa_r+0x2e8>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f7f4 fc23 	bl	8000288 <__aeabi_dsub>
 800ba42:	a365      	add	r3, pc, #404	; (adr r3, 800bbd8 <_dtoa_r+0x2b8>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f7f4 fdd6 	bl	80005f8 <__aeabi_dmul>
 800ba4c:	a364      	add	r3, pc, #400	; (adr r3, 800bbe0 <_dtoa_r+0x2c0>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fc1b 	bl	800028c <__adddf3>
 800ba56:	4606      	mov	r6, r0
 800ba58:	4628      	mov	r0, r5
 800ba5a:	460f      	mov	r7, r1
 800ba5c:	f7f4 fd62 	bl	8000524 <__aeabi_i2d>
 800ba60:	a361      	add	r3, pc, #388	; (adr r3, 800bbe8 <_dtoa_r+0x2c8>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f7f4 fdc7 	bl	80005f8 <__aeabi_dmul>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f4 fc0b 	bl	800028c <__adddf3>
 800ba76:	4606      	mov	r6, r0
 800ba78:	460f      	mov	r7, r1
 800ba7a:	f7f5 f86d 	bl	8000b58 <__aeabi_d2iz>
 800ba7e:	2200      	movs	r2, #0
 800ba80:	9000      	str	r0, [sp, #0]
 800ba82:	2300      	movs	r3, #0
 800ba84:	4630      	mov	r0, r6
 800ba86:	4639      	mov	r1, r7
 800ba88:	f7f5 f828 	bl	8000adc <__aeabi_dcmplt>
 800ba8c:	b150      	cbz	r0, 800baa4 <_dtoa_r+0x184>
 800ba8e:	9800      	ldr	r0, [sp, #0]
 800ba90:	f7f4 fd48 	bl	8000524 <__aeabi_i2d>
 800ba94:	4632      	mov	r2, r6
 800ba96:	463b      	mov	r3, r7
 800ba98:	f7f5 f816 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba9c:	b910      	cbnz	r0, 800baa4 <_dtoa_r+0x184>
 800ba9e:	9b00      	ldr	r3, [sp, #0]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	2b16      	cmp	r3, #22
 800baa8:	d85a      	bhi.n	800bb60 <_dtoa_r+0x240>
 800baaa:	9a00      	ldr	r2, [sp, #0]
 800baac:	4b57      	ldr	r3, [pc, #348]	; (800bc0c <_dtoa_r+0x2ec>)
 800baae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	ec51 0b19 	vmov	r0, r1, d9
 800baba:	f7f5 f80f 	bl	8000adc <__aeabi_dcmplt>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d050      	beq.n	800bb64 <_dtoa_r+0x244>
 800bac2:	9b00      	ldr	r3, [sp, #0]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	2300      	movs	r3, #0
 800baca:	930b      	str	r3, [sp, #44]	; 0x2c
 800bacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bace:	1b5d      	subs	r5, r3, r5
 800bad0:	1e6b      	subs	r3, r5, #1
 800bad2:	9305      	str	r3, [sp, #20]
 800bad4:	bf45      	ittet	mi
 800bad6:	f1c5 0301 	rsbmi	r3, r5, #1
 800bada:	9304      	strmi	r3, [sp, #16]
 800badc:	2300      	movpl	r3, #0
 800bade:	2300      	movmi	r3, #0
 800bae0:	bf4c      	ite	mi
 800bae2:	9305      	strmi	r3, [sp, #20]
 800bae4:	9304      	strpl	r3, [sp, #16]
 800bae6:	9b00      	ldr	r3, [sp, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	db3d      	blt.n	800bb68 <_dtoa_r+0x248>
 800baec:	9b05      	ldr	r3, [sp, #20]
 800baee:	9a00      	ldr	r2, [sp, #0]
 800baf0:	920a      	str	r2, [sp, #40]	; 0x28
 800baf2:	4413      	add	r3, r2
 800baf4:	9305      	str	r3, [sp, #20]
 800baf6:	2300      	movs	r3, #0
 800baf8:	9307      	str	r3, [sp, #28]
 800bafa:	9b06      	ldr	r3, [sp, #24]
 800bafc:	2b09      	cmp	r3, #9
 800bafe:	f200 8089 	bhi.w	800bc14 <_dtoa_r+0x2f4>
 800bb02:	2b05      	cmp	r3, #5
 800bb04:	bfc4      	itt	gt
 800bb06:	3b04      	subgt	r3, #4
 800bb08:	9306      	strgt	r3, [sp, #24]
 800bb0a:	9b06      	ldr	r3, [sp, #24]
 800bb0c:	f1a3 0302 	sub.w	r3, r3, #2
 800bb10:	bfcc      	ite	gt
 800bb12:	2500      	movgt	r5, #0
 800bb14:	2501      	movle	r5, #1
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	f200 8087 	bhi.w	800bc2a <_dtoa_r+0x30a>
 800bb1c:	e8df f003 	tbb	[pc, r3]
 800bb20:	59383a2d 	.word	0x59383a2d
 800bb24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb28:	441d      	add	r5, r3
 800bb2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	bfc1      	itttt	gt
 800bb32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800bb3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb42:	bfda      	itte	le
 800bb44:	f1c3 0320 	rsble	r3, r3, #32
 800bb48:	fa06 f003 	lslle.w	r0, r6, r3
 800bb4c:	4318      	orrgt	r0, r3
 800bb4e:	f7f4 fcd9 	bl	8000504 <__aeabi_ui2d>
 800bb52:	2301      	movs	r3, #1
 800bb54:	4606      	mov	r6, r0
 800bb56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bb5a:	3d01      	subs	r5, #1
 800bb5c:	930e      	str	r3, [sp, #56]	; 0x38
 800bb5e:	e76a      	b.n	800ba36 <_dtoa_r+0x116>
 800bb60:	2301      	movs	r3, #1
 800bb62:	e7b2      	b.n	800baca <_dtoa_r+0x1aa>
 800bb64:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb66:	e7b1      	b.n	800bacc <_dtoa_r+0x1ac>
 800bb68:	9b04      	ldr	r3, [sp, #16]
 800bb6a:	9a00      	ldr	r2, [sp, #0]
 800bb6c:	1a9b      	subs	r3, r3, r2
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	4253      	negs	r3, r2
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	2300      	movs	r3, #0
 800bb76:	930a      	str	r3, [sp, #40]	; 0x28
 800bb78:	e7bf      	b.n	800bafa <_dtoa_r+0x1da>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	9308      	str	r3, [sp, #32]
 800bb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	dc55      	bgt.n	800bc30 <_dtoa_r+0x310>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb8e:	e00c      	b.n	800bbaa <_dtoa_r+0x28a>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e7f3      	b.n	800bb7c <_dtoa_r+0x25c>
 800bb94:	2300      	movs	r3, #0
 800bb96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb98:	9308      	str	r3, [sp, #32]
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	9302      	str	r3, [sp, #8]
 800bba0:	3301      	adds	r3, #1
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	9303      	str	r3, [sp, #12]
 800bba6:	bfb8      	it	lt
 800bba8:	2301      	movlt	r3, #1
 800bbaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bbac:	2200      	movs	r2, #0
 800bbae:	6042      	str	r2, [r0, #4]
 800bbb0:	2204      	movs	r2, #4
 800bbb2:	f102 0614 	add.w	r6, r2, #20
 800bbb6:	429e      	cmp	r6, r3
 800bbb8:	6841      	ldr	r1, [r0, #4]
 800bbba:	d93d      	bls.n	800bc38 <_dtoa_r+0x318>
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 fca9 	bl	800c514 <_Balloc>
 800bbc2:	9001      	str	r0, [sp, #4]
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d13b      	bne.n	800bc40 <_dtoa_r+0x320>
 800bbc8:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <_dtoa_r+0x2f0>)
 800bbca:	4602      	mov	r2, r0
 800bbcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bbd0:	e6c0      	b.n	800b954 <_dtoa_r+0x34>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e7df      	b.n	800bb96 <_dtoa_r+0x276>
 800bbd6:	bf00      	nop
 800bbd8:	636f4361 	.word	0x636f4361
 800bbdc:	3fd287a7 	.word	0x3fd287a7
 800bbe0:	8b60c8b3 	.word	0x8b60c8b3
 800bbe4:	3fc68a28 	.word	0x3fc68a28
 800bbe8:	509f79fb 	.word	0x509f79fb
 800bbec:	3fd34413 	.word	0x3fd34413
 800bbf0:	080106f1 	.word	0x080106f1
 800bbf4:	08010708 	.word	0x08010708
 800bbf8:	7ff00000 	.word	0x7ff00000
 800bbfc:	080106ed 	.word	0x080106ed
 800bc00:	080106e4 	.word	0x080106e4
 800bc04:	080106c1 	.word	0x080106c1
 800bc08:	3ff80000 	.word	0x3ff80000
 800bc0c:	080107f8 	.word	0x080107f8
 800bc10:	08010763 	.word	0x08010763
 800bc14:	2501      	movs	r5, #1
 800bc16:	2300      	movs	r3, #0
 800bc18:	9306      	str	r3, [sp, #24]
 800bc1a:	9508      	str	r5, [sp, #32]
 800bc1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc24:	2200      	movs	r2, #0
 800bc26:	2312      	movs	r3, #18
 800bc28:	e7b0      	b.n	800bb8c <_dtoa_r+0x26c>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	9308      	str	r3, [sp, #32]
 800bc2e:	e7f5      	b.n	800bc1c <_dtoa_r+0x2fc>
 800bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc36:	e7b8      	b.n	800bbaa <_dtoa_r+0x28a>
 800bc38:	3101      	adds	r1, #1
 800bc3a:	6041      	str	r1, [r0, #4]
 800bc3c:	0052      	lsls	r2, r2, #1
 800bc3e:	e7b8      	b.n	800bbb2 <_dtoa_r+0x292>
 800bc40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc42:	9a01      	ldr	r2, [sp, #4]
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	9b03      	ldr	r3, [sp, #12]
 800bc48:	2b0e      	cmp	r3, #14
 800bc4a:	f200 809d 	bhi.w	800bd88 <_dtoa_r+0x468>
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	f000 809a 	beq.w	800bd88 <_dtoa_r+0x468>
 800bc54:	9b00      	ldr	r3, [sp, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dd32      	ble.n	800bcc0 <_dtoa_r+0x3a0>
 800bc5a:	4ab7      	ldr	r2, [pc, #732]	; (800bf38 <_dtoa_r+0x618>)
 800bc5c:	f003 030f 	and.w	r3, r3, #15
 800bc60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc68:	9b00      	ldr	r3, [sp, #0]
 800bc6a:	05d8      	lsls	r0, r3, #23
 800bc6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bc70:	d516      	bpl.n	800bca0 <_dtoa_r+0x380>
 800bc72:	4bb2      	ldr	r3, [pc, #712]	; (800bf3c <_dtoa_r+0x61c>)
 800bc74:	ec51 0b19 	vmov	r0, r1, d9
 800bc78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc7c:	f7f4 fde6 	bl	800084c <__aeabi_ddiv>
 800bc80:	f007 070f 	and.w	r7, r7, #15
 800bc84:	4682      	mov	sl, r0
 800bc86:	468b      	mov	fp, r1
 800bc88:	2503      	movs	r5, #3
 800bc8a:	4eac      	ldr	r6, [pc, #688]	; (800bf3c <_dtoa_r+0x61c>)
 800bc8c:	b957      	cbnz	r7, 800bca4 <_dtoa_r+0x384>
 800bc8e:	4642      	mov	r2, r8
 800bc90:	464b      	mov	r3, r9
 800bc92:	4650      	mov	r0, sl
 800bc94:	4659      	mov	r1, fp
 800bc96:	f7f4 fdd9 	bl	800084c <__aeabi_ddiv>
 800bc9a:	4682      	mov	sl, r0
 800bc9c:	468b      	mov	fp, r1
 800bc9e:	e028      	b.n	800bcf2 <_dtoa_r+0x3d2>
 800bca0:	2502      	movs	r5, #2
 800bca2:	e7f2      	b.n	800bc8a <_dtoa_r+0x36a>
 800bca4:	07f9      	lsls	r1, r7, #31
 800bca6:	d508      	bpl.n	800bcba <_dtoa_r+0x39a>
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcb0:	f7f4 fca2 	bl	80005f8 <__aeabi_dmul>
 800bcb4:	3501      	adds	r5, #1
 800bcb6:	4680      	mov	r8, r0
 800bcb8:	4689      	mov	r9, r1
 800bcba:	107f      	asrs	r7, r7, #1
 800bcbc:	3608      	adds	r6, #8
 800bcbe:	e7e5      	b.n	800bc8c <_dtoa_r+0x36c>
 800bcc0:	f000 809b 	beq.w	800bdfa <_dtoa_r+0x4da>
 800bcc4:	9b00      	ldr	r3, [sp, #0]
 800bcc6:	4f9d      	ldr	r7, [pc, #628]	; (800bf3c <_dtoa_r+0x61c>)
 800bcc8:	425e      	negs	r6, r3
 800bcca:	4b9b      	ldr	r3, [pc, #620]	; (800bf38 <_dtoa_r+0x618>)
 800bccc:	f006 020f 	and.w	r2, r6, #15
 800bcd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd8:	ec51 0b19 	vmov	r0, r1, d9
 800bcdc:	f7f4 fc8c 	bl	80005f8 <__aeabi_dmul>
 800bce0:	1136      	asrs	r6, r6, #4
 800bce2:	4682      	mov	sl, r0
 800bce4:	468b      	mov	fp, r1
 800bce6:	2300      	movs	r3, #0
 800bce8:	2502      	movs	r5, #2
 800bcea:	2e00      	cmp	r6, #0
 800bcec:	d17a      	bne.n	800bde4 <_dtoa_r+0x4c4>
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1d3      	bne.n	800bc9a <_dtoa_r+0x37a>
 800bcf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8082 	beq.w	800bdfe <_dtoa_r+0x4de>
 800bcfa:	4b91      	ldr	r3, [pc, #580]	; (800bf40 <_dtoa_r+0x620>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4650      	mov	r0, sl
 800bd00:	4659      	mov	r1, fp
 800bd02:	f7f4 feeb 	bl	8000adc <__aeabi_dcmplt>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d079      	beq.n	800bdfe <_dtoa_r+0x4de>
 800bd0a:	9b03      	ldr	r3, [sp, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d076      	beq.n	800bdfe <_dtoa_r+0x4de>
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	dd36      	ble.n	800bd84 <_dtoa_r+0x464>
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	4650      	mov	r0, sl
 800bd1a:	4659      	mov	r1, fp
 800bd1c:	1e5f      	subs	r7, r3, #1
 800bd1e:	2200      	movs	r2, #0
 800bd20:	4b88      	ldr	r3, [pc, #544]	; (800bf44 <_dtoa_r+0x624>)
 800bd22:	f7f4 fc69 	bl	80005f8 <__aeabi_dmul>
 800bd26:	9e02      	ldr	r6, [sp, #8]
 800bd28:	4682      	mov	sl, r0
 800bd2a:	468b      	mov	fp, r1
 800bd2c:	3501      	adds	r5, #1
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f7f4 fbf8 	bl	8000524 <__aeabi_i2d>
 800bd34:	4652      	mov	r2, sl
 800bd36:	465b      	mov	r3, fp
 800bd38:	f7f4 fc5e 	bl	80005f8 <__aeabi_dmul>
 800bd3c:	4b82      	ldr	r3, [pc, #520]	; (800bf48 <_dtoa_r+0x628>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f7f4 faa4 	bl	800028c <__adddf3>
 800bd44:	46d0      	mov	r8, sl
 800bd46:	46d9      	mov	r9, fp
 800bd48:	4682      	mov	sl, r0
 800bd4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bd4e:	2e00      	cmp	r6, #0
 800bd50:	d158      	bne.n	800be04 <_dtoa_r+0x4e4>
 800bd52:	4b7e      	ldr	r3, [pc, #504]	; (800bf4c <_dtoa_r+0x62c>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	4640      	mov	r0, r8
 800bd58:	4649      	mov	r1, r9
 800bd5a:	f7f4 fa95 	bl	8000288 <__aeabi_dsub>
 800bd5e:	4652      	mov	r2, sl
 800bd60:	465b      	mov	r3, fp
 800bd62:	4680      	mov	r8, r0
 800bd64:	4689      	mov	r9, r1
 800bd66:	f7f4 fed7 	bl	8000b18 <__aeabi_dcmpgt>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f040 8295 	bne.w	800c29a <_dtoa_r+0x97a>
 800bd70:	4652      	mov	r2, sl
 800bd72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd76:	4640      	mov	r0, r8
 800bd78:	4649      	mov	r1, r9
 800bd7a:	f7f4 feaf 	bl	8000adc <__aeabi_dcmplt>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f040 8289 	bne.w	800c296 <_dtoa_r+0x976>
 800bd84:	ec5b ab19 	vmov	sl, fp, d9
 800bd88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f2c0 8148 	blt.w	800c020 <_dtoa_r+0x700>
 800bd90:	9a00      	ldr	r2, [sp, #0]
 800bd92:	2a0e      	cmp	r2, #14
 800bd94:	f300 8144 	bgt.w	800c020 <_dtoa_r+0x700>
 800bd98:	4b67      	ldr	r3, [pc, #412]	; (800bf38 <_dtoa_r+0x618>)
 800bd9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f280 80d5 	bge.w	800bf54 <_dtoa_r+0x634>
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f300 80d1 	bgt.w	800bf54 <_dtoa_r+0x634>
 800bdb2:	f040 826f 	bne.w	800c294 <_dtoa_r+0x974>
 800bdb6:	4b65      	ldr	r3, [pc, #404]	; (800bf4c <_dtoa_r+0x62c>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	4640      	mov	r0, r8
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	f7f4 fc1b 	bl	80005f8 <__aeabi_dmul>
 800bdc2:	4652      	mov	r2, sl
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	f7f4 fe9d 	bl	8000b04 <__aeabi_dcmpge>
 800bdca:	9e03      	ldr	r6, [sp, #12]
 800bdcc:	4637      	mov	r7, r6
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	f040 8245 	bne.w	800c25e <_dtoa_r+0x93e>
 800bdd4:	9d01      	ldr	r5, [sp, #4]
 800bdd6:	2331      	movs	r3, #49	; 0x31
 800bdd8:	f805 3b01 	strb.w	r3, [r5], #1
 800bddc:	9b00      	ldr	r3, [sp, #0]
 800bdde:	3301      	adds	r3, #1
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	e240      	b.n	800c266 <_dtoa_r+0x946>
 800bde4:	07f2      	lsls	r2, r6, #31
 800bde6:	d505      	bpl.n	800bdf4 <_dtoa_r+0x4d4>
 800bde8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdec:	f7f4 fc04 	bl	80005f8 <__aeabi_dmul>
 800bdf0:	3501      	adds	r5, #1
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	1076      	asrs	r6, r6, #1
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	e777      	b.n	800bcea <_dtoa_r+0x3ca>
 800bdfa:	2502      	movs	r5, #2
 800bdfc:	e779      	b.n	800bcf2 <_dtoa_r+0x3d2>
 800bdfe:	9f00      	ldr	r7, [sp, #0]
 800be00:	9e03      	ldr	r6, [sp, #12]
 800be02:	e794      	b.n	800bd2e <_dtoa_r+0x40e>
 800be04:	9901      	ldr	r1, [sp, #4]
 800be06:	4b4c      	ldr	r3, [pc, #304]	; (800bf38 <_dtoa_r+0x618>)
 800be08:	4431      	add	r1, r6
 800be0a:	910d      	str	r1, [sp, #52]	; 0x34
 800be0c:	9908      	ldr	r1, [sp, #32]
 800be0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be16:	2900      	cmp	r1, #0
 800be18:	d043      	beq.n	800bea2 <_dtoa_r+0x582>
 800be1a:	494d      	ldr	r1, [pc, #308]	; (800bf50 <_dtoa_r+0x630>)
 800be1c:	2000      	movs	r0, #0
 800be1e:	f7f4 fd15 	bl	800084c <__aeabi_ddiv>
 800be22:	4652      	mov	r2, sl
 800be24:	465b      	mov	r3, fp
 800be26:	f7f4 fa2f 	bl	8000288 <__aeabi_dsub>
 800be2a:	9d01      	ldr	r5, [sp, #4]
 800be2c:	4682      	mov	sl, r0
 800be2e:	468b      	mov	fp, r1
 800be30:	4649      	mov	r1, r9
 800be32:	4640      	mov	r0, r8
 800be34:	f7f4 fe90 	bl	8000b58 <__aeabi_d2iz>
 800be38:	4606      	mov	r6, r0
 800be3a:	f7f4 fb73 	bl	8000524 <__aeabi_i2d>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 fa1f 	bl	8000288 <__aeabi_dsub>
 800be4a:	3630      	adds	r6, #48	; 0x30
 800be4c:	f805 6b01 	strb.w	r6, [r5], #1
 800be50:	4652      	mov	r2, sl
 800be52:	465b      	mov	r3, fp
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	f7f4 fe40 	bl	8000adc <__aeabi_dcmplt>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d163      	bne.n	800bf28 <_dtoa_r+0x608>
 800be60:	4642      	mov	r2, r8
 800be62:	464b      	mov	r3, r9
 800be64:	4936      	ldr	r1, [pc, #216]	; (800bf40 <_dtoa_r+0x620>)
 800be66:	2000      	movs	r0, #0
 800be68:	f7f4 fa0e 	bl	8000288 <__aeabi_dsub>
 800be6c:	4652      	mov	r2, sl
 800be6e:	465b      	mov	r3, fp
 800be70:	f7f4 fe34 	bl	8000adc <__aeabi_dcmplt>
 800be74:	2800      	cmp	r0, #0
 800be76:	f040 80b5 	bne.w	800bfe4 <_dtoa_r+0x6c4>
 800be7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be7c:	429d      	cmp	r5, r3
 800be7e:	d081      	beq.n	800bd84 <_dtoa_r+0x464>
 800be80:	4b30      	ldr	r3, [pc, #192]	; (800bf44 <_dtoa_r+0x624>)
 800be82:	2200      	movs	r2, #0
 800be84:	4650      	mov	r0, sl
 800be86:	4659      	mov	r1, fp
 800be88:	f7f4 fbb6 	bl	80005f8 <__aeabi_dmul>
 800be8c:	4b2d      	ldr	r3, [pc, #180]	; (800bf44 <_dtoa_r+0x624>)
 800be8e:	4682      	mov	sl, r0
 800be90:	468b      	mov	fp, r1
 800be92:	4640      	mov	r0, r8
 800be94:	4649      	mov	r1, r9
 800be96:	2200      	movs	r2, #0
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	4680      	mov	r8, r0
 800be9e:	4689      	mov	r9, r1
 800bea0:	e7c6      	b.n	800be30 <_dtoa_r+0x510>
 800bea2:	4650      	mov	r0, sl
 800bea4:	4659      	mov	r1, fp
 800bea6:	f7f4 fba7 	bl	80005f8 <__aeabi_dmul>
 800beaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beac:	9d01      	ldr	r5, [sp, #4]
 800beae:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb0:	4682      	mov	sl, r0
 800beb2:	468b      	mov	fp, r1
 800beb4:	4649      	mov	r1, r9
 800beb6:	4640      	mov	r0, r8
 800beb8:	f7f4 fe4e 	bl	8000b58 <__aeabi_d2iz>
 800bebc:	4606      	mov	r6, r0
 800bebe:	f7f4 fb31 	bl	8000524 <__aeabi_i2d>
 800bec2:	3630      	adds	r6, #48	; 0x30
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4640      	mov	r0, r8
 800beca:	4649      	mov	r1, r9
 800becc:	f7f4 f9dc 	bl	8000288 <__aeabi_dsub>
 800bed0:	f805 6b01 	strb.w	r6, [r5], #1
 800bed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bed6:	429d      	cmp	r5, r3
 800bed8:	4680      	mov	r8, r0
 800beda:	4689      	mov	r9, r1
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	d124      	bne.n	800bf2c <_dtoa_r+0x60c>
 800bee2:	4b1b      	ldr	r3, [pc, #108]	; (800bf50 <_dtoa_r+0x630>)
 800bee4:	4650      	mov	r0, sl
 800bee6:	4659      	mov	r1, fp
 800bee8:	f7f4 f9d0 	bl	800028c <__adddf3>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	4640      	mov	r0, r8
 800bef2:	4649      	mov	r1, r9
 800bef4:	f7f4 fe10 	bl	8000b18 <__aeabi_dcmpgt>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d173      	bne.n	800bfe4 <_dtoa_r+0x6c4>
 800befc:	4652      	mov	r2, sl
 800befe:	465b      	mov	r3, fp
 800bf00:	4913      	ldr	r1, [pc, #76]	; (800bf50 <_dtoa_r+0x630>)
 800bf02:	2000      	movs	r0, #0
 800bf04:	f7f4 f9c0 	bl	8000288 <__aeabi_dsub>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	4649      	mov	r1, r9
 800bf10:	f7f4 fde4 	bl	8000adc <__aeabi_dcmplt>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	f43f af35 	beq.w	800bd84 <_dtoa_r+0x464>
 800bf1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf1c:	1e6b      	subs	r3, r5, #1
 800bf1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf24:	2b30      	cmp	r3, #48	; 0x30
 800bf26:	d0f8      	beq.n	800bf1a <_dtoa_r+0x5fa>
 800bf28:	9700      	str	r7, [sp, #0]
 800bf2a:	e049      	b.n	800bfc0 <_dtoa_r+0x6a0>
 800bf2c:	4b05      	ldr	r3, [pc, #20]	; (800bf44 <_dtoa_r+0x624>)
 800bf2e:	f7f4 fb63 	bl	80005f8 <__aeabi_dmul>
 800bf32:	4680      	mov	r8, r0
 800bf34:	4689      	mov	r9, r1
 800bf36:	e7bd      	b.n	800beb4 <_dtoa_r+0x594>
 800bf38:	080107f8 	.word	0x080107f8
 800bf3c:	080107d0 	.word	0x080107d0
 800bf40:	3ff00000 	.word	0x3ff00000
 800bf44:	40240000 	.word	0x40240000
 800bf48:	401c0000 	.word	0x401c0000
 800bf4c:	40140000 	.word	0x40140000
 800bf50:	3fe00000 	.word	0x3fe00000
 800bf54:	9d01      	ldr	r5, [sp, #4]
 800bf56:	4656      	mov	r6, sl
 800bf58:	465f      	mov	r7, fp
 800bf5a:	4642      	mov	r2, r8
 800bf5c:	464b      	mov	r3, r9
 800bf5e:	4630      	mov	r0, r6
 800bf60:	4639      	mov	r1, r7
 800bf62:	f7f4 fc73 	bl	800084c <__aeabi_ddiv>
 800bf66:	f7f4 fdf7 	bl	8000b58 <__aeabi_d2iz>
 800bf6a:	4682      	mov	sl, r0
 800bf6c:	f7f4 fada 	bl	8000524 <__aeabi_i2d>
 800bf70:	4642      	mov	r2, r8
 800bf72:	464b      	mov	r3, r9
 800bf74:	f7f4 fb40 	bl	80005f8 <__aeabi_dmul>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	4639      	mov	r1, r7
 800bf80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bf84:	f7f4 f980 	bl	8000288 <__aeabi_dsub>
 800bf88:	f805 6b01 	strb.w	r6, [r5], #1
 800bf8c:	9e01      	ldr	r6, [sp, #4]
 800bf8e:	9f03      	ldr	r7, [sp, #12]
 800bf90:	1bae      	subs	r6, r5, r6
 800bf92:	42b7      	cmp	r7, r6
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	d135      	bne.n	800c006 <_dtoa_r+0x6e6>
 800bf9a:	f7f4 f977 	bl	800028c <__adddf3>
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	460f      	mov	r7, r1
 800bfa6:	f7f4 fdb7 	bl	8000b18 <__aeabi_dcmpgt>
 800bfaa:	b9d0      	cbnz	r0, 800bfe2 <_dtoa_r+0x6c2>
 800bfac:	4642      	mov	r2, r8
 800bfae:	464b      	mov	r3, r9
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	f7f4 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfb8:	b110      	cbz	r0, 800bfc0 <_dtoa_r+0x6a0>
 800bfba:	f01a 0f01 	tst.w	sl, #1
 800bfbe:	d110      	bne.n	800bfe2 <_dtoa_r+0x6c2>
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	ee18 1a10 	vmov	r1, s16
 800bfc6:	f000 fae5 	bl	800c594 <_Bfree>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9800      	ldr	r0, [sp, #0]
 800bfce:	702b      	strb	r3, [r5, #0]
 800bfd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	6018      	str	r0, [r3, #0]
 800bfd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f43f acf1 	beq.w	800b9c0 <_dtoa_r+0xa0>
 800bfde:	601d      	str	r5, [r3, #0]
 800bfe0:	e4ee      	b.n	800b9c0 <_dtoa_r+0xa0>
 800bfe2:	9f00      	ldr	r7, [sp, #0]
 800bfe4:	462b      	mov	r3, r5
 800bfe6:	461d      	mov	r5, r3
 800bfe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfec:	2a39      	cmp	r2, #57	; 0x39
 800bfee:	d106      	bne.n	800bffe <_dtoa_r+0x6de>
 800bff0:	9a01      	ldr	r2, [sp, #4]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d1f7      	bne.n	800bfe6 <_dtoa_r+0x6c6>
 800bff6:	9901      	ldr	r1, [sp, #4]
 800bff8:	2230      	movs	r2, #48	; 0x30
 800bffa:	3701      	adds	r7, #1
 800bffc:	700a      	strb	r2, [r1, #0]
 800bffe:	781a      	ldrb	r2, [r3, #0]
 800c000:	3201      	adds	r2, #1
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	e790      	b.n	800bf28 <_dtoa_r+0x608>
 800c006:	4ba6      	ldr	r3, [pc, #664]	; (800c2a0 <_dtoa_r+0x980>)
 800c008:	2200      	movs	r2, #0
 800c00a:	f7f4 faf5 	bl	80005f8 <__aeabi_dmul>
 800c00e:	2200      	movs	r2, #0
 800c010:	2300      	movs	r3, #0
 800c012:	4606      	mov	r6, r0
 800c014:	460f      	mov	r7, r1
 800c016:	f7f4 fd57 	bl	8000ac8 <__aeabi_dcmpeq>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d09d      	beq.n	800bf5a <_dtoa_r+0x63a>
 800c01e:	e7cf      	b.n	800bfc0 <_dtoa_r+0x6a0>
 800c020:	9a08      	ldr	r2, [sp, #32]
 800c022:	2a00      	cmp	r2, #0
 800c024:	f000 80d7 	beq.w	800c1d6 <_dtoa_r+0x8b6>
 800c028:	9a06      	ldr	r2, [sp, #24]
 800c02a:	2a01      	cmp	r2, #1
 800c02c:	f300 80ba 	bgt.w	800c1a4 <_dtoa_r+0x884>
 800c030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c032:	2a00      	cmp	r2, #0
 800c034:	f000 80b2 	beq.w	800c19c <_dtoa_r+0x87c>
 800c038:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c03c:	9e07      	ldr	r6, [sp, #28]
 800c03e:	9d04      	ldr	r5, [sp, #16]
 800c040:	9a04      	ldr	r2, [sp, #16]
 800c042:	441a      	add	r2, r3
 800c044:	9204      	str	r2, [sp, #16]
 800c046:	9a05      	ldr	r2, [sp, #20]
 800c048:	2101      	movs	r1, #1
 800c04a:	441a      	add	r2, r3
 800c04c:	4620      	mov	r0, r4
 800c04e:	9205      	str	r2, [sp, #20]
 800c050:	f000 fb58 	bl	800c704 <__i2b>
 800c054:	4607      	mov	r7, r0
 800c056:	2d00      	cmp	r5, #0
 800c058:	dd0c      	ble.n	800c074 <_dtoa_r+0x754>
 800c05a:	9b05      	ldr	r3, [sp, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dd09      	ble.n	800c074 <_dtoa_r+0x754>
 800c060:	42ab      	cmp	r3, r5
 800c062:	9a04      	ldr	r2, [sp, #16]
 800c064:	bfa8      	it	ge
 800c066:	462b      	movge	r3, r5
 800c068:	1ad2      	subs	r2, r2, r3
 800c06a:	9204      	str	r2, [sp, #16]
 800c06c:	9a05      	ldr	r2, [sp, #20]
 800c06e:	1aed      	subs	r5, r5, r3
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	9305      	str	r3, [sp, #20]
 800c074:	9b07      	ldr	r3, [sp, #28]
 800c076:	b31b      	cbz	r3, 800c0c0 <_dtoa_r+0x7a0>
 800c078:	9b08      	ldr	r3, [sp, #32]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 80af 	beq.w	800c1de <_dtoa_r+0x8be>
 800c080:	2e00      	cmp	r6, #0
 800c082:	dd13      	ble.n	800c0ac <_dtoa_r+0x78c>
 800c084:	4639      	mov	r1, r7
 800c086:	4632      	mov	r2, r6
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 fbfb 	bl	800c884 <__pow5mult>
 800c08e:	ee18 2a10 	vmov	r2, s16
 800c092:	4601      	mov	r1, r0
 800c094:	4607      	mov	r7, r0
 800c096:	4620      	mov	r0, r4
 800c098:	f000 fb4a 	bl	800c730 <__multiply>
 800c09c:	ee18 1a10 	vmov	r1, s16
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 fa76 	bl	800c594 <_Bfree>
 800c0a8:	ee08 8a10 	vmov	s16, r8
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	1b9a      	subs	r2, r3, r6
 800c0b0:	d006      	beq.n	800c0c0 <_dtoa_r+0x7a0>
 800c0b2:	ee18 1a10 	vmov	r1, s16
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 fbe4 	bl	800c884 <__pow5mult>
 800c0bc:	ee08 0a10 	vmov	s16, r0
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 fb1e 	bl	800c704 <__i2b>
 800c0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	f340 8088 	ble.w	800c1e2 <_dtoa_r+0x8c2>
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	4601      	mov	r1, r0
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f000 fbd4 	bl	800c884 <__pow5mult>
 800c0dc:	9b06      	ldr	r3, [sp, #24]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	f340 8081 	ble.w	800c1e8 <_dtoa_r+0x8c8>
 800c0e6:	f04f 0800 	mov.w	r8, #0
 800c0ea:	6933      	ldr	r3, [r6, #16]
 800c0ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0f0:	6918      	ldr	r0, [r3, #16]
 800c0f2:	f000 fab7 	bl	800c664 <__hi0bits>
 800c0f6:	f1c0 0020 	rsb	r0, r0, #32
 800c0fa:	9b05      	ldr	r3, [sp, #20]
 800c0fc:	4418      	add	r0, r3
 800c0fe:	f010 001f 	ands.w	r0, r0, #31
 800c102:	f000 8092 	beq.w	800c22a <_dtoa_r+0x90a>
 800c106:	f1c0 0320 	rsb	r3, r0, #32
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	f340 808a 	ble.w	800c224 <_dtoa_r+0x904>
 800c110:	f1c0 001c 	rsb	r0, r0, #28
 800c114:	9b04      	ldr	r3, [sp, #16]
 800c116:	4403      	add	r3, r0
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	9b05      	ldr	r3, [sp, #20]
 800c11c:	4403      	add	r3, r0
 800c11e:	4405      	add	r5, r0
 800c120:	9305      	str	r3, [sp, #20]
 800c122:	9b04      	ldr	r3, [sp, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	dd07      	ble.n	800c138 <_dtoa_r+0x818>
 800c128:	ee18 1a10 	vmov	r1, s16
 800c12c:	461a      	mov	r2, r3
 800c12e:	4620      	mov	r0, r4
 800c130:	f000 fc02 	bl	800c938 <__lshift>
 800c134:	ee08 0a10 	vmov	s16, r0
 800c138:	9b05      	ldr	r3, [sp, #20]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	dd05      	ble.n	800c14a <_dtoa_r+0x82a>
 800c13e:	4631      	mov	r1, r6
 800c140:	461a      	mov	r2, r3
 800c142:	4620      	mov	r0, r4
 800c144:	f000 fbf8 	bl	800c938 <__lshift>
 800c148:	4606      	mov	r6, r0
 800c14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d06e      	beq.n	800c22e <_dtoa_r+0x90e>
 800c150:	ee18 0a10 	vmov	r0, s16
 800c154:	4631      	mov	r1, r6
 800c156:	f000 fc5f 	bl	800ca18 <__mcmp>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	da67      	bge.n	800c22e <_dtoa_r+0x90e>
 800c15e:	9b00      	ldr	r3, [sp, #0]
 800c160:	3b01      	subs	r3, #1
 800c162:	ee18 1a10 	vmov	r1, s16
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	220a      	movs	r2, #10
 800c16a:	2300      	movs	r3, #0
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 fa33 	bl	800c5d8 <__multadd>
 800c172:	9b08      	ldr	r3, [sp, #32]
 800c174:	ee08 0a10 	vmov	s16, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f000 81b1 	beq.w	800c4e0 <_dtoa_r+0xbc0>
 800c17e:	2300      	movs	r3, #0
 800c180:	4639      	mov	r1, r7
 800c182:	220a      	movs	r2, #10
 800c184:	4620      	mov	r0, r4
 800c186:	f000 fa27 	bl	800c5d8 <__multadd>
 800c18a:	9b02      	ldr	r3, [sp, #8]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	4607      	mov	r7, r0
 800c190:	f300 808e 	bgt.w	800c2b0 <_dtoa_r+0x990>
 800c194:	9b06      	ldr	r3, [sp, #24]
 800c196:	2b02      	cmp	r3, #2
 800c198:	dc51      	bgt.n	800c23e <_dtoa_r+0x91e>
 800c19a:	e089      	b.n	800c2b0 <_dtoa_r+0x990>
 800c19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c19e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1a2:	e74b      	b.n	800c03c <_dtoa_r+0x71c>
 800c1a4:	9b03      	ldr	r3, [sp, #12]
 800c1a6:	1e5e      	subs	r6, r3, #1
 800c1a8:	9b07      	ldr	r3, [sp, #28]
 800c1aa:	42b3      	cmp	r3, r6
 800c1ac:	bfbf      	itttt	lt
 800c1ae:	9b07      	ldrlt	r3, [sp, #28]
 800c1b0:	9607      	strlt	r6, [sp, #28]
 800c1b2:	1af2      	sublt	r2, r6, r3
 800c1b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c1b6:	bfb6      	itet	lt
 800c1b8:	189b      	addlt	r3, r3, r2
 800c1ba:	1b9e      	subge	r6, r3, r6
 800c1bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	bfb8      	it	lt
 800c1c2:	2600      	movlt	r6, #0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	bfb7      	itett	lt
 800c1c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c1cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c1d0:	1a9d      	sublt	r5, r3, r2
 800c1d2:	2300      	movlt	r3, #0
 800c1d4:	e734      	b.n	800c040 <_dtoa_r+0x720>
 800c1d6:	9e07      	ldr	r6, [sp, #28]
 800c1d8:	9d04      	ldr	r5, [sp, #16]
 800c1da:	9f08      	ldr	r7, [sp, #32]
 800c1dc:	e73b      	b.n	800c056 <_dtoa_r+0x736>
 800c1de:	9a07      	ldr	r2, [sp, #28]
 800c1e0:	e767      	b.n	800c0b2 <_dtoa_r+0x792>
 800c1e2:	9b06      	ldr	r3, [sp, #24]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	dc18      	bgt.n	800c21a <_dtoa_r+0x8fa>
 800c1e8:	f1ba 0f00 	cmp.w	sl, #0
 800c1ec:	d115      	bne.n	800c21a <_dtoa_r+0x8fa>
 800c1ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1f2:	b993      	cbnz	r3, 800c21a <_dtoa_r+0x8fa>
 800c1f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c1f8:	0d1b      	lsrs	r3, r3, #20
 800c1fa:	051b      	lsls	r3, r3, #20
 800c1fc:	b183      	cbz	r3, 800c220 <_dtoa_r+0x900>
 800c1fe:	9b04      	ldr	r3, [sp, #16]
 800c200:	3301      	adds	r3, #1
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	9b05      	ldr	r3, [sp, #20]
 800c206:	3301      	adds	r3, #1
 800c208:	9305      	str	r3, [sp, #20]
 800c20a:	f04f 0801 	mov.w	r8, #1
 800c20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c210:	2b00      	cmp	r3, #0
 800c212:	f47f af6a 	bne.w	800c0ea <_dtoa_r+0x7ca>
 800c216:	2001      	movs	r0, #1
 800c218:	e76f      	b.n	800c0fa <_dtoa_r+0x7da>
 800c21a:	f04f 0800 	mov.w	r8, #0
 800c21e:	e7f6      	b.n	800c20e <_dtoa_r+0x8ee>
 800c220:	4698      	mov	r8, r3
 800c222:	e7f4      	b.n	800c20e <_dtoa_r+0x8ee>
 800c224:	f43f af7d 	beq.w	800c122 <_dtoa_r+0x802>
 800c228:	4618      	mov	r0, r3
 800c22a:	301c      	adds	r0, #28
 800c22c:	e772      	b.n	800c114 <_dtoa_r+0x7f4>
 800c22e:	9b03      	ldr	r3, [sp, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	dc37      	bgt.n	800c2a4 <_dtoa_r+0x984>
 800c234:	9b06      	ldr	r3, [sp, #24]
 800c236:	2b02      	cmp	r3, #2
 800c238:	dd34      	ble.n	800c2a4 <_dtoa_r+0x984>
 800c23a:	9b03      	ldr	r3, [sp, #12]
 800c23c:	9302      	str	r3, [sp, #8]
 800c23e:	9b02      	ldr	r3, [sp, #8]
 800c240:	b96b      	cbnz	r3, 800c25e <_dtoa_r+0x93e>
 800c242:	4631      	mov	r1, r6
 800c244:	2205      	movs	r2, #5
 800c246:	4620      	mov	r0, r4
 800c248:	f000 f9c6 	bl	800c5d8 <__multadd>
 800c24c:	4601      	mov	r1, r0
 800c24e:	4606      	mov	r6, r0
 800c250:	ee18 0a10 	vmov	r0, s16
 800c254:	f000 fbe0 	bl	800ca18 <__mcmp>
 800c258:	2800      	cmp	r0, #0
 800c25a:	f73f adbb 	bgt.w	800bdd4 <_dtoa_r+0x4b4>
 800c25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c260:	9d01      	ldr	r5, [sp, #4]
 800c262:	43db      	mvns	r3, r3
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	f04f 0800 	mov.w	r8, #0
 800c26a:	4631      	mov	r1, r6
 800c26c:	4620      	mov	r0, r4
 800c26e:	f000 f991 	bl	800c594 <_Bfree>
 800c272:	2f00      	cmp	r7, #0
 800c274:	f43f aea4 	beq.w	800bfc0 <_dtoa_r+0x6a0>
 800c278:	f1b8 0f00 	cmp.w	r8, #0
 800c27c:	d005      	beq.n	800c28a <_dtoa_r+0x96a>
 800c27e:	45b8      	cmp	r8, r7
 800c280:	d003      	beq.n	800c28a <_dtoa_r+0x96a>
 800c282:	4641      	mov	r1, r8
 800c284:	4620      	mov	r0, r4
 800c286:	f000 f985 	bl	800c594 <_Bfree>
 800c28a:	4639      	mov	r1, r7
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 f981 	bl	800c594 <_Bfree>
 800c292:	e695      	b.n	800bfc0 <_dtoa_r+0x6a0>
 800c294:	2600      	movs	r6, #0
 800c296:	4637      	mov	r7, r6
 800c298:	e7e1      	b.n	800c25e <_dtoa_r+0x93e>
 800c29a:	9700      	str	r7, [sp, #0]
 800c29c:	4637      	mov	r7, r6
 800c29e:	e599      	b.n	800bdd4 <_dtoa_r+0x4b4>
 800c2a0:	40240000 	.word	0x40240000
 800c2a4:	9b08      	ldr	r3, [sp, #32]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 80ca 	beq.w	800c440 <_dtoa_r+0xb20>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	9302      	str	r3, [sp, #8]
 800c2b0:	2d00      	cmp	r5, #0
 800c2b2:	dd05      	ble.n	800c2c0 <_dtoa_r+0x9a0>
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	462a      	mov	r2, r5
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f000 fb3d 	bl	800c938 <__lshift>
 800c2be:	4607      	mov	r7, r0
 800c2c0:	f1b8 0f00 	cmp.w	r8, #0
 800c2c4:	d05b      	beq.n	800c37e <_dtoa_r+0xa5e>
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f000 f923 	bl	800c514 <_Balloc>
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	b928      	cbnz	r0, 800c2de <_dtoa_r+0x9be>
 800c2d2:	4b87      	ldr	r3, [pc, #540]	; (800c4f0 <_dtoa_r+0xbd0>)
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c2da:	f7ff bb3b 	b.w	800b954 <_dtoa_r+0x34>
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	3202      	adds	r2, #2
 800c2e2:	0092      	lsls	r2, r2, #2
 800c2e4:	f107 010c 	add.w	r1, r7, #12
 800c2e8:	300c      	adds	r0, #12
 800c2ea:	f7fe fddb 	bl	800aea4 <memcpy>
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 fb20 	bl	800c938 <__lshift>
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	f103 0901 	add.w	r9, r3, #1
 800c2fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c302:	4413      	add	r3, r2
 800c304:	9305      	str	r3, [sp, #20]
 800c306:	f00a 0301 	and.w	r3, sl, #1
 800c30a:	46b8      	mov	r8, r7
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	4607      	mov	r7, r0
 800c310:	4631      	mov	r1, r6
 800c312:	ee18 0a10 	vmov	r0, s16
 800c316:	f7ff fa78 	bl	800b80a <quorem>
 800c31a:	4641      	mov	r1, r8
 800c31c:	9002      	str	r0, [sp, #8]
 800c31e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c322:	ee18 0a10 	vmov	r0, s16
 800c326:	f000 fb77 	bl	800ca18 <__mcmp>
 800c32a:	463a      	mov	r2, r7
 800c32c:	9003      	str	r0, [sp, #12]
 800c32e:	4631      	mov	r1, r6
 800c330:	4620      	mov	r0, r4
 800c332:	f000 fb8d 	bl	800ca50 <__mdiff>
 800c336:	68c2      	ldr	r2, [r0, #12]
 800c338:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c33c:	4605      	mov	r5, r0
 800c33e:	bb02      	cbnz	r2, 800c382 <_dtoa_r+0xa62>
 800c340:	4601      	mov	r1, r0
 800c342:	ee18 0a10 	vmov	r0, s16
 800c346:	f000 fb67 	bl	800ca18 <__mcmp>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4629      	mov	r1, r5
 800c34e:	4620      	mov	r0, r4
 800c350:	9207      	str	r2, [sp, #28]
 800c352:	f000 f91f 	bl	800c594 <_Bfree>
 800c356:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c35a:	ea43 0102 	orr.w	r1, r3, r2
 800c35e:	9b04      	ldr	r3, [sp, #16]
 800c360:	430b      	orrs	r3, r1
 800c362:	464d      	mov	r5, r9
 800c364:	d10f      	bne.n	800c386 <_dtoa_r+0xa66>
 800c366:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c36a:	d02a      	beq.n	800c3c2 <_dtoa_r+0xaa2>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dd02      	ble.n	800c378 <_dtoa_r+0xa58>
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c378:	f88b a000 	strb.w	sl, [fp]
 800c37c:	e775      	b.n	800c26a <_dtoa_r+0x94a>
 800c37e:	4638      	mov	r0, r7
 800c380:	e7ba      	b.n	800c2f8 <_dtoa_r+0x9d8>
 800c382:	2201      	movs	r2, #1
 800c384:	e7e2      	b.n	800c34c <_dtoa_r+0xa2c>
 800c386:	9b03      	ldr	r3, [sp, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	db04      	blt.n	800c396 <_dtoa_r+0xa76>
 800c38c:	9906      	ldr	r1, [sp, #24]
 800c38e:	430b      	orrs	r3, r1
 800c390:	9904      	ldr	r1, [sp, #16]
 800c392:	430b      	orrs	r3, r1
 800c394:	d122      	bne.n	800c3dc <_dtoa_r+0xabc>
 800c396:	2a00      	cmp	r2, #0
 800c398:	ddee      	ble.n	800c378 <_dtoa_r+0xa58>
 800c39a:	ee18 1a10 	vmov	r1, s16
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f000 fac9 	bl	800c938 <__lshift>
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	ee08 0a10 	vmov	s16, r0
 800c3ac:	f000 fb34 	bl	800ca18 <__mcmp>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	dc03      	bgt.n	800c3bc <_dtoa_r+0xa9c>
 800c3b4:	d1e0      	bne.n	800c378 <_dtoa_r+0xa58>
 800c3b6:	f01a 0f01 	tst.w	sl, #1
 800c3ba:	d0dd      	beq.n	800c378 <_dtoa_r+0xa58>
 800c3bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3c0:	d1d7      	bne.n	800c372 <_dtoa_r+0xa52>
 800c3c2:	2339      	movs	r3, #57	; 0x39
 800c3c4:	f88b 3000 	strb.w	r3, [fp]
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	461d      	mov	r5, r3
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3d2:	2a39      	cmp	r2, #57	; 0x39
 800c3d4:	d071      	beq.n	800c4ba <_dtoa_r+0xb9a>
 800c3d6:	3201      	adds	r2, #1
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	e746      	b.n	800c26a <_dtoa_r+0x94a>
 800c3dc:	2a00      	cmp	r2, #0
 800c3de:	dd07      	ble.n	800c3f0 <_dtoa_r+0xad0>
 800c3e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3e4:	d0ed      	beq.n	800c3c2 <_dtoa_r+0xaa2>
 800c3e6:	f10a 0301 	add.w	r3, sl, #1
 800c3ea:	f88b 3000 	strb.w	r3, [fp]
 800c3ee:	e73c      	b.n	800c26a <_dtoa_r+0x94a>
 800c3f0:	9b05      	ldr	r3, [sp, #20]
 800c3f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c3f6:	4599      	cmp	r9, r3
 800c3f8:	d047      	beq.n	800c48a <_dtoa_r+0xb6a>
 800c3fa:	ee18 1a10 	vmov	r1, s16
 800c3fe:	2300      	movs	r3, #0
 800c400:	220a      	movs	r2, #10
 800c402:	4620      	mov	r0, r4
 800c404:	f000 f8e8 	bl	800c5d8 <__multadd>
 800c408:	45b8      	cmp	r8, r7
 800c40a:	ee08 0a10 	vmov	s16, r0
 800c40e:	f04f 0300 	mov.w	r3, #0
 800c412:	f04f 020a 	mov.w	r2, #10
 800c416:	4641      	mov	r1, r8
 800c418:	4620      	mov	r0, r4
 800c41a:	d106      	bne.n	800c42a <_dtoa_r+0xb0a>
 800c41c:	f000 f8dc 	bl	800c5d8 <__multadd>
 800c420:	4680      	mov	r8, r0
 800c422:	4607      	mov	r7, r0
 800c424:	f109 0901 	add.w	r9, r9, #1
 800c428:	e772      	b.n	800c310 <_dtoa_r+0x9f0>
 800c42a:	f000 f8d5 	bl	800c5d8 <__multadd>
 800c42e:	4639      	mov	r1, r7
 800c430:	4680      	mov	r8, r0
 800c432:	2300      	movs	r3, #0
 800c434:	220a      	movs	r2, #10
 800c436:	4620      	mov	r0, r4
 800c438:	f000 f8ce 	bl	800c5d8 <__multadd>
 800c43c:	4607      	mov	r7, r0
 800c43e:	e7f1      	b.n	800c424 <_dtoa_r+0xb04>
 800c440:	9b03      	ldr	r3, [sp, #12]
 800c442:	9302      	str	r3, [sp, #8]
 800c444:	9d01      	ldr	r5, [sp, #4]
 800c446:	ee18 0a10 	vmov	r0, s16
 800c44a:	4631      	mov	r1, r6
 800c44c:	f7ff f9dd 	bl	800b80a <quorem>
 800c450:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c454:	9b01      	ldr	r3, [sp, #4]
 800c456:	f805 ab01 	strb.w	sl, [r5], #1
 800c45a:	1aea      	subs	r2, r5, r3
 800c45c:	9b02      	ldr	r3, [sp, #8]
 800c45e:	4293      	cmp	r3, r2
 800c460:	dd09      	ble.n	800c476 <_dtoa_r+0xb56>
 800c462:	ee18 1a10 	vmov	r1, s16
 800c466:	2300      	movs	r3, #0
 800c468:	220a      	movs	r2, #10
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 f8b4 	bl	800c5d8 <__multadd>
 800c470:	ee08 0a10 	vmov	s16, r0
 800c474:	e7e7      	b.n	800c446 <_dtoa_r+0xb26>
 800c476:	9b02      	ldr	r3, [sp, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	bfc8      	it	gt
 800c47c:	461d      	movgt	r5, r3
 800c47e:	9b01      	ldr	r3, [sp, #4]
 800c480:	bfd8      	it	le
 800c482:	2501      	movle	r5, #1
 800c484:	441d      	add	r5, r3
 800c486:	f04f 0800 	mov.w	r8, #0
 800c48a:	ee18 1a10 	vmov	r1, s16
 800c48e:	2201      	movs	r2, #1
 800c490:	4620      	mov	r0, r4
 800c492:	f000 fa51 	bl	800c938 <__lshift>
 800c496:	4631      	mov	r1, r6
 800c498:	ee08 0a10 	vmov	s16, r0
 800c49c:	f000 fabc 	bl	800ca18 <__mcmp>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	dc91      	bgt.n	800c3c8 <_dtoa_r+0xaa8>
 800c4a4:	d102      	bne.n	800c4ac <_dtoa_r+0xb8c>
 800c4a6:	f01a 0f01 	tst.w	sl, #1
 800c4aa:	d18d      	bne.n	800c3c8 <_dtoa_r+0xaa8>
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	461d      	mov	r5, r3
 800c4b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4b4:	2a30      	cmp	r2, #48	; 0x30
 800c4b6:	d0fa      	beq.n	800c4ae <_dtoa_r+0xb8e>
 800c4b8:	e6d7      	b.n	800c26a <_dtoa_r+0x94a>
 800c4ba:	9a01      	ldr	r2, [sp, #4]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d184      	bne.n	800c3ca <_dtoa_r+0xaaa>
 800c4c0:	9b00      	ldr	r3, [sp, #0]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	2331      	movs	r3, #49	; 0x31
 800c4c8:	7013      	strb	r3, [r2, #0]
 800c4ca:	e6ce      	b.n	800c26a <_dtoa_r+0x94a>
 800c4cc:	4b09      	ldr	r3, [pc, #36]	; (800c4f4 <_dtoa_r+0xbd4>)
 800c4ce:	f7ff ba95 	b.w	800b9fc <_dtoa_r+0xdc>
 800c4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f47f aa6e 	bne.w	800b9b6 <_dtoa_r+0x96>
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <_dtoa_r+0xbd8>)
 800c4dc:	f7ff ba8e 	b.w	800b9fc <_dtoa_r+0xdc>
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	dcae      	bgt.n	800c444 <_dtoa_r+0xb24>
 800c4e6:	9b06      	ldr	r3, [sp, #24]
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	f73f aea8 	bgt.w	800c23e <_dtoa_r+0x91e>
 800c4ee:	e7a9      	b.n	800c444 <_dtoa_r+0xb24>
 800c4f0:	08010763 	.word	0x08010763
 800c4f4:	080106c0 	.word	0x080106c0
 800c4f8:	080106e4 	.word	0x080106e4

0800c4fc <_localeconv_r>:
 800c4fc:	4800      	ldr	r0, [pc, #0]	; (800c500 <_localeconv_r+0x4>)
 800c4fe:	4770      	bx	lr
 800c500:	200001b0 	.word	0x200001b0

0800c504 <malloc>:
 800c504:	4b02      	ldr	r3, [pc, #8]	; (800c510 <malloc+0xc>)
 800c506:	4601      	mov	r1, r0
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f000 bc09 	b.w	800cd20 <_malloc_r>
 800c50e:	bf00      	nop
 800c510:	2000005c 	.word	0x2000005c

0800c514 <_Balloc>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c518:	4604      	mov	r4, r0
 800c51a:	460d      	mov	r5, r1
 800c51c:	b976      	cbnz	r6, 800c53c <_Balloc+0x28>
 800c51e:	2010      	movs	r0, #16
 800c520:	f7ff fff0 	bl	800c504 <malloc>
 800c524:	4602      	mov	r2, r0
 800c526:	6260      	str	r0, [r4, #36]	; 0x24
 800c528:	b920      	cbnz	r0, 800c534 <_Balloc+0x20>
 800c52a:	4b18      	ldr	r3, [pc, #96]	; (800c58c <_Balloc+0x78>)
 800c52c:	4818      	ldr	r0, [pc, #96]	; (800c590 <_Balloc+0x7c>)
 800c52e:	2166      	movs	r1, #102	; 0x66
 800c530:	f000 fdd6 	bl	800d0e0 <__assert_func>
 800c534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c538:	6006      	str	r6, [r0, #0]
 800c53a:	60c6      	str	r6, [r0, #12]
 800c53c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c53e:	68f3      	ldr	r3, [r6, #12]
 800c540:	b183      	cbz	r3, 800c564 <_Balloc+0x50>
 800c542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c54a:	b9b8      	cbnz	r0, 800c57c <_Balloc+0x68>
 800c54c:	2101      	movs	r1, #1
 800c54e:	fa01 f605 	lsl.w	r6, r1, r5
 800c552:	1d72      	adds	r2, r6, #5
 800c554:	0092      	lsls	r2, r2, #2
 800c556:	4620      	mov	r0, r4
 800c558:	f000 fb60 	bl	800cc1c <_calloc_r>
 800c55c:	b160      	cbz	r0, 800c578 <_Balloc+0x64>
 800c55e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c562:	e00e      	b.n	800c582 <_Balloc+0x6e>
 800c564:	2221      	movs	r2, #33	; 0x21
 800c566:	2104      	movs	r1, #4
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 fb57 	bl	800cc1c <_calloc_r>
 800c56e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c570:	60f0      	str	r0, [r6, #12]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e4      	bne.n	800c542 <_Balloc+0x2e>
 800c578:	2000      	movs	r0, #0
 800c57a:	bd70      	pop	{r4, r5, r6, pc}
 800c57c:	6802      	ldr	r2, [r0, #0]
 800c57e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c582:	2300      	movs	r3, #0
 800c584:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c588:	e7f7      	b.n	800c57a <_Balloc+0x66>
 800c58a:	bf00      	nop
 800c58c:	080106f1 	.word	0x080106f1
 800c590:	08010774 	.word	0x08010774

0800c594 <_Bfree>:
 800c594:	b570      	push	{r4, r5, r6, lr}
 800c596:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c598:	4605      	mov	r5, r0
 800c59a:	460c      	mov	r4, r1
 800c59c:	b976      	cbnz	r6, 800c5bc <_Bfree+0x28>
 800c59e:	2010      	movs	r0, #16
 800c5a0:	f7ff ffb0 	bl	800c504 <malloc>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	6268      	str	r0, [r5, #36]	; 0x24
 800c5a8:	b920      	cbnz	r0, 800c5b4 <_Bfree+0x20>
 800c5aa:	4b09      	ldr	r3, [pc, #36]	; (800c5d0 <_Bfree+0x3c>)
 800c5ac:	4809      	ldr	r0, [pc, #36]	; (800c5d4 <_Bfree+0x40>)
 800c5ae:	218a      	movs	r1, #138	; 0x8a
 800c5b0:	f000 fd96 	bl	800d0e0 <__assert_func>
 800c5b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5b8:	6006      	str	r6, [r0, #0]
 800c5ba:	60c6      	str	r6, [r0, #12]
 800c5bc:	b13c      	cbz	r4, 800c5ce <_Bfree+0x3a>
 800c5be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c5c0:	6862      	ldr	r2, [r4, #4]
 800c5c2:	68db      	ldr	r3, [r3, #12]
 800c5c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5c8:	6021      	str	r1, [r4, #0]
 800c5ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}
 800c5d0:	080106f1 	.word	0x080106f1
 800c5d4:	08010774 	.word	0x08010774

0800c5d8 <__multadd>:
 800c5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5dc:	690d      	ldr	r5, [r1, #16]
 800c5de:	4607      	mov	r7, r0
 800c5e0:	460c      	mov	r4, r1
 800c5e2:	461e      	mov	r6, r3
 800c5e4:	f101 0c14 	add.w	ip, r1, #20
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	f8dc 3000 	ldr.w	r3, [ip]
 800c5ee:	b299      	uxth	r1, r3
 800c5f0:	fb02 6101 	mla	r1, r2, r1, r6
 800c5f4:	0c1e      	lsrs	r6, r3, #16
 800c5f6:	0c0b      	lsrs	r3, r1, #16
 800c5f8:	fb02 3306 	mla	r3, r2, r6, r3
 800c5fc:	b289      	uxth	r1, r1
 800c5fe:	3001      	adds	r0, #1
 800c600:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c604:	4285      	cmp	r5, r0
 800c606:	f84c 1b04 	str.w	r1, [ip], #4
 800c60a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c60e:	dcec      	bgt.n	800c5ea <__multadd+0x12>
 800c610:	b30e      	cbz	r6, 800c656 <__multadd+0x7e>
 800c612:	68a3      	ldr	r3, [r4, #8]
 800c614:	42ab      	cmp	r3, r5
 800c616:	dc19      	bgt.n	800c64c <__multadd+0x74>
 800c618:	6861      	ldr	r1, [r4, #4]
 800c61a:	4638      	mov	r0, r7
 800c61c:	3101      	adds	r1, #1
 800c61e:	f7ff ff79 	bl	800c514 <_Balloc>
 800c622:	4680      	mov	r8, r0
 800c624:	b928      	cbnz	r0, 800c632 <__multadd+0x5a>
 800c626:	4602      	mov	r2, r0
 800c628:	4b0c      	ldr	r3, [pc, #48]	; (800c65c <__multadd+0x84>)
 800c62a:	480d      	ldr	r0, [pc, #52]	; (800c660 <__multadd+0x88>)
 800c62c:	21b5      	movs	r1, #181	; 0xb5
 800c62e:	f000 fd57 	bl	800d0e0 <__assert_func>
 800c632:	6922      	ldr	r2, [r4, #16]
 800c634:	3202      	adds	r2, #2
 800c636:	f104 010c 	add.w	r1, r4, #12
 800c63a:	0092      	lsls	r2, r2, #2
 800c63c:	300c      	adds	r0, #12
 800c63e:	f7fe fc31 	bl	800aea4 <memcpy>
 800c642:	4621      	mov	r1, r4
 800c644:	4638      	mov	r0, r7
 800c646:	f7ff ffa5 	bl	800c594 <_Bfree>
 800c64a:	4644      	mov	r4, r8
 800c64c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c650:	3501      	adds	r5, #1
 800c652:	615e      	str	r6, [r3, #20]
 800c654:	6125      	str	r5, [r4, #16]
 800c656:	4620      	mov	r0, r4
 800c658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65c:	08010763 	.word	0x08010763
 800c660:	08010774 	.word	0x08010774

0800c664 <__hi0bits>:
 800c664:	0c03      	lsrs	r3, r0, #16
 800c666:	041b      	lsls	r3, r3, #16
 800c668:	b9d3      	cbnz	r3, 800c6a0 <__hi0bits+0x3c>
 800c66a:	0400      	lsls	r0, r0, #16
 800c66c:	2310      	movs	r3, #16
 800c66e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c672:	bf04      	itt	eq
 800c674:	0200      	lsleq	r0, r0, #8
 800c676:	3308      	addeq	r3, #8
 800c678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c67c:	bf04      	itt	eq
 800c67e:	0100      	lsleq	r0, r0, #4
 800c680:	3304      	addeq	r3, #4
 800c682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c686:	bf04      	itt	eq
 800c688:	0080      	lsleq	r0, r0, #2
 800c68a:	3302      	addeq	r3, #2
 800c68c:	2800      	cmp	r0, #0
 800c68e:	db05      	blt.n	800c69c <__hi0bits+0x38>
 800c690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c694:	f103 0301 	add.w	r3, r3, #1
 800c698:	bf08      	it	eq
 800c69a:	2320      	moveq	r3, #32
 800c69c:	4618      	mov	r0, r3
 800c69e:	4770      	bx	lr
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	e7e4      	b.n	800c66e <__hi0bits+0xa>

0800c6a4 <__lo0bits>:
 800c6a4:	6803      	ldr	r3, [r0, #0]
 800c6a6:	f013 0207 	ands.w	r2, r3, #7
 800c6aa:	4601      	mov	r1, r0
 800c6ac:	d00b      	beq.n	800c6c6 <__lo0bits+0x22>
 800c6ae:	07da      	lsls	r2, r3, #31
 800c6b0:	d423      	bmi.n	800c6fa <__lo0bits+0x56>
 800c6b2:	0798      	lsls	r0, r3, #30
 800c6b4:	bf49      	itett	mi
 800c6b6:	085b      	lsrmi	r3, r3, #1
 800c6b8:	089b      	lsrpl	r3, r3, #2
 800c6ba:	2001      	movmi	r0, #1
 800c6bc:	600b      	strmi	r3, [r1, #0]
 800c6be:	bf5c      	itt	pl
 800c6c0:	600b      	strpl	r3, [r1, #0]
 800c6c2:	2002      	movpl	r0, #2
 800c6c4:	4770      	bx	lr
 800c6c6:	b298      	uxth	r0, r3
 800c6c8:	b9a8      	cbnz	r0, 800c6f6 <__lo0bits+0x52>
 800c6ca:	0c1b      	lsrs	r3, r3, #16
 800c6cc:	2010      	movs	r0, #16
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	b90a      	cbnz	r2, 800c6d6 <__lo0bits+0x32>
 800c6d2:	3008      	adds	r0, #8
 800c6d4:	0a1b      	lsrs	r3, r3, #8
 800c6d6:	071a      	lsls	r2, r3, #28
 800c6d8:	bf04      	itt	eq
 800c6da:	091b      	lsreq	r3, r3, #4
 800c6dc:	3004      	addeq	r0, #4
 800c6de:	079a      	lsls	r2, r3, #30
 800c6e0:	bf04      	itt	eq
 800c6e2:	089b      	lsreq	r3, r3, #2
 800c6e4:	3002      	addeq	r0, #2
 800c6e6:	07da      	lsls	r2, r3, #31
 800c6e8:	d403      	bmi.n	800c6f2 <__lo0bits+0x4e>
 800c6ea:	085b      	lsrs	r3, r3, #1
 800c6ec:	f100 0001 	add.w	r0, r0, #1
 800c6f0:	d005      	beq.n	800c6fe <__lo0bits+0x5a>
 800c6f2:	600b      	str	r3, [r1, #0]
 800c6f4:	4770      	bx	lr
 800c6f6:	4610      	mov	r0, r2
 800c6f8:	e7e9      	b.n	800c6ce <__lo0bits+0x2a>
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	4770      	bx	lr
 800c6fe:	2020      	movs	r0, #32
 800c700:	4770      	bx	lr
	...

0800c704 <__i2b>:
 800c704:	b510      	push	{r4, lr}
 800c706:	460c      	mov	r4, r1
 800c708:	2101      	movs	r1, #1
 800c70a:	f7ff ff03 	bl	800c514 <_Balloc>
 800c70e:	4602      	mov	r2, r0
 800c710:	b928      	cbnz	r0, 800c71e <__i2b+0x1a>
 800c712:	4b05      	ldr	r3, [pc, #20]	; (800c728 <__i2b+0x24>)
 800c714:	4805      	ldr	r0, [pc, #20]	; (800c72c <__i2b+0x28>)
 800c716:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c71a:	f000 fce1 	bl	800d0e0 <__assert_func>
 800c71e:	2301      	movs	r3, #1
 800c720:	6144      	str	r4, [r0, #20]
 800c722:	6103      	str	r3, [r0, #16]
 800c724:	bd10      	pop	{r4, pc}
 800c726:	bf00      	nop
 800c728:	08010763 	.word	0x08010763
 800c72c:	08010774 	.word	0x08010774

0800c730 <__multiply>:
 800c730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c734:	4691      	mov	r9, r2
 800c736:	690a      	ldr	r2, [r1, #16]
 800c738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	bfb8      	it	lt
 800c740:	460b      	movlt	r3, r1
 800c742:	460c      	mov	r4, r1
 800c744:	bfbc      	itt	lt
 800c746:	464c      	movlt	r4, r9
 800c748:	4699      	movlt	r9, r3
 800c74a:	6927      	ldr	r7, [r4, #16]
 800c74c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c750:	68a3      	ldr	r3, [r4, #8]
 800c752:	6861      	ldr	r1, [r4, #4]
 800c754:	eb07 060a 	add.w	r6, r7, sl
 800c758:	42b3      	cmp	r3, r6
 800c75a:	b085      	sub	sp, #20
 800c75c:	bfb8      	it	lt
 800c75e:	3101      	addlt	r1, #1
 800c760:	f7ff fed8 	bl	800c514 <_Balloc>
 800c764:	b930      	cbnz	r0, 800c774 <__multiply+0x44>
 800c766:	4602      	mov	r2, r0
 800c768:	4b44      	ldr	r3, [pc, #272]	; (800c87c <__multiply+0x14c>)
 800c76a:	4845      	ldr	r0, [pc, #276]	; (800c880 <__multiply+0x150>)
 800c76c:	f240 115d 	movw	r1, #349	; 0x15d
 800c770:	f000 fcb6 	bl	800d0e0 <__assert_func>
 800c774:	f100 0514 	add.w	r5, r0, #20
 800c778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c77c:	462b      	mov	r3, r5
 800c77e:	2200      	movs	r2, #0
 800c780:	4543      	cmp	r3, r8
 800c782:	d321      	bcc.n	800c7c8 <__multiply+0x98>
 800c784:	f104 0314 	add.w	r3, r4, #20
 800c788:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c78c:	f109 0314 	add.w	r3, r9, #20
 800c790:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c794:	9202      	str	r2, [sp, #8]
 800c796:	1b3a      	subs	r2, r7, r4
 800c798:	3a15      	subs	r2, #21
 800c79a:	f022 0203 	bic.w	r2, r2, #3
 800c79e:	3204      	adds	r2, #4
 800c7a0:	f104 0115 	add.w	r1, r4, #21
 800c7a4:	428f      	cmp	r7, r1
 800c7a6:	bf38      	it	cc
 800c7a8:	2204      	movcc	r2, #4
 800c7aa:	9201      	str	r2, [sp, #4]
 800c7ac:	9a02      	ldr	r2, [sp, #8]
 800c7ae:	9303      	str	r3, [sp, #12]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d80c      	bhi.n	800c7ce <__multiply+0x9e>
 800c7b4:	2e00      	cmp	r6, #0
 800c7b6:	dd03      	ble.n	800c7c0 <__multiply+0x90>
 800c7b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d05a      	beq.n	800c876 <__multiply+0x146>
 800c7c0:	6106      	str	r6, [r0, #16]
 800c7c2:	b005      	add	sp, #20
 800c7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c8:	f843 2b04 	str.w	r2, [r3], #4
 800c7cc:	e7d8      	b.n	800c780 <__multiply+0x50>
 800c7ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7d2:	f1ba 0f00 	cmp.w	sl, #0
 800c7d6:	d024      	beq.n	800c822 <__multiply+0xf2>
 800c7d8:	f104 0e14 	add.w	lr, r4, #20
 800c7dc:	46a9      	mov	r9, r5
 800c7de:	f04f 0c00 	mov.w	ip, #0
 800c7e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c7e6:	f8d9 1000 	ldr.w	r1, [r9]
 800c7ea:	fa1f fb82 	uxth.w	fp, r2
 800c7ee:	b289      	uxth	r1, r1
 800c7f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c7f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c7f8:	f8d9 2000 	ldr.w	r2, [r9]
 800c7fc:	4461      	add	r1, ip
 800c7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c802:	fb0a c20b 	mla	r2, sl, fp, ip
 800c806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c80a:	b289      	uxth	r1, r1
 800c80c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c810:	4577      	cmp	r7, lr
 800c812:	f849 1b04 	str.w	r1, [r9], #4
 800c816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c81a:	d8e2      	bhi.n	800c7e2 <__multiply+0xb2>
 800c81c:	9a01      	ldr	r2, [sp, #4]
 800c81e:	f845 c002 	str.w	ip, [r5, r2]
 800c822:	9a03      	ldr	r2, [sp, #12]
 800c824:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c828:	3304      	adds	r3, #4
 800c82a:	f1b9 0f00 	cmp.w	r9, #0
 800c82e:	d020      	beq.n	800c872 <__multiply+0x142>
 800c830:	6829      	ldr	r1, [r5, #0]
 800c832:	f104 0c14 	add.w	ip, r4, #20
 800c836:	46ae      	mov	lr, r5
 800c838:	f04f 0a00 	mov.w	sl, #0
 800c83c:	f8bc b000 	ldrh.w	fp, [ip]
 800c840:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c844:	fb09 220b 	mla	r2, r9, fp, r2
 800c848:	4492      	add	sl, r2
 800c84a:	b289      	uxth	r1, r1
 800c84c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c850:	f84e 1b04 	str.w	r1, [lr], #4
 800c854:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c858:	f8be 1000 	ldrh.w	r1, [lr]
 800c85c:	0c12      	lsrs	r2, r2, #16
 800c85e:	fb09 1102 	mla	r1, r9, r2, r1
 800c862:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c866:	4567      	cmp	r7, ip
 800c868:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c86c:	d8e6      	bhi.n	800c83c <__multiply+0x10c>
 800c86e:	9a01      	ldr	r2, [sp, #4]
 800c870:	50a9      	str	r1, [r5, r2]
 800c872:	3504      	adds	r5, #4
 800c874:	e79a      	b.n	800c7ac <__multiply+0x7c>
 800c876:	3e01      	subs	r6, #1
 800c878:	e79c      	b.n	800c7b4 <__multiply+0x84>
 800c87a:	bf00      	nop
 800c87c:	08010763 	.word	0x08010763
 800c880:	08010774 	.word	0x08010774

0800c884 <__pow5mult>:
 800c884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c888:	4615      	mov	r5, r2
 800c88a:	f012 0203 	ands.w	r2, r2, #3
 800c88e:	4606      	mov	r6, r0
 800c890:	460f      	mov	r7, r1
 800c892:	d007      	beq.n	800c8a4 <__pow5mult+0x20>
 800c894:	4c25      	ldr	r4, [pc, #148]	; (800c92c <__pow5mult+0xa8>)
 800c896:	3a01      	subs	r2, #1
 800c898:	2300      	movs	r3, #0
 800c89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c89e:	f7ff fe9b 	bl	800c5d8 <__multadd>
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	10ad      	asrs	r5, r5, #2
 800c8a6:	d03d      	beq.n	800c924 <__pow5mult+0xa0>
 800c8a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c8aa:	b97c      	cbnz	r4, 800c8cc <__pow5mult+0x48>
 800c8ac:	2010      	movs	r0, #16
 800c8ae:	f7ff fe29 	bl	800c504 <malloc>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	6270      	str	r0, [r6, #36]	; 0x24
 800c8b6:	b928      	cbnz	r0, 800c8c4 <__pow5mult+0x40>
 800c8b8:	4b1d      	ldr	r3, [pc, #116]	; (800c930 <__pow5mult+0xac>)
 800c8ba:	481e      	ldr	r0, [pc, #120]	; (800c934 <__pow5mult+0xb0>)
 800c8bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8c0:	f000 fc0e 	bl	800d0e0 <__assert_func>
 800c8c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8c8:	6004      	str	r4, [r0, #0]
 800c8ca:	60c4      	str	r4, [r0, #12]
 800c8cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8d4:	b94c      	cbnz	r4, 800c8ea <__pow5mult+0x66>
 800c8d6:	f240 2171 	movw	r1, #625	; 0x271
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff ff12 	bl	800c704 <__i2b>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	6003      	str	r3, [r0, #0]
 800c8ea:	f04f 0900 	mov.w	r9, #0
 800c8ee:	07eb      	lsls	r3, r5, #31
 800c8f0:	d50a      	bpl.n	800c908 <__pow5mult+0x84>
 800c8f2:	4639      	mov	r1, r7
 800c8f4:	4622      	mov	r2, r4
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f7ff ff1a 	bl	800c730 <__multiply>
 800c8fc:	4639      	mov	r1, r7
 800c8fe:	4680      	mov	r8, r0
 800c900:	4630      	mov	r0, r6
 800c902:	f7ff fe47 	bl	800c594 <_Bfree>
 800c906:	4647      	mov	r7, r8
 800c908:	106d      	asrs	r5, r5, #1
 800c90a:	d00b      	beq.n	800c924 <__pow5mult+0xa0>
 800c90c:	6820      	ldr	r0, [r4, #0]
 800c90e:	b938      	cbnz	r0, 800c920 <__pow5mult+0x9c>
 800c910:	4622      	mov	r2, r4
 800c912:	4621      	mov	r1, r4
 800c914:	4630      	mov	r0, r6
 800c916:	f7ff ff0b 	bl	800c730 <__multiply>
 800c91a:	6020      	str	r0, [r4, #0]
 800c91c:	f8c0 9000 	str.w	r9, [r0]
 800c920:	4604      	mov	r4, r0
 800c922:	e7e4      	b.n	800c8ee <__pow5mult+0x6a>
 800c924:	4638      	mov	r0, r7
 800c926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c92a:	bf00      	nop
 800c92c:	080108c0 	.word	0x080108c0
 800c930:	080106f1 	.word	0x080106f1
 800c934:	08010774 	.word	0x08010774

0800c938 <__lshift>:
 800c938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c93c:	460c      	mov	r4, r1
 800c93e:	6849      	ldr	r1, [r1, #4]
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	4607      	mov	r7, r0
 800c94a:	4691      	mov	r9, r2
 800c94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c950:	f108 0601 	add.w	r6, r8, #1
 800c954:	42b3      	cmp	r3, r6
 800c956:	db0b      	blt.n	800c970 <__lshift+0x38>
 800c958:	4638      	mov	r0, r7
 800c95a:	f7ff fddb 	bl	800c514 <_Balloc>
 800c95e:	4605      	mov	r5, r0
 800c960:	b948      	cbnz	r0, 800c976 <__lshift+0x3e>
 800c962:	4602      	mov	r2, r0
 800c964:	4b2a      	ldr	r3, [pc, #168]	; (800ca10 <__lshift+0xd8>)
 800c966:	482b      	ldr	r0, [pc, #172]	; (800ca14 <__lshift+0xdc>)
 800c968:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c96c:	f000 fbb8 	bl	800d0e0 <__assert_func>
 800c970:	3101      	adds	r1, #1
 800c972:	005b      	lsls	r3, r3, #1
 800c974:	e7ee      	b.n	800c954 <__lshift+0x1c>
 800c976:	2300      	movs	r3, #0
 800c978:	f100 0114 	add.w	r1, r0, #20
 800c97c:	f100 0210 	add.w	r2, r0, #16
 800c980:	4618      	mov	r0, r3
 800c982:	4553      	cmp	r3, sl
 800c984:	db37      	blt.n	800c9f6 <__lshift+0xbe>
 800c986:	6920      	ldr	r0, [r4, #16]
 800c988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c98c:	f104 0314 	add.w	r3, r4, #20
 800c990:	f019 091f 	ands.w	r9, r9, #31
 800c994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c998:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c99c:	d02f      	beq.n	800c9fe <__lshift+0xc6>
 800c99e:	f1c9 0e20 	rsb	lr, r9, #32
 800c9a2:	468a      	mov	sl, r1
 800c9a4:	f04f 0c00 	mov.w	ip, #0
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	fa02 f209 	lsl.w	r2, r2, r9
 800c9ae:	ea42 020c 	orr.w	r2, r2, ip
 800c9b2:	f84a 2b04 	str.w	r2, [sl], #4
 800c9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ba:	4298      	cmp	r0, r3
 800c9bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c9c0:	d8f2      	bhi.n	800c9a8 <__lshift+0x70>
 800c9c2:	1b03      	subs	r3, r0, r4
 800c9c4:	3b15      	subs	r3, #21
 800c9c6:	f023 0303 	bic.w	r3, r3, #3
 800c9ca:	3304      	adds	r3, #4
 800c9cc:	f104 0215 	add.w	r2, r4, #21
 800c9d0:	4290      	cmp	r0, r2
 800c9d2:	bf38      	it	cc
 800c9d4:	2304      	movcc	r3, #4
 800c9d6:	f841 c003 	str.w	ip, [r1, r3]
 800c9da:	f1bc 0f00 	cmp.w	ip, #0
 800c9de:	d001      	beq.n	800c9e4 <__lshift+0xac>
 800c9e0:	f108 0602 	add.w	r6, r8, #2
 800c9e4:	3e01      	subs	r6, #1
 800c9e6:	4638      	mov	r0, r7
 800c9e8:	612e      	str	r6, [r5, #16]
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	f7ff fdd2 	bl	800c594 <_Bfree>
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	e7c1      	b.n	800c982 <__lshift+0x4a>
 800c9fe:	3904      	subs	r1, #4
 800ca00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca08:	4298      	cmp	r0, r3
 800ca0a:	d8f9      	bhi.n	800ca00 <__lshift+0xc8>
 800ca0c:	e7ea      	b.n	800c9e4 <__lshift+0xac>
 800ca0e:	bf00      	nop
 800ca10:	08010763 	.word	0x08010763
 800ca14:	08010774 	.word	0x08010774

0800ca18 <__mcmp>:
 800ca18:	b530      	push	{r4, r5, lr}
 800ca1a:	6902      	ldr	r2, [r0, #16]
 800ca1c:	690c      	ldr	r4, [r1, #16]
 800ca1e:	1b12      	subs	r2, r2, r4
 800ca20:	d10e      	bne.n	800ca40 <__mcmp+0x28>
 800ca22:	f100 0314 	add.w	r3, r0, #20
 800ca26:	3114      	adds	r1, #20
 800ca28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca38:	42a5      	cmp	r5, r4
 800ca3a:	d003      	beq.n	800ca44 <__mcmp+0x2c>
 800ca3c:	d305      	bcc.n	800ca4a <__mcmp+0x32>
 800ca3e:	2201      	movs	r2, #1
 800ca40:	4610      	mov	r0, r2
 800ca42:	bd30      	pop	{r4, r5, pc}
 800ca44:	4283      	cmp	r3, r0
 800ca46:	d3f3      	bcc.n	800ca30 <__mcmp+0x18>
 800ca48:	e7fa      	b.n	800ca40 <__mcmp+0x28>
 800ca4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca4e:	e7f7      	b.n	800ca40 <__mcmp+0x28>

0800ca50 <__mdiff>:
 800ca50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca54:	460c      	mov	r4, r1
 800ca56:	4606      	mov	r6, r0
 800ca58:	4611      	mov	r1, r2
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	4690      	mov	r8, r2
 800ca5e:	f7ff ffdb 	bl	800ca18 <__mcmp>
 800ca62:	1e05      	subs	r5, r0, #0
 800ca64:	d110      	bne.n	800ca88 <__mdiff+0x38>
 800ca66:	4629      	mov	r1, r5
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7ff fd53 	bl	800c514 <_Balloc>
 800ca6e:	b930      	cbnz	r0, 800ca7e <__mdiff+0x2e>
 800ca70:	4b3a      	ldr	r3, [pc, #232]	; (800cb5c <__mdiff+0x10c>)
 800ca72:	4602      	mov	r2, r0
 800ca74:	f240 2132 	movw	r1, #562	; 0x232
 800ca78:	4839      	ldr	r0, [pc, #228]	; (800cb60 <__mdiff+0x110>)
 800ca7a:	f000 fb31 	bl	800d0e0 <__assert_func>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca88:	bfa4      	itt	ge
 800ca8a:	4643      	movge	r3, r8
 800ca8c:	46a0      	movge	r8, r4
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca94:	bfa6      	itte	ge
 800ca96:	461c      	movge	r4, r3
 800ca98:	2500      	movge	r5, #0
 800ca9a:	2501      	movlt	r5, #1
 800ca9c:	f7ff fd3a 	bl	800c514 <_Balloc>
 800caa0:	b920      	cbnz	r0, 800caac <__mdiff+0x5c>
 800caa2:	4b2e      	ldr	r3, [pc, #184]	; (800cb5c <__mdiff+0x10c>)
 800caa4:	4602      	mov	r2, r0
 800caa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800caaa:	e7e5      	b.n	800ca78 <__mdiff+0x28>
 800caac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cab0:	6926      	ldr	r6, [r4, #16]
 800cab2:	60c5      	str	r5, [r0, #12]
 800cab4:	f104 0914 	add.w	r9, r4, #20
 800cab8:	f108 0514 	add.w	r5, r8, #20
 800cabc:	f100 0e14 	add.w	lr, r0, #20
 800cac0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cac4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cac8:	f108 0210 	add.w	r2, r8, #16
 800cacc:	46f2      	mov	sl, lr
 800cace:	2100      	movs	r1, #0
 800cad0:	f859 3b04 	ldr.w	r3, [r9], #4
 800cad4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cad8:	fa1f f883 	uxth.w	r8, r3
 800cadc:	fa11 f18b 	uxtah	r1, r1, fp
 800cae0:	0c1b      	lsrs	r3, r3, #16
 800cae2:	eba1 0808 	sub.w	r8, r1, r8
 800cae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800caea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800caee:	fa1f f888 	uxth.w	r8, r8
 800caf2:	1419      	asrs	r1, r3, #16
 800caf4:	454e      	cmp	r6, r9
 800caf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cafa:	f84a 3b04 	str.w	r3, [sl], #4
 800cafe:	d8e7      	bhi.n	800cad0 <__mdiff+0x80>
 800cb00:	1b33      	subs	r3, r6, r4
 800cb02:	3b15      	subs	r3, #21
 800cb04:	f023 0303 	bic.w	r3, r3, #3
 800cb08:	3304      	adds	r3, #4
 800cb0a:	3415      	adds	r4, #21
 800cb0c:	42a6      	cmp	r6, r4
 800cb0e:	bf38      	it	cc
 800cb10:	2304      	movcc	r3, #4
 800cb12:	441d      	add	r5, r3
 800cb14:	4473      	add	r3, lr
 800cb16:	469e      	mov	lr, r3
 800cb18:	462e      	mov	r6, r5
 800cb1a:	4566      	cmp	r6, ip
 800cb1c:	d30e      	bcc.n	800cb3c <__mdiff+0xec>
 800cb1e:	f10c 0203 	add.w	r2, ip, #3
 800cb22:	1b52      	subs	r2, r2, r5
 800cb24:	f022 0203 	bic.w	r2, r2, #3
 800cb28:	3d03      	subs	r5, #3
 800cb2a:	45ac      	cmp	ip, r5
 800cb2c:	bf38      	it	cc
 800cb2e:	2200      	movcc	r2, #0
 800cb30:	441a      	add	r2, r3
 800cb32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb36:	b17b      	cbz	r3, 800cb58 <__mdiff+0x108>
 800cb38:	6107      	str	r7, [r0, #16]
 800cb3a:	e7a3      	b.n	800ca84 <__mdiff+0x34>
 800cb3c:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb40:	fa11 f288 	uxtah	r2, r1, r8
 800cb44:	1414      	asrs	r4, r2, #16
 800cb46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb4a:	b292      	uxth	r2, r2
 800cb4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb50:	f84e 2b04 	str.w	r2, [lr], #4
 800cb54:	1421      	asrs	r1, r4, #16
 800cb56:	e7e0      	b.n	800cb1a <__mdiff+0xca>
 800cb58:	3f01      	subs	r7, #1
 800cb5a:	e7ea      	b.n	800cb32 <__mdiff+0xe2>
 800cb5c:	08010763 	.word	0x08010763
 800cb60:	08010774 	.word	0x08010774

0800cb64 <__d2b>:
 800cb64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb68:	4689      	mov	r9, r1
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	ec57 6b10 	vmov	r6, r7, d0
 800cb70:	4690      	mov	r8, r2
 800cb72:	f7ff fccf 	bl	800c514 <_Balloc>
 800cb76:	4604      	mov	r4, r0
 800cb78:	b930      	cbnz	r0, 800cb88 <__d2b+0x24>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	4b25      	ldr	r3, [pc, #148]	; (800cc14 <__d2b+0xb0>)
 800cb7e:	4826      	ldr	r0, [pc, #152]	; (800cc18 <__d2b+0xb4>)
 800cb80:	f240 310a 	movw	r1, #778	; 0x30a
 800cb84:	f000 faac 	bl	800d0e0 <__assert_func>
 800cb88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cb8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb90:	bb35      	cbnz	r5, 800cbe0 <__d2b+0x7c>
 800cb92:	2e00      	cmp	r6, #0
 800cb94:	9301      	str	r3, [sp, #4]
 800cb96:	d028      	beq.n	800cbea <__d2b+0x86>
 800cb98:	4668      	mov	r0, sp
 800cb9a:	9600      	str	r6, [sp, #0]
 800cb9c:	f7ff fd82 	bl	800c6a4 <__lo0bits>
 800cba0:	9900      	ldr	r1, [sp, #0]
 800cba2:	b300      	cbz	r0, 800cbe6 <__d2b+0x82>
 800cba4:	9a01      	ldr	r2, [sp, #4]
 800cba6:	f1c0 0320 	rsb	r3, r0, #32
 800cbaa:	fa02 f303 	lsl.w	r3, r2, r3
 800cbae:	430b      	orrs	r3, r1
 800cbb0:	40c2      	lsrs	r2, r0
 800cbb2:	6163      	str	r3, [r4, #20]
 800cbb4:	9201      	str	r2, [sp, #4]
 800cbb6:	9b01      	ldr	r3, [sp, #4]
 800cbb8:	61a3      	str	r3, [r4, #24]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	bf14      	ite	ne
 800cbbe:	2202      	movne	r2, #2
 800cbc0:	2201      	moveq	r2, #1
 800cbc2:	6122      	str	r2, [r4, #16]
 800cbc4:	b1d5      	cbz	r5, 800cbfc <__d2b+0x98>
 800cbc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cbca:	4405      	add	r5, r0
 800cbcc:	f8c9 5000 	str.w	r5, [r9]
 800cbd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbd4:	f8c8 0000 	str.w	r0, [r8]
 800cbd8:	4620      	mov	r0, r4
 800cbda:	b003      	add	sp, #12
 800cbdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cbe4:	e7d5      	b.n	800cb92 <__d2b+0x2e>
 800cbe6:	6161      	str	r1, [r4, #20]
 800cbe8:	e7e5      	b.n	800cbb6 <__d2b+0x52>
 800cbea:	a801      	add	r0, sp, #4
 800cbec:	f7ff fd5a 	bl	800c6a4 <__lo0bits>
 800cbf0:	9b01      	ldr	r3, [sp, #4]
 800cbf2:	6163      	str	r3, [r4, #20]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	6122      	str	r2, [r4, #16]
 800cbf8:	3020      	adds	r0, #32
 800cbfa:	e7e3      	b.n	800cbc4 <__d2b+0x60>
 800cbfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc04:	f8c9 0000 	str.w	r0, [r9]
 800cc08:	6918      	ldr	r0, [r3, #16]
 800cc0a:	f7ff fd2b 	bl	800c664 <__hi0bits>
 800cc0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc12:	e7df      	b.n	800cbd4 <__d2b+0x70>
 800cc14:	08010763 	.word	0x08010763
 800cc18:	08010774 	.word	0x08010774

0800cc1c <_calloc_r>:
 800cc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc1e:	fba1 2402 	umull	r2, r4, r1, r2
 800cc22:	b94c      	cbnz	r4, 800cc38 <_calloc_r+0x1c>
 800cc24:	4611      	mov	r1, r2
 800cc26:	9201      	str	r2, [sp, #4]
 800cc28:	f000 f87a 	bl	800cd20 <_malloc_r>
 800cc2c:	9a01      	ldr	r2, [sp, #4]
 800cc2e:	4605      	mov	r5, r0
 800cc30:	b930      	cbnz	r0, 800cc40 <_calloc_r+0x24>
 800cc32:	4628      	mov	r0, r5
 800cc34:	b003      	add	sp, #12
 800cc36:	bd30      	pop	{r4, r5, pc}
 800cc38:	220c      	movs	r2, #12
 800cc3a:	6002      	str	r2, [r0, #0]
 800cc3c:	2500      	movs	r5, #0
 800cc3e:	e7f8      	b.n	800cc32 <_calloc_r+0x16>
 800cc40:	4621      	mov	r1, r4
 800cc42:	f7fe f93d 	bl	800aec0 <memset>
 800cc46:	e7f4      	b.n	800cc32 <_calloc_r+0x16>

0800cc48 <_free_r>:
 800cc48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc4a:	2900      	cmp	r1, #0
 800cc4c:	d044      	beq.n	800ccd8 <_free_r+0x90>
 800cc4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc52:	9001      	str	r0, [sp, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	f1a1 0404 	sub.w	r4, r1, #4
 800cc5a:	bfb8      	it	lt
 800cc5c:	18e4      	addlt	r4, r4, r3
 800cc5e:	f000 fa9b 	bl	800d198 <__malloc_lock>
 800cc62:	4a1e      	ldr	r2, [pc, #120]	; (800ccdc <_free_r+0x94>)
 800cc64:	9801      	ldr	r0, [sp, #4]
 800cc66:	6813      	ldr	r3, [r2, #0]
 800cc68:	b933      	cbnz	r3, 800cc78 <_free_r+0x30>
 800cc6a:	6063      	str	r3, [r4, #4]
 800cc6c:	6014      	str	r4, [r2, #0]
 800cc6e:	b003      	add	sp, #12
 800cc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc74:	f000 ba96 	b.w	800d1a4 <__malloc_unlock>
 800cc78:	42a3      	cmp	r3, r4
 800cc7a:	d908      	bls.n	800cc8e <_free_r+0x46>
 800cc7c:	6825      	ldr	r5, [r4, #0]
 800cc7e:	1961      	adds	r1, r4, r5
 800cc80:	428b      	cmp	r3, r1
 800cc82:	bf01      	itttt	eq
 800cc84:	6819      	ldreq	r1, [r3, #0]
 800cc86:	685b      	ldreq	r3, [r3, #4]
 800cc88:	1949      	addeq	r1, r1, r5
 800cc8a:	6021      	streq	r1, [r4, #0]
 800cc8c:	e7ed      	b.n	800cc6a <_free_r+0x22>
 800cc8e:	461a      	mov	r2, r3
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	b10b      	cbz	r3, 800cc98 <_free_r+0x50>
 800cc94:	42a3      	cmp	r3, r4
 800cc96:	d9fa      	bls.n	800cc8e <_free_r+0x46>
 800cc98:	6811      	ldr	r1, [r2, #0]
 800cc9a:	1855      	adds	r5, r2, r1
 800cc9c:	42a5      	cmp	r5, r4
 800cc9e:	d10b      	bne.n	800ccb8 <_free_r+0x70>
 800cca0:	6824      	ldr	r4, [r4, #0]
 800cca2:	4421      	add	r1, r4
 800cca4:	1854      	adds	r4, r2, r1
 800cca6:	42a3      	cmp	r3, r4
 800cca8:	6011      	str	r1, [r2, #0]
 800ccaa:	d1e0      	bne.n	800cc6e <_free_r+0x26>
 800ccac:	681c      	ldr	r4, [r3, #0]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	6053      	str	r3, [r2, #4]
 800ccb2:	4421      	add	r1, r4
 800ccb4:	6011      	str	r1, [r2, #0]
 800ccb6:	e7da      	b.n	800cc6e <_free_r+0x26>
 800ccb8:	d902      	bls.n	800ccc0 <_free_r+0x78>
 800ccba:	230c      	movs	r3, #12
 800ccbc:	6003      	str	r3, [r0, #0]
 800ccbe:	e7d6      	b.n	800cc6e <_free_r+0x26>
 800ccc0:	6825      	ldr	r5, [r4, #0]
 800ccc2:	1961      	adds	r1, r4, r5
 800ccc4:	428b      	cmp	r3, r1
 800ccc6:	bf04      	itt	eq
 800ccc8:	6819      	ldreq	r1, [r3, #0]
 800ccca:	685b      	ldreq	r3, [r3, #4]
 800cccc:	6063      	str	r3, [r4, #4]
 800ccce:	bf04      	itt	eq
 800ccd0:	1949      	addeq	r1, r1, r5
 800ccd2:	6021      	streq	r1, [r4, #0]
 800ccd4:	6054      	str	r4, [r2, #4]
 800ccd6:	e7ca      	b.n	800cc6e <_free_r+0x26>
 800ccd8:	b003      	add	sp, #12
 800ccda:	bd30      	pop	{r4, r5, pc}
 800ccdc:	20000f54 	.word	0x20000f54

0800cce0 <sbrk_aligned>:
 800cce0:	b570      	push	{r4, r5, r6, lr}
 800cce2:	4e0e      	ldr	r6, [pc, #56]	; (800cd1c <sbrk_aligned+0x3c>)
 800cce4:	460c      	mov	r4, r1
 800cce6:	6831      	ldr	r1, [r6, #0]
 800cce8:	4605      	mov	r5, r0
 800ccea:	b911      	cbnz	r1, 800ccf2 <sbrk_aligned+0x12>
 800ccec:	f000 f9e8 	bl	800d0c0 <_sbrk_r>
 800ccf0:	6030      	str	r0, [r6, #0]
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	f000 f9e3 	bl	800d0c0 <_sbrk_r>
 800ccfa:	1c43      	adds	r3, r0, #1
 800ccfc:	d00a      	beq.n	800cd14 <sbrk_aligned+0x34>
 800ccfe:	1cc4      	adds	r4, r0, #3
 800cd00:	f024 0403 	bic.w	r4, r4, #3
 800cd04:	42a0      	cmp	r0, r4
 800cd06:	d007      	beq.n	800cd18 <sbrk_aligned+0x38>
 800cd08:	1a21      	subs	r1, r4, r0
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	f000 f9d8 	bl	800d0c0 <_sbrk_r>
 800cd10:	3001      	adds	r0, #1
 800cd12:	d101      	bne.n	800cd18 <sbrk_aligned+0x38>
 800cd14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cd18:	4620      	mov	r0, r4
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	20000f58 	.word	0x20000f58

0800cd20 <_malloc_r>:
 800cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd24:	1ccd      	adds	r5, r1, #3
 800cd26:	f025 0503 	bic.w	r5, r5, #3
 800cd2a:	3508      	adds	r5, #8
 800cd2c:	2d0c      	cmp	r5, #12
 800cd2e:	bf38      	it	cc
 800cd30:	250c      	movcc	r5, #12
 800cd32:	2d00      	cmp	r5, #0
 800cd34:	4607      	mov	r7, r0
 800cd36:	db01      	blt.n	800cd3c <_malloc_r+0x1c>
 800cd38:	42a9      	cmp	r1, r5
 800cd3a:	d905      	bls.n	800cd48 <_malloc_r+0x28>
 800cd3c:	230c      	movs	r3, #12
 800cd3e:	603b      	str	r3, [r7, #0]
 800cd40:	2600      	movs	r6, #0
 800cd42:	4630      	mov	r0, r6
 800cd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd48:	4e2e      	ldr	r6, [pc, #184]	; (800ce04 <_malloc_r+0xe4>)
 800cd4a:	f000 fa25 	bl	800d198 <__malloc_lock>
 800cd4e:	6833      	ldr	r3, [r6, #0]
 800cd50:	461c      	mov	r4, r3
 800cd52:	bb34      	cbnz	r4, 800cda2 <_malloc_r+0x82>
 800cd54:	4629      	mov	r1, r5
 800cd56:	4638      	mov	r0, r7
 800cd58:	f7ff ffc2 	bl	800cce0 <sbrk_aligned>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	4604      	mov	r4, r0
 800cd60:	d14d      	bne.n	800cdfe <_malloc_r+0xde>
 800cd62:	6834      	ldr	r4, [r6, #0]
 800cd64:	4626      	mov	r6, r4
 800cd66:	2e00      	cmp	r6, #0
 800cd68:	d140      	bne.n	800cdec <_malloc_r+0xcc>
 800cd6a:	6823      	ldr	r3, [r4, #0]
 800cd6c:	4631      	mov	r1, r6
 800cd6e:	4638      	mov	r0, r7
 800cd70:	eb04 0803 	add.w	r8, r4, r3
 800cd74:	f000 f9a4 	bl	800d0c0 <_sbrk_r>
 800cd78:	4580      	cmp	r8, r0
 800cd7a:	d13a      	bne.n	800cdf2 <_malloc_r+0xd2>
 800cd7c:	6821      	ldr	r1, [r4, #0]
 800cd7e:	3503      	adds	r5, #3
 800cd80:	1a6d      	subs	r5, r5, r1
 800cd82:	f025 0503 	bic.w	r5, r5, #3
 800cd86:	3508      	adds	r5, #8
 800cd88:	2d0c      	cmp	r5, #12
 800cd8a:	bf38      	it	cc
 800cd8c:	250c      	movcc	r5, #12
 800cd8e:	4629      	mov	r1, r5
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7ff ffa5 	bl	800cce0 <sbrk_aligned>
 800cd96:	3001      	adds	r0, #1
 800cd98:	d02b      	beq.n	800cdf2 <_malloc_r+0xd2>
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	442b      	add	r3, r5
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	e00e      	b.n	800cdc0 <_malloc_r+0xa0>
 800cda2:	6822      	ldr	r2, [r4, #0]
 800cda4:	1b52      	subs	r2, r2, r5
 800cda6:	d41e      	bmi.n	800cde6 <_malloc_r+0xc6>
 800cda8:	2a0b      	cmp	r2, #11
 800cdaa:	d916      	bls.n	800cdda <_malloc_r+0xba>
 800cdac:	1961      	adds	r1, r4, r5
 800cdae:	42a3      	cmp	r3, r4
 800cdb0:	6025      	str	r5, [r4, #0]
 800cdb2:	bf18      	it	ne
 800cdb4:	6059      	strne	r1, [r3, #4]
 800cdb6:	6863      	ldr	r3, [r4, #4]
 800cdb8:	bf08      	it	eq
 800cdba:	6031      	streq	r1, [r6, #0]
 800cdbc:	5162      	str	r2, [r4, r5]
 800cdbe:	604b      	str	r3, [r1, #4]
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	f104 060b 	add.w	r6, r4, #11
 800cdc6:	f000 f9ed 	bl	800d1a4 <__malloc_unlock>
 800cdca:	f026 0607 	bic.w	r6, r6, #7
 800cdce:	1d23      	adds	r3, r4, #4
 800cdd0:	1af2      	subs	r2, r6, r3
 800cdd2:	d0b6      	beq.n	800cd42 <_malloc_r+0x22>
 800cdd4:	1b9b      	subs	r3, r3, r6
 800cdd6:	50a3      	str	r3, [r4, r2]
 800cdd8:	e7b3      	b.n	800cd42 <_malloc_r+0x22>
 800cdda:	6862      	ldr	r2, [r4, #4]
 800cddc:	42a3      	cmp	r3, r4
 800cdde:	bf0c      	ite	eq
 800cde0:	6032      	streq	r2, [r6, #0]
 800cde2:	605a      	strne	r2, [r3, #4]
 800cde4:	e7ec      	b.n	800cdc0 <_malloc_r+0xa0>
 800cde6:	4623      	mov	r3, r4
 800cde8:	6864      	ldr	r4, [r4, #4]
 800cdea:	e7b2      	b.n	800cd52 <_malloc_r+0x32>
 800cdec:	4634      	mov	r4, r6
 800cdee:	6876      	ldr	r6, [r6, #4]
 800cdf0:	e7b9      	b.n	800cd66 <_malloc_r+0x46>
 800cdf2:	230c      	movs	r3, #12
 800cdf4:	603b      	str	r3, [r7, #0]
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f000 f9d4 	bl	800d1a4 <__malloc_unlock>
 800cdfc:	e7a1      	b.n	800cd42 <_malloc_r+0x22>
 800cdfe:	6025      	str	r5, [r4, #0]
 800ce00:	e7de      	b.n	800cdc0 <_malloc_r+0xa0>
 800ce02:	bf00      	nop
 800ce04:	20000f54 	.word	0x20000f54

0800ce08 <__ssputs_r>:
 800ce08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce0c:	688e      	ldr	r6, [r1, #8]
 800ce0e:	429e      	cmp	r6, r3
 800ce10:	4682      	mov	sl, r0
 800ce12:	460c      	mov	r4, r1
 800ce14:	4690      	mov	r8, r2
 800ce16:	461f      	mov	r7, r3
 800ce18:	d838      	bhi.n	800ce8c <__ssputs_r+0x84>
 800ce1a:	898a      	ldrh	r2, [r1, #12]
 800ce1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce20:	d032      	beq.n	800ce88 <__ssputs_r+0x80>
 800ce22:	6825      	ldr	r5, [r4, #0]
 800ce24:	6909      	ldr	r1, [r1, #16]
 800ce26:	eba5 0901 	sub.w	r9, r5, r1
 800ce2a:	6965      	ldr	r5, [r4, #20]
 800ce2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce34:	3301      	adds	r3, #1
 800ce36:	444b      	add	r3, r9
 800ce38:	106d      	asrs	r5, r5, #1
 800ce3a:	429d      	cmp	r5, r3
 800ce3c:	bf38      	it	cc
 800ce3e:	461d      	movcc	r5, r3
 800ce40:	0553      	lsls	r3, r2, #21
 800ce42:	d531      	bpl.n	800cea8 <__ssputs_r+0xa0>
 800ce44:	4629      	mov	r1, r5
 800ce46:	f7ff ff6b 	bl	800cd20 <_malloc_r>
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	b950      	cbnz	r0, 800ce64 <__ssputs_r+0x5c>
 800ce4e:	230c      	movs	r3, #12
 800ce50:	f8ca 3000 	str.w	r3, [sl]
 800ce54:	89a3      	ldrh	r3, [r4, #12]
 800ce56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce64:	6921      	ldr	r1, [r4, #16]
 800ce66:	464a      	mov	r2, r9
 800ce68:	f7fe f81c 	bl	800aea4 <memcpy>
 800ce6c:	89a3      	ldrh	r3, [r4, #12]
 800ce6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce76:	81a3      	strh	r3, [r4, #12]
 800ce78:	6126      	str	r6, [r4, #16]
 800ce7a:	6165      	str	r5, [r4, #20]
 800ce7c:	444e      	add	r6, r9
 800ce7e:	eba5 0509 	sub.w	r5, r5, r9
 800ce82:	6026      	str	r6, [r4, #0]
 800ce84:	60a5      	str	r5, [r4, #8]
 800ce86:	463e      	mov	r6, r7
 800ce88:	42be      	cmp	r6, r7
 800ce8a:	d900      	bls.n	800ce8e <__ssputs_r+0x86>
 800ce8c:	463e      	mov	r6, r7
 800ce8e:	6820      	ldr	r0, [r4, #0]
 800ce90:	4632      	mov	r2, r6
 800ce92:	4641      	mov	r1, r8
 800ce94:	f000 f966 	bl	800d164 <memmove>
 800ce98:	68a3      	ldr	r3, [r4, #8]
 800ce9a:	1b9b      	subs	r3, r3, r6
 800ce9c:	60a3      	str	r3, [r4, #8]
 800ce9e:	6823      	ldr	r3, [r4, #0]
 800cea0:	4433      	add	r3, r6
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	2000      	movs	r0, #0
 800cea6:	e7db      	b.n	800ce60 <__ssputs_r+0x58>
 800cea8:	462a      	mov	r2, r5
 800ceaa:	f000 f981 	bl	800d1b0 <_realloc_r>
 800ceae:	4606      	mov	r6, r0
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d1e1      	bne.n	800ce78 <__ssputs_r+0x70>
 800ceb4:	6921      	ldr	r1, [r4, #16]
 800ceb6:	4650      	mov	r0, sl
 800ceb8:	f7ff fec6 	bl	800cc48 <_free_r>
 800cebc:	e7c7      	b.n	800ce4e <__ssputs_r+0x46>
	...

0800cec0 <_svfiprintf_r>:
 800cec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec4:	4698      	mov	r8, r3
 800cec6:	898b      	ldrh	r3, [r1, #12]
 800cec8:	061b      	lsls	r3, r3, #24
 800ceca:	b09d      	sub	sp, #116	; 0x74
 800cecc:	4607      	mov	r7, r0
 800cece:	460d      	mov	r5, r1
 800ced0:	4614      	mov	r4, r2
 800ced2:	d50e      	bpl.n	800cef2 <_svfiprintf_r+0x32>
 800ced4:	690b      	ldr	r3, [r1, #16]
 800ced6:	b963      	cbnz	r3, 800cef2 <_svfiprintf_r+0x32>
 800ced8:	2140      	movs	r1, #64	; 0x40
 800ceda:	f7ff ff21 	bl	800cd20 <_malloc_r>
 800cede:	6028      	str	r0, [r5, #0]
 800cee0:	6128      	str	r0, [r5, #16]
 800cee2:	b920      	cbnz	r0, 800ceee <_svfiprintf_r+0x2e>
 800cee4:	230c      	movs	r3, #12
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceec:	e0d1      	b.n	800d092 <_svfiprintf_r+0x1d2>
 800ceee:	2340      	movs	r3, #64	; 0x40
 800cef0:	616b      	str	r3, [r5, #20]
 800cef2:	2300      	movs	r3, #0
 800cef4:	9309      	str	r3, [sp, #36]	; 0x24
 800cef6:	2320      	movs	r3, #32
 800cef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cefc:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf00:	2330      	movs	r3, #48	; 0x30
 800cf02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0ac <_svfiprintf_r+0x1ec>
 800cf06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf0a:	f04f 0901 	mov.w	r9, #1
 800cf0e:	4623      	mov	r3, r4
 800cf10:	469a      	mov	sl, r3
 800cf12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf16:	b10a      	cbz	r2, 800cf1c <_svfiprintf_r+0x5c>
 800cf18:	2a25      	cmp	r2, #37	; 0x25
 800cf1a:	d1f9      	bne.n	800cf10 <_svfiprintf_r+0x50>
 800cf1c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf20:	d00b      	beq.n	800cf3a <_svfiprintf_r+0x7a>
 800cf22:	465b      	mov	r3, fp
 800cf24:	4622      	mov	r2, r4
 800cf26:	4629      	mov	r1, r5
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff ff6d 	bl	800ce08 <__ssputs_r>
 800cf2e:	3001      	adds	r0, #1
 800cf30:	f000 80aa 	beq.w	800d088 <_svfiprintf_r+0x1c8>
 800cf34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf36:	445a      	add	r2, fp
 800cf38:	9209      	str	r2, [sp, #36]	; 0x24
 800cf3a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f000 80a2 	beq.w	800d088 <_svfiprintf_r+0x1c8>
 800cf44:	2300      	movs	r3, #0
 800cf46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf4e:	f10a 0a01 	add.w	sl, sl, #1
 800cf52:	9304      	str	r3, [sp, #16]
 800cf54:	9307      	str	r3, [sp, #28]
 800cf56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf5a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf5c:	4654      	mov	r4, sl
 800cf5e:	2205      	movs	r2, #5
 800cf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf64:	4851      	ldr	r0, [pc, #324]	; (800d0ac <_svfiprintf_r+0x1ec>)
 800cf66:	f7f3 f93b 	bl	80001e0 <memchr>
 800cf6a:	9a04      	ldr	r2, [sp, #16]
 800cf6c:	b9d8      	cbnz	r0, 800cfa6 <_svfiprintf_r+0xe6>
 800cf6e:	06d0      	lsls	r0, r2, #27
 800cf70:	bf44      	itt	mi
 800cf72:	2320      	movmi	r3, #32
 800cf74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf78:	0711      	lsls	r1, r2, #28
 800cf7a:	bf44      	itt	mi
 800cf7c:	232b      	movmi	r3, #43	; 0x2b
 800cf7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf82:	f89a 3000 	ldrb.w	r3, [sl]
 800cf86:	2b2a      	cmp	r3, #42	; 0x2a
 800cf88:	d015      	beq.n	800cfb6 <_svfiprintf_r+0xf6>
 800cf8a:	9a07      	ldr	r2, [sp, #28]
 800cf8c:	4654      	mov	r4, sl
 800cf8e:	2000      	movs	r0, #0
 800cf90:	f04f 0c0a 	mov.w	ip, #10
 800cf94:	4621      	mov	r1, r4
 800cf96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf9a:	3b30      	subs	r3, #48	; 0x30
 800cf9c:	2b09      	cmp	r3, #9
 800cf9e:	d94e      	bls.n	800d03e <_svfiprintf_r+0x17e>
 800cfa0:	b1b0      	cbz	r0, 800cfd0 <_svfiprintf_r+0x110>
 800cfa2:	9207      	str	r2, [sp, #28]
 800cfa4:	e014      	b.n	800cfd0 <_svfiprintf_r+0x110>
 800cfa6:	eba0 0308 	sub.w	r3, r0, r8
 800cfaa:	fa09 f303 	lsl.w	r3, r9, r3
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	46a2      	mov	sl, r4
 800cfb4:	e7d2      	b.n	800cf5c <_svfiprintf_r+0x9c>
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	1d19      	adds	r1, r3, #4
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	9103      	str	r1, [sp, #12]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	bfbb      	ittet	lt
 800cfc2:	425b      	neglt	r3, r3
 800cfc4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc8:	9307      	strge	r3, [sp, #28]
 800cfca:	9307      	strlt	r3, [sp, #28]
 800cfcc:	bfb8      	it	lt
 800cfce:	9204      	strlt	r2, [sp, #16]
 800cfd0:	7823      	ldrb	r3, [r4, #0]
 800cfd2:	2b2e      	cmp	r3, #46	; 0x2e
 800cfd4:	d10c      	bne.n	800cff0 <_svfiprintf_r+0x130>
 800cfd6:	7863      	ldrb	r3, [r4, #1]
 800cfd8:	2b2a      	cmp	r3, #42	; 0x2a
 800cfda:	d135      	bne.n	800d048 <_svfiprintf_r+0x188>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	1d1a      	adds	r2, r3, #4
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	9203      	str	r2, [sp, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	bfb8      	it	lt
 800cfe8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cfec:	3402      	adds	r4, #2
 800cfee:	9305      	str	r3, [sp, #20]
 800cff0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0bc <_svfiprintf_r+0x1fc>
 800cff4:	7821      	ldrb	r1, [r4, #0]
 800cff6:	2203      	movs	r2, #3
 800cff8:	4650      	mov	r0, sl
 800cffa:	f7f3 f8f1 	bl	80001e0 <memchr>
 800cffe:	b140      	cbz	r0, 800d012 <_svfiprintf_r+0x152>
 800d000:	2340      	movs	r3, #64	; 0x40
 800d002:	eba0 000a 	sub.w	r0, r0, sl
 800d006:	fa03 f000 	lsl.w	r0, r3, r0
 800d00a:	9b04      	ldr	r3, [sp, #16]
 800d00c:	4303      	orrs	r3, r0
 800d00e:	3401      	adds	r4, #1
 800d010:	9304      	str	r3, [sp, #16]
 800d012:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d016:	4826      	ldr	r0, [pc, #152]	; (800d0b0 <_svfiprintf_r+0x1f0>)
 800d018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d01c:	2206      	movs	r2, #6
 800d01e:	f7f3 f8df 	bl	80001e0 <memchr>
 800d022:	2800      	cmp	r0, #0
 800d024:	d038      	beq.n	800d098 <_svfiprintf_r+0x1d8>
 800d026:	4b23      	ldr	r3, [pc, #140]	; (800d0b4 <_svfiprintf_r+0x1f4>)
 800d028:	bb1b      	cbnz	r3, 800d072 <_svfiprintf_r+0x1b2>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	3307      	adds	r3, #7
 800d02e:	f023 0307 	bic.w	r3, r3, #7
 800d032:	3308      	adds	r3, #8
 800d034:	9303      	str	r3, [sp, #12]
 800d036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d038:	4433      	add	r3, r6
 800d03a:	9309      	str	r3, [sp, #36]	; 0x24
 800d03c:	e767      	b.n	800cf0e <_svfiprintf_r+0x4e>
 800d03e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d042:	460c      	mov	r4, r1
 800d044:	2001      	movs	r0, #1
 800d046:	e7a5      	b.n	800cf94 <_svfiprintf_r+0xd4>
 800d048:	2300      	movs	r3, #0
 800d04a:	3401      	adds	r4, #1
 800d04c:	9305      	str	r3, [sp, #20]
 800d04e:	4619      	mov	r1, r3
 800d050:	f04f 0c0a 	mov.w	ip, #10
 800d054:	4620      	mov	r0, r4
 800d056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d05a:	3a30      	subs	r2, #48	; 0x30
 800d05c:	2a09      	cmp	r2, #9
 800d05e:	d903      	bls.n	800d068 <_svfiprintf_r+0x1a8>
 800d060:	2b00      	cmp	r3, #0
 800d062:	d0c5      	beq.n	800cff0 <_svfiprintf_r+0x130>
 800d064:	9105      	str	r1, [sp, #20]
 800d066:	e7c3      	b.n	800cff0 <_svfiprintf_r+0x130>
 800d068:	fb0c 2101 	mla	r1, ip, r1, r2
 800d06c:	4604      	mov	r4, r0
 800d06e:	2301      	movs	r3, #1
 800d070:	e7f0      	b.n	800d054 <_svfiprintf_r+0x194>
 800d072:	ab03      	add	r3, sp, #12
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	462a      	mov	r2, r5
 800d078:	4b0f      	ldr	r3, [pc, #60]	; (800d0b8 <_svfiprintf_r+0x1f8>)
 800d07a:	a904      	add	r1, sp, #16
 800d07c:	4638      	mov	r0, r7
 800d07e:	f7fd ffc7 	bl	800b010 <_printf_float>
 800d082:	1c42      	adds	r2, r0, #1
 800d084:	4606      	mov	r6, r0
 800d086:	d1d6      	bne.n	800d036 <_svfiprintf_r+0x176>
 800d088:	89ab      	ldrh	r3, [r5, #12]
 800d08a:	065b      	lsls	r3, r3, #25
 800d08c:	f53f af2c 	bmi.w	800cee8 <_svfiprintf_r+0x28>
 800d090:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d092:	b01d      	add	sp, #116	; 0x74
 800d094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d098:	ab03      	add	r3, sp, #12
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	462a      	mov	r2, r5
 800d09e:	4b06      	ldr	r3, [pc, #24]	; (800d0b8 <_svfiprintf_r+0x1f8>)
 800d0a0:	a904      	add	r1, sp, #16
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f7fe fa58 	bl	800b558 <_printf_i>
 800d0a8:	e7eb      	b.n	800d082 <_svfiprintf_r+0x1c2>
 800d0aa:	bf00      	nop
 800d0ac:	080108cc 	.word	0x080108cc
 800d0b0:	080108d6 	.word	0x080108d6
 800d0b4:	0800b011 	.word	0x0800b011
 800d0b8:	0800ce09 	.word	0x0800ce09
 800d0bc:	080108d2 	.word	0x080108d2

0800d0c0 <_sbrk_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4d06      	ldr	r5, [pc, #24]	; (800d0dc <_sbrk_r+0x1c>)
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	602b      	str	r3, [r5, #0]
 800d0cc:	f7f9 fc7a 	bl	80069c4 <_sbrk>
 800d0d0:	1c43      	adds	r3, r0, #1
 800d0d2:	d102      	bne.n	800d0da <_sbrk_r+0x1a>
 800d0d4:	682b      	ldr	r3, [r5, #0]
 800d0d6:	b103      	cbz	r3, 800d0da <_sbrk_r+0x1a>
 800d0d8:	6023      	str	r3, [r4, #0]
 800d0da:	bd38      	pop	{r3, r4, r5, pc}
 800d0dc:	20000f5c 	.word	0x20000f5c

0800d0e0 <__assert_func>:
 800d0e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0e2:	4614      	mov	r4, r2
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4b09      	ldr	r3, [pc, #36]	; (800d10c <__assert_func+0x2c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	68d8      	ldr	r0, [r3, #12]
 800d0ee:	b14c      	cbz	r4, 800d104 <__assert_func+0x24>
 800d0f0:	4b07      	ldr	r3, [pc, #28]	; (800d110 <__assert_func+0x30>)
 800d0f2:	9100      	str	r1, [sp, #0]
 800d0f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0f8:	4906      	ldr	r1, [pc, #24]	; (800d114 <__assert_func+0x34>)
 800d0fa:	462b      	mov	r3, r5
 800d0fc:	f000 f80e 	bl	800d11c <fiprintf>
 800d100:	f000 faac 	bl	800d65c <abort>
 800d104:	4b04      	ldr	r3, [pc, #16]	; (800d118 <__assert_func+0x38>)
 800d106:	461c      	mov	r4, r3
 800d108:	e7f3      	b.n	800d0f2 <__assert_func+0x12>
 800d10a:	bf00      	nop
 800d10c:	2000005c 	.word	0x2000005c
 800d110:	080108dd 	.word	0x080108dd
 800d114:	080108ea 	.word	0x080108ea
 800d118:	08010918 	.word	0x08010918

0800d11c <fiprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b503      	push	{r0, r1, lr}
 800d120:	4601      	mov	r1, r0
 800d122:	ab03      	add	r3, sp, #12
 800d124:	4805      	ldr	r0, [pc, #20]	; (800d13c <fiprintf+0x20>)
 800d126:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f000 f897 	bl	800d260 <_vfiprintf_r>
 800d132:	b002      	add	sp, #8
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b003      	add	sp, #12
 800d13a:	4770      	bx	lr
 800d13c:	2000005c 	.word	0x2000005c

0800d140 <__ascii_mbtowc>:
 800d140:	b082      	sub	sp, #8
 800d142:	b901      	cbnz	r1, 800d146 <__ascii_mbtowc+0x6>
 800d144:	a901      	add	r1, sp, #4
 800d146:	b142      	cbz	r2, 800d15a <__ascii_mbtowc+0x1a>
 800d148:	b14b      	cbz	r3, 800d15e <__ascii_mbtowc+0x1e>
 800d14a:	7813      	ldrb	r3, [r2, #0]
 800d14c:	600b      	str	r3, [r1, #0]
 800d14e:	7812      	ldrb	r2, [r2, #0]
 800d150:	1e10      	subs	r0, r2, #0
 800d152:	bf18      	it	ne
 800d154:	2001      	movne	r0, #1
 800d156:	b002      	add	sp, #8
 800d158:	4770      	bx	lr
 800d15a:	4610      	mov	r0, r2
 800d15c:	e7fb      	b.n	800d156 <__ascii_mbtowc+0x16>
 800d15e:	f06f 0001 	mvn.w	r0, #1
 800d162:	e7f8      	b.n	800d156 <__ascii_mbtowc+0x16>

0800d164 <memmove>:
 800d164:	4288      	cmp	r0, r1
 800d166:	b510      	push	{r4, lr}
 800d168:	eb01 0402 	add.w	r4, r1, r2
 800d16c:	d902      	bls.n	800d174 <memmove+0x10>
 800d16e:	4284      	cmp	r4, r0
 800d170:	4623      	mov	r3, r4
 800d172:	d807      	bhi.n	800d184 <memmove+0x20>
 800d174:	1e43      	subs	r3, r0, #1
 800d176:	42a1      	cmp	r1, r4
 800d178:	d008      	beq.n	800d18c <memmove+0x28>
 800d17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d17e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d182:	e7f8      	b.n	800d176 <memmove+0x12>
 800d184:	4402      	add	r2, r0
 800d186:	4601      	mov	r1, r0
 800d188:	428a      	cmp	r2, r1
 800d18a:	d100      	bne.n	800d18e <memmove+0x2a>
 800d18c:	bd10      	pop	{r4, pc}
 800d18e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d192:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d196:	e7f7      	b.n	800d188 <memmove+0x24>

0800d198 <__malloc_lock>:
 800d198:	4801      	ldr	r0, [pc, #4]	; (800d1a0 <__malloc_lock+0x8>)
 800d19a:	f000 bc1f 	b.w	800d9dc <__retarget_lock_acquire_recursive>
 800d19e:	bf00      	nop
 800d1a0:	20000f60 	.word	0x20000f60

0800d1a4 <__malloc_unlock>:
 800d1a4:	4801      	ldr	r0, [pc, #4]	; (800d1ac <__malloc_unlock+0x8>)
 800d1a6:	f000 bc1a 	b.w	800d9de <__retarget_lock_release_recursive>
 800d1aa:	bf00      	nop
 800d1ac:	20000f60 	.word	0x20000f60

0800d1b0 <_realloc_r>:
 800d1b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b4:	4680      	mov	r8, r0
 800d1b6:	4614      	mov	r4, r2
 800d1b8:	460e      	mov	r6, r1
 800d1ba:	b921      	cbnz	r1, 800d1c6 <_realloc_r+0x16>
 800d1bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	f7ff bdad 	b.w	800cd20 <_malloc_r>
 800d1c6:	b92a      	cbnz	r2, 800d1d4 <_realloc_r+0x24>
 800d1c8:	f7ff fd3e 	bl	800cc48 <_free_r>
 800d1cc:	4625      	mov	r5, r4
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1d4:	f000 fc6a 	bl	800daac <_malloc_usable_size_r>
 800d1d8:	4284      	cmp	r4, r0
 800d1da:	4607      	mov	r7, r0
 800d1dc:	d802      	bhi.n	800d1e4 <_realloc_r+0x34>
 800d1de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d1e2:	d812      	bhi.n	800d20a <_realloc_r+0x5a>
 800d1e4:	4621      	mov	r1, r4
 800d1e6:	4640      	mov	r0, r8
 800d1e8:	f7ff fd9a 	bl	800cd20 <_malloc_r>
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	d0ed      	beq.n	800d1ce <_realloc_r+0x1e>
 800d1f2:	42bc      	cmp	r4, r7
 800d1f4:	4622      	mov	r2, r4
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	bf28      	it	cs
 800d1fa:	463a      	movcs	r2, r7
 800d1fc:	f7fd fe52 	bl	800aea4 <memcpy>
 800d200:	4631      	mov	r1, r6
 800d202:	4640      	mov	r0, r8
 800d204:	f7ff fd20 	bl	800cc48 <_free_r>
 800d208:	e7e1      	b.n	800d1ce <_realloc_r+0x1e>
 800d20a:	4635      	mov	r5, r6
 800d20c:	e7df      	b.n	800d1ce <_realloc_r+0x1e>

0800d20e <__sfputc_r>:
 800d20e:	6893      	ldr	r3, [r2, #8]
 800d210:	3b01      	subs	r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	b410      	push	{r4}
 800d216:	6093      	str	r3, [r2, #8]
 800d218:	da08      	bge.n	800d22c <__sfputc_r+0x1e>
 800d21a:	6994      	ldr	r4, [r2, #24]
 800d21c:	42a3      	cmp	r3, r4
 800d21e:	db01      	blt.n	800d224 <__sfputc_r+0x16>
 800d220:	290a      	cmp	r1, #10
 800d222:	d103      	bne.n	800d22c <__sfputc_r+0x1e>
 800d224:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d228:	f000 b94a 	b.w	800d4c0 <__swbuf_r>
 800d22c:	6813      	ldr	r3, [r2, #0]
 800d22e:	1c58      	adds	r0, r3, #1
 800d230:	6010      	str	r0, [r2, #0]
 800d232:	7019      	strb	r1, [r3, #0]
 800d234:	4608      	mov	r0, r1
 800d236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <__sfputs_r>:
 800d23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d23e:	4606      	mov	r6, r0
 800d240:	460f      	mov	r7, r1
 800d242:	4614      	mov	r4, r2
 800d244:	18d5      	adds	r5, r2, r3
 800d246:	42ac      	cmp	r4, r5
 800d248:	d101      	bne.n	800d24e <__sfputs_r+0x12>
 800d24a:	2000      	movs	r0, #0
 800d24c:	e007      	b.n	800d25e <__sfputs_r+0x22>
 800d24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d252:	463a      	mov	r2, r7
 800d254:	4630      	mov	r0, r6
 800d256:	f7ff ffda 	bl	800d20e <__sfputc_r>
 800d25a:	1c43      	adds	r3, r0, #1
 800d25c:	d1f3      	bne.n	800d246 <__sfputs_r+0xa>
 800d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d260 <_vfiprintf_r>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	460d      	mov	r5, r1
 800d266:	b09d      	sub	sp, #116	; 0x74
 800d268:	4614      	mov	r4, r2
 800d26a:	4698      	mov	r8, r3
 800d26c:	4606      	mov	r6, r0
 800d26e:	b118      	cbz	r0, 800d278 <_vfiprintf_r+0x18>
 800d270:	6983      	ldr	r3, [r0, #24]
 800d272:	b90b      	cbnz	r3, 800d278 <_vfiprintf_r+0x18>
 800d274:	f000 fb14 	bl	800d8a0 <__sinit>
 800d278:	4b89      	ldr	r3, [pc, #548]	; (800d4a0 <_vfiprintf_r+0x240>)
 800d27a:	429d      	cmp	r5, r3
 800d27c:	d11b      	bne.n	800d2b6 <_vfiprintf_r+0x56>
 800d27e:	6875      	ldr	r5, [r6, #4]
 800d280:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d282:	07d9      	lsls	r1, r3, #31
 800d284:	d405      	bmi.n	800d292 <_vfiprintf_r+0x32>
 800d286:	89ab      	ldrh	r3, [r5, #12]
 800d288:	059a      	lsls	r2, r3, #22
 800d28a:	d402      	bmi.n	800d292 <_vfiprintf_r+0x32>
 800d28c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d28e:	f000 fba5 	bl	800d9dc <__retarget_lock_acquire_recursive>
 800d292:	89ab      	ldrh	r3, [r5, #12]
 800d294:	071b      	lsls	r3, r3, #28
 800d296:	d501      	bpl.n	800d29c <_vfiprintf_r+0x3c>
 800d298:	692b      	ldr	r3, [r5, #16]
 800d29a:	b9eb      	cbnz	r3, 800d2d8 <_vfiprintf_r+0x78>
 800d29c:	4629      	mov	r1, r5
 800d29e:	4630      	mov	r0, r6
 800d2a0:	f000 f96e 	bl	800d580 <__swsetup_r>
 800d2a4:	b1c0      	cbz	r0, 800d2d8 <_vfiprintf_r+0x78>
 800d2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2a8:	07dc      	lsls	r4, r3, #31
 800d2aa:	d50e      	bpl.n	800d2ca <_vfiprintf_r+0x6a>
 800d2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2b0:	b01d      	add	sp, #116	; 0x74
 800d2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b6:	4b7b      	ldr	r3, [pc, #492]	; (800d4a4 <_vfiprintf_r+0x244>)
 800d2b8:	429d      	cmp	r5, r3
 800d2ba:	d101      	bne.n	800d2c0 <_vfiprintf_r+0x60>
 800d2bc:	68b5      	ldr	r5, [r6, #8]
 800d2be:	e7df      	b.n	800d280 <_vfiprintf_r+0x20>
 800d2c0:	4b79      	ldr	r3, [pc, #484]	; (800d4a8 <_vfiprintf_r+0x248>)
 800d2c2:	429d      	cmp	r5, r3
 800d2c4:	bf08      	it	eq
 800d2c6:	68f5      	ldreq	r5, [r6, #12]
 800d2c8:	e7da      	b.n	800d280 <_vfiprintf_r+0x20>
 800d2ca:	89ab      	ldrh	r3, [r5, #12]
 800d2cc:	0598      	lsls	r0, r3, #22
 800d2ce:	d4ed      	bmi.n	800d2ac <_vfiprintf_r+0x4c>
 800d2d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2d2:	f000 fb84 	bl	800d9de <__retarget_lock_release_recursive>
 800d2d6:	e7e9      	b.n	800d2ac <_vfiprintf_r+0x4c>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	9309      	str	r3, [sp, #36]	; 0x24
 800d2dc:	2320      	movs	r3, #32
 800d2de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2e6:	2330      	movs	r3, #48	; 0x30
 800d2e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4ac <_vfiprintf_r+0x24c>
 800d2ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2f0:	f04f 0901 	mov.w	r9, #1
 800d2f4:	4623      	mov	r3, r4
 800d2f6:	469a      	mov	sl, r3
 800d2f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2fc:	b10a      	cbz	r2, 800d302 <_vfiprintf_r+0xa2>
 800d2fe:	2a25      	cmp	r2, #37	; 0x25
 800d300:	d1f9      	bne.n	800d2f6 <_vfiprintf_r+0x96>
 800d302:	ebba 0b04 	subs.w	fp, sl, r4
 800d306:	d00b      	beq.n	800d320 <_vfiprintf_r+0xc0>
 800d308:	465b      	mov	r3, fp
 800d30a:	4622      	mov	r2, r4
 800d30c:	4629      	mov	r1, r5
 800d30e:	4630      	mov	r0, r6
 800d310:	f7ff ff94 	bl	800d23c <__sfputs_r>
 800d314:	3001      	adds	r0, #1
 800d316:	f000 80aa 	beq.w	800d46e <_vfiprintf_r+0x20e>
 800d31a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d31c:	445a      	add	r2, fp
 800d31e:	9209      	str	r2, [sp, #36]	; 0x24
 800d320:	f89a 3000 	ldrb.w	r3, [sl]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f000 80a2 	beq.w	800d46e <_vfiprintf_r+0x20e>
 800d32a:	2300      	movs	r3, #0
 800d32c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d334:	f10a 0a01 	add.w	sl, sl, #1
 800d338:	9304      	str	r3, [sp, #16]
 800d33a:	9307      	str	r3, [sp, #28]
 800d33c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d340:	931a      	str	r3, [sp, #104]	; 0x68
 800d342:	4654      	mov	r4, sl
 800d344:	2205      	movs	r2, #5
 800d346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d34a:	4858      	ldr	r0, [pc, #352]	; (800d4ac <_vfiprintf_r+0x24c>)
 800d34c:	f7f2 ff48 	bl	80001e0 <memchr>
 800d350:	9a04      	ldr	r2, [sp, #16]
 800d352:	b9d8      	cbnz	r0, 800d38c <_vfiprintf_r+0x12c>
 800d354:	06d1      	lsls	r1, r2, #27
 800d356:	bf44      	itt	mi
 800d358:	2320      	movmi	r3, #32
 800d35a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d35e:	0713      	lsls	r3, r2, #28
 800d360:	bf44      	itt	mi
 800d362:	232b      	movmi	r3, #43	; 0x2b
 800d364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d368:	f89a 3000 	ldrb.w	r3, [sl]
 800d36c:	2b2a      	cmp	r3, #42	; 0x2a
 800d36e:	d015      	beq.n	800d39c <_vfiprintf_r+0x13c>
 800d370:	9a07      	ldr	r2, [sp, #28]
 800d372:	4654      	mov	r4, sl
 800d374:	2000      	movs	r0, #0
 800d376:	f04f 0c0a 	mov.w	ip, #10
 800d37a:	4621      	mov	r1, r4
 800d37c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d380:	3b30      	subs	r3, #48	; 0x30
 800d382:	2b09      	cmp	r3, #9
 800d384:	d94e      	bls.n	800d424 <_vfiprintf_r+0x1c4>
 800d386:	b1b0      	cbz	r0, 800d3b6 <_vfiprintf_r+0x156>
 800d388:	9207      	str	r2, [sp, #28]
 800d38a:	e014      	b.n	800d3b6 <_vfiprintf_r+0x156>
 800d38c:	eba0 0308 	sub.w	r3, r0, r8
 800d390:	fa09 f303 	lsl.w	r3, r9, r3
 800d394:	4313      	orrs	r3, r2
 800d396:	9304      	str	r3, [sp, #16]
 800d398:	46a2      	mov	sl, r4
 800d39a:	e7d2      	b.n	800d342 <_vfiprintf_r+0xe2>
 800d39c:	9b03      	ldr	r3, [sp, #12]
 800d39e:	1d19      	adds	r1, r3, #4
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	9103      	str	r1, [sp, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	bfbb      	ittet	lt
 800d3a8:	425b      	neglt	r3, r3
 800d3aa:	f042 0202 	orrlt.w	r2, r2, #2
 800d3ae:	9307      	strge	r3, [sp, #28]
 800d3b0:	9307      	strlt	r3, [sp, #28]
 800d3b2:	bfb8      	it	lt
 800d3b4:	9204      	strlt	r2, [sp, #16]
 800d3b6:	7823      	ldrb	r3, [r4, #0]
 800d3b8:	2b2e      	cmp	r3, #46	; 0x2e
 800d3ba:	d10c      	bne.n	800d3d6 <_vfiprintf_r+0x176>
 800d3bc:	7863      	ldrb	r3, [r4, #1]
 800d3be:	2b2a      	cmp	r3, #42	; 0x2a
 800d3c0:	d135      	bne.n	800d42e <_vfiprintf_r+0x1ce>
 800d3c2:	9b03      	ldr	r3, [sp, #12]
 800d3c4:	1d1a      	adds	r2, r3, #4
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	9203      	str	r2, [sp, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	bfb8      	it	lt
 800d3ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d3d2:	3402      	adds	r4, #2
 800d3d4:	9305      	str	r3, [sp, #20]
 800d3d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4bc <_vfiprintf_r+0x25c>
 800d3da:	7821      	ldrb	r1, [r4, #0]
 800d3dc:	2203      	movs	r2, #3
 800d3de:	4650      	mov	r0, sl
 800d3e0:	f7f2 fefe 	bl	80001e0 <memchr>
 800d3e4:	b140      	cbz	r0, 800d3f8 <_vfiprintf_r+0x198>
 800d3e6:	2340      	movs	r3, #64	; 0x40
 800d3e8:	eba0 000a 	sub.w	r0, r0, sl
 800d3ec:	fa03 f000 	lsl.w	r0, r3, r0
 800d3f0:	9b04      	ldr	r3, [sp, #16]
 800d3f2:	4303      	orrs	r3, r0
 800d3f4:	3401      	adds	r4, #1
 800d3f6:	9304      	str	r3, [sp, #16]
 800d3f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3fc:	482c      	ldr	r0, [pc, #176]	; (800d4b0 <_vfiprintf_r+0x250>)
 800d3fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d402:	2206      	movs	r2, #6
 800d404:	f7f2 feec 	bl	80001e0 <memchr>
 800d408:	2800      	cmp	r0, #0
 800d40a:	d03f      	beq.n	800d48c <_vfiprintf_r+0x22c>
 800d40c:	4b29      	ldr	r3, [pc, #164]	; (800d4b4 <_vfiprintf_r+0x254>)
 800d40e:	bb1b      	cbnz	r3, 800d458 <_vfiprintf_r+0x1f8>
 800d410:	9b03      	ldr	r3, [sp, #12]
 800d412:	3307      	adds	r3, #7
 800d414:	f023 0307 	bic.w	r3, r3, #7
 800d418:	3308      	adds	r3, #8
 800d41a:	9303      	str	r3, [sp, #12]
 800d41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d41e:	443b      	add	r3, r7
 800d420:	9309      	str	r3, [sp, #36]	; 0x24
 800d422:	e767      	b.n	800d2f4 <_vfiprintf_r+0x94>
 800d424:	fb0c 3202 	mla	r2, ip, r2, r3
 800d428:	460c      	mov	r4, r1
 800d42a:	2001      	movs	r0, #1
 800d42c:	e7a5      	b.n	800d37a <_vfiprintf_r+0x11a>
 800d42e:	2300      	movs	r3, #0
 800d430:	3401      	adds	r4, #1
 800d432:	9305      	str	r3, [sp, #20]
 800d434:	4619      	mov	r1, r3
 800d436:	f04f 0c0a 	mov.w	ip, #10
 800d43a:	4620      	mov	r0, r4
 800d43c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d440:	3a30      	subs	r2, #48	; 0x30
 800d442:	2a09      	cmp	r2, #9
 800d444:	d903      	bls.n	800d44e <_vfiprintf_r+0x1ee>
 800d446:	2b00      	cmp	r3, #0
 800d448:	d0c5      	beq.n	800d3d6 <_vfiprintf_r+0x176>
 800d44a:	9105      	str	r1, [sp, #20]
 800d44c:	e7c3      	b.n	800d3d6 <_vfiprintf_r+0x176>
 800d44e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d452:	4604      	mov	r4, r0
 800d454:	2301      	movs	r3, #1
 800d456:	e7f0      	b.n	800d43a <_vfiprintf_r+0x1da>
 800d458:	ab03      	add	r3, sp, #12
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	462a      	mov	r2, r5
 800d45e:	4b16      	ldr	r3, [pc, #88]	; (800d4b8 <_vfiprintf_r+0x258>)
 800d460:	a904      	add	r1, sp, #16
 800d462:	4630      	mov	r0, r6
 800d464:	f7fd fdd4 	bl	800b010 <_printf_float>
 800d468:	4607      	mov	r7, r0
 800d46a:	1c78      	adds	r0, r7, #1
 800d46c:	d1d6      	bne.n	800d41c <_vfiprintf_r+0x1bc>
 800d46e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d470:	07d9      	lsls	r1, r3, #31
 800d472:	d405      	bmi.n	800d480 <_vfiprintf_r+0x220>
 800d474:	89ab      	ldrh	r3, [r5, #12]
 800d476:	059a      	lsls	r2, r3, #22
 800d478:	d402      	bmi.n	800d480 <_vfiprintf_r+0x220>
 800d47a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d47c:	f000 faaf 	bl	800d9de <__retarget_lock_release_recursive>
 800d480:	89ab      	ldrh	r3, [r5, #12]
 800d482:	065b      	lsls	r3, r3, #25
 800d484:	f53f af12 	bmi.w	800d2ac <_vfiprintf_r+0x4c>
 800d488:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d48a:	e711      	b.n	800d2b0 <_vfiprintf_r+0x50>
 800d48c:	ab03      	add	r3, sp, #12
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	462a      	mov	r2, r5
 800d492:	4b09      	ldr	r3, [pc, #36]	; (800d4b8 <_vfiprintf_r+0x258>)
 800d494:	a904      	add	r1, sp, #16
 800d496:	4630      	mov	r0, r6
 800d498:	f7fe f85e 	bl	800b558 <_printf_i>
 800d49c:	e7e4      	b.n	800d468 <_vfiprintf_r+0x208>
 800d49e:	bf00      	nop
 800d4a0:	08010a44 	.word	0x08010a44
 800d4a4:	08010a64 	.word	0x08010a64
 800d4a8:	08010a24 	.word	0x08010a24
 800d4ac:	080108cc 	.word	0x080108cc
 800d4b0:	080108d6 	.word	0x080108d6
 800d4b4:	0800b011 	.word	0x0800b011
 800d4b8:	0800d23d 	.word	0x0800d23d
 800d4bc:	080108d2 	.word	0x080108d2

0800d4c0 <__swbuf_r>:
 800d4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c2:	460e      	mov	r6, r1
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	b118      	cbz	r0, 800d4d2 <__swbuf_r+0x12>
 800d4ca:	6983      	ldr	r3, [r0, #24]
 800d4cc:	b90b      	cbnz	r3, 800d4d2 <__swbuf_r+0x12>
 800d4ce:	f000 f9e7 	bl	800d8a0 <__sinit>
 800d4d2:	4b21      	ldr	r3, [pc, #132]	; (800d558 <__swbuf_r+0x98>)
 800d4d4:	429c      	cmp	r4, r3
 800d4d6:	d12b      	bne.n	800d530 <__swbuf_r+0x70>
 800d4d8:	686c      	ldr	r4, [r5, #4]
 800d4da:	69a3      	ldr	r3, [r4, #24]
 800d4dc:	60a3      	str	r3, [r4, #8]
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	071a      	lsls	r2, r3, #28
 800d4e2:	d52f      	bpl.n	800d544 <__swbuf_r+0x84>
 800d4e4:	6923      	ldr	r3, [r4, #16]
 800d4e6:	b36b      	cbz	r3, 800d544 <__swbuf_r+0x84>
 800d4e8:	6923      	ldr	r3, [r4, #16]
 800d4ea:	6820      	ldr	r0, [r4, #0]
 800d4ec:	1ac0      	subs	r0, r0, r3
 800d4ee:	6963      	ldr	r3, [r4, #20]
 800d4f0:	b2f6      	uxtb	r6, r6
 800d4f2:	4283      	cmp	r3, r0
 800d4f4:	4637      	mov	r7, r6
 800d4f6:	dc04      	bgt.n	800d502 <__swbuf_r+0x42>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f000 f93c 	bl	800d778 <_fflush_r>
 800d500:	bb30      	cbnz	r0, 800d550 <__swbuf_r+0x90>
 800d502:	68a3      	ldr	r3, [r4, #8]
 800d504:	3b01      	subs	r3, #1
 800d506:	60a3      	str	r3, [r4, #8]
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	1c5a      	adds	r2, r3, #1
 800d50c:	6022      	str	r2, [r4, #0]
 800d50e:	701e      	strb	r6, [r3, #0]
 800d510:	6963      	ldr	r3, [r4, #20]
 800d512:	3001      	adds	r0, #1
 800d514:	4283      	cmp	r3, r0
 800d516:	d004      	beq.n	800d522 <__swbuf_r+0x62>
 800d518:	89a3      	ldrh	r3, [r4, #12]
 800d51a:	07db      	lsls	r3, r3, #31
 800d51c:	d506      	bpl.n	800d52c <__swbuf_r+0x6c>
 800d51e:	2e0a      	cmp	r6, #10
 800d520:	d104      	bne.n	800d52c <__swbuf_r+0x6c>
 800d522:	4621      	mov	r1, r4
 800d524:	4628      	mov	r0, r5
 800d526:	f000 f927 	bl	800d778 <_fflush_r>
 800d52a:	b988      	cbnz	r0, 800d550 <__swbuf_r+0x90>
 800d52c:	4638      	mov	r0, r7
 800d52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d530:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <__swbuf_r+0x9c>)
 800d532:	429c      	cmp	r4, r3
 800d534:	d101      	bne.n	800d53a <__swbuf_r+0x7a>
 800d536:	68ac      	ldr	r4, [r5, #8]
 800d538:	e7cf      	b.n	800d4da <__swbuf_r+0x1a>
 800d53a:	4b09      	ldr	r3, [pc, #36]	; (800d560 <__swbuf_r+0xa0>)
 800d53c:	429c      	cmp	r4, r3
 800d53e:	bf08      	it	eq
 800d540:	68ec      	ldreq	r4, [r5, #12]
 800d542:	e7ca      	b.n	800d4da <__swbuf_r+0x1a>
 800d544:	4621      	mov	r1, r4
 800d546:	4628      	mov	r0, r5
 800d548:	f000 f81a 	bl	800d580 <__swsetup_r>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d0cb      	beq.n	800d4e8 <__swbuf_r+0x28>
 800d550:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d554:	e7ea      	b.n	800d52c <__swbuf_r+0x6c>
 800d556:	bf00      	nop
 800d558:	08010a44 	.word	0x08010a44
 800d55c:	08010a64 	.word	0x08010a64
 800d560:	08010a24 	.word	0x08010a24

0800d564 <__ascii_wctomb>:
 800d564:	b149      	cbz	r1, 800d57a <__ascii_wctomb+0x16>
 800d566:	2aff      	cmp	r2, #255	; 0xff
 800d568:	bf85      	ittet	hi
 800d56a:	238a      	movhi	r3, #138	; 0x8a
 800d56c:	6003      	strhi	r3, [r0, #0]
 800d56e:	700a      	strbls	r2, [r1, #0]
 800d570:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d574:	bf98      	it	ls
 800d576:	2001      	movls	r0, #1
 800d578:	4770      	bx	lr
 800d57a:	4608      	mov	r0, r1
 800d57c:	4770      	bx	lr
	...

0800d580 <__swsetup_r>:
 800d580:	4b32      	ldr	r3, [pc, #200]	; (800d64c <__swsetup_r+0xcc>)
 800d582:	b570      	push	{r4, r5, r6, lr}
 800d584:	681d      	ldr	r5, [r3, #0]
 800d586:	4606      	mov	r6, r0
 800d588:	460c      	mov	r4, r1
 800d58a:	b125      	cbz	r5, 800d596 <__swsetup_r+0x16>
 800d58c:	69ab      	ldr	r3, [r5, #24]
 800d58e:	b913      	cbnz	r3, 800d596 <__swsetup_r+0x16>
 800d590:	4628      	mov	r0, r5
 800d592:	f000 f985 	bl	800d8a0 <__sinit>
 800d596:	4b2e      	ldr	r3, [pc, #184]	; (800d650 <__swsetup_r+0xd0>)
 800d598:	429c      	cmp	r4, r3
 800d59a:	d10f      	bne.n	800d5bc <__swsetup_r+0x3c>
 800d59c:	686c      	ldr	r4, [r5, #4]
 800d59e:	89a3      	ldrh	r3, [r4, #12]
 800d5a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5a4:	0719      	lsls	r1, r3, #28
 800d5a6:	d42c      	bmi.n	800d602 <__swsetup_r+0x82>
 800d5a8:	06dd      	lsls	r5, r3, #27
 800d5aa:	d411      	bmi.n	800d5d0 <__swsetup_r+0x50>
 800d5ac:	2309      	movs	r3, #9
 800d5ae:	6033      	str	r3, [r6, #0]
 800d5b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5b4:	81a3      	strh	r3, [r4, #12]
 800d5b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5ba:	e03e      	b.n	800d63a <__swsetup_r+0xba>
 800d5bc:	4b25      	ldr	r3, [pc, #148]	; (800d654 <__swsetup_r+0xd4>)
 800d5be:	429c      	cmp	r4, r3
 800d5c0:	d101      	bne.n	800d5c6 <__swsetup_r+0x46>
 800d5c2:	68ac      	ldr	r4, [r5, #8]
 800d5c4:	e7eb      	b.n	800d59e <__swsetup_r+0x1e>
 800d5c6:	4b24      	ldr	r3, [pc, #144]	; (800d658 <__swsetup_r+0xd8>)
 800d5c8:	429c      	cmp	r4, r3
 800d5ca:	bf08      	it	eq
 800d5cc:	68ec      	ldreq	r4, [r5, #12]
 800d5ce:	e7e6      	b.n	800d59e <__swsetup_r+0x1e>
 800d5d0:	0758      	lsls	r0, r3, #29
 800d5d2:	d512      	bpl.n	800d5fa <__swsetup_r+0x7a>
 800d5d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5d6:	b141      	cbz	r1, 800d5ea <__swsetup_r+0x6a>
 800d5d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5dc:	4299      	cmp	r1, r3
 800d5de:	d002      	beq.n	800d5e6 <__swsetup_r+0x66>
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff fb31 	bl	800cc48 <_free_r>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	6363      	str	r3, [r4, #52]	; 0x34
 800d5ea:	89a3      	ldrh	r3, [r4, #12]
 800d5ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5f0:	81a3      	strh	r3, [r4, #12]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	6063      	str	r3, [r4, #4]
 800d5f6:	6923      	ldr	r3, [r4, #16]
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	f043 0308 	orr.w	r3, r3, #8
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	6923      	ldr	r3, [r4, #16]
 800d604:	b94b      	cbnz	r3, 800d61a <__swsetup_r+0x9a>
 800d606:	89a3      	ldrh	r3, [r4, #12]
 800d608:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d60c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d610:	d003      	beq.n	800d61a <__swsetup_r+0x9a>
 800d612:	4621      	mov	r1, r4
 800d614:	4630      	mov	r0, r6
 800d616:	f000 fa09 	bl	800da2c <__smakebuf_r>
 800d61a:	89a0      	ldrh	r0, [r4, #12]
 800d61c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d620:	f010 0301 	ands.w	r3, r0, #1
 800d624:	d00a      	beq.n	800d63c <__swsetup_r+0xbc>
 800d626:	2300      	movs	r3, #0
 800d628:	60a3      	str	r3, [r4, #8]
 800d62a:	6963      	ldr	r3, [r4, #20]
 800d62c:	425b      	negs	r3, r3
 800d62e:	61a3      	str	r3, [r4, #24]
 800d630:	6923      	ldr	r3, [r4, #16]
 800d632:	b943      	cbnz	r3, 800d646 <__swsetup_r+0xc6>
 800d634:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d638:	d1ba      	bne.n	800d5b0 <__swsetup_r+0x30>
 800d63a:	bd70      	pop	{r4, r5, r6, pc}
 800d63c:	0781      	lsls	r1, r0, #30
 800d63e:	bf58      	it	pl
 800d640:	6963      	ldrpl	r3, [r4, #20]
 800d642:	60a3      	str	r3, [r4, #8]
 800d644:	e7f4      	b.n	800d630 <__swsetup_r+0xb0>
 800d646:	2000      	movs	r0, #0
 800d648:	e7f7      	b.n	800d63a <__swsetup_r+0xba>
 800d64a:	bf00      	nop
 800d64c:	2000005c 	.word	0x2000005c
 800d650:	08010a44 	.word	0x08010a44
 800d654:	08010a64 	.word	0x08010a64
 800d658:	08010a24 	.word	0x08010a24

0800d65c <abort>:
 800d65c:	b508      	push	{r3, lr}
 800d65e:	2006      	movs	r0, #6
 800d660:	f000 fa54 	bl	800db0c <raise>
 800d664:	2001      	movs	r0, #1
 800d666:	f7f9 f935 	bl	80068d4 <_exit>
	...

0800d66c <__sflush_r>:
 800d66c:	898a      	ldrh	r2, [r1, #12]
 800d66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d672:	4605      	mov	r5, r0
 800d674:	0710      	lsls	r0, r2, #28
 800d676:	460c      	mov	r4, r1
 800d678:	d458      	bmi.n	800d72c <__sflush_r+0xc0>
 800d67a:	684b      	ldr	r3, [r1, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	dc05      	bgt.n	800d68c <__sflush_r+0x20>
 800d680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d682:	2b00      	cmp	r3, #0
 800d684:	dc02      	bgt.n	800d68c <__sflush_r+0x20>
 800d686:	2000      	movs	r0, #0
 800d688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d68c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d68e:	2e00      	cmp	r6, #0
 800d690:	d0f9      	beq.n	800d686 <__sflush_r+0x1a>
 800d692:	2300      	movs	r3, #0
 800d694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d698:	682f      	ldr	r7, [r5, #0]
 800d69a:	602b      	str	r3, [r5, #0]
 800d69c:	d032      	beq.n	800d704 <__sflush_r+0x98>
 800d69e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6a0:	89a3      	ldrh	r3, [r4, #12]
 800d6a2:	075a      	lsls	r2, r3, #29
 800d6a4:	d505      	bpl.n	800d6b2 <__sflush_r+0x46>
 800d6a6:	6863      	ldr	r3, [r4, #4]
 800d6a8:	1ac0      	subs	r0, r0, r3
 800d6aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6ac:	b10b      	cbz	r3, 800d6b2 <__sflush_r+0x46>
 800d6ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6b0:	1ac0      	subs	r0, r0, r3
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b8:	6a21      	ldr	r1, [r4, #32]
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	47b0      	blx	r6
 800d6be:	1c43      	adds	r3, r0, #1
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	d106      	bne.n	800d6d2 <__sflush_r+0x66>
 800d6c4:	6829      	ldr	r1, [r5, #0]
 800d6c6:	291d      	cmp	r1, #29
 800d6c8:	d82c      	bhi.n	800d724 <__sflush_r+0xb8>
 800d6ca:	4a2a      	ldr	r2, [pc, #168]	; (800d774 <__sflush_r+0x108>)
 800d6cc:	40ca      	lsrs	r2, r1
 800d6ce:	07d6      	lsls	r6, r2, #31
 800d6d0:	d528      	bpl.n	800d724 <__sflush_r+0xb8>
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	6062      	str	r2, [r4, #4]
 800d6d6:	04d9      	lsls	r1, r3, #19
 800d6d8:	6922      	ldr	r2, [r4, #16]
 800d6da:	6022      	str	r2, [r4, #0]
 800d6dc:	d504      	bpl.n	800d6e8 <__sflush_r+0x7c>
 800d6de:	1c42      	adds	r2, r0, #1
 800d6e0:	d101      	bne.n	800d6e6 <__sflush_r+0x7a>
 800d6e2:	682b      	ldr	r3, [r5, #0]
 800d6e4:	b903      	cbnz	r3, 800d6e8 <__sflush_r+0x7c>
 800d6e6:	6560      	str	r0, [r4, #84]	; 0x54
 800d6e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6ea:	602f      	str	r7, [r5, #0]
 800d6ec:	2900      	cmp	r1, #0
 800d6ee:	d0ca      	beq.n	800d686 <__sflush_r+0x1a>
 800d6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f4:	4299      	cmp	r1, r3
 800d6f6:	d002      	beq.n	800d6fe <__sflush_r+0x92>
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	f7ff faa5 	bl	800cc48 <_free_r>
 800d6fe:	2000      	movs	r0, #0
 800d700:	6360      	str	r0, [r4, #52]	; 0x34
 800d702:	e7c1      	b.n	800d688 <__sflush_r+0x1c>
 800d704:	6a21      	ldr	r1, [r4, #32]
 800d706:	2301      	movs	r3, #1
 800d708:	4628      	mov	r0, r5
 800d70a:	47b0      	blx	r6
 800d70c:	1c41      	adds	r1, r0, #1
 800d70e:	d1c7      	bne.n	800d6a0 <__sflush_r+0x34>
 800d710:	682b      	ldr	r3, [r5, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d0c4      	beq.n	800d6a0 <__sflush_r+0x34>
 800d716:	2b1d      	cmp	r3, #29
 800d718:	d001      	beq.n	800d71e <__sflush_r+0xb2>
 800d71a:	2b16      	cmp	r3, #22
 800d71c:	d101      	bne.n	800d722 <__sflush_r+0xb6>
 800d71e:	602f      	str	r7, [r5, #0]
 800d720:	e7b1      	b.n	800d686 <__sflush_r+0x1a>
 800d722:	89a3      	ldrh	r3, [r4, #12]
 800d724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d728:	81a3      	strh	r3, [r4, #12]
 800d72a:	e7ad      	b.n	800d688 <__sflush_r+0x1c>
 800d72c:	690f      	ldr	r7, [r1, #16]
 800d72e:	2f00      	cmp	r7, #0
 800d730:	d0a9      	beq.n	800d686 <__sflush_r+0x1a>
 800d732:	0793      	lsls	r3, r2, #30
 800d734:	680e      	ldr	r6, [r1, #0]
 800d736:	bf08      	it	eq
 800d738:	694b      	ldreq	r3, [r1, #20]
 800d73a:	600f      	str	r7, [r1, #0]
 800d73c:	bf18      	it	ne
 800d73e:	2300      	movne	r3, #0
 800d740:	eba6 0807 	sub.w	r8, r6, r7
 800d744:	608b      	str	r3, [r1, #8]
 800d746:	f1b8 0f00 	cmp.w	r8, #0
 800d74a:	dd9c      	ble.n	800d686 <__sflush_r+0x1a>
 800d74c:	6a21      	ldr	r1, [r4, #32]
 800d74e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d750:	4643      	mov	r3, r8
 800d752:	463a      	mov	r2, r7
 800d754:	4628      	mov	r0, r5
 800d756:	47b0      	blx	r6
 800d758:	2800      	cmp	r0, #0
 800d75a:	dc06      	bgt.n	800d76a <__sflush_r+0xfe>
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d762:	81a3      	strh	r3, [r4, #12]
 800d764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d768:	e78e      	b.n	800d688 <__sflush_r+0x1c>
 800d76a:	4407      	add	r7, r0
 800d76c:	eba8 0800 	sub.w	r8, r8, r0
 800d770:	e7e9      	b.n	800d746 <__sflush_r+0xda>
 800d772:	bf00      	nop
 800d774:	20400001 	.word	0x20400001

0800d778 <_fflush_r>:
 800d778:	b538      	push	{r3, r4, r5, lr}
 800d77a:	690b      	ldr	r3, [r1, #16]
 800d77c:	4605      	mov	r5, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	b913      	cbnz	r3, 800d788 <_fflush_r+0x10>
 800d782:	2500      	movs	r5, #0
 800d784:	4628      	mov	r0, r5
 800d786:	bd38      	pop	{r3, r4, r5, pc}
 800d788:	b118      	cbz	r0, 800d792 <_fflush_r+0x1a>
 800d78a:	6983      	ldr	r3, [r0, #24]
 800d78c:	b90b      	cbnz	r3, 800d792 <_fflush_r+0x1a>
 800d78e:	f000 f887 	bl	800d8a0 <__sinit>
 800d792:	4b14      	ldr	r3, [pc, #80]	; (800d7e4 <_fflush_r+0x6c>)
 800d794:	429c      	cmp	r4, r3
 800d796:	d11b      	bne.n	800d7d0 <_fflush_r+0x58>
 800d798:	686c      	ldr	r4, [r5, #4]
 800d79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d0ef      	beq.n	800d782 <_fflush_r+0xa>
 800d7a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7a4:	07d0      	lsls	r0, r2, #31
 800d7a6:	d404      	bmi.n	800d7b2 <_fflush_r+0x3a>
 800d7a8:	0599      	lsls	r1, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_fflush_r+0x3a>
 800d7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ae:	f000 f915 	bl	800d9dc <__retarget_lock_acquire_recursive>
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	f7ff ff59 	bl	800d66c <__sflush_r>
 800d7ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7bc:	07da      	lsls	r2, r3, #31
 800d7be:	4605      	mov	r5, r0
 800d7c0:	d4e0      	bmi.n	800d784 <_fflush_r+0xc>
 800d7c2:	89a3      	ldrh	r3, [r4, #12]
 800d7c4:	059b      	lsls	r3, r3, #22
 800d7c6:	d4dd      	bmi.n	800d784 <_fflush_r+0xc>
 800d7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ca:	f000 f908 	bl	800d9de <__retarget_lock_release_recursive>
 800d7ce:	e7d9      	b.n	800d784 <_fflush_r+0xc>
 800d7d0:	4b05      	ldr	r3, [pc, #20]	; (800d7e8 <_fflush_r+0x70>)
 800d7d2:	429c      	cmp	r4, r3
 800d7d4:	d101      	bne.n	800d7da <_fflush_r+0x62>
 800d7d6:	68ac      	ldr	r4, [r5, #8]
 800d7d8:	e7df      	b.n	800d79a <_fflush_r+0x22>
 800d7da:	4b04      	ldr	r3, [pc, #16]	; (800d7ec <_fflush_r+0x74>)
 800d7dc:	429c      	cmp	r4, r3
 800d7de:	bf08      	it	eq
 800d7e0:	68ec      	ldreq	r4, [r5, #12]
 800d7e2:	e7da      	b.n	800d79a <_fflush_r+0x22>
 800d7e4:	08010a44 	.word	0x08010a44
 800d7e8:	08010a64 	.word	0x08010a64
 800d7ec:	08010a24 	.word	0x08010a24

0800d7f0 <std>:
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	b510      	push	{r4, lr}
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	e9c0 3300 	strd	r3, r3, [r0]
 800d7fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7fe:	6083      	str	r3, [r0, #8]
 800d800:	8181      	strh	r1, [r0, #12]
 800d802:	6643      	str	r3, [r0, #100]	; 0x64
 800d804:	81c2      	strh	r2, [r0, #14]
 800d806:	6183      	str	r3, [r0, #24]
 800d808:	4619      	mov	r1, r3
 800d80a:	2208      	movs	r2, #8
 800d80c:	305c      	adds	r0, #92	; 0x5c
 800d80e:	f7fd fb57 	bl	800aec0 <memset>
 800d812:	4b05      	ldr	r3, [pc, #20]	; (800d828 <std+0x38>)
 800d814:	6263      	str	r3, [r4, #36]	; 0x24
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <std+0x3c>)
 800d818:	62a3      	str	r3, [r4, #40]	; 0x28
 800d81a:	4b05      	ldr	r3, [pc, #20]	; (800d830 <std+0x40>)
 800d81c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d81e:	4b05      	ldr	r3, [pc, #20]	; (800d834 <std+0x44>)
 800d820:	6224      	str	r4, [r4, #32]
 800d822:	6323      	str	r3, [r4, #48]	; 0x30
 800d824:	bd10      	pop	{r4, pc}
 800d826:	bf00      	nop
 800d828:	0800db45 	.word	0x0800db45
 800d82c:	0800db67 	.word	0x0800db67
 800d830:	0800db9f 	.word	0x0800db9f
 800d834:	0800dbc3 	.word	0x0800dbc3

0800d838 <_cleanup_r>:
 800d838:	4901      	ldr	r1, [pc, #4]	; (800d840 <_cleanup_r+0x8>)
 800d83a:	f000 b8af 	b.w	800d99c <_fwalk_reent>
 800d83e:	bf00      	nop
 800d840:	0800d779 	.word	0x0800d779

0800d844 <__sfmoreglue>:
 800d844:	b570      	push	{r4, r5, r6, lr}
 800d846:	2268      	movs	r2, #104	; 0x68
 800d848:	1e4d      	subs	r5, r1, #1
 800d84a:	4355      	muls	r5, r2
 800d84c:	460e      	mov	r6, r1
 800d84e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d852:	f7ff fa65 	bl	800cd20 <_malloc_r>
 800d856:	4604      	mov	r4, r0
 800d858:	b140      	cbz	r0, 800d86c <__sfmoreglue+0x28>
 800d85a:	2100      	movs	r1, #0
 800d85c:	e9c0 1600 	strd	r1, r6, [r0]
 800d860:	300c      	adds	r0, #12
 800d862:	60a0      	str	r0, [r4, #8]
 800d864:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d868:	f7fd fb2a 	bl	800aec0 <memset>
 800d86c:	4620      	mov	r0, r4
 800d86e:	bd70      	pop	{r4, r5, r6, pc}

0800d870 <__sfp_lock_acquire>:
 800d870:	4801      	ldr	r0, [pc, #4]	; (800d878 <__sfp_lock_acquire+0x8>)
 800d872:	f000 b8b3 	b.w	800d9dc <__retarget_lock_acquire_recursive>
 800d876:	bf00      	nop
 800d878:	20000f61 	.word	0x20000f61

0800d87c <__sfp_lock_release>:
 800d87c:	4801      	ldr	r0, [pc, #4]	; (800d884 <__sfp_lock_release+0x8>)
 800d87e:	f000 b8ae 	b.w	800d9de <__retarget_lock_release_recursive>
 800d882:	bf00      	nop
 800d884:	20000f61 	.word	0x20000f61

0800d888 <__sinit_lock_acquire>:
 800d888:	4801      	ldr	r0, [pc, #4]	; (800d890 <__sinit_lock_acquire+0x8>)
 800d88a:	f000 b8a7 	b.w	800d9dc <__retarget_lock_acquire_recursive>
 800d88e:	bf00      	nop
 800d890:	20000f62 	.word	0x20000f62

0800d894 <__sinit_lock_release>:
 800d894:	4801      	ldr	r0, [pc, #4]	; (800d89c <__sinit_lock_release+0x8>)
 800d896:	f000 b8a2 	b.w	800d9de <__retarget_lock_release_recursive>
 800d89a:	bf00      	nop
 800d89c:	20000f62 	.word	0x20000f62

0800d8a0 <__sinit>:
 800d8a0:	b510      	push	{r4, lr}
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	f7ff fff0 	bl	800d888 <__sinit_lock_acquire>
 800d8a8:	69a3      	ldr	r3, [r4, #24]
 800d8aa:	b11b      	cbz	r3, 800d8b4 <__sinit+0x14>
 800d8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8b0:	f7ff bff0 	b.w	800d894 <__sinit_lock_release>
 800d8b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d8b8:	6523      	str	r3, [r4, #80]	; 0x50
 800d8ba:	4b13      	ldr	r3, [pc, #76]	; (800d908 <__sinit+0x68>)
 800d8bc:	4a13      	ldr	r2, [pc, #76]	; (800d90c <__sinit+0x6c>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800d8c2:	42a3      	cmp	r3, r4
 800d8c4:	bf04      	itt	eq
 800d8c6:	2301      	moveq	r3, #1
 800d8c8:	61a3      	streq	r3, [r4, #24]
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f000 f820 	bl	800d910 <__sfp>
 800d8d0:	6060      	str	r0, [r4, #4]
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 f81c 	bl	800d910 <__sfp>
 800d8d8:	60a0      	str	r0, [r4, #8]
 800d8da:	4620      	mov	r0, r4
 800d8dc:	f000 f818 	bl	800d910 <__sfp>
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	60e0      	str	r0, [r4, #12]
 800d8e4:	2104      	movs	r1, #4
 800d8e6:	6860      	ldr	r0, [r4, #4]
 800d8e8:	f7ff ff82 	bl	800d7f0 <std>
 800d8ec:	68a0      	ldr	r0, [r4, #8]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	2109      	movs	r1, #9
 800d8f2:	f7ff ff7d 	bl	800d7f0 <std>
 800d8f6:	68e0      	ldr	r0, [r4, #12]
 800d8f8:	2202      	movs	r2, #2
 800d8fa:	2112      	movs	r1, #18
 800d8fc:	f7ff ff78 	bl	800d7f0 <std>
 800d900:	2301      	movs	r3, #1
 800d902:	61a3      	str	r3, [r4, #24]
 800d904:	e7d2      	b.n	800d8ac <__sinit+0xc>
 800d906:	bf00      	nop
 800d908:	080106ac 	.word	0x080106ac
 800d90c:	0800d839 	.word	0x0800d839

0800d910 <__sfp>:
 800d910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d912:	4607      	mov	r7, r0
 800d914:	f7ff ffac 	bl	800d870 <__sfp_lock_acquire>
 800d918:	4b1e      	ldr	r3, [pc, #120]	; (800d994 <__sfp+0x84>)
 800d91a:	681e      	ldr	r6, [r3, #0]
 800d91c:	69b3      	ldr	r3, [r6, #24]
 800d91e:	b913      	cbnz	r3, 800d926 <__sfp+0x16>
 800d920:	4630      	mov	r0, r6
 800d922:	f7ff ffbd 	bl	800d8a0 <__sinit>
 800d926:	3648      	adds	r6, #72	; 0x48
 800d928:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	d503      	bpl.n	800d938 <__sfp+0x28>
 800d930:	6833      	ldr	r3, [r6, #0]
 800d932:	b30b      	cbz	r3, 800d978 <__sfp+0x68>
 800d934:	6836      	ldr	r6, [r6, #0]
 800d936:	e7f7      	b.n	800d928 <__sfp+0x18>
 800d938:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d93c:	b9d5      	cbnz	r5, 800d974 <__sfp+0x64>
 800d93e:	4b16      	ldr	r3, [pc, #88]	; (800d998 <__sfp+0x88>)
 800d940:	60e3      	str	r3, [r4, #12]
 800d942:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d946:	6665      	str	r5, [r4, #100]	; 0x64
 800d948:	f000 f847 	bl	800d9da <__retarget_lock_init_recursive>
 800d94c:	f7ff ff96 	bl	800d87c <__sfp_lock_release>
 800d950:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d954:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d958:	6025      	str	r5, [r4, #0]
 800d95a:	61a5      	str	r5, [r4, #24]
 800d95c:	2208      	movs	r2, #8
 800d95e:	4629      	mov	r1, r5
 800d960:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d964:	f7fd faac 	bl	800aec0 <memset>
 800d968:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d96c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d970:	4620      	mov	r0, r4
 800d972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d974:	3468      	adds	r4, #104	; 0x68
 800d976:	e7d9      	b.n	800d92c <__sfp+0x1c>
 800d978:	2104      	movs	r1, #4
 800d97a:	4638      	mov	r0, r7
 800d97c:	f7ff ff62 	bl	800d844 <__sfmoreglue>
 800d980:	4604      	mov	r4, r0
 800d982:	6030      	str	r0, [r6, #0]
 800d984:	2800      	cmp	r0, #0
 800d986:	d1d5      	bne.n	800d934 <__sfp+0x24>
 800d988:	f7ff ff78 	bl	800d87c <__sfp_lock_release>
 800d98c:	230c      	movs	r3, #12
 800d98e:	603b      	str	r3, [r7, #0]
 800d990:	e7ee      	b.n	800d970 <__sfp+0x60>
 800d992:	bf00      	nop
 800d994:	080106ac 	.word	0x080106ac
 800d998:	ffff0001 	.word	0xffff0001

0800d99c <_fwalk_reent>:
 800d99c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9a0:	4606      	mov	r6, r0
 800d9a2:	4688      	mov	r8, r1
 800d9a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d9a8:	2700      	movs	r7, #0
 800d9aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9ae:	f1b9 0901 	subs.w	r9, r9, #1
 800d9b2:	d505      	bpl.n	800d9c0 <_fwalk_reent+0x24>
 800d9b4:	6824      	ldr	r4, [r4, #0]
 800d9b6:	2c00      	cmp	r4, #0
 800d9b8:	d1f7      	bne.n	800d9aa <_fwalk_reent+0xe>
 800d9ba:	4638      	mov	r0, r7
 800d9bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9c0:	89ab      	ldrh	r3, [r5, #12]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d907      	bls.n	800d9d6 <_fwalk_reent+0x3a>
 800d9c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	d003      	beq.n	800d9d6 <_fwalk_reent+0x3a>
 800d9ce:	4629      	mov	r1, r5
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	47c0      	blx	r8
 800d9d4:	4307      	orrs	r7, r0
 800d9d6:	3568      	adds	r5, #104	; 0x68
 800d9d8:	e7e9      	b.n	800d9ae <_fwalk_reent+0x12>

0800d9da <__retarget_lock_init_recursive>:
 800d9da:	4770      	bx	lr

0800d9dc <__retarget_lock_acquire_recursive>:
 800d9dc:	4770      	bx	lr

0800d9de <__retarget_lock_release_recursive>:
 800d9de:	4770      	bx	lr

0800d9e0 <__swhatbuf_r>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	460e      	mov	r6, r1
 800d9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9e8:	2900      	cmp	r1, #0
 800d9ea:	b096      	sub	sp, #88	; 0x58
 800d9ec:	4614      	mov	r4, r2
 800d9ee:	461d      	mov	r5, r3
 800d9f0:	da08      	bge.n	800da04 <__swhatbuf_r+0x24>
 800d9f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	602a      	str	r2, [r5, #0]
 800d9fa:	061a      	lsls	r2, r3, #24
 800d9fc:	d410      	bmi.n	800da20 <__swhatbuf_r+0x40>
 800d9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da02:	e00e      	b.n	800da22 <__swhatbuf_r+0x42>
 800da04:	466a      	mov	r2, sp
 800da06:	f000 f903 	bl	800dc10 <_fstat_r>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	dbf1      	blt.n	800d9f2 <__swhatbuf_r+0x12>
 800da0e:	9a01      	ldr	r2, [sp, #4]
 800da10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da18:	425a      	negs	r2, r3
 800da1a:	415a      	adcs	r2, r3
 800da1c:	602a      	str	r2, [r5, #0]
 800da1e:	e7ee      	b.n	800d9fe <__swhatbuf_r+0x1e>
 800da20:	2340      	movs	r3, #64	; 0x40
 800da22:	2000      	movs	r0, #0
 800da24:	6023      	str	r3, [r4, #0]
 800da26:	b016      	add	sp, #88	; 0x58
 800da28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da2c <__smakebuf_r>:
 800da2c:	898b      	ldrh	r3, [r1, #12]
 800da2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da30:	079d      	lsls	r5, r3, #30
 800da32:	4606      	mov	r6, r0
 800da34:	460c      	mov	r4, r1
 800da36:	d507      	bpl.n	800da48 <__smakebuf_r+0x1c>
 800da38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	6123      	str	r3, [r4, #16]
 800da40:	2301      	movs	r3, #1
 800da42:	6163      	str	r3, [r4, #20]
 800da44:	b002      	add	sp, #8
 800da46:	bd70      	pop	{r4, r5, r6, pc}
 800da48:	ab01      	add	r3, sp, #4
 800da4a:	466a      	mov	r2, sp
 800da4c:	f7ff ffc8 	bl	800d9e0 <__swhatbuf_r>
 800da50:	9900      	ldr	r1, [sp, #0]
 800da52:	4605      	mov	r5, r0
 800da54:	4630      	mov	r0, r6
 800da56:	f7ff f963 	bl	800cd20 <_malloc_r>
 800da5a:	b948      	cbnz	r0, 800da70 <__smakebuf_r+0x44>
 800da5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da60:	059a      	lsls	r2, r3, #22
 800da62:	d4ef      	bmi.n	800da44 <__smakebuf_r+0x18>
 800da64:	f023 0303 	bic.w	r3, r3, #3
 800da68:	f043 0302 	orr.w	r3, r3, #2
 800da6c:	81a3      	strh	r3, [r4, #12]
 800da6e:	e7e3      	b.n	800da38 <__smakebuf_r+0xc>
 800da70:	4b0d      	ldr	r3, [pc, #52]	; (800daa8 <__smakebuf_r+0x7c>)
 800da72:	62b3      	str	r3, [r6, #40]	; 0x28
 800da74:	89a3      	ldrh	r3, [r4, #12]
 800da76:	6020      	str	r0, [r4, #0]
 800da78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da7c:	81a3      	strh	r3, [r4, #12]
 800da7e:	9b00      	ldr	r3, [sp, #0]
 800da80:	6163      	str	r3, [r4, #20]
 800da82:	9b01      	ldr	r3, [sp, #4]
 800da84:	6120      	str	r0, [r4, #16]
 800da86:	b15b      	cbz	r3, 800daa0 <__smakebuf_r+0x74>
 800da88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da8c:	4630      	mov	r0, r6
 800da8e:	f000 f8d1 	bl	800dc34 <_isatty_r>
 800da92:	b128      	cbz	r0, 800daa0 <__smakebuf_r+0x74>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	f023 0303 	bic.w	r3, r3, #3
 800da9a:	f043 0301 	orr.w	r3, r3, #1
 800da9e:	81a3      	strh	r3, [r4, #12]
 800daa0:	89a0      	ldrh	r0, [r4, #12]
 800daa2:	4305      	orrs	r5, r0
 800daa4:	81a5      	strh	r5, [r4, #12]
 800daa6:	e7cd      	b.n	800da44 <__smakebuf_r+0x18>
 800daa8:	0800d839 	.word	0x0800d839

0800daac <_malloc_usable_size_r>:
 800daac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dab0:	1f18      	subs	r0, r3, #4
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	bfbc      	itt	lt
 800dab6:	580b      	ldrlt	r3, [r1, r0]
 800dab8:	18c0      	addlt	r0, r0, r3
 800daba:	4770      	bx	lr

0800dabc <_raise_r>:
 800dabc:	291f      	cmp	r1, #31
 800dabe:	b538      	push	{r3, r4, r5, lr}
 800dac0:	4604      	mov	r4, r0
 800dac2:	460d      	mov	r5, r1
 800dac4:	d904      	bls.n	800dad0 <_raise_r+0x14>
 800dac6:	2316      	movs	r3, #22
 800dac8:	6003      	str	r3, [r0, #0]
 800daca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dace:	bd38      	pop	{r3, r4, r5, pc}
 800dad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dad2:	b112      	cbz	r2, 800dada <_raise_r+0x1e>
 800dad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dad8:	b94b      	cbnz	r3, 800daee <_raise_r+0x32>
 800dada:	4620      	mov	r0, r4
 800dadc:	f000 f830 	bl	800db40 <_getpid_r>
 800dae0:	462a      	mov	r2, r5
 800dae2:	4601      	mov	r1, r0
 800dae4:	4620      	mov	r0, r4
 800dae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800daea:	f000 b817 	b.w	800db1c <_kill_r>
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d00a      	beq.n	800db08 <_raise_r+0x4c>
 800daf2:	1c59      	adds	r1, r3, #1
 800daf4:	d103      	bne.n	800dafe <_raise_r+0x42>
 800daf6:	2316      	movs	r3, #22
 800daf8:	6003      	str	r3, [r0, #0]
 800dafa:	2001      	movs	r0, #1
 800dafc:	e7e7      	b.n	800dace <_raise_r+0x12>
 800dafe:	2400      	movs	r4, #0
 800db00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db04:	4628      	mov	r0, r5
 800db06:	4798      	blx	r3
 800db08:	2000      	movs	r0, #0
 800db0a:	e7e0      	b.n	800dace <_raise_r+0x12>

0800db0c <raise>:
 800db0c:	4b02      	ldr	r3, [pc, #8]	; (800db18 <raise+0xc>)
 800db0e:	4601      	mov	r1, r0
 800db10:	6818      	ldr	r0, [r3, #0]
 800db12:	f7ff bfd3 	b.w	800dabc <_raise_r>
 800db16:	bf00      	nop
 800db18:	2000005c 	.word	0x2000005c

0800db1c <_kill_r>:
 800db1c:	b538      	push	{r3, r4, r5, lr}
 800db1e:	4d07      	ldr	r5, [pc, #28]	; (800db3c <_kill_r+0x20>)
 800db20:	2300      	movs	r3, #0
 800db22:	4604      	mov	r4, r0
 800db24:	4608      	mov	r0, r1
 800db26:	4611      	mov	r1, r2
 800db28:	602b      	str	r3, [r5, #0]
 800db2a:	f7f8 fec3 	bl	80068b4 <_kill>
 800db2e:	1c43      	adds	r3, r0, #1
 800db30:	d102      	bne.n	800db38 <_kill_r+0x1c>
 800db32:	682b      	ldr	r3, [r5, #0]
 800db34:	b103      	cbz	r3, 800db38 <_kill_r+0x1c>
 800db36:	6023      	str	r3, [r4, #0]
 800db38:	bd38      	pop	{r3, r4, r5, pc}
 800db3a:	bf00      	nop
 800db3c:	20000f5c 	.word	0x20000f5c

0800db40 <_getpid_r>:
 800db40:	f7f8 beb0 	b.w	80068a4 <_getpid>

0800db44 <__sread>:
 800db44:	b510      	push	{r4, lr}
 800db46:	460c      	mov	r4, r1
 800db48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db4c:	f000 f894 	bl	800dc78 <_read_r>
 800db50:	2800      	cmp	r0, #0
 800db52:	bfab      	itete	ge
 800db54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db56:	89a3      	ldrhlt	r3, [r4, #12]
 800db58:	181b      	addge	r3, r3, r0
 800db5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db5e:	bfac      	ite	ge
 800db60:	6563      	strge	r3, [r4, #84]	; 0x54
 800db62:	81a3      	strhlt	r3, [r4, #12]
 800db64:	bd10      	pop	{r4, pc}

0800db66 <__swrite>:
 800db66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db6a:	461f      	mov	r7, r3
 800db6c:	898b      	ldrh	r3, [r1, #12]
 800db6e:	05db      	lsls	r3, r3, #23
 800db70:	4605      	mov	r5, r0
 800db72:	460c      	mov	r4, r1
 800db74:	4616      	mov	r6, r2
 800db76:	d505      	bpl.n	800db84 <__swrite+0x1e>
 800db78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db7c:	2302      	movs	r3, #2
 800db7e:	2200      	movs	r2, #0
 800db80:	f000 f868 	bl	800dc54 <_lseek_r>
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db8e:	81a3      	strh	r3, [r4, #12]
 800db90:	4632      	mov	r2, r6
 800db92:	463b      	mov	r3, r7
 800db94:	4628      	mov	r0, r5
 800db96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db9a:	f000 b817 	b.w	800dbcc <_write_r>

0800db9e <__sseek>:
 800db9e:	b510      	push	{r4, lr}
 800dba0:	460c      	mov	r4, r1
 800dba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba6:	f000 f855 	bl	800dc54 <_lseek_r>
 800dbaa:	1c43      	adds	r3, r0, #1
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	bf15      	itete	ne
 800dbb0:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbba:	81a3      	strheq	r3, [r4, #12]
 800dbbc:	bf18      	it	ne
 800dbbe:	81a3      	strhne	r3, [r4, #12]
 800dbc0:	bd10      	pop	{r4, pc}

0800dbc2 <__sclose>:
 800dbc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc6:	f000 b813 	b.w	800dbf0 <_close_r>
	...

0800dbcc <_write_r>:
 800dbcc:	b538      	push	{r3, r4, r5, lr}
 800dbce:	4d07      	ldr	r5, [pc, #28]	; (800dbec <_write_r+0x20>)
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	4608      	mov	r0, r1
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	602a      	str	r2, [r5, #0]
 800dbda:	461a      	mov	r2, r3
 800dbdc:	f7f8 fea1 	bl	8006922 <_write>
 800dbe0:	1c43      	adds	r3, r0, #1
 800dbe2:	d102      	bne.n	800dbea <_write_r+0x1e>
 800dbe4:	682b      	ldr	r3, [r5, #0]
 800dbe6:	b103      	cbz	r3, 800dbea <_write_r+0x1e>
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	bd38      	pop	{r3, r4, r5, pc}
 800dbec:	20000f5c 	.word	0x20000f5c

0800dbf0 <_close_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4d06      	ldr	r5, [pc, #24]	; (800dc0c <_close_r+0x1c>)
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	4608      	mov	r0, r1
 800dbfa:	602b      	str	r3, [r5, #0]
 800dbfc:	f7f8 fead 	bl	800695a <_close>
 800dc00:	1c43      	adds	r3, r0, #1
 800dc02:	d102      	bne.n	800dc0a <_close_r+0x1a>
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	b103      	cbz	r3, 800dc0a <_close_r+0x1a>
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	bd38      	pop	{r3, r4, r5, pc}
 800dc0c:	20000f5c 	.word	0x20000f5c

0800dc10 <_fstat_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	4d07      	ldr	r5, [pc, #28]	; (800dc30 <_fstat_r+0x20>)
 800dc14:	2300      	movs	r3, #0
 800dc16:	4604      	mov	r4, r0
 800dc18:	4608      	mov	r0, r1
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	602b      	str	r3, [r5, #0]
 800dc1e:	f7f8 fea8 	bl	8006972 <_fstat>
 800dc22:	1c43      	adds	r3, r0, #1
 800dc24:	d102      	bne.n	800dc2c <_fstat_r+0x1c>
 800dc26:	682b      	ldr	r3, [r5, #0]
 800dc28:	b103      	cbz	r3, 800dc2c <_fstat_r+0x1c>
 800dc2a:	6023      	str	r3, [r4, #0]
 800dc2c:	bd38      	pop	{r3, r4, r5, pc}
 800dc2e:	bf00      	nop
 800dc30:	20000f5c 	.word	0x20000f5c

0800dc34 <_isatty_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d06      	ldr	r5, [pc, #24]	; (800dc50 <_isatty_r+0x1c>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	602b      	str	r3, [r5, #0]
 800dc40:	f7f8 fea7 	bl	8006992 <_isatty>
 800dc44:	1c43      	adds	r3, r0, #1
 800dc46:	d102      	bne.n	800dc4e <_isatty_r+0x1a>
 800dc48:	682b      	ldr	r3, [r5, #0]
 800dc4a:	b103      	cbz	r3, 800dc4e <_isatty_r+0x1a>
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	20000f5c 	.word	0x20000f5c

0800dc54 <_lseek_r>:
 800dc54:	b538      	push	{r3, r4, r5, lr}
 800dc56:	4d07      	ldr	r5, [pc, #28]	; (800dc74 <_lseek_r+0x20>)
 800dc58:	4604      	mov	r4, r0
 800dc5a:	4608      	mov	r0, r1
 800dc5c:	4611      	mov	r1, r2
 800dc5e:	2200      	movs	r2, #0
 800dc60:	602a      	str	r2, [r5, #0]
 800dc62:	461a      	mov	r2, r3
 800dc64:	f7f8 fea0 	bl	80069a8 <_lseek>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_lseek_r+0x1e>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_lseek_r+0x1e>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	20000f5c 	.word	0x20000f5c

0800dc78 <_read_r>:
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	4d07      	ldr	r5, [pc, #28]	; (800dc98 <_read_r+0x20>)
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	4608      	mov	r0, r1
 800dc80:	4611      	mov	r1, r2
 800dc82:	2200      	movs	r2, #0
 800dc84:	602a      	str	r2, [r5, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	f7f8 fe2e 	bl	80068e8 <_read>
 800dc8c:	1c43      	adds	r3, r0, #1
 800dc8e:	d102      	bne.n	800dc96 <_read_r+0x1e>
 800dc90:	682b      	ldr	r3, [r5, #0]
 800dc92:	b103      	cbz	r3, 800dc96 <_read_r+0x1e>
 800dc94:	6023      	str	r3, [r4, #0]
 800dc96:	bd38      	pop	{r3, r4, r5, pc}
 800dc98:	20000f5c 	.word	0x20000f5c
 800dc9c:	00000000 	.word	0x00000000

0800dca0 <cos>:
 800dca0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dca2:	ec53 2b10 	vmov	r2, r3, d0
 800dca6:	4826      	ldr	r0, [pc, #152]	; (800dd40 <cos+0xa0>)
 800dca8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dcac:	4281      	cmp	r1, r0
 800dcae:	dc06      	bgt.n	800dcbe <cos+0x1e>
 800dcb0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800dd38 <cos+0x98>
 800dcb4:	b005      	add	sp, #20
 800dcb6:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcba:	f000 bee9 	b.w	800ea90 <__kernel_cos>
 800dcbe:	4821      	ldr	r0, [pc, #132]	; (800dd44 <cos+0xa4>)
 800dcc0:	4281      	cmp	r1, r0
 800dcc2:	dd09      	ble.n	800dcd8 <cos+0x38>
 800dcc4:	ee10 0a10 	vmov	r0, s0
 800dcc8:	4619      	mov	r1, r3
 800dcca:	f7f2 fadd 	bl	8000288 <__aeabi_dsub>
 800dcce:	ec41 0b10 	vmov	d0, r0, r1
 800dcd2:	b005      	add	sp, #20
 800dcd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcd8:	4668      	mov	r0, sp
 800dcda:	f000 fc19 	bl	800e510 <__ieee754_rem_pio2>
 800dcde:	f000 0003 	and.w	r0, r0, #3
 800dce2:	2801      	cmp	r0, #1
 800dce4:	d00b      	beq.n	800dcfe <cos+0x5e>
 800dce6:	2802      	cmp	r0, #2
 800dce8:	d016      	beq.n	800dd18 <cos+0x78>
 800dcea:	b9e0      	cbnz	r0, 800dd26 <cos+0x86>
 800dcec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dcf0:	ed9d 0b00 	vldr	d0, [sp]
 800dcf4:	f000 fecc 	bl	800ea90 <__kernel_cos>
 800dcf8:	ec51 0b10 	vmov	r0, r1, d0
 800dcfc:	e7e7      	b.n	800dcce <cos+0x2e>
 800dcfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd02:	ed9d 0b00 	vldr	d0, [sp]
 800dd06:	f001 fadb 	bl	800f2c0 <__kernel_sin>
 800dd0a:	ec53 2b10 	vmov	r2, r3, d0
 800dd0e:	ee10 0a10 	vmov	r0, s0
 800dd12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800dd16:	e7da      	b.n	800dcce <cos+0x2e>
 800dd18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd1c:	ed9d 0b00 	vldr	d0, [sp]
 800dd20:	f000 feb6 	bl	800ea90 <__kernel_cos>
 800dd24:	e7f1      	b.n	800dd0a <cos+0x6a>
 800dd26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dd2a:	ed9d 0b00 	vldr	d0, [sp]
 800dd2e:	2001      	movs	r0, #1
 800dd30:	f001 fac6 	bl	800f2c0 <__kernel_sin>
 800dd34:	e7e0      	b.n	800dcf8 <cos+0x58>
 800dd36:	bf00      	nop
	...
 800dd40:	3fe921fb 	.word	0x3fe921fb
 800dd44:	7fefffff 	.word	0x7fefffff

0800dd48 <round>:
 800dd48:	ec51 0b10 	vmov	r0, r1, d0
 800dd4c:	b570      	push	{r4, r5, r6, lr}
 800dd4e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800dd52:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800dd56:	2c13      	cmp	r4, #19
 800dd58:	ee10 2a10 	vmov	r2, s0
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	dc19      	bgt.n	800dd94 <round+0x4c>
 800dd60:	2c00      	cmp	r4, #0
 800dd62:	da09      	bge.n	800dd78 <round+0x30>
 800dd64:	3401      	adds	r4, #1
 800dd66:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dd6a:	d103      	bne.n	800dd74 <round+0x2c>
 800dd6c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dd70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd74:	2200      	movs	r2, #0
 800dd76:	e028      	b.n	800ddca <round+0x82>
 800dd78:	4d15      	ldr	r5, [pc, #84]	; (800ddd0 <round+0x88>)
 800dd7a:	4125      	asrs	r5, r4
 800dd7c:	ea01 0605 	and.w	r6, r1, r5
 800dd80:	4332      	orrs	r2, r6
 800dd82:	d00e      	beq.n	800dda2 <round+0x5a>
 800dd84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800dd88:	fa42 f404 	asr.w	r4, r2, r4
 800dd8c:	4423      	add	r3, r4
 800dd8e:	ea23 0305 	bic.w	r3, r3, r5
 800dd92:	e7ef      	b.n	800dd74 <round+0x2c>
 800dd94:	2c33      	cmp	r4, #51	; 0x33
 800dd96:	dd07      	ble.n	800dda8 <round+0x60>
 800dd98:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dd9c:	d101      	bne.n	800dda2 <round+0x5a>
 800dd9e:	f7f2 fa75 	bl	800028c <__adddf3>
 800dda2:	ec41 0b10 	vmov	d0, r0, r1
 800dda6:	bd70      	pop	{r4, r5, r6, pc}
 800dda8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800ddac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800ddb0:	40f5      	lsrs	r5, r6
 800ddb2:	4228      	tst	r0, r5
 800ddb4:	d0f5      	beq.n	800dda2 <round+0x5a>
 800ddb6:	2101      	movs	r1, #1
 800ddb8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ddbc:	fa01 f404 	lsl.w	r4, r1, r4
 800ddc0:	1912      	adds	r2, r2, r4
 800ddc2:	bf28      	it	cs
 800ddc4:	185b      	addcs	r3, r3, r1
 800ddc6:	ea22 0205 	bic.w	r2, r2, r5
 800ddca:	4619      	mov	r1, r3
 800ddcc:	4610      	mov	r0, r2
 800ddce:	e7e8      	b.n	800dda2 <round+0x5a>
 800ddd0:	000fffff 	.word	0x000fffff
 800ddd4:	00000000 	.word	0x00000000

0800ddd8 <sin>:
 800ddd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddda:	ec53 2b10 	vmov	r2, r3, d0
 800ddde:	4828      	ldr	r0, [pc, #160]	; (800de80 <sin+0xa8>)
 800dde0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dde4:	4281      	cmp	r1, r0
 800dde6:	dc07      	bgt.n	800ddf8 <sin+0x20>
 800dde8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800de78 <sin+0xa0>
 800ddec:	2000      	movs	r0, #0
 800ddee:	b005      	add	sp, #20
 800ddf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddf4:	f001 ba64 	b.w	800f2c0 <__kernel_sin>
 800ddf8:	4822      	ldr	r0, [pc, #136]	; (800de84 <sin+0xac>)
 800ddfa:	4281      	cmp	r1, r0
 800ddfc:	dd09      	ble.n	800de12 <sin+0x3a>
 800ddfe:	ee10 0a10 	vmov	r0, s0
 800de02:	4619      	mov	r1, r3
 800de04:	f7f2 fa40 	bl	8000288 <__aeabi_dsub>
 800de08:	ec41 0b10 	vmov	d0, r0, r1
 800de0c:	b005      	add	sp, #20
 800de0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800de12:	4668      	mov	r0, sp
 800de14:	f000 fb7c 	bl	800e510 <__ieee754_rem_pio2>
 800de18:	f000 0003 	and.w	r0, r0, #3
 800de1c:	2801      	cmp	r0, #1
 800de1e:	d00c      	beq.n	800de3a <sin+0x62>
 800de20:	2802      	cmp	r0, #2
 800de22:	d011      	beq.n	800de48 <sin+0x70>
 800de24:	b9f0      	cbnz	r0, 800de64 <sin+0x8c>
 800de26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de2a:	ed9d 0b00 	vldr	d0, [sp]
 800de2e:	2001      	movs	r0, #1
 800de30:	f001 fa46 	bl	800f2c0 <__kernel_sin>
 800de34:	ec51 0b10 	vmov	r0, r1, d0
 800de38:	e7e6      	b.n	800de08 <sin+0x30>
 800de3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de3e:	ed9d 0b00 	vldr	d0, [sp]
 800de42:	f000 fe25 	bl	800ea90 <__kernel_cos>
 800de46:	e7f5      	b.n	800de34 <sin+0x5c>
 800de48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de4c:	ed9d 0b00 	vldr	d0, [sp]
 800de50:	2001      	movs	r0, #1
 800de52:	f001 fa35 	bl	800f2c0 <__kernel_sin>
 800de56:	ec53 2b10 	vmov	r2, r3, d0
 800de5a:	ee10 0a10 	vmov	r0, s0
 800de5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800de62:	e7d1      	b.n	800de08 <sin+0x30>
 800de64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800de68:	ed9d 0b00 	vldr	d0, [sp]
 800de6c:	f000 fe10 	bl	800ea90 <__kernel_cos>
 800de70:	e7f1      	b.n	800de56 <sin+0x7e>
 800de72:	bf00      	nop
 800de74:	f3af 8000 	nop.w
	...
 800de80:	3fe921fb 	.word	0x3fe921fb
 800de84:	7fefffff 	.word	0x7fefffff

0800de88 <asin>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	ed2d 8b02 	vpush	{d8}
 800de8e:	ec55 4b10 	vmov	r4, r5, d0
 800de92:	f000 f85d 	bl	800df50 <__ieee754_asin>
 800de96:	4622      	mov	r2, r4
 800de98:	462b      	mov	r3, r5
 800de9a:	4620      	mov	r0, r4
 800de9c:	4629      	mov	r1, r5
 800de9e:	eeb0 8a40 	vmov.f32	s16, s0
 800dea2:	eef0 8a60 	vmov.f32	s17, s1
 800dea6:	f7f2 fe41 	bl	8000b2c <__aeabi_dcmpun>
 800deaa:	b9a8      	cbnz	r0, 800ded8 <asin+0x50>
 800deac:	ec45 4b10 	vmov	d0, r4, r5
 800deb0:	f001 fc66 	bl	800f780 <fabs>
 800deb4:	4b0c      	ldr	r3, [pc, #48]	; (800dee8 <asin+0x60>)
 800deb6:	ec51 0b10 	vmov	r0, r1, d0
 800deba:	2200      	movs	r2, #0
 800debc:	f7f2 fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 800dec0:	b150      	cbz	r0, 800ded8 <asin+0x50>
 800dec2:	f7fc ffc5 	bl	800ae50 <__errno>
 800dec6:	ecbd 8b02 	vpop	{d8}
 800deca:	2321      	movs	r3, #33	; 0x21
 800decc:	6003      	str	r3, [r0, #0]
 800dece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ded2:	4806      	ldr	r0, [pc, #24]	; (800deec <asin+0x64>)
 800ded4:	f001 bce0 	b.w	800f898 <nan>
 800ded8:	eeb0 0a48 	vmov.f32	s0, s16
 800dedc:	eef0 0a68 	vmov.f32	s1, s17
 800dee0:	ecbd 8b02 	vpop	{d8}
 800dee4:	bd38      	pop	{r3, r4, r5, pc}
 800dee6:	bf00      	nop
 800dee8:	3ff00000 	.word	0x3ff00000
 800deec:	08010918 	.word	0x08010918

0800def0 <atan2>:
 800def0:	f000 ba42 	b.w	800e378 <__ieee754_atan2>

0800def4 <sqrt>:
 800def4:	b538      	push	{r3, r4, r5, lr}
 800def6:	ed2d 8b02 	vpush	{d8}
 800defa:	ec55 4b10 	vmov	r4, r5, d0
 800defe:	f000 fd13 	bl	800e928 <__ieee754_sqrt>
 800df02:	4622      	mov	r2, r4
 800df04:	462b      	mov	r3, r5
 800df06:	4620      	mov	r0, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	eeb0 8a40 	vmov.f32	s16, s0
 800df0e:	eef0 8a60 	vmov.f32	s17, s1
 800df12:	f7f2 fe0b 	bl	8000b2c <__aeabi_dcmpun>
 800df16:	b990      	cbnz	r0, 800df3e <sqrt+0x4a>
 800df18:	2200      	movs	r2, #0
 800df1a:	2300      	movs	r3, #0
 800df1c:	4620      	mov	r0, r4
 800df1e:	4629      	mov	r1, r5
 800df20:	f7f2 fddc 	bl	8000adc <__aeabi_dcmplt>
 800df24:	b158      	cbz	r0, 800df3e <sqrt+0x4a>
 800df26:	f7fc ff93 	bl	800ae50 <__errno>
 800df2a:	2321      	movs	r3, #33	; 0x21
 800df2c:	6003      	str	r3, [r0, #0]
 800df2e:	2200      	movs	r2, #0
 800df30:	2300      	movs	r3, #0
 800df32:	4610      	mov	r0, r2
 800df34:	4619      	mov	r1, r3
 800df36:	f7f2 fc89 	bl	800084c <__aeabi_ddiv>
 800df3a:	ec41 0b18 	vmov	d8, r0, r1
 800df3e:	eeb0 0a48 	vmov.f32	s0, s16
 800df42:	eef0 0a68 	vmov.f32	s1, s17
 800df46:	ecbd 8b02 	vpop	{d8}
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	0000      	movs	r0, r0
	...

0800df50 <__ieee754_asin>:
 800df50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df54:	ed2d 8b04 	vpush	{d8-d9}
 800df58:	ec55 4b10 	vmov	r4, r5, d0
 800df5c:	4bcc      	ldr	r3, [pc, #816]	; (800e290 <__ieee754_asin+0x340>)
 800df5e:	b083      	sub	sp, #12
 800df60:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800df64:	4598      	cmp	r8, r3
 800df66:	9501      	str	r5, [sp, #4]
 800df68:	dd35      	ble.n	800dfd6 <__ieee754_asin+0x86>
 800df6a:	ee10 3a10 	vmov	r3, s0
 800df6e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800df72:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800df76:	ea58 0303 	orrs.w	r3, r8, r3
 800df7a:	d117      	bne.n	800dfac <__ieee754_asin+0x5c>
 800df7c:	a3aa      	add	r3, pc, #680	; (adr r3, 800e228 <__ieee754_asin+0x2d8>)
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	ee10 0a10 	vmov	r0, s0
 800df86:	4629      	mov	r1, r5
 800df88:	f7f2 fb36 	bl	80005f8 <__aeabi_dmul>
 800df8c:	a3a8      	add	r3, pc, #672	; (adr r3, 800e230 <__ieee754_asin+0x2e0>)
 800df8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df92:	4606      	mov	r6, r0
 800df94:	460f      	mov	r7, r1
 800df96:	4620      	mov	r0, r4
 800df98:	4629      	mov	r1, r5
 800df9a:	f7f2 fb2d 	bl	80005f8 <__aeabi_dmul>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	4639      	mov	r1, r7
 800dfa6:	f7f2 f971 	bl	800028c <__adddf3>
 800dfaa:	e00b      	b.n	800dfc4 <__ieee754_asin+0x74>
 800dfac:	ee10 2a10 	vmov	r2, s0
 800dfb0:	462b      	mov	r3, r5
 800dfb2:	ee10 0a10 	vmov	r0, s0
 800dfb6:	4629      	mov	r1, r5
 800dfb8:	f7f2 f966 	bl	8000288 <__aeabi_dsub>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	f7f2 fc44 	bl	800084c <__aeabi_ddiv>
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	460d      	mov	r5, r1
 800dfc8:	ec45 4b10 	vmov	d0, r4, r5
 800dfcc:	b003      	add	sp, #12
 800dfce:	ecbd 8b04 	vpop	{d8-d9}
 800dfd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd6:	4baf      	ldr	r3, [pc, #700]	; (800e294 <__ieee754_asin+0x344>)
 800dfd8:	4598      	cmp	r8, r3
 800dfda:	dc11      	bgt.n	800e000 <__ieee754_asin+0xb0>
 800dfdc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dfe0:	f280 80ae 	bge.w	800e140 <__ieee754_asin+0x1f0>
 800dfe4:	a394      	add	r3, pc, #592	; (adr r3, 800e238 <__ieee754_asin+0x2e8>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	ee10 0a10 	vmov	r0, s0
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7f2 f94c 	bl	800028c <__adddf3>
 800dff4:	4ba8      	ldr	r3, [pc, #672]	; (800e298 <__ieee754_asin+0x348>)
 800dff6:	2200      	movs	r2, #0
 800dff8:	f7f2 fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	d1e3      	bne.n	800dfc8 <__ieee754_asin+0x78>
 800e000:	ec45 4b10 	vmov	d0, r4, r5
 800e004:	f001 fbbc 	bl	800f780 <fabs>
 800e008:	49a3      	ldr	r1, [pc, #652]	; (800e298 <__ieee754_asin+0x348>)
 800e00a:	ec53 2b10 	vmov	r2, r3, d0
 800e00e:	2000      	movs	r0, #0
 800e010:	f7f2 f93a 	bl	8000288 <__aeabi_dsub>
 800e014:	4ba1      	ldr	r3, [pc, #644]	; (800e29c <__ieee754_asin+0x34c>)
 800e016:	2200      	movs	r2, #0
 800e018:	f7f2 faee 	bl	80005f8 <__aeabi_dmul>
 800e01c:	a388      	add	r3, pc, #544	; (adr r3, 800e240 <__ieee754_asin+0x2f0>)
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	4604      	mov	r4, r0
 800e024:	460d      	mov	r5, r1
 800e026:	f7f2 fae7 	bl	80005f8 <__aeabi_dmul>
 800e02a:	a387      	add	r3, pc, #540	; (adr r3, 800e248 <__ieee754_asin+0x2f8>)
 800e02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e030:	f7f2 f92c 	bl	800028c <__adddf3>
 800e034:	4622      	mov	r2, r4
 800e036:	462b      	mov	r3, r5
 800e038:	f7f2 fade 	bl	80005f8 <__aeabi_dmul>
 800e03c:	a384      	add	r3, pc, #528	; (adr r3, 800e250 <__ieee754_asin+0x300>)
 800e03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e042:	f7f2 f921 	bl	8000288 <__aeabi_dsub>
 800e046:	4622      	mov	r2, r4
 800e048:	462b      	mov	r3, r5
 800e04a:	f7f2 fad5 	bl	80005f8 <__aeabi_dmul>
 800e04e:	a382      	add	r3, pc, #520	; (adr r3, 800e258 <__ieee754_asin+0x308>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	f7f2 f91a 	bl	800028c <__adddf3>
 800e058:	4622      	mov	r2, r4
 800e05a:	462b      	mov	r3, r5
 800e05c:	f7f2 facc 	bl	80005f8 <__aeabi_dmul>
 800e060:	a37f      	add	r3, pc, #508	; (adr r3, 800e260 <__ieee754_asin+0x310>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f7f2 f90f 	bl	8000288 <__aeabi_dsub>
 800e06a:	4622      	mov	r2, r4
 800e06c:	462b      	mov	r3, r5
 800e06e:	f7f2 fac3 	bl	80005f8 <__aeabi_dmul>
 800e072:	a37d      	add	r3, pc, #500	; (adr r3, 800e268 <__ieee754_asin+0x318>)
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	f7f2 f908 	bl	800028c <__adddf3>
 800e07c:	4622      	mov	r2, r4
 800e07e:	462b      	mov	r3, r5
 800e080:	f7f2 faba 	bl	80005f8 <__aeabi_dmul>
 800e084:	a37a      	add	r3, pc, #488	; (adr r3, 800e270 <__ieee754_asin+0x320>)
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	ec41 0b18 	vmov	d8, r0, r1
 800e08e:	4620      	mov	r0, r4
 800e090:	4629      	mov	r1, r5
 800e092:	f7f2 fab1 	bl	80005f8 <__aeabi_dmul>
 800e096:	a378      	add	r3, pc, #480	; (adr r3, 800e278 <__ieee754_asin+0x328>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	f7f2 f8f4 	bl	8000288 <__aeabi_dsub>
 800e0a0:	4622      	mov	r2, r4
 800e0a2:	462b      	mov	r3, r5
 800e0a4:	f7f2 faa8 	bl	80005f8 <__aeabi_dmul>
 800e0a8:	a375      	add	r3, pc, #468	; (adr r3, 800e280 <__ieee754_asin+0x330>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	f7f2 f8ed 	bl	800028c <__adddf3>
 800e0b2:	4622      	mov	r2, r4
 800e0b4:	462b      	mov	r3, r5
 800e0b6:	f7f2 fa9f 	bl	80005f8 <__aeabi_dmul>
 800e0ba:	a373      	add	r3, pc, #460	; (adr r3, 800e288 <__ieee754_asin+0x338>)
 800e0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c0:	f7f2 f8e2 	bl	8000288 <__aeabi_dsub>
 800e0c4:	4622      	mov	r2, r4
 800e0c6:	462b      	mov	r3, r5
 800e0c8:	f7f2 fa96 	bl	80005f8 <__aeabi_dmul>
 800e0cc:	4b72      	ldr	r3, [pc, #456]	; (800e298 <__ieee754_asin+0x348>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	f7f2 f8dc 	bl	800028c <__adddf3>
 800e0d4:	ec45 4b10 	vmov	d0, r4, r5
 800e0d8:	4606      	mov	r6, r0
 800e0da:	460f      	mov	r7, r1
 800e0dc:	f000 fc24 	bl	800e928 <__ieee754_sqrt>
 800e0e0:	4b6f      	ldr	r3, [pc, #444]	; (800e2a0 <__ieee754_asin+0x350>)
 800e0e2:	4598      	cmp	r8, r3
 800e0e4:	ec5b ab10 	vmov	sl, fp, d0
 800e0e8:	f340 80dc 	ble.w	800e2a4 <__ieee754_asin+0x354>
 800e0ec:	4632      	mov	r2, r6
 800e0ee:	463b      	mov	r3, r7
 800e0f0:	ec51 0b18 	vmov	r0, r1, d8
 800e0f4:	f7f2 fbaa 	bl	800084c <__aeabi_ddiv>
 800e0f8:	4652      	mov	r2, sl
 800e0fa:	465b      	mov	r3, fp
 800e0fc:	f7f2 fa7c 	bl	80005f8 <__aeabi_dmul>
 800e100:	4652      	mov	r2, sl
 800e102:	465b      	mov	r3, fp
 800e104:	f7f2 f8c2 	bl	800028c <__adddf3>
 800e108:	4602      	mov	r2, r0
 800e10a:	460b      	mov	r3, r1
 800e10c:	f7f2 f8be 	bl	800028c <__adddf3>
 800e110:	a347      	add	r3, pc, #284	; (adr r3, 800e230 <__ieee754_asin+0x2e0>)
 800e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e116:	f7f2 f8b7 	bl	8000288 <__aeabi_dsub>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	a142      	add	r1, pc, #264	; (adr r1, 800e228 <__ieee754_asin+0x2d8>)
 800e120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e124:	f7f2 f8b0 	bl	8000288 <__aeabi_dsub>
 800e128:	9b01      	ldr	r3, [sp, #4]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	bfdc      	itt	le
 800e12e:	4602      	movle	r2, r0
 800e130:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800e134:	4604      	mov	r4, r0
 800e136:	460d      	mov	r5, r1
 800e138:	bfdc      	itt	le
 800e13a:	4614      	movle	r4, r2
 800e13c:	461d      	movle	r5, r3
 800e13e:	e743      	b.n	800dfc8 <__ieee754_asin+0x78>
 800e140:	ee10 2a10 	vmov	r2, s0
 800e144:	ee10 0a10 	vmov	r0, s0
 800e148:	462b      	mov	r3, r5
 800e14a:	4629      	mov	r1, r5
 800e14c:	f7f2 fa54 	bl	80005f8 <__aeabi_dmul>
 800e150:	a33b      	add	r3, pc, #236	; (adr r3, 800e240 <__ieee754_asin+0x2f0>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	4606      	mov	r6, r0
 800e158:	460f      	mov	r7, r1
 800e15a:	f7f2 fa4d 	bl	80005f8 <__aeabi_dmul>
 800e15e:	a33a      	add	r3, pc, #232	; (adr r3, 800e248 <__ieee754_asin+0x2f8>)
 800e160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e164:	f7f2 f892 	bl	800028c <__adddf3>
 800e168:	4632      	mov	r2, r6
 800e16a:	463b      	mov	r3, r7
 800e16c:	f7f2 fa44 	bl	80005f8 <__aeabi_dmul>
 800e170:	a337      	add	r3, pc, #220	; (adr r3, 800e250 <__ieee754_asin+0x300>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	f7f2 f887 	bl	8000288 <__aeabi_dsub>
 800e17a:	4632      	mov	r2, r6
 800e17c:	463b      	mov	r3, r7
 800e17e:	f7f2 fa3b 	bl	80005f8 <__aeabi_dmul>
 800e182:	a335      	add	r3, pc, #212	; (adr r3, 800e258 <__ieee754_asin+0x308>)
 800e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e188:	f7f2 f880 	bl	800028c <__adddf3>
 800e18c:	4632      	mov	r2, r6
 800e18e:	463b      	mov	r3, r7
 800e190:	f7f2 fa32 	bl	80005f8 <__aeabi_dmul>
 800e194:	a332      	add	r3, pc, #200	; (adr r3, 800e260 <__ieee754_asin+0x310>)
 800e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19a:	f7f2 f875 	bl	8000288 <__aeabi_dsub>
 800e19e:	4632      	mov	r2, r6
 800e1a0:	463b      	mov	r3, r7
 800e1a2:	f7f2 fa29 	bl	80005f8 <__aeabi_dmul>
 800e1a6:	a330      	add	r3, pc, #192	; (adr r3, 800e268 <__ieee754_asin+0x318>)
 800e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ac:	f7f2 f86e 	bl	800028c <__adddf3>
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	463b      	mov	r3, r7
 800e1b4:	f7f2 fa20 	bl	80005f8 <__aeabi_dmul>
 800e1b8:	a32d      	add	r3, pc, #180	; (adr r3, 800e270 <__ieee754_asin+0x320>)
 800e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1be:	4680      	mov	r8, r0
 800e1c0:	4689      	mov	r9, r1
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	4639      	mov	r1, r7
 800e1c6:	f7f2 fa17 	bl	80005f8 <__aeabi_dmul>
 800e1ca:	a32b      	add	r3, pc, #172	; (adr r3, 800e278 <__ieee754_asin+0x328>)
 800e1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d0:	f7f2 f85a 	bl	8000288 <__aeabi_dsub>
 800e1d4:	4632      	mov	r2, r6
 800e1d6:	463b      	mov	r3, r7
 800e1d8:	f7f2 fa0e 	bl	80005f8 <__aeabi_dmul>
 800e1dc:	a328      	add	r3, pc, #160	; (adr r3, 800e280 <__ieee754_asin+0x330>)
 800e1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e2:	f7f2 f853 	bl	800028c <__adddf3>
 800e1e6:	4632      	mov	r2, r6
 800e1e8:	463b      	mov	r3, r7
 800e1ea:	f7f2 fa05 	bl	80005f8 <__aeabi_dmul>
 800e1ee:	a326      	add	r3, pc, #152	; (adr r3, 800e288 <__ieee754_asin+0x338>)
 800e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f4:	f7f2 f848 	bl	8000288 <__aeabi_dsub>
 800e1f8:	4632      	mov	r2, r6
 800e1fa:	463b      	mov	r3, r7
 800e1fc:	f7f2 f9fc 	bl	80005f8 <__aeabi_dmul>
 800e200:	4b25      	ldr	r3, [pc, #148]	; (800e298 <__ieee754_asin+0x348>)
 800e202:	2200      	movs	r2, #0
 800e204:	f7f2 f842 	bl	800028c <__adddf3>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	4640      	mov	r0, r8
 800e20e:	4649      	mov	r1, r9
 800e210:	f7f2 fb1c 	bl	800084c <__aeabi_ddiv>
 800e214:	4622      	mov	r2, r4
 800e216:	462b      	mov	r3, r5
 800e218:	f7f2 f9ee 	bl	80005f8 <__aeabi_dmul>
 800e21c:	4602      	mov	r2, r0
 800e21e:	460b      	mov	r3, r1
 800e220:	4620      	mov	r0, r4
 800e222:	4629      	mov	r1, r5
 800e224:	e6bf      	b.n	800dfa6 <__ieee754_asin+0x56>
 800e226:	bf00      	nop
 800e228:	54442d18 	.word	0x54442d18
 800e22c:	3ff921fb 	.word	0x3ff921fb
 800e230:	33145c07 	.word	0x33145c07
 800e234:	3c91a626 	.word	0x3c91a626
 800e238:	8800759c 	.word	0x8800759c
 800e23c:	7e37e43c 	.word	0x7e37e43c
 800e240:	0dfdf709 	.word	0x0dfdf709
 800e244:	3f023de1 	.word	0x3f023de1
 800e248:	7501b288 	.word	0x7501b288
 800e24c:	3f49efe0 	.word	0x3f49efe0
 800e250:	b5688f3b 	.word	0xb5688f3b
 800e254:	3fa48228 	.word	0x3fa48228
 800e258:	0e884455 	.word	0x0e884455
 800e25c:	3fc9c155 	.word	0x3fc9c155
 800e260:	03eb6f7d 	.word	0x03eb6f7d
 800e264:	3fd4d612 	.word	0x3fd4d612
 800e268:	55555555 	.word	0x55555555
 800e26c:	3fc55555 	.word	0x3fc55555
 800e270:	b12e9282 	.word	0xb12e9282
 800e274:	3fb3b8c5 	.word	0x3fb3b8c5
 800e278:	1b8d0159 	.word	0x1b8d0159
 800e27c:	3fe6066c 	.word	0x3fe6066c
 800e280:	9c598ac8 	.word	0x9c598ac8
 800e284:	40002ae5 	.word	0x40002ae5
 800e288:	1c8a2d4b 	.word	0x1c8a2d4b
 800e28c:	40033a27 	.word	0x40033a27
 800e290:	3fefffff 	.word	0x3fefffff
 800e294:	3fdfffff 	.word	0x3fdfffff
 800e298:	3ff00000 	.word	0x3ff00000
 800e29c:	3fe00000 	.word	0x3fe00000
 800e2a0:	3fef3332 	.word	0x3fef3332
 800e2a4:	ee10 2a10 	vmov	r2, s0
 800e2a8:	ee10 0a10 	vmov	r0, s0
 800e2ac:	465b      	mov	r3, fp
 800e2ae:	4659      	mov	r1, fp
 800e2b0:	f7f1 ffec 	bl	800028c <__adddf3>
 800e2b4:	4632      	mov	r2, r6
 800e2b6:	463b      	mov	r3, r7
 800e2b8:	ec41 0b19 	vmov	d9, r0, r1
 800e2bc:	ec51 0b18 	vmov	r0, r1, d8
 800e2c0:	f7f2 fac4 	bl	800084c <__aeabi_ddiv>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	ec51 0b19 	vmov	r0, r1, d9
 800e2cc:	f7f2 f994 	bl	80005f8 <__aeabi_dmul>
 800e2d0:	f04f 0800 	mov.w	r8, #0
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	460f      	mov	r7, r1
 800e2d8:	4642      	mov	r2, r8
 800e2da:	465b      	mov	r3, fp
 800e2dc:	4640      	mov	r0, r8
 800e2de:	4659      	mov	r1, fp
 800e2e0:	f7f2 f98a 	bl	80005f8 <__aeabi_dmul>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	460b      	mov	r3, r1
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	4629      	mov	r1, r5
 800e2ec:	f7f1 ffcc 	bl	8000288 <__aeabi_dsub>
 800e2f0:	4642      	mov	r2, r8
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	460d      	mov	r5, r1
 800e2f6:	465b      	mov	r3, fp
 800e2f8:	4650      	mov	r0, sl
 800e2fa:	4659      	mov	r1, fp
 800e2fc:	f7f1 ffc6 	bl	800028c <__adddf3>
 800e300:	4602      	mov	r2, r0
 800e302:	460b      	mov	r3, r1
 800e304:	4620      	mov	r0, r4
 800e306:	4629      	mov	r1, r5
 800e308:	f7f2 faa0 	bl	800084c <__aeabi_ddiv>
 800e30c:	4602      	mov	r2, r0
 800e30e:	460b      	mov	r3, r1
 800e310:	f7f1 ffbc 	bl	800028c <__adddf3>
 800e314:	4602      	mov	r2, r0
 800e316:	460b      	mov	r3, r1
 800e318:	a113      	add	r1, pc, #76	; (adr r1, 800e368 <__ieee754_asin+0x418>)
 800e31a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e31e:	f7f1 ffb3 	bl	8000288 <__aeabi_dsub>
 800e322:	4602      	mov	r2, r0
 800e324:	460b      	mov	r3, r1
 800e326:	4630      	mov	r0, r6
 800e328:	4639      	mov	r1, r7
 800e32a:	f7f1 ffad 	bl	8000288 <__aeabi_dsub>
 800e32e:	4642      	mov	r2, r8
 800e330:	4604      	mov	r4, r0
 800e332:	460d      	mov	r5, r1
 800e334:	465b      	mov	r3, fp
 800e336:	4640      	mov	r0, r8
 800e338:	4659      	mov	r1, fp
 800e33a:	f7f1 ffa7 	bl	800028c <__adddf3>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	a10b      	add	r1, pc, #44	; (adr r1, 800e370 <__ieee754_asin+0x420>)
 800e344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e348:	f7f1 ff9e 	bl	8000288 <__aeabi_dsub>
 800e34c:	4602      	mov	r2, r0
 800e34e:	460b      	mov	r3, r1
 800e350:	4620      	mov	r0, r4
 800e352:	4629      	mov	r1, r5
 800e354:	f7f1 ff98 	bl	8000288 <__aeabi_dsub>
 800e358:	4602      	mov	r2, r0
 800e35a:	460b      	mov	r3, r1
 800e35c:	a104      	add	r1, pc, #16	; (adr r1, 800e370 <__ieee754_asin+0x420>)
 800e35e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e362:	e6df      	b.n	800e124 <__ieee754_asin+0x1d4>
 800e364:	f3af 8000 	nop.w
 800e368:	33145c07 	.word	0x33145c07
 800e36c:	3c91a626 	.word	0x3c91a626
 800e370:	54442d18 	.word	0x54442d18
 800e374:	3fe921fb 	.word	0x3fe921fb

0800e378 <__ieee754_atan2>:
 800e378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e37c:	ec57 6b11 	vmov	r6, r7, d1
 800e380:	4273      	negs	r3, r6
 800e382:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e508 <__ieee754_atan2+0x190>
 800e386:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e38a:	4333      	orrs	r3, r6
 800e38c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e390:	4573      	cmp	r3, lr
 800e392:	ec51 0b10 	vmov	r0, r1, d0
 800e396:	ee11 8a10 	vmov	r8, s2
 800e39a:	d80a      	bhi.n	800e3b2 <__ieee754_atan2+0x3a>
 800e39c:	4244      	negs	r4, r0
 800e39e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e3a2:	4304      	orrs	r4, r0
 800e3a4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e3a8:	4574      	cmp	r4, lr
 800e3aa:	ee10 9a10 	vmov	r9, s0
 800e3ae:	468c      	mov	ip, r1
 800e3b0:	d907      	bls.n	800e3c2 <__ieee754_atan2+0x4a>
 800e3b2:	4632      	mov	r2, r6
 800e3b4:	463b      	mov	r3, r7
 800e3b6:	f7f1 ff69 	bl	800028c <__adddf3>
 800e3ba:	ec41 0b10 	vmov	d0, r0, r1
 800e3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3c2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e3c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e3ca:	4334      	orrs	r4, r6
 800e3cc:	d103      	bne.n	800e3d6 <__ieee754_atan2+0x5e>
 800e3ce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3d2:	f001 b835 	b.w	800f440 <atan>
 800e3d6:	17bc      	asrs	r4, r7, #30
 800e3d8:	f004 0402 	and.w	r4, r4, #2
 800e3dc:	ea53 0909 	orrs.w	r9, r3, r9
 800e3e0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e3e4:	d107      	bne.n	800e3f6 <__ieee754_atan2+0x7e>
 800e3e6:	2c02      	cmp	r4, #2
 800e3e8:	d060      	beq.n	800e4ac <__ieee754_atan2+0x134>
 800e3ea:	2c03      	cmp	r4, #3
 800e3ec:	d1e5      	bne.n	800e3ba <__ieee754_atan2+0x42>
 800e3ee:	a142      	add	r1, pc, #264	; (adr r1, 800e4f8 <__ieee754_atan2+0x180>)
 800e3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3f4:	e7e1      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e3f6:	ea52 0808 	orrs.w	r8, r2, r8
 800e3fa:	d106      	bne.n	800e40a <__ieee754_atan2+0x92>
 800e3fc:	f1bc 0f00 	cmp.w	ip, #0
 800e400:	da5f      	bge.n	800e4c2 <__ieee754_atan2+0x14a>
 800e402:	a13f      	add	r1, pc, #252	; (adr r1, 800e500 <__ieee754_atan2+0x188>)
 800e404:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e408:	e7d7      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e40a:	4572      	cmp	r2, lr
 800e40c:	d10f      	bne.n	800e42e <__ieee754_atan2+0xb6>
 800e40e:	4293      	cmp	r3, r2
 800e410:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e414:	d107      	bne.n	800e426 <__ieee754_atan2+0xae>
 800e416:	2c02      	cmp	r4, #2
 800e418:	d84c      	bhi.n	800e4b4 <__ieee754_atan2+0x13c>
 800e41a:	4b35      	ldr	r3, [pc, #212]	; (800e4f0 <__ieee754_atan2+0x178>)
 800e41c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e420:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e424:	e7c9      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e426:	2c02      	cmp	r4, #2
 800e428:	d848      	bhi.n	800e4bc <__ieee754_atan2+0x144>
 800e42a:	4b32      	ldr	r3, [pc, #200]	; (800e4f4 <__ieee754_atan2+0x17c>)
 800e42c:	e7f6      	b.n	800e41c <__ieee754_atan2+0xa4>
 800e42e:	4573      	cmp	r3, lr
 800e430:	d0e4      	beq.n	800e3fc <__ieee754_atan2+0x84>
 800e432:	1a9b      	subs	r3, r3, r2
 800e434:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e438:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e43c:	da1e      	bge.n	800e47c <__ieee754_atan2+0x104>
 800e43e:	2f00      	cmp	r7, #0
 800e440:	da01      	bge.n	800e446 <__ieee754_atan2+0xce>
 800e442:	323c      	adds	r2, #60	; 0x3c
 800e444:	db1e      	blt.n	800e484 <__ieee754_atan2+0x10c>
 800e446:	4632      	mov	r2, r6
 800e448:	463b      	mov	r3, r7
 800e44a:	f7f2 f9ff 	bl	800084c <__aeabi_ddiv>
 800e44e:	ec41 0b10 	vmov	d0, r0, r1
 800e452:	f001 f995 	bl	800f780 <fabs>
 800e456:	f000 fff3 	bl	800f440 <atan>
 800e45a:	ec51 0b10 	vmov	r0, r1, d0
 800e45e:	2c01      	cmp	r4, #1
 800e460:	d013      	beq.n	800e48a <__ieee754_atan2+0x112>
 800e462:	2c02      	cmp	r4, #2
 800e464:	d015      	beq.n	800e492 <__ieee754_atan2+0x11a>
 800e466:	2c00      	cmp	r4, #0
 800e468:	d0a7      	beq.n	800e3ba <__ieee754_atan2+0x42>
 800e46a:	a319      	add	r3, pc, #100	; (adr r3, 800e4d0 <__ieee754_atan2+0x158>)
 800e46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e470:	f7f1 ff0a 	bl	8000288 <__aeabi_dsub>
 800e474:	a318      	add	r3, pc, #96	; (adr r3, 800e4d8 <__ieee754_atan2+0x160>)
 800e476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47a:	e014      	b.n	800e4a6 <__ieee754_atan2+0x12e>
 800e47c:	a118      	add	r1, pc, #96	; (adr r1, 800e4e0 <__ieee754_atan2+0x168>)
 800e47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e482:	e7ec      	b.n	800e45e <__ieee754_atan2+0xe6>
 800e484:	2000      	movs	r0, #0
 800e486:	2100      	movs	r1, #0
 800e488:	e7e9      	b.n	800e45e <__ieee754_atan2+0xe6>
 800e48a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e48e:	4619      	mov	r1, r3
 800e490:	e793      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e492:	a30f      	add	r3, pc, #60	; (adr r3, 800e4d0 <__ieee754_atan2+0x158>)
 800e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e498:	f7f1 fef6 	bl	8000288 <__aeabi_dsub>
 800e49c:	4602      	mov	r2, r0
 800e49e:	460b      	mov	r3, r1
 800e4a0:	a10d      	add	r1, pc, #52	; (adr r1, 800e4d8 <__ieee754_atan2+0x160>)
 800e4a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4a6:	f7f1 feef 	bl	8000288 <__aeabi_dsub>
 800e4aa:	e786      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e4ac:	a10a      	add	r1, pc, #40	; (adr r1, 800e4d8 <__ieee754_atan2+0x160>)
 800e4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4b2:	e782      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e4b4:	a10c      	add	r1, pc, #48	; (adr r1, 800e4e8 <__ieee754_atan2+0x170>)
 800e4b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4ba:	e77e      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e4bc:	2000      	movs	r0, #0
 800e4be:	2100      	movs	r1, #0
 800e4c0:	e77b      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e4c2:	a107      	add	r1, pc, #28	; (adr r1, 800e4e0 <__ieee754_atan2+0x168>)
 800e4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4c8:	e777      	b.n	800e3ba <__ieee754_atan2+0x42>
 800e4ca:	bf00      	nop
 800e4cc:	f3af 8000 	nop.w
 800e4d0:	33145c07 	.word	0x33145c07
 800e4d4:	3ca1a626 	.word	0x3ca1a626
 800e4d8:	54442d18 	.word	0x54442d18
 800e4dc:	400921fb 	.word	0x400921fb
 800e4e0:	54442d18 	.word	0x54442d18
 800e4e4:	3ff921fb 	.word	0x3ff921fb
 800e4e8:	54442d18 	.word	0x54442d18
 800e4ec:	3fe921fb 	.word	0x3fe921fb
 800e4f0:	08010a88 	.word	0x08010a88
 800e4f4:	08010aa0 	.word	0x08010aa0
 800e4f8:	54442d18 	.word	0x54442d18
 800e4fc:	c00921fb 	.word	0xc00921fb
 800e500:	54442d18 	.word	0x54442d18
 800e504:	bff921fb 	.word	0xbff921fb
 800e508:	7ff00000 	.word	0x7ff00000
 800e50c:	00000000 	.word	0x00000000

0800e510 <__ieee754_rem_pio2>:
 800e510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e514:	ed2d 8b02 	vpush	{d8}
 800e518:	ec55 4b10 	vmov	r4, r5, d0
 800e51c:	4bca      	ldr	r3, [pc, #808]	; (800e848 <__ieee754_rem_pio2+0x338>)
 800e51e:	b08b      	sub	sp, #44	; 0x2c
 800e520:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e524:	4598      	cmp	r8, r3
 800e526:	4682      	mov	sl, r0
 800e528:	9502      	str	r5, [sp, #8]
 800e52a:	dc08      	bgt.n	800e53e <__ieee754_rem_pio2+0x2e>
 800e52c:	2200      	movs	r2, #0
 800e52e:	2300      	movs	r3, #0
 800e530:	ed80 0b00 	vstr	d0, [r0]
 800e534:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e538:	f04f 0b00 	mov.w	fp, #0
 800e53c:	e028      	b.n	800e590 <__ieee754_rem_pio2+0x80>
 800e53e:	4bc3      	ldr	r3, [pc, #780]	; (800e84c <__ieee754_rem_pio2+0x33c>)
 800e540:	4598      	cmp	r8, r3
 800e542:	dc78      	bgt.n	800e636 <__ieee754_rem_pio2+0x126>
 800e544:	9b02      	ldr	r3, [sp, #8]
 800e546:	4ec2      	ldr	r6, [pc, #776]	; (800e850 <__ieee754_rem_pio2+0x340>)
 800e548:	2b00      	cmp	r3, #0
 800e54a:	ee10 0a10 	vmov	r0, s0
 800e54e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e810 <__ieee754_rem_pio2+0x300>)
 800e550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e554:	4629      	mov	r1, r5
 800e556:	dd39      	ble.n	800e5cc <__ieee754_rem_pio2+0xbc>
 800e558:	f7f1 fe96 	bl	8000288 <__aeabi_dsub>
 800e55c:	45b0      	cmp	r8, r6
 800e55e:	4604      	mov	r4, r0
 800e560:	460d      	mov	r5, r1
 800e562:	d01b      	beq.n	800e59c <__ieee754_rem_pio2+0x8c>
 800e564:	a3ac      	add	r3, pc, #688	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56a:	f7f1 fe8d 	bl	8000288 <__aeabi_dsub>
 800e56e:	4602      	mov	r2, r0
 800e570:	460b      	mov	r3, r1
 800e572:	e9ca 2300 	strd	r2, r3, [sl]
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f1 fe85 	bl	8000288 <__aeabi_dsub>
 800e57e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e584:	f7f1 fe80 	bl	8000288 <__aeabi_dsub>
 800e588:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e58c:	f04f 0b01 	mov.w	fp, #1
 800e590:	4658      	mov	r0, fp
 800e592:	b00b      	add	sp, #44	; 0x2c
 800e594:	ecbd 8b02 	vpop	{d8}
 800e598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e59c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e820 <__ieee754_rem_pio2+0x310>)
 800e59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a2:	f7f1 fe71 	bl	8000288 <__aeabi_dsub>
 800e5a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	f7f1 fe6a 	bl	8000288 <__aeabi_dsub>
 800e5b4:	4602      	mov	r2, r0
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	e9ca 2300 	strd	r2, r3, [sl]
 800e5bc:	4620      	mov	r0, r4
 800e5be:	4629      	mov	r1, r5
 800e5c0:	f7f1 fe62 	bl	8000288 <__aeabi_dsub>
 800e5c4:	a398      	add	r3, pc, #608	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ca:	e7db      	b.n	800e584 <__ieee754_rem_pio2+0x74>
 800e5cc:	f7f1 fe5e 	bl	800028c <__adddf3>
 800e5d0:	45b0      	cmp	r8, r6
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	460d      	mov	r5, r1
 800e5d6:	d016      	beq.n	800e606 <__ieee754_rem_pio2+0xf6>
 800e5d8:	a38f      	add	r3, pc, #572	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5de:	f7f1 fe55 	bl	800028c <__adddf3>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	e9ca 2300 	strd	r2, r3, [sl]
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7f1 fe4b 	bl	8000288 <__aeabi_dsub>
 800e5f2:	a389      	add	r3, pc, #548	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	f7f1 fe48 	bl	800028c <__adddf3>
 800e5fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e600:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e604:	e7c4      	b.n	800e590 <__ieee754_rem_pio2+0x80>
 800e606:	a386      	add	r3, pc, #536	; (adr r3, 800e820 <__ieee754_rem_pio2+0x310>)
 800e608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60c:	f7f1 fe3e 	bl	800028c <__adddf3>
 800e610:	a385      	add	r3, pc, #532	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	4604      	mov	r4, r0
 800e618:	460d      	mov	r5, r1
 800e61a:	f7f1 fe37 	bl	800028c <__adddf3>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	e9ca 2300 	strd	r2, r3, [sl]
 800e626:	4620      	mov	r0, r4
 800e628:	4629      	mov	r1, r5
 800e62a:	f7f1 fe2d 	bl	8000288 <__aeabi_dsub>
 800e62e:	a37e      	add	r3, pc, #504	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e634:	e7e0      	b.n	800e5f8 <__ieee754_rem_pio2+0xe8>
 800e636:	4b87      	ldr	r3, [pc, #540]	; (800e854 <__ieee754_rem_pio2+0x344>)
 800e638:	4598      	cmp	r8, r3
 800e63a:	f300 80d9 	bgt.w	800e7f0 <__ieee754_rem_pio2+0x2e0>
 800e63e:	f001 f89f 	bl	800f780 <fabs>
 800e642:	ec55 4b10 	vmov	r4, r5, d0
 800e646:	ee10 0a10 	vmov	r0, s0
 800e64a:	a379      	add	r3, pc, #484	; (adr r3, 800e830 <__ieee754_rem_pio2+0x320>)
 800e64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e650:	4629      	mov	r1, r5
 800e652:	f7f1 ffd1 	bl	80005f8 <__aeabi_dmul>
 800e656:	4b80      	ldr	r3, [pc, #512]	; (800e858 <__ieee754_rem_pio2+0x348>)
 800e658:	2200      	movs	r2, #0
 800e65a:	f7f1 fe17 	bl	800028c <__adddf3>
 800e65e:	f7f2 fa7b 	bl	8000b58 <__aeabi_d2iz>
 800e662:	4683      	mov	fp, r0
 800e664:	f7f1 ff5e 	bl	8000524 <__aeabi_i2d>
 800e668:	4602      	mov	r2, r0
 800e66a:	460b      	mov	r3, r1
 800e66c:	ec43 2b18 	vmov	d8, r2, r3
 800e670:	a367      	add	r3, pc, #412	; (adr r3, 800e810 <__ieee754_rem_pio2+0x300>)
 800e672:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e676:	f7f1 ffbf 	bl	80005f8 <__aeabi_dmul>
 800e67a:	4602      	mov	r2, r0
 800e67c:	460b      	mov	r3, r1
 800e67e:	4620      	mov	r0, r4
 800e680:	4629      	mov	r1, r5
 800e682:	f7f1 fe01 	bl	8000288 <__aeabi_dsub>
 800e686:	a364      	add	r3, pc, #400	; (adr r3, 800e818 <__ieee754_rem_pio2+0x308>)
 800e688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68c:	4606      	mov	r6, r0
 800e68e:	460f      	mov	r7, r1
 800e690:	ec51 0b18 	vmov	r0, r1, d8
 800e694:	f7f1 ffb0 	bl	80005f8 <__aeabi_dmul>
 800e698:	f1bb 0f1f 	cmp.w	fp, #31
 800e69c:	4604      	mov	r4, r0
 800e69e:	460d      	mov	r5, r1
 800e6a0:	dc0d      	bgt.n	800e6be <__ieee754_rem_pio2+0x1ae>
 800e6a2:	4b6e      	ldr	r3, [pc, #440]	; (800e85c <__ieee754_rem_pio2+0x34c>)
 800e6a4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ac:	4543      	cmp	r3, r8
 800e6ae:	d006      	beq.n	800e6be <__ieee754_rem_pio2+0x1ae>
 800e6b0:	4622      	mov	r2, r4
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	4639      	mov	r1, r7
 800e6b8:	f7f1 fde6 	bl	8000288 <__aeabi_dsub>
 800e6bc:	e00f      	b.n	800e6de <__ieee754_rem_pio2+0x1ce>
 800e6be:	462b      	mov	r3, r5
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	f7f1 fddf 	bl	8000288 <__aeabi_dsub>
 800e6ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e6ce:	9303      	str	r3, [sp, #12]
 800e6d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e6d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e6d8:	f1b8 0f10 	cmp.w	r8, #16
 800e6dc:	dc02      	bgt.n	800e6e4 <__ieee754_rem_pio2+0x1d4>
 800e6de:	e9ca 0100 	strd	r0, r1, [sl]
 800e6e2:	e039      	b.n	800e758 <__ieee754_rem_pio2+0x248>
 800e6e4:	a34e      	add	r3, pc, #312	; (adr r3, 800e820 <__ieee754_rem_pio2+0x310>)
 800e6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ea:	ec51 0b18 	vmov	r0, r1, d8
 800e6ee:	f7f1 ff83 	bl	80005f8 <__aeabi_dmul>
 800e6f2:	4604      	mov	r4, r0
 800e6f4:	460d      	mov	r5, r1
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	4639      	mov	r1, r7
 800e6fe:	f7f1 fdc3 	bl	8000288 <__aeabi_dsub>
 800e702:	4602      	mov	r2, r0
 800e704:	460b      	mov	r3, r1
 800e706:	4680      	mov	r8, r0
 800e708:	4689      	mov	r9, r1
 800e70a:	4630      	mov	r0, r6
 800e70c:	4639      	mov	r1, r7
 800e70e:	f7f1 fdbb 	bl	8000288 <__aeabi_dsub>
 800e712:	4622      	mov	r2, r4
 800e714:	462b      	mov	r3, r5
 800e716:	f7f1 fdb7 	bl	8000288 <__aeabi_dsub>
 800e71a:	a343      	add	r3, pc, #268	; (adr r3, 800e828 <__ieee754_rem_pio2+0x318>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	4604      	mov	r4, r0
 800e722:	460d      	mov	r5, r1
 800e724:	ec51 0b18 	vmov	r0, r1, d8
 800e728:	f7f1 ff66 	bl	80005f8 <__aeabi_dmul>
 800e72c:	4622      	mov	r2, r4
 800e72e:	462b      	mov	r3, r5
 800e730:	f7f1 fdaa 	bl	8000288 <__aeabi_dsub>
 800e734:	4602      	mov	r2, r0
 800e736:	460b      	mov	r3, r1
 800e738:	4604      	mov	r4, r0
 800e73a:	460d      	mov	r5, r1
 800e73c:	4640      	mov	r0, r8
 800e73e:	4649      	mov	r1, r9
 800e740:	f7f1 fda2 	bl	8000288 <__aeabi_dsub>
 800e744:	9a03      	ldr	r2, [sp, #12]
 800e746:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e74a:	1ad3      	subs	r3, r2, r3
 800e74c:	2b31      	cmp	r3, #49	; 0x31
 800e74e:	dc24      	bgt.n	800e79a <__ieee754_rem_pio2+0x28a>
 800e750:	e9ca 0100 	strd	r0, r1, [sl]
 800e754:	4646      	mov	r6, r8
 800e756:	464f      	mov	r7, r9
 800e758:	e9da 8900 	ldrd	r8, r9, [sl]
 800e75c:	4630      	mov	r0, r6
 800e75e:	4642      	mov	r2, r8
 800e760:	464b      	mov	r3, r9
 800e762:	4639      	mov	r1, r7
 800e764:	f7f1 fd90 	bl	8000288 <__aeabi_dsub>
 800e768:	462b      	mov	r3, r5
 800e76a:	4622      	mov	r2, r4
 800e76c:	f7f1 fd8c 	bl	8000288 <__aeabi_dsub>
 800e770:	9b02      	ldr	r3, [sp, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e778:	f6bf af0a 	bge.w	800e590 <__ieee754_rem_pio2+0x80>
 800e77c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e780:	f8ca 3004 	str.w	r3, [sl, #4]
 800e784:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e788:	f8ca 8000 	str.w	r8, [sl]
 800e78c:	f8ca 0008 	str.w	r0, [sl, #8]
 800e790:	f8ca 300c 	str.w	r3, [sl, #12]
 800e794:	f1cb 0b00 	rsb	fp, fp, #0
 800e798:	e6fa      	b.n	800e590 <__ieee754_rem_pio2+0x80>
 800e79a:	a327      	add	r3, pc, #156	; (adr r3, 800e838 <__ieee754_rem_pio2+0x328>)
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	ec51 0b18 	vmov	r0, r1, d8
 800e7a4:	f7f1 ff28 	bl	80005f8 <__aeabi_dmul>
 800e7a8:	4604      	mov	r4, r0
 800e7aa:	460d      	mov	r5, r1
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	4640      	mov	r0, r8
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	f7f1 fd68 	bl	8000288 <__aeabi_dsub>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4606      	mov	r6, r0
 800e7be:	460f      	mov	r7, r1
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	f7f1 fd60 	bl	8000288 <__aeabi_dsub>
 800e7c8:	4622      	mov	r2, r4
 800e7ca:	462b      	mov	r3, r5
 800e7cc:	f7f1 fd5c 	bl	8000288 <__aeabi_dsub>
 800e7d0:	a31b      	add	r3, pc, #108	; (adr r3, 800e840 <__ieee754_rem_pio2+0x330>)
 800e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	460d      	mov	r5, r1
 800e7da:	ec51 0b18 	vmov	r0, r1, d8
 800e7de:	f7f1 ff0b 	bl	80005f8 <__aeabi_dmul>
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	462b      	mov	r3, r5
 800e7e6:	f7f1 fd4f 	bl	8000288 <__aeabi_dsub>
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	460d      	mov	r5, r1
 800e7ee:	e75f      	b.n	800e6b0 <__ieee754_rem_pio2+0x1a0>
 800e7f0:	4b1b      	ldr	r3, [pc, #108]	; (800e860 <__ieee754_rem_pio2+0x350>)
 800e7f2:	4598      	cmp	r8, r3
 800e7f4:	dd36      	ble.n	800e864 <__ieee754_rem_pio2+0x354>
 800e7f6:	ee10 2a10 	vmov	r2, s0
 800e7fa:	462b      	mov	r3, r5
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	4629      	mov	r1, r5
 800e800:	f7f1 fd42 	bl	8000288 <__aeabi_dsub>
 800e804:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e808:	e9ca 0100 	strd	r0, r1, [sl]
 800e80c:	e694      	b.n	800e538 <__ieee754_rem_pio2+0x28>
 800e80e:	bf00      	nop
 800e810:	54400000 	.word	0x54400000
 800e814:	3ff921fb 	.word	0x3ff921fb
 800e818:	1a626331 	.word	0x1a626331
 800e81c:	3dd0b461 	.word	0x3dd0b461
 800e820:	1a600000 	.word	0x1a600000
 800e824:	3dd0b461 	.word	0x3dd0b461
 800e828:	2e037073 	.word	0x2e037073
 800e82c:	3ba3198a 	.word	0x3ba3198a
 800e830:	6dc9c883 	.word	0x6dc9c883
 800e834:	3fe45f30 	.word	0x3fe45f30
 800e838:	2e000000 	.word	0x2e000000
 800e83c:	3ba3198a 	.word	0x3ba3198a
 800e840:	252049c1 	.word	0x252049c1
 800e844:	397b839a 	.word	0x397b839a
 800e848:	3fe921fb 	.word	0x3fe921fb
 800e84c:	4002d97b 	.word	0x4002d97b
 800e850:	3ff921fb 	.word	0x3ff921fb
 800e854:	413921fb 	.word	0x413921fb
 800e858:	3fe00000 	.word	0x3fe00000
 800e85c:	08010ab8 	.word	0x08010ab8
 800e860:	7fefffff 	.word	0x7fefffff
 800e864:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e868:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e86c:	ee10 0a10 	vmov	r0, s0
 800e870:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e874:	ee10 6a10 	vmov	r6, s0
 800e878:	460f      	mov	r7, r1
 800e87a:	f7f2 f96d 	bl	8000b58 <__aeabi_d2iz>
 800e87e:	f7f1 fe51 	bl	8000524 <__aeabi_i2d>
 800e882:	4602      	mov	r2, r0
 800e884:	460b      	mov	r3, r1
 800e886:	4630      	mov	r0, r6
 800e888:	4639      	mov	r1, r7
 800e88a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e88e:	f7f1 fcfb 	bl	8000288 <__aeabi_dsub>
 800e892:	4b23      	ldr	r3, [pc, #140]	; (800e920 <__ieee754_rem_pio2+0x410>)
 800e894:	2200      	movs	r2, #0
 800e896:	f7f1 feaf 	bl	80005f8 <__aeabi_dmul>
 800e89a:	460f      	mov	r7, r1
 800e89c:	4606      	mov	r6, r0
 800e89e:	f7f2 f95b 	bl	8000b58 <__aeabi_d2iz>
 800e8a2:	f7f1 fe3f 	bl	8000524 <__aeabi_i2d>
 800e8a6:	4602      	mov	r2, r0
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	4630      	mov	r0, r6
 800e8ac:	4639      	mov	r1, r7
 800e8ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e8b2:	f7f1 fce9 	bl	8000288 <__aeabi_dsub>
 800e8b6:	4b1a      	ldr	r3, [pc, #104]	; (800e920 <__ieee754_rem_pio2+0x410>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f7f1 fe9d 	bl	80005f8 <__aeabi_dmul>
 800e8be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e8c2:	ad04      	add	r5, sp, #16
 800e8c4:	f04f 0803 	mov.w	r8, #3
 800e8c8:	46a9      	mov	r9, r5
 800e8ca:	2600      	movs	r6, #0
 800e8cc:	2700      	movs	r7, #0
 800e8ce:	4632      	mov	r2, r6
 800e8d0:	463b      	mov	r3, r7
 800e8d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e8d6:	46c3      	mov	fp, r8
 800e8d8:	3d08      	subs	r5, #8
 800e8da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e8de:	f7f2 f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d1f3      	bne.n	800e8ce <__ieee754_rem_pio2+0x3be>
 800e8e6:	4b0f      	ldr	r3, [pc, #60]	; (800e924 <__ieee754_rem_pio2+0x414>)
 800e8e8:	9301      	str	r3, [sp, #4]
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	4622      	mov	r2, r4
 800e8f0:	465b      	mov	r3, fp
 800e8f2:	4651      	mov	r1, sl
 800e8f4:	4648      	mov	r0, r9
 800e8f6:	f000 f993 	bl	800ec20 <__kernel_rem_pio2>
 800e8fa:	9b02      	ldr	r3, [sp, #8]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	4683      	mov	fp, r0
 800e900:	f6bf ae46 	bge.w	800e590 <__ieee754_rem_pio2+0x80>
 800e904:	e9da 2100 	ldrd	r2, r1, [sl]
 800e908:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e90c:	e9ca 2300 	strd	r2, r3, [sl]
 800e910:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e914:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e918:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e91c:	e73a      	b.n	800e794 <__ieee754_rem_pio2+0x284>
 800e91e:	bf00      	nop
 800e920:	41700000 	.word	0x41700000
 800e924:	08010b38 	.word	0x08010b38

0800e928 <__ieee754_sqrt>:
 800e928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e92c:	ec55 4b10 	vmov	r4, r5, d0
 800e930:	4e55      	ldr	r6, [pc, #340]	; (800ea88 <__ieee754_sqrt+0x160>)
 800e932:	43ae      	bics	r6, r5
 800e934:	ee10 0a10 	vmov	r0, s0
 800e938:	ee10 3a10 	vmov	r3, s0
 800e93c:	462a      	mov	r2, r5
 800e93e:	4629      	mov	r1, r5
 800e940:	d110      	bne.n	800e964 <__ieee754_sqrt+0x3c>
 800e942:	ee10 2a10 	vmov	r2, s0
 800e946:	462b      	mov	r3, r5
 800e948:	f7f1 fe56 	bl	80005f8 <__aeabi_dmul>
 800e94c:	4602      	mov	r2, r0
 800e94e:	460b      	mov	r3, r1
 800e950:	4620      	mov	r0, r4
 800e952:	4629      	mov	r1, r5
 800e954:	f7f1 fc9a 	bl	800028c <__adddf3>
 800e958:	4604      	mov	r4, r0
 800e95a:	460d      	mov	r5, r1
 800e95c:	ec45 4b10 	vmov	d0, r4, r5
 800e960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e964:	2d00      	cmp	r5, #0
 800e966:	dc10      	bgt.n	800e98a <__ieee754_sqrt+0x62>
 800e968:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e96c:	4330      	orrs	r0, r6
 800e96e:	d0f5      	beq.n	800e95c <__ieee754_sqrt+0x34>
 800e970:	b15d      	cbz	r5, 800e98a <__ieee754_sqrt+0x62>
 800e972:	ee10 2a10 	vmov	r2, s0
 800e976:	462b      	mov	r3, r5
 800e978:	ee10 0a10 	vmov	r0, s0
 800e97c:	f7f1 fc84 	bl	8000288 <__aeabi_dsub>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	f7f1 ff62 	bl	800084c <__aeabi_ddiv>
 800e988:	e7e6      	b.n	800e958 <__ieee754_sqrt+0x30>
 800e98a:	1512      	asrs	r2, r2, #20
 800e98c:	d074      	beq.n	800ea78 <__ieee754_sqrt+0x150>
 800e98e:	07d4      	lsls	r4, r2, #31
 800e990:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e994:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e99c:	bf5e      	ittt	pl
 800e99e:	0fda      	lsrpl	r2, r3, #31
 800e9a0:	005b      	lslpl	r3, r3, #1
 800e9a2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e9a6:	2400      	movs	r4, #0
 800e9a8:	0fda      	lsrs	r2, r3, #31
 800e9aa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e9ae:	107f      	asrs	r7, r7, #1
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	2516      	movs	r5, #22
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e9ba:	1886      	adds	r6, r0, r2
 800e9bc:	428e      	cmp	r6, r1
 800e9be:	bfde      	ittt	le
 800e9c0:	1b89      	suble	r1, r1, r6
 800e9c2:	18b0      	addle	r0, r6, r2
 800e9c4:	18a4      	addle	r4, r4, r2
 800e9c6:	0049      	lsls	r1, r1, #1
 800e9c8:	3d01      	subs	r5, #1
 800e9ca:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e9ce:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e9d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e9d6:	d1f0      	bne.n	800e9ba <__ieee754_sqrt+0x92>
 800e9d8:	462a      	mov	r2, r5
 800e9da:	f04f 0e20 	mov.w	lr, #32
 800e9de:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e9e2:	4281      	cmp	r1, r0
 800e9e4:	eb06 0c05 	add.w	ip, r6, r5
 800e9e8:	dc02      	bgt.n	800e9f0 <__ieee754_sqrt+0xc8>
 800e9ea:	d113      	bne.n	800ea14 <__ieee754_sqrt+0xec>
 800e9ec:	459c      	cmp	ip, r3
 800e9ee:	d811      	bhi.n	800ea14 <__ieee754_sqrt+0xec>
 800e9f0:	f1bc 0f00 	cmp.w	ip, #0
 800e9f4:	eb0c 0506 	add.w	r5, ip, r6
 800e9f8:	da43      	bge.n	800ea82 <__ieee754_sqrt+0x15a>
 800e9fa:	2d00      	cmp	r5, #0
 800e9fc:	db41      	blt.n	800ea82 <__ieee754_sqrt+0x15a>
 800e9fe:	f100 0801 	add.w	r8, r0, #1
 800ea02:	1a09      	subs	r1, r1, r0
 800ea04:	459c      	cmp	ip, r3
 800ea06:	bf88      	it	hi
 800ea08:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800ea0c:	eba3 030c 	sub.w	r3, r3, ip
 800ea10:	4432      	add	r2, r6
 800ea12:	4640      	mov	r0, r8
 800ea14:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ea18:	f1be 0e01 	subs.w	lr, lr, #1
 800ea1c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ea20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ea24:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ea28:	d1db      	bne.n	800e9e2 <__ieee754_sqrt+0xba>
 800ea2a:	430b      	orrs	r3, r1
 800ea2c:	d006      	beq.n	800ea3c <__ieee754_sqrt+0x114>
 800ea2e:	1c50      	adds	r0, r2, #1
 800ea30:	bf13      	iteet	ne
 800ea32:	3201      	addne	r2, #1
 800ea34:	3401      	addeq	r4, #1
 800ea36:	4672      	moveq	r2, lr
 800ea38:	f022 0201 	bicne.w	r2, r2, #1
 800ea3c:	1063      	asrs	r3, r4, #1
 800ea3e:	0852      	lsrs	r2, r2, #1
 800ea40:	07e1      	lsls	r1, r4, #31
 800ea42:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ea46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ea4a:	bf48      	it	mi
 800ea4c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ea50:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ea54:	4614      	mov	r4, r2
 800ea56:	e781      	b.n	800e95c <__ieee754_sqrt+0x34>
 800ea58:	0ad9      	lsrs	r1, r3, #11
 800ea5a:	3815      	subs	r0, #21
 800ea5c:	055b      	lsls	r3, r3, #21
 800ea5e:	2900      	cmp	r1, #0
 800ea60:	d0fa      	beq.n	800ea58 <__ieee754_sqrt+0x130>
 800ea62:	02cd      	lsls	r5, r1, #11
 800ea64:	d50a      	bpl.n	800ea7c <__ieee754_sqrt+0x154>
 800ea66:	f1c2 0420 	rsb	r4, r2, #32
 800ea6a:	fa23 f404 	lsr.w	r4, r3, r4
 800ea6e:	1e55      	subs	r5, r2, #1
 800ea70:	4093      	lsls	r3, r2
 800ea72:	4321      	orrs	r1, r4
 800ea74:	1b42      	subs	r2, r0, r5
 800ea76:	e78a      	b.n	800e98e <__ieee754_sqrt+0x66>
 800ea78:	4610      	mov	r0, r2
 800ea7a:	e7f0      	b.n	800ea5e <__ieee754_sqrt+0x136>
 800ea7c:	0049      	lsls	r1, r1, #1
 800ea7e:	3201      	adds	r2, #1
 800ea80:	e7ef      	b.n	800ea62 <__ieee754_sqrt+0x13a>
 800ea82:	4680      	mov	r8, r0
 800ea84:	e7bd      	b.n	800ea02 <__ieee754_sqrt+0xda>
 800ea86:	bf00      	nop
 800ea88:	7ff00000 	.word	0x7ff00000
 800ea8c:	00000000 	.word	0x00000000

0800ea90 <__kernel_cos>:
 800ea90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea94:	ec57 6b10 	vmov	r6, r7, d0
 800ea98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ea9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800eaa0:	ed8d 1b00 	vstr	d1, [sp]
 800eaa4:	da07      	bge.n	800eab6 <__kernel_cos+0x26>
 800eaa6:	ee10 0a10 	vmov	r0, s0
 800eaaa:	4639      	mov	r1, r7
 800eaac:	f7f2 f854 	bl	8000b58 <__aeabi_d2iz>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	f000 8088 	beq.w	800ebc6 <__kernel_cos+0x136>
 800eab6:	4632      	mov	r2, r6
 800eab8:	463b      	mov	r3, r7
 800eaba:	4630      	mov	r0, r6
 800eabc:	4639      	mov	r1, r7
 800eabe:	f7f1 fd9b 	bl	80005f8 <__aeabi_dmul>
 800eac2:	4b51      	ldr	r3, [pc, #324]	; (800ec08 <__kernel_cos+0x178>)
 800eac4:	2200      	movs	r2, #0
 800eac6:	4604      	mov	r4, r0
 800eac8:	460d      	mov	r5, r1
 800eaca:	f7f1 fd95 	bl	80005f8 <__aeabi_dmul>
 800eace:	a340      	add	r3, pc, #256	; (adr r3, 800ebd0 <__kernel_cos+0x140>)
 800ead0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead4:	4682      	mov	sl, r0
 800ead6:	468b      	mov	fp, r1
 800ead8:	4620      	mov	r0, r4
 800eada:	4629      	mov	r1, r5
 800eadc:	f7f1 fd8c 	bl	80005f8 <__aeabi_dmul>
 800eae0:	a33d      	add	r3, pc, #244	; (adr r3, 800ebd8 <__kernel_cos+0x148>)
 800eae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eae6:	f7f1 fbd1 	bl	800028c <__adddf3>
 800eaea:	4622      	mov	r2, r4
 800eaec:	462b      	mov	r3, r5
 800eaee:	f7f1 fd83 	bl	80005f8 <__aeabi_dmul>
 800eaf2:	a33b      	add	r3, pc, #236	; (adr r3, 800ebe0 <__kernel_cos+0x150>)
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	f7f1 fbc6 	bl	8000288 <__aeabi_dsub>
 800eafc:	4622      	mov	r2, r4
 800eafe:	462b      	mov	r3, r5
 800eb00:	f7f1 fd7a 	bl	80005f8 <__aeabi_dmul>
 800eb04:	a338      	add	r3, pc, #224	; (adr r3, 800ebe8 <__kernel_cos+0x158>)
 800eb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0a:	f7f1 fbbf 	bl	800028c <__adddf3>
 800eb0e:	4622      	mov	r2, r4
 800eb10:	462b      	mov	r3, r5
 800eb12:	f7f1 fd71 	bl	80005f8 <__aeabi_dmul>
 800eb16:	a336      	add	r3, pc, #216	; (adr r3, 800ebf0 <__kernel_cos+0x160>)
 800eb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1c:	f7f1 fbb4 	bl	8000288 <__aeabi_dsub>
 800eb20:	4622      	mov	r2, r4
 800eb22:	462b      	mov	r3, r5
 800eb24:	f7f1 fd68 	bl	80005f8 <__aeabi_dmul>
 800eb28:	a333      	add	r3, pc, #204	; (adr r3, 800ebf8 <__kernel_cos+0x168>)
 800eb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2e:	f7f1 fbad 	bl	800028c <__adddf3>
 800eb32:	4622      	mov	r2, r4
 800eb34:	462b      	mov	r3, r5
 800eb36:	f7f1 fd5f 	bl	80005f8 <__aeabi_dmul>
 800eb3a:	4622      	mov	r2, r4
 800eb3c:	462b      	mov	r3, r5
 800eb3e:	f7f1 fd5b 	bl	80005f8 <__aeabi_dmul>
 800eb42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb46:	4604      	mov	r4, r0
 800eb48:	460d      	mov	r5, r1
 800eb4a:	4630      	mov	r0, r6
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	f7f1 fd53 	bl	80005f8 <__aeabi_dmul>
 800eb52:	460b      	mov	r3, r1
 800eb54:	4602      	mov	r2, r0
 800eb56:	4629      	mov	r1, r5
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f7f1 fb95 	bl	8000288 <__aeabi_dsub>
 800eb5e:	4b2b      	ldr	r3, [pc, #172]	; (800ec0c <__kernel_cos+0x17c>)
 800eb60:	4598      	cmp	r8, r3
 800eb62:	4606      	mov	r6, r0
 800eb64:	460f      	mov	r7, r1
 800eb66:	dc10      	bgt.n	800eb8a <__kernel_cos+0xfa>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4650      	mov	r0, sl
 800eb6e:	4659      	mov	r1, fp
 800eb70:	f7f1 fb8a 	bl	8000288 <__aeabi_dsub>
 800eb74:	460b      	mov	r3, r1
 800eb76:	4926      	ldr	r1, [pc, #152]	; (800ec10 <__kernel_cos+0x180>)
 800eb78:	4602      	mov	r2, r0
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	f7f1 fb84 	bl	8000288 <__aeabi_dsub>
 800eb80:	ec41 0b10 	vmov	d0, r0, r1
 800eb84:	b003      	add	sp, #12
 800eb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8a:	4b22      	ldr	r3, [pc, #136]	; (800ec14 <__kernel_cos+0x184>)
 800eb8c:	4920      	ldr	r1, [pc, #128]	; (800ec10 <__kernel_cos+0x180>)
 800eb8e:	4598      	cmp	r8, r3
 800eb90:	bfcc      	ite	gt
 800eb92:	4d21      	ldrgt	r5, [pc, #132]	; (800ec18 <__kernel_cos+0x188>)
 800eb94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800eb98:	2400      	movs	r4, #0
 800eb9a:	4622      	mov	r2, r4
 800eb9c:	462b      	mov	r3, r5
 800eb9e:	2000      	movs	r0, #0
 800eba0:	f7f1 fb72 	bl	8000288 <__aeabi_dsub>
 800eba4:	4622      	mov	r2, r4
 800eba6:	4680      	mov	r8, r0
 800eba8:	4689      	mov	r9, r1
 800ebaa:	462b      	mov	r3, r5
 800ebac:	4650      	mov	r0, sl
 800ebae:	4659      	mov	r1, fp
 800ebb0:	f7f1 fb6a 	bl	8000288 <__aeabi_dsub>
 800ebb4:	4632      	mov	r2, r6
 800ebb6:	463b      	mov	r3, r7
 800ebb8:	f7f1 fb66 	bl	8000288 <__aeabi_dsub>
 800ebbc:	4602      	mov	r2, r0
 800ebbe:	460b      	mov	r3, r1
 800ebc0:	4640      	mov	r0, r8
 800ebc2:	4649      	mov	r1, r9
 800ebc4:	e7da      	b.n	800eb7c <__kernel_cos+0xec>
 800ebc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ec00 <__kernel_cos+0x170>
 800ebca:	e7db      	b.n	800eb84 <__kernel_cos+0xf4>
 800ebcc:	f3af 8000 	nop.w
 800ebd0:	be8838d4 	.word	0xbe8838d4
 800ebd4:	bda8fae9 	.word	0xbda8fae9
 800ebd8:	bdb4b1c4 	.word	0xbdb4b1c4
 800ebdc:	3e21ee9e 	.word	0x3e21ee9e
 800ebe0:	809c52ad 	.word	0x809c52ad
 800ebe4:	3e927e4f 	.word	0x3e927e4f
 800ebe8:	19cb1590 	.word	0x19cb1590
 800ebec:	3efa01a0 	.word	0x3efa01a0
 800ebf0:	16c15177 	.word	0x16c15177
 800ebf4:	3f56c16c 	.word	0x3f56c16c
 800ebf8:	5555554c 	.word	0x5555554c
 800ebfc:	3fa55555 	.word	0x3fa55555
 800ec00:	00000000 	.word	0x00000000
 800ec04:	3ff00000 	.word	0x3ff00000
 800ec08:	3fe00000 	.word	0x3fe00000
 800ec0c:	3fd33332 	.word	0x3fd33332
 800ec10:	3ff00000 	.word	0x3ff00000
 800ec14:	3fe90000 	.word	0x3fe90000
 800ec18:	3fd20000 	.word	0x3fd20000
 800ec1c:	00000000 	.word	0x00000000

0800ec20 <__kernel_rem_pio2>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	ed2d 8b02 	vpush	{d8}
 800ec28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ec2c:	f112 0f14 	cmn.w	r2, #20
 800ec30:	9308      	str	r3, [sp, #32]
 800ec32:	9101      	str	r1, [sp, #4]
 800ec34:	4bc4      	ldr	r3, [pc, #784]	; (800ef48 <__kernel_rem_pio2+0x328>)
 800ec36:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ec38:	900b      	str	r0, [sp, #44]	; 0x2c
 800ec3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ec3e:	9302      	str	r3, [sp, #8]
 800ec40:	9b08      	ldr	r3, [sp, #32]
 800ec42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ec46:	bfa8      	it	ge
 800ec48:	1ed4      	subge	r4, r2, #3
 800ec4a:	9306      	str	r3, [sp, #24]
 800ec4c:	bfb2      	itee	lt
 800ec4e:	2400      	movlt	r4, #0
 800ec50:	2318      	movge	r3, #24
 800ec52:	fb94 f4f3 	sdivge	r4, r4, r3
 800ec56:	f06f 0317 	mvn.w	r3, #23
 800ec5a:	fb04 3303 	mla	r3, r4, r3, r3
 800ec5e:	eb03 0a02 	add.w	sl, r3, r2
 800ec62:	9b02      	ldr	r3, [sp, #8]
 800ec64:	9a06      	ldr	r2, [sp, #24]
 800ec66:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ef38 <__kernel_rem_pio2+0x318>
 800ec6a:	eb03 0802 	add.w	r8, r3, r2
 800ec6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ec70:	1aa7      	subs	r7, r4, r2
 800ec72:	ae22      	add	r6, sp, #136	; 0x88
 800ec74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ec78:	2500      	movs	r5, #0
 800ec7a:	4545      	cmp	r5, r8
 800ec7c:	dd13      	ble.n	800eca6 <__kernel_rem_pio2+0x86>
 800ec7e:	9b08      	ldr	r3, [sp, #32]
 800ec80:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ef38 <__kernel_rem_pio2+0x318>
 800ec84:	aa22      	add	r2, sp, #136	; 0x88
 800ec86:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ec8a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ec8e:	f04f 0800 	mov.w	r8, #0
 800ec92:	9b02      	ldr	r3, [sp, #8]
 800ec94:	4598      	cmp	r8, r3
 800ec96:	dc2f      	bgt.n	800ecf8 <__kernel_rem_pio2+0xd8>
 800ec98:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ec9c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800eca0:	462f      	mov	r7, r5
 800eca2:	2600      	movs	r6, #0
 800eca4:	e01b      	b.n	800ecde <__kernel_rem_pio2+0xbe>
 800eca6:	42ef      	cmn	r7, r5
 800eca8:	d407      	bmi.n	800ecba <__kernel_rem_pio2+0x9a>
 800ecaa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ecae:	f7f1 fc39 	bl	8000524 <__aeabi_i2d>
 800ecb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ecb6:	3501      	adds	r5, #1
 800ecb8:	e7df      	b.n	800ec7a <__kernel_rem_pio2+0x5a>
 800ecba:	ec51 0b18 	vmov	r0, r1, d8
 800ecbe:	e7f8      	b.n	800ecb2 <__kernel_rem_pio2+0x92>
 800ecc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ecc8:	f7f1 fc96 	bl	80005f8 <__aeabi_dmul>
 800eccc:	4602      	mov	r2, r0
 800ecce:	460b      	mov	r3, r1
 800ecd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecd4:	f7f1 fada 	bl	800028c <__adddf3>
 800ecd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecdc:	3601      	adds	r6, #1
 800ecde:	9b06      	ldr	r3, [sp, #24]
 800ece0:	429e      	cmp	r6, r3
 800ece2:	f1a7 0708 	sub.w	r7, r7, #8
 800ece6:	ddeb      	ble.n	800ecc0 <__kernel_rem_pio2+0xa0>
 800ece8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ecec:	f108 0801 	add.w	r8, r8, #1
 800ecf0:	ecab 7b02 	vstmia	fp!, {d7}
 800ecf4:	3508      	adds	r5, #8
 800ecf6:	e7cc      	b.n	800ec92 <__kernel_rem_pio2+0x72>
 800ecf8:	9b02      	ldr	r3, [sp, #8]
 800ecfa:	aa0e      	add	r2, sp, #56	; 0x38
 800ecfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed00:	930d      	str	r3, [sp, #52]	; 0x34
 800ed02:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ed04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ed08:	9c02      	ldr	r4, [sp, #8]
 800ed0a:	930c      	str	r3, [sp, #48]	; 0x30
 800ed0c:	00e3      	lsls	r3, r4, #3
 800ed0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ed10:	ab9a      	add	r3, sp, #616	; 0x268
 800ed12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed16:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ed1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ed1e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ed20:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ed24:	46c3      	mov	fp, r8
 800ed26:	46a1      	mov	r9, r4
 800ed28:	f1b9 0f00 	cmp.w	r9, #0
 800ed2c:	f1a5 0508 	sub.w	r5, r5, #8
 800ed30:	dc77      	bgt.n	800ee22 <__kernel_rem_pio2+0x202>
 800ed32:	ec47 6b10 	vmov	d0, r6, r7
 800ed36:	4650      	mov	r0, sl
 800ed38:	f000 fdb6 	bl	800f8a8 <scalbn>
 800ed3c:	ec57 6b10 	vmov	r6, r7, d0
 800ed40:	2200      	movs	r2, #0
 800ed42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ed46:	ee10 0a10 	vmov	r0, s0
 800ed4a:	4639      	mov	r1, r7
 800ed4c:	f7f1 fc54 	bl	80005f8 <__aeabi_dmul>
 800ed50:	ec41 0b10 	vmov	d0, r0, r1
 800ed54:	f000 fd20 	bl	800f798 <floor>
 800ed58:	4b7c      	ldr	r3, [pc, #496]	; (800ef4c <__kernel_rem_pio2+0x32c>)
 800ed5a:	ec51 0b10 	vmov	r0, r1, d0
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f7f1 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ed64:	4602      	mov	r2, r0
 800ed66:	460b      	mov	r3, r1
 800ed68:	4630      	mov	r0, r6
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f7f1 fa8c 	bl	8000288 <__aeabi_dsub>
 800ed70:	460f      	mov	r7, r1
 800ed72:	4606      	mov	r6, r0
 800ed74:	f7f1 fef0 	bl	8000b58 <__aeabi_d2iz>
 800ed78:	9004      	str	r0, [sp, #16]
 800ed7a:	f7f1 fbd3 	bl	8000524 <__aeabi_i2d>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	4630      	mov	r0, r6
 800ed84:	4639      	mov	r1, r7
 800ed86:	f7f1 fa7f 	bl	8000288 <__aeabi_dsub>
 800ed8a:	f1ba 0f00 	cmp.w	sl, #0
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460f      	mov	r7, r1
 800ed92:	dd6d      	ble.n	800ee70 <__kernel_rem_pio2+0x250>
 800ed94:	1e62      	subs	r2, r4, #1
 800ed96:	ab0e      	add	r3, sp, #56	; 0x38
 800ed98:	9d04      	ldr	r5, [sp, #16]
 800ed9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ed9e:	f1ca 0118 	rsb	r1, sl, #24
 800eda2:	fa40 f301 	asr.w	r3, r0, r1
 800eda6:	441d      	add	r5, r3
 800eda8:	408b      	lsls	r3, r1
 800edaa:	1ac0      	subs	r0, r0, r3
 800edac:	ab0e      	add	r3, sp, #56	; 0x38
 800edae:	9504      	str	r5, [sp, #16]
 800edb0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800edb4:	f1ca 0317 	rsb	r3, sl, #23
 800edb8:	fa40 fb03 	asr.w	fp, r0, r3
 800edbc:	f1bb 0f00 	cmp.w	fp, #0
 800edc0:	dd65      	ble.n	800ee8e <__kernel_rem_pio2+0x26e>
 800edc2:	9b04      	ldr	r3, [sp, #16]
 800edc4:	2200      	movs	r2, #0
 800edc6:	3301      	adds	r3, #1
 800edc8:	9304      	str	r3, [sp, #16]
 800edca:	4615      	mov	r5, r2
 800edcc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800edd0:	4294      	cmp	r4, r2
 800edd2:	f300 809c 	bgt.w	800ef0e <__kernel_rem_pio2+0x2ee>
 800edd6:	f1ba 0f00 	cmp.w	sl, #0
 800edda:	dd07      	ble.n	800edec <__kernel_rem_pio2+0x1cc>
 800eddc:	f1ba 0f01 	cmp.w	sl, #1
 800ede0:	f000 80c0 	beq.w	800ef64 <__kernel_rem_pio2+0x344>
 800ede4:	f1ba 0f02 	cmp.w	sl, #2
 800ede8:	f000 80c6 	beq.w	800ef78 <__kernel_rem_pio2+0x358>
 800edec:	f1bb 0f02 	cmp.w	fp, #2
 800edf0:	d14d      	bne.n	800ee8e <__kernel_rem_pio2+0x26e>
 800edf2:	4632      	mov	r2, r6
 800edf4:	463b      	mov	r3, r7
 800edf6:	4956      	ldr	r1, [pc, #344]	; (800ef50 <__kernel_rem_pio2+0x330>)
 800edf8:	2000      	movs	r0, #0
 800edfa:	f7f1 fa45 	bl	8000288 <__aeabi_dsub>
 800edfe:	4606      	mov	r6, r0
 800ee00:	460f      	mov	r7, r1
 800ee02:	2d00      	cmp	r5, #0
 800ee04:	d043      	beq.n	800ee8e <__kernel_rem_pio2+0x26e>
 800ee06:	4650      	mov	r0, sl
 800ee08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ef40 <__kernel_rem_pio2+0x320>
 800ee0c:	f000 fd4c 	bl	800f8a8 <scalbn>
 800ee10:	4630      	mov	r0, r6
 800ee12:	4639      	mov	r1, r7
 800ee14:	ec53 2b10 	vmov	r2, r3, d0
 800ee18:	f7f1 fa36 	bl	8000288 <__aeabi_dsub>
 800ee1c:	4606      	mov	r6, r0
 800ee1e:	460f      	mov	r7, r1
 800ee20:	e035      	b.n	800ee8e <__kernel_rem_pio2+0x26e>
 800ee22:	4b4c      	ldr	r3, [pc, #304]	; (800ef54 <__kernel_rem_pio2+0x334>)
 800ee24:	2200      	movs	r2, #0
 800ee26:	4630      	mov	r0, r6
 800ee28:	4639      	mov	r1, r7
 800ee2a:	f7f1 fbe5 	bl	80005f8 <__aeabi_dmul>
 800ee2e:	f7f1 fe93 	bl	8000b58 <__aeabi_d2iz>
 800ee32:	f7f1 fb77 	bl	8000524 <__aeabi_i2d>
 800ee36:	4602      	mov	r2, r0
 800ee38:	460b      	mov	r3, r1
 800ee3a:	ec43 2b18 	vmov	d8, r2, r3
 800ee3e:	4b46      	ldr	r3, [pc, #280]	; (800ef58 <__kernel_rem_pio2+0x338>)
 800ee40:	2200      	movs	r2, #0
 800ee42:	f7f1 fbd9 	bl	80005f8 <__aeabi_dmul>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	4639      	mov	r1, r7
 800ee4e:	f7f1 fa1b 	bl	8000288 <__aeabi_dsub>
 800ee52:	f7f1 fe81 	bl	8000b58 <__aeabi_d2iz>
 800ee56:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee5a:	f84b 0b04 	str.w	r0, [fp], #4
 800ee5e:	ec51 0b18 	vmov	r0, r1, d8
 800ee62:	f7f1 fa13 	bl	800028c <__adddf3>
 800ee66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ee6a:	4606      	mov	r6, r0
 800ee6c:	460f      	mov	r7, r1
 800ee6e:	e75b      	b.n	800ed28 <__kernel_rem_pio2+0x108>
 800ee70:	d106      	bne.n	800ee80 <__kernel_rem_pio2+0x260>
 800ee72:	1e63      	subs	r3, r4, #1
 800ee74:	aa0e      	add	r2, sp, #56	; 0x38
 800ee76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ee7a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ee7e:	e79d      	b.n	800edbc <__kernel_rem_pio2+0x19c>
 800ee80:	4b36      	ldr	r3, [pc, #216]	; (800ef5c <__kernel_rem_pio2+0x33c>)
 800ee82:	2200      	movs	r2, #0
 800ee84:	f7f1 fe3e 	bl	8000b04 <__aeabi_dcmpge>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d13d      	bne.n	800ef08 <__kernel_rem_pio2+0x2e8>
 800ee8c:	4683      	mov	fp, r0
 800ee8e:	2200      	movs	r2, #0
 800ee90:	2300      	movs	r3, #0
 800ee92:	4630      	mov	r0, r6
 800ee94:	4639      	mov	r1, r7
 800ee96:	f7f1 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	f000 80c0 	beq.w	800f020 <__kernel_rem_pio2+0x400>
 800eea0:	1e65      	subs	r5, r4, #1
 800eea2:	462b      	mov	r3, r5
 800eea4:	2200      	movs	r2, #0
 800eea6:	9902      	ldr	r1, [sp, #8]
 800eea8:	428b      	cmp	r3, r1
 800eeaa:	da6c      	bge.n	800ef86 <__kernel_rem_pio2+0x366>
 800eeac:	2a00      	cmp	r2, #0
 800eeae:	f000 8089 	beq.w	800efc4 <__kernel_rem_pio2+0x3a4>
 800eeb2:	ab0e      	add	r3, sp, #56	; 0x38
 800eeb4:	f1aa 0a18 	sub.w	sl, sl, #24
 800eeb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	f000 80ad 	beq.w	800f01c <__kernel_rem_pio2+0x3fc>
 800eec2:	4650      	mov	r0, sl
 800eec4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ef40 <__kernel_rem_pio2+0x320>
 800eec8:	f000 fcee 	bl	800f8a8 <scalbn>
 800eecc:	ab9a      	add	r3, sp, #616	; 0x268
 800eece:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eed2:	ec57 6b10 	vmov	r6, r7, d0
 800eed6:	00ec      	lsls	r4, r5, #3
 800eed8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800eedc:	46aa      	mov	sl, r5
 800eede:	f1ba 0f00 	cmp.w	sl, #0
 800eee2:	f280 80d6 	bge.w	800f092 <__kernel_rem_pio2+0x472>
 800eee6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ef38 <__kernel_rem_pio2+0x318>
 800eeea:	462e      	mov	r6, r5
 800eeec:	2e00      	cmp	r6, #0
 800eeee:	f2c0 8104 	blt.w	800f0fa <__kernel_rem_pio2+0x4da>
 800eef2:	ab72      	add	r3, sp, #456	; 0x1c8
 800eef4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800eef8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ef60 <__kernel_rem_pio2+0x340>
 800eefc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800ef00:	f04f 0800 	mov.w	r8, #0
 800ef04:	1baf      	subs	r7, r5, r6
 800ef06:	e0ea      	b.n	800f0de <__kernel_rem_pio2+0x4be>
 800ef08:	f04f 0b02 	mov.w	fp, #2
 800ef0c:	e759      	b.n	800edc2 <__kernel_rem_pio2+0x1a2>
 800ef0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ef12:	b955      	cbnz	r5, 800ef2a <__kernel_rem_pio2+0x30a>
 800ef14:	b123      	cbz	r3, 800ef20 <__kernel_rem_pio2+0x300>
 800ef16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ef1a:	f8c8 3000 	str.w	r3, [r8]
 800ef1e:	2301      	movs	r3, #1
 800ef20:	3201      	adds	r2, #1
 800ef22:	f108 0804 	add.w	r8, r8, #4
 800ef26:	461d      	mov	r5, r3
 800ef28:	e752      	b.n	800edd0 <__kernel_rem_pio2+0x1b0>
 800ef2a:	1acb      	subs	r3, r1, r3
 800ef2c:	f8c8 3000 	str.w	r3, [r8]
 800ef30:	462b      	mov	r3, r5
 800ef32:	e7f5      	b.n	800ef20 <__kernel_rem_pio2+0x300>
 800ef34:	f3af 8000 	nop.w
	...
 800ef44:	3ff00000 	.word	0x3ff00000
 800ef48:	08010c80 	.word	0x08010c80
 800ef4c:	40200000 	.word	0x40200000
 800ef50:	3ff00000 	.word	0x3ff00000
 800ef54:	3e700000 	.word	0x3e700000
 800ef58:	41700000 	.word	0x41700000
 800ef5c:	3fe00000 	.word	0x3fe00000
 800ef60:	08010c40 	.word	0x08010c40
 800ef64:	1e62      	subs	r2, r4, #1
 800ef66:	ab0e      	add	r3, sp, #56	; 0x38
 800ef68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ef70:	a90e      	add	r1, sp, #56	; 0x38
 800ef72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ef76:	e739      	b.n	800edec <__kernel_rem_pio2+0x1cc>
 800ef78:	1e62      	subs	r2, r4, #1
 800ef7a:	ab0e      	add	r3, sp, #56	; 0x38
 800ef7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ef84:	e7f4      	b.n	800ef70 <__kernel_rem_pio2+0x350>
 800ef86:	a90e      	add	r1, sp, #56	; 0x38
 800ef88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ef8c:	3b01      	subs	r3, #1
 800ef8e:	430a      	orrs	r2, r1
 800ef90:	e789      	b.n	800eea6 <__kernel_rem_pio2+0x286>
 800ef92:	3301      	adds	r3, #1
 800ef94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ef98:	2900      	cmp	r1, #0
 800ef9a:	d0fa      	beq.n	800ef92 <__kernel_rem_pio2+0x372>
 800ef9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef9e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800efa2:	446a      	add	r2, sp
 800efa4:	3a98      	subs	r2, #152	; 0x98
 800efa6:	920a      	str	r2, [sp, #40]	; 0x28
 800efa8:	9a08      	ldr	r2, [sp, #32]
 800efaa:	18e3      	adds	r3, r4, r3
 800efac:	18a5      	adds	r5, r4, r2
 800efae:	aa22      	add	r2, sp, #136	; 0x88
 800efb0:	f104 0801 	add.w	r8, r4, #1
 800efb4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800efb8:	9304      	str	r3, [sp, #16]
 800efba:	9b04      	ldr	r3, [sp, #16]
 800efbc:	4543      	cmp	r3, r8
 800efbe:	da04      	bge.n	800efca <__kernel_rem_pio2+0x3aa>
 800efc0:	461c      	mov	r4, r3
 800efc2:	e6a3      	b.n	800ed0c <__kernel_rem_pio2+0xec>
 800efc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800efc6:	2301      	movs	r3, #1
 800efc8:	e7e4      	b.n	800ef94 <__kernel_rem_pio2+0x374>
 800efca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efcc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800efd0:	f7f1 faa8 	bl	8000524 <__aeabi_i2d>
 800efd4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800efd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efda:	46ab      	mov	fp, r5
 800efdc:	461c      	mov	r4, r3
 800efde:	f04f 0900 	mov.w	r9, #0
 800efe2:	2600      	movs	r6, #0
 800efe4:	2700      	movs	r7, #0
 800efe6:	9b06      	ldr	r3, [sp, #24]
 800efe8:	4599      	cmp	r9, r3
 800efea:	dd06      	ble.n	800effa <__kernel_rem_pio2+0x3da>
 800efec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efee:	e8e3 6702 	strd	r6, r7, [r3], #8
 800eff2:	f108 0801 	add.w	r8, r8, #1
 800eff6:	930a      	str	r3, [sp, #40]	; 0x28
 800eff8:	e7df      	b.n	800efba <__kernel_rem_pio2+0x39a>
 800effa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800effe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f002:	f7f1 faf9 	bl	80005f8 <__aeabi_dmul>
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	4630      	mov	r0, r6
 800f00c:	4639      	mov	r1, r7
 800f00e:	f7f1 f93d 	bl	800028c <__adddf3>
 800f012:	f109 0901 	add.w	r9, r9, #1
 800f016:	4606      	mov	r6, r0
 800f018:	460f      	mov	r7, r1
 800f01a:	e7e4      	b.n	800efe6 <__kernel_rem_pio2+0x3c6>
 800f01c:	3d01      	subs	r5, #1
 800f01e:	e748      	b.n	800eeb2 <__kernel_rem_pio2+0x292>
 800f020:	ec47 6b10 	vmov	d0, r6, r7
 800f024:	f1ca 0000 	rsb	r0, sl, #0
 800f028:	f000 fc3e 	bl	800f8a8 <scalbn>
 800f02c:	ec57 6b10 	vmov	r6, r7, d0
 800f030:	4ba0      	ldr	r3, [pc, #640]	; (800f2b4 <__kernel_rem_pio2+0x694>)
 800f032:	ee10 0a10 	vmov	r0, s0
 800f036:	2200      	movs	r2, #0
 800f038:	4639      	mov	r1, r7
 800f03a:	f7f1 fd63 	bl	8000b04 <__aeabi_dcmpge>
 800f03e:	b1f8      	cbz	r0, 800f080 <__kernel_rem_pio2+0x460>
 800f040:	4b9d      	ldr	r3, [pc, #628]	; (800f2b8 <__kernel_rem_pio2+0x698>)
 800f042:	2200      	movs	r2, #0
 800f044:	4630      	mov	r0, r6
 800f046:	4639      	mov	r1, r7
 800f048:	f7f1 fad6 	bl	80005f8 <__aeabi_dmul>
 800f04c:	f7f1 fd84 	bl	8000b58 <__aeabi_d2iz>
 800f050:	4680      	mov	r8, r0
 800f052:	f7f1 fa67 	bl	8000524 <__aeabi_i2d>
 800f056:	4b97      	ldr	r3, [pc, #604]	; (800f2b4 <__kernel_rem_pio2+0x694>)
 800f058:	2200      	movs	r2, #0
 800f05a:	f7f1 facd 	bl	80005f8 <__aeabi_dmul>
 800f05e:	460b      	mov	r3, r1
 800f060:	4602      	mov	r2, r0
 800f062:	4639      	mov	r1, r7
 800f064:	4630      	mov	r0, r6
 800f066:	f7f1 f90f 	bl	8000288 <__aeabi_dsub>
 800f06a:	f7f1 fd75 	bl	8000b58 <__aeabi_d2iz>
 800f06e:	1c65      	adds	r5, r4, #1
 800f070:	ab0e      	add	r3, sp, #56	; 0x38
 800f072:	f10a 0a18 	add.w	sl, sl, #24
 800f076:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f07a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f07e:	e720      	b.n	800eec2 <__kernel_rem_pio2+0x2a2>
 800f080:	4630      	mov	r0, r6
 800f082:	4639      	mov	r1, r7
 800f084:	f7f1 fd68 	bl	8000b58 <__aeabi_d2iz>
 800f088:	ab0e      	add	r3, sp, #56	; 0x38
 800f08a:	4625      	mov	r5, r4
 800f08c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f090:	e717      	b.n	800eec2 <__kernel_rem_pio2+0x2a2>
 800f092:	ab0e      	add	r3, sp, #56	; 0x38
 800f094:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f098:	f7f1 fa44 	bl	8000524 <__aeabi_i2d>
 800f09c:	4632      	mov	r2, r6
 800f09e:	463b      	mov	r3, r7
 800f0a0:	f7f1 faaa 	bl	80005f8 <__aeabi_dmul>
 800f0a4:	4b84      	ldr	r3, [pc, #528]	; (800f2b8 <__kernel_rem_pio2+0x698>)
 800f0a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	4639      	mov	r1, r7
 800f0b0:	f7f1 faa2 	bl	80005f8 <__aeabi_dmul>
 800f0b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	460f      	mov	r7, r1
 800f0bc:	e70f      	b.n	800eede <__kernel_rem_pio2+0x2be>
 800f0be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f0c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f0c6:	f7f1 fa97 	bl	80005f8 <__aeabi_dmul>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f0d2:	f7f1 f8db 	bl	800028c <__adddf3>
 800f0d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f0da:	f108 0801 	add.w	r8, r8, #1
 800f0de:	9b02      	ldr	r3, [sp, #8]
 800f0e0:	4598      	cmp	r8, r3
 800f0e2:	dc01      	bgt.n	800f0e8 <__kernel_rem_pio2+0x4c8>
 800f0e4:	45b8      	cmp	r8, r7
 800f0e6:	ddea      	ble.n	800f0be <__kernel_rem_pio2+0x49e>
 800f0e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f0ec:	ab4a      	add	r3, sp, #296	; 0x128
 800f0ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f0f2:	ed87 7b00 	vstr	d7, [r7]
 800f0f6:	3e01      	subs	r6, #1
 800f0f8:	e6f8      	b.n	800eeec <__kernel_rem_pio2+0x2cc>
 800f0fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f0fc:	2b02      	cmp	r3, #2
 800f0fe:	dc0b      	bgt.n	800f118 <__kernel_rem_pio2+0x4f8>
 800f100:	2b00      	cmp	r3, #0
 800f102:	dc35      	bgt.n	800f170 <__kernel_rem_pio2+0x550>
 800f104:	d059      	beq.n	800f1ba <__kernel_rem_pio2+0x59a>
 800f106:	9b04      	ldr	r3, [sp, #16]
 800f108:	f003 0007 	and.w	r0, r3, #7
 800f10c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f110:	ecbd 8b02 	vpop	{d8}
 800f114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f118:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	d1f3      	bne.n	800f106 <__kernel_rem_pio2+0x4e6>
 800f11e:	ab4a      	add	r3, sp, #296	; 0x128
 800f120:	4423      	add	r3, r4
 800f122:	9306      	str	r3, [sp, #24]
 800f124:	461c      	mov	r4, r3
 800f126:	469a      	mov	sl, r3
 800f128:	9502      	str	r5, [sp, #8]
 800f12a:	9b02      	ldr	r3, [sp, #8]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f1aa 0a08 	sub.w	sl, sl, #8
 800f132:	dc6b      	bgt.n	800f20c <__kernel_rem_pio2+0x5ec>
 800f134:	46aa      	mov	sl, r5
 800f136:	f1ba 0f01 	cmp.w	sl, #1
 800f13a:	f1a4 0408 	sub.w	r4, r4, #8
 800f13e:	f300 8085 	bgt.w	800f24c <__kernel_rem_pio2+0x62c>
 800f142:	9c06      	ldr	r4, [sp, #24]
 800f144:	2000      	movs	r0, #0
 800f146:	3408      	adds	r4, #8
 800f148:	2100      	movs	r1, #0
 800f14a:	2d01      	cmp	r5, #1
 800f14c:	f300 809d 	bgt.w	800f28a <__kernel_rem_pio2+0x66a>
 800f150:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f154:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f158:	f1bb 0f00 	cmp.w	fp, #0
 800f15c:	f040 809b 	bne.w	800f296 <__kernel_rem_pio2+0x676>
 800f160:	9b01      	ldr	r3, [sp, #4]
 800f162:	e9c3 5600 	strd	r5, r6, [r3]
 800f166:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f16a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f16e:	e7ca      	b.n	800f106 <__kernel_rem_pio2+0x4e6>
 800f170:	3408      	adds	r4, #8
 800f172:	ab4a      	add	r3, sp, #296	; 0x128
 800f174:	441c      	add	r4, r3
 800f176:	462e      	mov	r6, r5
 800f178:	2000      	movs	r0, #0
 800f17a:	2100      	movs	r1, #0
 800f17c:	2e00      	cmp	r6, #0
 800f17e:	da36      	bge.n	800f1ee <__kernel_rem_pio2+0x5ce>
 800f180:	f1bb 0f00 	cmp.w	fp, #0
 800f184:	d039      	beq.n	800f1fa <__kernel_rem_pio2+0x5da>
 800f186:	4602      	mov	r2, r0
 800f188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f18c:	9c01      	ldr	r4, [sp, #4]
 800f18e:	e9c4 2300 	strd	r2, r3, [r4]
 800f192:	4602      	mov	r2, r0
 800f194:	460b      	mov	r3, r1
 800f196:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f19a:	f7f1 f875 	bl	8000288 <__aeabi_dsub>
 800f19e:	ae4c      	add	r6, sp, #304	; 0x130
 800f1a0:	2401      	movs	r4, #1
 800f1a2:	42a5      	cmp	r5, r4
 800f1a4:	da2c      	bge.n	800f200 <__kernel_rem_pio2+0x5e0>
 800f1a6:	f1bb 0f00 	cmp.w	fp, #0
 800f1aa:	d002      	beq.n	800f1b2 <__kernel_rem_pio2+0x592>
 800f1ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	9b01      	ldr	r3, [sp, #4]
 800f1b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f1b8:	e7a5      	b.n	800f106 <__kernel_rem_pio2+0x4e6>
 800f1ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f1be:	eb0d 0403 	add.w	r4, sp, r3
 800f1c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	2d00      	cmp	r5, #0
 800f1cc:	da09      	bge.n	800f1e2 <__kernel_rem_pio2+0x5c2>
 800f1ce:	f1bb 0f00 	cmp.w	fp, #0
 800f1d2:	d002      	beq.n	800f1da <__kernel_rem_pio2+0x5ba>
 800f1d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1d8:	4619      	mov	r1, r3
 800f1da:	9b01      	ldr	r3, [sp, #4]
 800f1dc:	e9c3 0100 	strd	r0, r1, [r3]
 800f1e0:	e791      	b.n	800f106 <__kernel_rem_pio2+0x4e6>
 800f1e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f1e6:	f7f1 f851 	bl	800028c <__adddf3>
 800f1ea:	3d01      	subs	r5, #1
 800f1ec:	e7ed      	b.n	800f1ca <__kernel_rem_pio2+0x5aa>
 800f1ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f1f2:	f7f1 f84b 	bl	800028c <__adddf3>
 800f1f6:	3e01      	subs	r6, #1
 800f1f8:	e7c0      	b.n	800f17c <__kernel_rem_pio2+0x55c>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	e7c5      	b.n	800f18c <__kernel_rem_pio2+0x56c>
 800f200:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f204:	f7f1 f842 	bl	800028c <__adddf3>
 800f208:	3401      	adds	r4, #1
 800f20a:	e7ca      	b.n	800f1a2 <__kernel_rem_pio2+0x582>
 800f20c:	e9da 8900 	ldrd	r8, r9, [sl]
 800f210:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f214:	9b02      	ldr	r3, [sp, #8]
 800f216:	3b01      	subs	r3, #1
 800f218:	9302      	str	r3, [sp, #8]
 800f21a:	4632      	mov	r2, r6
 800f21c:	463b      	mov	r3, r7
 800f21e:	4640      	mov	r0, r8
 800f220:	4649      	mov	r1, r9
 800f222:	f7f1 f833 	bl	800028c <__adddf3>
 800f226:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	4640      	mov	r0, r8
 800f230:	4649      	mov	r1, r9
 800f232:	f7f1 f829 	bl	8000288 <__aeabi_dsub>
 800f236:	4632      	mov	r2, r6
 800f238:	463b      	mov	r3, r7
 800f23a:	f7f1 f827 	bl	800028c <__adddf3>
 800f23e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f242:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f246:	ed8a 7b00 	vstr	d7, [sl]
 800f24a:	e76e      	b.n	800f12a <__kernel_rem_pio2+0x50a>
 800f24c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f250:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f254:	4640      	mov	r0, r8
 800f256:	4632      	mov	r2, r6
 800f258:	463b      	mov	r3, r7
 800f25a:	4649      	mov	r1, r9
 800f25c:	f7f1 f816 	bl	800028c <__adddf3>
 800f260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f264:	4602      	mov	r2, r0
 800f266:	460b      	mov	r3, r1
 800f268:	4640      	mov	r0, r8
 800f26a:	4649      	mov	r1, r9
 800f26c:	f7f1 f80c 	bl	8000288 <__aeabi_dsub>
 800f270:	4632      	mov	r2, r6
 800f272:	463b      	mov	r3, r7
 800f274:	f7f1 f80a 	bl	800028c <__adddf3>
 800f278:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f27c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f280:	ed84 7b00 	vstr	d7, [r4]
 800f284:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f288:	e755      	b.n	800f136 <__kernel_rem_pio2+0x516>
 800f28a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f28e:	f7f0 fffd 	bl	800028c <__adddf3>
 800f292:	3d01      	subs	r5, #1
 800f294:	e759      	b.n	800f14a <__kernel_rem_pio2+0x52a>
 800f296:	9b01      	ldr	r3, [sp, #4]
 800f298:	9a01      	ldr	r2, [sp, #4]
 800f29a:	601d      	str	r5, [r3, #0]
 800f29c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f2a0:	605c      	str	r4, [r3, #4]
 800f2a2:	609f      	str	r7, [r3, #8]
 800f2a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f2a8:	60d3      	str	r3, [r2, #12]
 800f2aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2ae:	6110      	str	r0, [r2, #16]
 800f2b0:	6153      	str	r3, [r2, #20]
 800f2b2:	e728      	b.n	800f106 <__kernel_rem_pio2+0x4e6>
 800f2b4:	41700000 	.word	0x41700000
 800f2b8:	3e700000 	.word	0x3e700000
 800f2bc:	00000000 	.word	0x00000000

0800f2c0 <__kernel_sin>:
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	ed2d 8b04 	vpush	{d8-d9}
 800f2c8:	eeb0 8a41 	vmov.f32	s16, s2
 800f2cc:	eef0 8a61 	vmov.f32	s17, s3
 800f2d0:	ec55 4b10 	vmov	r4, r5, d0
 800f2d4:	b083      	sub	sp, #12
 800f2d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f2da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f2de:	9001      	str	r0, [sp, #4]
 800f2e0:	da06      	bge.n	800f2f0 <__kernel_sin+0x30>
 800f2e2:	ee10 0a10 	vmov	r0, s0
 800f2e6:	4629      	mov	r1, r5
 800f2e8:	f7f1 fc36 	bl	8000b58 <__aeabi_d2iz>
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	d051      	beq.n	800f394 <__kernel_sin+0xd4>
 800f2f0:	4622      	mov	r2, r4
 800f2f2:	462b      	mov	r3, r5
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	f7f1 f97e 	bl	80005f8 <__aeabi_dmul>
 800f2fc:	4682      	mov	sl, r0
 800f2fe:	468b      	mov	fp, r1
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	4620      	mov	r0, r4
 800f306:	4629      	mov	r1, r5
 800f308:	f7f1 f976 	bl	80005f8 <__aeabi_dmul>
 800f30c:	a341      	add	r3, pc, #260	; (adr r3, 800f414 <__kernel_sin+0x154>)
 800f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f312:	4680      	mov	r8, r0
 800f314:	4689      	mov	r9, r1
 800f316:	4650      	mov	r0, sl
 800f318:	4659      	mov	r1, fp
 800f31a:	f7f1 f96d 	bl	80005f8 <__aeabi_dmul>
 800f31e:	a33f      	add	r3, pc, #252	; (adr r3, 800f41c <__kernel_sin+0x15c>)
 800f320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f324:	f7f0 ffb0 	bl	8000288 <__aeabi_dsub>
 800f328:	4652      	mov	r2, sl
 800f32a:	465b      	mov	r3, fp
 800f32c:	f7f1 f964 	bl	80005f8 <__aeabi_dmul>
 800f330:	a33c      	add	r3, pc, #240	; (adr r3, 800f424 <__kernel_sin+0x164>)
 800f332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f336:	f7f0 ffa9 	bl	800028c <__adddf3>
 800f33a:	4652      	mov	r2, sl
 800f33c:	465b      	mov	r3, fp
 800f33e:	f7f1 f95b 	bl	80005f8 <__aeabi_dmul>
 800f342:	a33a      	add	r3, pc, #232	; (adr r3, 800f42c <__kernel_sin+0x16c>)
 800f344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f348:	f7f0 ff9e 	bl	8000288 <__aeabi_dsub>
 800f34c:	4652      	mov	r2, sl
 800f34e:	465b      	mov	r3, fp
 800f350:	f7f1 f952 	bl	80005f8 <__aeabi_dmul>
 800f354:	a337      	add	r3, pc, #220	; (adr r3, 800f434 <__kernel_sin+0x174>)
 800f356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f35a:	f7f0 ff97 	bl	800028c <__adddf3>
 800f35e:	9b01      	ldr	r3, [sp, #4]
 800f360:	4606      	mov	r6, r0
 800f362:	460f      	mov	r7, r1
 800f364:	b9eb      	cbnz	r3, 800f3a2 <__kernel_sin+0xe2>
 800f366:	4602      	mov	r2, r0
 800f368:	460b      	mov	r3, r1
 800f36a:	4650      	mov	r0, sl
 800f36c:	4659      	mov	r1, fp
 800f36e:	f7f1 f943 	bl	80005f8 <__aeabi_dmul>
 800f372:	a325      	add	r3, pc, #148	; (adr r3, 800f408 <__kernel_sin+0x148>)
 800f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f378:	f7f0 ff86 	bl	8000288 <__aeabi_dsub>
 800f37c:	4642      	mov	r2, r8
 800f37e:	464b      	mov	r3, r9
 800f380:	f7f1 f93a 	bl	80005f8 <__aeabi_dmul>
 800f384:	4602      	mov	r2, r0
 800f386:	460b      	mov	r3, r1
 800f388:	4620      	mov	r0, r4
 800f38a:	4629      	mov	r1, r5
 800f38c:	f7f0 ff7e 	bl	800028c <__adddf3>
 800f390:	4604      	mov	r4, r0
 800f392:	460d      	mov	r5, r1
 800f394:	ec45 4b10 	vmov	d0, r4, r5
 800f398:	b003      	add	sp, #12
 800f39a:	ecbd 8b04 	vpop	{d8-d9}
 800f39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a2:	4b1b      	ldr	r3, [pc, #108]	; (800f410 <__kernel_sin+0x150>)
 800f3a4:	ec51 0b18 	vmov	r0, r1, d8
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	f7f1 f925 	bl	80005f8 <__aeabi_dmul>
 800f3ae:	4632      	mov	r2, r6
 800f3b0:	ec41 0b19 	vmov	d9, r0, r1
 800f3b4:	463b      	mov	r3, r7
 800f3b6:	4640      	mov	r0, r8
 800f3b8:	4649      	mov	r1, r9
 800f3ba:	f7f1 f91d 	bl	80005f8 <__aeabi_dmul>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	ec51 0b19 	vmov	r0, r1, d9
 800f3c6:	f7f0 ff5f 	bl	8000288 <__aeabi_dsub>
 800f3ca:	4652      	mov	r2, sl
 800f3cc:	465b      	mov	r3, fp
 800f3ce:	f7f1 f913 	bl	80005f8 <__aeabi_dmul>
 800f3d2:	ec53 2b18 	vmov	r2, r3, d8
 800f3d6:	f7f0 ff57 	bl	8000288 <__aeabi_dsub>
 800f3da:	a30b      	add	r3, pc, #44	; (adr r3, 800f408 <__kernel_sin+0x148>)
 800f3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3e0:	4606      	mov	r6, r0
 800f3e2:	460f      	mov	r7, r1
 800f3e4:	4640      	mov	r0, r8
 800f3e6:	4649      	mov	r1, r9
 800f3e8:	f7f1 f906 	bl	80005f8 <__aeabi_dmul>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	4639      	mov	r1, r7
 800f3f4:	f7f0 ff4a 	bl	800028c <__adddf3>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	4629      	mov	r1, r5
 800f400:	f7f0 ff42 	bl	8000288 <__aeabi_dsub>
 800f404:	e7c4      	b.n	800f390 <__kernel_sin+0xd0>
 800f406:	bf00      	nop
 800f408:	55555549 	.word	0x55555549
 800f40c:	3fc55555 	.word	0x3fc55555
 800f410:	3fe00000 	.word	0x3fe00000
 800f414:	5acfd57c 	.word	0x5acfd57c
 800f418:	3de5d93a 	.word	0x3de5d93a
 800f41c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f420:	3e5ae5e6 	.word	0x3e5ae5e6
 800f424:	57b1fe7d 	.word	0x57b1fe7d
 800f428:	3ec71de3 	.word	0x3ec71de3
 800f42c:	19c161d5 	.word	0x19c161d5
 800f430:	3f2a01a0 	.word	0x3f2a01a0
 800f434:	1110f8a6 	.word	0x1110f8a6
 800f438:	3f811111 	.word	0x3f811111
 800f43c:	00000000 	.word	0x00000000

0800f440 <atan>:
 800f440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f444:	ec55 4b10 	vmov	r4, r5, d0
 800f448:	4bc3      	ldr	r3, [pc, #780]	; (800f758 <atan+0x318>)
 800f44a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f44e:	429e      	cmp	r6, r3
 800f450:	46ab      	mov	fp, r5
 800f452:	dd18      	ble.n	800f486 <atan+0x46>
 800f454:	4bc1      	ldr	r3, [pc, #772]	; (800f75c <atan+0x31c>)
 800f456:	429e      	cmp	r6, r3
 800f458:	dc01      	bgt.n	800f45e <atan+0x1e>
 800f45a:	d109      	bne.n	800f470 <atan+0x30>
 800f45c:	b144      	cbz	r4, 800f470 <atan+0x30>
 800f45e:	4622      	mov	r2, r4
 800f460:	462b      	mov	r3, r5
 800f462:	4620      	mov	r0, r4
 800f464:	4629      	mov	r1, r5
 800f466:	f7f0 ff11 	bl	800028c <__adddf3>
 800f46a:	4604      	mov	r4, r0
 800f46c:	460d      	mov	r5, r1
 800f46e:	e006      	b.n	800f47e <atan+0x3e>
 800f470:	f1bb 0f00 	cmp.w	fp, #0
 800f474:	f300 8131 	bgt.w	800f6da <atan+0x29a>
 800f478:	a59b      	add	r5, pc, #620	; (adr r5, 800f6e8 <atan+0x2a8>)
 800f47a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f47e:	ec45 4b10 	vmov	d0, r4, r5
 800f482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f486:	4bb6      	ldr	r3, [pc, #728]	; (800f760 <atan+0x320>)
 800f488:	429e      	cmp	r6, r3
 800f48a:	dc14      	bgt.n	800f4b6 <atan+0x76>
 800f48c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f490:	429e      	cmp	r6, r3
 800f492:	dc0d      	bgt.n	800f4b0 <atan+0x70>
 800f494:	a396      	add	r3, pc, #600	; (adr r3, 800f6f0 <atan+0x2b0>)
 800f496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49a:	ee10 0a10 	vmov	r0, s0
 800f49e:	4629      	mov	r1, r5
 800f4a0:	f7f0 fef4 	bl	800028c <__adddf3>
 800f4a4:	4baf      	ldr	r3, [pc, #700]	; (800f764 <atan+0x324>)
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	f7f1 fb36 	bl	8000b18 <__aeabi_dcmpgt>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d1e6      	bne.n	800f47e <atan+0x3e>
 800f4b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f4b4:	e02b      	b.n	800f50e <atan+0xce>
 800f4b6:	f000 f963 	bl	800f780 <fabs>
 800f4ba:	4bab      	ldr	r3, [pc, #684]	; (800f768 <atan+0x328>)
 800f4bc:	429e      	cmp	r6, r3
 800f4be:	ec55 4b10 	vmov	r4, r5, d0
 800f4c2:	f300 80bf 	bgt.w	800f644 <atan+0x204>
 800f4c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f4ca:	429e      	cmp	r6, r3
 800f4cc:	f300 80a0 	bgt.w	800f610 <atan+0x1d0>
 800f4d0:	ee10 2a10 	vmov	r2, s0
 800f4d4:	ee10 0a10 	vmov	r0, s0
 800f4d8:	462b      	mov	r3, r5
 800f4da:	4629      	mov	r1, r5
 800f4dc:	f7f0 fed6 	bl	800028c <__adddf3>
 800f4e0:	4ba0      	ldr	r3, [pc, #640]	; (800f764 <atan+0x324>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f7f0 fed0 	bl	8000288 <__aeabi_dsub>
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	4606      	mov	r6, r0
 800f4ec:	460f      	mov	r7, r1
 800f4ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f4f2:	4620      	mov	r0, r4
 800f4f4:	4629      	mov	r1, r5
 800f4f6:	f7f0 fec9 	bl	800028c <__adddf3>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	4630      	mov	r0, r6
 800f500:	4639      	mov	r1, r7
 800f502:	f7f1 f9a3 	bl	800084c <__aeabi_ddiv>
 800f506:	f04f 0a00 	mov.w	sl, #0
 800f50a:	4604      	mov	r4, r0
 800f50c:	460d      	mov	r5, r1
 800f50e:	4622      	mov	r2, r4
 800f510:	462b      	mov	r3, r5
 800f512:	4620      	mov	r0, r4
 800f514:	4629      	mov	r1, r5
 800f516:	f7f1 f86f 	bl	80005f8 <__aeabi_dmul>
 800f51a:	4602      	mov	r2, r0
 800f51c:	460b      	mov	r3, r1
 800f51e:	4680      	mov	r8, r0
 800f520:	4689      	mov	r9, r1
 800f522:	f7f1 f869 	bl	80005f8 <__aeabi_dmul>
 800f526:	a374      	add	r3, pc, #464	; (adr r3, 800f6f8 <atan+0x2b8>)
 800f528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f52c:	4606      	mov	r6, r0
 800f52e:	460f      	mov	r7, r1
 800f530:	f7f1 f862 	bl	80005f8 <__aeabi_dmul>
 800f534:	a372      	add	r3, pc, #456	; (adr r3, 800f700 <atan+0x2c0>)
 800f536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f53a:	f7f0 fea7 	bl	800028c <__adddf3>
 800f53e:	4632      	mov	r2, r6
 800f540:	463b      	mov	r3, r7
 800f542:	f7f1 f859 	bl	80005f8 <__aeabi_dmul>
 800f546:	a370      	add	r3, pc, #448	; (adr r3, 800f708 <atan+0x2c8>)
 800f548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f54c:	f7f0 fe9e 	bl	800028c <__adddf3>
 800f550:	4632      	mov	r2, r6
 800f552:	463b      	mov	r3, r7
 800f554:	f7f1 f850 	bl	80005f8 <__aeabi_dmul>
 800f558:	a36d      	add	r3, pc, #436	; (adr r3, 800f710 <atan+0x2d0>)
 800f55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55e:	f7f0 fe95 	bl	800028c <__adddf3>
 800f562:	4632      	mov	r2, r6
 800f564:	463b      	mov	r3, r7
 800f566:	f7f1 f847 	bl	80005f8 <__aeabi_dmul>
 800f56a:	a36b      	add	r3, pc, #428	; (adr r3, 800f718 <atan+0x2d8>)
 800f56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f570:	f7f0 fe8c 	bl	800028c <__adddf3>
 800f574:	4632      	mov	r2, r6
 800f576:	463b      	mov	r3, r7
 800f578:	f7f1 f83e 	bl	80005f8 <__aeabi_dmul>
 800f57c:	a368      	add	r3, pc, #416	; (adr r3, 800f720 <atan+0x2e0>)
 800f57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f582:	f7f0 fe83 	bl	800028c <__adddf3>
 800f586:	4642      	mov	r2, r8
 800f588:	464b      	mov	r3, r9
 800f58a:	f7f1 f835 	bl	80005f8 <__aeabi_dmul>
 800f58e:	a366      	add	r3, pc, #408	; (adr r3, 800f728 <atan+0x2e8>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	4680      	mov	r8, r0
 800f596:	4689      	mov	r9, r1
 800f598:	4630      	mov	r0, r6
 800f59a:	4639      	mov	r1, r7
 800f59c:	f7f1 f82c 	bl	80005f8 <__aeabi_dmul>
 800f5a0:	a363      	add	r3, pc, #396	; (adr r3, 800f730 <atan+0x2f0>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f7f0 fe6f 	bl	8000288 <__aeabi_dsub>
 800f5aa:	4632      	mov	r2, r6
 800f5ac:	463b      	mov	r3, r7
 800f5ae:	f7f1 f823 	bl	80005f8 <__aeabi_dmul>
 800f5b2:	a361      	add	r3, pc, #388	; (adr r3, 800f738 <atan+0x2f8>)
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	f7f0 fe66 	bl	8000288 <__aeabi_dsub>
 800f5bc:	4632      	mov	r2, r6
 800f5be:	463b      	mov	r3, r7
 800f5c0:	f7f1 f81a 	bl	80005f8 <__aeabi_dmul>
 800f5c4:	a35e      	add	r3, pc, #376	; (adr r3, 800f740 <atan+0x300>)
 800f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ca:	f7f0 fe5d 	bl	8000288 <__aeabi_dsub>
 800f5ce:	4632      	mov	r2, r6
 800f5d0:	463b      	mov	r3, r7
 800f5d2:	f7f1 f811 	bl	80005f8 <__aeabi_dmul>
 800f5d6:	a35c      	add	r3, pc, #368	; (adr r3, 800f748 <atan+0x308>)
 800f5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5dc:	f7f0 fe54 	bl	8000288 <__aeabi_dsub>
 800f5e0:	4632      	mov	r2, r6
 800f5e2:	463b      	mov	r3, r7
 800f5e4:	f7f1 f808 	bl	80005f8 <__aeabi_dmul>
 800f5e8:	4602      	mov	r2, r0
 800f5ea:	460b      	mov	r3, r1
 800f5ec:	4640      	mov	r0, r8
 800f5ee:	4649      	mov	r1, r9
 800f5f0:	f7f0 fe4c 	bl	800028c <__adddf3>
 800f5f4:	4622      	mov	r2, r4
 800f5f6:	462b      	mov	r3, r5
 800f5f8:	f7f0 fffe 	bl	80005f8 <__aeabi_dmul>
 800f5fc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800f600:	4602      	mov	r2, r0
 800f602:	460b      	mov	r3, r1
 800f604:	d14b      	bne.n	800f69e <atan+0x25e>
 800f606:	4620      	mov	r0, r4
 800f608:	4629      	mov	r1, r5
 800f60a:	f7f0 fe3d 	bl	8000288 <__aeabi_dsub>
 800f60e:	e72c      	b.n	800f46a <atan+0x2a>
 800f610:	ee10 0a10 	vmov	r0, s0
 800f614:	4b53      	ldr	r3, [pc, #332]	; (800f764 <atan+0x324>)
 800f616:	2200      	movs	r2, #0
 800f618:	4629      	mov	r1, r5
 800f61a:	f7f0 fe35 	bl	8000288 <__aeabi_dsub>
 800f61e:	4b51      	ldr	r3, [pc, #324]	; (800f764 <atan+0x324>)
 800f620:	4606      	mov	r6, r0
 800f622:	460f      	mov	r7, r1
 800f624:	2200      	movs	r2, #0
 800f626:	4620      	mov	r0, r4
 800f628:	4629      	mov	r1, r5
 800f62a:	f7f0 fe2f 	bl	800028c <__adddf3>
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	4630      	mov	r0, r6
 800f634:	4639      	mov	r1, r7
 800f636:	f7f1 f909 	bl	800084c <__aeabi_ddiv>
 800f63a:	f04f 0a01 	mov.w	sl, #1
 800f63e:	4604      	mov	r4, r0
 800f640:	460d      	mov	r5, r1
 800f642:	e764      	b.n	800f50e <atan+0xce>
 800f644:	4b49      	ldr	r3, [pc, #292]	; (800f76c <atan+0x32c>)
 800f646:	429e      	cmp	r6, r3
 800f648:	da1d      	bge.n	800f686 <atan+0x246>
 800f64a:	ee10 0a10 	vmov	r0, s0
 800f64e:	4b48      	ldr	r3, [pc, #288]	; (800f770 <atan+0x330>)
 800f650:	2200      	movs	r2, #0
 800f652:	4629      	mov	r1, r5
 800f654:	f7f0 fe18 	bl	8000288 <__aeabi_dsub>
 800f658:	4b45      	ldr	r3, [pc, #276]	; (800f770 <atan+0x330>)
 800f65a:	4606      	mov	r6, r0
 800f65c:	460f      	mov	r7, r1
 800f65e:	2200      	movs	r2, #0
 800f660:	4620      	mov	r0, r4
 800f662:	4629      	mov	r1, r5
 800f664:	f7f0 ffc8 	bl	80005f8 <__aeabi_dmul>
 800f668:	4b3e      	ldr	r3, [pc, #248]	; (800f764 <atan+0x324>)
 800f66a:	2200      	movs	r2, #0
 800f66c:	f7f0 fe0e 	bl	800028c <__adddf3>
 800f670:	4602      	mov	r2, r0
 800f672:	460b      	mov	r3, r1
 800f674:	4630      	mov	r0, r6
 800f676:	4639      	mov	r1, r7
 800f678:	f7f1 f8e8 	bl	800084c <__aeabi_ddiv>
 800f67c:	f04f 0a02 	mov.w	sl, #2
 800f680:	4604      	mov	r4, r0
 800f682:	460d      	mov	r5, r1
 800f684:	e743      	b.n	800f50e <atan+0xce>
 800f686:	462b      	mov	r3, r5
 800f688:	ee10 2a10 	vmov	r2, s0
 800f68c:	4939      	ldr	r1, [pc, #228]	; (800f774 <atan+0x334>)
 800f68e:	2000      	movs	r0, #0
 800f690:	f7f1 f8dc 	bl	800084c <__aeabi_ddiv>
 800f694:	f04f 0a03 	mov.w	sl, #3
 800f698:	4604      	mov	r4, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	e737      	b.n	800f50e <atan+0xce>
 800f69e:	4b36      	ldr	r3, [pc, #216]	; (800f778 <atan+0x338>)
 800f6a0:	4e36      	ldr	r6, [pc, #216]	; (800f77c <atan+0x33c>)
 800f6a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f6a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f6aa:	e9da 2300 	ldrd	r2, r3, [sl]
 800f6ae:	f7f0 fdeb 	bl	8000288 <__aeabi_dsub>
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	462b      	mov	r3, r5
 800f6b6:	f7f0 fde7 	bl	8000288 <__aeabi_dsub>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	460b      	mov	r3, r1
 800f6be:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f6c2:	f7f0 fde1 	bl	8000288 <__aeabi_dsub>
 800f6c6:	f1bb 0f00 	cmp.w	fp, #0
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	460d      	mov	r5, r1
 800f6ce:	f6bf aed6 	bge.w	800f47e <atan+0x3e>
 800f6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f6d6:	461d      	mov	r5, r3
 800f6d8:	e6d1      	b.n	800f47e <atan+0x3e>
 800f6da:	a51d      	add	r5, pc, #116	; (adr r5, 800f750 <atan+0x310>)
 800f6dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f6e0:	e6cd      	b.n	800f47e <atan+0x3e>
 800f6e2:	bf00      	nop
 800f6e4:	f3af 8000 	nop.w
 800f6e8:	54442d18 	.word	0x54442d18
 800f6ec:	bff921fb 	.word	0xbff921fb
 800f6f0:	8800759c 	.word	0x8800759c
 800f6f4:	7e37e43c 	.word	0x7e37e43c
 800f6f8:	e322da11 	.word	0xe322da11
 800f6fc:	3f90ad3a 	.word	0x3f90ad3a
 800f700:	24760deb 	.word	0x24760deb
 800f704:	3fa97b4b 	.word	0x3fa97b4b
 800f708:	a0d03d51 	.word	0xa0d03d51
 800f70c:	3fb10d66 	.word	0x3fb10d66
 800f710:	c54c206e 	.word	0xc54c206e
 800f714:	3fb745cd 	.word	0x3fb745cd
 800f718:	920083ff 	.word	0x920083ff
 800f71c:	3fc24924 	.word	0x3fc24924
 800f720:	5555550d 	.word	0x5555550d
 800f724:	3fd55555 	.word	0x3fd55555
 800f728:	2c6a6c2f 	.word	0x2c6a6c2f
 800f72c:	bfa2b444 	.word	0xbfa2b444
 800f730:	52defd9a 	.word	0x52defd9a
 800f734:	3fadde2d 	.word	0x3fadde2d
 800f738:	af749a6d 	.word	0xaf749a6d
 800f73c:	3fb3b0f2 	.word	0x3fb3b0f2
 800f740:	fe231671 	.word	0xfe231671
 800f744:	3fbc71c6 	.word	0x3fbc71c6
 800f748:	9998ebc4 	.word	0x9998ebc4
 800f74c:	3fc99999 	.word	0x3fc99999
 800f750:	54442d18 	.word	0x54442d18
 800f754:	3ff921fb 	.word	0x3ff921fb
 800f758:	440fffff 	.word	0x440fffff
 800f75c:	7ff00000 	.word	0x7ff00000
 800f760:	3fdbffff 	.word	0x3fdbffff
 800f764:	3ff00000 	.word	0x3ff00000
 800f768:	3ff2ffff 	.word	0x3ff2ffff
 800f76c:	40038000 	.word	0x40038000
 800f770:	3ff80000 	.word	0x3ff80000
 800f774:	bff00000 	.word	0xbff00000
 800f778:	08010cb0 	.word	0x08010cb0
 800f77c:	08010c90 	.word	0x08010c90

0800f780 <fabs>:
 800f780:	ec51 0b10 	vmov	r0, r1, d0
 800f784:	ee10 2a10 	vmov	r2, s0
 800f788:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f78c:	ec43 2b10 	vmov	d0, r2, r3
 800f790:	4770      	bx	lr
 800f792:	0000      	movs	r0, r0
 800f794:	0000      	movs	r0, r0
	...

0800f798 <floor>:
 800f798:	ec51 0b10 	vmov	r0, r1, d0
 800f79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f7a4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f7a8:	2e13      	cmp	r6, #19
 800f7aa:	ee10 5a10 	vmov	r5, s0
 800f7ae:	ee10 8a10 	vmov	r8, s0
 800f7b2:	460c      	mov	r4, r1
 800f7b4:	dc32      	bgt.n	800f81c <floor+0x84>
 800f7b6:	2e00      	cmp	r6, #0
 800f7b8:	da14      	bge.n	800f7e4 <floor+0x4c>
 800f7ba:	a333      	add	r3, pc, #204	; (adr r3, 800f888 <floor+0xf0>)
 800f7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c0:	f7f0 fd64 	bl	800028c <__adddf3>
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	f7f1 f9a6 	bl	8000b18 <__aeabi_dcmpgt>
 800f7cc:	b138      	cbz	r0, 800f7de <floor+0x46>
 800f7ce:	2c00      	cmp	r4, #0
 800f7d0:	da57      	bge.n	800f882 <floor+0xea>
 800f7d2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f7d6:	431d      	orrs	r5, r3
 800f7d8:	d001      	beq.n	800f7de <floor+0x46>
 800f7da:	4c2d      	ldr	r4, [pc, #180]	; (800f890 <floor+0xf8>)
 800f7dc:	2500      	movs	r5, #0
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	e025      	b.n	800f830 <floor+0x98>
 800f7e4:	4f2b      	ldr	r7, [pc, #172]	; (800f894 <floor+0xfc>)
 800f7e6:	4137      	asrs	r7, r6
 800f7e8:	ea01 0307 	and.w	r3, r1, r7
 800f7ec:	4303      	orrs	r3, r0
 800f7ee:	d01f      	beq.n	800f830 <floor+0x98>
 800f7f0:	a325      	add	r3, pc, #148	; (adr r3, 800f888 <floor+0xf0>)
 800f7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f6:	f7f0 fd49 	bl	800028c <__adddf3>
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	f7f1 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 800f802:	2800      	cmp	r0, #0
 800f804:	d0eb      	beq.n	800f7de <floor+0x46>
 800f806:	2c00      	cmp	r4, #0
 800f808:	bfbe      	ittt	lt
 800f80a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f80e:	fa43 f606 	asrlt.w	r6, r3, r6
 800f812:	19a4      	addlt	r4, r4, r6
 800f814:	ea24 0407 	bic.w	r4, r4, r7
 800f818:	2500      	movs	r5, #0
 800f81a:	e7e0      	b.n	800f7de <floor+0x46>
 800f81c:	2e33      	cmp	r6, #51	; 0x33
 800f81e:	dd0b      	ble.n	800f838 <floor+0xa0>
 800f820:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f824:	d104      	bne.n	800f830 <floor+0x98>
 800f826:	ee10 2a10 	vmov	r2, s0
 800f82a:	460b      	mov	r3, r1
 800f82c:	f7f0 fd2e 	bl	800028c <__adddf3>
 800f830:	ec41 0b10 	vmov	d0, r0, r1
 800f834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f838:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f83c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f840:	fa23 f707 	lsr.w	r7, r3, r7
 800f844:	4207      	tst	r7, r0
 800f846:	d0f3      	beq.n	800f830 <floor+0x98>
 800f848:	a30f      	add	r3, pc, #60	; (adr r3, 800f888 <floor+0xf0>)
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	f7f0 fd1d 	bl	800028c <__adddf3>
 800f852:	2200      	movs	r2, #0
 800f854:	2300      	movs	r3, #0
 800f856:	f7f1 f95f 	bl	8000b18 <__aeabi_dcmpgt>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d0bf      	beq.n	800f7de <floor+0x46>
 800f85e:	2c00      	cmp	r4, #0
 800f860:	da02      	bge.n	800f868 <floor+0xd0>
 800f862:	2e14      	cmp	r6, #20
 800f864:	d103      	bne.n	800f86e <floor+0xd6>
 800f866:	3401      	adds	r4, #1
 800f868:	ea25 0507 	bic.w	r5, r5, r7
 800f86c:	e7b7      	b.n	800f7de <floor+0x46>
 800f86e:	2301      	movs	r3, #1
 800f870:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f874:	fa03 f606 	lsl.w	r6, r3, r6
 800f878:	4435      	add	r5, r6
 800f87a:	4545      	cmp	r5, r8
 800f87c:	bf38      	it	cc
 800f87e:	18e4      	addcc	r4, r4, r3
 800f880:	e7f2      	b.n	800f868 <floor+0xd0>
 800f882:	2500      	movs	r5, #0
 800f884:	462c      	mov	r4, r5
 800f886:	e7aa      	b.n	800f7de <floor+0x46>
 800f888:	8800759c 	.word	0x8800759c
 800f88c:	7e37e43c 	.word	0x7e37e43c
 800f890:	bff00000 	.word	0xbff00000
 800f894:	000fffff 	.word	0x000fffff

0800f898 <nan>:
 800f898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f8a0 <nan+0x8>
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	00000000 	.word	0x00000000
 800f8a4:	7ff80000 	.word	0x7ff80000

0800f8a8 <scalbn>:
 800f8a8:	b570      	push	{r4, r5, r6, lr}
 800f8aa:	ec55 4b10 	vmov	r4, r5, d0
 800f8ae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f8b2:	4606      	mov	r6, r0
 800f8b4:	462b      	mov	r3, r5
 800f8b6:	b99a      	cbnz	r2, 800f8e0 <scalbn+0x38>
 800f8b8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f8bc:	4323      	orrs	r3, r4
 800f8be:	d036      	beq.n	800f92e <scalbn+0x86>
 800f8c0:	4b39      	ldr	r3, [pc, #228]	; (800f9a8 <scalbn+0x100>)
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	ee10 0a10 	vmov	r0, s0
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f7f0 fe95 	bl	80005f8 <__aeabi_dmul>
 800f8ce:	4b37      	ldr	r3, [pc, #220]	; (800f9ac <scalbn+0x104>)
 800f8d0:	429e      	cmp	r6, r3
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	460d      	mov	r5, r1
 800f8d6:	da10      	bge.n	800f8fa <scalbn+0x52>
 800f8d8:	a32b      	add	r3, pc, #172	; (adr r3, 800f988 <scalbn+0xe0>)
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	e03a      	b.n	800f956 <scalbn+0xae>
 800f8e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f8e4:	428a      	cmp	r2, r1
 800f8e6:	d10c      	bne.n	800f902 <scalbn+0x5a>
 800f8e8:	ee10 2a10 	vmov	r2, s0
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	4629      	mov	r1, r5
 800f8f0:	f7f0 fccc 	bl	800028c <__adddf3>
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	460d      	mov	r5, r1
 800f8f8:	e019      	b.n	800f92e <scalbn+0x86>
 800f8fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f8fe:	460b      	mov	r3, r1
 800f900:	3a36      	subs	r2, #54	; 0x36
 800f902:	4432      	add	r2, r6
 800f904:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f908:	428a      	cmp	r2, r1
 800f90a:	dd08      	ble.n	800f91e <scalbn+0x76>
 800f90c:	2d00      	cmp	r5, #0
 800f90e:	a120      	add	r1, pc, #128	; (adr r1, 800f990 <scalbn+0xe8>)
 800f910:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f914:	da1c      	bge.n	800f950 <scalbn+0xa8>
 800f916:	a120      	add	r1, pc, #128	; (adr r1, 800f998 <scalbn+0xf0>)
 800f918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f91c:	e018      	b.n	800f950 <scalbn+0xa8>
 800f91e:	2a00      	cmp	r2, #0
 800f920:	dd08      	ble.n	800f934 <scalbn+0x8c>
 800f922:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f926:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f92a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f92e:	ec45 4b10 	vmov	d0, r4, r5
 800f932:	bd70      	pop	{r4, r5, r6, pc}
 800f934:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f938:	da19      	bge.n	800f96e <scalbn+0xc6>
 800f93a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f93e:	429e      	cmp	r6, r3
 800f940:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f944:	dd0a      	ble.n	800f95c <scalbn+0xb4>
 800f946:	a112      	add	r1, pc, #72	; (adr r1, 800f990 <scalbn+0xe8>)
 800f948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1e2      	bne.n	800f916 <scalbn+0x6e>
 800f950:	a30f      	add	r3, pc, #60	; (adr r3, 800f990 <scalbn+0xe8>)
 800f952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f956:	f7f0 fe4f 	bl	80005f8 <__aeabi_dmul>
 800f95a:	e7cb      	b.n	800f8f4 <scalbn+0x4c>
 800f95c:	a10a      	add	r1, pc, #40	; (adr r1, 800f988 <scalbn+0xe0>)
 800f95e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d0b8      	beq.n	800f8d8 <scalbn+0x30>
 800f966:	a10e      	add	r1, pc, #56	; (adr r1, 800f9a0 <scalbn+0xf8>)
 800f968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f96c:	e7b4      	b.n	800f8d8 <scalbn+0x30>
 800f96e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f972:	3236      	adds	r2, #54	; 0x36
 800f974:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f978:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f97c:	4620      	mov	r0, r4
 800f97e:	4b0c      	ldr	r3, [pc, #48]	; (800f9b0 <scalbn+0x108>)
 800f980:	2200      	movs	r2, #0
 800f982:	e7e8      	b.n	800f956 <scalbn+0xae>
 800f984:	f3af 8000 	nop.w
 800f988:	c2f8f359 	.word	0xc2f8f359
 800f98c:	01a56e1f 	.word	0x01a56e1f
 800f990:	8800759c 	.word	0x8800759c
 800f994:	7e37e43c 	.word	0x7e37e43c
 800f998:	8800759c 	.word	0x8800759c
 800f99c:	fe37e43c 	.word	0xfe37e43c
 800f9a0:	c2f8f359 	.word	0xc2f8f359
 800f9a4:	81a56e1f 	.word	0x81a56e1f
 800f9a8:	43500000 	.word	0x43500000
 800f9ac:	ffff3cb0 	.word	0xffff3cb0
 800f9b0:	3c900000 	.word	0x3c900000

0800f9b4 <_init>:
 800f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b6:	bf00      	nop
 800f9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ba:	bc08      	pop	{r3}
 800f9bc:	469e      	mov	lr, r3
 800f9be:	4770      	bx	lr

0800f9c0 <_fini>:
 800f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c2:	bf00      	nop
 800f9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9c6:	bc08      	pop	{r3}
 800f9c8:	469e      	mov	lr, r3
 800f9ca:	4770      	bx	lr
